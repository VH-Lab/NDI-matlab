% file: +ndi/+setup/+NDIMaker/treatmentMaker.m
classdef treatmentMaker < handle
%TREATMENTMAKER A class for creating and adding NDI treatment documents from a table.
%
%   This class provides methods to convert a standardized treatment table,
%   typically generated by a ndi.setup.NDIMaker.TreatmentCreator subclass,
%   into NDI documents and add them to a session.
    properties
        % No public properties are defined for this class.
    end
    methods
        function obj = treatmentMaker()
            %TREATMENTMAKER - Construct an instance of the treatmentMaker class.
            %
            %   OBJ = NDI.SETUP.NDIMAKER.TREATMENTMAKER()
            %
            %   Creates a new treatmentMaker object.
            %
        end
        function [created_docs, report] = addTreatmentsFromTable(obj, S, treatmentTable, options)
            %ADDTREATMENTSFROMTABLE - Create and add NDI treatment documents from a table.
            %
            %   [CREATED_DOCS, REPORT] = ADDTREATMENTSFROMTABLE(OBJ, S, TREATMENTTABLE, ...)
            %
            %   This method iterates through each row of the TREATMENTTABLE, creates the
            %   appropriate NDI document based on the 'treatmentType' column, and adds
            %   it to the NDI session S.
            %
            %   Inputs:
            %       obj (ndi.setup.NDIMaker.treatmentMaker) - The instance of this class.
            %       S (ndi.session) - The NDI session object to which documents will be added.
            %       treatmentTable (table) - A table of treatment information, conforming to the
            %                                format specified by ndi.setup.NDIMaker.TreatmentCreator.
            %
            %   Optional Name-Value Arguments:
            %       doAdd (logical) - If true (default), the created documents are added to the
            %                         session database. If false, they are only returned.
            %
            %   Outputs:
            %       created_docs (cell) - A cell array of the new ndi.document objects that were created.
            %       report (struct) - A structure detailing which rows were processed successfully
            %                         and which failed.
            %
            arguments
                obj (1,1) ndi.setup.NDIMaker.treatmentMaker
                S (1,1) ndi.session
                treatmentTable table
                options.doAdd (1,1) logical = true
            end
            created_docs = {};
            report.success = logical([]);
            report.errors = {};
            % Step 1: Validate the input table has the base required columns
            base_req = {'treatmentType', 'treatment', 'stringValue', 'numericValue', 'subjectIdentifier', 'sessionPath'};
            ndi.validators.mustHaveRequiredColumns(treatmentTable, base_req);
            % Step 2: Efficiently map subject identifiers to NDI document IDs
            subject_docs = S.database_search(ndi.query('','isa','subject'));
            subject_map = containers.Map('KeyType','char','ValueType','char');
            for i=1:numel(subject_docs)
                subject_map(subject_docs{i}.document_properties.subject.local_identifier) = subject_docs{i}.id();
            end
            % Step 3: Iterate through the table and create documents
            for i=1:height(treatmentTable)
                row = treatmentTable(i,:);
                try
                    new_doc = obj.create_doc_from_row(S, row, subject_map);
                    if ~isempty(new_doc)
                        created_docs{end+1} = new_doc;
                    end
                    report.success(i) = true;
                    report.errors{i} = '';
                catch ME
                    report.success(i) = false;
                    report.errors{i} = ME.message;
                    warning('Failed to create document for row %d: %s', i, ME.message);
                end
            end
            % Step 4: Add documents to the database if requested
            if options.doAdd && ~isempty(created_docs)
                S.database_add(created_docs);
            end
        end
    end % public methods
    methods (Access = private)
        function doc = create_doc_from_row(obj, S, tableRow, subject_map)
            %CREATE_DOC_FROM_ROW - Private helper to create a single document from a table row.
            
            doc = [];
            subject_id_str = char(tableRow.subjectIdentifier);
            if ~isKey(subject_map, subject_id_str)
                error('Subject with identifier "%s" not found in the session.', subject_id_str);
            end
            subject_doc_id = subject_map(subject_id_str);
            treatmentType = char(tableRow.treatmentType);
            switch lower(treatmentType)
                case 'treatment'
                    doc = obj.create_treatment_doc(S, tableRow, subject_doc_id);
                case 'treatment_drug'
                    doc = obj.create_treatment_drug_doc(S, tableRow, subject_doc_id);
                case 'virus_injection' % CORRECTED from 'treatment_virus'
                    doc = obj.create_virus_injection_doc(S, tableRow, subject_doc_id);
                otherwise
                    error('Unknown treatmentType: "%s". Must be "treatment", "treatment_drug", or "virus_injection".', treatmentType);
            end
        end
        function doc = create_treatment_doc(~, S, tableRow, subject_doc_id)
            % Creates a standard 'treatment' document
            [id, name] = ndi.ontology.lookup(char(tableRow.treatment));
            if isempty(id)
                error('Could not find ontology entry for treatment: %s', char(tableRow.treatment));
            end
            
            treatment_struct.ontologyName = id;
            treatment_struct.name = name;
            treatment_struct.string_value = char(tableRow.stringValue);
            treatment_struct.numeric_value = tableRow.numericValue;
            doc = S.newdocument('treatment', 'treatment', treatment_struct);
            doc = doc.set_dependency_value('subject_id', subject_doc_id);
        end
        function doc = create_treatment_drug_doc(~, S, tableRow, subject_doc_id)
            % Creates a 'treatment_drug' document
            req_cols = {'location_ontologyName', 'location_name', 'mixture_table', ...
                        'administration_onset_time', 'administration_offset_time', 'administration_duration'};
            ndi.validators.mustHaveRequiredColumns(tableRow, req_cols);
            drug_struct.location_ontologyName = char(tableRow.location_ontologyName);
            drug_struct.location_name = char(tableRow.location_name);
            drug_struct.mixture_table = char(tableRow.mixture_table);
            drug_struct.administration_onset_time = char(tableRow.administration_onset_time);
            drug_struct.administration_offset_time = char(tableRow.administration_offset_time);
            drug_struct.administration_duration = tableRow.administration_duration;
            
            doc = S.newdocument('treatment_drug', 'treatment_drug', drug_struct);
            doc = doc.set_dependency_value('subject_id', subject_doc_id);
        end
        function doc = create_virus_injection_doc(~, S, tableRow, subject_doc_id)
            % Creates a 'virus_injection' document
            req_cols = {'virus_OntologyName', 'virus_name', 'virusLocation_OntologyName', 'virusLocation_name', ...
                        'virus_AdministrationDate', 'virus_AdministrationPND', 'dilution', ...
                        'diluent_OntologyName', 'diluent_name'};
            ndi.validators.mustHaveRequiredColumns(tableRow, req_cols);
            
            virus_struct.virus_OntologyName = char(tableRow.virus_OntologyName);
            virus_struct.virus_name = char(tableRow.virus_name);
            virus_struct.virusLocation_OntologyName = char(tableRow.virusLocation_OntologyName);
            virus_struct.virusLocation_name = char(tableRow.virusLocation_name);
            virus_struct.virus_AdministrationDate = char(tableRow.virus_AdministrationDate);
            virus_struct.virus_AdministrationPND = double(tableRow.virus_AdministrationPND);
            virus_struct.dilution = double(tableRow.dilution);
            virus_struct.diluent_OntologyName = char(tableRow.diluent_OntologyName);
            virus_struct.diluent_name = char(tableRow.diluent_name);
            doc = S.newdocument('virus_injection', 'virus_injection', virus_struct);
            doc = doc.set_dependency_value('subject_id', subject_doc_id);
        end
    end % private methods
end % classdef
