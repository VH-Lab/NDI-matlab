% Location: fullfile(ndi.common.PathConstants.RootFolder,'test','+ndi','+unittest','+ontology','TestOntologyLookup.m')

classdef TestOntologyLookup < matlab.unittest.TestCase
    % TestOntologyLookup - Unit tests for the main ndi.ontology.lookup function.
    %
    %   Uses TestParameterDefinition methods to load test cases from JSON.
    %
    %   Requires an active internet connection to query external APIs.

    properties (TestParameter)
        % Define the testCases parameter - its values will be generated by initializeTestCases
        testCases
    end

    methods (Static, TestParameterDefinition)
        % This method generates the values for the 'testCases' TestParameter
        function testCases = initializeTestCases()
            % Call the static loading function using the fully qualified name
            % Inside a method, this resolution should be reliable.
             try
                 testCases = ndi.unittest.ontology.TestOntologyLookup.loadOntologyTestCases();
             catch ME
                 % Throw a specific error if loading fails during parameter generation
                 error('TestOntologyLookup:ParameterGenerationFailed', ...
                       'Failed to generate test parameters by loading JSON: %s', ME.message);
             end
        end
    end

    methods (Test)
        % The main test method, parameterized by testCases.
        function testLookupFunctionality(testCase, testCases)
            % testCases here refers to a single element (a struct) from the testCases cell array for each iteration.

            lookupStr = testCases.lookup_string;
            shouldSucceed = testCases.should_succeed;
            expectedID = testCases.expected_id;
            expectedName = testCases.expected_name;

            % Create function handle for the call we want to test
            funcToTest = @() ndi.ontology.lookup(lookupStr);

            if shouldSucceed
                % Test Case: Expected to Succeed
                testCase.log(matlab.unittest.Verbosity.Detailed, sprintf('Testing SUCCESS case: "%s"', lookupStr));

                % Verify it runs without error and capture outputs
                try
                    [id, name, ~, ~, ~] = funcToTest(); % Capture actual results

                    % Verify ID matches expected ID
                    testCase.verifyEqual(id, expectedID, ...
                        sprintf('ID mismatch for successful lookup of "%s". Expected "%s", Got "%s".', ...
                                lookupStr, expectedID, id));

                    % --- Modified Name Verification ---
                    % Verify Name matches expected Name (ignore case) manually
                    actualName = name; % Get the actual name
                    areNamesEqual = strcmpi(actualName, expectedName); % Perform case-insensitive compare
                    testCase.verifyTrue(areNamesEqual, ... % Verify the logical result is true
                        sprintf('Name mismatch for successful lookup of "%s". Expected "%s" (ignoring case), Got "%s".', ...
                                lookupStr, expectedName, actualName));
                    % --- End of Modified Name Verification ---

                catch ME
                    % If an unexpected error occurs during a success case, fail the test
                    testCase.verifyFail(sprintf('Expected success for "%s", but got an error: %s (%s)', ...
                                               lookupStr, ME.message, ME.identifier));
                end

            else
                % Test Case: Expected to Fail (throw an error)
                testCase.log(matlab.unittest.Verbosity.Detailed, sprintf('Testing FAILURE case: "%s"', lookupStr));

                % Verify that calling the function throws any MException
                testCase.verifyError(funcToTest, ?MException, ...
                    sprintf('Expected an error for lookup of "%s", but none occurred.', lookupStr));
            end
        end
    end % methods (Test)

    methods (Static)
        % Helper function to load test cases from JSON file.
        % Returns a CELL ARRAY of structs.
        function testCasesCellArray = loadOntologyTestCases()
            % Construct the file path using NDI path constants
            try
                filePath = fullfile(ndi.common.PathConstants.RootFolder,'tests','+ndi','+unittest','+ontology','ontology_lookup_tests.json');
            catch ME
                 error('TestOntologyLookup:PathConstantError', ...
                       'Could not access ndi.common.PathConstants.RootFolder. Ensure NDI paths are set up correctly. Original error: %s', ME.message);
            end

            if ~exist(filePath, 'file')
                error('TestOntologyLookup:JSONNotFound', 'Test case JSON file not found: %s', filePath);
            end

            try
                jsonData = fileread(filePath);
                decodedData = jsondecode(jsonData);

                if isfield(decodedData, 'ontology_lookup_tests') && isstruct(decodedData.ontology_lookup_tests)
                     testCasesStructArray = decodedData.ontology_lookup_tests;
                     if isempty(testCasesStructArray)
                          error('TestOntologyLookup:JSONEmpty', 'Test case JSON file "%s" contains an empty "ontology_lookup_tests" array.', filePath);
                     end

                     % Convert struct array to cell array for TestParameter
                     numCases = numel(testCasesStructArray);
                     testCasesCellArray = cell(1, numCases);
                     for i = 1:numCases
                         testCasesCellArray{i} = testCasesStructArray(i);
                     end
                else
                    error('TestOntologyLookup:JSONFormatError', 'Test case JSON file "%s" does not contain the expected "ontology_lookup_tests" structure array field.', filePath);
                end

            catch ME
                 error('TestOntologyLookup:JSONError', 'Failed to load or decode test case JSON file "%s": %s', filePath, ME.message);
            end
        end
    end % methods (Static)

end % classdef


