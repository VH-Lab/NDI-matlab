{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NDI About NDI (Neuroscience Data Interface) is a cross-platform interface standard for reading neuroscience data and storing the results of analyses. Who inspires NDI? As an analyst , I want to quickly open my colleagues' data, regardless of its format and organization, so we can make discoveries. As a researcher , I want my data records and analysis steps to be annotated and both human and machine readable, so I can review my teammates' work and share these annotated results with the world. I want these annotations to occur in situ , not as a separate step that I do later. As a physiologist/imager , I want my analysis routines to have access to my data the instant it is recorded, so I can make choices about how to proceed during my experiment. As an analyst , I want to write one set of analysis routines that do not need to be revised to work with new data formats or new data organizations. As a scientist , I want to search for data or analyses from other researchers. As an amateur , I want to be able to access scientists' raw data to perform my own analyses. NDI is inspired by FAIR principles. Availability A version of NDI is available in Matlab and a version for Python is well under construction. Installation Check out the Installation Guide . Publication Check out the NDI publication . Help and Support Use the issue tracker to submit questions, bugs, and issues. Financial Support Supported by the NIH BRAIN Initiative informatics group , grant MH114678.","title":"Home"},{"location":"#ndi","text":"","title":"NDI"},{"location":"#about","text":"NDI (Neuroscience Data Interface) is a cross-platform interface standard for reading neuroscience data and storing the results of analyses. Who inspires NDI? As an analyst , I want to quickly open my colleagues' data, regardless of its format and organization, so we can make discoveries. As a researcher , I want my data records and analysis steps to be annotated and both human and machine readable, so I can review my teammates' work and share these annotated results with the world. I want these annotations to occur in situ , not as a separate step that I do later. As a physiologist/imager , I want my analysis routines to have access to my data the instant it is recorded, so I can make choices about how to proceed during my experiment. As an analyst , I want to write one set of analysis routines that do not need to be revised to work with new data formats or new data organizations. As a scientist , I want to search for data or analyses from other researchers. As an amateur , I want to be able to access scientists' raw data to perform my own analyses. NDI is inspired by FAIR principles.","title":"About"},{"location":"#availability","text":"A version of NDI is available in Matlab and a version for Python is well under construction.","title":"Availability"},{"location":"#installation","text":"Check out the Installation Guide .","title":"Installation"},{"location":"#publication","text":"Check out the NDI publication .","title":"Publication"},{"location":"#help-and-support","text":"Use the issue tracker to submit questions, bugs, and issues.","title":"Help and Support"},{"location":"#financial-support","text":"Supported by the NIH BRAIN Initiative informatics group , grant MH114678.","title":"Financial Support"},{"location":"NDI-matlab/","text":"NDI About NDI (Neuroscience Data Interface) is a cross-platform interface standard for reading neuroscience data and storing the results of analyses. Who inspires NDI? As an analyst , I want to quickly open my colleagues' data, regardless of its format and organization, so we can make discoveries. As a researcher , I want my data records and analysis steps to be annotated and both human and machine readable, so I can review my teammates' work and share these annotated results with the world. I want these annotations to occur in situ , not as a separate step that I do later. As a physiologist/imager , I want my analysis routines to have access to my data the instant it is recorded, so I can make choices about how to proceed during my experiment. As an analyst , I want to write one set of analysis routines that do not need to be revised to work with new data formats or new data organizations. As a scientist , I want to search for data or analyses from other researchers. As an amateur , I want to be able to access scientists' raw data to perform my own analyses. NDI is inspired by FAIR principles. Availability A version of NDI is available in Matlab and a version for Python is well under construction. Installation Check out the Installation Guide . Publication Check out the NDI publication . Help and Support Use the issue tracker to submit questions, bugs, and issues. Financial Support Supported by the NIH BRAIN Initiative informatics group , grant MH114678.","title":"Home"},{"location":"NDI-matlab/#ndi","text":"","title":"NDI"},{"location":"NDI-matlab/#about","text":"NDI (Neuroscience Data Interface) is a cross-platform interface standard for reading neuroscience data and storing the results of analyses. Who inspires NDI? As an analyst , I want to quickly open my colleagues' data, regardless of its format and organization, so we can make discoveries. As a researcher , I want my data records and analysis steps to be annotated and both human and machine readable, so I can review my teammates' work and share these annotated results with the world. I want these annotations to occur in situ , not as a separate step that I do later. As a physiologist/imager , I want my analysis routines to have access to my data the instant it is recorded, so I can make choices about how to proceed during my experiment. As an analyst , I want to write one set of analysis routines that do not need to be revised to work with new data formats or new data organizations. As a scientist , I want to search for data or analyses from other researchers. As an amateur , I want to be able to access scientists' raw data to perform my own analyses. NDI is inspired by FAIR principles.","title":"About"},{"location":"NDI-matlab/#availability","text":"A version of NDI is available in Matlab and a version for Python is well under construction.","title":"Availability"},{"location":"NDI-matlab/#installation","text":"Check out the Installation Guide .","title":"Installation"},{"location":"NDI-matlab/#publication","text":"Check out the NDI publication .","title":"Publication"},{"location":"NDI-matlab/#help-and-support","text":"Use the issue tracker to submit questions, bugs, and issues.","title":"Help and Support"},{"location":"NDI-matlab/#financial-support","text":"Supported by the NIH BRAIN Initiative informatics group , grant MH114678.","title":"Financial Support"},{"location":"NDI-matlab/contributing/","text":"Contributing Anyone with a GitHub account can contribute. Please see the guidelines below! Tasks New file formats If you want to contribute an ndi.daq.reader for a new file format, please see our new project Neuroscience Data Readers NDR-matlab . We have spun off the job of reading raw neuroscience data files into this project to make it easier to contribute file readers and because some users may want to just use the file reading code without installing all of NDI. At the moment, NDI still uses its native ndi.daq.reader objects but soon it will be able to use any ndr.reader object, which will streamline the addition of new file formats. Apps There are 2 ways to contribute applications. ndi.app applications We have plans to shortly create a developer's guide to creating ndi.app applications that are tightly integrated with NDI's core features. Stay tuned! Other applications External applications can use NDI right now. For an example, see our changes to JRClust to make it support NDI: https://github.com/VH-Lab/JRCLUST . Feel free to post an issue to ask questions. How to contribute If you have code that you would like to write, do the following. Press the Fork button in the upper-right corner of the NDI-matlab GitHub repository to make a copy of NDI in your own GitHub space. Make your changes to NDI-matlab. Commit your changes back to your fork. Finally, issue a Pull Request on GitHub from your fork. The request will be received by the NDI development team for integration.","title":"Contributing"},{"location":"NDI-matlab/contributing/#contributing","text":"Anyone with a GitHub account can contribute. Please see the guidelines below!","title":"Contributing"},{"location":"NDI-matlab/contributing/#tasks","text":"","title":"Tasks"},{"location":"NDI-matlab/contributing/#new-file-formats","text":"If you want to contribute an ndi.daq.reader for a new file format, please see our new project Neuroscience Data Readers NDR-matlab . We have spun off the job of reading raw neuroscience data files into this project to make it easier to contribute file readers and because some users may want to just use the file reading code without installing all of NDI. At the moment, NDI still uses its native ndi.daq.reader objects but soon it will be able to use any ndr.reader object, which will streamline the addition of new file formats.","title":"New file formats"},{"location":"NDI-matlab/contributing/#apps","text":"There are 2 ways to contribute applications.","title":"Apps"},{"location":"NDI-matlab/contributing/#ndiapp-applications","text":"We have plans to shortly create a developer's guide to creating ndi.app applications that are tightly integrated with NDI's core features. Stay tuned!","title":"ndi.app applications"},{"location":"NDI-matlab/contributing/#other-applications","text":"External applications can use NDI right now. For an example, see our changes to JRClust to make it support NDI: https://github.com/VH-Lab/JRCLUST . Feel free to post an issue to ask questions.","title":"Other applications"},{"location":"NDI-matlab/contributing/#how-to-contribute","text":"If you have code that you would like to write, do the following. Press the Fork button in the upper-right corner of the NDI-matlab GitHub repository to make a copy of NDI in your own GitHub space. Make your changes to NDI-matlab. Commit your changes back to your fork. Finally, issue a Pull Request on GitHub from your fork. The request will be received by the NDI development team for integration.","title":"How to contribute"},{"location":"NDI-matlab/development_order/","text":"NDI Development order Version 1.0 (Released) DAQ system, DAQ reader, file navigator Syncgraph Elements, probes, neurons Functioning local database Basic Tutorials (Tutorials 1.*, 2.*, 3.*) App API Version 1.2 (Future) Support for using NDR as a DAQ reader Add GUI Add support for images Add NDI calculation for advanced pipeline creation Tutorials set 4.*: case studies in reading data Tutorials set 5.*: case studies in data pipelines Version 1.5 (Future) Embedded support for a data archive Read/write NWB Use of DID-database (more general database with better version control) Tutorials set 6.*: Using NDI with data archives","title":"Development schedule"},{"location":"NDI-matlab/development_order/#ndi-development-order","text":"","title":"NDI Development order"},{"location":"NDI-matlab/development_order/#version-10-released","text":"DAQ system, DAQ reader, file navigator Syncgraph Elements, probes, neurons Functioning local database Basic Tutorials (Tutorials 1.*, 2.*, 3.*) App API","title":"Version 1.0 (Released)"},{"location":"NDI-matlab/development_order/#version-12-future","text":"Support for using NDR as a DAQ reader Add GUI Add support for images Add NDI calculation for advanced pipeline creation Tutorials set 4.*: case studies in reading data Tutorials set 5.*: case studies in data pipelines","title":"Version 1.2 (Future)"},{"location":"NDI-matlab/development_order/#version-15-future","text":"Embedded support for a data archive Read/write NWB Use of DID-database (more general database with better version control) Tutorials set 6.*: Using NDI with data archives","title":"Version 1.5 (Future)"},{"location":"NDI-matlab/faq/","text":"NDI Frequently Asked Questions Q: Can I use NDI to analyze data recorded in any format? A : Yes. The NDI system includes pieces of code called ndi.daq.reader objects which interpret data recorded with different acquisition devices. Each ndi.daq.reader is specific to a particular device, and ndi.daq.reader objects already exist for devices by several neuroscience software manufacturers. Q: Can I use NDI if my lab builds our own devices and measuring tools? A : Yes. You will need to write one piece of code - an ndi.daq.reader object - for each original DAQ system you use. Possibly, you will also need to create an `ndi.daq.metadatareader to read metadata, such as stimulus information for custom stimuli. Once these are created, your data can be read and analyzed with NDI. Q: Do I need to change the way my lab organizes our data files in order to use NDI? A : No - the NDI system is able to retrieve data files organized in any way. NDI uses pieces of code called ndi.file.navigator objects to locate data from a recording epoch. Each ndi.file.navigator works within a specific organization system, and you can specify the parameters to cause the file navigator to navigate your lab's system. Q: Can I use NDI to pool data from multiple labs? A : Yes. Once each lab has an ndi.daq.system that consists of an ndi.file.navigator that can locate files within its storage system and ndi.daq.reader objects for each their data acquisition systems, NDI can read and analyze datasets from both labs together.","title":"FAQ"},{"location":"NDI-matlab/faq/#ndi-frequently-asked-questions","text":"","title":"NDI Frequently Asked Questions"},{"location":"NDI-matlab/faq/#q-can-i-use-ndi-to-analyze-data-recorded-in-any-format","text":"A : Yes. The NDI system includes pieces of code called ndi.daq.reader objects which interpret data recorded with different acquisition devices. Each ndi.daq.reader is specific to a particular device, and ndi.daq.reader objects already exist for devices by several neuroscience software manufacturers.","title":"Q: Can I use NDI to analyze data recorded in any format?"},{"location":"NDI-matlab/faq/#q-can-i-use-ndi-if-my-lab-builds-our-own-devices-and-measuring-tools","text":"A : Yes. You will need to write one piece of code - an ndi.daq.reader object - for each original DAQ system you use. Possibly, you will also need to create an `ndi.daq.metadatareader to read metadata, such as stimulus information for custom stimuli. Once these are created, your data can be read and analyzed with NDI.","title":"Q: Can I use NDI if my lab builds our own devices and measuring tools?"},{"location":"NDI-matlab/faq/#q-do-i-need-to-change-the-way-my-lab-organizes-our-data-files-in-order-to-use-ndi","text":"A : No - the NDI system is able to retrieve data files organized in any way. NDI uses pieces of code called ndi.file.navigator objects to locate data from a recording epoch. Each ndi.file.navigator works within a specific organization system, and you can specify the parameters to cause the file navigator to navigate your lab's system.","title":"Q: Do I need to change the way my lab organizes our data files in order to use NDI?"},{"location":"NDI-matlab/faq/#q-can-i-use-ndi-to-pool-data-from-multiple-labs","text":"A : Yes. Once each lab has an ndi.daq.system that consists of an ndi.file.navigator that can locate files within its storage system and ndi.daq.reader objects for each their data acquisition systems, NDI can read and analyze datasets from both labs together.","title":"Q: Can I use NDI to pool data from multiple labs?"},{"location":"NDI-matlab/glossary/","text":"NDI Glossary Real-world vocabulary session : a collection of recordings or measurements taken at one sitting element : probe : any instrument that makes a measurement or performs stimulation. One kind of element (all probes are elements ). Requires a subject and a connection to a DAQ system . Examples of probes include single channel microelectrodes, multi-channel microelectrodes, intrinsic signal imaging systems, 2-photon microscopes, microphones, video cameras, reward wells, levers, visual stimulus systems, and speakers. subject : The object that is being sampled. Examples of subjects are an animal, a human, the air, a potato, and a test resistor. Software objects","title":"NDI Glossary"},{"location":"NDI-matlab/glossary/#ndi-glossary","text":"","title":"NDI Glossary"},{"location":"NDI-matlab/glossary/#real-world-vocabulary","text":"session : a collection of recordings or measurements taken at one sitting element : probe : any instrument that makes a measurement or performs stimulation. One kind of element (all probes are elements ). Requires a subject and a connection to a DAQ system . Examples of probes include single channel microelectrodes, multi-channel microelectrodes, intrinsic signal imaging systems, 2-photon microscopes, microphones, video cameras, reward wells, levers, visual stimulus systems, and speakers. subject : The object that is being sampled. Examples of subjects are an animal, a human, the air, a potato, and a test resistor.","title":"Real-world vocabulary"},{"location":"NDI-matlab/glossary/#_1","text":"Software objects","title":""},{"location":"NDI-matlab/goals_dryversion/","text":"NDI Goals NDI (Neuroscience Data Interface) is a cross-platform interface standard for reading neuroscience data and storing the results of analyses. Its goals include: Providing a means for specifying and accessing neuroscience data regardless of the format of the files or the organization of the files and data on disk or in the cloud. Allowing the creation of analysis code that is invariant to data format and organization, so the analysis process can be independent of the raw format. Providing a database for storing human- and machine-readable documents that describe analyses, analyses of analyses, etc, that is searchable with or without knowing the formal schema of the documents of interest. Allowing the creation of an application ecosystem where individual applications can read raw data and read from the database, and write results back to the database to participate in analysis pipelines. Eliminating the need for different procedures between online and offline analyses. Maintaining a ready-to-share version of the analysis pipeline at all times, so data can be shared with other groups or archives without additional work. Analysts can use NDI to quickly gain access to a collaborator's dataset (by specifying the organization and format of the data in a few parameters) and labs can share their data and results with others in a well-described format.","title":"NDI"},{"location":"NDI-matlab/goals_dryversion/#ndi","text":"","title":"NDI"},{"location":"NDI-matlab/goals_dryversion/#goals","text":"NDI (Neuroscience Data Interface) is a cross-platform interface standard for reading neuroscience data and storing the results of analyses. Its goals include: Providing a means for specifying and accessing neuroscience data regardless of the format of the files or the organization of the files and data on disk or in the cloud. Allowing the creation of analysis code that is invariant to data format and organization, so the analysis process can be independent of the raw format. Providing a database for storing human- and machine-readable documents that describe analyses, analyses of analyses, etc, that is searchable with or without knowing the formal schema of the documents of interest. Allowing the creation of an application ecosystem where individual applications can read raw data and read from the database, and write results back to the database to participate in analysis pipelines. Eliminating the need for different procedures between online and offline analyses. Maintaining a ready-to-share version of the analysis pipeline at all times, so data can be shared with other groups or archives without additional work. Analysts can use NDI to quickly gain access to a collaborator's dataset (by specifying the organization and format of the data in a few parameters) and labs can share their data and results with others in a well-described format.","title":"Goals"},{"location":"NDI-matlab/installation/","text":"Installation: Make sure git is installed on your machine. If it is not, on Windows, go here . On Mac, open a terminal, and type xcode-select --install . Accept the license and wait for install. On Linux, consult your Linux distribution's package manager. Download the file ndi_install.m to your Desktop. Type the following in the Matlab command window: cd ~/Desktop ndi_install Required Matlab toolboxes To use all of the NDI tools, the following Matlab toolboxes are required: Toolbox Toolbox Toolbox MATLAB Control System Toolbox Curve Fitting Toolbox Image Processing Toolbox Optimization Toolbox Signal Processing Toolbox Statistics and Machine Learning Toolbox You can use the ver command in Matlab to see which toolboxes you have installed. Notes for newbies To find the program Terminal on a Mac, use the Mac search menu to find it and run it. To download the ndi_install.m file, right click in your browser and choose \"Save as\". Be sure to save the file with a '.m' extension; your browser may try to add '.txt' to the end of the file, but you'll need to remove it for the program to run. If you lack particular Matlab Toolboxes, you can add them by clicking on the Add-On box in Matlab and choose \"Get Add-ons\".","title":"Installation"},{"location":"NDI-matlab/installation/#installation","text":"Make sure git is installed on your machine. If it is not, on Windows, go here . On Mac, open a terminal, and type xcode-select --install . Accept the license and wait for install. On Linux, consult your Linux distribution's package manager. Download the file ndi_install.m to your Desktop. Type the following in the Matlab command window: cd ~/Desktop ndi_install","title":"Installation:"},{"location":"NDI-matlab/installation/#required-matlab-toolboxes","text":"To use all of the NDI tools, the following Matlab toolboxes are required: Toolbox Toolbox Toolbox MATLAB Control System Toolbox Curve Fitting Toolbox Image Processing Toolbox Optimization Toolbox Signal Processing Toolbox Statistics and Machine Learning Toolbox You can use the ver command in Matlab to see which toolboxes you have installed.","title":"Required Matlab toolboxes"},{"location":"NDI-matlab/installation/#notes-for-newbies","text":"To find the program Terminal on a Mac, use the Mac search menu to find it and run it. To download the ndi_install.m file, right click in your browser and choose \"Save as\". Be sure to save the file with a '.m' extension; your browser may try to add '.txt' to the end of the file, but you'll need to remove it for the program to run. If you lack particular Matlab Toolboxes, you can add them by clicking on the Add-On box in Matlab and choose \"Get Add-ons\".","title":"Notes for newbies"},{"location":"NDI-matlab/learning_matlab/","text":"Learning Matlab Currently NDI is available only in Matlab. If you are new to Matlab, there are resources to help you learn. Short tutorials https://www.mathworks.com/help/matlab/getting-started-with-matlab.html A very short tutorial Steve made as a TA for Computational Neuroscience in the early 2000s. MathWorks's own onboarding tutorial . For people with no coding experience Some people want to learn to use NDI but do not have coding experience. These resources were suggested by our new users. Classes and objects Mo writes: Learn what a class and object is. I was completely stuck in terms of conceptually understanding what was going on in the code before I knew what classes and objects were. I recommend this video from CSdojo on YouTube . Mo's newbie notes If you see a function that you don't know, it doesn't hurt to try using the help function in the command window. Just type in the word help followed by whatever you don't understand. For example, suppose I don't understand what gca is. I would type help gca . You can double click the things saved in the workspace to see their contents. You can use the editor to write and save code. I used this a lot for just saving all the code from the tutorial on one page. If you remove the semi-colon at the end of a line, Matlab will print out the properties of the object. Online courses Steve's semester-long course Data Analysis and Statistics Workshop is for new or experienced coders. It has 22 self-paced \"labs\" that are designed to take between 60 - 80 minutes. It is available free to the public .","title":"Learning Matlab"},{"location":"NDI-matlab/learning_matlab/#learning-matlab","text":"Currently NDI is available only in Matlab. If you are new to Matlab, there are resources to help you learn.","title":"Learning Matlab"},{"location":"NDI-matlab/learning_matlab/#short-tutorials","text":"https://www.mathworks.com/help/matlab/getting-started-with-matlab.html A very short tutorial Steve made as a TA for Computational Neuroscience in the early 2000s. MathWorks's own onboarding tutorial .","title":"Short tutorials"},{"location":"NDI-matlab/learning_matlab/#for-people-with-no-coding-experience","text":"Some people want to learn to use NDI but do not have coding experience. These resources were suggested by our new users.","title":"For people with no coding experience"},{"location":"NDI-matlab/learning_matlab/#classes-and-objects","text":"Mo writes: Learn what a class and object is. I was completely stuck in terms of conceptually understanding what was going on in the code before I knew what classes and objects were. I recommend this video from CSdojo on YouTube .","title":"Classes and objects"},{"location":"NDI-matlab/learning_matlab/#mos-newbie-notes","text":"If you see a function that you don't know, it doesn't hurt to try using the help function in the command window. Just type in the word help followed by whatever you don't understand. For example, suppose I don't understand what gca is. I would type help gca . You can double click the things saved in the workspace to see their contents. You can use the editor to write and save code. I used this a lot for just saving all the code from the tutorial on one page. If you remove the semi-colon at the end of a line, Matlab will print out the properties of the object.","title":"Mo's newbie notes"},{"location":"NDI-matlab/learning_matlab/#online-courses","text":"Steve's semester-long course Data Analysis and Statistics Workshop is for new or experienced coders. It has 22 self-paced \"labs\" that are designed to take between 60 - 80 minutes. It is available free to the public .","title":"Online courses"},{"location":"NDI-matlab/oldREADME/","text":"NDI Neuroscience Data Interface - A means of specifying and accessing neuroscience data Available at https://github.com/VH-Lab/NDI-matlab Installation instructions: https://vh-lab.github.io/NDI-matlab/installation/ Notes for manual installers: NDI depends on functions in vhlab-toolbox-matlab, available at https://github.com/VH-Lab/vhlab-toolbox-matlab Depends on functions in vhlab-thirdparty-matlab, available at https://github.com/VH-Lab/vhlab-thirdparty-matlab It is recommended that the developer also install vhlab_vhtools, available at https://github.com/VH-Lab/vhlab_vhtools It is assumed that the function ndi_Init.m is run at startup. Please add this to your startup.m file. (If you use the http://github.com/VH-Lab/vhlab_vhtools distribution, it will be run automatically.) Documentation is at https://vh-lab.github.io/NDI-matlab/ Still in early development Description of key terms: session : A collection of measurements and analysis that are associated with one experimental session. A \"study\" usually consists of several sessions. probe : An instrument that makes a measurement or provides stimulation. Examples include an electrode, a camera, a 2-photon microscope, a visual stimulus monitor, a nose-poke, a feeder. iodvice : An instrument that digitally acquires and stores measurement values or controls a stimulator. epoch : An episode of time during which data from an iodevice is acquired. Each epoch consists of an interval of time between when a data acquisition device was switched on to acquire data and when it was switched off. An epoch on one device may or may not correspond to epochs from other devices, and synchronization can be managed by NDI_SYNCGRAPH. Description of software objects that impliment the framework: ndi_session : The class that implements the basic structure of an experiment, including an iodevice list, synggraph, cache, reference, and a unique reference string. ndi_session_dir : A session that uses the file system for storage of its parameters and database. This is presently used for all experiments. ndi_iodevice : A software object that reads data from files created by hardware data acquisition devices ndi_filetree : A file organizing class that traverses any file structure to identify the data files associated with each epoch Required device metadata: Classes (consisting of ndi_iodevicestring and ndi_epochcontents ) that describe the probes and channel mappings between the probes and the iodevice objects. Database objects: ndi_database : A (mostly) abstract database object that specifies the API for storing and searching documents ndi_document : An extensible database document object class that has a name, a unique identifier, and fields that are described in .JSON files. ndi_binarydoc : An abstract class that allows binary reading/writing from files associated with ndi_document . Specific implementations can write to a local file system, or a remote file system such as GRID-FS, etc. Implementations: Because ndi_database lacks specific implementation of key methods, one needs to use an implementation. Right now we have the following: ndi_matlabdumbjsondb : A Matlab implementation of a very simple database ( dumbjsondb in https://github.com/VH-Lab/vhlab-toolbox-matlab) ndi_binarydoc_matfid : A Matlab implementation for reading/writing files that are on the machine's filesystem Timing objects ndi_clocktype : Types of clocks (such as UTC, local, global, global experiment) ndi_timemapping : a mapping between epochs and iodevices ndi_syncgraph : an object that finds mappings from one device and epoch to another using all known timing relationships among iodevices ndi_syncrule : A rule for describing the relationship between data collected on different iodevices ndi_syncrule_filematch : A rule that describes a timing relationship as \"equal\" if two epochs contain raw data files in common Tutorials For developers: A tour of ndi_documents and ndi_database: https://github.com/VH-Lab/NDI-matlab/blob/master/demo/documents_database/document_database_demo.ipynb For developers: A tour of epochs, daqsystems, probes, and things: https://github.com/VH-Lab/NDI-matlab/blob/master/demo/epochs_daqsystems_probes_things/epochdemo1.ipynb Conventions Channels, samples, and other quantities are numbered from 1..N Development conventions Documentation of classes should follow the Matlab standard: https://www.mathworks.com/help/matlab/matlab_prog/create-help-for-classes.html In input arguments and documentation, we'll use \"indexes\" instead of \"indices\" and try to keep other English language exceptions to a minimum All error messages should be informative and give specific information about the problem, not just say 'an error occurred.' Most of the time, class names should include the full parentage of the object, starting with the basic classes for NDI: ndi_session, ndi_iodevice, ndi_probe. For example, a class implementing device drivers for a multifunction data aquisition board from mycompany should be called ndi_iodevice_mfdaq_mycompany to indicate that the object is descended from the ndi_iodevice and ndi_iodevice_mfdaq objects. Let's make exceptions if putting the full parentage gets cumbersome without adding clarity. Most users and programmers don't need to think about those classes (but will need to think about the basic classes ndi_session , ndi_database , and ndi_iodevice ). Test code There is a set of test code that one can run all at once using the function ndi_testsuite.m . The directory test contains a number of subdirectories with test code. The file ndi_testsuite_list.txt has an up-to-date list of the test functions that are current.","title":"NDI"},{"location":"NDI-matlab/oldREADME/#ndi","text":"Neuroscience Data Interface - A means of specifying and accessing neuroscience data Available at https://github.com/VH-Lab/NDI-matlab Installation instructions: https://vh-lab.github.io/NDI-matlab/installation/ Notes for manual installers: NDI depends on functions in vhlab-toolbox-matlab, available at https://github.com/VH-Lab/vhlab-toolbox-matlab Depends on functions in vhlab-thirdparty-matlab, available at https://github.com/VH-Lab/vhlab-thirdparty-matlab It is recommended that the developer also install vhlab_vhtools, available at https://github.com/VH-Lab/vhlab_vhtools It is assumed that the function ndi_Init.m is run at startup. Please add this to your startup.m file. (If you use the http://github.com/VH-Lab/vhlab_vhtools distribution, it will be run automatically.) Documentation is at https://vh-lab.github.io/NDI-matlab/ Still in early development","title":"NDI"},{"location":"NDI-matlab/oldREADME/#description-of-key-terms","text":"session : A collection of measurements and analysis that are associated with one experimental session. A \"study\" usually consists of several sessions. probe : An instrument that makes a measurement or provides stimulation. Examples include an electrode, a camera, a 2-photon microscope, a visual stimulus monitor, a nose-poke, a feeder. iodvice : An instrument that digitally acquires and stores measurement values or controls a stimulator. epoch : An episode of time during which data from an iodevice is acquired. Each epoch consists of an interval of time between when a data acquisition device was switched on to acquire data and when it was switched off. An epoch on one device may or may not correspond to epochs from other devices, and synchronization can be managed by NDI_SYNCGRAPH.","title":"Description of key terms:"},{"location":"NDI-matlab/oldREADME/#description-of-software-objects-that-impliment-the-framework","text":"ndi_session : The class that implements the basic structure of an experiment, including an iodevice list, synggraph, cache, reference, and a unique reference string. ndi_session_dir : A session that uses the file system for storage of its parameters and database. This is presently used for all experiments. ndi_iodevice : A software object that reads data from files created by hardware data acquisition devices ndi_filetree : A file organizing class that traverses any file structure to identify the data files associated with each epoch Required device metadata: Classes (consisting of ndi_iodevicestring and ndi_epochcontents ) that describe the probes and channel mappings between the probes and the iodevice objects. Database objects: ndi_database : A (mostly) abstract database object that specifies the API for storing and searching documents ndi_document : An extensible database document object class that has a name, a unique identifier, and fields that are described in .JSON files. ndi_binarydoc : An abstract class that allows binary reading/writing from files associated with ndi_document . Specific implementations can write to a local file system, or a remote file system such as GRID-FS, etc. Implementations: Because ndi_database lacks specific implementation of key methods, one needs to use an implementation. Right now we have the following: ndi_matlabdumbjsondb : A Matlab implementation of a very simple database ( dumbjsondb in https://github.com/VH-Lab/vhlab-toolbox-matlab) ndi_binarydoc_matfid : A Matlab implementation for reading/writing files that are on the machine's filesystem Timing objects ndi_clocktype : Types of clocks (such as UTC, local, global, global experiment) ndi_timemapping : a mapping between epochs and iodevices ndi_syncgraph : an object that finds mappings from one device and epoch to another using all known timing relationships among iodevices ndi_syncrule : A rule for describing the relationship between data collected on different iodevices ndi_syncrule_filematch : A rule that describes a timing relationship as \"equal\" if two epochs contain raw data files in common","title":"Description of software objects that impliment the framework:"},{"location":"NDI-matlab/oldREADME/#tutorials","text":"For developers: A tour of ndi_documents and ndi_database: https://github.com/VH-Lab/NDI-matlab/blob/master/demo/documents_database/document_database_demo.ipynb For developers: A tour of epochs, daqsystems, probes, and things: https://github.com/VH-Lab/NDI-matlab/blob/master/demo/epochs_daqsystems_probes_things/epochdemo1.ipynb","title":"Tutorials"},{"location":"NDI-matlab/oldREADME/#conventions","text":"Channels, samples, and other quantities are numbered from 1..N","title":"Conventions"},{"location":"NDI-matlab/oldREADME/#development-conventions","text":"Documentation of classes should follow the Matlab standard: https://www.mathworks.com/help/matlab/matlab_prog/create-help-for-classes.html In input arguments and documentation, we'll use \"indexes\" instead of \"indices\" and try to keep other English language exceptions to a minimum All error messages should be informative and give specific information about the problem, not just say 'an error occurred.' Most of the time, class names should include the full parentage of the object, starting with the basic classes for NDI: ndi_session, ndi_iodevice, ndi_probe. For example, a class implementing device drivers for a multifunction data aquisition board from mycompany should be called ndi_iodevice_mfdaq_mycompany to indicate that the object is descended from the ndi_iodevice and ndi_iodevice_mfdaq objects. Let's make exceptions if putting the full parentage gets cumbersome without adding clarity. Most users and programmers don't need to think about those classes (but will need to think about the basic classes ndi_session , ndi_database , and ndi_iodevice ).","title":"Development conventions"},{"location":"NDI-matlab/oldREADME/#test-code","text":"There is a set of test code that one can run all at once using the function ndi_testsuite.m . The directory test contains a number of subdirectories with test code. The file ndi_testsuite_list.txt has an up-to-date list of the test functions that are current.","title":"Test code"},{"location":"NDI-matlab/test/","text":"","title":"Test"},{"location":"NDI-matlab/documents/animalsubject/","text":"animalsubject (ndi.document class) Class definition Class name : animalsubject Short name : animalsubject Superclasses : base Definition : $NDIDOCUMENTPATH/animalsubject.json Schema for validation : $NDISCHEMAPATH/animalsubject_schema.json Property_list_name : animalsubject Class_version : 1 animalsubject fields Accessed by animalsubject.field where field is one of the field names below field default_value data type description node_at_ontology base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"animalsubject"},{"location":"NDI-matlab/documents/animalsubject/#animalsubject-ndidocument-class","text":"","title":"animalsubject (ndi.document class)"},{"location":"NDI-matlab/documents/animalsubject/#class-definition","text":"Class name : animalsubject Short name : animalsubject Superclasses : base Definition : $NDIDOCUMENTPATH/animalsubject.json Schema for validation : $NDISCHEMAPATH/animalsubject_schema.json Property_list_name : animalsubject Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/animalsubject/#animalsubject-fields","text":"Accessed by animalsubject.field where field is one of the field names below field default_value data type description node_at_ontology","title":"animalsubject fields"},{"location":"NDI-matlab/documents/animalsubject/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/app/","text":"app (ndi.document class) Class definition Class name : app Short name : app Superclasses : base Definition : $NDIDOCUMENTPATH/app.json Schema for validation : $NDISCHEMAPATH/app_schema.json Property_list_name : app Class_version : 1 app fields Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"app"},{"location":"NDI-matlab/documents/app/#app-ndidocument-class","text":"","title":"app (ndi.document class)"},{"location":"NDI-matlab/documents/app/#class-definition","text":"Class name : app Short name : app Superclasses : base Definition : $NDIDOCUMENTPATH/app.json Schema for validation : $NDISCHEMAPATH/app_schema.json Property_list_name : app Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/app/#app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version","title":"app fields"},{"location":"NDI-matlab/documents/app/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/base/","text":"base (ndi.document class) Class definition Class name : base Short name : base Superclasses : none Definition : $DIDDOCUMENT_EX1/base.json Schema for validation : $DIDSCHEMA_EX1/base.schema.json Property_list_name : base Class_version : 1 base fields Accessed by base.field where field is one of the field names below field default_value data type description session_id id name datestamp","title":"base"},{"location":"NDI-matlab/documents/base/#base-ndidocument-class","text":"","title":"base (ndi.document class)"},{"location":"NDI-matlab/documents/base/#class-definition","text":"Class name : base Short name : base Superclasses : none Definition : $DIDDOCUMENT_EX1/base.json Schema for validation : $DIDSCHEMA_EX1/base.schema.json Property_list_name : base Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/base/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description session_id id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/dataset_session_info/","text":"dataset_session_info (ndi.document class) Class definition Class name : dataset_session_info Short name : dataset_session_info Superclasses : base Definition : $NDIDOCUMENTPATH/dataset_session_info.json Schema for validation : $NDISCHEMAPATH/dataset_session_info.json Property_list_name : dataset_session_info Class_version : 1 dataset_session_info fields Accessed by dataset_session_info.field where field is one of the field names below field default_value data type description dataset_session_info base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"dataset_session_info"},{"location":"NDI-matlab/documents/dataset_session_info/#dataset_session_info-ndidocument-class","text":"","title":"dataset_session_info (ndi.document class)"},{"location":"NDI-matlab/documents/dataset_session_info/#class-definition","text":"Class name : dataset_session_info Short name : dataset_session_info Superclasses : base Definition : $NDIDOCUMENTPATH/dataset_session_info.json Schema for validation : $NDISCHEMAPATH/dataset_session_info.json Property_list_name : dataset_session_info Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/dataset_session_info/#dataset_session_info-fields","text":"Accessed by dataset_session_info.field where field is one of the field names below field default_value data type description dataset_session_info","title":"dataset_session_info fields"},{"location":"NDI-matlab/documents/dataset_session_info/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/demoNDI/","text":"demoNDI (ndi.document class) Class definition Class name : demoNDI Short name : demoNDI Superclasses : base Definition : $NDIDOCUMENTPATH/demoNDI.json Schema for validation : $NDISCHEMAPATH/demoNDI_schema.json Property_list_name : demoNDI Class_version : 1 demoNDI fields Accessed by demoNDI.field where field is one of the field names below field default_value data type description value base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"demoNDI"},{"location":"NDI-matlab/documents/demoNDI/#demondi-ndidocument-class","text":"","title":"demoNDI (ndi.document class)"},{"location":"NDI-matlab/documents/demoNDI/#class-definition","text":"Class name : demoNDI Short name : demoNDI Superclasses : base Definition : $NDIDOCUMENTPATH/demoNDI.json Schema for validation : $NDISCHEMAPATH/demoNDI_schema.json Property_list_name : demoNDI Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/demoNDI/#demondi-fields","text":"Accessed by demoNDI.field where field is one of the field names below field default_value data type description value","title":"demoNDI fields"},{"location":"NDI-matlab/documents/demoNDI/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/element/","text":"element (ndi.document class) Class definition Class name : element Short name : element Superclasses : base Definition : $NDIDOCUMENTPATH/element.json Schema for validation : $NDISCHEMAPATH/element_schema.json Property_list_name : element Class_version : 1 element fields Accessed by element.field where field is one of the field names below field default_value data type description ndi_element_class name reference type direct base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"element"},{"location":"NDI-matlab/documents/element/#element-ndidocument-class","text":"","title":"element (ndi.document class)"},{"location":"NDI-matlab/documents/element/#class-definition","text":"Class name : element Short name : element Superclasses : base Definition : $NDIDOCUMENTPATH/element.json Schema for validation : $NDISCHEMAPATH/element_schema.json Property_list_name : element Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/element/#element-fields","text":"Accessed by element.field where field is one of the field names below field default_value data type description ndi_element_class name reference type direct","title":"element fields"},{"location":"NDI-matlab/documents/element/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/element_epoch/","text":"element_epoch (ndi.document class) Class definition Class name : element_epoch Short name : element_epoch Superclasses : base , epochid Definition : $NDIDOCUMENTPATH/element_epoch.json Schema for validation : $NDISCHEMAPATH/element_epoch_schema.json Property_list_name : element_epoch Class_version : 1 element_epoch fields Accessed by element_epoch.field where field is one of the field names below field default_value data type description epoch_clock t0_t1 base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp epochid fields Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"element_epoch"},{"location":"NDI-matlab/documents/element_epoch/#element_epoch-ndidocument-class","text":"","title":"element_epoch (ndi.document class)"},{"location":"NDI-matlab/documents/element_epoch/#class-definition","text":"Class name : element_epoch Short name : element_epoch Superclasses : base , epochid Definition : $NDIDOCUMENTPATH/element_epoch.json Schema for validation : $NDISCHEMAPATH/element_epoch_schema.json Property_list_name : element_epoch Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/element_epoch/#element_epoch-fields","text":"Accessed by element_epoch.field where field is one of the field names below field default_value data type description epoch_clock t0_t1","title":"element_epoch fields"},{"location":"NDI-matlab/documents/element_epoch/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/element_epoch/#epochid-fields","text":"Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"epochid fields"},{"location":"NDI-matlab/documents/epochclocktimes/","text":"epochclocktimes (ndi.document class) Class definition Class name : epochclocktimes Short name : epochclocktimes Superclasses : base , epochid Definition : $NDIDOCUMENTPATH/epochclocktimes.json Schema for validation : $NDISCHEMAPATH/epochclocktimes_schema.json Property_list_name : epochclocktimes Class_version : 1 epochclocktimes fields Accessed by epochclocktimes.field where field is one of the field names below field default_value data type description epochclocktimes base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp epochid fields Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"epochclocktimes"},{"location":"NDI-matlab/documents/epochclocktimes/#epochclocktimes-ndidocument-class","text":"","title":"epochclocktimes (ndi.document class)"},{"location":"NDI-matlab/documents/epochclocktimes/#class-definition","text":"Class name : epochclocktimes Short name : epochclocktimes Superclasses : base , epochid Definition : $NDIDOCUMENTPATH/epochclocktimes.json Schema for validation : $NDISCHEMAPATH/epochclocktimes_schema.json Property_list_name : epochclocktimes Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/epochclocktimes/#epochclocktimes-fields","text":"Accessed by epochclocktimes.field where field is one of the field names below field default_value data type description epochclocktimes","title":"epochclocktimes fields"},{"location":"NDI-matlab/documents/epochclocktimes/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/epochclocktimes/#epochid-fields","text":"Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"epochid fields"},{"location":"NDI-matlab/documents/epochid/","text":"epochid (ndi.document class) Class definition Class name : epochid Short name : epochid Superclasses : base Definition : $NDIDOCUMENTPATH/epochid.json Schema for validation : $NDISCHEMAPATH/epochid_schema.json Property_list_name : epochid Class_version : 1 epochid fields Accessed by epochid.field where field is one of the field names below field default_value data type description epochid base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"epochid"},{"location":"NDI-matlab/documents/epochid/#epochid-ndidocument-class","text":"","title":"epochid (ndi.document class)"},{"location":"NDI-matlab/documents/epochid/#class-definition","text":"Class name : epochid Short name : epochid Superclasses : base Definition : $NDIDOCUMENTPATH/epochid.json Schema for validation : $NDISCHEMAPATH/epochid_schema.json Property_list_name : epochid Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/epochid/#epochid-fields","text":"Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"epochid fields"},{"location":"NDI-matlab/documents/epochid/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/mock/","text":"mock (ndi.document class) Class definition Class name : mock Short name : mock Superclasses : base Definition : $NDIDOCUMENTPATH/mock.json Schema for validation : $NDISCHEMAPATH/mock_schema.json Property_list_name : mock Class_version : 1 mock fields Accessed by mock.field where field is one of the field names below field default_value data type description ismock base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"mock"},{"location":"NDI-matlab/documents/mock/#mock-ndidocument-class","text":"","title":"mock (ndi.document class)"},{"location":"NDI-matlab/documents/mock/#class-definition","text":"Class name : mock Short name : mock Superclasses : base Definition : $NDIDOCUMENTPATH/mock.json Schema for validation : $NDISCHEMAPATH/mock_schema.json Property_list_name : mock Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/mock/#mock-fields","text":"Accessed by mock.field where field is one of the field names below field default_value data type description ismock","title":"mock fields"},{"location":"NDI-matlab/documents/mock/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/projectvar/","text":"projectvar (ndi.document class) Class definition Class name : projectvar Short name : projectvar Superclasses : base Definition : $NDIDOCUMENTPATH/projectvar.json Schema for validation : $NDISCHEMAPATH/projectvar_schema.json Property_list_name : projectvar Class_version : 1 projectvar fields Accessed by projectvar.field where field is one of the field names below field default_value data type description project type user lab description data base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"projectvar"},{"location":"NDI-matlab/documents/projectvar/#projectvar-ndidocument-class","text":"","title":"projectvar (ndi.document class)"},{"location":"NDI-matlab/documents/projectvar/#class-definition","text":"Class name : projectvar Short name : projectvar Superclasses : base Definition : $NDIDOCUMENTPATH/projectvar.json Schema for validation : $NDISCHEMAPATH/projectvar_schema.json Property_list_name : projectvar Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/projectvar/#projectvar-fields","text":"Accessed by projectvar.field where field is one of the field names below field default_value data type description project type user lab description data","title":"projectvar fields"},{"location":"NDI-matlab/documents/projectvar/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/session/","text":"session (ndi.document class) Class definition Class name : session Short name : session Superclasses : base Definition : $NDIDOCUMENTPATH/session.json Schema for validation : $NDISCHEMAPATH/session.json Property_list_name : session Class_version : 1 session fields Accessed by session.field where field is one of the field names below field default_value data type description reference base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"session"},{"location":"NDI-matlab/documents/session/#session-ndidocument-class","text":"","title":"session (ndi.document class)"},{"location":"NDI-matlab/documents/session/#class-definition","text":"Class name : session Short name : session Superclasses : base Definition : $NDIDOCUMENTPATH/session.json Schema for validation : $NDISCHEMAPATH/session.json Property_list_name : session Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/session/#session-fields","text":"Accessed by session.field where field is one of the field names below field default_value data type description reference","title":"session fields"},{"location":"NDI-matlab/documents/session/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/subject/","text":"subject (ndi.document class) Class definition Class name : subject Short name : subject Superclasses : base Definition : $NDIDOCUMENTPATH/subject.json Schema for validation : $NDISCHEMAPATH/subject_schema.json Property_list_name : subject Class_version : 1 subject fields Accessed by subject.field where field is one of the field names below field default_value data type description local_identifier description base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"subject"},{"location":"NDI-matlab/documents/subject/#subject-ndidocument-class","text":"","title":"subject (ndi.document class)"},{"location":"NDI-matlab/documents/subject/#class-definition","text":"Class name : subject Short name : subject Superclasses : base Definition : $NDIDOCUMENTPATH/subject.json Schema for validation : $NDISCHEMAPATH/subject_schema.json Property_list_name : subject Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/subject/#subject-fields","text":"Accessed by subject.field where field is one of the field names below field default_value data type description local_identifier description","title":"subject fields"},{"location":"NDI-matlab/documents/subject/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/subjectmeasurement/","text":"subjectmeasurement (ndi.document class) Class definition Class name : subjectmeasurement Short name : subjectmeasurement Superclasses : base Definition : $NDIDOCUMENTPATH/subjectmeasurement.json Schema for validation : $NDISCHEMAPATH/subjectmeasurement_schema.json Property_list_name : subjectmeasurement Class_version : 1 subjectmeasurement fields Accessed by subjectmeasurement.field where field is one of the field names below field default_value data type description measurement value datestamp base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"subjectmeasurement"},{"location":"NDI-matlab/documents/subjectmeasurement/#subjectmeasurement-ndidocument-class","text":"","title":"subjectmeasurement (ndi.document class)"},{"location":"NDI-matlab/documents/subjectmeasurement/#class-definition","text":"Class name : subjectmeasurement Short name : subjectmeasurement Superclasses : base Definition : $NDIDOCUMENTPATH/subjectmeasurement.json Schema for validation : $NDISCHEMAPATH/subjectmeasurement_schema.json Property_list_name : subjectmeasurement Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/subjectmeasurement/#subjectmeasurement-fields","text":"Accessed by subjectmeasurement.field where field is one of the field names below field default_value data type description measurement value datestamp","title":"subjectmeasurement fields"},{"location":"NDI-matlab/documents/subjectmeasurement/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/treatment/","text":"treatment (ndi.document class) Class definition Class name : treatment Short name : treatment Superclasses : base Definition : $NDIDOCUMENTPATH/treatment.json Schema for validation : $NDISCHEMAPATH/treatment_schema.json Property_list_name : treatment Class_version : 1 treatment fields Accessed by treatment.field where field is one of the field names below field default_value data type description ontologyName name numeric_value string_value base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"treatment"},{"location":"NDI-matlab/documents/treatment/#treatment-ndidocument-class","text":"","title":"treatment (ndi.document class)"},{"location":"NDI-matlab/documents/treatment/#class-definition","text":"Class name : treatment Short name : treatment Superclasses : base Definition : $NDIDOCUMENTPATH/treatment.json Schema for validation : $NDISCHEMAPATH/treatment_schema.json Property_list_name : treatment Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/treatment/#treatment-fields","text":"Accessed by treatment.field where field is one of the field names below field default_value data type description ontologyName name numeric_value string_value","title":"treatment fields"},{"location":"NDI-matlab/documents/treatment/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/apps/calculators/simple_calc/","text":"simple_calc (ndi.document class) Class definition Class name : simple_calc Short name : simple_calc Superclasses : app , base Definition : $NDIDOCUMENTPATH/apps/calculations/simple_calc.json Schema for validation : $NDISCHEMAPATH/apps/calculations/simple_calc_schema.json Property_list_name : simple_calc Class_version : 1 simple_calc fields Accessed by simple_calc.field where field is one of the field names below field default_value data type description input_parameters answer app fields Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"simple_calc"},{"location":"NDI-matlab/documents/apps/calculators/simple_calc/#simple_calc-ndidocument-class","text":"","title":"simple_calc (ndi.document class)"},{"location":"NDI-matlab/documents/apps/calculators/simple_calc/#class-definition","text":"Class name : simple_calc Short name : simple_calc Superclasses : app , base Definition : $NDIDOCUMENTPATH/apps/calculations/simple_calc.json Schema for validation : $NDISCHEMAPATH/apps/calculations/simple_calc_schema.json Property_list_name : simple_calc Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/apps/calculators/simple_calc/#simple_calc-fields","text":"Accessed by simple_calc.field where field is one of the field names below field default_value data type description input_parameters answer","title":"simple_calc fields"},{"location":"NDI-matlab/documents/apps/calculators/simple_calc/#app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version","title":"app fields"},{"location":"NDI-matlab/documents/apps/calculators/simple_calc/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/apps/calculators/tuningcurve_calc/","text":"tuningcurve_calc (ndi.document class) Class definition Class name : tuningcurve_calc Short name : tuningcurve_calc Superclasses : base , stimulus_tuningcurve Definition : $NDIDOCUMENTPATH/apps/calculations/tuningcurve_calc.json Schema for validation : $NDISCHEMAPATH/apps/calculations/tuningcurve_calc_schema.json Property_list_name : tuningcurve_calc Class_version : 1 tuningcurve_calc fields Accessed by tuningcurve_calc.field where field is one of the field names below field default_value data type description input_parameters log depends_on base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp stimulus_tuningcurve fields Accessed by stimulus_tuningcurve.field where field is one of the field names below field default_value data type description independent_variable_label independent_variable_value stimid response_mean response_stddev response_stderr individual_responses_real individual_responses_imaginary stimulus_presentation_number control_stimid control_response_mean control_response_stddev control_response_stderr control_individual_responses_real control_individual_responses_imaginary response_units","title":"tuningcurve_calc"},{"location":"NDI-matlab/documents/apps/calculators/tuningcurve_calc/#tuningcurve_calc-ndidocument-class","text":"","title":"tuningcurve_calc (ndi.document class)"},{"location":"NDI-matlab/documents/apps/calculators/tuningcurve_calc/#class-definition","text":"Class name : tuningcurve_calc Short name : tuningcurve_calc Superclasses : base , stimulus_tuningcurve Definition : $NDIDOCUMENTPATH/apps/calculations/tuningcurve_calc.json Schema for validation : $NDISCHEMAPATH/apps/calculations/tuningcurve_calc_schema.json Property_list_name : tuningcurve_calc Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/apps/calculators/tuningcurve_calc/#tuningcurve_calc-fields","text":"Accessed by tuningcurve_calc.field where field is one of the field names below field default_value data type description input_parameters log depends_on","title":"tuningcurve_calc fields"},{"location":"NDI-matlab/documents/apps/calculators/tuningcurve_calc/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/apps/calculators/tuningcurve_calc/#stimulus_tuningcurve-fields","text":"Accessed by stimulus_tuningcurve.field where field is one of the field names below field default_value data type description independent_variable_label independent_variable_value stimid response_mean response_stddev response_stderr individual_responses_real individual_responses_imaginary stimulus_presentation_number control_stimid control_response_mean control_response_stddev control_response_stderr control_individual_responses_real control_individual_responses_imaginary response_units","title":"stimulus_tuningcurve fields"},{"location":"NDI-matlab/documents/apps/jrclust/jrclust_clusters/","text":"jrclust_clusters (ndi.document class) Class definition Class name : jrclust_clusters Short name : jrclust_clusters Superclasses : app , base Definition : $NDIDOCUMENTPATH/apps/jrclust/jrclust_clusters.json Schema for validation : $NDISCHEMAPATH/apps/jrclust/jrclust_clusters_schema.json Property_list_name : jrclust_clusters Class_version : 1 jrclust_clusters fields Accessed by jrclust_clusters.field where field is one of the field names below field default_value data type description res_mat_MD5_checksum app fields Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"jrclust_clusters"},{"location":"NDI-matlab/documents/apps/jrclust/jrclust_clusters/#jrclust_clusters-ndidocument-class","text":"","title":"jrclust_clusters (ndi.document class)"},{"location":"NDI-matlab/documents/apps/jrclust/jrclust_clusters/#class-definition","text":"Class name : jrclust_clusters Short name : jrclust_clusters Superclasses : app , base Definition : $NDIDOCUMENTPATH/apps/jrclust/jrclust_clusters.json Schema for validation : $NDISCHEMAPATH/apps/jrclust/jrclust_clusters_schema.json Property_list_name : jrclust_clusters Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/apps/jrclust/jrclust_clusters/#jrclust_clusters-fields","text":"Accessed by jrclust_clusters.field where field is one of the field names below field default_value data type description res_mat_MD5_checksum","title":"jrclust_clusters fields"},{"location":"NDI-matlab/documents/apps/jrclust/jrclust_clusters/#app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version","title":"app fields"},{"location":"NDI-matlab/documents/apps/jrclust/jrclust_clusters/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/apps/markgarbage/valid_interval/","text":"valid_interval (ndi.document class) Class definition Class name : valid_interval Short name : valid_interval Superclasses : app , base Definition : $NDIDOCUMENTPATH/apps/markgarbage/valid_interval.json Schema for validation : $NDISCHEMAPATH/apps/markgarbage/valid_interval_schema.json Property_list_name : valid_interval Class_version : 1 valid_interval fields Accessed by valid_interval.field where field is one of the field names below field default_value data type description timeref_structt0 t0 timeref_structt1 t1 app fields Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"valid_interval"},{"location":"NDI-matlab/documents/apps/markgarbage/valid_interval/#valid_interval-ndidocument-class","text":"","title":"valid_interval (ndi.document class)"},{"location":"NDI-matlab/documents/apps/markgarbage/valid_interval/#class-definition","text":"Class name : valid_interval Short name : valid_interval Superclasses : app , base Definition : $NDIDOCUMENTPATH/apps/markgarbage/valid_interval.json Schema for validation : $NDISCHEMAPATH/apps/markgarbage/valid_interval_schema.json Property_list_name : valid_interval Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/apps/markgarbage/valid_interval/#valid_interval-fields","text":"Accessed by valid_interval.field where field is one of the field names below field default_value data type description timeref_structt0 t0 timeref_structt1 t1","title":"valid_interval fields"},{"location":"NDI-matlab/documents/apps/markgarbage/valid_interval/#app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version","title":"app fields"},{"location":"NDI-matlab/documents/apps/markgarbage/valid_interval/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters/","text":"spike_extraction_parameters (ndi.document class) Class definition Class name : spike_extraction_parameters Short name : spike_extraction_parameters Superclasses : app , base Definition : $NDIDOCUMENTPATH/apps/spikeextractor/spike_extraction_parameters.json Schema for validation : $NDISCHEMAPATH/apps/spikeextractor/spike_extraction_parameters_schema.json Property_list_name : spike_extraction_parameters Class_version : 1 spike_extraction_parameters fields Accessed by spike_extraction_parameters.field where field is one of the field names below field default_value data type description center_range_time overlap read_time refractory_time spike_start_time spike_end_time do_filter filter_type filter_low filter_high filter_order filter_ripple threshold_method threshold_parameter threshold_sign app fields Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"spike_extraction_parameters"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters/#spike_extraction_parameters-ndidocument-class","text":"","title":"spike_extraction_parameters (ndi.document class)"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters/#class-definition","text":"Class name : spike_extraction_parameters Short name : spike_extraction_parameters Superclasses : app , base Definition : $NDIDOCUMENTPATH/apps/spikeextractor/spike_extraction_parameters.json Schema for validation : $NDISCHEMAPATH/apps/spikeextractor/spike_extraction_parameters_schema.json Property_list_name : spike_extraction_parameters Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters/#spike_extraction_parameters-fields","text":"Accessed by spike_extraction_parameters.field where field is one of the field names below field default_value data type description center_range_time overlap read_time refractory_time spike_start_time spike_end_time do_filter filter_type filter_low filter_high filter_order filter_ripple threshold_method threshold_parameter threshold_sign","title":"spike_extraction_parameters fields"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters/#app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version","title":"app fields"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters_modification/","text":"spike_extraction_parameters_modification (ndi.document class) Class definition Class name : spike_extraction_parameters_modification Short name : spike_extraction_parameters_modification Superclasses : app , base Definition : $NDIDOCUMENTPATH/apps/spikeextractor/spike_extraction_parameters_modification.json Schema for validation : $NDISCHEMAPATH/apps/spikeextractor/spike_extraction_parameters_modification_schema.json Property_list_name : spike_extraction_parameters_modification Class_version : 1 spike_extraction_parameters_modification fields Accessed by spike_extraction_parameters_modification.field where field is one of the field names below field default_value data type description center_range_time overlap read_time refractory_time spike_start_time spike_end_time do_filter filter_type filter_low filter_high filter_order filter_ripple threshold_method threshold_parameter threshold_sign app fields Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"spike_extraction_parameters_modification"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters_modification/#spike_extraction_parameters_modification-ndidocument-class","text":"","title":"spike_extraction_parameters_modification (ndi.document class)"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters_modification/#class-definition","text":"Class name : spike_extraction_parameters_modification Short name : spike_extraction_parameters_modification Superclasses : app , base Definition : $NDIDOCUMENTPATH/apps/spikeextractor/spike_extraction_parameters_modification.json Schema for validation : $NDISCHEMAPATH/apps/spikeextractor/spike_extraction_parameters_modification_schema.json Property_list_name : spike_extraction_parameters_modification Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters_modification/#spike_extraction_parameters_modification-fields","text":"Accessed by spike_extraction_parameters_modification.field where field is one of the field names below field default_value data type description center_range_time overlap read_time refractory_time spike_start_time spike_end_time do_filter filter_type filter_low filter_high filter_order filter_ripple threshold_method threshold_parameter threshold_sign","title":"spike_extraction_parameters_modification fields"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters_modification/#app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version","title":"app fields"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters_modification/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/apps/spikeextractor/spikewaves/","text":"spikewaves (ndi.document class) Class definition Class name : spikewaves Short name : spikewaves Superclasses : app , base , epochid Definition : $NDIDOCUMENTPATH/apps/spikeextractor/spikewaves.json Schema for validation : $NDISCHEMAPATH/apps/spikeextractor/spikewaves_schema.json Property_list_name : spikewaves Class_version : 1 spikewaves fields Accessed by spikewaves.field where field is one of the field names below field default_value data type description extraction_name app fields Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp epochid fields Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"spikewaves"},{"location":"NDI-matlab/documents/apps/spikeextractor/spikewaves/#spikewaves-ndidocument-class","text":"","title":"spikewaves (ndi.document class)"},{"location":"NDI-matlab/documents/apps/spikeextractor/spikewaves/#class-definition","text":"Class name : spikewaves Short name : spikewaves Superclasses : app , base , epochid Definition : $NDIDOCUMENTPATH/apps/spikeextractor/spikewaves.json Schema for validation : $NDISCHEMAPATH/apps/spikeextractor/spikewaves_schema.json Property_list_name : spikewaves Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/apps/spikeextractor/spikewaves/#spikewaves-fields","text":"Accessed by spikewaves.field where field is one of the field names below field default_value data type description extraction_name","title":"spikewaves fields"},{"location":"NDI-matlab/documents/apps/spikeextractor/spikewaves/#app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version","title":"app fields"},{"location":"NDI-matlab/documents/apps/spikeextractor/spikewaves/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/apps/spikeextractor/spikewaves/#epochid-fields","text":"Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"epochid fields"},{"location":"NDI-matlab/documents/apps/spikesorter/sorting_parameters/","text":"sorting_parameters (ndi.document class) Class definition Class name : sorting_parameters Short name : sorting_parameters Superclasses : app , base Definition : $NDIDOCUMENTPATH/apps/spikesorter/sorting_parameters.json Schema for validation : $NDISCHEMAPATH/apps/spikesorter/sorting_parameters_schema.json Property_list_name : sorting_parameters Class_version : 1 sorting_parameters fields Accessed by sorting_parameters.field where field is one of the field names below field default_value data type description graphical_mode num_pca_features interpolation min_clusters max_clusters num_start app fields Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"sorting_parameters"},{"location":"NDI-matlab/documents/apps/spikesorter/sorting_parameters/#sorting_parameters-ndidocument-class","text":"","title":"sorting_parameters (ndi.document class)"},{"location":"NDI-matlab/documents/apps/spikesorter/sorting_parameters/#class-definition","text":"Class name : sorting_parameters Short name : sorting_parameters Superclasses : app , base Definition : $NDIDOCUMENTPATH/apps/spikesorter/sorting_parameters.json Schema for validation : $NDISCHEMAPATH/apps/spikesorter/sorting_parameters_schema.json Property_list_name : sorting_parameters Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/apps/spikesorter/sorting_parameters/#sorting_parameters-fields","text":"Accessed by sorting_parameters.field where field is one of the field names below field default_value data type description graphical_mode num_pca_features interpolation min_clusters max_clusters num_start","title":"sorting_parameters fields"},{"location":"NDI-matlab/documents/apps/spikesorter/sorting_parameters/#app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version","title":"app fields"},{"location":"NDI-matlab/documents/apps/spikesorter/sorting_parameters/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/apps/spikesorter/spike_clusters/","text":"spike_clusters (ndi.document class) Class definition Class name : spike_clusters Short name : spike_clusters Superclasses : app , base Definition : $NDIDOCUMENTPATH/apps/spikesorter/spike_clusters.json Schema for validation : $NDISCHEMAPATH/apps/spikesorter/spike_clusters_schema.json Property_list_name : spike_clusters Class_version : 1 spike_clusters fields Accessed by spike_clusters.field where field is one of the field names below field default_value data type description epoch_info clusterinfo waveform_sample_times app fields Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"spike_clusters"},{"location":"NDI-matlab/documents/apps/spikesorter/spike_clusters/#spike_clusters-ndidocument-class","text":"","title":"spike_clusters (ndi.document class)"},{"location":"NDI-matlab/documents/apps/spikesorter/spike_clusters/#class-definition","text":"Class name : spike_clusters Short name : spike_clusters Superclasses : app , base Definition : $NDIDOCUMENTPATH/apps/spikesorter/spike_clusters.json Schema for validation : $NDISCHEMAPATH/apps/spikesorter/spike_clusters_schema.json Property_list_name : spike_clusters Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/apps/spikesorter/spike_clusters/#spike_clusters-fields","text":"Accessed by spike_clusters.field where field is one of the field names below field default_value data type description epoch_info clusterinfo waveform_sample_times","title":"spike_clusters fields"},{"location":"NDI-matlab/documents/apps/spikesorter/spike_clusters/#app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version","title":"app fields"},{"location":"NDI-matlab/documents/apps/spikesorter/spike_clusters/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/","text":"binnedspikeratevm (ndi.document class) Class definition Class name : binnedspikeratevm Short name : binnedspikeratevm Superclasses : app , base , epochid Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/binnedspikeratevm.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/binnedspikeratevm_schema.json Property_list_name : binnedspikeratevm Class_version : 1 binnedspikeratevm fields Accessed by binnedspikeratevm.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : sorting_parameters_id depends_on : element_id parameters parameters .binsize parameters .vm_baseline_correction parameters .vm_baseline_correct_time parameters .vm_baseline_correct_func parameters .number_of_points voltage_observations firingrate_observations stimids timepoints exactbintime app fields Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp epochid fields Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"binnedspikeratevm"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/#binnedspikeratevm-ndidocument-class","text":"","title":"binnedspikeratevm (ndi.document class)"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/#class-definition","text":"Class name : binnedspikeratevm Short name : binnedspikeratevm Superclasses : app , base , epochid Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/binnedspikeratevm.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/binnedspikeratevm_schema.json Property_list_name : binnedspikeratevm Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/#binnedspikeratevm-fields","text":"Accessed by binnedspikeratevm.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : sorting_parameters_id depends_on : element_id parameters parameters .binsize parameters .vm_baseline_correction parameters .vm_baseline_correct_time parameters .vm_baseline_correct_func parameters .number_of_points voltage_observations firingrate_observations stimids timepoints exactbintime","title":"binnedspikeratevm fields"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/#app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version","title":"app fields"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/#epochid-fields","text":"Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"epochid fields"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals/","text":"vmneuralresponseresiduals (ndi.document class) Class definition Class name : vmneuralresponseresiduals Short name : vmneuralresponseresiduals Superclasses : base Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals_schema.json Property_list_name : vmneuralresponseresiduals Class_version : 1 vmneuralresponseresiduals fields Accessed by vmneuralresponseresiduals.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id vmneuralresponseresiduals vmneuralresponseresiduals .element_epochid vmneuralresponseresiduals .parameters vmneuralresponseresiduals .parameters.number_traces vmneuralresponseresiduals .parameters.samples_per_trace vmneuralresponseresiduals .parameters.units vmneuralresponseresiduals .column_labels vmneuralresponseresiduals .column_labels.first_column vmneuralresponseresiduals .column_labels.second_column vmneuralresponseresiduals .column_labels.third_column vmneuralresponseresiduals .column_labels.fourth_column vmneuralresponseresiduals .column_labels.fifth_column vmneuralresponseresiduals .goodness_of_fit vmneuralresponseresiduals .total_power vmneuralresponseresiduals .residual_power base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"vmneuralresponseresiduals"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals/#vmneuralresponseresiduals-ndidocument-class","text":"","title":"vmneuralresponseresiduals (ndi.document class)"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals/#class-definition","text":"Class name : vmneuralresponseresiduals Short name : vmneuralresponseresiduals Superclasses : base Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals_schema.json Property_list_name : vmneuralresponseresiduals Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals/#vmneuralresponseresiduals-fields","text":"Accessed by vmneuralresponseresiduals.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id vmneuralresponseresiduals vmneuralresponseresiduals .element_epochid vmneuralresponseresiduals .parameters vmneuralresponseresiduals .parameters.number_traces vmneuralresponseresiduals .parameters.samples_per_trace vmneuralresponseresiduals .parameters.units vmneuralresponseresiduals .column_labels vmneuralresponseresiduals .column_labels.first_column vmneuralresponseresiduals .column_labels.second_column vmneuralresponseresiduals .column_labels.third_column vmneuralresponseresiduals .column_labels.fourth_column vmneuralresponseresiduals .column_labels.fifth_column vmneuralresponseresiduals .goodness_of_fit vmneuralresponseresiduals .total_power vmneuralresponseresiduals .residual_power","title":"vmneuralresponseresiduals fields"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/","text":"vmspikefilteringparameters (ndi.document class) Class definition Class name : vmspikefilteringparameters Short name : vmspikefilteringparameters Superclasses : app , base , epochid Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmspikefilteringparameters.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmspikefilteringparameters_schema.json Property_list_name : vmspikefilteringparameters Class_version : 1 vmspikefilteringparameters fields Accessed by vmspikefilteringparameters.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id sampling_rate new_sampling_rate threshold spiketimes filter_algorithm filter_algorithm_parameters rm60Hz refract app fields Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp epochid fields Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"vmspikefilteringparameters"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/#vmspikefilteringparameters-ndidocument-class","text":"","title":"vmspikefilteringparameters (ndi.document class)"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/#class-definition","text":"Class name : vmspikefilteringparameters Short name : vmspikefilteringparameters Superclasses : app , base , epochid Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmspikefilteringparameters.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmspikefilteringparameters_schema.json Property_list_name : vmspikefilteringparameters Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/#vmspikefilteringparameters-fields","text":"Accessed by vmspikefilteringparameters.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id sampling_rate new_sampling_rate threshold spiketimes filter_algorithm filter_algorithm_parameters rm60Hz refract","title":"vmspikefilteringparameters fields"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/#app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version","title":"app fields"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/#epochid-fields","text":"Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"epochid fields"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefit/","text":"vmspikefit (ndi.document class) Class definition Class name : vmspikefit Short name : vmspikefit Superclasses : app , base , epochid Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmspikefit.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmspikefit_schema.json Property_list_name : vmspikefit Class_version : 1 vmspikefit fields Accessed by vmspikefit.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : fit_input_id depends_on : element_id fit_name fit_equation fit_parameters fit_parameter_names fit_sse fit_sse_perpoint fit_constraints app fields Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp epochid fields Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"vmspikefit"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefit/#vmspikefit-ndidocument-class","text":"","title":"vmspikefit (ndi.document class)"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefit/#class-definition","text":"Class name : vmspikefit Short name : vmspikefit Superclasses : app , base , epochid Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmspikefit.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmspikefit_schema.json Property_list_name : vmspikefit Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefit/#vmspikefit-fields","text":"Accessed by vmspikefit.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : fit_input_id depends_on : element_id fit_name fit_equation fit_parameters fit_parameter_names fit_sse fit_sse_perpoint fit_constraints","title":"vmspikefit fields"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefit/#app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version","title":"app fields"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefit/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefit/#epochid-fields","text":"Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"epochid fields"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikesummary/","text":"vmspikesummary (ndi.document class) Class definition Class name : vmspikesummary Short name : vmspikesummary Superclasses : base , epochid Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmspikesummary.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmspikesummary_schema.json Property_list_name : vmspikesummary Class_version : 1 vmspikesummary fields Accessed by vmspikesummary.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id depends_on : spike_extraction_id mean_spikewave sample_times number_of_spikes median_spikekink_vm median_voltageofhalfmaximum median_fullwidthhalfmaximum median_presk_halfwidthmaximum median_fullwidthhalfmaximum_1 median_presk_halfwidthmaximum_1 median_max_dvdt median_kink_index slope_criterion base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp epochid fields Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"vmspikesummary"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikesummary/#vmspikesummary-ndidocument-class","text":"","title":"vmspikesummary (ndi.document class)"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikesummary/#class-definition","text":"Class name : vmspikesummary Short name : vmspikesummary Superclasses : base , epochid Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmspikesummary.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmspikesummary_schema.json Property_list_name : vmspikesummary Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikesummary/#vmspikesummary-fields","text":"Accessed by vmspikesummary.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id depends_on : spike_extraction_id mean_spikewave sample_times number_of_spikes median_spikekink_vm median_voltageofhalfmaximum median_fullwidthhalfmaximum median_presk_halfwidthmaximum median_fullwidthhalfmaximum_1 median_presk_halfwidthmaximum_1 median_max_dvdt median_kink_index slope_criterion","title":"vmspikesummary fields"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikesummary/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikesummary/#epochid-fields","text":"Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"epochid fields"},{"location":"NDI-matlab/documents/daq/daqmetadatareader/","text":"daqmetadatareader (ndi.document class) Class definition Class name : daqmetadatareader Short name : daqmetadatareader Superclasses : base Definition : $NDIDOCUMENTPATH/daq/daqmetadatareader.json Schema for validation : $NDISCHEMAPATH/daq/daqmetadatareader_schema.json Property_list_name : daqmetadatareader Class_version : 1 daqmetadatareader fields Accessed by daqmetadatareader.field where field is one of the field names below field default_value data type description ndi_daqmetadatareader_class tab_separated_file_parameter base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"daqmetadatareader"},{"location":"NDI-matlab/documents/daq/daqmetadatareader/#daqmetadatareader-ndidocument-class","text":"","title":"daqmetadatareader (ndi.document class)"},{"location":"NDI-matlab/documents/daq/daqmetadatareader/#class-definition","text":"Class name : daqmetadatareader Short name : daqmetadatareader Superclasses : base Definition : $NDIDOCUMENTPATH/daq/daqmetadatareader.json Schema for validation : $NDISCHEMAPATH/daq/daqmetadatareader_schema.json Property_list_name : daqmetadatareader Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/daq/daqmetadatareader/#daqmetadatareader-fields","text":"Accessed by daqmetadatareader.field where field is one of the field names below field default_value data type description ndi_daqmetadatareader_class tab_separated_file_parameter","title":"daqmetadatareader fields"},{"location":"NDI-matlab/documents/daq/daqmetadatareader/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/daq/daqreader/","text":"daqreader (ndi.document class) Class definition Class name : daqreader Short name : daqreader Superclasses : base Definition : $NDIDOCUMENTPATH/daq/daqreader.json Schema for validation : $NDISCHEMAPATH/daq/daqreader_schema.json Property_list_name : daqreader Class_version : 1 daqreader fields Accessed by daqreader.field where field is one of the field names below field default_value data type description ndi_daqreader_class base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"daqreader"},{"location":"NDI-matlab/documents/daq/daqreader/#daqreader-ndidocument-class","text":"","title":"daqreader (ndi.document class)"},{"location":"NDI-matlab/documents/daq/daqreader/#class-definition","text":"Class name : daqreader Short name : daqreader Superclasses : base Definition : $NDIDOCUMENTPATH/daq/daqreader.json Schema for validation : $NDISCHEMAPATH/daq/daqreader_schema.json Property_list_name : daqreader Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/daq/daqreader/#daqreader-fields","text":"Accessed by daqreader.field where field is one of the field names below field default_value data type description ndi_daqreader_class","title":"daqreader fields"},{"location":"NDI-matlab/documents/daq/daqreader/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/daq/daqreader_ndr/","text":"daqreader_ndr (ndi.document class) Class definition Class name : daqreader_ndr Short name : daqreader_ndr Superclasses : base , daqreader Definition : $NDIDOCUMENTPATH/daq/daqreader_ndr.json Schema for validation : $NDISCHEMAPATH/daq/daqreader_ndr_schema.json Property_list_name : daqreader_ndr Class_version : 1 daqreader_ndr fields Accessed by daqreader_ndr.field where field is one of the field names below field default_value data type description ndr_reader_string ndi_daqreader_ndr_class base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp daqreader fields Accessed by daqreader.field where field is one of the field names below field default_value data type description ndi_daqreader_class","title":"daqreader_ndr"},{"location":"NDI-matlab/documents/daq/daqreader_ndr/#daqreader_ndr-ndidocument-class","text":"","title":"daqreader_ndr (ndi.document class)"},{"location":"NDI-matlab/documents/daq/daqreader_ndr/#class-definition","text":"Class name : daqreader_ndr Short name : daqreader_ndr Superclasses : base , daqreader Definition : $NDIDOCUMENTPATH/daq/daqreader_ndr.json Schema for validation : $NDISCHEMAPATH/daq/daqreader_ndr_schema.json Property_list_name : daqreader_ndr Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/daq/daqreader_ndr/#daqreader_ndr-fields","text":"Accessed by daqreader_ndr.field where field is one of the field names below field default_value data type description ndr_reader_string ndi_daqreader_ndr_class","title":"daqreader_ndr fields"},{"location":"NDI-matlab/documents/daq/daqreader_ndr/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/daq/daqreader_ndr/#daqreader-fields","text":"Accessed by daqreader.field where field is one of the field names below field default_value data type description ndi_daqreader_class","title":"daqreader fields"},{"location":"NDI-matlab/documents/daq/daqsystem/","text":"daqsystem (ndi.document class) Class definition Class name : daqsystem Short name : daqsystem Superclasses : base Definition : $NDIDOCUMENTPATH/daq/daqsystem.json Schema for validation : $NDISCHEMAPATH/daq/daqsystem_schema.json Property_list_name : daqsystem Class_version : 1 daqsystem fields Accessed by daqsystem.field where field is one of the field names below field default_value data type description ndi_daqsystem_class base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"daqsystem"},{"location":"NDI-matlab/documents/daq/daqsystem/#daqsystem-ndidocument-class","text":"","title":"daqsystem (ndi.document class)"},{"location":"NDI-matlab/documents/daq/daqsystem/#class-definition","text":"Class name : daqsystem Short name : daqsystem Superclasses : base Definition : $NDIDOCUMENTPATH/daq/daqsystem.json Schema for validation : $NDISCHEMAPATH/daq/daqsystem_schema.json Property_list_name : daqsystem Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/daq/daqsystem/#daqsystem-fields","text":"Accessed by daqsystem.field where field is one of the field names below field default_value data type description ndi_daqsystem_class","title":"daqsystem fields"},{"location":"NDI-matlab/documents/daq/daqsystem/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/daq/filenavigator/","text":"filenavigator (ndi.document class) Class definition Class name : filenavigator Short name : filenavigator Superclasses : base Definition : $NDIDOCUMENTPATH/daq/filenavigator.json Schema for validation : $NDISCHEMAPATH/daq/filenavigator_schema.json Property_list_name : filenavigator Class_version : 1 filenavigator fields Accessed by filenavigator.field where field is one of the field names below field default_value data type description ndi_filenavigator_class fileparameters epochprobemap_class epochprobemap_fileparameters base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"filenavigator"},{"location":"NDI-matlab/documents/daq/filenavigator/#filenavigator-ndidocument-class","text":"","title":"filenavigator (ndi.document class)"},{"location":"NDI-matlab/documents/daq/filenavigator/#class-definition","text":"Class name : filenavigator Short name : filenavigator Superclasses : base Definition : $NDIDOCUMENTPATH/daq/filenavigator.json Schema for validation : $NDISCHEMAPATH/daq/filenavigator_schema.json Property_list_name : filenavigator Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/daq/filenavigator/#filenavigator-fields","text":"Accessed by filenavigator.field where field is one of the field names below field default_value data type description ndi_filenavigator_class fileparameters epochprobemap_class epochprobemap_fileparameters","title":"filenavigator fields"},{"location":"NDI-matlab/documents/daq/filenavigator/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/daq/syncgraph/","text":"syncgraph (ndi.document class) Class definition Class name : syncgraph Short name : syncgraph Superclasses : base Definition : $NDIDOCUMENTPATH/daq/syncgraph.json Schema for validation : $NDISCHEMAPATH/daq/syncgraph_schema.json Property_list_name : syncgraph Class_version : 1 syncgraph fields Accessed by syncgraph.field where field is one of the field names below field default_value data type description ndi_syncgraph_class base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"syncgraph"},{"location":"NDI-matlab/documents/daq/syncgraph/#syncgraph-ndidocument-class","text":"","title":"syncgraph (ndi.document class)"},{"location":"NDI-matlab/documents/daq/syncgraph/#class-definition","text":"Class name : syncgraph Short name : syncgraph Superclasses : base Definition : $NDIDOCUMENTPATH/daq/syncgraph.json Schema for validation : $NDISCHEMAPATH/daq/syncgraph_schema.json Property_list_name : syncgraph Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/daq/syncgraph/#syncgraph-fields","text":"Accessed by syncgraph.field where field is one of the field names below field default_value data type description ndi_syncgraph_class","title":"syncgraph fields"},{"location":"NDI-matlab/documents/daq/syncgraph/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/daq/syncrule/","text":"syncrule (ndi.document class) Class definition Class name : syncrule Short name : syncrule Superclasses : base Definition : $NDIDOCUMENTPATH/daq/syncrule.json Schema for validation : $NDISCHEMAPATH/daq/syncrule_schema.json Property_list_name : syncrule Class_version : 1 syncrule fields Accessed by syncrule.field where field is one of the field names below field default_value data type description ndi_syncrule_class parameters base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"syncrule"},{"location":"NDI-matlab/documents/daq/syncrule/#syncrule-ndidocument-class","text":"","title":"syncrule (ndi.document class)"},{"location":"NDI-matlab/documents/daq/syncrule/#class-definition","text":"Class name : syncrule Short name : syncrule Superclasses : base Definition : $NDIDOCUMENTPATH/daq/syncrule.json Schema for validation : $NDISCHEMAPATH/daq/syncrule_schema.json Property_list_name : syncrule Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/daq/syncrule/#syncrule-fields","text":"Accessed by syncrule.field where field is one of the field names below field default_value data type description ndi_syncrule_class parameters","title":"syncrule fields"},{"location":"NDI-matlab/documents/daq/syncrule/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/data/binaryseries_parameters/","text":"binaryseries_parameters (ndi.document class) Class definition Class name : binaryseries_parameters Short name : binaryseries_parameters Superclasses : base Definition : $NDIDOCUMENTPATH/data/binaryseries_parameters.json Schema for validation : $NDISCHEMAPATH/data/binaryseries_parameters_schema.json Property_list_name : binaryseries_parameters Class_version : 1 binaryseries_parameters fields Accessed by binaryseries_parameters.field where field is one of the field names below field default_value data type description time_size time_type data_size data_type data_dim samples_regular_intervals base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"binaryseries_parameters"},{"location":"NDI-matlab/documents/data/binaryseries_parameters/#binaryseries_parameters-ndidocument-class","text":"","title":"binaryseries_parameters (ndi.document class)"},{"location":"NDI-matlab/documents/data/binaryseries_parameters/#class-definition","text":"Class name : binaryseries_parameters Short name : binaryseries_parameters Superclasses : base Definition : $NDIDOCUMENTPATH/data/binaryseries_parameters.json Schema for validation : $NDISCHEMAPATH/data/binaryseries_parameters_schema.json Property_list_name : binaryseries_parameters Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/data/binaryseries_parameters/#binaryseries_parameters-fields","text":"Accessed by binaryseries_parameters.field where field is one of the field names below field default_value data type description time_size time_type data_size data_type data_dim samples_regular_intervals","title":"binaryseries_parameters fields"},{"location":"NDI-matlab/documents/data/binaryseries_parameters/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/data/fitcurve/","text":"fitcurve (ndi.document class) Class definition Class name : fitcurve Short name : fitcurve Superclasses : base Definition : $NDIDOCUMENTPATH/data/fitcurve.json Schema for validation : $NDISCHEMAPATH/data/fitcurve.json Property_list_name : fitcurve Class_version : 1 fitcurve fields Accessed by fitcurve.field where field is one of the field names below field default_value data type description fit_name fit_equation fit_parameters fit_parameter_names fit_independent_variable_names fit_dependent_variable_names fit_sse fit_constraints fit_data base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"fitcurve"},{"location":"NDI-matlab/documents/data/fitcurve/#fitcurve-ndidocument-class","text":"","title":"fitcurve (ndi.document class)"},{"location":"NDI-matlab/documents/data/fitcurve/#class-definition","text":"Class name : fitcurve Short name : fitcurve Superclasses : base Definition : $NDIDOCUMENTPATH/data/fitcurve.json Schema for validation : $NDISCHEMAPATH/data/fitcurve.json Property_list_name : fitcurve Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/data/fitcurve/#fitcurve-fields","text":"Accessed by fitcurve.field where field is one of the field names below field default_value data type description fit_name fit_equation fit_parameters fit_parameter_names fit_independent_variable_names fit_dependent_variable_names fit_sse fit_constraints fit_data","title":"fitcurve fields"},{"location":"NDI-matlab/documents/data/fitcurve/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/data/ngrid/","text":"ngrid (ndi.document class) Class definition Class name : ngrid Short name : ngrid Superclasses : base Definition : $NDIDOCUMENTPATH/data/ngrid.json Schema for validation : $NDISCHEMAPATH/data/ngrid_schema.json Property_list_name : ngrid Class_version : 1 ngrid fields Accessed by ngrid.field where field is one of the field names below field default_value data type description data_size data_type data_dim coordinates base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"ngrid"},{"location":"NDI-matlab/documents/data/ngrid/#ngrid-ndidocument-class","text":"","title":"ngrid (ndi.document class)"},{"location":"NDI-matlab/documents/data/ngrid/#class-definition","text":"Class name : ngrid Short name : ngrid Superclasses : base Definition : $NDIDOCUMENTPATH/data/ngrid.json Schema for validation : $NDISCHEMAPATH/data/ngrid_schema.json Property_list_name : ngrid Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/data/ngrid/#ngrid-fields","text":"Accessed by ngrid.field where field is one of the field names below field default_value data type description data_size data_type data_dim coordinates","title":"ngrid fields"},{"location":"NDI-matlab/documents/data/ngrid/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/ingestion/daqmetadatareader_epochdata_ingested/","text":"daqmetadatareader_epochdata_ingested (ndi.document class) Class definition Class name : daqmetadatareader_epochdata_ingested Short name : daqmetadatareader_epochdata_ingested Superclasses : base , epochid Definition : $NDIDOCUMENTPATH/ingestion/daqmetadatareader_epochdata_ingested.json Schema for validation : $NDISCHEMAPATH/ingestion/daqmetadatareader_epochdata_ingested_schema.json Property_list_name : daqmetadatareader_epochdata_ingested Class_version : 1 base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp epochid fields Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"daqmetadatareader_epochdata_ingested"},{"location":"NDI-matlab/documents/ingestion/daqmetadatareader_epochdata_ingested/#daqmetadatareader_epochdata_ingested-ndidocument-class","text":"","title":"daqmetadatareader_epochdata_ingested (ndi.document class)"},{"location":"NDI-matlab/documents/ingestion/daqmetadatareader_epochdata_ingested/#class-definition","text":"Class name : daqmetadatareader_epochdata_ingested Short name : daqmetadatareader_epochdata_ingested Superclasses : base , epochid Definition : $NDIDOCUMENTPATH/ingestion/daqmetadatareader_epochdata_ingested.json Schema for validation : $NDISCHEMAPATH/ingestion/daqmetadatareader_epochdata_ingested_schema.json Property_list_name : daqmetadatareader_epochdata_ingested Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/ingestion/daqmetadatareader_epochdata_ingested/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/ingestion/daqmetadatareader_epochdata_ingested/#epochid-fields","text":"Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"epochid fields"},{"location":"NDI-matlab/documents/ingestion/daqreader_epochdata_ingested/","text":"daqreader_epochdata_ingested (ndi.document class) Class definition Class name : daqreader_epochdata_ingested Short name : daqreader_epochdata_ingested Superclasses : base , epochid Definition : $NDIDOCUMENTPATH/ingestion/daqreader_epochdata_ingested.json Schema for validation : $NDISCHEMAPATH/ingestion/daqreader_epochdata_ingested_schema.json Property_list_name : daqreader_epochdata_ingested Class_version : 1 daqreader_epochdata_ingested fields Accessed by daqreader_epochdata_ingested.field where field is one of the field names below field default_value data type description epochtable base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp epochid fields Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"daqreader_epochdata_ingested"},{"location":"NDI-matlab/documents/ingestion/daqreader_epochdata_ingested/#daqreader_epochdata_ingested-ndidocument-class","text":"","title":"daqreader_epochdata_ingested (ndi.document class)"},{"location":"NDI-matlab/documents/ingestion/daqreader_epochdata_ingested/#class-definition","text":"Class name : daqreader_epochdata_ingested Short name : daqreader_epochdata_ingested Superclasses : base , epochid Definition : $NDIDOCUMENTPATH/ingestion/daqreader_epochdata_ingested.json Schema for validation : $NDISCHEMAPATH/ingestion/daqreader_epochdata_ingested_schema.json Property_list_name : daqreader_epochdata_ingested Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/ingestion/daqreader_epochdata_ingested/#daqreader_epochdata_ingested-fields","text":"Accessed by daqreader_epochdata_ingested.field where field is one of the field names below field default_value data type description epochtable","title":"daqreader_epochdata_ingested fields"},{"location":"NDI-matlab/documents/ingestion/daqreader_epochdata_ingested/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/ingestion/daqreader_epochdata_ingested/#epochid-fields","text":"Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"epochid fields"},{"location":"NDI-matlab/documents/ingestion/daqreader_mfdaq_epochdata_ingested/","text":"daqreader_mfdaq_epochdata_ingested (ndi.document class) Class definition Class name : daqreader_mfdaq_epochdata_ingested Short name : daqreader_mfdaq_epochdata_ingested Superclasses : base , epochid , daqreader_epochdata_ingested Definition : $NDIDOCUMENTPATH/ingestion/daqreader_mfdaq_epochdata_ingested.json Schema for validation : $NDISCHEMAPATH/ingestion/daqreader_mfdaq_epochdata_ingested_schema.json Property_list_name : daqreader_mfdaq_epochdata_ingested Class_version : 1 daqreader_mfdaq_epochdata_ingested fields Accessed by daqreader_mfdaq_epochdata_ingested.field where field is one of the field names below field default_value data type description parameters base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp epochid fields Accessed by epochid.field where field is one of the field names below field default_value data type description epochid daqreader_epochdata_ingested fields Accessed by daqreader_epochdata_ingested.field where field is one of the field names below field default_value data type description epochtable","title":"daqreader_mfdaq_epochdata_ingested"},{"location":"NDI-matlab/documents/ingestion/daqreader_mfdaq_epochdata_ingested/#daqreader_mfdaq_epochdata_ingested-ndidocument-class","text":"","title":"daqreader_mfdaq_epochdata_ingested (ndi.document class)"},{"location":"NDI-matlab/documents/ingestion/daqreader_mfdaq_epochdata_ingested/#class-definition","text":"Class name : daqreader_mfdaq_epochdata_ingested Short name : daqreader_mfdaq_epochdata_ingested Superclasses : base , epochid , daqreader_epochdata_ingested Definition : $NDIDOCUMENTPATH/ingestion/daqreader_mfdaq_epochdata_ingested.json Schema for validation : $NDISCHEMAPATH/ingestion/daqreader_mfdaq_epochdata_ingested_schema.json Property_list_name : daqreader_mfdaq_epochdata_ingested Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/ingestion/daqreader_mfdaq_epochdata_ingested/#daqreader_mfdaq_epochdata_ingested-fields","text":"Accessed by daqreader_mfdaq_epochdata_ingested.field where field is one of the field names below field default_value data type description parameters","title":"daqreader_mfdaq_epochdata_ingested fields"},{"location":"NDI-matlab/documents/ingestion/daqreader_mfdaq_epochdata_ingested/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/ingestion/daqreader_mfdaq_epochdata_ingested/#epochid-fields","text":"Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"epochid fields"},{"location":"NDI-matlab/documents/ingestion/daqreader_mfdaq_epochdata_ingested/#daqreader_epochdata_ingested-fields","text":"Accessed by daqreader_epochdata_ingested.field where field is one of the field names below field default_value data type description epochtable","title":"daqreader_epochdata_ingested fields"},{"location":"NDI-matlab/documents/ingestion/epochfiles_ingested/","text":"epochfiles_ingested (ndi.document class) Class definition Class name : epochfiles_ingested Short name : epochfiles_ingested Superclasses : base Definition : $NDIDOCUMENTPATH/ingestion/epochfiles_ingested.json Schema for validation : $NDISCHEMAPATH/ingestion/epochfiles_ingested_schema.json Property_list_name : epochfiles_ingested Class_version : 1 epochfiles_ingested fields Accessed by epochfiles_ingested.field where field is one of the field names below field default_value data type description epoch_id files epochprobemap base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"epochfiles_ingested"},{"location":"NDI-matlab/documents/ingestion/epochfiles_ingested/#epochfiles_ingested-ndidocument-class","text":"","title":"epochfiles_ingested (ndi.document class)"},{"location":"NDI-matlab/documents/ingestion/epochfiles_ingested/#class-definition","text":"Class name : epochfiles_ingested Short name : epochfiles_ingested Superclasses : base Definition : $NDIDOCUMENTPATH/ingestion/epochfiles_ingested.json Schema for validation : $NDISCHEMAPATH/ingestion/epochfiles_ingested_schema.json Property_list_name : epochfiles_ingested Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/ingestion/epochfiles_ingested/#epochfiles_ingested-fields","text":"Accessed by epochfiles_ingested.field where field is one of the field names below field default_value data type description epoch_id files epochprobemap","title":"epochfiles_ingested fields"},{"location":"NDI-matlab/documents/ingestion/epochfiles_ingested/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/ingestion/metadata_editor/","text":"metadata_editor (ndi.document class) Class definition Class name : metadata_editor Short name : metadata_editor Superclasses : base Definition : $NDIDOCUMENTPATH/ingestion/metadata_editor.json Schema for validation : $NDISCHEMAPATH/ingestion/metadata_editor_schema.json Property_list_name : metadata_editor Class_version : 1 metadata_editor fields Accessed by metadata_editor.field where field is one of the field names below field default_value data type description metadata_structure base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"metadata_editor"},{"location":"NDI-matlab/documents/ingestion/metadata_editor/#metadata_editor-ndidocument-class","text":"","title":"metadata_editor (ndi.document class)"},{"location":"NDI-matlab/documents/ingestion/metadata_editor/#class-definition","text":"Class name : metadata_editor Short name : metadata_editor Superclasses : base Definition : $NDIDOCUMENTPATH/ingestion/metadata_editor.json Schema for validation : $NDISCHEMAPATH/ingestion/metadata_editor_schema.json Property_list_name : metadata_editor Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/ingestion/metadata_editor/#metadata_editor-fields","text":"Accessed by metadata_editor.field where field is one of the field names below field default_value data type description metadata_structure","title":"metadata_editor fields"},{"location":"NDI-matlab/documents/ingestion/metadata_editor/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/ingestion/syncrule_mapping/","text":"syncrule_mapping (ndi.document class) Class definition Class name : syncrule_mapping Short name : syncrule_mapping Superclasses : base Definition : $NDIDOCUMENTPATH/ingestion/syncrule_mapping.json Schema for validation : $NDISCHEMAPATH/ingestion/syncrule_mapping_schema.json Property_list_name : syncrule_mapping Class_version : 1 syncrule_mapping fields Accessed by syncrule_mapping.field where field is one of the field names below field default_value data type description cost mapping epochnode_a epochnode_b base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"syncrule_mapping"},{"location":"NDI-matlab/documents/ingestion/syncrule_mapping/#syncrule_mapping-ndidocument-class","text":"","title":"syncrule_mapping (ndi.document class)"},{"location":"NDI-matlab/documents/ingestion/syncrule_mapping/#class-definition","text":"Class name : syncrule_mapping Short name : syncrule_mapping Superclasses : base Definition : $NDIDOCUMENTPATH/ingestion/syncrule_mapping.json Schema for validation : $NDISCHEMAPATH/ingestion/syncrule_mapping_schema.json Property_list_name : syncrule_mapping Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/ingestion/syncrule_mapping/#syncrule_mapping-fields","text":"Accessed by syncrule_mapping.field where field is one of the field names below field default_value data type description cost mapping epochnode_a epochnode_b","title":"syncrule_mapping fields"},{"location":"NDI-matlab/documents/ingestion/syncrule_mapping/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/metadata/openminds/","text":"openminds (ndi.document class) Class definition Class name : openminds Short name : openminds Superclasses : base Definition : $NDIDOCUMENTPATH/metadata/openminds.json Schema for validation : $NDISCHEMAPATH/metadata/openminds.json Property_list_name : openminds Class_version : 1 openminds fields Accessed by openminds.field where field is one of the field names below field default_value data type description openminds_type matlab_type openminds_id fields base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"openminds"},{"location":"NDI-matlab/documents/metadata/openminds/#openminds-ndidocument-class","text":"","title":"openminds (ndi.document class)"},{"location":"NDI-matlab/documents/metadata/openminds/#class-definition","text":"Class name : openminds Short name : openminds Superclasses : base Definition : $NDIDOCUMENTPATH/metadata/openminds.json Schema for validation : $NDISCHEMAPATH/metadata/openminds.json Property_list_name : openminds Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/metadata/openminds/#openminds-fields","text":"Accessed by openminds.field where field is one of the field names below field default_value data type description openminds_type matlab_type openminds_id fields","title":"openminds fields"},{"location":"NDI-matlab/documents/metadata/openminds/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/metadata/openminds_element/","text":"openminds_element (ndi.document class) Class definition Class name : openminds_element Short name : openminds_element Superclasses : base , openminds Definition : $NDIDOCUMENTPATH/metadata/openminds_element.json Schema for validation : $NDISCHEMAPATH/metadata/openminds_element.json Property_list_name : openminds_element Class_version : 1 base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp openminds fields Accessed by openminds.field where field is one of the field names below field default_value data type description openminds_type matlab_type openminds_id fields","title":"openminds_element"},{"location":"NDI-matlab/documents/metadata/openminds_element/#openminds_element-ndidocument-class","text":"","title":"openminds_element (ndi.document class)"},{"location":"NDI-matlab/documents/metadata/openminds_element/#class-definition","text":"Class name : openminds_element Short name : openminds_element Superclasses : base , openminds Definition : $NDIDOCUMENTPATH/metadata/openminds_element.json Schema for validation : $NDISCHEMAPATH/metadata/openminds_element.json Property_list_name : openminds_element Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/metadata/openminds_element/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/metadata/openminds_element/#openminds-fields","text":"Accessed by openminds.field where field is one of the field names below field default_value data type description openminds_type matlab_type openminds_id fields","title":"openminds fields"},{"location":"NDI-matlab/documents/metadata/openminds_stimulus/","text":"openminds_stimulus (ndi.document class) Class definition Class name : openminds_stimulus Short name : openminds_stimulus Superclasses : base , epochid , openminds Definition : $NDIDOCUMENTPATH/metadata/openminds_stimulus.json Schema for validation : $NDISCHEMAPATH/metadata/openminds_stimulus.json Property_list_name : openminds_stimulus Class_version : 1 base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp epochid fields Accessed by epochid.field where field is one of the field names below field default_value data type description epochid openminds fields Accessed by openminds.field where field is one of the field names below field default_value data type description openminds_type matlab_type openminds_id fields","title":"openminds_stimulus"},{"location":"NDI-matlab/documents/metadata/openminds_stimulus/#openminds_stimulus-ndidocument-class","text":"","title":"openminds_stimulus (ndi.document class)"},{"location":"NDI-matlab/documents/metadata/openminds_stimulus/#class-definition","text":"Class name : openminds_stimulus Short name : openminds_stimulus Superclasses : base , epochid , openminds Definition : $NDIDOCUMENTPATH/metadata/openminds_stimulus.json Schema for validation : $NDISCHEMAPATH/metadata/openminds_stimulus.json Property_list_name : openminds_stimulus Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/metadata/openminds_stimulus/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/metadata/openminds_stimulus/#epochid-fields","text":"Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"epochid fields"},{"location":"NDI-matlab/documents/metadata/openminds_stimulus/#openminds-fields","text":"Accessed by openminds.field where field is one of the field names below field default_value data type description openminds_type matlab_type openminds_id fields","title":"openminds fields"},{"location":"NDI-matlab/documents/metadata/openminds_subject/","text":"openminds_subject (ndi.document class) Class definition Class name : openminds_subject Short name : openminds_subject Superclasses : base , openminds Definition : $NDIDOCUMENTPATH/metadata/openminds_subject.json Schema for validation : $NDISCHEMAPATH/metadata/openminds_subject.json Property_list_name : openminds_subject Class_version : 1 base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp openminds fields Accessed by openminds.field where field is one of the field names below field default_value data type description openminds_type matlab_type openminds_id fields","title":"openminds_subject"},{"location":"NDI-matlab/documents/metadata/openminds_subject/#openminds_subject-ndidocument-class","text":"","title":"openminds_subject (ndi.document class)"},{"location":"NDI-matlab/documents/metadata/openminds_subject/#class-definition","text":"Class name : openminds_subject Short name : openminds_subject Superclasses : base , openminds Definition : $NDIDOCUMENTPATH/metadata/openminds_subject.json Schema for validation : $NDISCHEMAPATH/metadata/openminds_subject.json Property_list_name : openminds_subject Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/metadata/openminds_subject/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/metadata/openminds_subject/#openminds-fields","text":"Accessed by openminds.field where field is one of the field names below field default_value data type description openminds_type matlab_type openminds_id fields","title":"openminds fields"},{"location":"NDI-matlab/documents/neuron/neuron_extracellular/","text":"neuron_extracellular (ndi.document class) Class definition Class name : neuron_extracellular Short name : neuron_extracellular Superclasses : app , base Definition : $NDIDOCUMENTPATH/neuron/neuron_extracellular.json Schema for validation : $NDISCHEMAPATH/neuron/neuron_extracellular_schema.json Property_list_name : neuron_extracellular Class_version : 1 neuron_extracellular fields Accessed by neuron_extracellular.field where field is one of the field names below field default_value data type description number_of_samples_per_channel number_of_channels mean_waveform waveform_sample_times cluster_index quality_number quality_label app fields Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"neuron_extracellular"},{"location":"NDI-matlab/documents/neuron/neuron_extracellular/#neuron_extracellular-ndidocument-class","text":"","title":"neuron_extracellular (ndi.document class)"},{"location":"NDI-matlab/documents/neuron/neuron_extracellular/#class-definition","text":"Class name : neuron_extracellular Short name : neuron_extracellular Superclasses : app , base Definition : $NDIDOCUMENTPATH/neuron/neuron_extracellular.json Schema for validation : $NDISCHEMAPATH/neuron/neuron_extracellular_schema.json Property_list_name : neuron_extracellular Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/neuron/neuron_extracellular/#neuron_extracellular-fields","text":"Accessed by neuron_extracellular.field where field is one of the field names below field default_value data type description number_of_samples_per_channel number_of_channels mean_waveform waveform_sample_times cluster_index quality_number quality_label","title":"neuron_extracellular fields"},{"location":"NDI-matlab/documents/neuron/neuron_extracellular/#app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name version url os os_version interpreter interpreter_version","title":"app fields"},{"location":"NDI-matlab/documents/neuron/neuron_extracellular/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/probe/electrode_offset_voltage/","text":"electrode_offset_voltage (ndi.document class) Class definition Class name : electrode_offset_voltage Short name : electrode_offset_voltage Superclasses : base Definition : $NDIDOCUMENTPATH/probe/electrode_offset_voltage.json Schema for validation : $NDISCHEMAPATH/probe/electrode_offset_voltage_schema.json Property_list_name : electrode_offset_voltage Class_version : 1 electrode_offset_voltage fields Accessed by electrode_offset_voltage.field where field is one of the field names below field default_value data type description offset temperature base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"electrode_offset_voltage"},{"location":"NDI-matlab/documents/probe/electrode_offset_voltage/#electrode_offset_voltage-ndidocument-class","text":"","title":"electrode_offset_voltage (ndi.document class)"},{"location":"NDI-matlab/documents/probe/electrode_offset_voltage/#class-definition","text":"Class name : electrode_offset_voltage Short name : electrode_offset_voltage Superclasses : base Definition : $NDIDOCUMENTPATH/probe/electrode_offset_voltage.json Schema for validation : $NDISCHEMAPATH/probe/electrode_offset_voltage_schema.json Property_list_name : electrode_offset_voltage Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/probe/electrode_offset_voltage/#electrode_offset_voltage-fields","text":"Accessed by electrode_offset_voltage.field where field is one of the field names below field default_value data type description offset temperature","title":"electrode_offset_voltage fields"},{"location":"NDI-matlab/documents/probe/electrode_offset_voltage/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/probe/probe_location/","text":"probe_location (ndi.document class) Class definition Class name : probe_location Short name : probe_location Superclasses : base Definition : $NDIDOCUMENTPATH/probe/probe_location.json Schema for validation : $NDISCHEMAPATH/probe/probe_location_schema.json Property_list_name : probe_location Class_version : 1 probe_location fields Accessed by probe_location.field where field is one of the field names below field default_value data type description ontology_name name base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"probe_location"},{"location":"NDI-matlab/documents/probe/probe_location/#probe_location-ndidocument-class","text":"","title":"probe_location (ndi.document class)"},{"location":"NDI-matlab/documents/probe/probe_location/#class-definition","text":"Class name : probe_location Short name : probe_location Superclasses : base Definition : $NDIDOCUMENTPATH/probe/probe_location.json Schema for validation : $NDISCHEMAPATH/probe/probe_location_schema.json Property_list_name : probe_location Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/probe/probe_location/#probe_location-fields","text":"Accessed by probe_location.field where field is one of the field names below field default_value data type description ontology_name name","title":"probe_location fields"},{"location":"NDI-matlab/documents/probe/probe_location/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/stimulus/control_stimulus_ids/","text":"control_stimulus_ids (ndi.document class) Class definition Class name : control_stimulus_ids Short name : control_stimulus_ids Superclasses : base Definition : $NDIDOCUMENTPATH/stimulus/control_stimulus_ids.json Schema for validation : $NDISCHEMAPATH/stimulus/control_stimulus_ids.json Property_list_name : control_stimulus_ids Class_version : 1 control_stimulus_ids fields Accessed by control_stimulus_ids.field where field is one of the field names below field default_value data type description control_stimulus_ids control_stimulus_id_method base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"control_stimulus_ids"},{"location":"NDI-matlab/documents/stimulus/control_stimulus_ids/#control_stimulus_ids-ndidocument-class","text":"","title":"control_stimulus_ids (ndi.document class)"},{"location":"NDI-matlab/documents/stimulus/control_stimulus_ids/#class-definition","text":"Class name : control_stimulus_ids Short name : control_stimulus_ids Superclasses : base Definition : $NDIDOCUMENTPATH/stimulus/control_stimulus_ids.json Schema for validation : $NDISCHEMAPATH/stimulus/control_stimulus_ids.json Property_list_name : control_stimulus_ids Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/stimulus/control_stimulus_ids/#control_stimulus_ids-fields","text":"Accessed by control_stimulus_ids.field where field is one of the field names below field default_value data type description control_stimulus_ids control_stimulus_id_method","title":"control_stimulus_ids fields"},{"location":"NDI-matlab/documents/stimulus/control_stimulus_ids/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_bath/","text":"stimulus_bath (ndi.document class) Class definition Class name : stimulus_bath Short name : stimulus_bath Superclasses : base , epochid Definition : $NDIDOCUMENTPATH/stimulus/stimulus_bath.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_bath_schema.json Property_list_name : stimulus_bath Class_version : 1 stimulus_bath fields Accessed by stimulus_bath.field where field is one of the field names below field default_value data type description location mixture_table base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp epochid fields Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"stimulus_bath"},{"location":"NDI-matlab/documents/stimulus/stimulus_bath/#stimulus_bath-ndidocument-class","text":"","title":"stimulus_bath (ndi.document class)"},{"location":"NDI-matlab/documents/stimulus/stimulus_bath/#class-definition","text":"Class name : stimulus_bath Short name : stimulus_bath Superclasses : base , epochid Definition : $NDIDOCUMENTPATH/stimulus/stimulus_bath.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_bath_schema.json Property_list_name : stimulus_bath Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/stimulus/stimulus_bath/#stimulus_bath-fields","text":"Accessed by stimulus_bath.field where field is one of the field names below field default_value data type description location mixture_table","title":"stimulus_bath fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_bath/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_bath/#epochid-fields","text":"Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"epochid fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter/","text":"stimulus_parameter (ndi.document class) Class definition Class name : stimulus_parameter Short name : stimulus_parameter Superclasses : base , epochid Definition : $NDIDOCUMENTPATH/stimulus/stimulus_parameter.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_parameter_schema.json Property_list_name : stimulus_parameter Class_version : 1 stimulus_parameter fields Accessed by stimulus_parameter.field where field is one of the field names below field default_value data type description ontology_name name value base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp epochid fields Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"stimulus_parameter"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter/#stimulus_parameter-ndidocument-class","text":"","title":"stimulus_parameter (ndi.document class)"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter/#class-definition","text":"Class name : stimulus_parameter Short name : stimulus_parameter Superclasses : base , epochid Definition : $NDIDOCUMENTPATH/stimulus/stimulus_parameter.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_parameter_schema.json Property_list_name : stimulus_parameter Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter/#stimulus_parameter-fields","text":"Accessed by stimulus_parameter.field where field is one of the field names below field default_value data type description ontology_name name value","title":"stimulus_parameter fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter/#epochid-fields","text":"Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"epochid fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter_table/","text":"stimulus_parameter_table (ndi.document class) Class definition Class name : stimulus_parameter_table Short name : stimulus_parameter_table Superclasses : base , epochid Definition : $NDIDOCUMENTPATH/stimulus/stimulus_parameter_table.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_parameter_table.json Property_list_name : stimulus_parameter_table Class_version : 1 stimulus_parameter_table fields Accessed by stimulus_parameter_table.field where field is one of the field names below field default_value data type description string base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp epochid fields Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"stimulus_parameter_table"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter_table/#stimulus_parameter_table-ndidocument-class","text":"","title":"stimulus_parameter_table (ndi.document class)"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter_table/#class-definition","text":"Class name : stimulus_parameter_table Short name : stimulus_parameter_table Superclasses : base , epochid Definition : $NDIDOCUMENTPATH/stimulus/stimulus_parameter_table.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_parameter_table.json Property_list_name : stimulus_parameter_table Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter_table/#stimulus_parameter_table-fields","text":"Accessed by stimulus_parameter_table.field where field is one of the field names below field default_value data type description string","title":"stimulus_parameter_table fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter_table/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter_table/#epochid-fields","text":"Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"epochid fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_presentation/","text":"stimulus_presentation (ndi.document class) Class definition Class name : stimulus_presentation Short name : stimulus_presentation Superclasses : base , epochid Definition : $NDIDOCUMENTPATH/stimulus/stimulus_presentation.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_presentation_schema.json Property_list_name : stimulus_presentation Class_version : 1 stimulus_presentation fields Accessed by stimulus_presentation.field where field is one of the field names below field default_value data type description presentation_order presentation_time stimuli base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp epochid fields Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"stimulus_presentation"},{"location":"NDI-matlab/documents/stimulus/stimulus_presentation/#stimulus_presentation-ndidocument-class","text":"","title":"stimulus_presentation (ndi.document class)"},{"location":"NDI-matlab/documents/stimulus/stimulus_presentation/#class-definition","text":"Class name : stimulus_presentation Short name : stimulus_presentation Superclasses : base , epochid Definition : $NDIDOCUMENTPATH/stimulus/stimulus_presentation.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_presentation_schema.json Property_list_name : stimulus_presentation Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/stimulus/stimulus_presentation/#stimulus_presentation-fields","text":"Accessed by stimulus_presentation.field where field is one of the field names below field default_value data type description presentation_order presentation_time stimuli","title":"stimulus_presentation fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_presentation/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_presentation/#epochid-fields","text":"Accessed by epochid.field where field is one of the field names below field default_value data type description epochid","title":"epochid fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_response/","text":"stimulus_response (ndi.document class) Class definition Class name : stimulus_response Short name : stimulus_response Superclasses : base Definition : $NDIDOCUMENTPATH/stimulus/stimulus_response.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_response_schema.json Property_list_name : stimulus_response Class_version : 1 stimulus_response fields Accessed by stimulus_response.field where field is one of the field names below field default_value data type description stimulator_epochid element_epochid base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"stimulus_response"},{"location":"NDI-matlab/documents/stimulus/stimulus_response/#stimulus_response-ndidocument-class","text":"","title":"stimulus_response (ndi.document class)"},{"location":"NDI-matlab/documents/stimulus/stimulus_response/#class-definition","text":"Class name : stimulus_response Short name : stimulus_response Superclasses : base Definition : $NDIDOCUMENTPATH/stimulus/stimulus_response.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_response_schema.json Property_list_name : stimulus_response Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/stimulus/stimulus_response/#stimulus_response-fields","text":"Accessed by stimulus_response.field where field is one of the field names below field default_value data type description stimulator_epochid element_epochid","title":"stimulus_response fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_response/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar/","text":"stimulus_response_scalar (ndi.document class) Class definition Class name : stimulus_response_scalar Short name : stimulus_response_scalar Superclasses : base , stimulus_response Definition : $NDIDOCUMENTPATH/stimulus/stimulus_response_scalar.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_response_scalar_schema.json Property_list_name : stimulus_response_scalar Class_version : 1 stimulus_response_scalar fields Accessed by stimulus_response_scalar.field where field is one of the field names below field default_value data type description response_type responses base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp stimulus_response fields Accessed by stimulus_response.field where field is one of the field names below field default_value data type description stimulator_epochid element_epochid","title":"stimulus_response_scalar"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar/#stimulus_response_scalar-ndidocument-class","text":"","title":"stimulus_response_scalar (ndi.document class)"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar/#class-definition","text":"Class name : stimulus_response_scalar Short name : stimulus_response_scalar Superclasses : base , stimulus_response Definition : $NDIDOCUMENTPATH/stimulus/stimulus_response_scalar.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_response_scalar_schema.json Property_list_name : stimulus_response_scalar Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar/#stimulus_response_scalar-fields","text":"Accessed by stimulus_response_scalar.field where field is one of the field names below field default_value data type description response_type responses","title":"stimulus_response_scalar fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar/#stimulus_response-fields","text":"Accessed by stimulus_response.field where field is one of the field names below field default_value data type description stimulator_epochid element_epochid","title":"stimulus_response fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar_parameters/","text":"stimulus_response_scalar_parameters (ndi.document class) Class definition Class name : stimulus_response_scalar_parameters Short name : stimulus_response_scalar_parameters Superclasses : base Definition : $NDIDOCUMENTPATH/stimulus/stimulus_response_scalar_parameters.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_response_scalar_parameters_schema.json Property_list_name : stimulus_response_scalar_parameters Class_version : 1 base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"stimulus_response_scalar_parameters"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar_parameters/#stimulus_response_scalar_parameters-ndidocument-class","text":"","title":"stimulus_response_scalar_parameters (ndi.document class)"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar_parameters/#class-definition","text":"Class name : stimulus_response_scalar_parameters Short name : stimulus_response_scalar_parameters Superclasses : base Definition : $NDIDOCUMENTPATH/stimulus/stimulus_response_scalar_parameters.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_response_scalar_parameters_schema.json Property_list_name : stimulus_response_scalar_parameters Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar_parameters/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar_parameters_basic/","text":"stimulus_response_scalar_parameters_basic (ndi.document class) Class definition Class name : stimulus_response_scalar_parameters_basic Short name : stimulus_response_scalar_parameters_basic Superclasses : base , stimulus_response_scalar_parameters Definition : $NDIDOCUMENTPATH/stimulus/stimulus_response_scalar_parameters_basic.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_response_scalar_parameters_basic_schema.json Property_list_name : stimulus_response_scalar_parameters_basic Class_version : 1 stimulus_response_scalar_parameters_basic fields Accessed by stimulus_response_scalar_parameters_basic.field where field is one of the field names below field default_value data type description temporalfreqfunc freq_response prestimulus_time prestimulus_normalization isspike spiketrain_dt base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"stimulus_response_scalar_parameters_basic"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar_parameters_basic/#stimulus_response_scalar_parameters_basic-ndidocument-class","text":"","title":"stimulus_response_scalar_parameters_basic (ndi.document class)"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar_parameters_basic/#class-definition","text":"Class name : stimulus_response_scalar_parameters_basic Short name : stimulus_response_scalar_parameters_basic Superclasses : base , stimulus_response_scalar_parameters Definition : $NDIDOCUMENTPATH/stimulus/stimulus_response_scalar_parameters_basic.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_response_scalar_parameters_basic_schema.json Property_list_name : stimulus_response_scalar_parameters_basic Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar_parameters_basic/#stimulus_response_scalar_parameters_basic-fields","text":"Accessed by stimulus_response_scalar_parameters_basic.field where field is one of the field names below field default_value data type description temporalfreqfunc freq_response prestimulus_time prestimulus_normalization isspike spiketrain_dt","title":"stimulus_response_scalar_parameters_basic fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar_parameters_basic/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_tuningcurve/","text":"stimulus_tuningcurve (ndi.document class) Class definition Class name : stimulus_tuningcurve Short name : stimulus_tuningcurve Superclasses : base Definition : $NDIDOCUMENTPATH/stimulus/stimulus_tuningcurve.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_tuningcurve_schema.json Property_list_name : stimulus_tuningcurve Class_version : 1 stimulus_tuningcurve fields Accessed by stimulus_tuningcurve.field where field is one of the field names below field default_value data type description independent_variable_label independent_variable_value stimid response_mean response_stddev response_stderr individual_responses_real individual_responses_imaginary stimulus_presentation_number control_stimid control_response_mean control_response_stddev control_response_stderr control_individual_responses_real control_individual_responses_imaginary response_units base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"stimulus_tuningcurve"},{"location":"NDI-matlab/documents/stimulus/stimulus_tuningcurve/#stimulus_tuningcurve-ndidocument-class","text":"","title":"stimulus_tuningcurve (ndi.document class)"},{"location":"NDI-matlab/documents/stimulus/stimulus_tuningcurve/#class-definition","text":"Class name : stimulus_tuningcurve Short name : stimulus_tuningcurve Superclasses : base Definition : $NDIDOCUMENTPATH/stimulus/stimulus_tuningcurve.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_tuningcurve_schema.json Property_list_name : stimulus_tuningcurve Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/stimulus/stimulus_tuningcurve/#stimulus_tuningcurve-fields","text":"Accessed by stimulus_tuningcurve.field where field is one of the field names below field default_value data type description independent_variable_label independent_variable_value stimid response_mean response_stddev response_stderr individual_responses_real individual_responses_imaginary stimulus_presentation_number control_stimid control_response_mean control_response_stddev control_response_stderr control_individual_responses_real control_individual_responses_imaginary response_units","title":"stimulus_tuningcurve fields"},{"location":"NDI-matlab/documents/stimulus/stimulus_tuningcurve/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/documents/stimulus/vision/oridir/orientation_direction_tuning/","text":"orientation_direction_tuning (ndi.document class) Class definition Class name : orientation_direction_tuning Short name : orientation_direction_tuning Superclasses : base Definition : $NDIDOCUMENTPATH/stimulus/vision/oridir/orientation_direction_tuning.json Schema for validation : $NDISCHEMAPATH/stimulus/vision/oridir/orientation_direction_tuning_schema.json Property_list_name : orientation_direction_tuning Class_version : 1 orientation_direction_tuning fields Accessed by orientation_direction_tuning.field where field is one of the field names below field default_value data type description properties tuning_curve significance vector fit base fields Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"orientation_direction_tuning"},{"location":"NDI-matlab/documents/stimulus/vision/oridir/orientation_direction_tuning/#orientation_direction_tuning-ndidocument-class","text":"","title":"orientation_direction_tuning (ndi.document class)"},{"location":"NDI-matlab/documents/stimulus/vision/oridir/orientation_direction_tuning/#class-definition","text":"Class name : orientation_direction_tuning Short name : orientation_direction_tuning Superclasses : base Definition : $NDIDOCUMENTPATH/stimulus/vision/oridir/orientation_direction_tuning.json Schema for validation : $NDISCHEMAPATH/stimulus/vision/oridir/orientation_direction_tuning_schema.json Property_list_name : orientation_direction_tuning Class_version : 1","title":"Class definition"},{"location":"NDI-matlab/documents/stimulus/vision/oridir/orientation_direction_tuning/#orientation_direction_tuning-fields","text":"Accessed by orientation_direction_tuning.field where field is one of the field names below field default_value data type description properties tuning_curve significance vector fit","title":"orientation_direction_tuning fields"},{"location":"NDI-matlab/documents/stimulus/vision/oridir/orientation_direction_tuning/#base-fields","text":"Accessed by base.field where field is one of the field names below field default_value data type description id session_id name datestamp","title":"base fields"},{"location":"NDI-matlab/reference/ndi_Init.m/","text":"ndi_Init NDI_INIT Initializes the file path and global variables for class NDI","title":"ndi_Init"},{"location":"NDI-matlab/reference/ndi_Init.m/#ndi_init","text":"NDI_INIT Initializes the file path and global variables for class NDI","title":"ndi_Init"},{"location":"NDI-matlab/reference/ndi_install.m/","text":"ndi_install NDI_INSTALL - install the NDI distribution and its ancillary directories B = NDI_INSTALL Installs the GitHub distributions necessary to run NDI-matlab. These are installed at [USERPATH filesep 'tools'] (for example, /Users/steve/Documents/MATLAB/tools/) The startup file is edited to add a startup procedure in VHTOOLS. One can also dictate a different install directory by passing a full pathname: B = NDI_INSTALL(PATHNAME) PATHNAME should not include any shell script shortcuts (like '~'). Finally, one can also install either the minimal set of tools needed for NDI (DEPENDENCIES=1), or one can install the standard VHTOOLS suite (DEPENDENCIES=2). For developers, the option DEPENDENCIES=3 will install dependencies based on the locally checked out branch of NDI-matlab. B = NDI_INSTALL(PATHNAME, DEPENDENCIES) If PATHNAME is blank, then the default pathway of [USERPATH filesep 'tools'] is used.","title":"ndi_install"},{"location":"NDI-matlab/reference/ndi_install.m/#ndi_install","text":"NDI_INSTALL - install the NDI distribution and its ancillary directories B = NDI_INSTALL Installs the GitHub distributions necessary to run NDI-matlab. These are installed at [USERPATH filesep 'tools'] (for example, /Users/steve/Documents/MATLAB/tools/) The startup file is edited to add a startup procedure in VHTOOLS. One can also dictate a different install directory by passing a full pathname: B = NDI_INSTALL(PATHNAME) PATHNAME should not include any shell script shortcuts (like '~'). Finally, one can also install either the minimal set of tools needed for NDI (DEPENDENCIES=1), or one can install the standard VHTOOLS suite (DEPENDENCIES=2). For developers, the option DEPENDENCIES=3 will install dependencies based on the locally checked out branch of NDI-matlab. B = NDI_INSTALL(PATHNAME, DEPENDENCIES) If PATHNAME is blank, then the default pathway of [USERPATH filesep 'tools'] is used.","title":"ndi_install"},{"location":"NDI-matlab/reference/%2Bndi/app.m/","text":"CLASS ndi.app ndi.app - create a new ndi.app object NDI_APP_OBJ = ndi.app (SESSION) Creates a new ndi.app object that operates on the ndi.session object called SESSION. Superclasses ndi.documentservice Properties Property Description session the ndi.session object that the app will operate on name the name of the app Methods Method Description app create a new ndi.app object newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app varappname return the name of the application for use in variable creation version_url return the app version and url Methods help app - create a new ndi.app object NDI_APP_OBJ = ndi.app (SESSION) Creates a new ndi.app object that operates on the ndi.session object called SESSION. Documentation for ndi.app/app doc ndi.app newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system.","title":"ndi.app"},{"location":"NDI-matlab/reference/%2Bndi/app.m/#class-ndiapp","text":"ndi.app - create a new ndi.app object NDI_APP_OBJ = ndi.app (SESSION) Creates a new ndi.app object that operates on the ndi.session object called SESSION.","title":"CLASS ndi.app"},{"location":"NDI-matlab/reference/%2Bndi/app.m/#superclasses","text":"ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/app.m/#properties","text":"Property Description session the ndi.session object that the app will operate on name the name of the app","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/app.m/#methods","text":"Method Description app create a new ndi.app object newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app varappname return the name of the application for use in variable creation version_url return the app version and url","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/app.m/#methods-help","text":"app - create a new ndi.app object NDI_APP_OBJ = ndi.app (SESSION) Creates a new ndi.app object that operates on the ndi.session object called SESSION. Documentation for ndi.app/app doc ndi.app newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system.","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/cache.m/","text":"CLASS ndi.cache NDI.CACHE - Cache class for NDI Superclasses handle Properties Property Description maxMemory The maximum memory, in bytes, that can be consumed by an NDI_CACHE before it is emptied replacement_rule The rule to be used to replace entries when memory is exceeded ('FIFO','LIFO','error', etc) table The variable that has the data and metadata for the cache Methods Method Description add add data to an NDI.CACHE addlistener addlistener Add listener for event. bytes memory size of an NDI.CACHE object in bytes cache create a new NDI cache handle clear clear data from an NDI.CACHE delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. freebytes remove the lowest priority entries from the cache to free a certain amount of memory ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lookup retrieve the NDI.CACHE data table corresponding to KEY and TYPE lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. remove remove data from an NDI.CACHE set_replacement_rule set the replacement rule for an NDI_CACHE object Methods help add - add data to an NDI.CACHE NDI_CACHE_OBJ = ADD(NDI_CACHE_OBJ, KEY, TYPE, DATA, [PRIORITY]) Adds DATA to the NDI_CACHE_OBJ that is referenced by a KEY and TYPE. If desired, a PRIORITY can be added; items with greatest PRIORITY will be deleted last. addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.cache, matlab.metadata.Property, events Help for ndi.cache/addlistener is inherited from superclass handle bytes - memory size of an NDI.CACHE object in bytes B = BYTES(NDI_CACHE_OBJ) Return the current memory that is occupied by the table of NDI_CACHE_OBJ. cache - create a new NDI cache handle NDI_CACHE_OBJ = NDI.CACHE(...) Creates a new NDI.CACHE object. Additional arguments can be specified as name value pairs: Parameter (default) | Description ------------------------------------------------------------ maxMemory (10e9) | Max memory for cache, in bytes (10GB default) replacement_rule ('fifo') | Replacement rule (see NDI_CACHE/SET_REPLACEMENT_RULE Note that the cache is not 'secure', any function can query the data added. See also: vlt.data.namevaluepair Documentation for ndi.cache/cache doc ndi.cache clear - clear data from an NDI.CACHE NDI_CACHE_OBJ = CLEAR(NDI_CACHE_OBJ) Clears all entries from the NDI.CACHE object NDI_CACHE_OBJ. Also clears all memoized caches (CLEARALLMEMOIZEDCACHES). delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.CACHE, NDI.CACHE/ISVALID, CLEAR Help for ndi.cache/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.CACHE, NDI.CACHE/GE, NDI.CACHE/GT, NDI.CACHE/LE, NDI.CACHE/LT, NDI.CACHE/NE Help for ndi.cache/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.CACHE Help for ndi.cache/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.cache, ndi.cache/findobj, dynamicprops, matlab.metadata.Property Help for ndi.cache/findprop is inherited from superclass handle freebytes - remove the lowest priority entries from the cache to free a certain amount of memory NDI_CACHE_OBJ = FREEBYTES(NDI_CACHE_OBJ, FREEBYTES) Remove entries to free at least FREEBYTES memory. Entries will be removed, first by PRIORITY and then by the replacement_rule parameter. See also: NDI.CACHE/ADD, NDI.CACHE/SET_REPLACEMENT_RULE ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.CACHE, NDI.CACHE/EQ, NDI.CACHE/GT, NDI.CACHE/LE, NDI.CACHE/LT, NDI.CACHE/NE Help for ndi.cache/ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.CACHE, NDI.CACHE/EQ, NDI.CACHE/GE, NDI.CACHE/LE, NDI.CACHE/LT, NDI.CACHE/NE Help for ndi.cache/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.CACHE, NDI.CACHE/DELETE Help for ndi.cache/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.CACHE, NDI.CACHE/EQ, NDI.CACHE/GE, NDI.CACHE/GT, NDI.CACHE/LT, NDI.CACHE/NE Help for ndi.cache/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.cache, matlab.metadata.Property, events Help for ndi.cache/listener is inherited from superclass handle lookup - retrieve the NDI.CACHE data table corresponding to KEY and TYPE TABLEENTRY = LOOKUP(NDI_CACHE_OBJ, KEY, TYPE) Performs a case-sensitive lookup of the NDI_CACHE entry whose key and type match KEY and TYPE. The table entry is returned. The table has fields: Fieldname | Description ----------------------------------------------------- key | The key string type | The type string timestamp | The Matlab date stamp (serial date number, see NOW) when data was stored priority | The priority of maintaining the data (higher is better) bytes | The size of the data in this entry (bytes) data | The data stored lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.CACHE, NDI.CACHE/EQ, NDI.CACHE/GE, NDI.CACHE/GT, NDI.CACHE/LE, NDI.CACHE/NE Help for ndi.cache/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.CACHE, NDI.CACHE/EQ, NDI.CACHE/GE, NDI.CACHE/GT, NDI.CACHE/LE, NDI.CACHE/LT Help for ndi.cache/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.CACHE, NDI.CACHE/ADDLISTENER, NDI.CACHE/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.cache/notify is inherited from superclass handle remove - remove data from an NDI.CACHE NDI_CACHE_OBJ = REMOVE(NDI_CACHE_OBJ, KEY, TYPE, ...) or NDI_CACHE_OBJ = REMOVE(NDI_CACHE_OBJ, INDEX, [], ...) Removes the data at table index INDEX or data with KEY and TYPE. INDEX can be a single entry or an array of entries. If the data entry to be removed is a handle, the handle will be deleted from memory unless the setting is altered with a NAME/VALUE pair. This function can be modified by name/value pairs: Parameter (default) | Description ---------------------------------------------------------------- leavehandle (0) | If the 'data' field of a cache entry is a handle, | leave it in memory. See also: vlt.data.namevaluepair set_replacement_rule - set the replacement rule for an NDI_CACHE object NDI_CACHE_OBJ = SET_REPLACEMENT_RULE(NDI_CACHE_OBJ, RULE) Sets the replacement rule for an NDI.CACHE to be used when a new entry would exceed the allowed memory. The rule may be one of the following strings (case is insensitive and will be stored lower case): Rule | Description --------------------------------------------------------- 'fifo' | First in, first out; discard oldest entries first. 'lifo' | Last in, first out; discard newest entries first. 'error' | Don't discard anything, just produce an error saying cache is full","title":"ndi.cache"},{"location":"NDI-matlab/reference/%2Bndi/cache.m/#class-ndicache","text":"NDI.CACHE - Cache class for NDI","title":"CLASS ndi.cache"},{"location":"NDI-matlab/reference/%2Bndi/cache.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/cache.m/#properties","text":"Property Description maxMemory The maximum memory, in bytes, that can be consumed by an NDI_CACHE before it is emptied replacement_rule The rule to be used to replace entries when memory is exceeded ('FIFO','LIFO','error', etc) table The variable that has the data and metadata for the cache","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/cache.m/#methods","text":"Method Description add add data to an NDI.CACHE addlistener addlistener Add listener for event. bytes memory size of an NDI.CACHE object in bytes cache create a new NDI cache handle clear clear data from an NDI.CACHE delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. freebytes remove the lowest priority entries from the cache to free a certain amount of memory ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lookup retrieve the NDI.CACHE data table corresponding to KEY and TYPE lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. remove remove data from an NDI.CACHE set_replacement_rule set the replacement rule for an NDI_CACHE object","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/cache.m/#methods-help","text":"add - add data to an NDI.CACHE NDI_CACHE_OBJ = ADD(NDI_CACHE_OBJ, KEY, TYPE, DATA, [PRIORITY]) Adds DATA to the NDI_CACHE_OBJ that is referenced by a KEY and TYPE. If desired, a PRIORITY can be added; items with greatest PRIORITY will be deleted last. addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.cache, matlab.metadata.Property, events Help for ndi.cache/addlistener is inherited from superclass handle bytes - memory size of an NDI.CACHE object in bytes B = BYTES(NDI_CACHE_OBJ) Return the current memory that is occupied by the table of NDI_CACHE_OBJ. cache - create a new NDI cache handle NDI_CACHE_OBJ = NDI.CACHE(...) Creates a new NDI.CACHE object. Additional arguments can be specified as name value pairs: Parameter (default) | Description ------------------------------------------------------------ maxMemory (10e9) | Max memory for cache, in bytes (10GB default) replacement_rule ('fifo') | Replacement rule (see NDI_CACHE/SET_REPLACEMENT_RULE Note that the cache is not 'secure', any function can query the data added. See also: vlt.data.namevaluepair Documentation for ndi.cache/cache doc ndi.cache clear - clear data from an NDI.CACHE NDI_CACHE_OBJ = CLEAR(NDI_CACHE_OBJ) Clears all entries from the NDI.CACHE object NDI_CACHE_OBJ. Also clears all memoized caches (CLEARALLMEMOIZEDCACHES). delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.CACHE, NDI.CACHE/ISVALID, CLEAR Help for ndi.cache/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.CACHE, NDI.CACHE/GE, NDI.CACHE/GT, NDI.CACHE/LE, NDI.CACHE/LT, NDI.CACHE/NE Help for ndi.cache/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.CACHE Help for ndi.cache/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.cache, ndi.cache/findobj, dynamicprops, matlab.metadata.Property Help for ndi.cache/findprop is inherited from superclass handle freebytes - remove the lowest priority entries from the cache to free a certain amount of memory NDI_CACHE_OBJ = FREEBYTES(NDI_CACHE_OBJ, FREEBYTES) Remove entries to free at least FREEBYTES memory. Entries will be removed, first by PRIORITY and then by the replacement_rule parameter. See also: NDI.CACHE/ADD, NDI.CACHE/SET_REPLACEMENT_RULE ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.CACHE, NDI.CACHE/EQ, NDI.CACHE/GT, NDI.CACHE/LE, NDI.CACHE/LT, NDI.CACHE/NE Help for ndi.cache/ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.CACHE, NDI.CACHE/EQ, NDI.CACHE/GE, NDI.CACHE/LE, NDI.CACHE/LT, NDI.CACHE/NE Help for ndi.cache/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.CACHE, NDI.CACHE/DELETE Help for ndi.cache/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.CACHE, NDI.CACHE/EQ, NDI.CACHE/GE, NDI.CACHE/GT, NDI.CACHE/LT, NDI.CACHE/NE Help for ndi.cache/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.cache, matlab.metadata.Property, events Help for ndi.cache/listener is inherited from superclass handle lookup - retrieve the NDI.CACHE data table corresponding to KEY and TYPE TABLEENTRY = LOOKUP(NDI_CACHE_OBJ, KEY, TYPE) Performs a case-sensitive lookup of the NDI_CACHE entry whose key and type match KEY and TYPE. The table entry is returned. The table has fields: Fieldname | Description ----------------------------------------------------- key | The key string type | The type string timestamp | The Matlab date stamp (serial date number, see NOW) when data was stored priority | The priority of maintaining the data (higher is better) bytes | The size of the data in this entry (bytes) data | The data stored lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.CACHE, NDI.CACHE/EQ, NDI.CACHE/GE, NDI.CACHE/GT, NDI.CACHE/LE, NDI.CACHE/NE Help for ndi.cache/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.CACHE, NDI.CACHE/EQ, NDI.CACHE/GE, NDI.CACHE/GT, NDI.CACHE/LE, NDI.CACHE/LT Help for ndi.cache/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.CACHE, NDI.CACHE/ADDLISTENER, NDI.CACHE/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.cache/notify is inherited from superclass handle remove - remove data from an NDI.CACHE NDI_CACHE_OBJ = REMOVE(NDI_CACHE_OBJ, KEY, TYPE, ...) or NDI_CACHE_OBJ = REMOVE(NDI_CACHE_OBJ, INDEX, [], ...) Removes the data at table index INDEX or data with KEY and TYPE. INDEX can be a single entry or an array of entries. If the data entry to be removed is a handle, the handle will be deleted from memory unless the setting is altered with a NAME/VALUE pair. This function can be modified by name/value pairs: Parameter (default) | Description ---------------------------------------------------------------- leavehandle (0) | If the 'data' field of a cache entry is a handle, | leave it in memory. See also: vlt.data.namevaluepair set_replacement_rule - set the replacement rule for an NDI_CACHE object NDI_CACHE_OBJ = SET_REPLACEMENT_RULE(NDI_CACHE_OBJ, RULE) Sets the replacement rule for an NDI.CACHE to be used when a new entry would exceed the allowed memory. The rule may be one of the following strings (case is insensitive and will be stored lower case): Rule | Description --------------------------------------------------------- 'fifo' | First in, first out; discard oldest entries first. 'lifo' | Last in, first out; discard newest entries first. 'error' | Don't discard anything, just produce an error saying cache is full","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/calculator.m/","text":"CLASS ndi.calculator CALCULATOR - create an ndi.calculator object NDI_CALCULATOR_OBJ = CALCULATOR(SESSION, DOC_TYPE, PATH_TO_DOC_TYPE) Creates a new ndi.calculator mini-app for performing a particular calculator. SESSION is the ndi.session object to operate on. Classes that override this function should call the creator for ndi.appdoc to record the document type that is used by the ndi.calculator mini-app. Superclasses ndi.app , ndi.documentservice , ndi.app.appdoc , ndi.mock.ctest Properties Property Description fast_start session name doc_types doc_document_types doc_session base_scope Methods Method Description add_appdoc Load data from an application document appdoc_description return documentation for the type of document that is created by this calculator. are_input_parameters_equivalent are two sets of input parameters equivalent? calc_path CALC_PATH return the path to the ndi.calculator object calculate perform calculator and generate an ndi document with the answer calculator create an ndi.calculator object clean_mock_docs remove mock/test documents clear_appdoc remove an ndi.app.appdoc document from a session database compare_mock_docs compare an expected calculation answer with an actual answer default_parameters_query what queries should be used to search for input parameters if none are provided? default_scope default scope types for ndi.mock.ctest object default_search_for_input_parameters default parameters for searching for inputs defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters doc_about return the about information for an NDI calculator docfiletext return the text in the requested documentation file find_appdoc find an ndi.app.appdoc document in the session database generate_mock_docs generate tests for ndi.calc.* objects graphical_edit_calculator create and control a GUI to graphically edit an NDI calculator instance is_valid_dependency_input is a potential dependency input actually valid for this calculator? isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? load_mock_expected_output load expected NDI document answer for a calculation loaddata_appdoc Load data from an application document mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents newdocument return a new database document of type ndi.document based on an app parameter_default return the default parameter code for a given calculator_type parameter_examples return the parameter code examples for a given calculator_type plot provide a diagnostic plot to show the results of the calculator, if appropriate plot_parameters provide a diagnostic plot to show the results of the calculator, if appropriate run run calculator on all possible inputs that match some parameters search_for_calculator_docs search for previous calculators search_for_input_parameters search for valid inputs to the calculator searchquery return a search query for an ndi.document related to this app struct2doc create an ndi.document from an input structure and input parameters test perform a test of an ndi.calculator object varappname return the name of the application for use in variable creation version_url return the app version and url write_mock_expected_output write Methods help add_appdoc - Load data from an application document [...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ... APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments]) Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT. [additional inputs] are used to find or specify the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than 1 if the document already exists). If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT. This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [additional inputs] already exists: DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- 'Error' | An error is generating indicating the document exists. 'NoAction' | The existing document is left alone. The existing ndi.document | is returned in DOC. 'Replace' | Replace the document; note that this deletes all NDI_DOCUMENTS | that depend on the original. 'ReplaceIfDifferent' | Conditionally replace the document, but only if the | the data structures that define the document are not equal. Help for ndi.calculator/add_appdoc is inherited from superclass ndi.app.appdoc appdoc_description - return documentation for the type of document that is created by this calculator. TEXT = APP_DOC_DESCRIPTION(NDI_CALCULATOR_OBJ) Returns the help information for the document type for an NDI calculator object. are_input_parameters_equivalent - are two sets of input parameters equivalent? B = ARE_INPUT_PARAMETERS_EQUIVALENT(NDI_CALCULATOR_OBJ, INPUT_PARAMETERS1, INPUT_PARAMETERS2) Are two sets of input parameters equivalent? This function is used by SEARCH_FOR_CALCULATOR_DOCS to determine whether potential documents were actually generated by identical input parameters. In the base class, the structures are first re-organized so that all one-dimensional substructures are columns and then compared with vlt.data.eqlen(INPUT_PARAMETERS1, INPUT_PARAMETERS2). It is necessary to \"columnize\" the substructures because Matlab does not not necessarily preserve that orientation when data is written to or read from JSON. calc_path - CALC_PATH return the path to the ndi.calculator object P = CALC_PATH(CTEST_OBJ) Return the path of an ndi.calculator object. Help for ndi.calculator/calc_path is inherited from superclass ndi.mock.ctest calculate - perform calculator and generate an ndi document with the answer DOC = CALCULATE(NDI_CALCULATOR_OBJ, PARAMETERS) Perform the calculator and return an ndi.document with the answer. In the base class, this always returns empty. calculator - create an ndi.calculator object NDI_CALCULATOR_OBJ = CALCULATOR(SESSION, DOC_TYPE, PATH_TO_DOC_TYPE) Creates a new ndi.calculator mini-app for performing a particular calculator. SESSION is the ndi.session object to operate on. Classes that override this function should call the creator for ndi.appdoc to record the document type that is used by the ndi.calculator mini-app. Documentation for ndi.calculator/calculator doc ndi.calculator clean_mock_docs - remove mock/test documents Help for ndi.calculator/clean_mock_docs is inherited from superclass ndi.mock.ctest clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Deletes the app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. B is 1 if the document is found, and 0 otherwise. Help for ndi.calculator/clear_appdoc is inherited from superclass ndi.app.appdoc compare_mock_docs - compare an expected calculation answer with an actual answer [B, ERRORMSG] = COMPARE_MOCK_DOCS(CTEST_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE) Given an NDI document with the expected answer to a calculation (EXPECTED_DOC), the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'), this function computes whether the ACTUAL_DOC is within an allowed tolerance of EXPECTED_DOC. B is 1 if the differences in the documents are within the tolerance of the class. Otherwise, B is 0. If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance. In this abstract class, B is always 1 and ERRORMSG is always an empty string. Developer's note: this method should be overridden in each calculator object. Help for ndi.calculator/compare_mock_docs is inherited from superclass ndi.mock.ctest default_parameters_query - what queries should be used to search for input parameters if none are provided? QUERY = DEFAULT_PARAMETERS_QUERY(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION) When one calls SEARCH_FOR_INPUT_PARAMETERS, it is possible to specify a 'query' structure to select particular documents to be placed into the parameters 'depends_on' specification. If one does not provide any 'query' structure, then the default values here are used. The function returns: |-----------------------|----------------------------------------------| | query | A structure with 'name' and 'query' fields | | | that describes a search to be performed to | | | identify inputs for the 'depends_on' field | | | in the PARAMETERS output. | |-----------------------|----------------------------------------------- In the base class, this examines the parameters_specifications for fixed 'depends_on' entries (entries that have both a 'name' and a 'value'). If it finds any, it creates a query indicating that the 'depends_on' field must match the specified name and value. default_scope - default scope types for ndi.mock.ctest object BASE_SCOPE = ndi.mock.ctest.default_scope(); Return a default base_scope structure for an ndi.mock.ctest object. Help for ndi.calculator.default_scope is inherited from superclass ndi.mock.ctest default_search_for_input_parameters - default parameters for searching for inputs PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ) Returns a list of the default search parameters for finding appropriate inputs to the calculator. defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE) Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object. In the base class, the blank version of the ndi.document is read in and the default structure is built from the ndi.document's class property list. Help for ndi.calculator/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this uses the property info in the ndi.document to load the data structure. Help for ndi.calculator/doc2struct is inherited from superclass ndi.app.appdoc doc_about - return the about information for an NDI calculator TEXT = DOC_ABOUT(NDI_CALCULATOR_OBJ) Returns the help information for the document type for an NDI calculator object. docfiletext - return the text in the requested documentation file TEXT = ndi.calculator.docfiletext(CALCULATOR_TYPE, DOC_TYPE) Returns the text of the documentation files. CALCULATOR_TYPE should be the full object name of the calculator of interest. (for example: 'ndi.calc.stimulus.tuningcurve' or 'ndi.calc.vis.contrasttuning') DOC_TYPE should be the type of document requested ('general', 'output', 'searching for inputs') Example: text = ndi.calculator.docfiletext('ndi.calc.stimulus.tuningcurve','general'); find_appdoc - find an ndi.app.appdoc document in the session database DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Using search criteria that is supported by [additional inputs], FIND_APPDOC searches the database for the ndi.document object DOC that is described by APPDOC_TYPE. DOC is always a cell array of all matching NDI_DOCUMENTs. In this superclass, empty is always returned. Subclasses should override this function to search for each document type. The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION. Help for ndi.calculator/find_appdoc is inherited from superclass ndi.app.appdoc generate_mock_docs - generate tests for ndi.calc. objects* [DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(CSTEST_OBJ,... SCOPE, NUMBER_OF_TESTS) SCOPE should be one of 'standard', 'low_noise', or 'high_noise'. 'standard' performs tests on specific hard-coded inputs. 'low_noise' performs tests on specific hard-coded inputs with small amounts of noise added. 'high_noise' performs tests on specific hard-coded inputs with large amounts of noise added. NUMBER_OF_TESTS is the number of tests to generate. Help for ndi.calculator/generate_mock_docs is inherited from superclass ndi.mock.ctest graphical_edit_calculator - create and control a GUI to graphically edit an NDI calculator instance GRAPHICAL_EDIT_CALCULATOR(...) Creates and controls a graphical user interface for creating an instance of an ndi.calculator object. Usage by the user: GRAPHICAL_EDIT_CALCULATOR('command','NEW','type','ndi.calc.TYPE','filename',filename,'name',name) or GRAPHICAL_EDIT_CALCULATOR('command','EDIT','filename',filename) is_valid_dependency_input - is a potential dependency input actually valid for this calculator? B = IS_VALID_DEPENDENCY_INPUT(NDI_CALCULATOR_OBJ, NAME, VALUE) Tests whether a potential input to a calculator is valid. The potential dependency name is provided in NAME and its ndi.document id is provided in VALUE. The base class behavior of this function is simply to return true, but it can be overridden if additional criteria beyond an ndi.query are needed to assess if a document is an appropriate input for the calculator. isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. This is true if APPDOC_STRUCT2 true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is, B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2). isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise. In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.' Help for ndi.calculator/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc load_mock_expected_output - load expected NDI document answer for a calculation DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N) Load the Nth stored ndi.document that contains the expected answer for the Nth standard mock test. Help for ndi.calculator/load_mock_expected_output is inherited from superclass ndi.mock.ctest loaddata_appdoc - Load data from an application document [...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments]) Loads the data from app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. In the base class, this always returns empty. This function should be overridden by each subclass. The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION. Help for ndi.calculator/loaddata_appdoc is inherited from superclass ndi.app.appdoc mock_expected_filename - file of expected NDI document answer for a calculation FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N) Return the filename for the Nth stored ndi.document that contains the expected answer for the Nth standard mock test. Help for ndi.calculator/mock_expected_filename is inherited from superclass ndi.mock.ctest mock_path - return the path to the stored mock example output documents MP = MOCK_PATH(CTEST_OBJ) Returns the path to the mock document example outputs. The returned path ends in a file separator. Help for ndi.calculator/mock_path is inherited from superclass ndi.mock.ctest newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). Help for ndi.calculator/newdocument is inherited from superclass ndi.app parameter_default - return the default parameter code for a given calculator_type [CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE) Return the default parameter code CONTENTS for a given CALCULATOR_TYPE. CONTENTS is a character string. Example: [contents] = ndi.calculator.parameter_default('ndi.calc.stimulus.tuningcurve'); parameter_examples - return the parameter code examples for a given calculator_type [NAMES, CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE) Return the example NAMES and parameter example code CONTENTS for a given CALCULATOR_TYPE. NAMES is a cell array of strings with the code example names. CONTENTS is a cell array of strings with the contents of the code examples. Example: [names,contents] = ndi.calculator.parameter_examples('ndi.calc.stimulus.tuningcurve'); plot - provide a diagnostic plot to show the results of the calculator, if appropriate H=PLOT(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...) Produce a diagnostic plot that can indicate to a reader whether or not the calculator has been performed in a manner that makes sense with its input data. Useful for debugging / validating a calculator. Handles to the figure, the axes, and any objects created are returned in H. By default, this plot is made in the current axes. This function takes additional input arguments as name/value pairs. See ndi.calculator.plot_parameters for a description of those parameters. plot_parameters - provide a diagnostic plot to show the results of the calculator, if appropriate PLOT_PARAMETERS(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...) Produce a diagnostic plot that can indicate to a reader whether or not the calculator has been performed in a manner that makes sense with its input data. Useful for debugging / validating a calculator. By default, this plot is made in the current axes. This function takes additional input arguments as name/value pairs: |---------------------------|--------------------------------------| | Parameter (default) | Description | |---------------------------|--------------------------------------| | newfigure (0) | 0/1 Should we make a new figure? | | holdstate (0) | 0/1 Should we preserve the 'hold' | | | state of the current axes? | | suppress_x_label (0) | 0/1 Should we suppress the x label? | | suppress_y_label (0) | 0/1 Should we suppress the y label? | | suppress_z_label (0) | 0/1 Should we suppress the z label? | | suppress_title (0) | 0/1 Should we suppress the title? | |---------------------------|--------------------------------------| run - run calculator on all possible inputs that match some parameters DOCS = RUN(NDI_CALCULATOR_OBJ, DOCEXISTSACTION, PARAMETERS) DOCEXISTSACTION can be 'Error', 'NoAction', 'Replace', or 'ReplaceIfDifferent' For calculators, 'ReplaceIfDifferent' is equivalent to 'NoAction' because the input parameters define the calculator. Step 1: set up input parameters; they can either be completely specified by the caller, or defaults can be used search_for_calculator_docs - search for previous calculators [DOCS] = SEARCH_FOR_CALCULATOR_DOCS(NDI_CALCULATOR_OBJ, PARAMETERS) Performs a search to find all previously-created calculator documents that this mini-app creates. PARAMETERS is a structure with the following fields |------------------------|----------------------------------| | Fieldname | Description | |-----------------------------------------------------------| | input_parameters | A structure of input parameters | | | needed by the calculator. | | depends_on | A structure with fields 'name' | | | and 'value' that indicates any | | | exact matches that should be | | | satisfied. | |------------------------|----------------------------------| in the abstract class, this returns empty search_for_input_parameters - search for valid inputs to the calculator PARAMETERS = SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION) Identifies all possible sets of specific input PARAMETERS that can be used as inputs to the calculator. PARAMETERS is a cell array of parameter structures with fields 'input_parameters' and 'depends_on'. PARAMETERS_SPECIFICATION is a structure with the following fields: |----------------------------------------------------------------------| | input_parameters | A structure of fixed input parameters needed | | | by the calculator. Should not depend on | | | values in other documents. | | depends_on | A structure with 'name' and 'value' fields | | | that lists specific inputs that should be | | | used for the 'depends_on' field in the | | | PARAMETERS output. | | query | A structure with 'name' and 'query' fields | | | that describes a search to be performed to | | | identify inputs for the 'depends_on' field | | | in the PARAMETERS output. | |-----------------------|----------------------------------------------- searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. Help for ndi.calculator/searchquery is inherited from superclass ndi.app struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this always returns empty. It must be overridden in subclasses. The documentation for overridden functions should be in the function APPDOC_DESCRIPTION. Help for ndi.calculator/struct2doc is inherited from superclass ndi.app.appdoc test - perform a test of an ndi.calculator object [B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN) Perform tests of the calculator for a certain SCOPE. B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons of the expected output of test i and actual output of test j are equal. Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should be 0, although results might be close enough for some comparisons to be equal even if there are no errors. If test indices are specified, B becomes a numel(specific_test_inds) x numel(specific_test_inds) array. ERRORMSG{i,j} is any error message given if the comparison between the expected outcome of test i and the actual outcome of test j. B_EXPECTED is the result of the comparisons between the expected outcome of test i and the expected outcome of test j. Some tests might have the same expected outcome, which can be useful for interpreting the results in B. SCOPE should be one of 'standard', 'low_noise', or 'high_noise'. 'standard' performs tests on specific hard-coded inputs. 'low_noise' performs tests on specific hard-coded inputs with small amounts of noise added. 'high_noise' performs tests on specific hard-coded inputs with large amounts of noise added. NUMBER_OF_TESTS indicates the number of tests to perform. PLOT_IT indicates (0/1) whether or not the results should be plotted. This function's behavior can be modified by name/value pairs. -------------------------------------------------------------------------------- | Parameter (default): | Description: | |--------------------------|---------------------------------------------------| | specific_test_inds([]) | Should we specify which tests to run? | |--------------------------|---------------------------------------------------| Step 1: generate_mock_docs Help for ndi.calculator/test is inherited from superclass ndi.mock.ctest varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. Help for ndi.calculator/varappname is inherited from superclass ndi.app version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system. Help for ndi.calculator/version_url is inherited from superclass ndi.app write_mock_expected_output - write B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC) Set the expected mock document for mock calculation NUMBER to be the ndi.document DOC. This function will not overwrite an existing expected mock document. It must be deleted manually to ensure programmer really wants to overwrite it. Help for ndi.calculator/write_mock_expected_output is inherited from superclass ndi.mock.ctest","title":"ndi.calculator"},{"location":"NDI-matlab/reference/%2Bndi/calculator.m/#class-ndicalculator","text":"CALCULATOR - create an ndi.calculator object NDI_CALCULATOR_OBJ = CALCULATOR(SESSION, DOC_TYPE, PATH_TO_DOC_TYPE) Creates a new ndi.calculator mini-app for performing a particular calculator. SESSION is the ndi.session object to operate on. Classes that override this function should call the creator for ndi.appdoc to record the document type that is used by the ndi.calculator mini-app.","title":"CLASS ndi.calculator"},{"location":"NDI-matlab/reference/%2Bndi/calculator.m/#superclasses","text":"ndi.app , ndi.documentservice , ndi.app.appdoc , ndi.mock.ctest","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/calculator.m/#properties","text":"Property Description fast_start session name doc_types doc_document_types doc_session base_scope","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/calculator.m/#methods","text":"Method Description add_appdoc Load data from an application document appdoc_description return documentation for the type of document that is created by this calculator. are_input_parameters_equivalent are two sets of input parameters equivalent? calc_path CALC_PATH return the path to the ndi.calculator object calculate perform calculator and generate an ndi document with the answer calculator create an ndi.calculator object clean_mock_docs remove mock/test documents clear_appdoc remove an ndi.app.appdoc document from a session database compare_mock_docs compare an expected calculation answer with an actual answer default_parameters_query what queries should be used to search for input parameters if none are provided? default_scope default scope types for ndi.mock.ctest object default_search_for_input_parameters default parameters for searching for inputs defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters doc_about return the about information for an NDI calculator docfiletext return the text in the requested documentation file find_appdoc find an ndi.app.appdoc document in the session database generate_mock_docs generate tests for ndi.calc.* objects graphical_edit_calculator create and control a GUI to graphically edit an NDI calculator instance is_valid_dependency_input is a potential dependency input actually valid for this calculator? isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? load_mock_expected_output load expected NDI document answer for a calculation loaddata_appdoc Load data from an application document mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents newdocument return a new database document of type ndi.document based on an app parameter_default return the default parameter code for a given calculator_type parameter_examples return the parameter code examples for a given calculator_type plot provide a diagnostic plot to show the results of the calculator, if appropriate plot_parameters provide a diagnostic plot to show the results of the calculator, if appropriate run run calculator on all possible inputs that match some parameters search_for_calculator_docs search for previous calculators search_for_input_parameters search for valid inputs to the calculator searchquery return a search query for an ndi.document related to this app struct2doc create an ndi.document from an input structure and input parameters test perform a test of an ndi.calculator object varappname return the name of the application for use in variable creation version_url return the app version and url write_mock_expected_output write","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/calculator.m/#methods-help","text":"add_appdoc - Load data from an application document [...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ... APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments]) Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT. [additional inputs] are used to find or specify the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than 1 if the document already exists). If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT. This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [additional inputs] already exists: DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- 'Error' | An error is generating indicating the document exists. 'NoAction' | The existing document is left alone. The existing ndi.document | is returned in DOC. 'Replace' | Replace the document; note that this deletes all NDI_DOCUMENTS | that depend on the original. 'ReplaceIfDifferent' | Conditionally replace the document, but only if the | the data structures that define the document are not equal. Help for ndi.calculator/add_appdoc is inherited from superclass ndi.app.appdoc appdoc_description - return documentation for the type of document that is created by this calculator. TEXT = APP_DOC_DESCRIPTION(NDI_CALCULATOR_OBJ) Returns the help information for the document type for an NDI calculator object. are_input_parameters_equivalent - are two sets of input parameters equivalent? B = ARE_INPUT_PARAMETERS_EQUIVALENT(NDI_CALCULATOR_OBJ, INPUT_PARAMETERS1, INPUT_PARAMETERS2) Are two sets of input parameters equivalent? This function is used by SEARCH_FOR_CALCULATOR_DOCS to determine whether potential documents were actually generated by identical input parameters. In the base class, the structures are first re-organized so that all one-dimensional substructures are columns and then compared with vlt.data.eqlen(INPUT_PARAMETERS1, INPUT_PARAMETERS2). It is necessary to \"columnize\" the substructures because Matlab does not not necessarily preserve that orientation when data is written to or read from JSON. calc_path - CALC_PATH return the path to the ndi.calculator object P = CALC_PATH(CTEST_OBJ) Return the path of an ndi.calculator object. Help for ndi.calculator/calc_path is inherited from superclass ndi.mock.ctest calculate - perform calculator and generate an ndi document with the answer DOC = CALCULATE(NDI_CALCULATOR_OBJ, PARAMETERS) Perform the calculator and return an ndi.document with the answer. In the base class, this always returns empty. calculator - create an ndi.calculator object NDI_CALCULATOR_OBJ = CALCULATOR(SESSION, DOC_TYPE, PATH_TO_DOC_TYPE) Creates a new ndi.calculator mini-app for performing a particular calculator. SESSION is the ndi.session object to operate on. Classes that override this function should call the creator for ndi.appdoc to record the document type that is used by the ndi.calculator mini-app. Documentation for ndi.calculator/calculator doc ndi.calculator clean_mock_docs - remove mock/test documents Help for ndi.calculator/clean_mock_docs is inherited from superclass ndi.mock.ctest clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Deletes the app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. B is 1 if the document is found, and 0 otherwise. Help for ndi.calculator/clear_appdoc is inherited from superclass ndi.app.appdoc compare_mock_docs - compare an expected calculation answer with an actual answer [B, ERRORMSG] = COMPARE_MOCK_DOCS(CTEST_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE) Given an NDI document with the expected answer to a calculation (EXPECTED_DOC), the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'), this function computes whether the ACTUAL_DOC is within an allowed tolerance of EXPECTED_DOC. B is 1 if the differences in the documents are within the tolerance of the class. Otherwise, B is 0. If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance. In this abstract class, B is always 1 and ERRORMSG is always an empty string. Developer's note: this method should be overridden in each calculator object. Help for ndi.calculator/compare_mock_docs is inherited from superclass ndi.mock.ctest default_parameters_query - what queries should be used to search for input parameters if none are provided? QUERY = DEFAULT_PARAMETERS_QUERY(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION) When one calls SEARCH_FOR_INPUT_PARAMETERS, it is possible to specify a 'query' structure to select particular documents to be placed into the parameters 'depends_on' specification. If one does not provide any 'query' structure, then the default values here are used. The function returns: |-----------------------|----------------------------------------------| | query | A structure with 'name' and 'query' fields | | | that describes a search to be performed to | | | identify inputs for the 'depends_on' field | | | in the PARAMETERS output. | |-----------------------|----------------------------------------------- In the base class, this examines the parameters_specifications for fixed 'depends_on' entries (entries that have both a 'name' and a 'value'). If it finds any, it creates a query indicating that the 'depends_on' field must match the specified name and value. default_scope - default scope types for ndi.mock.ctest object BASE_SCOPE = ndi.mock.ctest.default_scope(); Return a default base_scope structure for an ndi.mock.ctest object. Help for ndi.calculator.default_scope is inherited from superclass ndi.mock.ctest default_search_for_input_parameters - default parameters for searching for inputs PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ) Returns a list of the default search parameters for finding appropriate inputs to the calculator. defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE) Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object. In the base class, the blank version of the ndi.document is read in and the default structure is built from the ndi.document's class property list. Help for ndi.calculator/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this uses the property info in the ndi.document to load the data structure. Help for ndi.calculator/doc2struct is inherited from superclass ndi.app.appdoc doc_about - return the about information for an NDI calculator TEXT = DOC_ABOUT(NDI_CALCULATOR_OBJ) Returns the help information for the document type for an NDI calculator object. docfiletext - return the text in the requested documentation file TEXT = ndi.calculator.docfiletext(CALCULATOR_TYPE, DOC_TYPE) Returns the text of the documentation files. CALCULATOR_TYPE should be the full object name of the calculator of interest. (for example: 'ndi.calc.stimulus.tuningcurve' or 'ndi.calc.vis.contrasttuning') DOC_TYPE should be the type of document requested ('general', 'output', 'searching for inputs') Example: text = ndi.calculator.docfiletext('ndi.calc.stimulus.tuningcurve','general'); find_appdoc - find an ndi.app.appdoc document in the session database DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Using search criteria that is supported by [additional inputs], FIND_APPDOC searches the database for the ndi.document object DOC that is described by APPDOC_TYPE. DOC is always a cell array of all matching NDI_DOCUMENTs. In this superclass, empty is always returned. Subclasses should override this function to search for each document type. The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION. Help for ndi.calculator/find_appdoc is inherited from superclass ndi.app.appdoc generate_mock_docs - generate tests for ndi.calc. objects* [DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(CSTEST_OBJ,... SCOPE, NUMBER_OF_TESTS) SCOPE should be one of 'standard', 'low_noise', or 'high_noise'. 'standard' performs tests on specific hard-coded inputs. 'low_noise' performs tests on specific hard-coded inputs with small amounts of noise added. 'high_noise' performs tests on specific hard-coded inputs with large amounts of noise added. NUMBER_OF_TESTS is the number of tests to generate. Help for ndi.calculator/generate_mock_docs is inherited from superclass ndi.mock.ctest graphical_edit_calculator - create and control a GUI to graphically edit an NDI calculator instance GRAPHICAL_EDIT_CALCULATOR(...) Creates and controls a graphical user interface for creating an instance of an ndi.calculator object. Usage by the user: GRAPHICAL_EDIT_CALCULATOR('command','NEW','type','ndi.calc.TYPE','filename',filename,'name',name) or GRAPHICAL_EDIT_CALCULATOR('command','EDIT','filename',filename) is_valid_dependency_input - is a potential dependency input actually valid for this calculator? B = IS_VALID_DEPENDENCY_INPUT(NDI_CALCULATOR_OBJ, NAME, VALUE) Tests whether a potential input to a calculator is valid. The potential dependency name is provided in NAME and its ndi.document id is provided in VALUE. The base class behavior of this function is simply to return true, but it can be overridden if additional criteria beyond an ndi.query are needed to assess if a document is an appropriate input for the calculator. isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. This is true if APPDOC_STRUCT2 true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is, B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2). isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise. In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.' Help for ndi.calculator/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc load_mock_expected_output - load expected NDI document answer for a calculation DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N) Load the Nth stored ndi.document that contains the expected answer for the Nth standard mock test. Help for ndi.calculator/load_mock_expected_output is inherited from superclass ndi.mock.ctest loaddata_appdoc - Load data from an application document [...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments]) Loads the data from app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. In the base class, this always returns empty. This function should be overridden by each subclass. The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION. Help for ndi.calculator/loaddata_appdoc is inherited from superclass ndi.app.appdoc mock_expected_filename - file of expected NDI document answer for a calculation FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N) Return the filename for the Nth stored ndi.document that contains the expected answer for the Nth standard mock test. Help for ndi.calculator/mock_expected_filename is inherited from superclass ndi.mock.ctest mock_path - return the path to the stored mock example output documents MP = MOCK_PATH(CTEST_OBJ) Returns the path to the mock document example outputs. The returned path ends in a file separator. Help for ndi.calculator/mock_path is inherited from superclass ndi.mock.ctest newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). Help for ndi.calculator/newdocument is inherited from superclass ndi.app parameter_default - return the default parameter code for a given calculator_type [CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE) Return the default parameter code CONTENTS for a given CALCULATOR_TYPE. CONTENTS is a character string. Example: [contents] = ndi.calculator.parameter_default('ndi.calc.stimulus.tuningcurve'); parameter_examples - return the parameter code examples for a given calculator_type [NAMES, CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE) Return the example NAMES and parameter example code CONTENTS for a given CALCULATOR_TYPE. NAMES is a cell array of strings with the code example names. CONTENTS is a cell array of strings with the contents of the code examples. Example: [names,contents] = ndi.calculator.parameter_examples('ndi.calc.stimulus.tuningcurve'); plot - provide a diagnostic plot to show the results of the calculator, if appropriate H=PLOT(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...) Produce a diagnostic plot that can indicate to a reader whether or not the calculator has been performed in a manner that makes sense with its input data. Useful for debugging / validating a calculator. Handles to the figure, the axes, and any objects created are returned in H. By default, this plot is made in the current axes. This function takes additional input arguments as name/value pairs. See ndi.calculator.plot_parameters for a description of those parameters. plot_parameters - provide a diagnostic plot to show the results of the calculator, if appropriate PLOT_PARAMETERS(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...) Produce a diagnostic plot that can indicate to a reader whether or not the calculator has been performed in a manner that makes sense with its input data. Useful for debugging / validating a calculator. By default, this plot is made in the current axes. This function takes additional input arguments as name/value pairs: |---------------------------|--------------------------------------| | Parameter (default) | Description | |---------------------------|--------------------------------------| | newfigure (0) | 0/1 Should we make a new figure? | | holdstate (0) | 0/1 Should we preserve the 'hold' | | | state of the current axes? | | suppress_x_label (0) | 0/1 Should we suppress the x label? | | suppress_y_label (0) | 0/1 Should we suppress the y label? | | suppress_z_label (0) | 0/1 Should we suppress the z label? | | suppress_title (0) | 0/1 Should we suppress the title? | |---------------------------|--------------------------------------| run - run calculator on all possible inputs that match some parameters DOCS = RUN(NDI_CALCULATOR_OBJ, DOCEXISTSACTION, PARAMETERS) DOCEXISTSACTION can be 'Error', 'NoAction', 'Replace', or 'ReplaceIfDifferent' For calculators, 'ReplaceIfDifferent' is equivalent to 'NoAction' because the input parameters define the calculator. Step 1: set up input parameters; they can either be completely specified by the caller, or defaults can be used search_for_calculator_docs - search for previous calculators [DOCS] = SEARCH_FOR_CALCULATOR_DOCS(NDI_CALCULATOR_OBJ, PARAMETERS) Performs a search to find all previously-created calculator documents that this mini-app creates. PARAMETERS is a structure with the following fields |------------------------|----------------------------------| | Fieldname | Description | |-----------------------------------------------------------| | input_parameters | A structure of input parameters | | | needed by the calculator. | | depends_on | A structure with fields 'name' | | | and 'value' that indicates any | | | exact matches that should be | | | satisfied. | |------------------------|----------------------------------| in the abstract class, this returns empty search_for_input_parameters - search for valid inputs to the calculator PARAMETERS = SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION) Identifies all possible sets of specific input PARAMETERS that can be used as inputs to the calculator. PARAMETERS is a cell array of parameter structures with fields 'input_parameters' and 'depends_on'. PARAMETERS_SPECIFICATION is a structure with the following fields: |----------------------------------------------------------------------| | input_parameters | A structure of fixed input parameters needed | | | by the calculator. Should not depend on | | | values in other documents. | | depends_on | A structure with 'name' and 'value' fields | | | that lists specific inputs that should be | | | used for the 'depends_on' field in the | | | PARAMETERS output. | | query | A structure with 'name' and 'query' fields | | | that describes a search to be performed to | | | identify inputs for the 'depends_on' field | | | in the PARAMETERS output. | |-----------------------|----------------------------------------------- searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. Help for ndi.calculator/searchquery is inherited from superclass ndi.app struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this always returns empty. It must be overridden in subclasses. The documentation for overridden functions should be in the function APPDOC_DESCRIPTION. Help for ndi.calculator/struct2doc is inherited from superclass ndi.app.appdoc test - perform a test of an ndi.calculator object [B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN) Perform tests of the calculator for a certain SCOPE. B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons of the expected output of test i and actual output of test j are equal. Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should be 0, although results might be close enough for some comparisons to be equal even if there are no errors. If test indices are specified, B becomes a numel(specific_test_inds) x numel(specific_test_inds) array. ERRORMSG{i,j} is any error message given if the comparison between the expected outcome of test i and the actual outcome of test j. B_EXPECTED is the result of the comparisons between the expected outcome of test i and the expected outcome of test j. Some tests might have the same expected outcome, which can be useful for interpreting the results in B. SCOPE should be one of 'standard', 'low_noise', or 'high_noise'. 'standard' performs tests on specific hard-coded inputs. 'low_noise' performs tests on specific hard-coded inputs with small amounts of noise added. 'high_noise' performs tests on specific hard-coded inputs with large amounts of noise added. NUMBER_OF_TESTS indicates the number of tests to perform. PLOT_IT indicates (0/1) whether or not the results should be plotted. This function's behavior can be modified by name/value pairs. -------------------------------------------------------------------------------- | Parameter (default): | Description: | |--------------------------|---------------------------------------------------| | specific_test_inds([]) | Should we specify which tests to run? | |--------------------------|---------------------------------------------------| Step 1: generate_mock_docs Help for ndi.calculator/test is inherited from superclass ndi.mock.ctest varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. Help for ndi.calculator/varappname is inherited from superclass ndi.app version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system. Help for ndi.calculator/version_url is inherited from superclass ndi.app write_mock_expected_output - write B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC) Set the expected mock document for mock calculation NUMBER to be the ndi.document DOC. This function will not overwrite an existing expected mock document. It must be deleted manually to ensure programmer really wants to overwrite it. Help for ndi.calculator/write_mock_expected_output is inherited from superclass ndi.mock.ctest","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/database.m/","text":"CLASS ndi.database A (primarily abstract) database class for NDI that stores and manages virtual documents (NoSQL database) Superclasses none Properties Property Description path The file system or remote path to the database session_unique_reference The reference string for the database Methods Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc database create a new ndi.database existbinarydoc check if a binary doc exists for a given document id newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database Methods help add - add an ndi.document to the database at a given path NDI_DATABASE_OBJ = ADD(NDI_DATABASE_OBJ, NDI_DOCUMENT_OBJ, DBPATH, ...) Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ. This function also accepts name/value pairs that modify its behavior: Parameter (default) | Description ------------------------------------------------------------------------- 'Update' (1) | If document exists, update it. If 0, an error is | generated if a document with the same ID exists See also: vlt.data.namevaluepair alldocids - return all document unique reference numbers for the database DOCIDS = ALLDOCIDS(NDI_DATABASE_OBJ) Return all document unique reference strings as a cell array of strings. If there are no documents, empty is returned. clear - remove/delete all records from an ndi.database CLEAR(NDI_DATABASE_OBJ, [AREYOUSURE]) Removes all documents from the vlt.file.dumbjsondb object. Use with care. If AREYOUSURE is 'yes' then the function will proceed. Otherwise, it will not. See also: ndi.database/REMOVE closebinarydoc - close and unlock an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = CLOSEBINARYDOC(NDI_DATABASE_OBJ, NDI_BINARYDOC_OBJ) Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the database, which is why it is necessary to call this function through the database. database - create a new ndi.database NDI_DATABASE_OBJ = ndi.database(PATH, REFERENCE) Creates a new ndi.database object with data path PATH and reference REFERENCE. Documentation for ndi.database/database doc ndi.database existbinarydoc - check if a binary doc exists for a given document id [TF, FILE_PATH] = EXISTBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DATABASE_OBJ [, DOCUMENT_TYPE]) Creates a new/blank ndi.document document object that can be used with this ndi.database. openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id [NDI_BINARYDOC_OBJ] = OPENBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME]) Return the open ndi.database.binarydoc object and VERSION that corresponds to an ndi.document and the requested version (the latest version is used if the argument is omitted). NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself. Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi.database/CLOSEBINARYDOC. The locked nature of the binary doc is a property of the database, not the document, which is why the database is needed. read - read an ndi.document from an ndi.database at a given db path NDI_DOCUMENT_OBJ = READ(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID, [VERSION]) Read the ndi.document object with the document ID specified by NDI_DOCUMENT_ID. If VERSION is provided (an integer) then only the version that is equal to VERSION is returned. Otherwise, the latest version is returned. If there is no ndi.document object with that ID, then empty is returned ([]). remove - remove a document from an ndi.database NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID) or NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT) Removes the ndi.document object with the 'document unique reference' equal to NDI_DOCUMENT_OBJ_ID. If an ndi.document is passed, then the NDI_DOCUMENT_ID is extracted using ndi.document/DOC_UNIQUE_ID. If a cell array of ndi.document is passed instead, then all of the documents are removed. search - search for an ndi.document from an ndi.database [DOCUMENT_OBJS] = SEARCH(NDI_DATABASE_OBJ, {'PARAM1', VALUE1, 'PARAM2', VALUE2, ... }) Searches metadata parameters PARAM1, PARAM2, etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ. If VALUEN is a string, then a regular expression is evaluated to determine the match. If VALUEN is not a string, then the items must match exactly. If PARAMN1 begins with a dash, then VALUEN indicates the value of one of these special parameters: This function returns a cell array of ndi.document objects. If no documents match the query, then an empty cell array ({}) is returned.","title":"ndi.database"},{"location":"NDI-matlab/reference/%2Bndi/database.m/#class-ndidatabase","text":"A (primarily abstract) database class for NDI that stores and manages virtual documents (NoSQL database)","title":"CLASS ndi.database"},{"location":"NDI-matlab/reference/%2Bndi/database.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/database.m/#properties","text":"Property Description path The file system or remote path to the database session_unique_reference The reference string for the database","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/database.m/#methods","text":"Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc database create a new ndi.database existbinarydoc check if a binary doc exists for a given document id newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/database.m/#methods-help","text":"add - add an ndi.document to the database at a given path NDI_DATABASE_OBJ = ADD(NDI_DATABASE_OBJ, NDI_DOCUMENT_OBJ, DBPATH, ...) Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ. This function also accepts name/value pairs that modify its behavior: Parameter (default) | Description ------------------------------------------------------------------------- 'Update' (1) | If document exists, update it. If 0, an error is | generated if a document with the same ID exists See also: vlt.data.namevaluepair alldocids - return all document unique reference numbers for the database DOCIDS = ALLDOCIDS(NDI_DATABASE_OBJ) Return all document unique reference strings as a cell array of strings. If there are no documents, empty is returned. clear - remove/delete all records from an ndi.database CLEAR(NDI_DATABASE_OBJ, [AREYOUSURE]) Removes all documents from the vlt.file.dumbjsondb object. Use with care. If AREYOUSURE is 'yes' then the function will proceed. Otherwise, it will not. See also: ndi.database/REMOVE closebinarydoc - close and unlock an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = CLOSEBINARYDOC(NDI_DATABASE_OBJ, NDI_BINARYDOC_OBJ) Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the database, which is why it is necessary to call this function through the database. database - create a new ndi.database NDI_DATABASE_OBJ = ndi.database(PATH, REFERENCE) Creates a new ndi.database object with data path PATH and reference REFERENCE. Documentation for ndi.database/database doc ndi.database existbinarydoc - check if a binary doc exists for a given document id [TF, FILE_PATH] = EXISTBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DATABASE_OBJ [, DOCUMENT_TYPE]) Creates a new/blank ndi.document document object that can be used with this ndi.database. openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id [NDI_BINARYDOC_OBJ] = OPENBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME]) Return the open ndi.database.binarydoc object and VERSION that corresponds to an ndi.document and the requested version (the latest version is used if the argument is omitted). NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself. Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi.database/CLOSEBINARYDOC. The locked nature of the binary doc is a property of the database, not the document, which is why the database is needed. read - read an ndi.document from an ndi.database at a given db path NDI_DOCUMENT_OBJ = READ(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID, [VERSION]) Read the ndi.document object with the document ID specified by NDI_DOCUMENT_ID. If VERSION is provided (an integer) then only the version that is equal to VERSION is returned. Otherwise, the latest version is returned. If there is no ndi.document object with that ID, then empty is returned ([]). remove - remove a document from an ndi.database NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID) or NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT) Removes the ndi.document object with the 'document unique reference' equal to NDI_DOCUMENT_OBJ_ID. If an ndi.document is passed, then the NDI_DOCUMENT_ID is extracted using ndi.document/DOC_UNIQUE_ID. If a cell array of ndi.document is passed instead, then all of the documents are removed. search - search for an ndi.document from an ndi.database [DOCUMENT_OBJS] = SEARCH(NDI_DATABASE_OBJ, {'PARAM1', VALUE1, 'PARAM2', VALUE2, ... }) Searches metadata parameters PARAM1, PARAM2, etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ. If VALUEN is a string, then a regular expression is evaluated to determine the match. If VALUEN is not a string, then the items must match exactly. If PARAMN1 begins with a dash, then VALUEN indicates the value of one of these special parameters: This function returns a cell array of ndi.document objects. If no documents match the query, then an empty cell array ({}) is returned.","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/dataset.m/","text":"CLASS ndi.dataset ndi.dataset - Create a new ndi.dataset object NDI_DATASET_OBJ=ndi.dataset(REFERENCE) Creates a new ndi.dataset object. The dataset has a unique reference REFERENCE. This class is an abstract class and typically an end user will open a specific subclass such as ndi.dataset.dir. ndi.dataset/GETPATH, ndi.dataset/GETREFERENCE Superclasses handle Properties none Methods Method Description add_ingested_session ingets an ndi.session into an ndi.dataset add_linked_session link an ndi.session to an ndi.dataset addlistener addlistener Add listener for event. database_add Add an ndi.document to an ndi.dataset object database_closebinarydoc close an ndi.database.binarydoc database_existbinarydoc checks if an ndi.database.binarydoc exists for an ndi.document database_openbinarydoc open the ndi.database.binarydoc channel of an ndi.document database_rm Remove an ndi.document with a given document ID from a dataset database_search Search for an ndi.document in a database of an ndi.dataset object dataset Create a new ndi.dataset object delete DELETE Delete a handle object. document_session DOCUMENT_SESSION return the ndi.session of an ndi.document object in an ndi.dataset eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getpath Return the path of the dataset gt > (GT) Greater than relation for handles. id return the identifier of an ndi.dataset object isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. open_session open an ndi.session object from an ndi.dataset reference return the reference string for an ndi.dataset object session_list return the session reference/identifier list for a dataset Methods help add_ingested_session - ingets an ndi.session into an ndi.dataset NDI_DATASET_OBJ = ADD_INGESTED_SESSION(NDI_DATASET_OBJ, NDI_SESSION_OBJ) Add an ndi.session object to an ndi.dataset, by copying the session documents into the dataset. add_linked_session - link an ndi.session to an ndi.dataset NDI_DATASET_OBJ = ADD_LINKED_SESSION(NDI_DATASET_OBJ, NDI_SESSION_OBJ) Add an ndi.session object to an ndi.dataset, without ingesting the session into the dataset. Instead, the ndi.session is linked to the dataset, but the session remains where it is. addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.dataset, matlab.metadata.Property, events Help for ndi.dataset/addlistener is inherited from superclass handle database_add - Add an ndi.document to an ndi.dataset object NDI_DATASET_OBJ = DATABASE_ADD(NDI_DATASET_OBJ, NDI_DOCUMENT_OBJ) Adds the ndi.document NDI_DOCUMENT_OBJ to the ndi.dataset NDI_DATASET_OBJ. NDI_DOCUMENT_OBJ can also be a cell array of ndi.document objects, which will all be added in turn. If the base.session_id of each NDI_DOCUMENT_OBJ matches one of the sessions in the DATASET, the document will be added to that session. If the base.session_id of the document matches the id of the NDI_DATASET_OBJ, it will be added to the dataset instead of one of the invidiual sessions. The database can be queried by calling NDI_DATASET_OBJ/SEARCH See also: ndi.dataset/database_search(), ndi.dataset/database_rm() database_closebinarydoc - close an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = DATABASE_CLOSEBINARYDOC(NDI_DATASET_OBJ, NDI_BINARYDOC_OBJ) Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the database, which is why it is necessary to call this function through the dataset object. database_existbinarydoc - checks if an ndi.database.binarydoc exists for an ndi.document [TF, FILE_PATH] = DATABASE_EXISTBINARYDOC(NDI_DATASET_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. database_openbinarydoc - open the ndi.database.binarydoc channel of an ndi.document NDI_BINARYDOC_OBJ = DATABASE_OPENBINARYDOC(NDI_DATASET_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return the open ndi.database.binarydoc object that corresponds to an ndi.document and NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself. The document is opened for reading only. Document binary streams may not be edited once the document is added to the database. Note that this NDI_BINARYDOC_OBJ must be closed with ndi.dataset/CLOSEBINARYDOC. database_rm - Remove an ndi.document with a given document ID from a dataset NDI_DATASET_OBJ = DATABASE_RM(NDI_DATASET_OBJ, DOC_UNIQUE_ID) or NDI_DATASET_OBJ = DATABASE_RM(NDI_DATASET_OBJ, DOC) Removes an ndi.document with document id DOC_UNIQUE_ID from the NDI_DATASET_OBJ database. In the second form, if an ndi.document or cell array of NDI_DOCUMENTS is passed for DOC, then the document unique ids are retrieved and they are removed in turn. If DOC/DOC_UNIQUE_ID is empty, no action is taken. If the base.session_id of each NDI_DOCUMENT_OBJ matches one of the linked sessions in the DATASET, the document will be removed from the linked session. If the linked session is opened individually, the document will have been removed. This function also takes parameters as name/value pairs that modify its behavior: Parameter (default) | Description -------------------------------------------------------------------------------- ErrIfNotFound (0) | Produce an error if an ID to be deleted is not found. See also: ndi.dataset/database_add(), ndi.dataset/database_search() database_search - Search for an ndi.document in a database of an ndi.dataset object NDI_DOCUMENT_OBJ = DATABASE_SEARCH(NDI_DATASET_OBJ, SEARCHPARAMETERS)T Given search parameters, which is an ndi.query object, the database associated with the ndi.dataset object NDI_DATASET_OBJ is searched. Matches are returned in a cell list NDI_DOCUMENT_OBJ. See also: ndi.dataset/database_add(), ndi.dataset/database_rm() dataset - Create a new ndi.dataset object NDI_DATASET_OBJ=ndi.dataset(REFERENCE) Creates a new ndi.dataset object. The dataset has a unique reference REFERENCE. This class is an abstract class and typically an end user will open a specific subclass such as ndi.dataset.dir. ndi.dataset/GETPATH, ndi.dataset/GETREFERENCE Documentation for ndi.dataset/dataset doc ndi.dataset delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATASET, NDI.DATASET/ISVALID, CLEAR Help for ndi.dataset/delete is inherited from superclass handle document_session - DOCUMENT_SESSION return the ndi.session of an ndi.document object in an ndi.dataset NDI_SESSION_OBJ = DOCUMENT_SESSION(NDI_DATASET_OBJ, NDI_DOCUMENT_OBJ) Given an ndi.document, return an open ndi.session object that contains the the document. eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET, NDI.DATASET/GE, NDI.DATASET/GT, NDI.DATASET/LE, NDI.DATASET/LT, NDI.DATASET/NE Help for ndi.dataset/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATASET Help for ndi.dataset/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.dataset, ndi.dataset/findobj, dynamicprops, matlab.metadata.Property Help for ndi.dataset/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET, NDI.DATASET/EQ, NDI.DATASET/GT, NDI.DATASET/LE, NDI.DATASET/LT, NDI.DATASET/NE Help for ndi.dataset/ge is inherited from superclass handle getpath - Return the path of the dataset P = GETPATH(NDI_DATASET_OBJ) Returns the path of an ndi.dataset object. The path is some sort of reference to the storage location of the dataset. This might be a URL, or a file directory, depending upon the subclass. In the ndi.dataset class, this returns empty. See also: ndidataset. gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET, NDI.DATASET/EQ, NDI.DATASET/GE, NDI.DATASET/LE, NDI.DATASET/LT, NDI.DATASET/NE Help for ndi.dataset/gt is inherited from superclass handle id - return the identifier of an ndi.dataset object IDENTIFIER = ID(NDI_DATASET_OBJ) Returns the unique identifier of an ndi.dataset object. isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATASET, NDI.DATASET/DELETE Help for ndi.dataset/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET, NDI.DATASET/EQ, NDI.DATASET/GE, NDI.DATASET/GT, NDI.DATASET/LT, NDI.DATASET/NE Help for ndi.dataset/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.dataset, matlab.metadata.Property, events Help for ndi.dataset/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET, NDI.DATASET/EQ, NDI.DATASET/GE, NDI.DATASET/GT, NDI.DATASET/LE, NDI.DATASET/NE Help for ndi.dataset/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET, NDI.DATASET/EQ, NDI.DATASET/GE, NDI.DATASET/GT, NDI.DATASET/LE, NDI.DATASET/LT Help for ndi.dataset/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATASET, NDI.DATASET/ADDLISTENER, NDI.DATASET/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.dataset/notify is inherited from superclass handle open_session - open an ndi.session object from an ndi.dataset NDI_SESSION_OBJ = OPEN_SESSION(NDI_DATASET_OBJ, SESSION_ID) Open an ndi.session object with session identifier SESSION_ID that is stored in the ndi.dataset NDI_DATASET_OBJ. See also: ndi.session, ndi.dataset/session_list() reference - return the reference string for an ndi.dataset object REF_STRING = REFERENCE(NDI_DATASET_OBJ) Returns the reference string for an ndi.dataset object. This can be any string, it is not necessarily unique among datasets. The dataset identifier returned by ID is unique. See also: ndi.dataset/ID session_list - return the session reference/identifier list for a dataset [REF_LIST, ID_LIST] = SESSION_LIST(NDI_DATASET_OBJ) Returns information about ndi.session objects contained in an ndi.dataset object NDI_DATASET_OBJ. REF_LIST is a cell array of reference strings, and ID_LIST is a cell array of unique identifier strings. The nth entry of REF_LIST corresponds to the Nth entry of ID_LIST (that is, REF_LIST{n} is the reference that corresponds to the ndi.session with unique identifier ID_LIST{n}.","title":"ndi.dataset"},{"location":"NDI-matlab/reference/%2Bndi/dataset.m/#class-ndidataset","text":"ndi.dataset - Create a new ndi.dataset object NDI_DATASET_OBJ=ndi.dataset(REFERENCE) Creates a new ndi.dataset object. The dataset has a unique reference REFERENCE. This class is an abstract class and typically an end user will open a specific subclass such as ndi.dataset.dir. ndi.dataset/GETPATH, ndi.dataset/GETREFERENCE","title":"CLASS ndi.dataset"},{"location":"NDI-matlab/reference/%2Bndi/dataset.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/dataset.m/#properties","text":"none","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/dataset.m/#methods","text":"Method Description add_ingested_session ingets an ndi.session into an ndi.dataset add_linked_session link an ndi.session to an ndi.dataset addlistener addlistener Add listener for event. database_add Add an ndi.document to an ndi.dataset object database_closebinarydoc close an ndi.database.binarydoc database_existbinarydoc checks if an ndi.database.binarydoc exists for an ndi.document database_openbinarydoc open the ndi.database.binarydoc channel of an ndi.document database_rm Remove an ndi.document with a given document ID from a dataset database_search Search for an ndi.document in a database of an ndi.dataset object dataset Create a new ndi.dataset object delete DELETE Delete a handle object. document_session DOCUMENT_SESSION return the ndi.session of an ndi.document object in an ndi.dataset eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getpath Return the path of the dataset gt > (GT) Greater than relation for handles. id return the identifier of an ndi.dataset object isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. open_session open an ndi.session object from an ndi.dataset reference return the reference string for an ndi.dataset object session_list return the session reference/identifier list for a dataset","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/dataset.m/#methods-help","text":"add_ingested_session - ingets an ndi.session into an ndi.dataset NDI_DATASET_OBJ = ADD_INGESTED_SESSION(NDI_DATASET_OBJ, NDI_SESSION_OBJ) Add an ndi.session object to an ndi.dataset, by copying the session documents into the dataset. add_linked_session - link an ndi.session to an ndi.dataset NDI_DATASET_OBJ = ADD_LINKED_SESSION(NDI_DATASET_OBJ, NDI_SESSION_OBJ) Add an ndi.session object to an ndi.dataset, without ingesting the session into the dataset. Instead, the ndi.session is linked to the dataset, but the session remains where it is. addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.dataset, matlab.metadata.Property, events Help for ndi.dataset/addlistener is inherited from superclass handle database_add - Add an ndi.document to an ndi.dataset object NDI_DATASET_OBJ = DATABASE_ADD(NDI_DATASET_OBJ, NDI_DOCUMENT_OBJ) Adds the ndi.document NDI_DOCUMENT_OBJ to the ndi.dataset NDI_DATASET_OBJ. NDI_DOCUMENT_OBJ can also be a cell array of ndi.document objects, which will all be added in turn. If the base.session_id of each NDI_DOCUMENT_OBJ matches one of the sessions in the DATASET, the document will be added to that session. If the base.session_id of the document matches the id of the NDI_DATASET_OBJ, it will be added to the dataset instead of one of the invidiual sessions. The database can be queried by calling NDI_DATASET_OBJ/SEARCH See also: ndi.dataset/database_search(), ndi.dataset/database_rm() database_closebinarydoc - close an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = DATABASE_CLOSEBINARYDOC(NDI_DATASET_OBJ, NDI_BINARYDOC_OBJ) Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the database, which is why it is necessary to call this function through the dataset object. database_existbinarydoc - checks if an ndi.database.binarydoc exists for an ndi.document [TF, FILE_PATH] = DATABASE_EXISTBINARYDOC(NDI_DATASET_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. database_openbinarydoc - open the ndi.database.binarydoc channel of an ndi.document NDI_BINARYDOC_OBJ = DATABASE_OPENBINARYDOC(NDI_DATASET_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return the open ndi.database.binarydoc object that corresponds to an ndi.document and NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself. The document is opened for reading only. Document binary streams may not be edited once the document is added to the database. Note that this NDI_BINARYDOC_OBJ must be closed with ndi.dataset/CLOSEBINARYDOC. database_rm - Remove an ndi.document with a given document ID from a dataset NDI_DATASET_OBJ = DATABASE_RM(NDI_DATASET_OBJ, DOC_UNIQUE_ID) or NDI_DATASET_OBJ = DATABASE_RM(NDI_DATASET_OBJ, DOC) Removes an ndi.document with document id DOC_UNIQUE_ID from the NDI_DATASET_OBJ database. In the second form, if an ndi.document or cell array of NDI_DOCUMENTS is passed for DOC, then the document unique ids are retrieved and they are removed in turn. If DOC/DOC_UNIQUE_ID is empty, no action is taken. If the base.session_id of each NDI_DOCUMENT_OBJ matches one of the linked sessions in the DATASET, the document will be removed from the linked session. If the linked session is opened individually, the document will have been removed. This function also takes parameters as name/value pairs that modify its behavior: Parameter (default) | Description -------------------------------------------------------------------------------- ErrIfNotFound (0) | Produce an error if an ID to be deleted is not found. See also: ndi.dataset/database_add(), ndi.dataset/database_search() database_search - Search for an ndi.document in a database of an ndi.dataset object NDI_DOCUMENT_OBJ = DATABASE_SEARCH(NDI_DATASET_OBJ, SEARCHPARAMETERS)T Given search parameters, which is an ndi.query object, the database associated with the ndi.dataset object NDI_DATASET_OBJ is searched. Matches are returned in a cell list NDI_DOCUMENT_OBJ. See also: ndi.dataset/database_add(), ndi.dataset/database_rm() dataset - Create a new ndi.dataset object NDI_DATASET_OBJ=ndi.dataset(REFERENCE) Creates a new ndi.dataset object. The dataset has a unique reference REFERENCE. This class is an abstract class and typically an end user will open a specific subclass such as ndi.dataset.dir. ndi.dataset/GETPATH, ndi.dataset/GETREFERENCE Documentation for ndi.dataset/dataset doc ndi.dataset delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATASET, NDI.DATASET/ISVALID, CLEAR Help for ndi.dataset/delete is inherited from superclass handle document_session - DOCUMENT_SESSION return the ndi.session of an ndi.document object in an ndi.dataset NDI_SESSION_OBJ = DOCUMENT_SESSION(NDI_DATASET_OBJ, NDI_DOCUMENT_OBJ) Given an ndi.document, return an open ndi.session object that contains the the document. eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET, NDI.DATASET/GE, NDI.DATASET/GT, NDI.DATASET/LE, NDI.DATASET/LT, NDI.DATASET/NE Help for ndi.dataset/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATASET Help for ndi.dataset/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.dataset, ndi.dataset/findobj, dynamicprops, matlab.metadata.Property Help for ndi.dataset/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET, NDI.DATASET/EQ, NDI.DATASET/GT, NDI.DATASET/LE, NDI.DATASET/LT, NDI.DATASET/NE Help for ndi.dataset/ge is inherited from superclass handle getpath - Return the path of the dataset P = GETPATH(NDI_DATASET_OBJ) Returns the path of an ndi.dataset object. The path is some sort of reference to the storage location of the dataset. This might be a URL, or a file directory, depending upon the subclass. In the ndi.dataset class, this returns empty. See also: ndidataset. gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET, NDI.DATASET/EQ, NDI.DATASET/GE, NDI.DATASET/LE, NDI.DATASET/LT, NDI.DATASET/NE Help for ndi.dataset/gt is inherited from superclass handle id - return the identifier of an ndi.dataset object IDENTIFIER = ID(NDI_DATASET_OBJ) Returns the unique identifier of an ndi.dataset object. isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATASET, NDI.DATASET/DELETE Help for ndi.dataset/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET, NDI.DATASET/EQ, NDI.DATASET/GE, NDI.DATASET/GT, NDI.DATASET/LT, NDI.DATASET/NE Help for ndi.dataset/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.dataset, matlab.metadata.Property, events Help for ndi.dataset/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET, NDI.DATASET/EQ, NDI.DATASET/GE, NDI.DATASET/GT, NDI.DATASET/LE, NDI.DATASET/NE Help for ndi.dataset/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET, NDI.DATASET/EQ, NDI.DATASET/GE, NDI.DATASET/GT, NDI.DATASET/LE, NDI.DATASET/LT Help for ndi.dataset/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATASET, NDI.DATASET/ADDLISTENER, NDI.DATASET/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.dataset/notify is inherited from superclass handle open_session - open an ndi.session object from an ndi.dataset NDI_SESSION_OBJ = OPEN_SESSION(NDI_DATASET_OBJ, SESSION_ID) Open an ndi.session object with session identifier SESSION_ID that is stored in the ndi.dataset NDI_DATASET_OBJ. See also: ndi.session, ndi.dataset/session_list() reference - return the reference string for an ndi.dataset object REF_STRING = REFERENCE(NDI_DATASET_OBJ) Returns the reference string for an ndi.dataset object. This can be any string, it is not necessarily unique among datasets. The dataset identifier returned by ID is unique. See also: ndi.dataset/ID session_list - return the session reference/identifier list for a dataset [REF_LIST, ID_LIST] = SESSION_LIST(NDI_DATASET_OBJ) Returns information about ndi.session objects contained in an ndi.dataset object NDI_DATASET_OBJ. REF_LIST is a cell array of reference strings, and ID_LIST is a cell array of unique identifier strings. The nth entry of REF_LIST corresponds to the Nth entry of ID_LIST (that is, REF_LIST{n} is the reference that corresponds to the ndi.session with unique identifier ID_LIST{n}.","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/document.m/","text":"CLASS ndi.document NDI.DOCUMENT - NDI_database storage item, general purpose data and parameter storage The ndi.document datatype for storing results in the ndi.database Superclasses none Properties Property Description document_properties a struct with the fields for the document Methods Method Description add_dependency_value_n add a dependency to a named list add_file add a file to a ndi.document current_file_list return the list of files that have been associated with an ndi.document dependency return names and a structure with all dependencies for an ndi.object dependency_value return dependency value given dependency name dependency_value_n return dependency values from list given dependency name doc_class DOC_CLASS what is the document class type of an ndi.document object? doc_isa is an ndi.document a member of a particular document_class? doc_superclass return the document superclasses of an ndi.document object doc_unique_id return the document unique identifier for an ndi.document document create a new ndi.database object eq are two ndi.document objects equal? find_doc_by_id find a doc in an array by ID find_newest find the newest document out an array id return the document unique identifier for an ndi.document is_in_file_list is a file name in a ndi.document's file list? plus merge two ndi.document objects readblankdefinition read a blank JSON class definitions from a file location string remove_dependency_value_n remove a dependency from a named list remove_file remove file information from a did.document reset_file_info reset the file information parameters for a new did.document set_dependency_value set the value of a dependency field set_session_id set the session id for an ndi.document object setproperties Set property values of an ndi.document object to_table convert an ndi.document to a table validate 0/1 evaluate whether ndi.document object is valid by its schema Methods help add_dependency_value_n - add a dependency to a named list NDI_DOCUMENT_OBJ = ADD_DEPENDENCY_VALUE_N(NDI_DOCUMENT_OBJ, DEPENDENCY_NAME, VALUE, ...) Examines the 'depends_on' field (if it is present) for a given NDI_DOCUMENT_OBJ and adds a dependency name 'dependency_name_(n+1)', where n is the number of entries with the form 'depenency_name_i' that exist presently. If there is no dependency field with that, then an entry is added and i is 1. This function accepts name/value pairs that alter its default behavior: Parameter (default) | Description ----------------------------------------------------------------- ErrorIfNotFound (1) | If 1, generate an error if the entry is | not found. Otherwise, generate no error but take no action. add_file - add a file to a ndi.document DID_DOCUMENT_OBJ = ADD_FILE(NDI_DOCUMENT_OBJ, NAME, LOCATION, ...) Adds a file's information to a ndi.document, for later ingestion into the database. NAME is the name of the file record for the document. LOCATION is a string that identifies the file or URL location on the internet. Note: NAME must not include any file separator characters on any platform (':','\\','/') and may not have leading or trailing spaces. Leading or trailing spaces will be trimmed. This function accepts name/value pairs that alter its default behavior: Parameter (default) | Description ----------------------------------------------------------------- ingest (1 or 0) | 0/1 Should the file be copied into the local | database by ndi.database.add_doc() ? | If LOCATION does not begin with 'http://' or | 'https://', then ingest is 1 by default. | If LOCATION begins with 'http(s)://', then | ingest is 0 by default. Note that the file | is only copied upon the later call to | ndi.database.add_doc(), not at the call to | ndi.document.add_file(). delete_original (1 or 0) | 0/1 Should we delete the file after ingestion? | If LOCATION does not begin with 'http://' or | 'https://', then delete_original is 1 by default. | If LOCATION begins with 'http(s)://', then | delete_original is 0 by default. Note that the | file is only deleted upon the later call to | ndi.database.add_doc(), not at the call to | ndi.document.add_file(). location_type ('file' or | Can be 'file' or 'url'. By default, it is set 'url') | to 'file' if LOCATION does not begin with | 'http://' or 'https://', and 'url' otherwise. current_file_list - return the list of files that have been associated with an ndi.document FL = CURRENT_FILE_LIST(NDI_DOCUMENT_OBJ) Return a cell array of file names that are associated with an ndi.document object. This list will be a subset of all files possible to add to the document in ndi_document_obj.document_properties.file.file_list, and only includes files that have actually been added in {ndi_document_obj.document_properties.file.file_info.name}. dependency - return names and a structure with all dependencies for an ndi.object [NAMES, DEPEND_STRUCT] = DEPENDENCY(NDI_DOCUMENT_OBJ) Returns in the cell array NAMES the 'name' of all 'depends_on' entries in the ndi.document NDI_DOCUMENT_OBJ. Further, this function returns a structure with all 'name' and 'value' entries in DEPEND_STRUCT. dependency_value - return dependency value given dependency name D = DEPENDENCY_VALUE(NDI_DOCUMENT_OBJ, DEPENDENCY_NAME, ...) Examines the 'depends_on' field (if it is present) for a given NDI_DOCUMENT_OBJ and returns the 'value' associated with the given 'name'. If there is no such field (either 'depends_on' or 'name'), then D is empty and an error is generated. This function accepts name/value pairs that alter its default behavior: Parameter (default) | Description ----------------------------------------------------------------- ErrorIfNotFound (1) | If 1, generate an error if the entry is | not found. Otherwise, return empty. dependency_value_n - return dependency values from list given dependency name D = DEPENDENCY_VALUE_N(NDI_DOCUMENT_OBJ, DEPENDENCY_NAME, ...) Examines the 'depends_on' field (if it is present) for a given NDI_DOCUMENT_OBJ and returns the 'values' associated with the given 'name_i', where i varies from 1 to the maximum number of entries titled 'name_i'. If there is no such field (either 'depends_on' or 'name_i'), then D is empty and an error is generated. This function accepts name/value pairs that alter its default behavior: Parameter (default) | Description ----------------------------------------------------------------- ErrorIfNotFound (1) | If 1, generate an error if the entry is | not found. Otherwise, return empty. doc_class - DOC_CLASS what is the document class type of an ndi.document object? C = DOC_CLASS(NDI_DOCUMENT_OBJ) Returns the document class of an ndi.document. (Found at ndi_document_obj.document_properties.document_class.class_name) doc_isa - is an ndi.document a member of a particular document_class? B = DOC_ISA(NDI_DOCUMENT_OBJ, DOCUMENT_CLASS) Returns 1 if NDI_DOCUMENT_OBJ or one of its superclasses is a match for DOCUMENT_CLASS. Otherwise returns 0. doc_superclass - return the document superclasses of an ndi.document object SC = DOC_SUPERCLASS(NDI_DOCUMENT_OBJ) Returns the document superclasses of an ndi.document object. SC is a cell array of strings. doc_unique_id - return the document unique identifier for an ndi.document UID = DOC_UNIQUE_ID(NDI_DOCUMENT_OBJ) Returns the unique id of an ndi.document (Found at NDI_DOCUMENT_OBJ.documentproperties.base.id) document - create a new ndi.database object NDI_DOCUMENT_OBJ = ndi.document(DOCUMENT_TYPE, 'PARAM1', VALUE1, ...) or NDI_DOCUMENT_OBJ = ndi.document(MATLAB_STRUCT) Documentation for ndi.document/document doc ndi.document eq - are two ndi.document objects equal? B = EQ(NDI_DOCUMENT_OBJ1, NDI_DOCUMENT_OBJ2) Returns 1 if and only if the objects have identical document_properties.base.id fields. find_doc_by_id - find a doc in an array by ID [D,I] = FIND_DOC_BY_ID(DOCARRAY, ID) Given a cell array of ndi.document objects and an ID, return the document D that matches and its index I in DOCARRAY. If no document matches, empty is returned for D, I. find_newest - find the newest document out an array [D,I,T] = FIND_NEWEST(DOCARRAY) Find the newest document among an array of ndi.document objects. The newest document is returned in D, along with the index I. T is the datestamp of each document as a datetime object. id - return the document unique identifier for an ndi.document UID = ID (NDI_DOCUMENT_OBJ) Returns the unique id of an ndi.document (Found at NDI_DOCUMENT_OBJ.documentproperties.base.id) is_in_file_list - is a file name in a ndi.document's file list? [B, MSG, FI_INDEX] = IS_IN_FILE_LIST(NDI_DOCUMENT_OBJ, NAME) Is the file NAME a valid named binary file for the ndi.document NDI_DOCUMENT_OBJ? If so, B is 1; else, B is 0. A name is a valid name if it appears in NDI_DOCUMENT_OBJ.... document_properties.files.file_list or if it is a numbered file with an entry in document_properties.files.file_list as 'filename.ext_#'. (For example, 'filename.ext_1' would be valid if 'filename.ext_# is in the file_list.) If the file NAME is not valid, a reason is returned in MSG. If it is a valid file NAME, then the index value of NAME in NDI_DOCUMENT_OBJ.DOCUMENT_PROPERTIES.FILES.FILE_INFO is also returned. plus - merge two ndi.document objects NDI_DOCUMENT_OBJ_OUT = PLUS(NDI_DOCUMENT_OBJ_A, NDI_DOCUMENT_OBJ_B) Merges the ndi.document objects A and B. First, the 'document_class' superclasses are merged. Then, the fields that are in B but are not in A are added to A. The result is returned in NDI_DOCUMENT_OBJ_OUT. Note that any fields that A has that are also in B will be preserved; no elements of those fields of B will be combined with A. readblankdefinition - read a blank JSON class definitions from a file location string S = READBLANKDEFINITION(JSONFILELOCATIONSTRING) Given a JSONFILELOCATIONSTRING, this function creates a blank document using the JSON definitions. A JSONFILELOCATIONSTRING can be: a) a url b) a filename (full path) c) a filename referenced with respect to $NDIDOCUMENTPATH See also: DID.DOCUMENT.READJSONFILELOCATION remove_dependency_value_n - remove a dependency from a named list NDI_DOCUMENT_OBJ = REMOVE_DEPENDENCY_VALUE_N(NDI_DOCUMENT_OBJ, DEPENDENCY_NAME, VALUE, N, ...) Examines the 'depends_on' field (if it is present) for a given NDI_DOCUMENT_OBJ and removes the dependency name 'dependency_name_(n)'. This function accepts name/value pairs that alter its default behavior: Parameter (default) | Description ----------------------------------------------------------------- ErrorIfNotFound (1) | If 1, generate an error if the entry is | not found. Otherwise, generate no error but take no action. remove_file - remove file information from a did.document DID_DOCUMENT_OBJ = REMOVE_FILE(NDI_DOCUMENT_OBJ, NAME, [LOCATION], ...) Removes the file information for a name or a name and location combination from a did.document() object. If LOCATION is not specified or is empty, then all locations are removed. If NDI_DOCUMENT_OBJ does not have a file NAME in its file_list, then an error is generated. This function accepts name/value pairs that alter its default behavior: Parameter (default) | Description ----------------------------------------------------------------- ErrorIfNoFileInfo (0) | 0/1 If a name is specified and the | file info is already empty, should we | produce an error? reset_file_info - reset the file information parameters for a new did.document NDI_DOCUMENT_OBJ = RESET_FILE_INFO(NDI_DOCUMENT_OBJ) Reset (make empty) all file info structures for a new did.document object. Sets document_properties.files.file_info to an empty structure set_dependency_value - set the value of a dependency field NDI_DOCUMENT_OBJ = SET_DEPENDENCY_VALUE(NDI_DOCUMENT_OBJ, DEPENDENCY_NAME, VALUE, ...) Examines the 'depends_on' field (if it is present) for a given NDI_DOCUMENT_OBJ and, if there is a dependency with a given 'dependency_name', then the value of the dependency is set to DEPENDENCY_VALUE. This function accepts name/value pairs that alter its default behavior: Parameter (default) | Description ----------------------------------------------------------------- ErrorIfNotFound (1) | If 1, generate an error if the entry is | not found. Otherwise, add it. set_session_id - set the session id for an ndi.document object NDI_DOCUMENT_OBJ = SET_SESSION_ID(NDI_DOCUMENT_OBJ, SESSION_ID) Sets the document_properties.base.session_id field to the value indicated. setproperties - Set property values of an ndi.document object NDI_DOCUMENT_OBJ = SETPROPERTIES(NDI_DOCUMENT_OBJ, 'PROPERTY1', VALUE1, ...) Sets the property values of NDI_DOCUMENT_OBJ. PROPERTY values should be expressed relative to NDI_DOCUMENT_OBJ.document_properties (see example). See also: ndi.document, ndi.document/ndi.document Example: mydoc = mydoc.setproperties('base.name','mydoc name'); to_table - convert an ndi.document to a table T = TO_TABLE(NDI_DOCUMENT_OBJ) Convert an ndi.document to a Matlab table. Field names are converted to table variable names. If there are substructures, then the variable names have a 'dot' indicating the substructure. 'depends_on' elements are given their own names. Each dependency has a 'depends_on_NAME' variable name and the value is the dependency value. validate - 0/1 evaluate whether ndi.document object is valid by its schema B = VALIDATE(NDI_DOCUMENT_OBJ) Checks the fields of the ndi.document object against the schema in NDI_DOCUMENT_OBJ.ndi_core_properties.validation_schema and returns 1 if the object is valid and 0 otherwise.","title":"ndi.document"},{"location":"NDI-matlab/reference/%2Bndi/document.m/#class-ndidocument","text":"NDI.DOCUMENT - NDI_database storage item, general purpose data and parameter storage The ndi.document datatype for storing results in the ndi.database","title":"CLASS ndi.document"},{"location":"NDI-matlab/reference/%2Bndi/document.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/document.m/#properties","text":"Property Description document_properties a struct with the fields for the document","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/document.m/#methods","text":"Method Description add_dependency_value_n add a dependency to a named list add_file add a file to a ndi.document current_file_list return the list of files that have been associated with an ndi.document dependency return names and a structure with all dependencies for an ndi.object dependency_value return dependency value given dependency name dependency_value_n return dependency values from list given dependency name doc_class DOC_CLASS what is the document class type of an ndi.document object? doc_isa is an ndi.document a member of a particular document_class? doc_superclass return the document superclasses of an ndi.document object doc_unique_id return the document unique identifier for an ndi.document document create a new ndi.database object eq are two ndi.document objects equal? find_doc_by_id find a doc in an array by ID find_newest find the newest document out an array id return the document unique identifier for an ndi.document is_in_file_list is a file name in a ndi.document's file list? plus merge two ndi.document objects readblankdefinition read a blank JSON class definitions from a file location string remove_dependency_value_n remove a dependency from a named list remove_file remove file information from a did.document reset_file_info reset the file information parameters for a new did.document set_dependency_value set the value of a dependency field set_session_id set the session id for an ndi.document object setproperties Set property values of an ndi.document object to_table convert an ndi.document to a table validate 0/1 evaluate whether ndi.document object is valid by its schema","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/document.m/#methods-help","text":"add_dependency_value_n - add a dependency to a named list NDI_DOCUMENT_OBJ = ADD_DEPENDENCY_VALUE_N(NDI_DOCUMENT_OBJ, DEPENDENCY_NAME, VALUE, ...) Examines the 'depends_on' field (if it is present) for a given NDI_DOCUMENT_OBJ and adds a dependency name 'dependency_name_(n+1)', where n is the number of entries with the form 'depenency_name_i' that exist presently. If there is no dependency field with that, then an entry is added and i is 1. This function accepts name/value pairs that alter its default behavior: Parameter (default) | Description ----------------------------------------------------------------- ErrorIfNotFound (1) | If 1, generate an error if the entry is | not found. Otherwise, generate no error but take no action. add_file - add a file to a ndi.document DID_DOCUMENT_OBJ = ADD_FILE(NDI_DOCUMENT_OBJ, NAME, LOCATION, ...) Adds a file's information to a ndi.document, for later ingestion into the database. NAME is the name of the file record for the document. LOCATION is a string that identifies the file or URL location on the internet. Note: NAME must not include any file separator characters on any platform (':','\\','/') and may not have leading or trailing spaces. Leading or trailing spaces will be trimmed. This function accepts name/value pairs that alter its default behavior: Parameter (default) | Description ----------------------------------------------------------------- ingest (1 or 0) | 0/1 Should the file be copied into the local | database by ndi.database.add_doc() ? | If LOCATION does not begin with 'http://' or | 'https://', then ingest is 1 by default. | If LOCATION begins with 'http(s)://', then | ingest is 0 by default. Note that the file | is only copied upon the later call to | ndi.database.add_doc(), not at the call to | ndi.document.add_file(). delete_original (1 or 0) | 0/1 Should we delete the file after ingestion? | If LOCATION does not begin with 'http://' or | 'https://', then delete_original is 1 by default. | If LOCATION begins with 'http(s)://', then | delete_original is 0 by default. Note that the | file is only deleted upon the later call to | ndi.database.add_doc(), not at the call to | ndi.document.add_file(). location_type ('file' or | Can be 'file' or 'url'. By default, it is set 'url') | to 'file' if LOCATION does not begin with | 'http://' or 'https://', and 'url' otherwise. current_file_list - return the list of files that have been associated with an ndi.document FL = CURRENT_FILE_LIST(NDI_DOCUMENT_OBJ) Return a cell array of file names that are associated with an ndi.document object. This list will be a subset of all files possible to add to the document in ndi_document_obj.document_properties.file.file_list, and only includes files that have actually been added in {ndi_document_obj.document_properties.file.file_info.name}. dependency - return names and a structure with all dependencies for an ndi.object [NAMES, DEPEND_STRUCT] = DEPENDENCY(NDI_DOCUMENT_OBJ) Returns in the cell array NAMES the 'name' of all 'depends_on' entries in the ndi.document NDI_DOCUMENT_OBJ. Further, this function returns a structure with all 'name' and 'value' entries in DEPEND_STRUCT. dependency_value - return dependency value given dependency name D = DEPENDENCY_VALUE(NDI_DOCUMENT_OBJ, DEPENDENCY_NAME, ...) Examines the 'depends_on' field (if it is present) for a given NDI_DOCUMENT_OBJ and returns the 'value' associated with the given 'name'. If there is no such field (either 'depends_on' or 'name'), then D is empty and an error is generated. This function accepts name/value pairs that alter its default behavior: Parameter (default) | Description ----------------------------------------------------------------- ErrorIfNotFound (1) | If 1, generate an error if the entry is | not found. Otherwise, return empty. dependency_value_n - return dependency values from list given dependency name D = DEPENDENCY_VALUE_N(NDI_DOCUMENT_OBJ, DEPENDENCY_NAME, ...) Examines the 'depends_on' field (if it is present) for a given NDI_DOCUMENT_OBJ and returns the 'values' associated with the given 'name_i', where i varies from 1 to the maximum number of entries titled 'name_i'. If there is no such field (either 'depends_on' or 'name_i'), then D is empty and an error is generated. This function accepts name/value pairs that alter its default behavior: Parameter (default) | Description ----------------------------------------------------------------- ErrorIfNotFound (1) | If 1, generate an error if the entry is | not found. Otherwise, return empty. doc_class - DOC_CLASS what is the document class type of an ndi.document object? C = DOC_CLASS(NDI_DOCUMENT_OBJ) Returns the document class of an ndi.document. (Found at ndi_document_obj.document_properties.document_class.class_name) doc_isa - is an ndi.document a member of a particular document_class? B = DOC_ISA(NDI_DOCUMENT_OBJ, DOCUMENT_CLASS) Returns 1 if NDI_DOCUMENT_OBJ or one of its superclasses is a match for DOCUMENT_CLASS. Otherwise returns 0. doc_superclass - return the document superclasses of an ndi.document object SC = DOC_SUPERCLASS(NDI_DOCUMENT_OBJ) Returns the document superclasses of an ndi.document object. SC is a cell array of strings. doc_unique_id - return the document unique identifier for an ndi.document UID = DOC_UNIQUE_ID(NDI_DOCUMENT_OBJ) Returns the unique id of an ndi.document (Found at NDI_DOCUMENT_OBJ.documentproperties.base.id) document - create a new ndi.database object NDI_DOCUMENT_OBJ = ndi.document(DOCUMENT_TYPE, 'PARAM1', VALUE1, ...) or NDI_DOCUMENT_OBJ = ndi.document(MATLAB_STRUCT) Documentation for ndi.document/document doc ndi.document eq - are two ndi.document objects equal? B = EQ(NDI_DOCUMENT_OBJ1, NDI_DOCUMENT_OBJ2) Returns 1 if and only if the objects have identical document_properties.base.id fields. find_doc_by_id - find a doc in an array by ID [D,I] = FIND_DOC_BY_ID(DOCARRAY, ID) Given a cell array of ndi.document objects and an ID, return the document D that matches and its index I in DOCARRAY. If no document matches, empty is returned for D, I. find_newest - find the newest document out an array [D,I,T] = FIND_NEWEST(DOCARRAY) Find the newest document among an array of ndi.document objects. The newest document is returned in D, along with the index I. T is the datestamp of each document as a datetime object. id - return the document unique identifier for an ndi.document UID = ID (NDI_DOCUMENT_OBJ) Returns the unique id of an ndi.document (Found at NDI_DOCUMENT_OBJ.documentproperties.base.id) is_in_file_list - is a file name in a ndi.document's file list? [B, MSG, FI_INDEX] = IS_IN_FILE_LIST(NDI_DOCUMENT_OBJ, NAME) Is the file NAME a valid named binary file for the ndi.document NDI_DOCUMENT_OBJ? If so, B is 1; else, B is 0. A name is a valid name if it appears in NDI_DOCUMENT_OBJ.... document_properties.files.file_list or if it is a numbered file with an entry in document_properties.files.file_list as 'filename.ext_#'. (For example, 'filename.ext_1' would be valid if 'filename.ext_# is in the file_list.) If the file NAME is not valid, a reason is returned in MSG. If it is a valid file NAME, then the index value of NAME in NDI_DOCUMENT_OBJ.DOCUMENT_PROPERTIES.FILES.FILE_INFO is also returned. plus - merge two ndi.document objects NDI_DOCUMENT_OBJ_OUT = PLUS(NDI_DOCUMENT_OBJ_A, NDI_DOCUMENT_OBJ_B) Merges the ndi.document objects A and B. First, the 'document_class' superclasses are merged. Then, the fields that are in B but are not in A are added to A. The result is returned in NDI_DOCUMENT_OBJ_OUT. Note that any fields that A has that are also in B will be preserved; no elements of those fields of B will be combined with A. readblankdefinition - read a blank JSON class definitions from a file location string S = READBLANKDEFINITION(JSONFILELOCATIONSTRING) Given a JSONFILELOCATIONSTRING, this function creates a blank document using the JSON definitions. A JSONFILELOCATIONSTRING can be: a) a url b) a filename (full path) c) a filename referenced with respect to $NDIDOCUMENTPATH See also: DID.DOCUMENT.READJSONFILELOCATION remove_dependency_value_n - remove a dependency from a named list NDI_DOCUMENT_OBJ = REMOVE_DEPENDENCY_VALUE_N(NDI_DOCUMENT_OBJ, DEPENDENCY_NAME, VALUE, N, ...) Examines the 'depends_on' field (if it is present) for a given NDI_DOCUMENT_OBJ and removes the dependency name 'dependency_name_(n)'. This function accepts name/value pairs that alter its default behavior: Parameter (default) | Description ----------------------------------------------------------------- ErrorIfNotFound (1) | If 1, generate an error if the entry is | not found. Otherwise, generate no error but take no action. remove_file - remove file information from a did.document DID_DOCUMENT_OBJ = REMOVE_FILE(NDI_DOCUMENT_OBJ, NAME, [LOCATION], ...) Removes the file information for a name or a name and location combination from a did.document() object. If LOCATION is not specified or is empty, then all locations are removed. If NDI_DOCUMENT_OBJ does not have a file NAME in its file_list, then an error is generated. This function accepts name/value pairs that alter its default behavior: Parameter (default) | Description ----------------------------------------------------------------- ErrorIfNoFileInfo (0) | 0/1 If a name is specified and the | file info is already empty, should we | produce an error? reset_file_info - reset the file information parameters for a new did.document NDI_DOCUMENT_OBJ = RESET_FILE_INFO(NDI_DOCUMENT_OBJ) Reset (make empty) all file info structures for a new did.document object. Sets document_properties.files.file_info to an empty structure set_dependency_value - set the value of a dependency field NDI_DOCUMENT_OBJ = SET_DEPENDENCY_VALUE(NDI_DOCUMENT_OBJ, DEPENDENCY_NAME, VALUE, ...) Examines the 'depends_on' field (if it is present) for a given NDI_DOCUMENT_OBJ and, if there is a dependency with a given 'dependency_name', then the value of the dependency is set to DEPENDENCY_VALUE. This function accepts name/value pairs that alter its default behavior: Parameter (default) | Description ----------------------------------------------------------------- ErrorIfNotFound (1) | If 1, generate an error if the entry is | not found. Otherwise, add it. set_session_id - set the session id for an ndi.document object NDI_DOCUMENT_OBJ = SET_SESSION_ID(NDI_DOCUMENT_OBJ, SESSION_ID) Sets the document_properties.base.session_id field to the value indicated. setproperties - Set property values of an ndi.document object NDI_DOCUMENT_OBJ = SETPROPERTIES(NDI_DOCUMENT_OBJ, 'PROPERTY1', VALUE1, ...) Sets the property values of NDI_DOCUMENT_OBJ. PROPERTY values should be expressed relative to NDI_DOCUMENT_OBJ.document_properties (see example). See also: ndi.document, ndi.document/ndi.document Example: mydoc = mydoc.setproperties('base.name','mydoc name'); to_table - convert an ndi.document to a table T = TO_TABLE(NDI_DOCUMENT_OBJ) Convert an ndi.document to a Matlab table. Field names are converted to table variable names. If there are substructures, then the variable names have a 'dot' indicating the substructure. 'depends_on' elements are given their own names. Each dependency has a 'depends_on_NAME' variable name and the value is the dependency value. validate - 0/1 evaluate whether ndi.document object is valid by its schema B = VALIDATE(NDI_DOCUMENT_OBJ) Checks the fields of the ndi.document object against the schema in NDI_DOCUMENT_OBJ.ndi_core_properties.validation_schema and returns 1 if the object is valid and 0 otherwise.","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/documentservice.m/","text":"CLASS ndi.documentservice ndi.documentservice - a class of methods that allows objects to interact with ndi.document objects Superclasses none Properties none Methods Method Description documentservice create an ndi.documentservice object, which is just an abstract class newdocument create a new ndi.document based on information in this object searchquery create a search query to find this object as an ndi.document Methods help documentservice - create an ndi.documentservice object, which is just an abstract class NDI_DOCUMENTSERVICE_OBJ = ndi.documentservice(); Documentation for ndi.documentservice/documentservice doc ndi.documentservice newdocument - create a new ndi.document based on information in this object NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DOCUMENTSERVICE_OBJ) Create a new ndi.document based on information in this class. The base ndi.documentservice class returns empty. searchquery - create a search query to find this object as an ndi.document SQ = SEARCHQUERY(NDI_DOCUMENTSERVICE_OBJ) Return a search query that can be used to find this object's representation as an ndi.document. The base class ndi.documentservice just returns empty.","title":"ndi.documentservice"},{"location":"NDI-matlab/reference/%2Bndi/documentservice.m/#class-ndidocumentservice","text":"ndi.documentservice - a class of methods that allows objects to interact with ndi.document objects","title":"CLASS ndi.documentservice"},{"location":"NDI-matlab/reference/%2Bndi/documentservice.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/documentservice.m/#properties","text":"none","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/documentservice.m/#methods","text":"Method Description documentservice create an ndi.documentservice object, which is just an abstract class newdocument create a new ndi.document based on information in this object searchquery create a search query to find this object as an ndi.document","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/documentservice.m/#methods-help","text":"documentservice - create an ndi.documentservice object, which is just an abstract class NDI_DOCUMENTSERVICE_OBJ = ndi.documentservice(); Documentation for ndi.documentservice/documentservice doc ndi.documentservice newdocument - create a new ndi.document based on information in this object NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DOCUMENTSERVICE_OBJ) Create a new ndi.document based on information in this class. The base ndi.documentservice class returns empty. searchquery - create a search query to find this object as an ndi.document SQ = SEARCHQUERY(NDI_DOCUMENTSERVICE_OBJ) Return a search query that can be used to find this object's representation as an ndi.document. The base class ndi.documentservice just returns empty.","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/element.m/","text":"CLASS ndi.element ndi.element - define or examine a element in the session Superclasses ndi.ido , did.ido , ndi.epoch.epochset , ndi.documentservice , matlab.mixin.Heterogeneous Properties Property Description session associated ndi_session object name type reference underlying_element does this element depend on underlying element data (epochs)? direct is it direct from the element it underlies, or is it different with its own possibly modified epochs? subject_id ID of the subject that is related to the ndi.element dependencies a structure of name/value pairs of document dependencies (with exception of underlying_element and subject_id) identifier Methods Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.element cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object element creator for ndi.element elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochsetname the name of the ndi.element object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID getcache return the NDI_CACHE and key for ndi.element getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version newdocument return a new database document of type ndi.document based on a element numepochs Number of epochs of ndi.epoch.epochset resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery return a search query for an ndi.document based on this element t0_t1 underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method) Methods help addepoch - add an epoch to the ndi.element [NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, [ADD_TO_DB]) Registers the data for an epoch with the NDI_ELEMENT_OBJ. Inputs: NDI_ELEMENT_OBJ: The ndi.element object to modify EPOCHID: The name of the epoch to add; should match the name of an epoch from the probe EPOCHCLOCK: The epoch clock; must be a single clock type that matches one of the clock types of the probe T0_T1: The starting time and ending time of the existence of information about the ELEMENT on the probe, in units of the epock clock ADD_TO_DB: 0/1 Should we actually add the epoch document to the database? Default 0. buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.element/EPOCHNODES Help for ndi.element/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - build the epoch table for an ndi.element ET = BUILDEPOCHTABLE(NDI_ELEMENT_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch (may change) 'epoch_id' | The epoch ID code (will never change once established) | This uniquely specifies the epoch (with the session id). 'epoch_session_id' | Session of the epoch 'epochprobemap' | The epochprobemap object from each epoch 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', and 'epoch_id' cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.element.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.element/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.element/cached_epochtable is inherited from superclass ndi.epoch.epochset doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then empty is returned. element - creator for ndi.element NDI_ELEMENT_OBJ = ndi.element(NDI_SESSION_OBJ, ELEMENT_NAME, ELEMENT_REFERENCE, ... ELEMENT_TYPE, UNDERLYING_EPOCHSET, DIRECT, [SUBJECT_ID], [DEPENDENCIES]) or NDI_ELEMENT_OBJ = ndi.element(NDI_SESSION_OBJ, ELEMENT_DOCUMENT) Creates an ndi.element object, either from a name and and associated ndi.probe object, or builds the ndi.element in memory from an ndi.document of type 'element'. If the UNDERLYING_EPOCHSET has a subject_id, then that subject ID is used for the new element. Documentation for ndi.element/element doc ndi.element elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ) Returns the name as a human-readable string. For ndi.element objects, this is the string 'element: ' followed by its name epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.element/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_ELEMENT_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch. The ndi.element class always returns the clock type(s) of the element it is based on epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.element/epochgraph is inherited from superclass ndi.epoch.epochset epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string. The abstract class just queries the EPOCHTABLE. Most classes that manage epochs themselves (ndi.file.navigator, ndi.daq.system) will override this method. Help for ndi.element/epochid is inherited from superclass ndi.epoch.epochset epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.element/epochnodes is inherited from superclass ndi.epoch.epochset epochsetname - the name of the ndi.element object, for EPOCHNODES NAME = EPOCHSETNAME(NDI_ELEMENT_OBJ) Returns the object name that is used when creating epoch nodes. For ndi.element objects, this is ndi.element/ELEMENTSTRING. epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.element/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.element/epochtableentry is inherited from superclass ndi.epoch.epochset getcache - return the NDI_CACHE and key for ndi.element [CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ) Returns the CACHE and KEY for the ndi.element object. The CACHE is returned from the associated session. The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT. See also: ndi.file.navigator getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.element/getepocharray is inherited from superclass ndi.epoch.epochset ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.element.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then an error is returned. issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_ELEMENT_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.element objects, this returns 0 so that underlying ndi.probe epochs are added. isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.element.isvalid is inherited from superclass did.ido load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ) Loads the ndi.document that is based on the ndi.element object and any associated epoch documents. load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ) Load an ndi.document that is based on the ndi.element object. Returns empty if there is no such document. loadaddedepochs - load the added epochs from an ndi.element [ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ) Load the EPOCHTABLE that consists of added/registered epochs that provide information about the ndi.element. matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.element/matchedepochtable is inherited from superclass ndi.epoch.epochset newdocument - return a new database document of type ndi.document based on a element NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_ELEMENT_OBJ) Fill out the fields of an NDI_DOCUMENT_OBJ of type 'element' with the corresponding 'name' and 'type' fields of the element NDI_ELEMENT_OBJ and the 'name', 'type', and 'reference' fields of its underlying NDI_PROBE_OBJ. If EPOCHID is provided, then an EPOCHID field is filled out as well in accordance to 'epochid'. When the document is created, it is automatically added to the session. numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.element/numepochs is inherited from superclass ndi.epoch.epochset resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.element/EPOCHTABLE Help for ndi.element/resetepochtable is inherited from superclass ndi.epoch.epochset searchquery - return a search query for an ndi.document based on this element SQ = SEARCHQUERY(NDI_ELEMENT_OBJ, [EPOCHID]) Returns a search query for the fields of an NDI_DOCUMENT_OBJ of type 'element' with the corresponding 'name' and 'type' fields of the element NDI_ELEMENT_OBJ. t0_t1 - ** T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK TODO: this must be a bug, it's just self-referential underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.element/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.element.unique_id is inherited from superclass did.ido","title":"ndi.element"},{"location":"NDI-matlab/reference/%2Bndi/element.m/#class-ndielement","text":"ndi.element - define or examine a element in the session","title":"CLASS ndi.element"},{"location":"NDI-matlab/reference/%2Bndi/element.m/#superclasses","text":"ndi.ido , did.ido , ndi.epoch.epochset , ndi.documentservice , matlab.mixin.Heterogeneous","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/element.m/#properties","text":"Property Description session associated ndi_session object name type reference underlying_element does this element depend on underlying element data (epochs)? direct is it direct from the element it underlies, or is it different with its own possibly modified epochs? subject_id ID of the subject that is related to the ndi.element dependencies a structure of name/value pairs of document dependencies (with exception of underlying_element and subject_id) identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/element.m/#methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.element cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object element creator for ndi.element elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochsetname the name of the ndi.element object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID getcache return the NDI_CACHE and key for ndi.element getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version newdocument return a new database document of type ndi.document based on a element numepochs Number of epochs of ndi.epoch.epochset resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery return a search query for an ndi.document based on this element t0_t1 underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method)","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/element.m/#methods-help","text":"addepoch - add an epoch to the ndi.element [NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, [ADD_TO_DB]) Registers the data for an epoch with the NDI_ELEMENT_OBJ. Inputs: NDI_ELEMENT_OBJ: The ndi.element object to modify EPOCHID: The name of the epoch to add; should match the name of an epoch from the probe EPOCHCLOCK: The epoch clock; must be a single clock type that matches one of the clock types of the probe T0_T1: The starting time and ending time of the existence of information about the ELEMENT on the probe, in units of the epock clock ADD_TO_DB: 0/1 Should we actually add the epoch document to the database? Default 0. buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.element/EPOCHNODES Help for ndi.element/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - build the epoch table for an ndi.element ET = BUILDEPOCHTABLE(NDI_ELEMENT_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch (may change) 'epoch_id' | The epoch ID code (will never change once established) | This uniquely specifies the epoch (with the session id). 'epoch_session_id' | Session of the epoch 'epochprobemap' | The epochprobemap object from each epoch 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', and 'epoch_id' cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.element.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.element/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.element/cached_epochtable is inherited from superclass ndi.epoch.epochset doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then empty is returned. element - creator for ndi.element NDI_ELEMENT_OBJ = ndi.element(NDI_SESSION_OBJ, ELEMENT_NAME, ELEMENT_REFERENCE, ... ELEMENT_TYPE, UNDERLYING_EPOCHSET, DIRECT, [SUBJECT_ID], [DEPENDENCIES]) or NDI_ELEMENT_OBJ = ndi.element(NDI_SESSION_OBJ, ELEMENT_DOCUMENT) Creates an ndi.element object, either from a name and and associated ndi.probe object, or builds the ndi.element in memory from an ndi.document of type 'element'. If the UNDERLYING_EPOCHSET has a subject_id, then that subject ID is used for the new element. Documentation for ndi.element/element doc ndi.element elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ) Returns the name as a human-readable string. For ndi.element objects, this is the string 'element: ' followed by its name epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.element/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_ELEMENT_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch. The ndi.element class always returns the clock type(s) of the element it is based on epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.element/epochgraph is inherited from superclass ndi.epoch.epochset epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string. The abstract class just queries the EPOCHTABLE. Most classes that manage epochs themselves (ndi.file.navigator, ndi.daq.system) will override this method. Help for ndi.element/epochid is inherited from superclass ndi.epoch.epochset epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.element/epochnodes is inherited from superclass ndi.epoch.epochset epochsetname - the name of the ndi.element object, for EPOCHNODES NAME = EPOCHSETNAME(NDI_ELEMENT_OBJ) Returns the object name that is used when creating epoch nodes. For ndi.element objects, this is ndi.element/ELEMENTSTRING. epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.element/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.element/epochtableentry is inherited from superclass ndi.epoch.epochset getcache - return the NDI_CACHE and key for ndi.element [CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ) Returns the CACHE and KEY for the ndi.element object. The CACHE is returned from the associated session. The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT. See also: ndi.file.navigator getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.element/getepocharray is inherited from superclass ndi.epoch.epochset ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.element.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then an error is returned. issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_ELEMENT_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.element objects, this returns 0 so that underlying ndi.probe epochs are added. isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.element.isvalid is inherited from superclass did.ido load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ) Loads the ndi.document that is based on the ndi.element object and any associated epoch documents. load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ) Load an ndi.document that is based on the ndi.element object. Returns empty if there is no such document. loadaddedepochs - load the added epochs from an ndi.element [ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ) Load the EPOCHTABLE that consists of added/registered epochs that provide information about the ndi.element. matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.element/matchedepochtable is inherited from superclass ndi.epoch.epochset newdocument - return a new database document of type ndi.document based on a element NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_ELEMENT_OBJ) Fill out the fields of an NDI_DOCUMENT_OBJ of type 'element' with the corresponding 'name' and 'type' fields of the element NDI_ELEMENT_OBJ and the 'name', 'type', and 'reference' fields of its underlying NDI_PROBE_OBJ. If EPOCHID is provided, then an EPOCHID field is filled out as well in accordance to 'epochid'. When the document is created, it is automatically added to the session. numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.element/numepochs is inherited from superclass ndi.epoch.epochset resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.element/EPOCHTABLE Help for ndi.element/resetepochtable is inherited from superclass ndi.epoch.epochset searchquery - return a search query for an ndi.document based on this element SQ = SEARCHQUERY(NDI_ELEMENT_OBJ, [EPOCHID]) Returns a search query for the fields of an NDI_DOCUMENT_OBJ of type 'element' with the corresponding 'name' and 'type' fields of the element NDI_ELEMENT_OBJ. t0_t1 - ** T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK TODO: this must be a bug, it's just self-referential underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.element/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.element.unique_id is inherited from superclass did.ido","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/epoch.m/","text":"CLASS ndi.epoch EPOCH Class to represent an epoch, with the following properties: 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. | 0 has a special meaning. It means that the epoch_number is unknown. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | An array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates the start and stop of the epoch for each | respective epoch_clock{}. The time units of t0_t1{i} match epoch_clock{i}. 'epochset_object' | The ndi.epochset object that has the epoch 'underlying_epochs' | An array of the ndi.epoch objects that comprise this epochs. 'underlying_files' | Special case. An ndi.file.navigator underlying epoch has files instead of an epochset_object. | These are a cell array of file names. These are empty for most epochset objects. Superclasses handle , matlab.mixin.SetGet Properties Property Description epoch_number epoch_id epoch_session_id epochprobemap epoch_clock t0_t1 epochset_object underlying_epochs underlying_files Methods Method Description addlistener addlistener Add listener for event. delete DELETE Delete a handle object. epoch create an ndi.epoch object eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. get GET Get MATLAB object properties. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. mustBeEpochOrEmpty validate that a value is either an ndi.epoch or is empty ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. set SET Set MATLAB object property values. Methods help addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.epoch, matlab.metadata.Property, events Help for ndi.epoch/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.EPOCH, NDI.EPOCH/ISVALID, CLEAR Help for ndi.epoch/delete is inherited from superclass handle epoch - create an ndi.epoch object OBJ = EPOCH(...) Create an ndi.epoch() object. The properties must be passed as name/value pairs. One may create an empty epoch providing no inputs; otherwise, one must specify all of the property values. 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. | 0 has a special meaning. It means that the epoch_number is unknown. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | An array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates the start and stop of the epoch | for each respective epoch_clock{}. The time units of t0_t1{i} match epoch_clock{i}. 'epochset_object' | The ndi.epochset object that has the epoch 'underlying_epochs' | An array of the ndi.epoch objects that comprise this epochs. 'underlying_files' | A file navigator object's underlying epoch objects is a file list as a cell array. Empty for most types. Documentation for ndi.epoch/epoch doc ndi.epoch eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.EPOCH, NDI.EPOCH/GE, NDI.EPOCH/GT, NDI.EPOCH/LE, NDI.EPOCH/LT, NDI.EPOCH/NE Help for ndi.epoch/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.EPOCH Help for ndi.epoch/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.epoch, ndi.epoch/findobj, dynamicprops, matlab.metadata.Property Help for ndi.epoch/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.EPOCH, NDI.EPOCH/EQ, NDI.EPOCH/GT, NDI.EPOCH/LE, NDI.EPOCH/LT, NDI.EPOCH/NE Help for ndi.epoch/ge is inherited from superclass handle get - GET Get MATLAB object properties. V = GET(H, 'PropertyName') returns the value of the specified property for the MATLAB object with handle H. If H is an array of handles, GET returns an M-by-1 cell array of values, where M is equal to length(H). If 'PropertyName' is replaced by a 1-by-N or N-by-1 cell array of strings containing property names, GET returns an M-by-N cell array of values. For non-scalar H, if 'PropertyName' is a dynamic property, GET returns a value only if the property exists in all objects of the array. V = GET(H, 'InexactPropertyName') returns the value of the specified property for the MATLAB object with handle H. GET matches partial and case-insensitive names that are not ambiguous. Inexact name matching applies only to class properties. Dynamic properties require exact name matches. V = GET(H) returns a structure in which each field name is the name of a user-gettable property of H and each field contains the value of that property. If H is non-scalar, GET returns a struct array with dimensions M-by-1, where M = numel(H). If H is non-scalar, GET does not return dynamic properties. GET(H) displays the names of all user-gettable properties and their current values for the MATLAB object with handle H. The class can override the GETDISP method to control how this information is displayed. H must be scalar. See also GET, ndi.epoch, ndi.epoch/GETDISP, HANDLE Help for ndi.epoch/get is inherited from superclass matlab.mixin.SetGet gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.EPOCH, NDI.EPOCH/EQ, NDI.EPOCH/GE, NDI.EPOCH/LE, NDI.EPOCH/LT, NDI.EPOCH/NE Help for ndi.epoch/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.EPOCH, NDI.EPOCH/DELETE Help for ndi.epoch/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.EPOCH, NDI.EPOCH/EQ, NDI.EPOCH/GE, NDI.EPOCH/GT, NDI.EPOCH/LT, NDI.EPOCH/NE Help for ndi.epoch/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.epoch, matlab.metadata.Property, events Help for ndi.epoch/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.EPOCH, NDI.EPOCH/EQ, NDI.EPOCH/GE, NDI.EPOCH/GT, NDI.EPOCH/LE, NDI.EPOCH/NE Help for ndi.epoch/lt is inherited from superclass handle mustBeEpochOrEmpty - validate that a value is either an ndi.epoch or is empty Syntax: ndi.epoch.mustBeEpochOrEmpty(value) Inputs: <value>, an input ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.EPOCH, NDI.EPOCH/EQ, NDI.EPOCH/GE, NDI.EPOCH/GT, NDI.EPOCH/LE, NDI.EPOCH/LT Help for ndi.epoch/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.EPOCH, NDI.EPOCH/ADDLISTENER, NDI.EPOCH/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.epoch/notify is inherited from superclass handle set - SET Set MATLAB object property values. SET(H,'PropertyName',PropertyValue) sets the value of the specified property for the MATLAB object with handle H. If H is an array of handles, the specified property's value is set for all objects in H. SET(H,'InexactPropertyName',PropertyValue) sets the value of the specified property for the MATLAB object with handle H. SET matches partial and case-insensitive names that are not ambiguous. Inexact name matching applies only to class properties. Dynamic properties require exact name matches. SET(H,'PropertyName1',Value1,'PropertyName2',Value2,...) sets multiple property values with a single statement. SET(H,pn,pv) sets the named properties specified in the cell array of strings pn to the corresponding values in the cell array pv for all objects specified in H. The cell array pn must be 1-by-N, but the cell array pv can be M-by-N where M is equal to length(H), so that each object will be updated with a different set of values for the list of property names contained in pn. Given S a structure whose field names are object property names, SET(H,S) sets the properties identified by each field name of S with the values contained in the structure. Note that it is permissible to use property/value string pairs, structures, and property/value cell array pairs in the same call to SET. A = SET(H, 'PropertyName') returns the possible values for the specified property of the object with handle H. The returned array is a cell array of possible value strings or an empty cell array if the property does not have a finite set of possible string values. SET(H,'PropertyName') displays the possible values for the specified property of object with handle H. A = SET(H) returns the names of the user-settable properties and their possible values for the object with handle H. H must be scalar. The return value is a structure whose field names are the names of the user-settable properties of H, and whose values are cell arrays of possible property values or empty cell arrays. SET(H) displays the names and possible values for all user-settable properties of scalar object H. The class can override the SETDISP method to control how this information is displayed. See also SET, ndi.epoch, ndi.epoch/SETDISP, HANDLE Help for ndi.epoch/set is inherited from superclass matlab.mixin.SetGet","title":"ndi.epoch"},{"location":"NDI-matlab/reference/%2Bndi/epoch.m/#class-ndiepoch","text":"EPOCH Class to represent an epoch, with the following properties: 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. | 0 has a special meaning. It means that the epoch_number is unknown. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | An array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates the start and stop of the epoch for each | respective epoch_clock{}. The time units of t0_t1{i} match epoch_clock{i}. 'epochset_object' | The ndi.epochset object that has the epoch 'underlying_epochs' | An array of the ndi.epoch objects that comprise this epochs. 'underlying_files' | Special case. An ndi.file.navigator underlying epoch has files instead of an epochset_object. | These are a cell array of file names. These are empty for most epochset objects.","title":"CLASS ndi.epoch"},{"location":"NDI-matlab/reference/%2Bndi/epoch.m/#superclasses","text":"handle , matlab.mixin.SetGet","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/epoch.m/#properties","text":"Property Description epoch_number epoch_id epoch_session_id epochprobemap epoch_clock t0_t1 epochset_object underlying_epochs underlying_files","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/epoch.m/#methods","text":"Method Description addlistener addlistener Add listener for event. delete DELETE Delete a handle object. epoch create an ndi.epoch object eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. get GET Get MATLAB object properties. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. mustBeEpochOrEmpty validate that a value is either an ndi.epoch or is empty ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. set SET Set MATLAB object property values.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/epoch.m/#methods-help","text":"addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.epoch, matlab.metadata.Property, events Help for ndi.epoch/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.EPOCH, NDI.EPOCH/ISVALID, CLEAR Help for ndi.epoch/delete is inherited from superclass handle epoch - create an ndi.epoch object OBJ = EPOCH(...) Create an ndi.epoch() object. The properties must be passed as name/value pairs. One may create an empty epoch providing no inputs; otherwise, one must specify all of the property values. 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. | 0 has a special meaning. It means that the epoch_number is unknown. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | An array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates the start and stop of the epoch | for each respective epoch_clock{}. The time units of t0_t1{i} match epoch_clock{i}. 'epochset_object' | The ndi.epochset object that has the epoch 'underlying_epochs' | An array of the ndi.epoch objects that comprise this epochs. 'underlying_files' | A file navigator object's underlying epoch objects is a file list as a cell array. Empty for most types. Documentation for ndi.epoch/epoch doc ndi.epoch eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.EPOCH, NDI.EPOCH/GE, NDI.EPOCH/GT, NDI.EPOCH/LE, NDI.EPOCH/LT, NDI.EPOCH/NE Help for ndi.epoch/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.EPOCH Help for ndi.epoch/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.epoch, ndi.epoch/findobj, dynamicprops, matlab.metadata.Property Help for ndi.epoch/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.EPOCH, NDI.EPOCH/EQ, NDI.EPOCH/GT, NDI.EPOCH/LE, NDI.EPOCH/LT, NDI.EPOCH/NE Help for ndi.epoch/ge is inherited from superclass handle get - GET Get MATLAB object properties. V = GET(H, 'PropertyName') returns the value of the specified property for the MATLAB object with handle H. If H is an array of handles, GET returns an M-by-1 cell array of values, where M is equal to length(H). If 'PropertyName' is replaced by a 1-by-N or N-by-1 cell array of strings containing property names, GET returns an M-by-N cell array of values. For non-scalar H, if 'PropertyName' is a dynamic property, GET returns a value only if the property exists in all objects of the array. V = GET(H, 'InexactPropertyName') returns the value of the specified property for the MATLAB object with handle H. GET matches partial and case-insensitive names that are not ambiguous. Inexact name matching applies only to class properties. Dynamic properties require exact name matches. V = GET(H) returns a structure in which each field name is the name of a user-gettable property of H and each field contains the value of that property. If H is non-scalar, GET returns a struct array with dimensions M-by-1, where M = numel(H). If H is non-scalar, GET does not return dynamic properties. GET(H) displays the names of all user-gettable properties and their current values for the MATLAB object with handle H. The class can override the GETDISP method to control how this information is displayed. H must be scalar. See also GET, ndi.epoch, ndi.epoch/GETDISP, HANDLE Help for ndi.epoch/get is inherited from superclass matlab.mixin.SetGet gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.EPOCH, NDI.EPOCH/EQ, NDI.EPOCH/GE, NDI.EPOCH/LE, NDI.EPOCH/LT, NDI.EPOCH/NE Help for ndi.epoch/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.EPOCH, NDI.EPOCH/DELETE Help for ndi.epoch/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.EPOCH, NDI.EPOCH/EQ, NDI.EPOCH/GE, NDI.EPOCH/GT, NDI.EPOCH/LT, NDI.EPOCH/NE Help for ndi.epoch/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.epoch, matlab.metadata.Property, events Help for ndi.epoch/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.EPOCH, NDI.EPOCH/EQ, NDI.EPOCH/GE, NDI.EPOCH/GT, NDI.EPOCH/LE, NDI.EPOCH/NE Help for ndi.epoch/lt is inherited from superclass handle mustBeEpochOrEmpty - validate that a value is either an ndi.epoch or is empty Syntax: ndi.epoch.mustBeEpochOrEmpty(value) Inputs: <value>, an input ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.EPOCH, NDI.EPOCH/EQ, NDI.EPOCH/GE, NDI.EPOCH/GT, NDI.EPOCH/LE, NDI.EPOCH/LT Help for ndi.epoch/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.EPOCH, NDI.EPOCH/ADDLISTENER, NDI.EPOCH/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.epoch/notify is inherited from superclass handle set - SET Set MATLAB object property values. SET(H,'PropertyName',PropertyValue) sets the value of the specified property for the MATLAB object with handle H. If H is an array of handles, the specified property's value is set for all objects in H. SET(H,'InexactPropertyName',PropertyValue) sets the value of the specified property for the MATLAB object with handle H. SET matches partial and case-insensitive names that are not ambiguous. Inexact name matching applies only to class properties. Dynamic properties require exact name matches. SET(H,'PropertyName1',Value1,'PropertyName2',Value2,...) sets multiple property values with a single statement. SET(H,pn,pv) sets the named properties specified in the cell array of strings pn to the corresponding values in the cell array pv for all objects specified in H. The cell array pn must be 1-by-N, but the cell array pv can be M-by-N where M is equal to length(H), so that each object will be updated with a different set of values for the list of property names contained in pn. Given S a structure whose field names are object property names, SET(H,S) sets the properties identified by each field name of S with the values contained in the structure. Note that it is permissible to use property/value string pairs, structures, and property/value cell array pairs in the same call to SET. A = SET(H, 'PropertyName') returns the possible values for the specified property of the object with handle H. The returned array is a cell array of possible value strings or an empty cell array if the property does not have a finite set of possible string values. SET(H,'PropertyName') displays the possible values for the specified property of object with handle H. A = SET(H) returns the names of the user-settable properties and their possible values for the object with handle H. H must be scalar. The return value is a structure whose field names are the names of the user-settable properties of H, and whose values are cell arrays of possible property values or empty cell arrays. SET(H) displays the names and possible values for all user-settable properties of scalar object H. The class can override the SETDISP method to control how this information is displayed. See also SET, ndi.epoch, ndi.epoch/SETDISP, HANDLE Help for ndi.epoch/set is inherited from superclass matlab.mixin.SetGet","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/filesep.m/","text":"ndi.filesep ndi.filesep The file separator for NDI documents The ndi.filesep is '/', which may differ from the local user's machine path separator.","title":"ndi.filesep"},{"location":"NDI-matlab/reference/%2Bndi/filesep.m/#ndifilesep","text":"ndi.filesep The file separator for NDI documents The ndi.filesep is '/', which may differ from the local user's machine path separator.","title":"ndi.filesep"},{"location":"NDI-matlab/reference/%2Bndi/globals.m/","text":"ndi.globals NDI_GLOBALS - define global variables for NDI ndi.globals Script that defines some global variables for the NDI package The following variables are defined: Name: | Description ------------------------------------------------------------------------- ndi_globals.path.path | The path of the NDI distribution on this machine. | (Initialized by ndi_Init.m) ndi_globals.path.commonpath | The path to the package ndi_common | (Initialized by ndi_Init.m) ndi_globals.path.documentpath | The path of the NDI document definitions | (Initialized by ndi_Init.m) ndi_globals.path. ... | The path of the NDI document validation schema documentschemapath | (Initialized by ndi_Init.m) ndi_globals.path.exampleexperpath| The path to the NDI example sessions ndi_globals.path.preferences | A path to a directory of preferences files ndi_globals.path.filecachepath | A path where files may be cached (not deleted every time) ndi_globals.path.temppath | The path to a directory that may be used for | temporary files (Initialized by ndi_Init.m) ndi_globals.path.testpath | A path to a safe place to run test code ndi_globals.path.calcdoc | A cell array of paths to NDI calculator document definitions ndi_globals.path.calcdocschema | A cell array of paths to NDI calculator document schemas ndi_globals.probetype2object | A structure with fields 'type' and 'classname' | that describes the default ndi.probe classname | to use to create a probe for a given type. ndi_globals.databasehierarchy | A structure that describes the order in which to | attempt to open databases in the session path | ndi_globals.debug | A structure with preferences for debugging ndi_globals.log | An object that manages writing system, error, debugging logs (vlt.app.log)","title":"ndi.globals"},{"location":"NDI-matlab/reference/%2Bndi/globals.m/#ndiglobals","text":"NDI_GLOBALS - define global variables for NDI ndi.globals Script that defines some global variables for the NDI package The following variables are defined: Name: | Description ------------------------------------------------------------------------- ndi_globals.path.path | The path of the NDI distribution on this machine. | (Initialized by ndi_Init.m) ndi_globals.path.commonpath | The path to the package ndi_common | (Initialized by ndi_Init.m) ndi_globals.path.documentpath | The path of the NDI document definitions | (Initialized by ndi_Init.m) ndi_globals.path. ... | The path of the NDI document validation schema documentschemapath | (Initialized by ndi_Init.m) ndi_globals.path.exampleexperpath| The path to the NDI example sessions ndi_globals.path.preferences | A path to a directory of preferences files ndi_globals.path.filecachepath | A path where files may be cached (not deleted every time) ndi_globals.path.temppath | The path to a directory that may be used for | temporary files (Initialized by ndi_Init.m) ndi_globals.path.testpath | A path to a safe place to run test code ndi_globals.path.calcdoc | A cell array of paths to NDI calculator document definitions ndi_globals.path.calcdocschema | A cell array of paths to NDI calculator document schemas ndi_globals.probetype2object | A structure with fields 'type' and 'classname' | that describes the default ndi.probe classname | to use to create a probe for a given type. ndi_globals.databasehierarchy | A structure that describes the order in which to | attempt to open databases in the session path | ndi_globals.debug | A structure with preferences for debugging ndi_globals.log | An object that manages writing system, error, debugging logs (vlt.app.log)","title":"ndi.globals"},{"location":"NDI-matlab/reference/%2Bndi/ido.m/","text":"CLASS ndi.ido ndi.ido - identifier object class for ndi This class creates and retrieves unique identifiers. The identifier is a hexadecimal string based on both the current date/time and a random number. When identifiers are sorted in alphabetical order, they are also sorted in the order of time of creation. **Example**: i = ndi.ido(); id = i.id(), % view the id that was created Superclasses did.ido Properties Property Description identifier Methods Method Description id return the identifier of an DID.IDO object ido identifier object class for ndi isvalid is a unique ID number valid? unique_id Generate a unique ID number for DID databases (Static method) Methods help id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.ido/id is inherited from superclass did.ido ido - identifier object class for ndi This class creates and retrieves unique identifiers. The identifier is a hexadecimal string based on both the current date/time and a random number. When identifiers are sorted in alphabetical order, they are also sorted in the order of time of creation. **Example**: i = ndi.ido(); id = i.id(), % view the id that was created Documentation for ndi.ido/ido doc ndi.ido isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.ido.isvalid is inherited from superclass did.ido unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.ido.unique_id is inherited from superclass did.ido","title":"ndi.ido"},{"location":"NDI-matlab/reference/%2Bndi/ido.m/#class-ndiido","text":"ndi.ido - identifier object class for ndi This class creates and retrieves unique identifiers. The identifier is a hexadecimal string based on both the current date/time and a random number. When identifiers are sorted in alphabetical order, they are also sorted in the order of time of creation. **Example**: i = ndi.ido(); id = i.id(), % view the id that was created","title":"CLASS ndi.ido"},{"location":"NDI-matlab/reference/%2Bndi/ido.m/#superclasses","text":"did.ido","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/ido.m/#properties","text":"Property Description identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/ido.m/#methods","text":"Method Description id return the identifier of an DID.IDO object ido identifier object class for ndi isvalid is a unique ID number valid? unique_id Generate a unique ID number for DID databases (Static method)","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/ido.m/#methods-help","text":"id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.ido/id is inherited from superclass did.ido ido - identifier object class for ndi This class creates and retrieves unique identifiers. The identifier is a hexadecimal string based on both the current date/time and a random number. When identifiers are sorted in alphabetical order, they are also sorted in the order of time of creation. **Example**: i = ndi.ido(); id = i.id(), % view the id that was created Documentation for ndi.ido/ido doc ndi.ido isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.ido.isvalid is inherited from superclass did.ido unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.ido.unique_id is inherited from superclass did.ido","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/neuron.m/","text":"CLASS ndi.neuron ndi.neuron - an ndi.element that contains data from a neuron An ndi.neuron object is simply an ndi.element.timeseries object that has a different type so that it can be searched easily. Superclasses ndi.element.timeseries , ndi.element , ndi.ido , did.ido , ndi.epoch.epochset , ndi.documentservice , matlab.mixin.Heterogeneous , ndi.time.timeseries Properties Property Description session name type reference underlying_element direct subject_id dependencies identifier Methods Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.element cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochsetname the name of the ndi.element object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID getcache return the NDI_CACHE and key for ndi.element getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version neuron creates an ndi.neuron object newdocument Todo: need docs here numepochs Number of epochs of ndi.epoch.epochset readtimeseries read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery Todo: need docs here t0_t1 times2samples convert from the timeseries time to sample numbers underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method) Methods help addepoch - add an epoch to the ndi.element [NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_TIMESERIES_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, TIMEPOINTS, DATAPOINTS) Registers the data for an epoch with the NDI_ELEMENT_OBJ. Inputs: NDI_ELEMENT_OBJ: The ndi.element object to modify EPOCHID: The name of the epoch to add; should match the name of an epoch from the probe EPOCHCLOCK: The epoch clock; must be a single clock type that matches one of the clock types of the probe T0_T1: The starting time and ending time of the existence of information about the ELEMENT on the probe, in units of the epock clock TIMEPOINTS: the time points to be added to this epoch; can also be the string 'probe' which means the points are read directly from the probe (must be Tx1). Timepoints must be in the units of the EPOCHCLOCK. DATAPOINTS: the data points that accompany each timepoint (must be TxXxY...), or can be 'probe' to read from the probe Outputs: If a second output is requested in EPOCHDOC, then the DOC is NOT added to the database Help for ndi.neuron/addepoch is inherited from superclass ndi.element.timeseries buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.neuron/EPOCHNODES Help for ndi.neuron/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - build the epoch table for an ndi.element ET = BUILDEPOCHTABLE(NDI_ELEMENT_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch (may change) 'epoch_id' | The epoch ID code (will never change once established) | This uniquely specifies the epoch (with the session id). 'epoch_session_id' | Session of the epoch 'epochprobemap' | The epochprobemap object from each epoch 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', and 'epoch_id' Help for ndi.neuron/buildepochtable is inherited from superclass ndi.element cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.neuron.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.neuron/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.neuron/cached_epochtable is inherited from superclass ndi.epoch.epochset doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then empty is returned. Help for ndi.neuron/doc_unique_id is inherited from superclass ndi.element elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ) Returns the name as a human-readable string. For ndi.element objects, this is the string 'element: ' followed by its name Help for ndi.neuron/elementstring is inherited from superclass ndi.element epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.neuron/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_ELEMENT_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch. The ndi.element class always returns the clock type(s) of the element it is based on Help for ndi.neuron/epochclock is inherited from superclass ndi.element epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.neuron/epochgraph is inherited from superclass ndi.epoch.epochset epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string. The abstract class just queries the EPOCHTABLE. Most classes that manage epochs themselves (ndi.file.navigator, ndi.daq.system) will override this method. Help for ndi.neuron/epochid is inherited from superclass ndi.epoch.epochset epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.neuron/epochnodes is inherited from superclass ndi.epoch.epochset epochsetname - the name of the ndi.element object, for EPOCHNODES NAME = EPOCHSETNAME(NDI_ELEMENT_OBJ) Returns the object name that is used when creating epoch nodes. For ndi.element objects, this is ndi.element/ELEMENTSTRING. Help for ndi.neuron/epochsetname is inherited from superclass ndi.element epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.neuron/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.neuron/epochtableentry is inherited from superclass ndi.epoch.epochset getcache - return the NDI_CACHE and key for ndi.element [CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ) Returns the CACHE and KEY for the ndi.element object. The CACHE is returned from the associated session. The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT. See also: ndi.file.navigator Help for ndi.neuron/getcache is inherited from superclass ndi.element getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.neuron/getepocharray is inherited from superclass ndi.epoch.epochset ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.neuron.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then an error is returned. Help for ndi.neuron/id is inherited from superclass ndi.element issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_ELEMENT_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.element objects, this returns 0 so that underlying ndi.probe epochs are added. Help for ndi.neuron/issyncgraphroot is inherited from superclass ndi.element isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.neuron.isvalid is inherited from superclass did.ido load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ) Loads the ndi.document that is based on the ndi.element object and any associated epoch documents. Help for ndi.neuron/load_all_element_docs is inherited from superclass ndi.element load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ) Load an ndi.document that is based on the ndi.element object. Returns empty if there is no such document. Help for ndi.neuron/load_element_doc is inherited from superclass ndi.element loadaddedepochs - load the added epochs from an ndi.element [ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ) Load the EPOCHTABLE that consists of added/registered epochs that provide information about the ndi.element. Help for ndi.neuron/loadaddedepochs is inherited from superclass ndi.element matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.neuron/matchedepochtable is inherited from superclass ndi.epoch.epochset neuron - creates an ndi.neuron object NDI_NEURON_OBJ = ndi.neuron(...) This function takes the same input arguments as ndi.element.timeseries. See ndi.element.timeseries/timeseries Documentation for ndi.neuron/neuron doc ndi.neuron newdocument - Todo: need docs here Help for ndi.neuron/newdocument is inherited from superclass ndi.element.timeseries numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.neuron/numepochs is inherited from superclass ndi.epoch.epochset readtimeseries - read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch [DATA, T, TIMEREF] = READTIMESERIES(NDI_ELEMENT_TIMESERIES_OBJ, TIMEREF_OR_EPOCH, T0, T1) Reads timeseries data from an ndi.element.timeseries object. The DATA and time information T that are returned depend on the the specific subclass of ndi.element.timeseries that is called (see READTIMESERIESEPOCH). In the base class, this function merely calls the element's probe's READTIMESERIES function. TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the time reference for T0, T1, or it can be a single number, which will indicate the data are to be read from that epoch. DATA is the data for the probe. T is a time structure, in units of TIMEREF if it is an ndi.time.timereference object or in units of the epoch if an epoch is passed. The TIMEREF is returned. Help for ndi.neuron/readtimeseries is inherited from superclass ndi.element.timeseries resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.neuron/EPOCHTABLE Help for ndi.neuron/resetepochtable is inherited from superclass ndi.epoch.epochset samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLERATE(NDI_TIMESERIES_OBJ, EPOCH) Returns the sampling rate of a given ndi.time.timeseries object for the epoch EPOCH. EPOCH can be specified as an index or EPOCH_ID. If NDI_TIMESERIES_OBJ is not regularly sampled, then -1 is returned. Help for ndi.neuron/samplerate is inherited from superclass ndi.time.timeseries samples2times - convert from the timeseries time to sample numbers SAMPLES = SAMPLES2TIMES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. TODO: convert times to dev_local_clock Help for ndi.neuron/samples2times is inherited from superclass ndi.time.timeseries searchquery - Todo: need docs here Help for ndi.neuron/searchquery is inherited from superclass ndi.element.timeseries t0_t1 - ** T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK TODO: this must be a bug, it's just self-referential Help for ndi.neuron/t0_t1 is inherited from superclass ndi.element times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. Help for ndi.neuron/times2samples is inherited from superclass ndi.time.timeseries underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.neuron/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.neuron.unique_id is inherited from superclass did.ido","title":"ndi.neuron"},{"location":"NDI-matlab/reference/%2Bndi/neuron.m/#class-ndineuron","text":"ndi.neuron - an ndi.element that contains data from a neuron An ndi.neuron object is simply an ndi.element.timeseries object that has a different type so that it can be searched easily.","title":"CLASS ndi.neuron"},{"location":"NDI-matlab/reference/%2Bndi/neuron.m/#superclasses","text":"ndi.element.timeseries , ndi.element , ndi.ido , did.ido , ndi.epoch.epochset , ndi.documentservice , matlab.mixin.Heterogeneous , ndi.time.timeseries","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/neuron.m/#properties","text":"Property Description session name type reference underlying_element direct subject_id dependencies identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/neuron.m/#methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.element cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochsetname the name of the ndi.element object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID getcache return the NDI_CACHE and key for ndi.element getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version neuron creates an ndi.neuron object newdocument Todo: need docs here numepochs Number of epochs of ndi.epoch.epochset readtimeseries read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery Todo: need docs here t0_t1 times2samples convert from the timeseries time to sample numbers underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method)","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/neuron.m/#methods-help","text":"addepoch - add an epoch to the ndi.element [NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_TIMESERIES_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, TIMEPOINTS, DATAPOINTS) Registers the data for an epoch with the NDI_ELEMENT_OBJ. Inputs: NDI_ELEMENT_OBJ: The ndi.element object to modify EPOCHID: The name of the epoch to add; should match the name of an epoch from the probe EPOCHCLOCK: The epoch clock; must be a single clock type that matches one of the clock types of the probe T0_T1: The starting time and ending time of the existence of information about the ELEMENT on the probe, in units of the epock clock TIMEPOINTS: the time points to be added to this epoch; can also be the string 'probe' which means the points are read directly from the probe (must be Tx1). Timepoints must be in the units of the EPOCHCLOCK. DATAPOINTS: the data points that accompany each timepoint (must be TxXxY...), or can be 'probe' to read from the probe Outputs: If a second output is requested in EPOCHDOC, then the DOC is NOT added to the database Help for ndi.neuron/addepoch is inherited from superclass ndi.element.timeseries buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.neuron/EPOCHNODES Help for ndi.neuron/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - build the epoch table for an ndi.element ET = BUILDEPOCHTABLE(NDI_ELEMENT_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch (may change) 'epoch_id' | The epoch ID code (will never change once established) | This uniquely specifies the epoch (with the session id). 'epoch_session_id' | Session of the epoch 'epochprobemap' | The epochprobemap object from each epoch 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', and 'epoch_id' Help for ndi.neuron/buildepochtable is inherited from superclass ndi.element cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.neuron.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.neuron/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.neuron/cached_epochtable is inherited from superclass ndi.epoch.epochset doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then empty is returned. Help for ndi.neuron/doc_unique_id is inherited from superclass ndi.element elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ) Returns the name as a human-readable string. For ndi.element objects, this is the string 'element: ' followed by its name Help for ndi.neuron/elementstring is inherited from superclass ndi.element epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.neuron/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_ELEMENT_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch. The ndi.element class always returns the clock type(s) of the element it is based on Help for ndi.neuron/epochclock is inherited from superclass ndi.element epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.neuron/epochgraph is inherited from superclass ndi.epoch.epochset epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string. The abstract class just queries the EPOCHTABLE. Most classes that manage epochs themselves (ndi.file.navigator, ndi.daq.system) will override this method. Help for ndi.neuron/epochid is inherited from superclass ndi.epoch.epochset epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.neuron/epochnodes is inherited from superclass ndi.epoch.epochset epochsetname - the name of the ndi.element object, for EPOCHNODES NAME = EPOCHSETNAME(NDI_ELEMENT_OBJ) Returns the object name that is used when creating epoch nodes. For ndi.element objects, this is ndi.element/ELEMENTSTRING. Help for ndi.neuron/epochsetname is inherited from superclass ndi.element epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.neuron/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.neuron/epochtableentry is inherited from superclass ndi.epoch.epochset getcache - return the NDI_CACHE and key for ndi.element [CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ) Returns the CACHE and KEY for the ndi.element object. The CACHE is returned from the associated session. The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT. See also: ndi.file.navigator Help for ndi.neuron/getcache is inherited from superclass ndi.element getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.neuron/getepocharray is inherited from superclass ndi.epoch.epochset ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.neuron.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then an error is returned. Help for ndi.neuron/id is inherited from superclass ndi.element issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_ELEMENT_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.element objects, this returns 0 so that underlying ndi.probe epochs are added. Help for ndi.neuron/issyncgraphroot is inherited from superclass ndi.element isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.neuron.isvalid is inherited from superclass did.ido load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ) Loads the ndi.document that is based on the ndi.element object and any associated epoch documents. Help for ndi.neuron/load_all_element_docs is inherited from superclass ndi.element load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ) Load an ndi.document that is based on the ndi.element object. Returns empty if there is no such document. Help for ndi.neuron/load_element_doc is inherited from superclass ndi.element loadaddedepochs - load the added epochs from an ndi.element [ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ) Load the EPOCHTABLE that consists of added/registered epochs that provide information about the ndi.element. Help for ndi.neuron/loadaddedepochs is inherited from superclass ndi.element matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.neuron/matchedepochtable is inherited from superclass ndi.epoch.epochset neuron - creates an ndi.neuron object NDI_NEURON_OBJ = ndi.neuron(...) This function takes the same input arguments as ndi.element.timeseries. See ndi.element.timeseries/timeseries Documentation for ndi.neuron/neuron doc ndi.neuron newdocument - Todo: need docs here Help for ndi.neuron/newdocument is inherited from superclass ndi.element.timeseries numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.neuron/numepochs is inherited from superclass ndi.epoch.epochset readtimeseries - read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch [DATA, T, TIMEREF] = READTIMESERIES(NDI_ELEMENT_TIMESERIES_OBJ, TIMEREF_OR_EPOCH, T0, T1) Reads timeseries data from an ndi.element.timeseries object. The DATA and time information T that are returned depend on the the specific subclass of ndi.element.timeseries that is called (see READTIMESERIESEPOCH). In the base class, this function merely calls the element's probe's READTIMESERIES function. TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the time reference for T0, T1, or it can be a single number, which will indicate the data are to be read from that epoch. DATA is the data for the probe. T is a time structure, in units of TIMEREF if it is an ndi.time.timereference object or in units of the epoch if an epoch is passed. The TIMEREF is returned. Help for ndi.neuron/readtimeseries is inherited from superclass ndi.element.timeseries resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.neuron/EPOCHTABLE Help for ndi.neuron/resetepochtable is inherited from superclass ndi.epoch.epochset samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLERATE(NDI_TIMESERIES_OBJ, EPOCH) Returns the sampling rate of a given ndi.time.timeseries object for the epoch EPOCH. EPOCH can be specified as an index or EPOCH_ID. If NDI_TIMESERIES_OBJ is not regularly sampled, then -1 is returned. Help for ndi.neuron/samplerate is inherited from superclass ndi.time.timeseries samples2times - convert from the timeseries time to sample numbers SAMPLES = SAMPLES2TIMES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. TODO: convert times to dev_local_clock Help for ndi.neuron/samples2times is inherited from superclass ndi.time.timeseries searchquery - Todo: need docs here Help for ndi.neuron/searchquery is inherited from superclass ndi.element.timeseries t0_t1 - ** T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK TODO: this must be a bug, it's just self-referential Help for ndi.neuron/t0_t1 is inherited from superclass ndi.element times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. Help for ndi.neuron/times2samples is inherited from superclass ndi.time.timeseries underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.neuron/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.neuron.unique_id is inherited from superclass did.ido","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/pipeline.m/","text":"CLASS ndi.pipeline TODO 1. Get a calculation type list 2. Pipeline edit & run button (edit: ndi.calculator.graphical_edit_calculator, waiting for updates) Superclasses none Properties none Methods Method Description calculationsToChar edit create and control a GUI to graphically edit a PIPELINE EDITOR instance getCalcFromPipeline getPipelines pipeline TODO pipelineListToChar setDefaultCalc Methods help calculationsToChar - ** ndi.pipeline.calculationsToChar - read names of a CALCLIST as a list of strings CALCLISTCHAR = ndi.pipeline.calculationsToChar(CALCLIST) Input: CALCLIST: a list of calculators Output: CALCLISTCHAR: a list of strings, representing names of calculators in CALCLIST edit - create and control a GUI to graphically edit a PIPELINE EDITOR instance ndi.pipeline.edit (...) Creates and controls a graphical user interface for creating an instance of an pipeline.editor object. Usage by the user: S = []; % use an empty session for now ndi.pipeline.edit('command','new','pipelinePath',fullfile(userpath,'tools','NDI-matlab','+ndi','+test','+pipeline','test_pipeline'),'session',S); getCalcFromPipeline - ** ndi.pipeline.getCalcFromPipeline - read a CALCLIST from PIPELINELIST CALCLIST = ndi.pipeline.getCalcFromPipeline(PIPELINELIST, PIPELINE_NAME) Input: PIPELINELIST: a list of pipelines PIPELINE_NAME: a name string of a specific pipeline in this pipeline list Output: CALCLIST: a list of calculators getPipelines - ** ndi.pipeline.getPipelines - read a PIPELINE_LIST from directory READ_DIR PIPELINELIST = ndi.pipeline.getPipelines(READ_DIR) Input: READ_DIR: a directory where the pipelines are stored as a PIPELINE_LIST Output: PIPELINELIST: a list of pipelines pipeline - TODO 1. Get a calculation type list 2. Pipeline edit & run button (edit: ndi.calculator.graphical_edit_calculator, waiting for updates) Documentation for ndi.pipeline/pipeline doc ndi.pipeline pipelineListToChar - ** ndi.pipeline.pipelineListToChar - read names of a PIPELINELIST as a list of strings PIPELINELISTCHAR = ndi.pipeline.pipelineListToChar(PIPELINELIST) Input: PIPELINELIST: a list of pipelines Output: PIPELINELISTCHAR: a list of strings, representing names of pipelines in PIPELINELIST setDefaultCalc - ** ndi.pipeline.setDefaultCalc - set default parameters for a new calculator NEWCALC = ndi.pipeline.setDefaultCalc(CALCULATOR, NAME) Input CALCULATOR: a type of calculator (EXAMPLE: ndi.calc.stimulus.tuningcurve) NAME: a name string of calculator Output: NEWCALC: a new calculator created by this function","title":"ndi.pipeline"},{"location":"NDI-matlab/reference/%2Bndi/pipeline.m/#class-ndipipeline","text":"TODO 1. Get a calculation type list 2. Pipeline edit & run button (edit: ndi.calculator.graphical_edit_calculator, waiting for updates)","title":"CLASS ndi.pipeline"},{"location":"NDI-matlab/reference/%2Bndi/pipeline.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/pipeline.m/#properties","text":"none","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/pipeline.m/#methods","text":"Method Description calculationsToChar edit create and control a GUI to graphically edit a PIPELINE EDITOR instance getCalcFromPipeline getPipelines pipeline TODO pipelineListToChar setDefaultCalc","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/pipeline.m/#methods-help","text":"calculationsToChar - ** ndi.pipeline.calculationsToChar - read names of a CALCLIST as a list of strings CALCLISTCHAR = ndi.pipeline.calculationsToChar(CALCLIST) Input: CALCLIST: a list of calculators Output: CALCLISTCHAR: a list of strings, representing names of calculators in CALCLIST edit - create and control a GUI to graphically edit a PIPELINE EDITOR instance ndi.pipeline.edit (...) Creates and controls a graphical user interface for creating an instance of an pipeline.editor object. Usage by the user: S = []; % use an empty session for now ndi.pipeline.edit('command','new','pipelinePath',fullfile(userpath,'tools','NDI-matlab','+ndi','+test','+pipeline','test_pipeline'),'session',S); getCalcFromPipeline - ** ndi.pipeline.getCalcFromPipeline - read a CALCLIST from PIPELINELIST CALCLIST = ndi.pipeline.getCalcFromPipeline(PIPELINELIST, PIPELINE_NAME) Input: PIPELINELIST: a list of pipelines PIPELINE_NAME: a name string of a specific pipeline in this pipeline list Output: CALCLIST: a list of calculators getPipelines - ** ndi.pipeline.getPipelines - read a PIPELINE_LIST from directory READ_DIR PIPELINELIST = ndi.pipeline.getPipelines(READ_DIR) Input: READ_DIR: a directory where the pipelines are stored as a PIPELINE_LIST Output: PIPELINELIST: a list of pipelines pipeline - TODO 1. Get a calculation type list 2. Pipeline edit & run button (edit: ndi.calculator.graphical_edit_calculator, waiting for updates) Documentation for ndi.pipeline/pipeline doc ndi.pipeline pipelineListToChar - ** ndi.pipeline.pipelineListToChar - read names of a PIPELINELIST as a list of strings PIPELINELISTCHAR = ndi.pipeline.pipelineListToChar(PIPELINELIST) Input: PIPELINELIST: a list of pipelines Output: PIPELINELISTCHAR: a list of strings, representing names of pipelines in PIPELINELIST setDefaultCalc - ** ndi.pipeline.setDefaultCalc - set default parameters for a new calculator NEWCALC = ndi.pipeline.setDefaultCalc(CALCULATOR, NAME) Input CALCULATOR: a type of calculator (EXAMPLE: ndi.calc.stimulus.tuningcurve) NAME: a name string of calculator Output: NEWCALC: a new calculator created by this function","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/probe.m/","text":"CLASS ndi.probe ndi.probe - the base class for PROBES -- measurement or stimulation devices In NDI, a PROBE is an instance of an instrument that can be used to MEASURE or to STIMULATE. Typically, a probe is associated with an ndi.daq.system that performs data acquisition or even control of a stimulator. A probe is uniquely identified by 3 fields and an session: session- the session where the probe is used name - the name of the probe reference - the reference number of the probe type - the type of probe (see type ndi.fun.probetype2objectinit) Examples: A multichannel extracellular electrode might be named 'extra', have a reference of 1, and a type of 'n-trode'. If the electrode is moved, one should change the name or the reference to indicate that the data should not be attempted to be combined across the two positions. One might change the reference number to 2. How to make a probe: (Talk about epochprobemap records of devices, probes are created from these elements.) Superclasses ndi.element , ndi.ido , did.ido , ndi.epoch.epochset , ndi.documentservice , matlab.mixin.Heterogeneous Properties Property Description session name type reference underlying_element direct subject_id dependencies identifier Methods Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version newdocument return a new database document of type ndi.document based on a element numepochs Number of epochs of ndi.epoch.epochset probe create a new ndi.probe object probestring Produce a human-readable probe string resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery return a search query for an ndi.document based on this element t0_t1 underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method) Methods help addepoch - add an epoch to the ndi.element [NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, [ADD_TO_DB]) Registers the data for an epoch with the NDI_ELEMENT_OBJ. Inputs: NDI_ELEMENT_OBJ: The ndi.element object to modify EPOCHID: The name of the epoch to add; should match the name of an epoch from the probe EPOCHCLOCK: The epoch clock; must be a single clock type that matches one of the clock types of the probe T0_T1: The starting time and ending time of the existence of information about the ELEMENT on the probe, in units of the epock clock ADD_TO_DB: 0/1 Should we actually add the epoch document to the database? Default 0. Help for ndi.probe/addepoch is inherited from superclass ndi.element buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.probe/EPOCHNODES Help for ndi.probe/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - build the epoch table for an ndi.probe. * ET = BUILDEPOCHTABLE(NDI_PROBE_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch (may change) 'epoch_id' | The epoch ID code (will never change once established) | This uniquely specifies the epoch. 'epoch_session_id' | The ID of the session 'epochprobemap' | The epochprobemap object from each epoch 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', and 'epoch_id' cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.probe.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.probe/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.probe/cached_epochtable is inherited from superclass ndi.epoch.epochset doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then empty is returned. Help for ndi.probe/doc_unique_id is inherited from superclass ndi.element elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ) Returns the name as a human-readable string. For ndi.element objects, this is the string 'element: ' followed by its name Help for ndi.probe/elementstring is inherited from superclass ndi.element epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.probe/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_PROBE_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch. The ndi.probe class always returns the clock type(s) of the device it is based on epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.probe/epochgraph is inherited from superclass ndi.epoch.epochset epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string. The abstract class just queries the EPOCHTABLE. Most classes that manage epochs themselves (ndi.file.navigator, ndi.daq.system) will override this method. Help for ndi.probe/epochid is inherited from superclass ndi.epoch.epochset epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.probe/epochnodes is inherited from superclass ndi.epoch.epochset epochprobemapmatch - does an epochprobemap record match our probe? B = EPOCHPROBEMAPMATCH(NDI_PROBE_OBJ, EPOCHPROBEMAP) Returns 1 if the ndi.epoch.epochprobemap object EPOCHPROBEMAP is a match for the NDI_PROBE_OBJ probe and 0 otherwise. epochsetname - the name of the ndi.probe. object, for EPOCHNODES* NAME = EPOCHSETNAME(NDI_PROBE_OBJ) Returns the object name that is used when creating epoch nodes. For ndi.probe objects, this is the string 'probe: ' followed by PROBESTRING(NDI_PROBE_OBJ). epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.probe/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.probe/epochtableentry is inherited from superclass ndi.epoch.epochset eq - are 2 ndi.probe objects equal? Returns 1 if the objects share an object class, session, and probe string. getcache - return the NDI_CACHE and key for ndi.element [CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ) Returns the CACHE and KEY for the ndi.element object. The CACHE is returned from the associated session. The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT. See also: ndi.file.navigator Help for ndi.probe/getcache is inherited from superclass ndi.element getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe. * [DEV, DEVNAME, DEVEPOCH, CHANNELTYPE, CHANNELLIST] = GETCHANNELDEVINFO(NDI_PROBE_OBJ, EPOCH_NUMBER_OR_ID) Given an ndi.probe.* object and an EPOCH number, this function returns the corresponding channel and device info. Suppose there are C channels corresponding to a probe. Then the outputs are DEV is a 1xC cell array of ndi.daq.system objects for each channel DEVNAME is a 1xC cell array of the names of each device in DEV DEVEPOCH is a 1xC array with the epoch id of the probe's EPOCH on each device CHANNELTYPE is a cell array of the type of each channel CHANNELLIST is the channel number of each channel. getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.probe/getepocharray is inherited from superclass ndi.epoch.epochset ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.probe.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then an error is returned. Help for ndi.probe/id is inherited from superclass ndi.element issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset and ndi.probe.* this returns 0 so that the underlying ndi.daq.system epochs are added. isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.probe.isvalid is inherited from superclass did.ido load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ) Loads the ndi.document that is based on the ndi.element object and any associated epoch documents. Help for ndi.probe/load_all_element_docs is inherited from superclass ndi.element load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ) Load an ndi.document that is based on the ndi.element object. Returns empty if there is no such document. Help for ndi.probe/load_element_doc is inherited from superclass ndi.element loadaddedepochs - load the added epochs from an ndi.element [ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ) Load the EPOCHTABLE that consists of added/registered epochs that provide information about the ndi.element. Help for ndi.probe/loadaddedepochs is inherited from superclass ndi.element matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.probe/matchedepochtable is inherited from superclass ndi.epoch.epochset newdocument - return a new database document of type ndi.document based on a element NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_ELEMENT_OBJ) Fill out the fields of an NDI_DOCUMENT_OBJ of type 'element' with the corresponding 'name' and 'type' fields of the element NDI_ELEMENT_OBJ and the 'name', 'type', and 'reference' fields of its underlying NDI_PROBE_OBJ. If EPOCHID is provided, then an EPOCHID field is filled out as well in accordance to 'epochid'. When the document is created, it is automatically added to the session. Help for ndi.probe/newdocument is inherited from superclass ndi.element numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.probe/numepochs is inherited from superclass ndi.epoch.epochset probe - create a new ndi.probe object OBJ = ndi.probe(SESSION, NAME, REFERENCE, TYPE, SUBJECT_ID) or OBJ = ndi.probe(SESSION, NDI_DOCUMENT_OBJ) Creates an ndi.probe associated with an ndi.session object SESSION and with name NAME (a string that must start with a letter and contain no white space), reference number equal to REFERENCE (a non-negative integer), the TYPE of the probe (a string that must start with a letter and contain no white space). ndi.probe is a essentially an abstract class, and a specific implementation must be called. Documentation for ndi.probe/probe doc ndi.probe probestring - Produce a human-readable probe string PROBESTR = PROBESTRING(NDI_PROBE_OBJ) Returns the name and reference of a probe as a human-readable string. This is simply PROBESTR = [NDI_PROBE_OBJ.name ' _ ' in2str(NDI_PROBE_OBJ.reference)] resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.probe/EPOCHTABLE Help for ndi.probe/resetepochtable is inherited from superclass ndi.epoch.epochset searchquery - return a search query for an ndi.document based on this element SQ = SEARCHQUERY(NDI_ELEMENT_OBJ, [EPOCHID]) Returns a search query for the fields of an NDI_DOCUMENT_OBJ of type 'element' with the corresponding 'name' and 'type' fields of the element NDI_ELEMENT_OBJ. Help for ndi.probe/searchquery is inherited from superclass ndi.element t0_t1 - ** T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK TODO: this must be a bug, it's just self-referential Help for ndi.probe/t0_t1 is inherited from superclass ndi.element underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.probe/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.probe.unique_id is inherited from superclass did.ido","title":"ndi.probe"},{"location":"NDI-matlab/reference/%2Bndi/probe.m/#class-ndiprobe","text":"ndi.probe - the base class for PROBES -- measurement or stimulation devices In NDI, a PROBE is an instance of an instrument that can be used to MEASURE or to STIMULATE. Typically, a probe is associated with an ndi.daq.system that performs data acquisition or even control of a stimulator. A probe is uniquely identified by 3 fields and an session: session- the session where the probe is used name - the name of the probe reference - the reference number of the probe type - the type of probe (see type ndi.fun.probetype2objectinit) Examples: A multichannel extracellular electrode might be named 'extra', have a reference of 1, and a type of 'n-trode'. If the electrode is moved, one should change the name or the reference to indicate that the data should not be attempted to be combined across the two positions. One might change the reference number to 2. How to make a probe: (Talk about epochprobemap records of devices, probes are created from these elements.)","title":"CLASS ndi.probe"},{"location":"NDI-matlab/reference/%2Bndi/probe.m/#superclasses","text":"ndi.element , ndi.ido , did.ido , ndi.epoch.epochset , ndi.documentservice , matlab.mixin.Heterogeneous","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/probe.m/#properties","text":"Property Description session name type reference underlying_element direct subject_id dependencies identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/probe.m/#methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version newdocument return a new database document of type ndi.document based on a element numepochs Number of epochs of ndi.epoch.epochset probe create a new ndi.probe object probestring Produce a human-readable probe string resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery return a search query for an ndi.document based on this element t0_t1 underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method)","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/probe.m/#methods-help","text":"addepoch - add an epoch to the ndi.element [NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, [ADD_TO_DB]) Registers the data for an epoch with the NDI_ELEMENT_OBJ. Inputs: NDI_ELEMENT_OBJ: The ndi.element object to modify EPOCHID: The name of the epoch to add; should match the name of an epoch from the probe EPOCHCLOCK: The epoch clock; must be a single clock type that matches one of the clock types of the probe T0_T1: The starting time and ending time of the existence of information about the ELEMENT on the probe, in units of the epock clock ADD_TO_DB: 0/1 Should we actually add the epoch document to the database? Default 0. Help for ndi.probe/addepoch is inherited from superclass ndi.element buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.probe/EPOCHNODES Help for ndi.probe/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - build the epoch table for an ndi.probe. * ET = BUILDEPOCHTABLE(NDI_PROBE_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch (may change) 'epoch_id' | The epoch ID code (will never change once established) | This uniquely specifies the epoch. 'epoch_session_id' | The ID of the session 'epochprobemap' | The epochprobemap object from each epoch 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', and 'epoch_id' cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.probe.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.probe/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.probe/cached_epochtable is inherited from superclass ndi.epoch.epochset doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then empty is returned. Help for ndi.probe/doc_unique_id is inherited from superclass ndi.element elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ) Returns the name as a human-readable string. For ndi.element objects, this is the string 'element: ' followed by its name Help for ndi.probe/elementstring is inherited from superclass ndi.element epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.probe/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_PROBE_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch. The ndi.probe class always returns the clock type(s) of the device it is based on epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.probe/epochgraph is inherited from superclass ndi.epoch.epochset epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string. The abstract class just queries the EPOCHTABLE. Most classes that manage epochs themselves (ndi.file.navigator, ndi.daq.system) will override this method. Help for ndi.probe/epochid is inherited from superclass ndi.epoch.epochset epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.probe/epochnodes is inherited from superclass ndi.epoch.epochset epochprobemapmatch - does an epochprobemap record match our probe? B = EPOCHPROBEMAPMATCH(NDI_PROBE_OBJ, EPOCHPROBEMAP) Returns 1 if the ndi.epoch.epochprobemap object EPOCHPROBEMAP is a match for the NDI_PROBE_OBJ probe and 0 otherwise. epochsetname - the name of the ndi.probe. object, for EPOCHNODES* NAME = EPOCHSETNAME(NDI_PROBE_OBJ) Returns the object name that is used when creating epoch nodes. For ndi.probe objects, this is the string 'probe: ' followed by PROBESTRING(NDI_PROBE_OBJ). epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.probe/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.probe/epochtableentry is inherited from superclass ndi.epoch.epochset eq - are 2 ndi.probe objects equal? Returns 1 if the objects share an object class, session, and probe string. getcache - return the NDI_CACHE and key for ndi.element [CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ) Returns the CACHE and KEY for the ndi.element object. The CACHE is returned from the associated session. The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT. See also: ndi.file.navigator Help for ndi.probe/getcache is inherited from superclass ndi.element getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe. * [DEV, DEVNAME, DEVEPOCH, CHANNELTYPE, CHANNELLIST] = GETCHANNELDEVINFO(NDI_PROBE_OBJ, EPOCH_NUMBER_OR_ID) Given an ndi.probe.* object and an EPOCH number, this function returns the corresponding channel and device info. Suppose there are C channels corresponding to a probe. Then the outputs are DEV is a 1xC cell array of ndi.daq.system objects for each channel DEVNAME is a 1xC cell array of the names of each device in DEV DEVEPOCH is a 1xC array with the epoch id of the probe's EPOCH on each device CHANNELTYPE is a cell array of the type of each channel CHANNELLIST is the channel number of each channel. getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.probe/getepocharray is inherited from superclass ndi.epoch.epochset ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.probe.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then an error is returned. Help for ndi.probe/id is inherited from superclass ndi.element issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset and ndi.probe.* this returns 0 so that the underlying ndi.daq.system epochs are added. isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.probe.isvalid is inherited from superclass did.ido load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ) Loads the ndi.document that is based on the ndi.element object and any associated epoch documents. Help for ndi.probe/load_all_element_docs is inherited from superclass ndi.element load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ) Load an ndi.document that is based on the ndi.element object. Returns empty if there is no such document. Help for ndi.probe/load_element_doc is inherited from superclass ndi.element loadaddedepochs - load the added epochs from an ndi.element [ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ) Load the EPOCHTABLE that consists of added/registered epochs that provide information about the ndi.element. Help for ndi.probe/loadaddedepochs is inherited from superclass ndi.element matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.probe/matchedepochtable is inherited from superclass ndi.epoch.epochset newdocument - return a new database document of type ndi.document based on a element NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_ELEMENT_OBJ) Fill out the fields of an NDI_DOCUMENT_OBJ of type 'element' with the corresponding 'name' and 'type' fields of the element NDI_ELEMENT_OBJ and the 'name', 'type', and 'reference' fields of its underlying NDI_PROBE_OBJ. If EPOCHID is provided, then an EPOCHID field is filled out as well in accordance to 'epochid'. When the document is created, it is automatically added to the session. Help for ndi.probe/newdocument is inherited from superclass ndi.element numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.probe/numepochs is inherited from superclass ndi.epoch.epochset probe - create a new ndi.probe object OBJ = ndi.probe(SESSION, NAME, REFERENCE, TYPE, SUBJECT_ID) or OBJ = ndi.probe(SESSION, NDI_DOCUMENT_OBJ) Creates an ndi.probe associated with an ndi.session object SESSION and with name NAME (a string that must start with a letter and contain no white space), reference number equal to REFERENCE (a non-negative integer), the TYPE of the probe (a string that must start with a letter and contain no white space). ndi.probe is a essentially an abstract class, and a specific implementation must be called. Documentation for ndi.probe/probe doc ndi.probe probestring - Produce a human-readable probe string PROBESTR = PROBESTRING(NDI_PROBE_OBJ) Returns the name and reference of a probe as a human-readable string. This is simply PROBESTR = [NDI_PROBE_OBJ.name ' _ ' in2str(NDI_PROBE_OBJ.reference)] resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.probe/EPOCHTABLE Help for ndi.probe/resetepochtable is inherited from superclass ndi.epoch.epochset searchquery - return a search query for an ndi.document based on this element SQ = SEARCHQUERY(NDI_ELEMENT_OBJ, [EPOCHID]) Returns a search query for the fields of an NDI_DOCUMENT_OBJ of type 'element' with the corresponding 'name' and 'type' fields of the element NDI_ELEMENT_OBJ. Help for ndi.probe/searchquery is inherited from superclass ndi.element t0_t1 - ** T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK TODO: this must be a bug, it's just self-referential Help for ndi.probe/t0_t1 is inherited from superclass ndi.element underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.probe/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.probe.unique_id is inherited from superclass did.ido","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/query.m/","text":"CLASS ndi.query ndi.query is a class. obj = ndi.query Superclasses did.query Properties Property Description searchstructure Methods Method Description and add DID.QUERY objects or search for this DID.QUERY object or that DID.QUERY object query ndi.query/query is a constructor. searchcellarray2searchstructure convert a search cell array to a search structure searchstruct make a search structure from field, operation, param1, param2 inputs to_searchstructure convert an DID.QUERY object to a set of search structures Methods help and - add DID.QUERY objects C = AND(A,B) or C = A & B Produces a new DID.QUERY object C that is true if both DID.QUERY A and DID.QUERY B are true. Combines the searches from A and B into a search C. The searchstructure field of C will be a concatenated version of those from A and B. The query C will only pass if all of the characteristics of A and B are satisfied. Help for ndi.query/and is inherited from superclass did.query or - search for this DID.QUERY object or that DID.QUERY object C = OR(A,B) or C = A | B Produces a new DID.QUERY object C that is true if either DID.QUERY A or DID.QUERY B is true. Help for ndi.query/or is inherited from superclass did.query query - ndi.query/query is a constructor. obj = ndi.query Documentation for ndi.query/query doc ndi.query searchcellarray2searchstructure - convert a search cell array to a search structure SEARCHSTRUCT = SEARCHCELLARRAY2SEARCHSTRUCTURE(SEACHCELLARRAY) Converts a cell array with SEARCHCELLARRAY = {'property1',value1,'property2',value2, ...} into a SEARCHSTRUCT with the 'regexp' operator in the case of a character 'value' or the 'exact_number' operator in the case of a non-character value. See also: FIELDSEARCH, NDI.QUERY/DID.QUERY Help for ndi.query.searchcellarray2searchstructure is inherited from superclass did.query searchstruct - make a search structure from field, operation, param1, param2 inputs SEARCHSTRUCT_OUT = SEARCHSTRUCT(FIELD, OPERATION, PARAM1, PARAM2) Creates search structure with the given fields FIELD, OPERATION, PARAM1, PARAM2. See also: FIELDSEARCH, NDI.QUERY/DID.QUERY Help for ndi.query.searchstruct is inherited from superclass did.query to_searchstructure - convert an DID.QUERY object to a set of search structures SEARCHSTRUCTURE = TO_SEARCHSTRUCTURE(DID.QUERY_OBJ) Converts an DID.QUERY object to a set of search structures without any DID.QUERY dependencies (see FIELDSEARCH). See also: FIELDSEARCH Help for ndi.query/to_searchstructure is inherited from superclass did.query","title":"ndi.query"},{"location":"NDI-matlab/reference/%2Bndi/query.m/#class-ndiquery","text":"ndi.query is a class. obj = ndi.query","title":"CLASS ndi.query"},{"location":"NDI-matlab/reference/%2Bndi/query.m/#superclasses","text":"did.query","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/query.m/#properties","text":"Property Description searchstructure","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/query.m/#methods","text":"Method Description and add DID.QUERY objects or search for this DID.QUERY object or that DID.QUERY object query ndi.query/query is a constructor. searchcellarray2searchstructure convert a search cell array to a search structure searchstruct make a search structure from field, operation, param1, param2 inputs to_searchstructure convert an DID.QUERY object to a set of search structures","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/query.m/#methods-help","text":"and - add DID.QUERY objects C = AND(A,B) or C = A & B Produces a new DID.QUERY object C that is true if both DID.QUERY A and DID.QUERY B are true. Combines the searches from A and B into a search C. The searchstructure field of C will be a concatenated version of those from A and B. The query C will only pass if all of the characteristics of A and B are satisfied. Help for ndi.query/and is inherited from superclass did.query or - search for this DID.QUERY object or that DID.QUERY object C = OR(A,B) or C = A | B Produces a new DID.QUERY object C that is true if either DID.QUERY A or DID.QUERY B is true. Help for ndi.query/or is inherited from superclass did.query query - ndi.query/query is a constructor. obj = ndi.query Documentation for ndi.query/query doc ndi.query searchcellarray2searchstructure - convert a search cell array to a search structure SEARCHSTRUCT = SEARCHCELLARRAY2SEARCHSTRUCTURE(SEACHCELLARRAY) Converts a cell array with SEARCHCELLARRAY = {'property1',value1,'property2',value2, ...} into a SEARCHSTRUCT with the 'regexp' operator in the case of a character 'value' or the 'exact_number' operator in the case of a non-character value. See also: FIELDSEARCH, NDI.QUERY/DID.QUERY Help for ndi.query.searchcellarray2searchstructure is inherited from superclass did.query searchstruct - make a search structure from field, operation, param1, param2 inputs SEARCHSTRUCT_OUT = SEARCHSTRUCT(FIELD, OPERATION, PARAM1, PARAM2) Creates search structure with the given fields FIELD, OPERATION, PARAM1, PARAM2. See also: FIELDSEARCH, NDI.QUERY/DID.QUERY Help for ndi.query.searchstruct is inherited from superclass did.query to_searchstructure - convert an DID.QUERY object to a set of search structures SEARCHSTRUCTURE = TO_SEARCHSTRUCTURE(DID.QUERY_OBJ) Converts an DID.QUERY object to a set of search structures without any DID.QUERY dependencies (see FIELDSEARCH). See also: FIELDSEARCH Help for ndi.query/to_searchstructure is inherited from superclass did.query","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/session.m/","text":"CLASS ndi.session NDI.SESSION - NDI.SESSION object class Superclasses handle Properties Property Description reference A string reference for the session identifier A unique identifier syncgraph An ndi.time.syncgraph object related to this session cache An ndi.cache object for the session's use Methods Method Description addlistener addlistener Add listener for event. all_docs_in_session determines if a set of ndi documents are in a session creator_args return the arguments needed to build an ndi.session object daqsystem_add Add a sampling device to a ndi.session object daqsystem_clear remove all DAQSYSTEM objects from an ndi.session daqsystem_load Load daqsystem objects from an ndi.session daqsystem_rm Remove a sampling device from an ndi.session object database_add Add an ndi.document to an ndi.session object database_clear deletes/removes all entries from the database associated with an session database_closebinarydoc close an ndi.database.binarydoc database_existbinarydoc checks if an ndi.database.binarydoc exists for an ndi.document database_openbinarydoc open the ndi.database.binarydoc channel of an ndi.document database_rm Remove an ndi.document with a given document ID from an ndi.session object database_search Search for an ndi.document in a database of an ndi.session object delete DELETE Delete a handle object. docinput2docs convert an array of ndi.documents or doc_ids to documents eq are 2 NDI_SESSIONS equal? findexpobj search an ndi.session for a specific object given name and classname findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. get_ingested_docs get all ndi.documents related to ingested data getelements Return all ndi.element objects that are found in session database getpath Return the path of the session getprobes Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries gt > (GT) Greater than relation for handles. id return the identifier of an ndi.session object ingest ingest the raw data and synchronization information into the database is_fully_ingested is an ndi.session object fully ingested? isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. newdocument create a new ndi.database document of type ndi.document notify NOTIFY Notify listeners of event. searchquery return a search query for database objects in this session session Create a new ndi.session object syncgraph_addrule add an ndi.time.syncrule to the syncgraph syncgraph_rmrule remove an ndi.time.syncrule from the syncgraph unique_reference_string return the unique reference string for this session validate_documents validate whether documents belong to a session Methods help addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.session, matlab.metadata.Property, events Help for ndi.session/addlistener is inherited from superclass handle all_docs_in_session - determines if a set of ndi documents are in a session [B,ERRMSG] = ALL_DOCS_IN_SESSION(DOCS, SESSION_ID) B is 1 if the base.session_id field of all ndi.document objects in the cell array DOCS match session_id. If so, ERRMSG is empty. Otherwise, ERRMSG lists the documents that are not in the session. creator_args - return the arguments needed to build an ndi.session object INPUTS = CREATOR_ARGS(NDI_SESSION_OBJ) Return the inputs necessary to create an ndi.session object. Each input argument is returned as an entry in the cell array INPUTS. Example: INPUTS = ndi_session_obj.creator_args(); ndi_session_copy = ndi.session(INPUTS{:}); daqsystem_add - Add a sampling device to a ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_ADD(NDI_SESSION_OBJ, DEV) Adds the device DEV to the ndi.session NDI_SESSION_OBJ The devices can be accessed by referencing NDI_SESSION_OBJ.device See also: DAQSYSTEM_RM, ndi.session daqsystem_clear - remove all DAQSYSTEM objects from an ndi.session NDI_SESSION_OBJ = DAQSYSTEM_CLEAR(NDI_SESSION_OBJ) Permanently removes all ndi.daq.system objects from an ndi.session. Be sure you mean it! daqsystem_load - Load daqsystem objects from an ndi.session DEV = DAQSYSTEM_LOAD(NDI_SESSION_OBJ, PARAM1, VALUE1, PARAM2, VALUE2, ...) or DEV = DAQSYSTEM_LOAD(NDI_SESSION_OBJ) Returns the ndi.daq.system objects in the ndi.session with metadata parameters PARAMS1 that matches VALUE1, PARAMS2 that matches VALUE2, etc. One can also search for 'name' as a parameter; this will be automatically changed to search for database documents with fields 'base.name' equal to the corresponding value. If more than one object is requested, then DEV will be a cell list of matching objects. Otherwise, the object will be a single element. If there are no matches, empty ([]) is returned. daqsystem_rm - Remove a sampling device from an ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_RM(NDI_SESSION_OBJ, DEV) Removes the device DEV from the device list. See also: DAQSYSTEM_ADD, ndi.session database_add - Add an ndi.document to an ndi.session object NDI_SESSION_OBJ = DATABASE_ADD(NDI_SESSION_OBJ, NDI_DOCUMENT_OBJ) Adds the ndi.document NDI_DOCUMENT_OBJ to the ndi.session NDI_SESSION_OBJ. NDI_DOCUMENT_OBJ can also be a cell array of ndi.document objects, which will all be added in turn. The database can be queried by calling NDI_SESSION_OBJ/SEARCH See also: DATABASE_RM, ndi.session, ndi.database, ndi.session/SEARCH database_clear - deletes/removes all entries from the database associated with an session DATABASE_CLEAR(NDI_SESSION_OBJ, AREYOUSURE) Removes all documents from the NDI_SESSION_OBJ object. Use with care. If AREYOUSURE is 'yes' then the function will proceed. Otherwise, it will not. database_closebinarydoc - close an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = DATABASE_CLOSEBINARYDOC(NDI_SESSION_OBJ, NDI_BINARYDOC_OBJ) Close an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be closed in the database, which is why it is necessary to call this function through the session object. database_existbinarydoc - checks if an ndi.database.binarydoc exists for an ndi.document [TF, FILE_PATH] = DATABASE_EXISTBINARYDOC(NDI_SESSION_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. database_openbinarydoc - open the ndi.database.binarydoc channel of an ndi.document NDI_BINARYDOC_OBJ = DATABASE_OPENBINARYDOC(NDI_SESSION_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return the open ndi.database.binarydoc object that corresponds to an ndi.document and NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself. The document is opened for reading only. Document binary streams may not be edited once the document is added to the database. Note that this NDI_BINARYDOC_OBJ must be closed with ndi.session/CLOSEBINARYDOC. database_rm - Remove an ndi.document with a given document ID from an ndi.session object NDI_SESSION_OBJ = DATABASE_RM(NDI_SESSION_OBJ, DOC_UNIQUE_ID) or NDI_SESSION_OBJ = DATABASE_RM(NDI_SESSION_OBJ, DOC) Removes an ndi.document with document id DOC_UNIQUE_ID from the NDI_SESSION_OBJ.database. In the second form, if an ndi.document or cell array of NDI_DOCUMENTS is passed for DOC, then the document unique ids are retrieved and they are removed in turn. If DOC/DOC_UNIQUE_ID is empty, no action is taken. This function also takes parameters as name/value pairs that modify its behavior: Parameter (default) | Description -------------------------------------------------------------------------------- ErrIfNotFound (0) | Produce an error if an ID to be deleted is not found. See also: DATABASE_ADD, ndi.session database_search - Search for an ndi.document in a database of an ndi.session object NDI_DOCUMENT_OBJ = DATABASE_SEARCH(NDI_SESSION_OBJ, SEARCHPARAMETERS) Given search parameters, which are a cell list {'PARAM1', VALUE1, 'PARAM2, VALUE2, ...}, the database associated with the ndi.session object is searched. Matches are returned in a cell list NDI_DOCUMENT_OBJ. delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.SESSION, NDI.SESSION/ISVALID, CLEAR Help for ndi.session/delete is inherited from superclass handle docinput2docs - convert an array of ndi.documents or doc_ids to documents [DOC_LIST,B,ERRMSG] = DOCINPUT2DOCS(NDI_SESSION_OBJ, DOC_INPUT) Given an input DOC_INPUT that specifies ndi.document objects, return the list of ndi.document objects. DOC_INPUT can be a single document id (character array), or a single ndi.document, or a cell array of document ids or a cell array of ndi.documents, or a mixed cell array of ndi.document objects and ids. If all documents are found, then B is 1 and ERRMSG is ''. If a document ID does not exist in the database, then one occurrence is noted in ERRMSG and B is 0. eq - are 2 NDI_SESSIONS equal? B = EQ(E1, E2) Returns 1 if and only if the sessions have the same unique reference number. findexpobj - search an ndi.session for a specific object given name and classname OBJ = FINDEXPOBJ(NDI_EXPERIMNENT_OBJ, OBJ_NAME, OBJ_CLASSNAME) Examines the DAQSYSTEM list, DATABASE, and PROBELIST for an object with name OBJ_NAME and classname OBJ_CLASSNAME. If no object is found, OBJ will be empty ([]). findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.SESSION Help for ndi.session/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.session, ndi.session/findobj, dynamicprops, matlab.metadata.Property Help for ndi.session/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION, NDI.SESSION/EQ, NDI.SESSION/GT, NDI.SESSION/LE, NDI.SESSION/LT, NDI.SESSION/NE Help for ndi.session/ge is inherited from superclass handle get_ingested_docs - get all ndi.documents related to ingested data D = GET_INGESTED_DOCS(NDI_SESSION_OBJ) Return all documents related to ingested data. Be careful; if the raw data is not available on the path, then the ingested data is the only record of it. getelements - Return all ndi.element objects that are found in session database ELEMENTS = GETELEMENTS(NDI_SESSION_OBJ, ...) Examines all the database of NDI_SESSION_OBJ and returns all ndi.element entries. ELEMENTS is a cell array of ndi.element.* objects. ELEMENTS = GETELEMENTS(NDI_SESSION_OBJ, 'PROP1', VALUE1, 'PROP2', VALUE2...) returns only those probes for which 'PROP1' has a value of VALUE1, 'PROP2' has a value of VALUE2, etc. Properties of elements are 'element.name', 'element.type', 'element.direct', and 'probe.name', 'probe.type', and 'probe.reference'. getpath - Return the path of the session P = GETPATH(NDI_SESSION_OBJ) Returns the path of an ndi.session object. The path is some sort of reference to the storage location of the session. This might be a URL, or a file directory, depending upon the subclass. In the ndi.session class, this returns empty. See also: ndi.session getprobes - Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries PROBES = GETPROBES(NDI_SESSION_OBJ, ...) Examines all ndi.daq.system entries in the NDI_SESSION_OBJ's device array and returns all ndi.probe.* entries that can be constructed from each device's ndi.epoch.epochprobemap entries. PROBES is a cell array of ndi.probe.* objects. One can pass additional arguments that specify the classnames of the probes that are returned: PROBES = GETPROBES(NDI_SESSION_OBJ, CLASSMATCH ) only probes that are members of the classes CLASSMATCH etc., are returned. PROBES = GETPROBES(NDI_SESSION_OBJ, 'PROP1', VALUE1, 'PROP2', VALUE2...) returns only those probes for which 'PROP1' has a value of VALUE1, 'PROP2' has a value of VALUE2, etc. Properties of probes are 'name', 'reference', and 'type', and 'subject_ID'. gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION, NDI.SESSION/EQ, NDI.SESSION/GE, NDI.SESSION/LE, NDI.SESSION/LT, NDI.SESSION/NE Help for ndi.session/gt is inherited from superclass handle id - return the identifier of an ndi.session object IDENTIFIER = ID(NDI_SESSION_OBJ) Returns the unique identifier of an ndi.session object. ingest - ingest the raw data and synchronization information into the database [B,ERRMSG] = INGEST(NDI_SESSION_OBJ) Ingest all raw data and synchronization information into the database. is_fully_ingested - is an ndi.session object fully ingested? B = IS_FULLY_INGESTED(NDI_SESSION_OBJ) Returns 1 if the ndi.session object NDI_SESSION_OBJ is fully ingested and 0 if there are still elements on disk that would need to be ingested by NDI_SESSION_OBJ.ingest() in order to be fully ingested. isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.SESSION, NDI.SESSION/DELETE Help for ndi.session/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION, NDI.SESSION/EQ, NDI.SESSION/GE, NDI.SESSION/GT, NDI.SESSION/LT, NDI.SESSION/NE Help for ndi.session/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.session, matlab.metadata.Property, events Help for ndi.session/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION, NDI.SESSION/EQ, NDI.SESSION/GE, NDI.SESSION/GT, NDI.SESSION/LE, NDI.SESSION/NE Help for ndi.session/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION, NDI.SESSION/EQ, NDI.SESSION/GE, NDI.SESSION/GT, NDI.SESSION/LE, NDI.SESSION/LT Help for ndi.session/ne is inherited from superclass handle newdocument - create a new ndi.database document of type ndi.document NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_SESSION_OBJ, [DOCUMENT_TYPE], 'PROPERTY1', VALUE1, ...) Creates an empty database document NDI_DOCUMENT_OBJ. DOCUMENT_TYPE is an optional argument and can be any type that confirms to the .json files in $NDI_COMMON/database_documents/*, a URL to such a file, or a full path filename. If DOCUMENT_TYPE is not specified, it is taken to be 'base'. If additional PROPERTY values are specified, they are set to the VALUES indicated. Example: mydoc = ndi_session_obj.newdocument('base','base.name','myname'); notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.SESSION, NDI.SESSION/ADDLISTENER, NDI.SESSION/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.session/notify is inherited from superclass handle searchquery - return a search query for database objects in this session SQ = SEARCHQUERY(NDI_SESSION_OBJ) Returns a search query that will match all ndi.document objects that were generated by this session. SQ = {'base.session_id', ndi_session_obj.id()}; Example: mydoc = ndi_session_obj.newdocument('base','base.name','myname'); session - Create a new ndi.session object NDI_SESSION_OBJ=ndi.session(REFERENCE) Creates a new ndi.session object. The session has a unique reference REFERENCE. This class is an abstract class and typically an end user will open a specific subclass such as ndi.session.dir. ndi.session objects can access 0 or more ndi.daq.system objects. See also: ndi.session/DAQSYSTEM_ADD, ndi.session/DAQSYSTEM_RM, ndi.session/GETPATH, ndi.session/GETREFERENCE Documentation for ndi.session/session doc ndi.session syncgraph_addrule - add an ndi.time.syncrule to the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_ADDRULE(NDI_SESSION_OBJ, RULE) Adds the ndi.time.syncrule RULE to the ndi.time.syncgraph of the ndi.session object NDI_SESSION_OBJ. syncgraph_rmrule - remove an ndi.time.syncrule from the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_RMRULE(NDI_SESSION_OBJ, INDEX) Removes the INDEXth ndi.time.syncrule from the ndi.time.syncgraph of the ndi.session object NDI_SESSION_OBJ. unique_reference_string - return the unique reference string for this session REFSTR = UNIQUE_REFERENCE_STRING(NDI_SESSION_OBJ) Returns the unique reference string for the ndi.session. REFSTR is a combination of the REFERENCE property of NDI_SESSION_OBJ and the UNIQUE_REFERENCE property of NDI_SESSION_OBJ, joined with a '_'. If you just want the reference (not unique) just access the reference property (NDI_SESSION_OBJ.reference). validate_documents - validate whether documents belong to a session [B, ERRMSG] = VALIDATE_DOCUMENTS(NDI_SESSION_OBJ, DOCUMENT) Given an ndi.document DOCUMENT or a cell array of ndi.documents DOCUMENT, determines whether all document session_ids match the sessions's id. An 'empty' session_id (all 0s, ndi.session.empty_id() ) also matches.","title":"ndi.session"},{"location":"NDI-matlab/reference/%2Bndi/session.m/#class-ndisession","text":"NDI.SESSION - NDI.SESSION object class","title":"CLASS ndi.session"},{"location":"NDI-matlab/reference/%2Bndi/session.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/session.m/#properties","text":"Property Description reference A string reference for the session identifier A unique identifier syncgraph An ndi.time.syncgraph object related to this session cache An ndi.cache object for the session's use","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/session.m/#methods","text":"Method Description addlistener addlistener Add listener for event. all_docs_in_session determines if a set of ndi documents are in a session creator_args return the arguments needed to build an ndi.session object daqsystem_add Add a sampling device to a ndi.session object daqsystem_clear remove all DAQSYSTEM objects from an ndi.session daqsystem_load Load daqsystem objects from an ndi.session daqsystem_rm Remove a sampling device from an ndi.session object database_add Add an ndi.document to an ndi.session object database_clear deletes/removes all entries from the database associated with an session database_closebinarydoc close an ndi.database.binarydoc database_existbinarydoc checks if an ndi.database.binarydoc exists for an ndi.document database_openbinarydoc open the ndi.database.binarydoc channel of an ndi.document database_rm Remove an ndi.document with a given document ID from an ndi.session object database_search Search for an ndi.document in a database of an ndi.session object delete DELETE Delete a handle object. docinput2docs convert an array of ndi.documents or doc_ids to documents eq are 2 NDI_SESSIONS equal? findexpobj search an ndi.session for a specific object given name and classname findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. get_ingested_docs get all ndi.documents related to ingested data getelements Return all ndi.element objects that are found in session database getpath Return the path of the session getprobes Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries gt > (GT) Greater than relation for handles. id return the identifier of an ndi.session object ingest ingest the raw data and synchronization information into the database is_fully_ingested is an ndi.session object fully ingested? isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. newdocument create a new ndi.database document of type ndi.document notify NOTIFY Notify listeners of event. searchquery return a search query for database objects in this session session Create a new ndi.session object syncgraph_addrule add an ndi.time.syncrule to the syncgraph syncgraph_rmrule remove an ndi.time.syncrule from the syncgraph unique_reference_string return the unique reference string for this session validate_documents validate whether documents belong to a session","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/session.m/#methods-help","text":"addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.session, matlab.metadata.Property, events Help for ndi.session/addlistener is inherited from superclass handle all_docs_in_session - determines if a set of ndi documents are in a session [B,ERRMSG] = ALL_DOCS_IN_SESSION(DOCS, SESSION_ID) B is 1 if the base.session_id field of all ndi.document objects in the cell array DOCS match session_id. If so, ERRMSG is empty. Otherwise, ERRMSG lists the documents that are not in the session. creator_args - return the arguments needed to build an ndi.session object INPUTS = CREATOR_ARGS(NDI_SESSION_OBJ) Return the inputs necessary to create an ndi.session object. Each input argument is returned as an entry in the cell array INPUTS. Example: INPUTS = ndi_session_obj.creator_args(); ndi_session_copy = ndi.session(INPUTS{:}); daqsystem_add - Add a sampling device to a ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_ADD(NDI_SESSION_OBJ, DEV) Adds the device DEV to the ndi.session NDI_SESSION_OBJ The devices can be accessed by referencing NDI_SESSION_OBJ.device See also: DAQSYSTEM_RM, ndi.session daqsystem_clear - remove all DAQSYSTEM objects from an ndi.session NDI_SESSION_OBJ = DAQSYSTEM_CLEAR(NDI_SESSION_OBJ) Permanently removes all ndi.daq.system objects from an ndi.session. Be sure you mean it! daqsystem_load - Load daqsystem objects from an ndi.session DEV = DAQSYSTEM_LOAD(NDI_SESSION_OBJ, PARAM1, VALUE1, PARAM2, VALUE2, ...) or DEV = DAQSYSTEM_LOAD(NDI_SESSION_OBJ) Returns the ndi.daq.system objects in the ndi.session with metadata parameters PARAMS1 that matches VALUE1, PARAMS2 that matches VALUE2, etc. One can also search for 'name' as a parameter; this will be automatically changed to search for database documents with fields 'base.name' equal to the corresponding value. If more than one object is requested, then DEV will be a cell list of matching objects. Otherwise, the object will be a single element. If there are no matches, empty ([]) is returned. daqsystem_rm - Remove a sampling device from an ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_RM(NDI_SESSION_OBJ, DEV) Removes the device DEV from the device list. See also: DAQSYSTEM_ADD, ndi.session database_add - Add an ndi.document to an ndi.session object NDI_SESSION_OBJ = DATABASE_ADD(NDI_SESSION_OBJ, NDI_DOCUMENT_OBJ) Adds the ndi.document NDI_DOCUMENT_OBJ to the ndi.session NDI_SESSION_OBJ. NDI_DOCUMENT_OBJ can also be a cell array of ndi.document objects, which will all be added in turn. The database can be queried by calling NDI_SESSION_OBJ/SEARCH See also: DATABASE_RM, ndi.session, ndi.database, ndi.session/SEARCH database_clear - deletes/removes all entries from the database associated with an session DATABASE_CLEAR(NDI_SESSION_OBJ, AREYOUSURE) Removes all documents from the NDI_SESSION_OBJ object. Use with care. If AREYOUSURE is 'yes' then the function will proceed. Otherwise, it will not. database_closebinarydoc - close an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = DATABASE_CLOSEBINARYDOC(NDI_SESSION_OBJ, NDI_BINARYDOC_OBJ) Close an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be closed in the database, which is why it is necessary to call this function through the session object. database_existbinarydoc - checks if an ndi.database.binarydoc exists for an ndi.document [TF, FILE_PATH] = DATABASE_EXISTBINARYDOC(NDI_SESSION_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. database_openbinarydoc - open the ndi.database.binarydoc channel of an ndi.document NDI_BINARYDOC_OBJ = DATABASE_OPENBINARYDOC(NDI_SESSION_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return the open ndi.database.binarydoc object that corresponds to an ndi.document and NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself. The document is opened for reading only. Document binary streams may not be edited once the document is added to the database. Note that this NDI_BINARYDOC_OBJ must be closed with ndi.session/CLOSEBINARYDOC. database_rm - Remove an ndi.document with a given document ID from an ndi.session object NDI_SESSION_OBJ = DATABASE_RM(NDI_SESSION_OBJ, DOC_UNIQUE_ID) or NDI_SESSION_OBJ = DATABASE_RM(NDI_SESSION_OBJ, DOC) Removes an ndi.document with document id DOC_UNIQUE_ID from the NDI_SESSION_OBJ.database. In the second form, if an ndi.document or cell array of NDI_DOCUMENTS is passed for DOC, then the document unique ids are retrieved and they are removed in turn. If DOC/DOC_UNIQUE_ID is empty, no action is taken. This function also takes parameters as name/value pairs that modify its behavior: Parameter (default) | Description -------------------------------------------------------------------------------- ErrIfNotFound (0) | Produce an error if an ID to be deleted is not found. See also: DATABASE_ADD, ndi.session database_search - Search for an ndi.document in a database of an ndi.session object NDI_DOCUMENT_OBJ = DATABASE_SEARCH(NDI_SESSION_OBJ, SEARCHPARAMETERS) Given search parameters, which are a cell list {'PARAM1', VALUE1, 'PARAM2, VALUE2, ...}, the database associated with the ndi.session object is searched. Matches are returned in a cell list NDI_DOCUMENT_OBJ. delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.SESSION, NDI.SESSION/ISVALID, CLEAR Help for ndi.session/delete is inherited from superclass handle docinput2docs - convert an array of ndi.documents or doc_ids to documents [DOC_LIST,B,ERRMSG] = DOCINPUT2DOCS(NDI_SESSION_OBJ, DOC_INPUT) Given an input DOC_INPUT that specifies ndi.document objects, return the list of ndi.document objects. DOC_INPUT can be a single document id (character array), or a single ndi.document, or a cell array of document ids or a cell array of ndi.documents, or a mixed cell array of ndi.document objects and ids. If all documents are found, then B is 1 and ERRMSG is ''. If a document ID does not exist in the database, then one occurrence is noted in ERRMSG and B is 0. eq - are 2 NDI_SESSIONS equal? B = EQ(E1, E2) Returns 1 if and only if the sessions have the same unique reference number. findexpobj - search an ndi.session for a specific object given name and classname OBJ = FINDEXPOBJ(NDI_EXPERIMNENT_OBJ, OBJ_NAME, OBJ_CLASSNAME) Examines the DAQSYSTEM list, DATABASE, and PROBELIST for an object with name OBJ_NAME and classname OBJ_CLASSNAME. If no object is found, OBJ will be empty ([]). findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.SESSION Help for ndi.session/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.session, ndi.session/findobj, dynamicprops, matlab.metadata.Property Help for ndi.session/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION, NDI.SESSION/EQ, NDI.SESSION/GT, NDI.SESSION/LE, NDI.SESSION/LT, NDI.SESSION/NE Help for ndi.session/ge is inherited from superclass handle get_ingested_docs - get all ndi.documents related to ingested data D = GET_INGESTED_DOCS(NDI_SESSION_OBJ) Return all documents related to ingested data. Be careful; if the raw data is not available on the path, then the ingested data is the only record of it. getelements - Return all ndi.element objects that are found in session database ELEMENTS = GETELEMENTS(NDI_SESSION_OBJ, ...) Examines all the database of NDI_SESSION_OBJ and returns all ndi.element entries. ELEMENTS is a cell array of ndi.element.* objects. ELEMENTS = GETELEMENTS(NDI_SESSION_OBJ, 'PROP1', VALUE1, 'PROP2', VALUE2...) returns only those probes for which 'PROP1' has a value of VALUE1, 'PROP2' has a value of VALUE2, etc. Properties of elements are 'element.name', 'element.type', 'element.direct', and 'probe.name', 'probe.type', and 'probe.reference'. getpath - Return the path of the session P = GETPATH(NDI_SESSION_OBJ) Returns the path of an ndi.session object. The path is some sort of reference to the storage location of the session. This might be a URL, or a file directory, depending upon the subclass. In the ndi.session class, this returns empty. See also: ndi.session getprobes - Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries PROBES = GETPROBES(NDI_SESSION_OBJ, ...) Examines all ndi.daq.system entries in the NDI_SESSION_OBJ's device array and returns all ndi.probe.* entries that can be constructed from each device's ndi.epoch.epochprobemap entries. PROBES is a cell array of ndi.probe.* objects. One can pass additional arguments that specify the classnames of the probes that are returned: PROBES = GETPROBES(NDI_SESSION_OBJ, CLASSMATCH ) only probes that are members of the classes CLASSMATCH etc., are returned. PROBES = GETPROBES(NDI_SESSION_OBJ, 'PROP1', VALUE1, 'PROP2', VALUE2...) returns only those probes for which 'PROP1' has a value of VALUE1, 'PROP2' has a value of VALUE2, etc. Properties of probes are 'name', 'reference', and 'type', and 'subject_ID'. gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION, NDI.SESSION/EQ, NDI.SESSION/GE, NDI.SESSION/LE, NDI.SESSION/LT, NDI.SESSION/NE Help for ndi.session/gt is inherited from superclass handle id - return the identifier of an ndi.session object IDENTIFIER = ID(NDI_SESSION_OBJ) Returns the unique identifier of an ndi.session object. ingest - ingest the raw data and synchronization information into the database [B,ERRMSG] = INGEST(NDI_SESSION_OBJ) Ingest all raw data and synchronization information into the database. is_fully_ingested - is an ndi.session object fully ingested? B = IS_FULLY_INGESTED(NDI_SESSION_OBJ) Returns 1 if the ndi.session object NDI_SESSION_OBJ is fully ingested and 0 if there are still elements on disk that would need to be ingested by NDI_SESSION_OBJ.ingest() in order to be fully ingested. isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.SESSION, NDI.SESSION/DELETE Help for ndi.session/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION, NDI.SESSION/EQ, NDI.SESSION/GE, NDI.SESSION/GT, NDI.SESSION/LT, NDI.SESSION/NE Help for ndi.session/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.session, matlab.metadata.Property, events Help for ndi.session/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION, NDI.SESSION/EQ, NDI.SESSION/GE, NDI.SESSION/GT, NDI.SESSION/LE, NDI.SESSION/NE Help for ndi.session/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION, NDI.SESSION/EQ, NDI.SESSION/GE, NDI.SESSION/GT, NDI.SESSION/LE, NDI.SESSION/LT Help for ndi.session/ne is inherited from superclass handle newdocument - create a new ndi.database document of type ndi.document NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_SESSION_OBJ, [DOCUMENT_TYPE], 'PROPERTY1', VALUE1, ...) Creates an empty database document NDI_DOCUMENT_OBJ. DOCUMENT_TYPE is an optional argument and can be any type that confirms to the .json files in $NDI_COMMON/database_documents/*, a URL to such a file, or a full path filename. If DOCUMENT_TYPE is not specified, it is taken to be 'base'. If additional PROPERTY values are specified, they are set to the VALUES indicated. Example: mydoc = ndi_session_obj.newdocument('base','base.name','myname'); notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.SESSION, NDI.SESSION/ADDLISTENER, NDI.SESSION/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.session/notify is inherited from superclass handle searchquery - return a search query for database objects in this session SQ = SEARCHQUERY(NDI_SESSION_OBJ) Returns a search query that will match all ndi.document objects that were generated by this session. SQ = {'base.session_id', ndi_session_obj.id()}; Example: mydoc = ndi_session_obj.newdocument('base','base.name','myname'); session - Create a new ndi.session object NDI_SESSION_OBJ=ndi.session(REFERENCE) Creates a new ndi.session object. The session has a unique reference REFERENCE. This class is an abstract class and typically an end user will open a specific subclass such as ndi.session.dir. ndi.session objects can access 0 or more ndi.daq.system objects. See also: ndi.session/DAQSYSTEM_ADD, ndi.session/DAQSYSTEM_RM, ndi.session/GETPATH, ndi.session/GETREFERENCE Documentation for ndi.session/session doc ndi.session syncgraph_addrule - add an ndi.time.syncrule to the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_ADDRULE(NDI_SESSION_OBJ, RULE) Adds the ndi.time.syncrule RULE to the ndi.time.syncgraph of the ndi.session object NDI_SESSION_OBJ. syncgraph_rmrule - remove an ndi.time.syncrule from the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_RMRULE(NDI_SESSION_OBJ, INDEX) Removes the INDEXth ndi.time.syncrule from the ndi.time.syncgraph of the ndi.session object NDI_SESSION_OBJ. unique_reference_string - return the unique reference string for this session REFSTR = UNIQUE_REFERENCE_STRING(NDI_SESSION_OBJ) Returns the unique reference string for the ndi.session. REFSTR is a combination of the REFERENCE property of NDI_SESSION_OBJ and the UNIQUE_REFERENCE property of NDI_SESSION_OBJ, joined with a '_'. If you just want the reference (not unique) just access the reference property (NDI_SESSION_OBJ.reference). validate_documents - validate whether documents belong to a session [B, ERRMSG] = VALIDATE_DOCUMENTS(NDI_SESSION_OBJ, DOCUMENT) Given an ndi.document DOCUMENT or a cell array of ndi.documents DOCUMENT, determines whether all document session_ids match the sessions's id. An 'empty' session_id (all 0s, ndi.session.empty_id() ) also matches.","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/subject.m/","text":"CLASS ndi.subject ndi.subject - an object describing the subject of a measurement or stimulation ndi.subject is an object that stores information about the subject of an ndi.element. Each ndi.element object must have a subject; the subject associated with the element is a key defining feature of an ndi.element object. ndi.subject Properties: local_identifier - A string that is a unique global identifier but that also has meaning within an individual lab. Must include an '@' character that identifies the lab. For example: anteater23@nosuchlab.org description - A string of description that is free for the user to choose. ndi.subject Methods: subject - Create a new ndi.subject object newdocument - Create an ndi.document based on an ndi.subject searchquery - Search for an ndi.document representation of an ndi.subject isvalidlocalidentifierstring - Is a string a valid local_identifier string? (Static) does_subjectstring_match_session_document - Does an ndi.subject object already have a representation in an ndi.database? (Static) Superclasses ndi.ido , did.ido , ndi.documentservice Properties Property Description local_identifier A string that is a local identifier in the lab, e.g. anteater23@nosuchlab.org description A string description identifier A string that is a local identifier in the lab, e.g. anteater23@nosuchlab.org Methods Method Description does_subjectstring_match_session_document does a subject string match a document? id return the identifier of an DID.IDO object isvalid is a unique ID number valid? isvalidlocalidentifierstring is this a valid local identifier string? newdocument return a new database document of type ndi.document based on a subject searchquery return a search query for an ndi.document based on this element subject create a new ndi.subject object unique_id Generate a unique ID number for DID databases (Static method) Methods help does_subjectstring_match_session_document - does a subject string match a document? [B, SUBJECT_ID] = DOES_SUBJECTSTRING_MATCH_SESSION_DOCUMENT(NDI_SESSION_OBJ, ... SUBJECTSTRING, MAKEIT) Given a SUBJECTSTRING, which is either the local identifier for a subject in the ndi.session object, or a document ID in the database, determine if the SUBJECTSTRING corresponds to an ndi.document already in the database. If so, then the ID of that document is returned in SUBJECT_ID and B is 1. If it is not there, and if MAKEIT is 1, then a new entry is made and the document id is returned in SUBJECT_ID. If MAKEIT is 0, and it is not there, then B is 0 and SUBJECT_ID is empty. id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.subject/id is inherited from superclass did.ido isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.subject.isvalid is inherited from superclass did.ido isvalidlocalidentifierstring - is this a valid local identifier string? [B,MSG] = ISVALIDLOCALIDENTIFIERSTRING(LOCAL_IDENTIFIER) Returns 1 if the input LOCAL_IDENTIFIER is a character string and if it has an '@' in it. If B is 0, then an error message string is returned in MSG. newdocument - return a new database document of type ndi.document based on a subject NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_SUBJECT_OBJ) Creates a new ndi.document of type 'subject'. searchquery - return a search query for an ndi.document based on this element SQ = SEARCHQUERY(NDI_SUBJECT_OBJ) subject - create a new ndi.subject object NDI_SUBJECT_OBJ = ndi.subject(LOCAL_IDENTIFIER, DESCRIPTION) or NDI_SUBJECT_OBJ = ndi.subject(NDI_SESSION_OBJ, NDI_SUBJECT_DOCUMENT) Creates an ndi.subject object, either from a local identifier name or an ndi.session object and an ndi.document that describes the ndi.subject object. Documentation for ndi.subject/subject doc ndi.subject unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.subject.unique_id is inherited from superclass did.ido","title":"ndi.subject"},{"location":"NDI-matlab/reference/%2Bndi/subject.m/#class-ndisubject","text":"ndi.subject - an object describing the subject of a measurement or stimulation ndi.subject is an object that stores information about the subject of an ndi.element. Each ndi.element object must have a subject; the subject associated with the element is a key defining feature of an ndi.element object. ndi.subject Properties: local_identifier - A string that is a unique global identifier but that also has meaning within an individual lab. Must include an '@' character that identifies the lab. For example: anteater23@nosuchlab.org description - A string of description that is free for the user to choose. ndi.subject Methods: subject - Create a new ndi.subject object newdocument - Create an ndi.document based on an ndi.subject searchquery - Search for an ndi.document representation of an ndi.subject isvalidlocalidentifierstring - Is a string a valid local_identifier string? (Static) does_subjectstring_match_session_document - Does an ndi.subject object already have a representation in an ndi.database? (Static)","title":"CLASS ndi.subject"},{"location":"NDI-matlab/reference/%2Bndi/subject.m/#superclasses","text":"ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/subject.m/#properties","text":"Property Description local_identifier A string that is a local identifier in the lab, e.g. anteater23@nosuchlab.org description A string description identifier A string that is a local identifier in the lab, e.g. anteater23@nosuchlab.org","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/subject.m/#methods","text":"Method Description does_subjectstring_match_session_document does a subject string match a document? id return the identifier of an DID.IDO object isvalid is a unique ID number valid? isvalidlocalidentifierstring is this a valid local identifier string? newdocument return a new database document of type ndi.document based on a subject searchquery return a search query for an ndi.document based on this element subject create a new ndi.subject object unique_id Generate a unique ID number for DID databases (Static method)","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/subject.m/#methods-help","text":"does_subjectstring_match_session_document - does a subject string match a document? [B, SUBJECT_ID] = DOES_SUBJECTSTRING_MATCH_SESSION_DOCUMENT(NDI_SESSION_OBJ, ... SUBJECTSTRING, MAKEIT) Given a SUBJECTSTRING, which is either the local identifier for a subject in the ndi.session object, or a document ID in the database, determine if the SUBJECTSTRING corresponds to an ndi.document already in the database. If so, then the ID of that document is returned in SUBJECT_ID and B is 1. If it is not there, and if MAKEIT is 1, then a new entry is made and the document id is returned in SUBJECT_ID. If MAKEIT is 0, and it is not there, then B is 0 and SUBJECT_ID is empty. id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.subject/id is inherited from superclass did.ido isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.subject.isvalid is inherited from superclass did.ido isvalidlocalidentifierstring - is this a valid local identifier string? [B,MSG] = ISVALIDLOCALIDENTIFIERSTRING(LOCAL_IDENTIFIER) Returns 1 if the input LOCAL_IDENTIFIER is a character string and if it has an '@' in it. If B is 0, then an error message string is returned in MSG. newdocument - return a new database document of type ndi.document based on a subject NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_SUBJECT_OBJ) Creates a new ndi.document of type 'subject'. searchquery - return a search query for an ndi.document based on this element SQ = SEARCHQUERY(NDI_SUBJECT_OBJ) subject - create a new ndi.subject object NDI_SUBJECT_OBJ = ndi.subject(LOCAL_IDENTIFIER, DESCRIPTION) or NDI_SUBJECT_OBJ = ndi.subject(NDI_SESSION_OBJ, NDI_SUBJECT_DOCUMENT) Creates an ndi.subject object, either from a local identifier name or an ndi.session object and an ndi.document that describes the ndi.subject object. Documentation for ndi.subject/subject doc ndi.subject unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.subject.unique_id is inherited from superclass did.ido","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/toolboxdir.m/","text":"ndi.toolboxdir ndi.toolboxdir is a function. folderPath = ndi.toolboxdir","title":"ndi.toolboxdir"},{"location":"NDI-matlab/reference/%2Bndi/toolboxdir.m/#nditoolboxdir","text":"ndi.toolboxdir is a function. folderPath = ndi.toolboxdir","title":"ndi.toolboxdir"},{"location":"NDI-matlab/reference/%2Bndi/validate.m/","text":"CLASS ndi.validate Validate a ndi_document to ensure that the type of its properties match with the expected type according to its schema. Most of the logic behind is implemented by Java using everit-org's json-schema library: https://github.com/everit-org/json-schema, a JSON Schema Validator for Java, based on org.json API. It implements the DRAFT 7 version of the JSON Schema: https://json-schema.org/ Superclasses none Properties Property Description validators reports is_valid is the ndi.document valid or not errormsg errormsg_this errormsg_super errormsg_depends_on Methods Method Description checkJavaPath Check that ndi-validator is on the java class path extract_schema Extract the content of the ndi.document's extractnamefromdefinition File name contains \".json\" extension load_format_validator readHashMap an instance of java.util.HashMAP replace_ndipath ndi.validate.replace_ndipath is a function. throw_error ndi.validate/throw_error is a function. validate Validate a ndi_document to ensure that the type of its properties Methods help checkJavaPath - Check that ndi-validator is on the java class path extract_schema - Extract the content of the ndi.document's corresponding schema SCHEMA_JSON = EXTRACT_SCHEMA(NDI_DOCUMENT_OBJ) extractnamefromdefinition - File name contains \".json\" extension Remove the file extension NAME = NDI.VALIDATE.EXTRACTNAMEFROMDEFINITION(STR) load_format_validator - ** LOAD the the list of FormatValidator configured based on the JSON file ndi_validate_config.json readHashMap - an instance of java.util.HashMAP turn an instance of java.util.hashmap into string useful for displaying the error messages STR = READHASHMAP(JAVA_HASHMAP) replace_ndipath - ndi.validate.replace_ndipath is a function. new_path = ndi.validate.replace_ndipath(path) throw_error - ndi.validate/throw_error is a function. throw_error(ndi_validate_obj) validate - Validate a ndi_document to ensure that the type of its properties match with the expected type according to its schema. Most of the logic behind is implemented by Java using everit-org's json-schema library: https://github.com/everit-org/json-schema, a JSON Schema Validator for Java, based on org.json API. It implements the DRAFT 7 version of the JSON Schema: https://json-schema.org/ Documentation for ndi.validate/validate doc ndi.validate","title":"ndi.validate"},{"location":"NDI-matlab/reference/%2Bndi/validate.m/#class-ndivalidate","text":"Validate a ndi_document to ensure that the type of its properties match with the expected type according to its schema. Most of the logic behind is implemented by Java using everit-org's json-schema library: https://github.com/everit-org/json-schema, a JSON Schema Validator for Java, based on org.json API. It implements the DRAFT 7 version of the JSON Schema: https://json-schema.org/","title":"CLASS ndi.validate"},{"location":"NDI-matlab/reference/%2Bndi/validate.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/validate.m/#properties","text":"Property Description validators reports is_valid is the ndi.document valid or not errormsg errormsg_this errormsg_super errormsg_depends_on","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/validate.m/#methods","text":"Method Description checkJavaPath Check that ndi-validator is on the java class path extract_schema Extract the content of the ndi.document's extractnamefromdefinition File name contains \".json\" extension load_format_validator readHashMap an instance of java.util.HashMAP replace_ndipath ndi.validate.replace_ndipath is a function. throw_error ndi.validate/throw_error is a function. validate Validate a ndi_document to ensure that the type of its properties","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/validate.m/#methods-help","text":"checkJavaPath - Check that ndi-validator is on the java class path extract_schema - Extract the content of the ndi.document's corresponding schema SCHEMA_JSON = EXTRACT_SCHEMA(NDI_DOCUMENT_OBJ) extractnamefromdefinition - File name contains \".json\" extension Remove the file extension NAME = NDI.VALIDATE.EXTRACTNAMEFROMDEFINITION(STR) load_format_validator - ** LOAD the the list of FormatValidator configured based on the JSON file ndi_validate_config.json readHashMap - an instance of java.util.HashMAP turn an instance of java.util.hashmap into string useful for displaying the error messages STR = READHASHMAP(JAVA_HASHMAP) replace_ndipath - ndi.validate.replace_ndipath is a function. new_path = ndi.validate.replace_ndipath(path) throw_error - ndi.validate/throw_error is a function. throw_error(ndi_validate_obj) validate - Validate a ndi_document to ensure that the type of its properties match with the expected type according to its schema. Most of the logic behind is implemented by Java using everit-org's json-schema library: https://github.com/everit-org/json-schema, a JSON Schema Validator for Java, based on org.json API. It implements the DRAFT 7 version of the JSON Schema: https://json-schema.org/ Documentation for ndi.validate/validate doc ndi.validate","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/version.m/","text":"ndi.version NDI_VERSION - return the version string for NDI [V, URL] = ndi.version() Return the Git version string V for the currently installed version of NDI. URL is the url of the NDI distribution. Example: v = ndi.version()","title":"ndi.version"},{"location":"NDI-matlab/reference/%2Bndi/version.m/#ndiversion","text":"NDI_VERSION - return the version string for NDI [V, URL] = ndi.version() Return the Git version string V for the currently installed version of NDI. URL is the url of the NDI distribution. Example: v = ndi.version()","title":"ndi.version"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/appdoc.m/","text":"CLASS ndi.app.appdoc ndi.app.appdoc - create a new ndi.app.appdoc document NDI_APPDOC_OBJ = ndi.app.appdoc(DOC_TYPES, DOC_DOCUMENT_TYPES, DOC_SESSION) Creates and initializes a new ndi.app.appdoc object. DOC_TYPES should be a cell array of strings describing the internal names of the document types. DOC_DOCUMENT_TYPES should be a cell array of strings describing the NDI_document datatypes for each parameter document. NOC_SESSION should be an ndi.session object that is used to access the connected database. Example: ndi_app_appdoc_obj = ndi.app.appdoc({'extraction_doc'},{'spike_extraction_parameters'}); Superclasses none Properties Property Description doc_types types of the parameter documents; the app developer can choose (cell array) doc_document_types NDI_document datatypes for each doc doc_session session to use to access the database Methods Method Description add_appdoc Load data from an application document appdoc create a new ndi.app.appdoc document appdoc_description a function that prints a description of all appdoc types clear_appdoc remove an ndi.app.appdoc document from a session database defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters find_appdoc find an ndi.app.appdoc document in the session database isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? loaddata_appdoc Load data from an application document struct2doc create an ndi.document from an input structure and input parameters Methods help add_appdoc - Load data from an application document [...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ... APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments]) Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT. [additional inputs] are used to find or specify the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than 1 if the document already exists). If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT. This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [additional inputs] already exists: DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- 'Error' | An error is generating indicating the document exists. 'NoAction' | The existing document is left alone. The existing ndi.document | is returned in DOC. 'Replace' | Replace the document; note that this deletes all NDI_DOCUMENTS | that depend on the original. 'ReplaceIfDifferent' | Conditionally replace the document, but only if the | the data structures that define the document are not equal. appdoc - create a new ndi.app.appdoc document NDI_APPDOC_OBJ = ndi.app.appdoc(DOC_TYPES, DOC_DOCUMENT_TYPES, DOC_SESSION) Creates and initializes a new ndi.app.appdoc object. DOC_TYPES should be a cell array of strings describing the internal names of the document types. DOC_DOCUMENT_TYPES should be a cell array of strings describing the NDI_document datatypes for each parameter document. NOC_SESSION should be an ndi.session object that is used to access the connected database. Example: ndi_app_appdoc_obj = ndi.app.appdoc({'extraction_doc'},{'spike_extraction_parameters'}); Documentation for ndi.app.appdoc/appdoc doc ndi.app.appdoc appdoc_description - a function that prints a description of all appdoc types Every subclass should override this function to describe the APPDOC types available to the subclass. It should follow the following form. -------------------- The APPDOCs available to this class are the following: APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'doctype1' | The first app document type. (in the base class, there are no APPDOCS; in subclasses, the document types should appear here) (here, 'doctype1' is a dummy example.) ---------------------------------------------------------------------------------------------- APPDOC 1: DOCTYPE1 ---------------------------------------------------------------------------------------------- --------------------- | DOCTYPE1 -- ABOUT | --------------------- DOCTYPE documents store X. It DEPENDS ON documents Y and Z. Definition: app/myapp/doctype1 -------------------------- | DOCTYPE1 -- CREATION | -------------------------- DOC = STRUCT2DOC(NDI_APPDOC_OBJ, 'doctype1', DOCTYPE1PARAMS, ...) DOCTYPE1PARAMS should contain the following fields: Fieldname | Description ------------------------------------------------------------------------- field1 | field1 description overlap | field2 description ------------------------ | DOCTYPE1 - FINDING | ------------------------ [DOCTYPE1_DOC] = FIND_APPDOC(NDI_APPDOC_OBJ, 'doctype1', INPUT1, INPUT2, ...) INPUTS: INPUT1 - first input needed to find doctype1 documents INPUT2 - the second input needed to find doctype1 documents OUTPUT: DOCTYPE1_DOC - the ndi.document of the application document DOCTYPE1 ------------------------ | DOCTYPE1 - LOADING | ------------------------ [OUTPUT1,OUTPUT2,...,DOCTYPE1_DOC] = LOADDOC_APPDOC(NDI_APPDOC_OBJ, ... 'doctype1', INPUT1, INPUT2,...); INPUTS: INPUT1 - first input needed to find doctype1 documents INPUT2 - the second input needed to find doctype1 documents OUTPUT: OUTPUT1 - the first type of loaded data contained in DOCTYPE1 documents OUTPUT2 - the second type of loaded data contained in DOCTYPE1 documents (If there were more appdoc types, list them here...) clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Deletes the app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. B is 1 if the document is found, and 0 otherwise. defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE) Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object. In the base class, the blank version of the ndi.document is read in and the default structure is built from the ndi.document's class property list. doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this uses the property info in the ndi.document to load the data structure. find_appdoc - find an ndi.app.appdoc document in the session database DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Using search criteria that is supported by [additional inputs], FIND_APPDOC searches the database for the ndi.document object DOC that is described by APPDOC_TYPE. DOC is always a cell array of all matching NDI_DOCUMENTs. In this superclass, empty is always returned. Subclasses should override this function to search for each document type. The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION. isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. In the base class, this is true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is, B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2). isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise. In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.' loaddata_appdoc - Load data from an application document [...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments]) Loads the data from app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. In the base class, this always returns empty. This function should be overridden by each subclass. The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION. struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this always returns empty. It must be overridden in subclasses. The documentation for overridden functions should be in the function APPDOC_DESCRIPTION.","title":"ndi.app.appdoc"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/appdoc.m/#class-ndiappappdoc","text":"ndi.app.appdoc - create a new ndi.app.appdoc document NDI_APPDOC_OBJ = ndi.app.appdoc(DOC_TYPES, DOC_DOCUMENT_TYPES, DOC_SESSION) Creates and initializes a new ndi.app.appdoc object. DOC_TYPES should be a cell array of strings describing the internal names of the document types. DOC_DOCUMENT_TYPES should be a cell array of strings describing the NDI_document datatypes for each parameter document. NOC_SESSION should be an ndi.session object that is used to access the connected database. Example: ndi_app_appdoc_obj = ndi.app.appdoc({'extraction_doc'},{'spike_extraction_parameters'});","title":"CLASS ndi.app.appdoc"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/appdoc.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/appdoc.m/#properties","text":"Property Description doc_types types of the parameter documents; the app developer can choose (cell array) doc_document_types NDI_document datatypes for each doc doc_session session to use to access the database","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/appdoc.m/#methods","text":"Method Description add_appdoc Load data from an application document appdoc create a new ndi.app.appdoc document appdoc_description a function that prints a description of all appdoc types clear_appdoc remove an ndi.app.appdoc document from a session database defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters find_appdoc find an ndi.app.appdoc document in the session database isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? loaddata_appdoc Load data from an application document struct2doc create an ndi.document from an input structure and input parameters","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/appdoc.m/#methods-help","text":"add_appdoc - Load data from an application document [...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ... APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments]) Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT. [additional inputs] are used to find or specify the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than 1 if the document already exists). If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT. This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [additional inputs] already exists: DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- 'Error' | An error is generating indicating the document exists. 'NoAction' | The existing document is left alone. The existing ndi.document | is returned in DOC. 'Replace' | Replace the document; note that this deletes all NDI_DOCUMENTS | that depend on the original. 'ReplaceIfDifferent' | Conditionally replace the document, but only if the | the data structures that define the document are not equal. appdoc - create a new ndi.app.appdoc document NDI_APPDOC_OBJ = ndi.app.appdoc(DOC_TYPES, DOC_DOCUMENT_TYPES, DOC_SESSION) Creates and initializes a new ndi.app.appdoc object. DOC_TYPES should be a cell array of strings describing the internal names of the document types. DOC_DOCUMENT_TYPES should be a cell array of strings describing the NDI_document datatypes for each parameter document. NOC_SESSION should be an ndi.session object that is used to access the connected database. Example: ndi_app_appdoc_obj = ndi.app.appdoc({'extraction_doc'},{'spike_extraction_parameters'}); Documentation for ndi.app.appdoc/appdoc doc ndi.app.appdoc appdoc_description - a function that prints a description of all appdoc types Every subclass should override this function to describe the APPDOC types available to the subclass. It should follow the following form. -------------------- The APPDOCs available to this class are the following: APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'doctype1' | The first app document type. (in the base class, there are no APPDOCS; in subclasses, the document types should appear here) (here, 'doctype1' is a dummy example.) ---------------------------------------------------------------------------------------------- APPDOC 1: DOCTYPE1 ---------------------------------------------------------------------------------------------- --------------------- | DOCTYPE1 -- ABOUT | --------------------- DOCTYPE documents store X. It DEPENDS ON documents Y and Z. Definition: app/myapp/doctype1 -------------------------- | DOCTYPE1 -- CREATION | -------------------------- DOC = STRUCT2DOC(NDI_APPDOC_OBJ, 'doctype1', DOCTYPE1PARAMS, ...) DOCTYPE1PARAMS should contain the following fields: Fieldname | Description ------------------------------------------------------------------------- field1 | field1 description overlap | field2 description ------------------------ | DOCTYPE1 - FINDING | ------------------------ [DOCTYPE1_DOC] = FIND_APPDOC(NDI_APPDOC_OBJ, 'doctype1', INPUT1, INPUT2, ...) INPUTS: INPUT1 - first input needed to find doctype1 documents INPUT2 - the second input needed to find doctype1 documents OUTPUT: DOCTYPE1_DOC - the ndi.document of the application document DOCTYPE1 ------------------------ | DOCTYPE1 - LOADING | ------------------------ [OUTPUT1,OUTPUT2,...,DOCTYPE1_DOC] = LOADDOC_APPDOC(NDI_APPDOC_OBJ, ... 'doctype1', INPUT1, INPUT2,...); INPUTS: INPUT1 - first input needed to find doctype1 documents INPUT2 - the second input needed to find doctype1 documents OUTPUT: OUTPUT1 - the first type of loaded data contained in DOCTYPE1 documents OUTPUT2 - the second type of loaded data contained in DOCTYPE1 documents (If there were more appdoc types, list them here...) clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Deletes the app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. B is 1 if the document is found, and 0 otherwise. defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE) Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object. In the base class, the blank version of the ndi.document is read in and the default structure is built from the ndi.document's class property list. doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this uses the property info in the ndi.document to load the data structure. find_appdoc - find an ndi.app.appdoc document in the session database DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Using search criteria that is supported by [additional inputs], FIND_APPDOC searches the database for the ndi.document object DOC that is described by APPDOC_TYPE. DOC is always a cell array of all matching NDI_DOCUMENTs. In this superclass, empty is always returned. Subclasses should override this function to search for each document type. The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION. isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. In the base class, this is true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is, B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2). isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise. In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.' loaddata_appdoc - Load data from an application document [...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments]) Loads the data from app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. In the base class, this always returns empty. This function should be overridden by each subclass. The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION. struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this always returns empty. It must be overridden in subclasses. The documentation for overridden functions should be in the function APPDOC_DESCRIPTION.","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/markgarbage.m/","text":"CLASS ndi.app.markgarbage ndi.app.markgarbage - an application for marking portions of recordings as \"garbage\" that shouldn't be analyzed **Example 1**: Mark a time period as VALID (the rest of the interval is \"garbage\"), on an ndi.element E from ndi.session S G = ndi.app.markgarbage(S); % create app instance epoch_id = 'myepochid'; timeref = ndi.time.timereference(E, 'dev_local_time', epoch_id, 0); % time reference is local time on ndi.element E t0 = 10; t1 = 100; % mark from 10 to 100 seconds as valid G.markvalidinterval(E, t0, timeref, t1, timeref); **Example 2**: Clear previously marked garbage periods on an ndi.element E from ndi.session S G = ndi.app.markgarbage(S); % create app instance G.clearvalidinterval(E); Superclasses ndi.app , ndi.documentservice Properties Property Description session name Methods Method Description clearvalidinterval clear all 'valid_interval' records for an ndi.epoch.epochset from session database identifyvalidintervals identify valid region within an interval loadvalidinterval Load all valid interval records from session database markgarbage an app to help exclude garbage data from sessions markvalidinterval mark a valid intervalin an epoch (all else is garbage) newdocument return a new database document of type ndi.document based on an app savevalidinterval save a valid interval structure to the session database searchquery return a search query for an ndi.document related to this app varappname return the name of the application for use in variable creation version_url return the app version and url Methods help clearvalidinterval - clear all 'valid_interval' records for an ndi.epoch.epochset from session database B = CLEARVALIDINTERVAL(NDI_APP_MARKGARBAGE_OBJ, NDI_EPOCHSET_OBJ) Clears all valid interval entries from the session database for object NDI_EPOCHSET_OBJ. Returns 1 on success, 0 otherwise. See also: ndi.app.markgarbage/MARKVALIDINTERVAL, ndi.app.markgarbage/SAVEALIDINTERVAL, ... ndi.app.markgarbage/LOADVALIDINTERVAL identifyvalidintervals - identify valid region within an interval INTERVALS = IDENTIFYVALIDINTERVALS(NDI_APP_MARKGARBAGE_OBJ, NDI_EPOCHSET_OBJ, TIMEREF, T0, T1) Examines whether there is a stored 'validinterval' variable by the app 'ndi.app.markgarbage' for this NDI_EPOCHSET_OBJ, and, if so, returns valid intervals [t1_0 t1_1; t2_0 t2_1; ...] indicating valid snips of data within the range T0 T1 (with respect to ndi.time.timereference object TIMEREF). INTERVALS has time with respect to TIMEREF. disp(['Call of identifyvalidintervals..']); loadvalidinterval - Load all valid interval records from session database [VI,MYDOC] = LOADVALIDINTERVAL(NDI_APP_MARKGARBAGE_OBJ, NDI_EPOCHSET_OBJ) Loads stored valid interval records generated by ndi.app.markgarbage/MAKEVALIDINTERVAL MYDOC is the ndi.document that was loaded. markgarbage - an app to help exclude garbage data from sessions NDI_APP_MARKGARBAGE_OBJ = ndi.app.markgarbage(SESSION) Creates a new ndi.app.markgarbage object that can operate on NDI_SESSIONS. The app is named 'ndi.app.markgarbage'. Documentation for ndi.app.markgarbage/markgarbage doc ndi.app.markgarbage markvalidinterval - mark a valid intervalin an epoch (all else is garbage) B = MARKVALIDINTERVAL(NDI_APP_MARKGARBAGE_APP, NDI_EPOCHSET_OBJ, T0, TIMEREF_T0, ... T1, TIMEREF_T1) Saves a variable marking a valid interval from T0 to T1 with respect to an ndi.time.timereference object TIMEREF_T0 (for T0) and TIMEREF_T1 (for T1) for an ndi.epoch.epochset object NDI_EPOCHSET_OBJ. Examples of ndi.epoch.epochset objects include ndi.daq.system and ndi.probe and their subclasses. TIMEREF_T0 and TIMEREF_T1 are saved as a name and type for looking up later. developer note: might be good idea to make sure these times exist at saving newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). Help for ndi.app.markgarbage/newdocument is inherited from superclass ndi.app savevalidinterval - save a valid interval structure to the session database B = SAVEVALIDINTERVAL(NDI_APP_MARKGARBAGE_OBJ, NDI_EPOCHSET_OBJ, VALIDINTERVALSTRUCT) Saves a VALIDINTERVALSTRUCT to an experiment database, in the appropriate place for the NDI_EPOCHSET_OBJ data. If the entry is a duplicate, it is not saved but b is still 1. searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. Help for ndi.app.markgarbage/searchquery is inherited from superclass ndi.app varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. Help for ndi.app.markgarbage/varappname is inherited from superclass ndi.app version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system. Help for ndi.app.markgarbage/version_url is inherited from superclass ndi.app","title":"ndi.app.markgarbage"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/markgarbage.m/#class-ndiappmarkgarbage","text":"ndi.app.markgarbage - an application for marking portions of recordings as \"garbage\" that shouldn't be analyzed **Example 1**: Mark a time period as VALID (the rest of the interval is \"garbage\"), on an ndi.element E from ndi.session S G = ndi.app.markgarbage(S); % create app instance epoch_id = 'myepochid'; timeref = ndi.time.timereference(E, 'dev_local_time', epoch_id, 0); % time reference is local time on ndi.element E t0 = 10; t1 = 100; % mark from 10 to 100 seconds as valid G.markvalidinterval(E, t0, timeref, t1, timeref); **Example 2**: Clear previously marked garbage periods on an ndi.element E from ndi.session S G = ndi.app.markgarbage(S); % create app instance G.clearvalidinterval(E);","title":"CLASS ndi.app.markgarbage"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/markgarbage.m/#superclasses","text":"ndi.app , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/markgarbage.m/#properties","text":"Property Description session name","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/markgarbage.m/#methods","text":"Method Description clearvalidinterval clear all 'valid_interval' records for an ndi.epoch.epochset from session database identifyvalidintervals identify valid region within an interval loadvalidinterval Load all valid interval records from session database markgarbage an app to help exclude garbage data from sessions markvalidinterval mark a valid intervalin an epoch (all else is garbage) newdocument return a new database document of type ndi.document based on an app savevalidinterval save a valid interval structure to the session database searchquery return a search query for an ndi.document related to this app varappname return the name of the application for use in variable creation version_url return the app version and url","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/markgarbage.m/#methods-help","text":"clearvalidinterval - clear all 'valid_interval' records for an ndi.epoch.epochset from session database B = CLEARVALIDINTERVAL(NDI_APP_MARKGARBAGE_OBJ, NDI_EPOCHSET_OBJ) Clears all valid interval entries from the session database for object NDI_EPOCHSET_OBJ. Returns 1 on success, 0 otherwise. See also: ndi.app.markgarbage/MARKVALIDINTERVAL, ndi.app.markgarbage/SAVEALIDINTERVAL, ... ndi.app.markgarbage/LOADVALIDINTERVAL identifyvalidintervals - identify valid region within an interval INTERVALS = IDENTIFYVALIDINTERVALS(NDI_APP_MARKGARBAGE_OBJ, NDI_EPOCHSET_OBJ, TIMEREF, T0, T1) Examines whether there is a stored 'validinterval' variable by the app 'ndi.app.markgarbage' for this NDI_EPOCHSET_OBJ, and, if so, returns valid intervals [t1_0 t1_1; t2_0 t2_1; ...] indicating valid snips of data within the range T0 T1 (with respect to ndi.time.timereference object TIMEREF). INTERVALS has time with respect to TIMEREF. disp(['Call of identifyvalidintervals..']); loadvalidinterval - Load all valid interval records from session database [VI,MYDOC] = LOADVALIDINTERVAL(NDI_APP_MARKGARBAGE_OBJ, NDI_EPOCHSET_OBJ) Loads stored valid interval records generated by ndi.app.markgarbage/MAKEVALIDINTERVAL MYDOC is the ndi.document that was loaded. markgarbage - an app to help exclude garbage data from sessions NDI_APP_MARKGARBAGE_OBJ = ndi.app.markgarbage(SESSION) Creates a new ndi.app.markgarbage object that can operate on NDI_SESSIONS. The app is named 'ndi.app.markgarbage'. Documentation for ndi.app.markgarbage/markgarbage doc ndi.app.markgarbage markvalidinterval - mark a valid intervalin an epoch (all else is garbage) B = MARKVALIDINTERVAL(NDI_APP_MARKGARBAGE_APP, NDI_EPOCHSET_OBJ, T0, TIMEREF_T0, ... T1, TIMEREF_T1) Saves a variable marking a valid interval from T0 to T1 with respect to an ndi.time.timereference object TIMEREF_T0 (for T0) and TIMEREF_T1 (for T1) for an ndi.epoch.epochset object NDI_EPOCHSET_OBJ. Examples of ndi.epoch.epochset objects include ndi.daq.system and ndi.probe and their subclasses. TIMEREF_T0 and TIMEREF_T1 are saved as a name and type for looking up later. developer note: might be good idea to make sure these times exist at saving newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). Help for ndi.app.markgarbage/newdocument is inherited from superclass ndi.app savevalidinterval - save a valid interval structure to the session database B = SAVEVALIDINTERVAL(NDI_APP_MARKGARBAGE_OBJ, NDI_EPOCHSET_OBJ, VALIDINTERVALSTRUCT) Saves a VALIDINTERVALSTRUCT to an experiment database, in the appropriate place for the NDI_EPOCHSET_OBJ data. If the entry is a duplicate, it is not saved but b is still 1. searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. Help for ndi.app.markgarbage/searchquery is inherited from superclass ndi.app varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. Help for ndi.app.markgarbage/varappname is inherited from superclass ndi.app version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system. Help for ndi.app.markgarbage/version_url is inherited from superclass ndi.app","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/oridirtuning.m/","text":"CLASS ndi.app.oridirtuning ndi.app.oridirtuning - an app to calculate and analyze orientation/direction tuning curves NDI_APP_ORIDIRTUNING_OBJ = ndi.app.oridirtuning(SESSION) Creates a new ndi.app.oridirtuning object that can operate on NDI_SESSIONS. The app is named 'ndi.app.oridirtuning'. Superclasses ndi.app , ndi.documentservice , ndi.app.appdoc Properties Property Description session name doc_types doc_document_types doc_session Methods Method Description add_appdoc Load data from an application document appdoc_description a function that prints a description of all appdoc types calculate_all_oridir_indexes ndi.app.oridirtuning/calculate_all_oridir_indexes is a function. calculate_all_tuning_curves ndi.app.oridirtuning/calculate_all_tuning_curves is a function. calculate_oridir_indexes CALCULATE_ORIDIR_INDEXES calculate_tuning_curve calculate an orientation/direction tuning curve from stimulus responses clear_appdoc remove an ndi.app.appdoc document from a session database defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters find_appdoc find an ndi_app_appdoc document in the session database is_oridir_stimulus_response ndi.app.oridirtuning/is_oridir_stimulus_response is a function. isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? loaddata_appdoc Load data from an application document newdocument return a new database document of type ndi.document based on an app oridirtuning an app to calculate and analyze orientation/direction tuning curves plot_oridir_response ndi.app.oridirtuning/plot_oridir_response is a function. searchquery return a search query for an ndi.document related to this app struct2doc create an ndi.document from an input structure and input parameters varappname return the name of the application for use in variable creation version_url return the app version and url Methods help add_appdoc - Load data from an application document [...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ... APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments]) Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT. [additional inputs] are used to find or specify the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than 1 if the document already exists). If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT. This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [additional inputs] already exists: DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- 'Error' | An error is generating indicating the document exists. 'NoAction' | The existing document is left alone. The existing ndi.document | is returned in DOC. 'Replace' | Replace the document; note that this deletes all NDI_DOCUMENTS | that depend on the original. 'ReplaceIfDifferent' | Conditionally replace the document, but only if the | the data structures that define the document are not equal. Help for ndi.app.oridirtuning/add_appdoc is inherited from superclass ndi.app.appdoc appdoc_description - a function that prints a description of all appdoc types For ndi_app_oridirtuning, there are the following types: APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'orientation_direction_tuning'| A document that describes the parameters for orientation and | direction tuning curves 'tuningcurve' | A document that describes the parameters for a stimulus tuning | curves ---------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------- APPDOC 1: ORIENTATION_DIRECTION_TUNING ---------------------------------------------------------------------------------------------- ----------------------------------------- | ORIENTATION_DIRECTION_TUNING -- ABOUT | ----------------------------------------- ORIENTATION_TUNING_DIRECTION documents parameters for the orientation and direction tuning curves. Depends on element_id and stimulus_tuningcurve_id. Definition: stimulus/vision/oridir/orientation_direction_tuning.json -------------------------------------------- | ORIENTATION_DIRECTION_TUNING -- CREATION | -------------------------------------------- DOC = STRUCT2DOC(NDI_APP_ORIDIRTUNING_OBJ, 'orientation_direction_tuning', APPDOC_STRUCT, ...) APPDOC_STRUCT should contain the following fields: Fieldname | Description ------------------------------------------------------------------------- tuning_doc_id | stimulus_tuningcurve_id of document ------------------------------------------ | ORIENTATION_DIRECTION_TUNING - FINDING | ------------------------------------------ [ORIENTATION_DIRECTION_TUNING_DOC] = FIND_APPDOC(NDI_APP_ORIDIRTUNING_OBJ, 'orientation_direction_tuning', TUNING_DOC, ELEMENT_ID, ...) INPUTS: TUNING_DOC - tuning document ELEMENT_ID - spike element id OUTPUT: ORIENTATION_DIRECTION_TUNING - The ndi.document(s) of the calculated orientation and direction tuning curves ---------------------------------------------------------------------------------------------- APPDOC 2: STIMULUS_TUNINGCURVE ---------------------------------------------------------------------------------------------- --------------------------------- | STIMULUS_TUNINGCURVE -- ABOUT | --------------------------------- STIMULUS_TUNINGCURVE that has response values as a function of stimulus direction or orientation Definition: stimulus/stimulus_tuningcurve.json ------------------------------------ | STIMULUS_TUNINGCURVE -- CREATION | ------------------------------------ DOC = STRUCT2DOC(NDI_APP_ORIDIRTUNING_OBJ, 'stimulus_tuningcurve', APPDOC_STRUCT, ...) APPDOC_STRUCT should contain the following fields: Fieldname | Description ------------------------------------------------------------------------- element_id | spike element id of document ---------------------------------- | STIMULUS_TUNINGCURVE - FINDING | ---------------------------------- [STIMULUS_TUNINGCURVE_DOC] = FIND_APPDOC(NDI_APP_ORIDIRTUNING_OBJ, 'stimulus_tuningcurve', ELEMENT, ...) INPUTS: ELEMENT - first input needed to find doctype1 documents OUTPUT: STIMULUS_TUNINGCURVE - The ndi.document(s) of the specified spike element's stimulus tuning curve calculate_all_oridir_indexes - ndi.app.oridirtuning/calculate_all_oridir_indexes is a function. oriprops = calculate_all_oridir_indexes(ndi_app_oridirtuning_obj, ndi_element_obj, docexistsaction) calculate_all_tuning_curves - ndi.app.oridirtuning/calculate_all_tuning_curves is a function. tuning_doc = calculate_all_tuning_curves(ndi_app_oridirtuning_obj, ndi_element_obj, docexistsaction) calculate_oridir_indexes - CALCULATE_ORIDIR_INDEXES calculate_tuning_curve - calculate an orientation/direction tuning curve from stimulus responses TUNING_DOC = CALCULATE_TUNING_CURVE(NDI_APP_ORIDIRTUNING_OBJ, NDI_ELEMENT_OBJ, NDI_RESPONSE_DOC) clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Deletes the app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. B is 1 if the document is found, and 0 otherwise. Help for ndi.app.oridirtuning/clear_appdoc is inherited from superclass ndi.app.appdoc defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE) Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object. In the base class, the blank version of the ndi.document is read in and the default structure is built from the ndi.document's class property list. Help for ndi.app.oridirtuning/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this uses the property info in the ndi.document to load the data structure. find_appdoc - find an ndi_app_appdoc document in the session database See ndi_app_oridirtuning/APPDOC_DESCRIPTION for documentation. is_oridir_stimulus_response - ndi.app.oridirtuning/is_oridir_stimulus_response is a function. b = is_oridir_stimulus_response(ndi_app_oridirtuning_obj, response_doc) isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. In the base class, this is true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is, B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2). Help for ndi.app.oridirtuning/isequal_appdoc_struct is inherited from superclass ndi.app.appdoc isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise. In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.' Help for ndi.app.oridirtuning/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc loaddata_appdoc - Load data from an application document [...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments]) Loads the data from app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. In the base class, this always returns empty. This function should be overridden by each subclass. The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION. Help for ndi.app.oridirtuning/loaddata_appdoc is inherited from superclass ndi.app.appdoc newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). Help for ndi.app.oridirtuning/newdocument is inherited from superclass ndi.app oridirtuning - an app to calculate and analyze orientation/direction tuning curves NDI_APP_ORIDIRTUNING_OBJ = ndi.app.oridirtuning(SESSION) Creates a new ndi.app.oridirtuning object that can operate on NDI_SESSIONS. The app is named 'ndi.app.oridirtuning'. Documentation for ndi.app.oridirtuning/oridirtuning doc ndi.app.oridirtuning plot_oridir_response - ndi.app.oridirtuning/plot_oridir_response is a function. plot_oridir_response(ndi_app_oridirtuning_obj, oriprops_doc) searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. Help for ndi.app.oridirtuning/searchquery is inherited from superclass ndi.app struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APP_ORIDIRTUNING_OBJ, APPDOC_TYPE, APPDOC_STRUCT, ...) For ndi_app_oridirtuning, one can use an APPDOC_TYPE of the following: APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'orientation_tuning_direction'| A document that describes the parameters to be used for | spike element's orientation tuning direction 'stimulus_tuningcurve' | A document that describes the parameters to be used for | spike element's tuning curve See APPDOC_DESCRIPTION for a list of the parameters. varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. Help for ndi.app.oridirtuning/varappname is inherited from superclass ndi.app version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system. Help for ndi.app.oridirtuning/version_url is inherited from superclass ndi.app","title":"ndi.app.oridirtuning"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/oridirtuning.m/#class-ndiapporidirtuning","text":"ndi.app.oridirtuning - an app to calculate and analyze orientation/direction tuning curves NDI_APP_ORIDIRTUNING_OBJ = ndi.app.oridirtuning(SESSION) Creates a new ndi.app.oridirtuning object that can operate on NDI_SESSIONS. The app is named 'ndi.app.oridirtuning'.","title":"CLASS ndi.app.oridirtuning"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/oridirtuning.m/#superclasses","text":"ndi.app , ndi.documentservice , ndi.app.appdoc","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/oridirtuning.m/#properties","text":"Property Description session name doc_types doc_document_types doc_session","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/oridirtuning.m/#methods","text":"Method Description add_appdoc Load data from an application document appdoc_description a function that prints a description of all appdoc types calculate_all_oridir_indexes ndi.app.oridirtuning/calculate_all_oridir_indexes is a function. calculate_all_tuning_curves ndi.app.oridirtuning/calculate_all_tuning_curves is a function. calculate_oridir_indexes CALCULATE_ORIDIR_INDEXES calculate_tuning_curve calculate an orientation/direction tuning curve from stimulus responses clear_appdoc remove an ndi.app.appdoc document from a session database defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters find_appdoc find an ndi_app_appdoc document in the session database is_oridir_stimulus_response ndi.app.oridirtuning/is_oridir_stimulus_response is a function. isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? loaddata_appdoc Load data from an application document newdocument return a new database document of type ndi.document based on an app oridirtuning an app to calculate and analyze orientation/direction tuning curves plot_oridir_response ndi.app.oridirtuning/plot_oridir_response is a function. searchquery return a search query for an ndi.document related to this app struct2doc create an ndi.document from an input structure and input parameters varappname return the name of the application for use in variable creation version_url return the app version and url","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/oridirtuning.m/#methods-help","text":"add_appdoc - Load data from an application document [...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ... APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments]) Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT. [additional inputs] are used to find or specify the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than 1 if the document already exists). If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT. This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [additional inputs] already exists: DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- 'Error' | An error is generating indicating the document exists. 'NoAction' | The existing document is left alone. The existing ndi.document | is returned in DOC. 'Replace' | Replace the document; note that this deletes all NDI_DOCUMENTS | that depend on the original. 'ReplaceIfDifferent' | Conditionally replace the document, but only if the | the data structures that define the document are not equal. Help for ndi.app.oridirtuning/add_appdoc is inherited from superclass ndi.app.appdoc appdoc_description - a function that prints a description of all appdoc types For ndi_app_oridirtuning, there are the following types: APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'orientation_direction_tuning'| A document that describes the parameters for orientation and | direction tuning curves 'tuningcurve' | A document that describes the parameters for a stimulus tuning | curves ---------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------- APPDOC 1: ORIENTATION_DIRECTION_TUNING ---------------------------------------------------------------------------------------------- ----------------------------------------- | ORIENTATION_DIRECTION_TUNING -- ABOUT | ----------------------------------------- ORIENTATION_TUNING_DIRECTION documents parameters for the orientation and direction tuning curves. Depends on element_id and stimulus_tuningcurve_id. Definition: stimulus/vision/oridir/orientation_direction_tuning.json -------------------------------------------- | ORIENTATION_DIRECTION_TUNING -- CREATION | -------------------------------------------- DOC = STRUCT2DOC(NDI_APP_ORIDIRTUNING_OBJ, 'orientation_direction_tuning', APPDOC_STRUCT, ...) APPDOC_STRUCT should contain the following fields: Fieldname | Description ------------------------------------------------------------------------- tuning_doc_id | stimulus_tuningcurve_id of document ------------------------------------------ | ORIENTATION_DIRECTION_TUNING - FINDING | ------------------------------------------ [ORIENTATION_DIRECTION_TUNING_DOC] = FIND_APPDOC(NDI_APP_ORIDIRTUNING_OBJ, 'orientation_direction_tuning', TUNING_DOC, ELEMENT_ID, ...) INPUTS: TUNING_DOC - tuning document ELEMENT_ID - spike element id OUTPUT: ORIENTATION_DIRECTION_TUNING - The ndi.document(s) of the calculated orientation and direction tuning curves ---------------------------------------------------------------------------------------------- APPDOC 2: STIMULUS_TUNINGCURVE ---------------------------------------------------------------------------------------------- --------------------------------- | STIMULUS_TUNINGCURVE -- ABOUT | --------------------------------- STIMULUS_TUNINGCURVE that has response values as a function of stimulus direction or orientation Definition: stimulus/stimulus_tuningcurve.json ------------------------------------ | STIMULUS_TUNINGCURVE -- CREATION | ------------------------------------ DOC = STRUCT2DOC(NDI_APP_ORIDIRTUNING_OBJ, 'stimulus_tuningcurve', APPDOC_STRUCT, ...) APPDOC_STRUCT should contain the following fields: Fieldname | Description ------------------------------------------------------------------------- element_id | spike element id of document ---------------------------------- | STIMULUS_TUNINGCURVE - FINDING | ---------------------------------- [STIMULUS_TUNINGCURVE_DOC] = FIND_APPDOC(NDI_APP_ORIDIRTUNING_OBJ, 'stimulus_tuningcurve', ELEMENT, ...) INPUTS: ELEMENT - first input needed to find doctype1 documents OUTPUT: STIMULUS_TUNINGCURVE - The ndi.document(s) of the specified spike element's stimulus tuning curve calculate_all_oridir_indexes - ndi.app.oridirtuning/calculate_all_oridir_indexes is a function. oriprops = calculate_all_oridir_indexes(ndi_app_oridirtuning_obj, ndi_element_obj, docexistsaction) calculate_all_tuning_curves - ndi.app.oridirtuning/calculate_all_tuning_curves is a function. tuning_doc = calculate_all_tuning_curves(ndi_app_oridirtuning_obj, ndi_element_obj, docexistsaction) calculate_oridir_indexes - CALCULATE_ORIDIR_INDEXES calculate_tuning_curve - calculate an orientation/direction tuning curve from stimulus responses TUNING_DOC = CALCULATE_TUNING_CURVE(NDI_APP_ORIDIRTUNING_OBJ, NDI_ELEMENT_OBJ, NDI_RESPONSE_DOC) clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Deletes the app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. B is 1 if the document is found, and 0 otherwise. Help for ndi.app.oridirtuning/clear_appdoc is inherited from superclass ndi.app.appdoc defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE) Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object. In the base class, the blank version of the ndi.document is read in and the default structure is built from the ndi.document's class property list. Help for ndi.app.oridirtuning/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this uses the property info in the ndi.document to load the data structure. find_appdoc - find an ndi_app_appdoc document in the session database See ndi_app_oridirtuning/APPDOC_DESCRIPTION for documentation. is_oridir_stimulus_response - ndi.app.oridirtuning/is_oridir_stimulus_response is a function. b = is_oridir_stimulus_response(ndi_app_oridirtuning_obj, response_doc) isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. In the base class, this is true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is, B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2). Help for ndi.app.oridirtuning/isequal_appdoc_struct is inherited from superclass ndi.app.appdoc isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise. In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.' Help for ndi.app.oridirtuning/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc loaddata_appdoc - Load data from an application document [...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments]) Loads the data from app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. In the base class, this always returns empty. This function should be overridden by each subclass. The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION. Help for ndi.app.oridirtuning/loaddata_appdoc is inherited from superclass ndi.app.appdoc newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). Help for ndi.app.oridirtuning/newdocument is inherited from superclass ndi.app oridirtuning - an app to calculate and analyze orientation/direction tuning curves NDI_APP_ORIDIRTUNING_OBJ = ndi.app.oridirtuning(SESSION) Creates a new ndi.app.oridirtuning object that can operate on NDI_SESSIONS. The app is named 'ndi.app.oridirtuning'. Documentation for ndi.app.oridirtuning/oridirtuning doc ndi.app.oridirtuning plot_oridir_response - ndi.app.oridirtuning/plot_oridir_response is a function. plot_oridir_response(ndi_app_oridirtuning_obj, oriprops_doc) searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. Help for ndi.app.oridirtuning/searchquery is inherited from superclass ndi.app struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APP_ORIDIRTUNING_OBJ, APPDOC_TYPE, APPDOC_STRUCT, ...) For ndi_app_oridirtuning, one can use an APPDOC_TYPE of the following: APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'orientation_tuning_direction'| A document that describes the parameters to be used for | spike element's orientation tuning direction 'stimulus_tuningcurve' | A document that describes the parameters to be used for | spike element's tuning curve See APPDOC_DESCRIPTION for a list of the parameters. varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. Help for ndi.app.oridirtuning/varappname is inherited from superclass ndi.app version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system. Help for ndi.app.oridirtuning/version_url is inherited from superclass ndi.app","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikeextractor.m/","text":"CLASS ndi.app.spikeextractor ndi.app.spikeextractor - an app to extract elements found in sessions NDI_APP_SPIKEEXTRACTOR_OBJ = ndi.app.spikeextractor(SESSION) Creates a new ndi_app_spikeextractor object that can operate on NDI_SESSIONS. The app is named 'ndi_app_spikeextractor'. Superclasses ndi.app , ndi.documentservice , ndi.app.appdoc Properties Property Description session name doc_types doc_document_types doc_session Methods Method Description add_appdoc Load data from an application document appdoc_description a function that prints a description of all appdoc types clear_appdoc remove an ndi.app.appdoc document from a session database defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters extract method that extracts spikes from epochs of an NDI_ELEMENT_TIMESERIES_OBJ filter filter data based on a filter structure find_appdoc find an ndi_app_appdoc document in the session database isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? loaddata_appdoc load data from an application document makefilterstruct make a filter structure for a given sampling rate and extraction parameters newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app spikeextractor an app to extract elements found in sessions struct2doc create an ndi.document from an input structure and input parameters varappname return the name of the application for use in variable creation version_url return the app version and url Methods help add_appdoc - Load data from an application document [...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ... APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments]) Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT. [additional inputs] are used to find or specify the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than 1 if the document already exists). If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT. This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [additional inputs] already exists: DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- 'Error' | An error is generating indicating the document exists. 'NoAction' | The existing document is left alone. The existing ndi.document | is returned in DOC. 'Replace' | Replace the document; note that this deletes all NDI_DOCUMENTS | that depend on the original. 'ReplaceIfDifferent' | Conditionally replace the document, but only if the | the data structures that define the document are not equal. Help for ndi.app.spikeextractor/add_appdoc is inherited from superclass ndi.app.appdoc appdoc_description - a function that prints a description of all appdoc types For ndi_app_spikeextractor, there are the following types: APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'extraction_parameters' | A document that describes the parameters to be used for extraction ['extraction_parameters'... | A document that describes modifications to the parameters to be used for extracting '_modification'] | a particular epoch. 'spikewaves' | A document that stores spike waves and spike times found by the extractor in an epoch ---------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------- APPDOC 1: EXTRACTION_PARAMETERS ---------------------------------------------------------------------------------------------- ---------------------------------- | EXTRACTION_PARAMETERS -- ABOUT | ---------------------------------- EXTRACTION_PARAMETERS documents hold the parameters that are to be used to guide the extraction of spikewaves. Definition: app/spikeextractor/extraction_parameters ------------------------------------- | EXTRACTION_PARAMETERS -- CREATION | ------------------------------------- DOC = STRUCT2DOC(NDI_APP_SPIKEEXTRACTOR_OBJ, 'extraction_parameters', EXTRACTION_PARAMS, EXTRACTION_NAME) EXTRACTION_NAME is a string containing the name of the extraction document. EXTRACTION_PARAMS should contain the following fields: Fieldname | Description ------------------------------------------------------------------------- center_range (10) | Range in samples to find spike center overlap (0.5) | Overlap allowed read_time (30) | Number of seconds to read in at a single time refractory_samples (10) | Number of samples to use as a refractory period spike_sample_start (-9) | Samples before the threshold to include % unclear if time or sample spike_sample_stop (20) | Samples after the threshold to include % unclear if time or sample start_time (1) | First sample to read do_filter (1) | Should we perform a filter? (0/1) filter_type | What filter? Default is 'cheby1high' but can also be 'none' ('cheby1high') | filter_low (0) | Low filter frequency filter_high (300) | Filter high frequency filter_order (4) | Filter order filter_ripple (0.8) | Filter ripple parameter threshold_method | Threshold method. Can be \"standard_deviation\" or \"absolute\" threshold_parameter | Threshold parameter. If threshold_method is \"standard_deviation\" then ('standard_deviation') | this parameter is multiplied by the empirical standard deviation. | If \"absolute\", then this value is taken to be the absolute threshold. threshold_sign (-1) | Threshold crossing sign (-1 means high-to-low, 1 means low-to-high) ------------------------------------ | EXTRACTION_PARAMETERS -- FINDING | ------------------------------------ [EXTRACTION_PARAMETERS_DOC] = FIND_APPDOC(NDI_APP_SPIKEEXTRACTOR_OBJ, ... 'extraction_parameters', EXTRACTION_PARAMETERS_NAME) INPUTS: EXTRACTION_PARAMETERS_NAME - the name of the extraction parameter document OUTPUT: Returns the extraction parameters ndi.document with the name EXTRACTION_NAME. ------------------------------------ | EXTRACTION_PARAMETERS -- LOADING | ------------------------------------ [EXTRACTION_PARAMETERS_DOC] = LOADDATA_APPDOC(NDI_APP_SPIKEEXTRACTOR_OBJ, ... 'extraction_parameters', EXTRACTION_NAME) INPUTS: EXTRACTION_PARAMETERS_NAME - the name of the extraction parameter document OUTPUT: Returns the extraction parameters ndi.document with the name EXTRACTION_NAME. ---------------------------------------------------------------------------------------------- APPDOC 2: EXTRACTION_PARAMETERS_MODIFICATION ---------------------------------------------------------------------------------------------- ----------------------------------------------- | EXTRACTION_PARAMETERS_MODIFICATION -- ABOUT | ----------------------------------------------- EXTRACTION_PARAMETERS_MODIFICATION documents allow the user to modify the spike extraction parameters for a specific epoch. Definition: app/spikeextractor/extraction_parameters_modification -------------------------------------------------- | EXTRACTION_PARAMETERS_MODIFICATION -- CREATION | -------------------------------------------------- DOC = STRUCT2DOC(NDI_APP_SPIKEEXTRACTOR_OBJ, 'extraction_parameters_modification', ... EXTRACTION_PARAMS, EXTRACTION_NAME) EXTRACTION_NAME is a string containing the name of the extraction document. EXTRACTION_PARAMS should contain the following fields: Fieldname | Description ------------------------------------------------------------------------- center_range (10) | Range in samples to find spike center overlap (0.5) | Overlap allowed read_time (30) | Number of seconds to read in at a single time refractory_samples (10) | Number of samples to use as a refractory period spike_sample_start (-9) | Samples before the threshold to include % unclear if time or sample spike_sample_stop (20) | Samples after the threshold to include % unclear if time or sample start_time (1) | First sample to read do_filter (1) | Should we perform a filter? (0/1) filter_type | What filter? Default is 'cheby1high' but can also be 'none' ('cheby1high') | filter_low (0) | Low filter frequency filter_high (300) | Filter high frequency filter_order (4) | Filter order filter_ripple (0.8) | Filter ripple parameter threshold_method | Threshold method. Can be \"standard_deviation\" or \"absolute\" threshold_parameter | Threshold parameter. If threshold_method is \"standard_deviation\" then ('standard_deviation') | this parameter is multiplied by the empirical standard deviation. | If \"absolute\", then this value is taken to be the absolute threshold. threshold_sign (-1) | Threshold crossing sign (-1 means high-to-low, 1 means low-to-high) ------------------------------------------------- | EXTRACTION_PARAMETERS_MODIFICATION -- FINDING | ------------------------------------------------- [EXTRACTION_PARAMETERS_MODIFICATION_DOC] = FIND_APPDOC(NDI_APP_SPIKEEXTRACTOR_OBJ, ... 'extraction_parameters_modification', NDI_TIMESERIES_OBJ, EPOCHID, EXTRACTION_NAME) INPUTS: NDI_TIMESERIES_OBJ - the ndi.time.timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUTPUT: Returns the extraction parameters modification ndi.document with the name EXTRACTION_NAME for the named EPOCHID and NDI_TIMESERIES_OBJ. ------------------------------------------------- | EXTRACTION_PARAMETERS_MODIFICATION -- LOADING | ------------------------------------------------- [EXTRACTION_PARAMETERS_DOC] = LOADDATA_APPDOC(NDI_APP_SPIKEEXTRACTOR_OBJ, ... 'extraction_parameters_modification', NDI_TIMESERIES_OBJ, EPOCHID, EXTRACTION_NAME) INPUTS: NDI_TIMESERIES_OBJ - the ndi.time.timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_PARAMETERS_NAME - the name of the extraction parameter document OUTPUT: Returns the extraction parameters modification ndi.document with the name EXTRACTION_NAME. ---------------------------------------------------------------------------------------------- APPDOC 3: SPIKEWAVES ---------------------------------------------------------------------------------------------- ----------------------- | SPIKEWAVES -- ABOUT | ----------------------- SPIKEWAVES documents store the spike waveforms that are read during a spike extraction and the time of each spike in the epoch's local time. It DEPENDS ON the ndi.time.timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that described the extraction. Definition: app/spikeextractor/spikewaves -------------------------- | SPIKEWAVES -- CREATION | -------------------------- Spikewaves documents are created internally by the EXTRACT function ------------------------ | SPIKEWAVES - FINDING | ------------------------ [SPIKEWAVES_DOC] = FIND_APPDOC(NDI_APP_SPIKEEXTRACTOR_OBJ, 'spikewaves', ... NDI_TIMESERIES_OBJ, EPOCH, EXTRACTION_NAME) INPUTS: NDI_TIMESERIES_OBJ - the ndi.time.timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUTPUT: SPIKEWAVES_DOC - the ndi.document of the extracted spike waves. ------------------------ | SPIKEWAVES - LOADING | ------------------------ [CONCATENATED_SPIKES, WAVEPARAMETERS, SPIKETIMES, SPIKEWAVES_DOC] = LOADDATA_APPDOC(NDI_APP_SPIKEEXTRACTOR_OBJ, 'spikewaves', ... NDI_TIMESERIES_OBJ, EPOCH, EXTRACTION_NAME) INPUTS: NDI_TIMESERIES_OBJ - the ndi.time.timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUTPUTS: CONCATENATED_SPIKES - an array of spike waveforms SxDxN, where S is the number of samples per channel of each waveform, D is the number of channels (dimension), and N is the number of spike waveforms WAVEPARAMETERS - a structure with the following fields: Field | Description -------------------------------------------------------- numchannels | Number of channels in each spike S0 | Number of samples before spike center | (usually negative) S1 | Number of samples after spike center | (usually positive) samplerate | The sampling rate SPIKETIMES - the time of each spike wave, in local epoch time coordinates SPIKEWAVES_DOC - the ndi.document of the extracted spike waves. clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Deletes the app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. B is 1 if the document is found, and 0 otherwise. Help for ndi.app.spikeextractor/clear_appdoc is inherited from superclass ndi.app.appdoc defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE) Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object. In the base class, the blank version of the ndi.document is read in and the default structure is built from the ndi.document's class property list. Help for ndi.app.spikeextractor/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this uses the property info in the ndi.document to load the data structure. Help for ndi.app.spikeextractor/doc2struct is inherited from superclass ndi.app.appdoc extract - method that extracts spikes from epochs of an NDI_ELEMENT_TIMESERIES_OBJ EXTRACT(NDI_APP_SPIKEEXTRACTOR_OBJ, NDI_TIMESERIES_OBJ, EPOCH, EXTRACTION_NAME, [REDO], [T0 T1]) TYPE is the type of probe if any combination of NAME and TYPE must return at least one probe from session EPOCH is an index number or id to select epoch to extract, or can be a cell array of epoch number/ids EXTRACTION_NAME name given to find ndi_doc in database REDO - if 1, then extraction is re-done for epochs even if it has been done before with same extraction parameters [T0 T1] - if given, then restricts the extraction to be between times t0 and t1; default is [-Inf Inf] filter - filter data based on a filter structure DATA_OUT = FILTER(NDI_APP_SPIKEEXTRACTOR_OBJ, DATA_IN, FILTERSTRUCT) Filters data based on FILTERSTRUCT (see ndi_app_spikeextractor/MAKEFILTERSTRUCT) find_appdoc - find an ndi_app_appdoc document in the session database See ndi_app_spikeextractor/APPDOC_DESCRIPTION for documentation. See also: ndi_app_spikeextractor/APPDOC_DESCRIPTION isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. In the base class, this is true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is, B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2). Help for ndi.app.spikeextractor/isequal_appdoc_struct is inherited from superclass ndi.app.appdoc isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APP_SPIKEEXTRACTOR_OBJ, APPDOC_TYPE, APPDOC_STRUCT) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise. For ndi_app_spikeextractor, one can use an APPDOC_TYPE of the following: APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'extraction_parameters' | A document that describes the parameters to be used for extraction loaddata_appdoc - load data from an application document See ndi_app_spikeextractor/APPDOC_DESCRIPTION for documentation. See also: ndi_app_spikeextractor/APPDOC_DESCRIPTION makefilterstruct - make a filter structure for a given sampling rate and extraction parameters FILTERSTRUCT = MAKEFILTERSTRUCT(NDI_APP_SPIKEEXTRACTOR_OBJ, EXTRACTION_DOC, SAMPLE_RATE) Given an EXTRACTION_DOC of parameters and a sampling rate SAMPLE_RATE, make a filter structure for passing to FILTERDATA. newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). Help for ndi.app.spikeextractor/newdocument is inherited from superclass ndi.app searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. Help for ndi.app.spikeextractor/searchquery is inherited from superclass ndi.app spikeextractor - an app to extract elements found in sessions NDI_APP_SPIKEEXTRACTOR_OBJ = ndi.app.spikeextractor(SESSION) Creates a new ndi_app_spikeextractor object that can operate on NDI_SESSIONS. The app is named 'ndi_app_spikeextractor'. Documentation for ndi.app.spikeextractor/spikeextractor doc ndi.app.spikeextractor struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APP_SPIKEEXTRACTOR_OBJ, APPDOC_TYPE, APPDOC_STRUCT, ...) For ndi_app_spikeextractor, one can use an APPDOC_TYPE of the following: APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'extraction_parameters' | A document that describes the parameters to be used for extraction ['extraction_parameters'... | A document that modifies the parameters to be used for extraction for a single epoch '_modification'] | See APPDOC_DESCRIPTION for a list of the parameters. varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. Help for ndi.app.spikeextractor/varappname is inherited from superclass ndi.app version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system. Help for ndi.app.spikeextractor/version_url is inherited from superclass ndi.app","title":"ndi.app.spikeextractor"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikeextractor.m/#class-ndiappspikeextractor","text":"ndi.app.spikeextractor - an app to extract elements found in sessions NDI_APP_SPIKEEXTRACTOR_OBJ = ndi.app.spikeextractor(SESSION) Creates a new ndi_app_spikeextractor object that can operate on NDI_SESSIONS. The app is named 'ndi_app_spikeextractor'.","title":"CLASS ndi.app.spikeextractor"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikeextractor.m/#superclasses","text":"ndi.app , ndi.documentservice , ndi.app.appdoc","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikeextractor.m/#properties","text":"Property Description session name doc_types doc_document_types doc_session","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikeextractor.m/#methods","text":"Method Description add_appdoc Load data from an application document appdoc_description a function that prints a description of all appdoc types clear_appdoc remove an ndi.app.appdoc document from a session database defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters extract method that extracts spikes from epochs of an NDI_ELEMENT_TIMESERIES_OBJ filter filter data based on a filter structure find_appdoc find an ndi_app_appdoc document in the session database isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? loaddata_appdoc load data from an application document makefilterstruct make a filter structure for a given sampling rate and extraction parameters newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app spikeextractor an app to extract elements found in sessions struct2doc create an ndi.document from an input structure and input parameters varappname return the name of the application for use in variable creation version_url return the app version and url","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikeextractor.m/#methods-help","text":"add_appdoc - Load data from an application document [...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ... APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments]) Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT. [additional inputs] are used to find or specify the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than 1 if the document already exists). If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT. This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [additional inputs] already exists: DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- 'Error' | An error is generating indicating the document exists. 'NoAction' | The existing document is left alone. The existing ndi.document | is returned in DOC. 'Replace' | Replace the document; note that this deletes all NDI_DOCUMENTS | that depend on the original. 'ReplaceIfDifferent' | Conditionally replace the document, but only if the | the data structures that define the document are not equal. Help for ndi.app.spikeextractor/add_appdoc is inherited from superclass ndi.app.appdoc appdoc_description - a function that prints a description of all appdoc types For ndi_app_spikeextractor, there are the following types: APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'extraction_parameters' | A document that describes the parameters to be used for extraction ['extraction_parameters'... | A document that describes modifications to the parameters to be used for extracting '_modification'] | a particular epoch. 'spikewaves' | A document that stores spike waves and spike times found by the extractor in an epoch ---------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------- APPDOC 1: EXTRACTION_PARAMETERS ---------------------------------------------------------------------------------------------- ---------------------------------- | EXTRACTION_PARAMETERS -- ABOUT | ---------------------------------- EXTRACTION_PARAMETERS documents hold the parameters that are to be used to guide the extraction of spikewaves. Definition: app/spikeextractor/extraction_parameters ------------------------------------- | EXTRACTION_PARAMETERS -- CREATION | ------------------------------------- DOC = STRUCT2DOC(NDI_APP_SPIKEEXTRACTOR_OBJ, 'extraction_parameters', EXTRACTION_PARAMS, EXTRACTION_NAME) EXTRACTION_NAME is a string containing the name of the extraction document. EXTRACTION_PARAMS should contain the following fields: Fieldname | Description ------------------------------------------------------------------------- center_range (10) | Range in samples to find spike center overlap (0.5) | Overlap allowed read_time (30) | Number of seconds to read in at a single time refractory_samples (10) | Number of samples to use as a refractory period spike_sample_start (-9) | Samples before the threshold to include % unclear if time or sample spike_sample_stop (20) | Samples after the threshold to include % unclear if time or sample start_time (1) | First sample to read do_filter (1) | Should we perform a filter? (0/1) filter_type | What filter? Default is 'cheby1high' but can also be 'none' ('cheby1high') | filter_low (0) | Low filter frequency filter_high (300) | Filter high frequency filter_order (4) | Filter order filter_ripple (0.8) | Filter ripple parameter threshold_method | Threshold method. Can be \"standard_deviation\" or \"absolute\" threshold_parameter | Threshold parameter. If threshold_method is \"standard_deviation\" then ('standard_deviation') | this parameter is multiplied by the empirical standard deviation. | If \"absolute\", then this value is taken to be the absolute threshold. threshold_sign (-1) | Threshold crossing sign (-1 means high-to-low, 1 means low-to-high) ------------------------------------ | EXTRACTION_PARAMETERS -- FINDING | ------------------------------------ [EXTRACTION_PARAMETERS_DOC] = FIND_APPDOC(NDI_APP_SPIKEEXTRACTOR_OBJ, ... 'extraction_parameters', EXTRACTION_PARAMETERS_NAME) INPUTS: EXTRACTION_PARAMETERS_NAME - the name of the extraction parameter document OUTPUT: Returns the extraction parameters ndi.document with the name EXTRACTION_NAME. ------------------------------------ | EXTRACTION_PARAMETERS -- LOADING | ------------------------------------ [EXTRACTION_PARAMETERS_DOC] = LOADDATA_APPDOC(NDI_APP_SPIKEEXTRACTOR_OBJ, ... 'extraction_parameters', EXTRACTION_NAME) INPUTS: EXTRACTION_PARAMETERS_NAME - the name of the extraction parameter document OUTPUT: Returns the extraction parameters ndi.document with the name EXTRACTION_NAME. ---------------------------------------------------------------------------------------------- APPDOC 2: EXTRACTION_PARAMETERS_MODIFICATION ---------------------------------------------------------------------------------------------- ----------------------------------------------- | EXTRACTION_PARAMETERS_MODIFICATION -- ABOUT | ----------------------------------------------- EXTRACTION_PARAMETERS_MODIFICATION documents allow the user to modify the spike extraction parameters for a specific epoch. Definition: app/spikeextractor/extraction_parameters_modification -------------------------------------------------- | EXTRACTION_PARAMETERS_MODIFICATION -- CREATION | -------------------------------------------------- DOC = STRUCT2DOC(NDI_APP_SPIKEEXTRACTOR_OBJ, 'extraction_parameters_modification', ... EXTRACTION_PARAMS, EXTRACTION_NAME) EXTRACTION_NAME is a string containing the name of the extraction document. EXTRACTION_PARAMS should contain the following fields: Fieldname | Description ------------------------------------------------------------------------- center_range (10) | Range in samples to find spike center overlap (0.5) | Overlap allowed read_time (30) | Number of seconds to read in at a single time refractory_samples (10) | Number of samples to use as a refractory period spike_sample_start (-9) | Samples before the threshold to include % unclear if time or sample spike_sample_stop (20) | Samples after the threshold to include % unclear if time or sample start_time (1) | First sample to read do_filter (1) | Should we perform a filter? (0/1) filter_type | What filter? Default is 'cheby1high' but can also be 'none' ('cheby1high') | filter_low (0) | Low filter frequency filter_high (300) | Filter high frequency filter_order (4) | Filter order filter_ripple (0.8) | Filter ripple parameter threshold_method | Threshold method. Can be \"standard_deviation\" or \"absolute\" threshold_parameter | Threshold parameter. If threshold_method is \"standard_deviation\" then ('standard_deviation') | this parameter is multiplied by the empirical standard deviation. | If \"absolute\", then this value is taken to be the absolute threshold. threshold_sign (-1) | Threshold crossing sign (-1 means high-to-low, 1 means low-to-high) ------------------------------------------------- | EXTRACTION_PARAMETERS_MODIFICATION -- FINDING | ------------------------------------------------- [EXTRACTION_PARAMETERS_MODIFICATION_DOC] = FIND_APPDOC(NDI_APP_SPIKEEXTRACTOR_OBJ, ... 'extraction_parameters_modification', NDI_TIMESERIES_OBJ, EPOCHID, EXTRACTION_NAME) INPUTS: NDI_TIMESERIES_OBJ - the ndi.time.timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUTPUT: Returns the extraction parameters modification ndi.document with the name EXTRACTION_NAME for the named EPOCHID and NDI_TIMESERIES_OBJ. ------------------------------------------------- | EXTRACTION_PARAMETERS_MODIFICATION -- LOADING | ------------------------------------------------- [EXTRACTION_PARAMETERS_DOC] = LOADDATA_APPDOC(NDI_APP_SPIKEEXTRACTOR_OBJ, ... 'extraction_parameters_modification', NDI_TIMESERIES_OBJ, EPOCHID, EXTRACTION_NAME) INPUTS: NDI_TIMESERIES_OBJ - the ndi.time.timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_PARAMETERS_NAME - the name of the extraction parameter document OUTPUT: Returns the extraction parameters modification ndi.document with the name EXTRACTION_NAME. ---------------------------------------------------------------------------------------------- APPDOC 3: SPIKEWAVES ---------------------------------------------------------------------------------------------- ----------------------- | SPIKEWAVES -- ABOUT | ----------------------- SPIKEWAVES documents store the spike waveforms that are read during a spike extraction and the time of each spike in the epoch's local time. It DEPENDS ON the ndi.time.timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that described the extraction. Definition: app/spikeextractor/spikewaves -------------------------- | SPIKEWAVES -- CREATION | -------------------------- Spikewaves documents are created internally by the EXTRACT function ------------------------ | SPIKEWAVES - FINDING | ------------------------ [SPIKEWAVES_DOC] = FIND_APPDOC(NDI_APP_SPIKEEXTRACTOR_OBJ, 'spikewaves', ... NDI_TIMESERIES_OBJ, EPOCH, EXTRACTION_NAME) INPUTS: NDI_TIMESERIES_OBJ - the ndi.time.timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUTPUT: SPIKEWAVES_DOC - the ndi.document of the extracted spike waves. ------------------------ | SPIKEWAVES - LOADING | ------------------------ [CONCATENATED_SPIKES, WAVEPARAMETERS, SPIKETIMES, SPIKEWAVES_DOC] = LOADDATA_APPDOC(NDI_APP_SPIKEEXTRACTOR_OBJ, 'spikewaves', ... NDI_TIMESERIES_OBJ, EPOCH, EXTRACTION_NAME) INPUTS: NDI_TIMESERIES_OBJ - the ndi.time.timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUTPUTS: CONCATENATED_SPIKES - an array of spike waveforms SxDxN, where S is the number of samples per channel of each waveform, D is the number of channels (dimension), and N is the number of spike waveforms WAVEPARAMETERS - a structure with the following fields: Field | Description -------------------------------------------------------- numchannels | Number of channels in each spike S0 | Number of samples before spike center | (usually negative) S1 | Number of samples after spike center | (usually positive) samplerate | The sampling rate SPIKETIMES - the time of each spike wave, in local epoch time coordinates SPIKEWAVES_DOC - the ndi.document of the extracted spike waves. clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Deletes the app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. B is 1 if the document is found, and 0 otherwise. Help for ndi.app.spikeextractor/clear_appdoc is inherited from superclass ndi.app.appdoc defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE) Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object. In the base class, the blank version of the ndi.document is read in and the default structure is built from the ndi.document's class property list. Help for ndi.app.spikeextractor/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this uses the property info in the ndi.document to load the data structure. Help for ndi.app.spikeextractor/doc2struct is inherited from superclass ndi.app.appdoc extract - method that extracts spikes from epochs of an NDI_ELEMENT_TIMESERIES_OBJ EXTRACT(NDI_APP_SPIKEEXTRACTOR_OBJ, NDI_TIMESERIES_OBJ, EPOCH, EXTRACTION_NAME, [REDO], [T0 T1]) TYPE is the type of probe if any combination of NAME and TYPE must return at least one probe from session EPOCH is an index number or id to select epoch to extract, or can be a cell array of epoch number/ids EXTRACTION_NAME name given to find ndi_doc in database REDO - if 1, then extraction is re-done for epochs even if it has been done before with same extraction parameters [T0 T1] - if given, then restricts the extraction to be between times t0 and t1; default is [-Inf Inf] filter - filter data based on a filter structure DATA_OUT = FILTER(NDI_APP_SPIKEEXTRACTOR_OBJ, DATA_IN, FILTERSTRUCT) Filters data based on FILTERSTRUCT (see ndi_app_spikeextractor/MAKEFILTERSTRUCT) find_appdoc - find an ndi_app_appdoc document in the session database See ndi_app_spikeextractor/APPDOC_DESCRIPTION for documentation. See also: ndi_app_spikeextractor/APPDOC_DESCRIPTION isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. In the base class, this is true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is, B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2). Help for ndi.app.spikeextractor/isequal_appdoc_struct is inherited from superclass ndi.app.appdoc isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APP_SPIKEEXTRACTOR_OBJ, APPDOC_TYPE, APPDOC_STRUCT) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise. For ndi_app_spikeextractor, one can use an APPDOC_TYPE of the following: APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'extraction_parameters' | A document that describes the parameters to be used for extraction loaddata_appdoc - load data from an application document See ndi_app_spikeextractor/APPDOC_DESCRIPTION for documentation. See also: ndi_app_spikeextractor/APPDOC_DESCRIPTION makefilterstruct - make a filter structure for a given sampling rate and extraction parameters FILTERSTRUCT = MAKEFILTERSTRUCT(NDI_APP_SPIKEEXTRACTOR_OBJ, EXTRACTION_DOC, SAMPLE_RATE) Given an EXTRACTION_DOC of parameters and a sampling rate SAMPLE_RATE, make a filter structure for passing to FILTERDATA. newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). Help for ndi.app.spikeextractor/newdocument is inherited from superclass ndi.app searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. Help for ndi.app.spikeextractor/searchquery is inherited from superclass ndi.app spikeextractor - an app to extract elements found in sessions NDI_APP_SPIKEEXTRACTOR_OBJ = ndi.app.spikeextractor(SESSION) Creates a new ndi_app_spikeextractor object that can operate on NDI_SESSIONS. The app is named 'ndi_app_spikeextractor'. Documentation for ndi.app.spikeextractor/spikeextractor doc ndi.app.spikeextractor struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APP_SPIKEEXTRACTOR_OBJ, APPDOC_TYPE, APPDOC_STRUCT, ...) For ndi_app_spikeextractor, one can use an APPDOC_TYPE of the following: APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'extraction_parameters' | A document that describes the parameters to be used for extraction ['extraction_parameters'... | A document that modifies the parameters to be used for extraction for a single epoch '_modification'] | See APPDOC_DESCRIPTION for a list of the parameters. varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. Help for ndi.app.spikeextractor/varappname is inherited from superclass ndi.app version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system. Help for ndi.app.spikeextractor/version_url is inherited from superclass ndi.app","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikesorter.m/","text":"CLASS ndi.app.spikesorter NDI.APP.spikesorter - an app to sort spikewaves found in sessions NDI.APP.spikesorter_OBJ = ndi.app.spikesorter(SESSION) Creates a new NDI_APP_spikesorter object that can operate on NDI_SESSIONS. The app is named 'ndi_app_spikesorter'. Superclasses ndi.app , ndi.documentservice , ndi.app.appdoc Properties Property Description session name doc_types doc_document_types doc_session Methods Method Description add_appdoc Load data from an application document appdoc_description a function that prints a description of all appdoc types check_sorting_parameters check sorting parameters for validity clear_appdoc remove an ndi.app.appdoc document from a session database clusters2neurons create ndi.neuron objects from spike clusterings defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters find_appdoc find an ndi_app_appdoc document in the session database isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? loaddata_appdoc load data from an application document loadwaveforms load extracted spike waveforms for an ndi_timeseries_obj newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app spike_sort method that sorts spikes from specific probes in session to ndi_doc spikesorter an app to sort spikewaves found in sessions struct2doc create an ndi.document from an input structure and input parameters varappname return the name of the application for use in variable creation version_url return the app version and url Methods help add_appdoc - Load data from an application document [...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ... APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments]) Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT. [additional inputs] are used to find or specify the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than 1 if the document already exists). If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT. This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [additional inputs] already exists: DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- 'Error' | An error is generating indicating the document exists. 'NoAction' | The existing document is left alone. The existing ndi.document | is returned in DOC. 'Replace' | Replace the document; note that this deletes all NDI_DOCUMENTS | that depend on the original. 'ReplaceIfDifferent' | Conditionally replace the document, but only if the | the data structures that define the document are not equal. Help for ndi.app.spikesorter/add_appdoc is inherited from superclass ndi.app.appdoc appdoc_description - a function that prints a description of all appdoc types For ndi_app_spikeextractor, there are the following types: APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'sorting_parameters' | A document that describes the parameters to be used for sorting 'spike_clusters' | A document that contains the assignment of a set of spikes to clusters ---------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------- APPDOC 1: SORTING_PARAMETERS ---------------------------------------------------------------------------------------------- ---------------------------------- | SORTING_PARAMETERS -- ABOUT | ---------------------------------- SORTING_PARAMETERS documents hold the parameters that are to be used to guide the extraction of spikewaves. Definition: apps/spikesorter/sorting_parameters.json ------------------------------------- | SORTING_PARAMETERS -- CREATION | ------------------------------------- DOC = STRUCT2DOC(NDI_APP_SPIKESORTER_OBJ, 'sorting_parameters', SORTING_PARAMS, SORTING_PARAMETERS_NAME) SORTING_NAME is a string containing the name of the extraction document. SORTING_PARAMS should contain the following fields: Fieldname | Description ------------------------------------------------------------------------- graphical_mode (1) | Should we use graphical mode (1) or automatic mode (0)? num_pca_features (10) | Number of pca-driven features to use in the clustering calculation in automatic mode interpolation (3) | By how many times should we oversample the spikes, interpolating by splines? min_clusters (3) | Minimum clusters parameter for KlustaKwik in automatic mode max_clusters (10) | Maximum clusters parameter for KlustaKwik in automatic mode num_start (5) | Number of random starting positions in automatic mode ------------------------------------ | SORTING_PARAMETERS -- FINDING | ------------------------------------ [SORTING_PARAMETERS_DOC] = FIND_APPDOC(NDI_APP_SPIKESORTER_OBJ, ... 'sorting_parameters', SORTING_PARAMETERS_NAME) INPUTS: SORTING_PARAMETERS_NAME - the name of the sorting parameter document OUTPUT: Returns the sorting parameters ndi.document with the name SORTING_PARAMETERS_NAME. ------------------------------------ | SORTING_PARAMETERS -- LOADING | ------------------------------------ [SORTING_PARAMETERS_DOC] = LOADDATA_APPDOC(NDI_APP_SPIKESORTER_OBJ, ... 'sorting_parameters', SORTING_PARAMETERS_NAME) INPUTS: SORTING_PARAMETERS_NAME - the name of the sorting parameter document OUTPUT: Returns the sorting parameters ndi.document with the name SORTING_PARAMETERS_NAME. ---------------------------------------------------------------------------------------------- APPDOC 2: SPIKE_CLUSTERS ---------------------------------------------------------------------------------------------- --------------------------- | SPIKE_CLUSTERS -- ABOUT | --------------------------- SPIKEWAVES documents store the spike waveforms that are read during a spike extraction. It DEPENDS ON the ndi.time.timeseries object on which the extraction is performed and the SORTING_PARAMETERS that described the extraction. Definition: apps/spikesorter/spike_clusters ------------------------------ | SPIKE_CLUSTERS -- CREATION | ------------------------------ Spike cluster documents are created internally by the SORT function ---------------------------- | SPIKE_CLUSTERS - FINDING | ---------------------------- [SPIKE_CLUSTERS_DOC] = FIND_APPDOC(NDI_APP_SPIKESORTER_OBJ, 'spike_clusters', ... NDI_TIMESERIES_OBJ, SORTING_PARAMETERS_NAME) INPUTS: NDI_TIMESERIES_OBJ - the ndi.time.timeseries object that was used in the extraction SORTING_PARAMETERS_NAME - the name of the sorting parameters document used in the sorting OUTPUT: SPIKECLUSTERS_DOC - the ndi.document of the cluster information ---------------------------- | SPIKE_CLUSTERS - LOADING | ---------------------------- [CLUSTERIDS, SPIKE_CLUSTERS_DOC] = LOADDATA_APPDOC(NDI_APP_SPIKESORTER_OBJ, 'spike_clusters', ... NDI_TIMESERIES_OBJ, SORTING_PARAMETERS_NAME, EXTRACTION_PARAMETERS_NAME) INPUTS: NDI_TIMESERIES_OBJ - the ndi.time.timeseries object that was used in the extraction SORTING_PARAMETERS_NAME - the name of the sorting parameters document used in the sorting EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUTPUTS: CLUSTERIDS: the cluster id number of each spike SPIKE_CLUSTERS_DOC - the ndi.document of the clusters, which includes detailed cluster information. check_sorting_parameters - check sorting parameters for validity SORTING_PARAMETERS_STRUCT = CHECK_SORTING_PARAMETERS(NDI_APP_SPIKESORTER_OBJ, SORTING_PARAMETERS_STRUCT) Given a sorting parameters structure (see help ndi.app.spikesorter/appdoc_description), check that the parameters are provided and are in appropriate ranges. interpolation clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Deletes the app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. B is 1 if the document is found, and 0 otherwise. Help for ndi.app.spikesorter/clear_appdoc is inherited from superclass ndi.app.appdoc clusters2neurons - create ndi.neuron objects from spike clusterings CLUSTERS2NEURONS(NDI_APP_SPIKESORTER_OBJ, NDI_TIMESERIES_OBJ, SORTING_PARAMETER_NAME, EXTRACTION_PARAMETERS_NAME, REDO) Generates ndi.neuron objects for each spike cluster represented in the defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE) Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object. In the base class, the blank version of the ndi.document is read in and the default structure is built from the ndi.document's class property list. Help for ndi.app.spikesorter/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this uses the property info in the ndi.document to load the data structure. Help for ndi.app.spikesorter/doc2struct is inherited from superclass ndi.app.appdoc find_appdoc - find an ndi_app_appdoc document in the session database See ndi_app_spikesorter/APPDOC_DESCRIPTION for documentation. isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. In the base class, this is true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is, B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2). Help for ndi.app.spikesorter/isequal_appdoc_struct is inherited from superclass ndi.app.appdoc isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [B,ERRORMSG] = ISVALID_APPDOC_STRUCT(ndi.app.spikeextractor_OBJ, APPDOC_TYPE, APPDOC_STRUCT) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise. For ndi_app_spikesorter, one can use an APPDOC_TYPE of the following: APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'sorting_parameters' | A document that describes the parameters to be used for sorting 'spike_clusters' | A document that describes the loaddata_appdoc - load data from an application document See ndi_app_spikesorter/APPDOC_DESCRIPTION for documentation. loadwaveforms - load extracted spike waveforms for an ndi_timeseries_obj [WAVEFORMS, WAVEFORMPARAMS, SPIKETIMES, EPOCHINFO, EXTRACTION_PARAMS_DOC, WAVEFORM_DOCS] = LOADWAVEFORMS(... NDI_APP_SPIKESORTER_OBJ, NDI_TIMESERIES_OBJ,EXTRACTION_NAME) Loads extracted spike WAVEFORMS from an NDI_TIMESERIERS_OBJ with extraction name EXTRACTION_NAME. WAVEFORMS is a NumSamples x NumChannels x NumSpikes representation of each spike waveform. WAVEFORMPARAMS is the set of waveform parameters from ndi.app.spikeextractor that includes information such as the sample dimensions and the sampling rate of the underlying data. See help ndi.app.spikeextractor.appdoc_description. SPIKTIMES is time of each spike waveform. EPOCHINFO - a structure with fields EpochStartSamples that indicates the waveform sample that begins each new epoch from the NDI_TIMESERIES_OBJ and EpochNames that is a cell array of the epoch ID of each epoch. EXTRACTION_PARAMS_DOC is the ndi.document for the extraction parameters. WAVEFORM_DOCS is a cell array of ndi.documents for each extracted spike waveform document. newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). Help for ndi.app.spikesorter/newdocument is inherited from superclass ndi.app searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. Help for ndi.app.spikesorter/searchquery is inherited from superclass ndi.app spike_sort - method that sorts spikes from specific probes in session to ndi_doc SPIKE_CLUSTER_DOC = SPIKE_SORT(SPIKEWAVES, SORT_NAME, SORTING_PARAMS) %%%%%%%%%%%% SORT_NAME name given to save sort to ndi_doc spikesorter - an app to sort spikewaves found in sessions NDI.APP.spikesorter_OBJ = ndi.app.spikesorter(SESSION) Creates a new NDI_APP_spikesorter object that can operate on NDI_SESSIONS. The app is named 'ndi_app_spikesorter'. Documentation for ndi.app.spikesorter/spikesorter doc ndi.app.spikesorter struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APP_SPIKESORTER_OBJ, APPDOC_TYPE, APPDOC_STRUCT, ...) For ndi.app.spikesorter, one can use an APPDOC_TYPE of the following: APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'sorting_parameters' | A document that describes the parameters to be used for sorting See APPDOC_DESCRIPTION for a list of the parameters. varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. Help for ndi.app.spikesorter/varappname is inherited from superclass ndi.app version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system. Help for ndi.app.spikesorter/version_url is inherited from superclass ndi.app","title":"ndi.app.spikesorter"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikesorter.m/#class-ndiappspikesorter","text":"NDI.APP.spikesorter - an app to sort spikewaves found in sessions NDI.APP.spikesorter_OBJ = ndi.app.spikesorter(SESSION) Creates a new NDI_APP_spikesorter object that can operate on NDI_SESSIONS. The app is named 'ndi_app_spikesorter'.","title":"CLASS ndi.app.spikesorter"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikesorter.m/#superclasses","text":"ndi.app , ndi.documentservice , ndi.app.appdoc","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikesorter.m/#properties","text":"Property Description session name doc_types doc_document_types doc_session","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikesorter.m/#methods","text":"Method Description add_appdoc Load data from an application document appdoc_description a function that prints a description of all appdoc types check_sorting_parameters check sorting parameters for validity clear_appdoc remove an ndi.app.appdoc document from a session database clusters2neurons create ndi.neuron objects from spike clusterings defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters find_appdoc find an ndi_app_appdoc document in the session database isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? loaddata_appdoc load data from an application document loadwaveforms load extracted spike waveforms for an ndi_timeseries_obj newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app spike_sort method that sorts spikes from specific probes in session to ndi_doc spikesorter an app to sort spikewaves found in sessions struct2doc create an ndi.document from an input structure and input parameters varappname return the name of the application for use in variable creation version_url return the app version and url","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikesorter.m/#methods-help","text":"add_appdoc - Load data from an application document [...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ... APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments]) Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT. [additional inputs] are used to find or specify the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than 1 if the document already exists). If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT. This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [additional inputs] already exists: DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- 'Error' | An error is generating indicating the document exists. 'NoAction' | The existing document is left alone. The existing ndi.document | is returned in DOC. 'Replace' | Replace the document; note that this deletes all NDI_DOCUMENTS | that depend on the original. 'ReplaceIfDifferent' | Conditionally replace the document, but only if the | the data structures that define the document are not equal. Help for ndi.app.spikesorter/add_appdoc is inherited from superclass ndi.app.appdoc appdoc_description - a function that prints a description of all appdoc types For ndi_app_spikeextractor, there are the following types: APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'sorting_parameters' | A document that describes the parameters to be used for sorting 'spike_clusters' | A document that contains the assignment of a set of spikes to clusters ---------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------- APPDOC 1: SORTING_PARAMETERS ---------------------------------------------------------------------------------------------- ---------------------------------- | SORTING_PARAMETERS -- ABOUT | ---------------------------------- SORTING_PARAMETERS documents hold the parameters that are to be used to guide the extraction of spikewaves. Definition: apps/spikesorter/sorting_parameters.json ------------------------------------- | SORTING_PARAMETERS -- CREATION | ------------------------------------- DOC = STRUCT2DOC(NDI_APP_SPIKESORTER_OBJ, 'sorting_parameters', SORTING_PARAMS, SORTING_PARAMETERS_NAME) SORTING_NAME is a string containing the name of the extraction document. SORTING_PARAMS should contain the following fields: Fieldname | Description ------------------------------------------------------------------------- graphical_mode (1) | Should we use graphical mode (1) or automatic mode (0)? num_pca_features (10) | Number of pca-driven features to use in the clustering calculation in automatic mode interpolation (3) | By how many times should we oversample the spikes, interpolating by splines? min_clusters (3) | Minimum clusters parameter for KlustaKwik in automatic mode max_clusters (10) | Maximum clusters parameter for KlustaKwik in automatic mode num_start (5) | Number of random starting positions in automatic mode ------------------------------------ | SORTING_PARAMETERS -- FINDING | ------------------------------------ [SORTING_PARAMETERS_DOC] = FIND_APPDOC(NDI_APP_SPIKESORTER_OBJ, ... 'sorting_parameters', SORTING_PARAMETERS_NAME) INPUTS: SORTING_PARAMETERS_NAME - the name of the sorting parameter document OUTPUT: Returns the sorting parameters ndi.document with the name SORTING_PARAMETERS_NAME. ------------------------------------ | SORTING_PARAMETERS -- LOADING | ------------------------------------ [SORTING_PARAMETERS_DOC] = LOADDATA_APPDOC(NDI_APP_SPIKESORTER_OBJ, ... 'sorting_parameters', SORTING_PARAMETERS_NAME) INPUTS: SORTING_PARAMETERS_NAME - the name of the sorting parameter document OUTPUT: Returns the sorting parameters ndi.document with the name SORTING_PARAMETERS_NAME. ---------------------------------------------------------------------------------------------- APPDOC 2: SPIKE_CLUSTERS ---------------------------------------------------------------------------------------------- --------------------------- | SPIKE_CLUSTERS -- ABOUT | --------------------------- SPIKEWAVES documents store the spike waveforms that are read during a spike extraction. It DEPENDS ON the ndi.time.timeseries object on which the extraction is performed and the SORTING_PARAMETERS that described the extraction. Definition: apps/spikesorter/spike_clusters ------------------------------ | SPIKE_CLUSTERS -- CREATION | ------------------------------ Spike cluster documents are created internally by the SORT function ---------------------------- | SPIKE_CLUSTERS - FINDING | ---------------------------- [SPIKE_CLUSTERS_DOC] = FIND_APPDOC(NDI_APP_SPIKESORTER_OBJ, 'spike_clusters', ... NDI_TIMESERIES_OBJ, SORTING_PARAMETERS_NAME) INPUTS: NDI_TIMESERIES_OBJ - the ndi.time.timeseries object that was used in the extraction SORTING_PARAMETERS_NAME - the name of the sorting parameters document used in the sorting OUTPUT: SPIKECLUSTERS_DOC - the ndi.document of the cluster information ---------------------------- | SPIKE_CLUSTERS - LOADING | ---------------------------- [CLUSTERIDS, SPIKE_CLUSTERS_DOC] = LOADDATA_APPDOC(NDI_APP_SPIKESORTER_OBJ, 'spike_clusters', ... NDI_TIMESERIES_OBJ, SORTING_PARAMETERS_NAME, EXTRACTION_PARAMETERS_NAME) INPUTS: NDI_TIMESERIES_OBJ - the ndi.time.timeseries object that was used in the extraction SORTING_PARAMETERS_NAME - the name of the sorting parameters document used in the sorting EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUTPUTS: CLUSTERIDS: the cluster id number of each spike SPIKE_CLUSTERS_DOC - the ndi.document of the clusters, which includes detailed cluster information. check_sorting_parameters - check sorting parameters for validity SORTING_PARAMETERS_STRUCT = CHECK_SORTING_PARAMETERS(NDI_APP_SPIKESORTER_OBJ, SORTING_PARAMETERS_STRUCT) Given a sorting parameters structure (see help ndi.app.spikesorter/appdoc_description), check that the parameters are provided and are in appropriate ranges. interpolation clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Deletes the app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. B is 1 if the document is found, and 0 otherwise. Help for ndi.app.spikesorter/clear_appdoc is inherited from superclass ndi.app.appdoc clusters2neurons - create ndi.neuron objects from spike clusterings CLUSTERS2NEURONS(NDI_APP_SPIKESORTER_OBJ, NDI_TIMESERIES_OBJ, SORTING_PARAMETER_NAME, EXTRACTION_PARAMETERS_NAME, REDO) Generates ndi.neuron objects for each spike cluster represented in the defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE) Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object. In the base class, the blank version of the ndi.document is read in and the default structure is built from the ndi.document's class property list. Help for ndi.app.spikesorter/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this uses the property info in the ndi.document to load the data structure. Help for ndi.app.spikesorter/doc2struct is inherited from superclass ndi.app.appdoc find_appdoc - find an ndi_app_appdoc document in the session database See ndi_app_spikesorter/APPDOC_DESCRIPTION for documentation. isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. In the base class, this is true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is, B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2). Help for ndi.app.spikesorter/isequal_appdoc_struct is inherited from superclass ndi.app.appdoc isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [B,ERRORMSG] = ISVALID_APPDOC_STRUCT(ndi.app.spikeextractor_OBJ, APPDOC_TYPE, APPDOC_STRUCT) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise. For ndi_app_spikesorter, one can use an APPDOC_TYPE of the following: APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'sorting_parameters' | A document that describes the parameters to be used for sorting 'spike_clusters' | A document that describes the loaddata_appdoc - load data from an application document See ndi_app_spikesorter/APPDOC_DESCRIPTION for documentation. loadwaveforms - load extracted spike waveforms for an ndi_timeseries_obj [WAVEFORMS, WAVEFORMPARAMS, SPIKETIMES, EPOCHINFO, EXTRACTION_PARAMS_DOC, WAVEFORM_DOCS] = LOADWAVEFORMS(... NDI_APP_SPIKESORTER_OBJ, NDI_TIMESERIES_OBJ,EXTRACTION_NAME) Loads extracted spike WAVEFORMS from an NDI_TIMESERIERS_OBJ with extraction name EXTRACTION_NAME. WAVEFORMS is a NumSamples x NumChannels x NumSpikes representation of each spike waveform. WAVEFORMPARAMS is the set of waveform parameters from ndi.app.spikeextractor that includes information such as the sample dimensions and the sampling rate of the underlying data. See help ndi.app.spikeextractor.appdoc_description. SPIKTIMES is time of each spike waveform. EPOCHINFO - a structure with fields EpochStartSamples that indicates the waveform sample that begins each new epoch from the NDI_TIMESERIES_OBJ and EpochNames that is a cell array of the epoch ID of each epoch. EXTRACTION_PARAMS_DOC is the ndi.document for the extraction parameters. WAVEFORM_DOCS is a cell array of ndi.documents for each extracted spike waveform document. newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). Help for ndi.app.spikesorter/newdocument is inherited from superclass ndi.app searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. Help for ndi.app.spikesorter/searchquery is inherited from superclass ndi.app spike_sort - method that sorts spikes from specific probes in session to ndi_doc SPIKE_CLUSTER_DOC = SPIKE_SORT(SPIKEWAVES, SORT_NAME, SORTING_PARAMS) %%%%%%%%%%%% SORT_NAME name given to save sort to ndi_doc spikesorter - an app to sort spikewaves found in sessions NDI.APP.spikesorter_OBJ = ndi.app.spikesorter(SESSION) Creates a new NDI_APP_spikesorter object that can operate on NDI_SESSIONS. The app is named 'ndi_app_spikesorter'. Documentation for ndi.app.spikesorter/spikesorter doc ndi.app.spikesorter struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APP_SPIKESORTER_OBJ, APPDOC_TYPE, APPDOC_STRUCT, ...) For ndi.app.spikesorter, one can use an APPDOC_TYPE of the following: APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'sorting_parameters' | A document that describes the parameters to be used for sorting See APPDOC_DESCRIPTION for a list of the parameters. varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. Help for ndi.app.spikesorter/varappname is inherited from superclass ndi.app version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system. Help for ndi.app.spikesorter/version_url is inherited from superclass ndi.app","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/decoder.m/","text":"CLASS ndi.app.stimulus.decoder ndi.app.stimulus.decoder - an app to decode stimulus information from NDI_PROBE_STIMULUS objects NDI_APP_STIMULUS_DECODER_OBJ = ndi.app.stimulus.decoder(SESSION) Creates a new ndi_app_stimulus.decoder object that can operate on NDI_SESSIONS. The app is named 'ndi.app.stimulus_decoder'. Superclasses ndi.app , ndi.documentservice Properties Property Description session name Methods Method Description decoder an app to decode stimulus information from NDI_PROBE_STIMULUS objects load_presentation_time read the presentation_time structure from binary portion newdocument return a new database document of type ndi.document based on an app parse_stimuli write stimulus records for all stimulus epochs of an ndi.element stimulus probe searchquery return a search query for an ndi.document related to this app varappname return the name of the application for use in variable creation version_url return the app version and url Methods help decoder - an app to decode stimulus information from NDI_PROBE_STIMULUS objects NDI_APP_STIMULUS_DECODER_OBJ = ndi.app.stimulus.decoder(SESSION) Creates a new ndi_app_stimulus.decoder object that can operate on NDI_SESSIONS. The app is named 'ndi.app.stimulus_decoder'. Documentation for ndi.app.stimulus.decoder/decoder doc ndi.app.stimulus.decoder load_presentation_time - read the presentation_time structure from binary portion PRESENTATION_TIME = LOAD_PRESENTATION_TIME(NDI_APP_STIMULUS_DECODER_OBJ, ... STIMULUS_PRESENTATION_DOC) Given a 'stimulus_presentation' type ndi.document, loads the presentation_time data from the binary portion. newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). Help for ndi.app.stimulus.decoder/newdocument is inherited from superclass ndi.app parse_stimuli - write stimulus records for all stimulus epochs of an ndi.element stimulus probe [NEWDOCS, EXISITINGDOCS] = PARSE_STIMULI(NDI_APP_STIMULUS_DECODER_OBJ, NDI_ELEMENT_STIM, [RESET]) Examines a the ndi.session associated with NDI_APP_STIMULUS_DECODER_OBJ and the stimulus probe NDI_STIM_PROBE, and creates documents of type NDI_DOCUMENT_STIMULUS and NDI_DOCUMENT_STIMULUS_TUNINGCURVE for all stimulus epochs. If NDI_DOCUMENT_STIMULUS and NDI_DOCUMENT_STIMULUS_TUNINGCURVE documents already exist for a given stimulus run, then they are returned in EXISTINGDOCS. Any new documents are returned in NEWDOCS. If the input argument RESET is given and is 1, then all existing documents for this probe are removed and all documents are recalculated. The default for RESET is 0 (if it is not provided). Note that this function DOES add the new documents to the database. searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. Help for ndi.app.stimulus.decoder/searchquery is inherited from superclass ndi.app varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. Help for ndi.app.stimulus.decoder/varappname is inherited from superclass ndi.app version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system. Help for ndi.app.stimulus.decoder/version_url is inherited from superclass ndi.app","title":"ndi.app.stimulus.decoder"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/decoder.m/#class-ndiappstimulusdecoder","text":"ndi.app.stimulus.decoder - an app to decode stimulus information from NDI_PROBE_STIMULUS objects NDI_APP_STIMULUS_DECODER_OBJ = ndi.app.stimulus.decoder(SESSION) Creates a new ndi_app_stimulus.decoder object that can operate on NDI_SESSIONS. The app is named 'ndi.app.stimulus_decoder'.","title":"CLASS ndi.app.stimulus.decoder"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/decoder.m/#superclasses","text":"ndi.app , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/decoder.m/#properties","text":"Property Description session name","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/decoder.m/#methods","text":"Method Description decoder an app to decode stimulus information from NDI_PROBE_STIMULUS objects load_presentation_time read the presentation_time structure from binary portion newdocument return a new database document of type ndi.document based on an app parse_stimuli write stimulus records for all stimulus epochs of an ndi.element stimulus probe searchquery return a search query for an ndi.document related to this app varappname return the name of the application for use in variable creation version_url return the app version and url","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/decoder.m/#methods-help","text":"decoder - an app to decode stimulus information from NDI_PROBE_STIMULUS objects NDI_APP_STIMULUS_DECODER_OBJ = ndi.app.stimulus.decoder(SESSION) Creates a new ndi_app_stimulus.decoder object that can operate on NDI_SESSIONS. The app is named 'ndi.app.stimulus_decoder'. Documentation for ndi.app.stimulus.decoder/decoder doc ndi.app.stimulus.decoder load_presentation_time - read the presentation_time structure from binary portion PRESENTATION_TIME = LOAD_PRESENTATION_TIME(NDI_APP_STIMULUS_DECODER_OBJ, ... STIMULUS_PRESENTATION_DOC) Given a 'stimulus_presentation' type ndi.document, loads the presentation_time data from the binary portion. newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). Help for ndi.app.stimulus.decoder/newdocument is inherited from superclass ndi.app parse_stimuli - write stimulus records for all stimulus epochs of an ndi.element stimulus probe [NEWDOCS, EXISITINGDOCS] = PARSE_STIMULI(NDI_APP_STIMULUS_DECODER_OBJ, NDI_ELEMENT_STIM, [RESET]) Examines a the ndi.session associated with NDI_APP_STIMULUS_DECODER_OBJ and the stimulus probe NDI_STIM_PROBE, and creates documents of type NDI_DOCUMENT_STIMULUS and NDI_DOCUMENT_STIMULUS_TUNINGCURVE for all stimulus epochs. If NDI_DOCUMENT_STIMULUS and NDI_DOCUMENT_STIMULUS_TUNINGCURVE documents already exist for a given stimulus run, then they are returned in EXISTINGDOCS. Any new documents are returned in NEWDOCS. If the input argument RESET is given and is 1, then all existing documents for this probe are removed and all documents are recalculated. The default for RESET is 0 (if it is not provided). Note that this function DOES add the new documents to the database. searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. Help for ndi.app.stimulus.decoder/searchquery is inherited from superclass ndi.app varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. Help for ndi.app.stimulus.decoder/varappname is inherited from superclass ndi.app version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system. Help for ndi.app.stimulus.decoder/version_url is inherited from superclass ndi.app","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/","text":"CLASS ndi.app.stimulus.tuning_response ndi.app.stimulus.tuning_response - an app to decode stimulus information from NDI_PROBE_STIMULUS objects NDI_APP_TUNING_RESPONSE_OBJ = ndi.app.stimulus.tuning_response(SESSION) Creates a new ndi.app.stimulus.tuning_response object that can operate on NDI_SESSIONS. The app is named 'ndi_app_stimulus_response'. Superclasses ndi.app , ndi.documentservice Properties Property Description session name Methods Method Description compute_stimulus_response_scalar compute responses to a stimulus set control_stimulus determine the control stimulus ID for each stimulus in a stimulus set find_tuningcurve_document find a tuning curve document of a particular element, epochid, etc... label_control_stimuli label control stimuli for all stimulus presentation documents for a given stimulator make_1d_tuning create 1d tuning documents out of stimulus responses that covary in 2 parameters modulated_or_mean is the response stronger in modulation or mean? newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app stimulus_responses write stimulus records for all stimulus epochs of an ndi.element stimulus object tuning_curve compute a tuning curve from stimulus responses tuning_response an app to decode stimulus information from NDI_PROBE_STIMULUS objects tuningcurvedoc2vhlabrespstruct convert between a tuning curve document and the VH lab response structure tuningdoc_fixcellarrays make sure fields that are supposed to be cell arrays are cell arrays in TUNINGCURVE document tuningdoc_fixcellarrays_static make sure fields that are supposed to be cell arrays are cell arrays in TUNINGCURVE document varappname return the name of the application for use in variable creation version_url return the app version and url Methods help compute_stimulus_response_scalar - compute responses to a stimulus set RESPONSE_DOC = COMPUTE_STIMULUS_RESPONSE_SCALAR(NDI_APP_TUNING_RESPONSE_OBJ, NDI_TIMESERIES_OBJ, STIM_DOC, ...) Given an NDI_TIMESERIES_OBJ, a STIM_DOC (an ndi.document of class 'stimulus_presentation'), and a CONTROL_DOC (an ndi.document of class 'control_stimulus_ids'), this function computes the stimulus responses of NDI_TIMESERIES_OBJ and stores the results as an ndi.document of class 'stimulus_response_scalar'. In this app, by default, mean responses and responses at the fundamental stimulus frequency are calculated. Note that this function may generate multiple documents (for mean responses, F1, F2). Note that we recommend making a new app subclass if one wants to write additional classes of analysis procedures. This function also takes name/value pairs that alter the behavior: Parameter (default) | Description --------------------------------------------------------------------------------- temporalfreqfunc | ('ndi.fun.stimulustemporalfrequency') | freq_response ([]) | Frequency response to measure. If empty, then the function is | called 3 times with values 0, 1, and 2 times the fundamental frequency. prestimulus_time ([]) | Calculate a baseline using a certain amount of TIMESERIES signal during | the pre-stimulus time given here prestimulus_normalization ([]) | Normalize the stimulus response based on the prestimulus measurement. | [] or 0) No normalization | 1) Subtract: Response := Response - PrestimResponse | 2) Fractional change Response:= ((Response-PrestimResponse)/PrestimResponse) | 3) Divide: Response:= Response ./ PreStimResponse isspike (0) | 0/1 Is the signal a spike process? If so, timestamps correspond to spike events. spiketrain_dt (0.001) | Resolution to use for spike train reconstruction if computing Fourier transform control_stimulus - determine the control stimulus ID for each stimulus in a stimulus set [CS_IDS, CS_DOC] = CONTROL_STIMULUS(NDI_APP_TUNING_RESPONSE_OBJ, STIM_DOC, ...) For a given set of stimuli described in ndi.document of type 'stimulus', this function returns the control stimulus ID for each stimulus in the vector CS_IDS and a corresponding ndi.document of type control_stimulus_ids that describes this relationship. This function accepts parameters in the form of NAME/VALUE pairs: Parameter (default) | Description ------------------------------------------------------------------------ control_stim_method | The method to be used to find the control stimulu for ('psuedorandom') | each stimulus: -----------| | pseudorandom: Find the stimulus with a parameter | 'controlid' that is in the same pseudorandom trial. In the | event that there is no match that divides evenly into | complete repetitions of the stimulus set, then the | closest stimulus with field 'controlid' is chosen. | | hasfield: Find stimuli that have a parameter with the name | passed in 'controlid' | -----------| controlid ('isblank') | For some methods, the parameter that defines whether | a stimulus is a 'control' stimulus or not. controlid_value (1) | For some methods, the parameter value of 'controlid' that | defines whether a stimulus is a control stimulus or not. find_tuningcurve_document - find a tuning curve document of a particular element, epochid, etc... [TC_DOC, SRS_DOC] = FIND_TUNINGCURVE_DOCUMENT(NDI_APP_TUNING_RESPONSE_OBJ, ELEMENT_OBJ, EPOCHID, RESPONSE_TYPE) label_control_stimuli - label control stimuli for all stimulus presentation documents for a given stimulator CS_DOC = LABEL_CONTROL_STIMULI(NDI_APP_TUNING_RESPONSE_OBJ, STIMULUS_ELEMENT_OBJ, RESET, ...) Thus function will look for all 'stimulus_presentation' documents for STIMULUS_PROBE_OBJ, compute the corresponding control stimuli, and save them as an 'control_stimulus_ids' document that is also returned as a cell list in CS_DOC. If RESET is 1, then any existing documents of this type are first removed. If RESET is not provided or is empty, then it is taken to be 0. The method of finding the control stimulus can be provided by providing extra name/value pairs. See ndi.app.stimulus.tuning_response/CONTROL_STIMULUS for parameters. make_1d_tuning - create 1d tuning documents out of stimulus responses that covary in 2 parameters TUNING_DOCS = MAKE_1D_TUNING(NDI_APP_TUNING_RESPONSE_OBJ, STIM_RESPONSE_DOC, PARAM_TO_VARY, PARAM_TO_VARY_LABEL, PARAM_TO_FIX) This function examines a stimulus response doc that covaries in 2 parameters, and \"deals\" the responses into several tuning curves where the parameter with name PARAM_TO_VARY varies across stimuli and the stimulus parameter with name PARAM_TO_FIX is fixed for each tuning doc. modulated_or_mean - is the response stronger in modulation or mean? [B,ratio,mean_response,modulated_response,mean_index,modulated_index] = ... MODULATED_OR_MEAN(STIMULUS_RESPONSE_SCALAR_DOCS, ...) Given a cell array of STIMULUS_RESPONSE_SCALAR documents that correspond to different response types to the same stimulus, this function examines whether the best modulated response is greater than the best mean response. B is 1 if the modulated response is greater, and 0 if the mean response is greater. If there is no basis for the comparison, then -1 is returned. MEAN_RESPONSE is the mean response for the stimulus that has the largest response (this largest response could be the mean or the modulated response). MODULATED_RESPONSE is the modulated response for the stimulus that has the largest response (this largest response could be the mean or the modulated response). RATIO is the ratio of these two values (MODULATED_RESPONSE / MEAN_RESPONSE). MEAN_INDEX is the index number of the stimulus response scalar document with the mean response. MODULATED_INDEX is the index number of the stimulus response scalar document with the modulated response. This function examines the empirical responses and does not do any fitting. This function also takes name/value pairs that modify the default behavior. |--------------------------------------------------------------------------------| | Parameter (default) | Description | |--------------------------------------------------------------------------------| | modulated_response_names | Possible matches for the modulated responses | | ({'F1','modulated'}) | in the 'response_type' field of the | | | STIMULUS_RESPONSE_SCALAR documents. | | mean_response_names | Possible matches for the mean responses | | ({'F0','mean'}) | in the 'response_type' field of the | | | STIMULUS_RESPONSE_SCALAR documents. | |------------------------------|-------------------------------------------------| Step 0: initialize parameters newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). Help for ndi.app.stimulus.tuning_response/newdocument is inherited from superclass ndi.app searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. Help for ndi.app.stimulus.tuning_response/searchquery is inherited from superclass ndi.app stimulus_responses - write stimulus records for all stimulus epochs of an ndi.element stimulus object [RDOCS] = STIMULUS_RESPONSES(NDI_APP_TUNING_RESPONSE_OBJ, NDI_ELEMENT_STIM, NDI_TIMESERIES_OBJ, [RESET], DO_MEAN_ONLY) Examines a the ndi.session associated with NDI_APP_TUNING_RESPONSE_OBJ and the stimulus probe NDI_STIM_PROBE, and creates documents of type STIMULUS/STIMULUS_RESPONSE_SCALAR for all stimulus epochs. (NDI2: docs say it creates and STIMULUS/STIMULUS_TUNINGCURVE but it does not seem to do that) If STIMULUS_PRESENTATION and STIMULUS_TUNINGCURVE documents already exist for a given stimulus run, then they are returned in EXISTINGDOCS. Any new documents are returned in NEWDOCS. If the input argument RESET is given and is 1, then all existing tuning curve documents for this NDI_TIMESERIES_OBJ are removed. The default for RESET is 0 (if it is not provided). If the input argument DO_MEAN_ONLY is given and is 1, then the function only computes the mean responses. No F1 or F2 responses will be calculated. Note that this function DOES add the new documents RDOCS to the database. tuning_curve - compute a tuning curve from stimulus responses TUNING_DOC = TUNING_CURVE(NDI_APP_TUNING_RESPONSE_OBJ, STIM_RESOPNSE_DOC, ...) This function accepts name/value pairs that modifies its basic operation: Parameter (default) | Description ----------------------------------------------------------------------- response_units ('Spikes/s') | Response units to pass along independent_label {'label1'}| Independent parameter axis label independent_parameter {} | Independent parameters to search for in stimuli. | Can be multi-dimensional to create multi-variate | tuning curves. Only stimuli that contain these fields | will be included. | Examples: {'angle'} {'angle','sFrequency'} constraint ([]) | Constraints in the form of a vlt.data.fieldsearch structure. | Example: struct('field','sFrequency','operation',... | 'exact_number','param1',1,'param2','') do_Add (1) | Should we actually add this to the database? See also: vlt.data.fieldsearch tuning_response - an app to decode stimulus information from NDI_PROBE_STIMULUS objects NDI_APP_TUNING_RESPONSE_OBJ = ndi.app.stimulus.tuning_response(SESSION) Creates a new ndi.app.stimulus.tuning_response object that can operate on NDI_SESSIONS. The app is named 'ndi_app_stimulus_response'. Documentation for ndi.app.stimulus.tuning_response/tuning_response doc ndi.app.stimulus.tuning_response tuningcurvedoc2vhlabrespstruct - convert between a tuning curve document and the VH lab response structure RESPSTRUCT = TUNINGCURVEDOC2VHLABRESPSTRUCT(TUNINGCURVE_DOC) Converts entries from an NDI TUNINGCURVE document to a VH-lab response structure. This function is generally used when one wants to call the VH lab libraries. RESPSTRUCT is a structure of response properties with fields: curve | 4xnumber of directions tested, | curve(1,:) is directions tested (degrees, compass coords.) | curve(2,:) is mean responses, with control subtracted | curve(3,:) is standard deviation | curve(4,:) is standard error ind | cell list of individual trial responses for each direction spont | control responses [mean stddev stderr] spontind | individual control responses Optionally: blankresp| response to a control trial: [mean stddev stderr] blankind | individual responses to control tuningdoc_fixcellarrays - make sure fields that are supposed to be cell arrays are cell arrays in TUNINGCURVE document DEPRECATED - will cause an error tuningdoc_fixcellarrays_static - make sure fields that are supposed to be cell arrays are cell arrays in TUNINGCURVE document varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. Help for ndi.app.stimulus.tuning_response/varappname is inherited from superclass ndi.app version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system. Help for ndi.app.stimulus.tuning_response/version_url is inherited from superclass ndi.app","title":"ndi.app.stimulus.tuning_response"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/#class-ndiappstimulustuning_response","text":"ndi.app.stimulus.tuning_response - an app to decode stimulus information from NDI_PROBE_STIMULUS objects NDI_APP_TUNING_RESPONSE_OBJ = ndi.app.stimulus.tuning_response(SESSION) Creates a new ndi.app.stimulus.tuning_response object that can operate on NDI_SESSIONS. The app is named 'ndi_app_stimulus_response'.","title":"CLASS ndi.app.stimulus.tuning_response"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/#superclasses","text":"ndi.app , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/#properties","text":"Property Description session name","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/#methods","text":"Method Description compute_stimulus_response_scalar compute responses to a stimulus set control_stimulus determine the control stimulus ID for each stimulus in a stimulus set find_tuningcurve_document find a tuning curve document of a particular element, epochid, etc... label_control_stimuli label control stimuli for all stimulus presentation documents for a given stimulator make_1d_tuning create 1d tuning documents out of stimulus responses that covary in 2 parameters modulated_or_mean is the response stronger in modulation or mean? newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app stimulus_responses write stimulus records for all stimulus epochs of an ndi.element stimulus object tuning_curve compute a tuning curve from stimulus responses tuning_response an app to decode stimulus information from NDI_PROBE_STIMULUS objects tuningcurvedoc2vhlabrespstruct convert between a tuning curve document and the VH lab response structure tuningdoc_fixcellarrays make sure fields that are supposed to be cell arrays are cell arrays in TUNINGCURVE document tuningdoc_fixcellarrays_static make sure fields that are supposed to be cell arrays are cell arrays in TUNINGCURVE document varappname return the name of the application for use in variable creation version_url return the app version and url","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/#methods-help","text":"compute_stimulus_response_scalar - compute responses to a stimulus set RESPONSE_DOC = COMPUTE_STIMULUS_RESPONSE_SCALAR(NDI_APP_TUNING_RESPONSE_OBJ, NDI_TIMESERIES_OBJ, STIM_DOC, ...) Given an NDI_TIMESERIES_OBJ, a STIM_DOC (an ndi.document of class 'stimulus_presentation'), and a CONTROL_DOC (an ndi.document of class 'control_stimulus_ids'), this function computes the stimulus responses of NDI_TIMESERIES_OBJ and stores the results as an ndi.document of class 'stimulus_response_scalar'. In this app, by default, mean responses and responses at the fundamental stimulus frequency are calculated. Note that this function may generate multiple documents (for mean responses, F1, F2). Note that we recommend making a new app subclass if one wants to write additional classes of analysis procedures. This function also takes name/value pairs that alter the behavior: Parameter (default) | Description --------------------------------------------------------------------------------- temporalfreqfunc | ('ndi.fun.stimulustemporalfrequency') | freq_response ([]) | Frequency response to measure. If empty, then the function is | called 3 times with values 0, 1, and 2 times the fundamental frequency. prestimulus_time ([]) | Calculate a baseline using a certain amount of TIMESERIES signal during | the pre-stimulus time given here prestimulus_normalization ([]) | Normalize the stimulus response based on the prestimulus measurement. | [] or 0) No normalization | 1) Subtract: Response := Response - PrestimResponse | 2) Fractional change Response:= ((Response-PrestimResponse)/PrestimResponse) | 3) Divide: Response:= Response ./ PreStimResponse isspike (0) | 0/1 Is the signal a spike process? If so, timestamps correspond to spike events. spiketrain_dt (0.001) | Resolution to use for spike train reconstruction if computing Fourier transform control_stimulus - determine the control stimulus ID for each stimulus in a stimulus set [CS_IDS, CS_DOC] = CONTROL_STIMULUS(NDI_APP_TUNING_RESPONSE_OBJ, STIM_DOC, ...) For a given set of stimuli described in ndi.document of type 'stimulus', this function returns the control stimulus ID for each stimulus in the vector CS_IDS and a corresponding ndi.document of type control_stimulus_ids that describes this relationship. This function accepts parameters in the form of NAME/VALUE pairs: Parameter (default) | Description ------------------------------------------------------------------------ control_stim_method | The method to be used to find the control stimulu for ('psuedorandom') | each stimulus: -----------| | pseudorandom: Find the stimulus with a parameter | 'controlid' that is in the same pseudorandom trial. In the | event that there is no match that divides evenly into | complete repetitions of the stimulus set, then the | closest stimulus with field 'controlid' is chosen. | | hasfield: Find stimuli that have a parameter with the name | passed in 'controlid' | -----------| controlid ('isblank') | For some methods, the parameter that defines whether | a stimulus is a 'control' stimulus or not. controlid_value (1) | For some methods, the parameter value of 'controlid' that | defines whether a stimulus is a control stimulus or not. find_tuningcurve_document - find a tuning curve document of a particular element, epochid, etc... [TC_DOC, SRS_DOC] = FIND_TUNINGCURVE_DOCUMENT(NDI_APP_TUNING_RESPONSE_OBJ, ELEMENT_OBJ, EPOCHID, RESPONSE_TYPE) label_control_stimuli - label control stimuli for all stimulus presentation documents for a given stimulator CS_DOC = LABEL_CONTROL_STIMULI(NDI_APP_TUNING_RESPONSE_OBJ, STIMULUS_ELEMENT_OBJ, RESET, ...) Thus function will look for all 'stimulus_presentation' documents for STIMULUS_PROBE_OBJ, compute the corresponding control stimuli, and save them as an 'control_stimulus_ids' document that is also returned as a cell list in CS_DOC. If RESET is 1, then any existing documents of this type are first removed. If RESET is not provided or is empty, then it is taken to be 0. The method of finding the control stimulus can be provided by providing extra name/value pairs. See ndi.app.stimulus.tuning_response/CONTROL_STIMULUS for parameters. make_1d_tuning - create 1d tuning documents out of stimulus responses that covary in 2 parameters TUNING_DOCS = MAKE_1D_TUNING(NDI_APP_TUNING_RESPONSE_OBJ, STIM_RESPONSE_DOC, PARAM_TO_VARY, PARAM_TO_VARY_LABEL, PARAM_TO_FIX) This function examines a stimulus response doc that covaries in 2 parameters, and \"deals\" the responses into several tuning curves where the parameter with name PARAM_TO_VARY varies across stimuli and the stimulus parameter with name PARAM_TO_FIX is fixed for each tuning doc. modulated_or_mean - is the response stronger in modulation or mean? [B,ratio,mean_response,modulated_response,mean_index,modulated_index] = ... MODULATED_OR_MEAN(STIMULUS_RESPONSE_SCALAR_DOCS, ...) Given a cell array of STIMULUS_RESPONSE_SCALAR documents that correspond to different response types to the same stimulus, this function examines whether the best modulated response is greater than the best mean response. B is 1 if the modulated response is greater, and 0 if the mean response is greater. If there is no basis for the comparison, then -1 is returned. MEAN_RESPONSE is the mean response for the stimulus that has the largest response (this largest response could be the mean or the modulated response). MODULATED_RESPONSE is the modulated response for the stimulus that has the largest response (this largest response could be the mean or the modulated response). RATIO is the ratio of these two values (MODULATED_RESPONSE / MEAN_RESPONSE). MEAN_INDEX is the index number of the stimulus response scalar document with the mean response. MODULATED_INDEX is the index number of the stimulus response scalar document with the modulated response. This function examines the empirical responses and does not do any fitting. This function also takes name/value pairs that modify the default behavior. |--------------------------------------------------------------------------------| | Parameter (default) | Description | |--------------------------------------------------------------------------------| | modulated_response_names | Possible matches for the modulated responses | | ({'F1','modulated'}) | in the 'response_type' field of the | | | STIMULUS_RESPONSE_SCALAR documents. | | mean_response_names | Possible matches for the mean responses | | ({'F0','mean'}) | in the 'response_type' field of the | | | STIMULUS_RESPONSE_SCALAR documents. | |------------------------------|-------------------------------------------------| Step 0: initialize parameters newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). Help for ndi.app.stimulus.tuning_response/newdocument is inherited from superclass ndi.app searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. Help for ndi.app.stimulus.tuning_response/searchquery is inherited from superclass ndi.app stimulus_responses - write stimulus records for all stimulus epochs of an ndi.element stimulus object [RDOCS] = STIMULUS_RESPONSES(NDI_APP_TUNING_RESPONSE_OBJ, NDI_ELEMENT_STIM, NDI_TIMESERIES_OBJ, [RESET], DO_MEAN_ONLY) Examines a the ndi.session associated with NDI_APP_TUNING_RESPONSE_OBJ and the stimulus probe NDI_STIM_PROBE, and creates documents of type STIMULUS/STIMULUS_RESPONSE_SCALAR for all stimulus epochs. (NDI2: docs say it creates and STIMULUS/STIMULUS_TUNINGCURVE but it does not seem to do that) If STIMULUS_PRESENTATION and STIMULUS_TUNINGCURVE documents already exist for a given stimulus run, then they are returned in EXISTINGDOCS. Any new documents are returned in NEWDOCS. If the input argument RESET is given and is 1, then all existing tuning curve documents for this NDI_TIMESERIES_OBJ are removed. The default for RESET is 0 (if it is not provided). If the input argument DO_MEAN_ONLY is given and is 1, then the function only computes the mean responses. No F1 or F2 responses will be calculated. Note that this function DOES add the new documents RDOCS to the database. tuning_curve - compute a tuning curve from stimulus responses TUNING_DOC = TUNING_CURVE(NDI_APP_TUNING_RESPONSE_OBJ, STIM_RESOPNSE_DOC, ...) This function accepts name/value pairs that modifies its basic operation: Parameter (default) | Description ----------------------------------------------------------------------- response_units ('Spikes/s') | Response units to pass along independent_label {'label1'}| Independent parameter axis label independent_parameter {} | Independent parameters to search for in stimuli. | Can be multi-dimensional to create multi-variate | tuning curves. Only stimuli that contain these fields | will be included. | Examples: {'angle'} {'angle','sFrequency'} constraint ([]) | Constraints in the form of a vlt.data.fieldsearch structure. | Example: struct('field','sFrequency','operation',... | 'exact_number','param1',1,'param2','') do_Add (1) | Should we actually add this to the database? See also: vlt.data.fieldsearch tuning_response - an app to decode stimulus information from NDI_PROBE_STIMULUS objects NDI_APP_TUNING_RESPONSE_OBJ = ndi.app.stimulus.tuning_response(SESSION) Creates a new ndi.app.stimulus.tuning_response object that can operate on NDI_SESSIONS. The app is named 'ndi_app_stimulus_response'. Documentation for ndi.app.stimulus.tuning_response/tuning_response doc ndi.app.stimulus.tuning_response tuningcurvedoc2vhlabrespstruct - convert between a tuning curve document and the VH lab response structure RESPSTRUCT = TUNINGCURVEDOC2VHLABRESPSTRUCT(TUNINGCURVE_DOC) Converts entries from an NDI TUNINGCURVE document to a VH-lab response structure. This function is generally used when one wants to call the VH lab libraries. RESPSTRUCT is a structure of response properties with fields: curve | 4xnumber of directions tested, | curve(1,:) is directions tested (degrees, compass coords.) | curve(2,:) is mean responses, with control subtracted | curve(3,:) is standard deviation | curve(4,:) is standard error ind | cell list of individual trial responses for each direction spont | control responses [mean stddev stderr] spontind | individual control responses Optionally: blankresp| response to a control trial: [mean stddev stderr] blankind | individual responses to control tuningdoc_fixcellarrays - make sure fields that are supposed to be cell arrays are cell arrays in TUNINGCURVE document DEPRECATED - will cause an error tuningdoc_fixcellarrays_static - make sure fields that are supposed to be cell arrays are cell arrays in TUNINGCURVE document varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. Help for ndi.app.stimulus.tuning_response/varappname is inherited from superclass ndi.app version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system. Help for ndi.app.stimulus.tuning_response/version_url is inherited from superclass ndi.app","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bexample/simple.m/","text":"CLASS ndi.calc.example.simple SIMPLE - a simple demonstration of an ndi.calculator object SIMPLE_OBJ = SIMPLE(SESSION) Creates a SIMPLE ndi.calculator object Superclasses ndi.calculator , ndi.app , ndi.documentservice , ndi.app.appdoc , ndi.mock.ctest Properties Property Description fast_start session name doc_types doc_document_types doc_session base_scope Methods Method Description add_appdoc Load data from an application document appdoc_description return documentation for the type of document that is created by this calculator. are_input_parameters_equivalent are two sets of input parameters equivalent? calc_path CALC_PATH return the path to the ndi.calculator object calculate perform the calculator for ndi.calc.example.simple clean_mock_docs remove mock/test documents clear_appdoc remove an ndi.app.appdoc document from a session database compare_mock_docs compare an expected calculation answer with an actual answer default_parameters_query what queries should be used to search for input parameters if none are provided? default_scope default scope types for ndi.mock.ctest object default_search_for_input_parameters default parameters for searching for inputs defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters doc_about --------------------------------------------------------------------------------------------- docfiletext return the text in the requested documentation file find_appdoc find an ndi.app.appdoc document in the session database generate_mock_docs generate tests for ndi.calc.* objects graphical_edit_calculator create and control a GUI to graphically edit an NDI calculator instance is_valid_dependency_input is a potential dependency input actually valid for this calculator? isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? load_mock_expected_output load expected NDI document answer for a calculation loaddata_appdoc Load data from an application document mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents newdocument return a new database document of type ndi.document based on an app parameter_default return the default parameter code for a given calculator_type parameter_examples return the parameter code examples for a given calculator_type plot provide a diagnostic plot to show the results of the calculator, if appropriate plot_parameters provide a diagnostic plot to show the results of the calculator, if appropriate run run calculator on all possible inputs that match some parameters search_for_calculator_docs search for previous calculators search_for_input_parameters search for valid inputs to the calculator searchquery return a search query for an ndi.document related to this app simple a simple demonstration of an ndi.calculator object struct2doc create an ndi.document from an input structure and input parameters test perform a test of an ndi.calculator object varappname return the name of the application for use in variable creation version_url return the app version and url write_mock_expected_output write Methods help add_appdoc - Load data from an application document [...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ... APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments]) Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT. [additional inputs] are used to find or specify the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than 1 if the document already exists). If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT. This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [additional inputs] already exists: DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- 'Error' | An error is generating indicating the document exists. 'NoAction' | The existing document is left alone. The existing ndi.document | is returned in DOC. 'Replace' | Replace the document; note that this deletes all NDI_DOCUMENTS | that depend on the original. 'ReplaceIfDifferent' | Conditionally replace the document, but only if the | the data structures that define the document are not equal. Help for ndi.calc.example.simple/add_appdoc is inherited from superclass ndi.app.appdoc appdoc_description - return documentation for the type of document that is created by this calculator. TEXT = APP_DOC_DESCRIPTION(NDI_CALCULATOR_OBJ) Returns the help information for the document type for an NDI calculator object. Help for ndi.calc.example.simple/appdoc_description is inherited from superclass ndi.calculator are_input_parameters_equivalent - are two sets of input parameters equivalent? B = ARE_INPUT_PARAMETERS_EQUIVALENT(NDI_CALCULATOR_OBJ, INPUT_PARAMETERS1, INPUT_PARAMETERS2) Are two sets of input parameters equivalent? This function is used by SEARCH_FOR_CALCULATOR_DOCS to determine whether potential documents were actually generated by identical input parameters. In the base class, the structures are first re-organized so that all one-dimensional substructures are columns and then compared with vlt.data.eqlen(INPUT_PARAMETERS1, INPUT_PARAMETERS2). It is necessary to \"columnize\" the substructures because Matlab does not not necessarily preserve that orientation when data is written to or read from JSON. Help for ndi.calc.example.simple/are_input_parameters_equivalent is inherited from superclass ndi.calculator calc_path - CALC_PATH return the path to the ndi.calculator object P = CALC_PATH(CTEST_OBJ) Return the path of an ndi.calculator object. Help for ndi.calc.example.simple/calc_path is inherited from superclass ndi.mock.ctest calculate - perform the calculator for ndi.calc.example.simple DOC = CALCULATE(NDI_CALCULATOR_OBJ, PARAMETERS) Creates a simple_calc document given input parameters. The document that is created simple has an 'answer' that is given by the input parameters. check inputs clean_mock_docs - remove mock/test documents Help for ndi.calc.example.simple/clean_mock_docs is inherited from superclass ndi.mock.ctest clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Deletes the app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. B is 1 if the document is found, and 0 otherwise. Help for ndi.calc.example.simple/clear_appdoc is inherited from superclass ndi.app.appdoc compare_mock_docs - compare an expected calculation answer with an actual answer [B, ERRORMSG] = COMPARE_MOCK_DOCS(CTEST_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE) Given an NDI document with the expected answer to a calculation (EXPECTED_DOC), the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'), this function computes whether the ACTUAL_DOC is within an allowed tolerance of EXPECTED_DOC. B is 1 if the differences in the documents are within the tolerance of the class. Otherwise, B is 0. If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance. In this abstract class, B is always 1 and ERRORMSG is always an empty string. Developer's note: this method should be overridden in each calculator object. Help for ndi.calc.example.simple/compare_mock_docs is inherited from superclass ndi.mock.ctest default_parameters_query - what queries should be used to search for input parameters if none are provided? QUERY = DEFAULT_PARAMETERS_QUERY(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION) When one calls SEARCH_FOR_INPUT_PARAMETERS, it is possible to specify a 'query' structure to select particular documents to be placed into the parameters 'depends_on' specification. If one does not provide any 'query' structure, then the default values here are used. The function returns: |-----------------------|----------------------------------------------| | query | A structure with 'name' and 'query' fields | | | that describes a search to be performed to | | | identify inputs for the 'depends_on' field | | | in the PARAMETERS output. | |-----------------------|----------------------------------------------- In the base class, this examines the parameters_specifications for fixed 'depends_on' entries (entries that have both a 'name' and a 'value'). If it finds any, it creates a query indicating that the 'depends_on' field must match the specified name and value. Help for ndi.calc.example.simple/default_parameters_query is inherited from superclass ndi.calculator default_scope - default scope types for ndi.mock.ctest object BASE_SCOPE = ndi.mock.ctest.default_scope(); Return a default base_scope structure for an ndi.mock.ctest object. Help for ndi.calc.example.simple.default_scope is inherited from superclass ndi.mock.ctest default_search_for_input_parameters - default parameters for searching for inputs PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ) Returns a list of the default search parameters for finding appropriate inputs to the calculator. defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE) Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object. In the base class, the blank version of the ndi.document is read in and the default structure is built from the ndi.document's class property list. Help for ndi.calc.example.simple/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this uses the property info in the ndi.document to load the data structure. Help for ndi.calc.example.simple/doc2struct is inherited from superclass ndi.app.appdoc doc_about - --------------------------------------------------------------------------------------------- NDI_CALCULATOR: SIMPLE_CALC ---------------------------------------------------------------------------------------------- ------------------------ | SIMPLE_CALC -- ABOUT | ------------------------ SIMPLE_CALC is a demonstration document. It simply produces the 'answer' that is provided in the input parameters. Each SIMPLE_CALC document 'depends_on' an NDI daq system. Definition: apps/simple_calc.json docfiletext - return the text in the requested documentation file TEXT = ndi.calculator.docfiletext(CALCULATOR_TYPE, DOC_TYPE) Returns the text of the documentation files. CALCULATOR_TYPE should be the full object name of the calculator of interest. (for example: 'ndi.calc.stimulus.tuningcurve' or 'ndi.calc.vis.contrasttuning') DOC_TYPE should be the type of document requested ('general', 'output', 'searching for inputs') Example: text = ndi.calculator.docfiletext('ndi.calc.stimulus.tuningcurve','general'); Help for ndi.calc.example.simple.docfiletext is inherited from superclass ndi.calculator find_appdoc - find an ndi.app.appdoc document in the session database DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Using search criteria that is supported by [additional inputs], FIND_APPDOC searches the database for the ndi.document object DOC that is described by APPDOC_TYPE. DOC is always a cell array of all matching NDI_DOCUMENTs. In this superclass, empty is always returned. Subclasses should override this function to search for each document type. The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION. Help for ndi.calc.example.simple/find_appdoc is inherited from superclass ndi.app.appdoc generate_mock_docs - generate tests for ndi.calc. objects* [DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(CSTEST_OBJ,... SCOPE, NUMBER_OF_TESTS) SCOPE should be one of 'standard', 'low_noise', or 'high_noise'. 'standard' performs tests on specific hard-coded inputs. 'low_noise' performs tests on specific hard-coded inputs with small amounts of noise added. 'high_noise' performs tests on specific hard-coded inputs with large amounts of noise added. NUMBER_OF_TESTS is the number of tests to generate. Help for ndi.calc.example.simple/generate_mock_docs is inherited from superclass ndi.mock.ctest graphical_edit_calculator - create and control a GUI to graphically edit an NDI calculator instance GRAPHICAL_EDIT_CALCULATOR(...) Creates and controls a graphical user interface for creating an instance of an ndi.calculator object. Usage by the user: GRAPHICAL_EDIT_CALCULATOR('command','NEW','type','ndi.calc.TYPE','filename',filename,'name',name) or GRAPHICAL_EDIT_CALCULATOR('command','EDIT','filename',filename) Help for ndi.calc.example.simple.graphical_edit_calculator is inherited from superclass ndi.calculator is_valid_dependency_input - is a potential dependency input actually valid for this calculator? B = IS_VALID_DEPENDENCY_INPUT(NDI_CALCULATOR_OBJ, NAME, VALUE) Tests whether a potential input to a calculator is valid. The potential dependency name is provided in NAME and its ndi.document id is provided in VALUE. The base class behavior of this function is simply to return true, but it can be overridden if additional criteria beyond an ndi.query are needed to assess if a document is an appropriate input for the calculator. Help for ndi.calc.example.simple/is_valid_dependency_input is inherited from superclass ndi.calculator isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. This is true if APPDOC_STRUCT2 true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is, B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2). Help for ndi.calc.example.simple/isequal_appdoc_struct is inherited from superclass ndi.calculator isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise. In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.' Help for ndi.calc.example.simple/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc load_mock_expected_output - load expected NDI document answer for a calculation DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N) Load the Nth stored ndi.document that contains the expected answer for the Nth standard mock test. Help for ndi.calc.example.simple/load_mock_expected_output is inherited from superclass ndi.mock.ctest loaddata_appdoc - Load data from an application document [...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments]) Loads the data from app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. In the base class, this always returns empty. This function should be overridden by each subclass. The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION. Help for ndi.calc.example.simple/loaddata_appdoc is inherited from superclass ndi.app.appdoc mock_expected_filename - file of expected NDI document answer for a calculation FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N) Return the filename for the Nth stored ndi.document that contains the expected answer for the Nth standard mock test. Help for ndi.calc.example.simple/mock_expected_filename is inherited from superclass ndi.mock.ctest mock_path - return the path to the stored mock example output documents MP = MOCK_PATH(CTEST_OBJ) Returns the path to the mock document example outputs. The returned path ends in a file separator. Help for ndi.calc.example.simple/mock_path is inherited from superclass ndi.mock.ctest newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). Help for ndi.calc.example.simple/newdocument is inherited from superclass ndi.app parameter_default - return the default parameter code for a given calculator_type [CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE) Return the default parameter code CONTENTS for a given CALCULATOR_TYPE. CONTENTS is a character string. Example: [contents] = ndi.calculator.parameter_default('ndi.calc.stimulus.tuningcurve'); Help for ndi.calc.example.simple.parameter_default is inherited from superclass ndi.calculator parameter_examples - return the parameter code examples for a given calculator_type [NAMES, CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE) Return the example NAMES and parameter example code CONTENTS for a given CALCULATOR_TYPE. NAMES is a cell array of strings with the code example names. CONTENTS is a cell array of strings with the contents of the code examples. Example: [names,contents] = ndi.calculator.parameter_examples('ndi.calc.stimulus.tuningcurve'); Help for ndi.calc.example.simple.parameter_examples is inherited from superclass ndi.calculator plot - provide a diagnostic plot to show the results of the calculator, if appropriate H=PLOT(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...) Produce a diagnostic plot that can indicate to a reader whether or not the calculator has been performed in a manner that makes sense with its input data. Useful for debugging / validating a calculator. Handles to the figure, the axes, and any objects created are returned in H. By default, this plot is made in the current axes. This function takes additional input arguments as name/value pairs. See ndi.calculator.plot_parameters for a description of those parameters. Help for ndi.calc.example.simple/plot is inherited from superclass ndi.calculator plot_parameters - provide a diagnostic plot to show the results of the calculator, if appropriate PLOT_PARAMETERS(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...) Produce a diagnostic plot that can indicate to a reader whether or not the calculator has been performed in a manner that makes sense with its input data. Useful for debugging / validating a calculator. By default, this plot is made in the current axes. This function takes additional input arguments as name/value pairs: |---------------------------|--------------------------------------| | Parameter (default) | Description | |---------------------------|--------------------------------------| | newfigure (0) | 0/1 Should we make a new figure? | | holdstate (0) | 0/1 Should we preserve the 'hold' | | | state of the current axes? | | suppress_x_label (0) | 0/1 Should we suppress the x label? | | suppress_y_label (0) | 0/1 Should we suppress the y label? | | suppress_z_label (0) | 0/1 Should we suppress the z label? | | suppress_title (0) | 0/1 Should we suppress the title? | |---------------------------|--------------------------------------| Help for ndi.calc.example.simple.plot_parameters is inherited from superclass ndi.calculator run - run calculator on all possible inputs that match some parameters DOCS = RUN(NDI_CALCULATOR_OBJ, DOCEXISTSACTION, PARAMETERS) DOCEXISTSACTION can be 'Error', 'NoAction', 'Replace', or 'ReplaceIfDifferent' For calculators, 'ReplaceIfDifferent' is equivalent to 'NoAction' because the input parameters define the calculator. Step 1: set up input parameters; they can either be completely specified by the caller, or defaults can be used Help for ndi.calc.example.simple/run is inherited from superclass ndi.calculator search_for_calculator_docs - search for previous calculators [DOCS] = SEARCH_FOR_CALCULATOR_DOCS(NDI_CALCULATOR_OBJ, PARAMETERS) Performs a search to find all previously-created calculator documents that this mini-app creates. PARAMETERS is a structure with the following fields |------------------------|----------------------------------| | Fieldname | Description | |-----------------------------------------------------------| | input_parameters | A structure of input parameters | | | needed by the calculator. | | depends_on | A structure with fields 'name' | | | and 'value' that indicates any | | | exact matches that should be | | | satisfied. | |------------------------|----------------------------------| in the abstract class, this returns empty Help for ndi.calc.example.simple/search_for_calculator_docs is inherited from superclass ndi.calculator search_for_input_parameters - search for valid inputs to the calculator PARAMETERS = SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION) Identifies all possible sets of specific input PARAMETERS that can be used as inputs to the calculator. PARAMETERS is a cell array of parameter structures with fields 'input_parameters' and 'depends_on'. PARAMETERS_SPECIFICATION is a structure with the following fields: |----------------------------------------------------------------------| | input_parameters | A structure of fixed input parameters needed | | | by the calculator. Should not depend on | | | values in other documents. | | depends_on | A structure with 'name' and 'value' fields | | | that lists specific inputs that should be | | | used for the 'depends_on' field in the | | | PARAMETERS output. | | query | A structure with 'name' and 'query' fields | | | that describes a search to be performed to | | | identify inputs for the 'depends_on' field | | | in the PARAMETERS output. | |-----------------------|----------------------------------------------- Help for ndi.calc.example.simple/search_for_input_parameters is inherited from superclass ndi.calculator searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. Help for ndi.calc.example.simple/searchquery is inherited from superclass ndi.app simple - a simple demonstration of an ndi.calculator object SIMPLE_OBJ = SIMPLE(SESSION) Creates a SIMPLE ndi.calculator object Documentation for ndi.calc.example.simple/simple doc ndi.calc.example.simple struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this always returns empty. It must be overridden in subclasses. The documentation for overridden functions should be in the function APPDOC_DESCRIPTION. Help for ndi.calc.example.simple/struct2doc is inherited from superclass ndi.app.appdoc test - perform a test of an ndi.calculator object [B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN) Perform tests of the calculator for a certain SCOPE. B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons of the expected output of test i and actual output of test j are equal. Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should be 0, although results might be close enough for some comparisons to be equal even if there are no errors. If test indices are specified, B becomes a numel(specific_test_inds) x numel(specific_test_inds) array. ERRORMSG{i,j} is any error message given if the comparison between the expected outcome of test i and the actual outcome of test j. B_EXPECTED is the result of the comparisons between the expected outcome of test i and the expected outcome of test j. Some tests might have the same expected outcome, which can be useful for interpreting the results in B. SCOPE should be one of 'standard', 'low_noise', or 'high_noise'. 'standard' performs tests on specific hard-coded inputs. 'low_noise' performs tests on specific hard-coded inputs with small amounts of noise added. 'high_noise' performs tests on specific hard-coded inputs with large amounts of noise added. NUMBER_OF_TESTS indicates the number of tests to perform. PLOT_IT indicates (0/1) whether or not the results should be plotted. This function's behavior can be modified by name/value pairs. -------------------------------------------------------------------------------- | Parameter (default): | Description: | |--------------------------|---------------------------------------------------| | specific_test_inds([]) | Should we specify which tests to run? | |--------------------------|---------------------------------------------------| Step 1: generate_mock_docs Help for ndi.calc.example.simple/test is inherited from superclass ndi.mock.ctest varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. Help for ndi.calc.example.simple/varappname is inherited from superclass ndi.app version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system. Help for ndi.calc.example.simple/version_url is inherited from superclass ndi.app write_mock_expected_output - write B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC) Set the expected mock document for mock calculation NUMBER to be the ndi.document DOC. This function will not overwrite an existing expected mock document. It must be deleted manually to ensure programmer really wants to overwrite it. Help for ndi.calc.example.simple/write_mock_expected_output is inherited from superclass ndi.mock.ctest","title":"ndi.calc.example.simple"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bexample/simple.m/#class-ndicalcexamplesimple","text":"SIMPLE - a simple demonstration of an ndi.calculator object SIMPLE_OBJ = SIMPLE(SESSION) Creates a SIMPLE ndi.calculator object","title":"CLASS ndi.calc.example.simple"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bexample/simple.m/#superclasses","text":"ndi.calculator , ndi.app , ndi.documentservice , ndi.app.appdoc , ndi.mock.ctest","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bexample/simple.m/#properties","text":"Property Description fast_start session name doc_types doc_document_types doc_session base_scope","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bexample/simple.m/#methods","text":"Method Description add_appdoc Load data from an application document appdoc_description return documentation for the type of document that is created by this calculator. are_input_parameters_equivalent are two sets of input parameters equivalent? calc_path CALC_PATH return the path to the ndi.calculator object calculate perform the calculator for ndi.calc.example.simple clean_mock_docs remove mock/test documents clear_appdoc remove an ndi.app.appdoc document from a session database compare_mock_docs compare an expected calculation answer with an actual answer default_parameters_query what queries should be used to search for input parameters if none are provided? default_scope default scope types for ndi.mock.ctest object default_search_for_input_parameters default parameters for searching for inputs defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters doc_about --------------------------------------------------------------------------------------------- docfiletext return the text in the requested documentation file find_appdoc find an ndi.app.appdoc document in the session database generate_mock_docs generate tests for ndi.calc.* objects graphical_edit_calculator create and control a GUI to graphically edit an NDI calculator instance is_valid_dependency_input is a potential dependency input actually valid for this calculator? isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? load_mock_expected_output load expected NDI document answer for a calculation loaddata_appdoc Load data from an application document mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents newdocument return a new database document of type ndi.document based on an app parameter_default return the default parameter code for a given calculator_type parameter_examples return the parameter code examples for a given calculator_type plot provide a diagnostic plot to show the results of the calculator, if appropriate plot_parameters provide a diagnostic plot to show the results of the calculator, if appropriate run run calculator on all possible inputs that match some parameters search_for_calculator_docs search for previous calculators search_for_input_parameters search for valid inputs to the calculator searchquery return a search query for an ndi.document related to this app simple a simple demonstration of an ndi.calculator object struct2doc create an ndi.document from an input structure and input parameters test perform a test of an ndi.calculator object varappname return the name of the application for use in variable creation version_url return the app version and url write_mock_expected_output write","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bexample/simple.m/#methods-help","text":"add_appdoc - Load data from an application document [...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ... APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments]) Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT. [additional inputs] are used to find or specify the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than 1 if the document already exists). If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT. This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [additional inputs] already exists: DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- 'Error' | An error is generating indicating the document exists. 'NoAction' | The existing document is left alone. The existing ndi.document | is returned in DOC. 'Replace' | Replace the document; note that this deletes all NDI_DOCUMENTS | that depend on the original. 'ReplaceIfDifferent' | Conditionally replace the document, but only if the | the data structures that define the document are not equal. Help for ndi.calc.example.simple/add_appdoc is inherited from superclass ndi.app.appdoc appdoc_description - return documentation for the type of document that is created by this calculator. TEXT = APP_DOC_DESCRIPTION(NDI_CALCULATOR_OBJ) Returns the help information for the document type for an NDI calculator object. Help for ndi.calc.example.simple/appdoc_description is inherited from superclass ndi.calculator are_input_parameters_equivalent - are two sets of input parameters equivalent? B = ARE_INPUT_PARAMETERS_EQUIVALENT(NDI_CALCULATOR_OBJ, INPUT_PARAMETERS1, INPUT_PARAMETERS2) Are two sets of input parameters equivalent? This function is used by SEARCH_FOR_CALCULATOR_DOCS to determine whether potential documents were actually generated by identical input parameters. In the base class, the structures are first re-organized so that all one-dimensional substructures are columns and then compared with vlt.data.eqlen(INPUT_PARAMETERS1, INPUT_PARAMETERS2). It is necessary to \"columnize\" the substructures because Matlab does not not necessarily preserve that orientation when data is written to or read from JSON. Help for ndi.calc.example.simple/are_input_parameters_equivalent is inherited from superclass ndi.calculator calc_path - CALC_PATH return the path to the ndi.calculator object P = CALC_PATH(CTEST_OBJ) Return the path of an ndi.calculator object. Help for ndi.calc.example.simple/calc_path is inherited from superclass ndi.mock.ctest calculate - perform the calculator for ndi.calc.example.simple DOC = CALCULATE(NDI_CALCULATOR_OBJ, PARAMETERS) Creates a simple_calc document given input parameters. The document that is created simple has an 'answer' that is given by the input parameters. check inputs clean_mock_docs - remove mock/test documents Help for ndi.calc.example.simple/clean_mock_docs is inherited from superclass ndi.mock.ctest clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Deletes the app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. B is 1 if the document is found, and 0 otherwise. Help for ndi.calc.example.simple/clear_appdoc is inherited from superclass ndi.app.appdoc compare_mock_docs - compare an expected calculation answer with an actual answer [B, ERRORMSG] = COMPARE_MOCK_DOCS(CTEST_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE) Given an NDI document with the expected answer to a calculation (EXPECTED_DOC), the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'), this function computes whether the ACTUAL_DOC is within an allowed tolerance of EXPECTED_DOC. B is 1 if the differences in the documents are within the tolerance of the class. Otherwise, B is 0. If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance. In this abstract class, B is always 1 and ERRORMSG is always an empty string. Developer's note: this method should be overridden in each calculator object. Help for ndi.calc.example.simple/compare_mock_docs is inherited from superclass ndi.mock.ctest default_parameters_query - what queries should be used to search for input parameters if none are provided? QUERY = DEFAULT_PARAMETERS_QUERY(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION) When one calls SEARCH_FOR_INPUT_PARAMETERS, it is possible to specify a 'query' structure to select particular documents to be placed into the parameters 'depends_on' specification. If one does not provide any 'query' structure, then the default values here are used. The function returns: |-----------------------|----------------------------------------------| | query | A structure with 'name' and 'query' fields | | | that describes a search to be performed to | | | identify inputs for the 'depends_on' field | | | in the PARAMETERS output. | |-----------------------|----------------------------------------------- In the base class, this examines the parameters_specifications for fixed 'depends_on' entries (entries that have both a 'name' and a 'value'). If it finds any, it creates a query indicating that the 'depends_on' field must match the specified name and value. Help for ndi.calc.example.simple/default_parameters_query is inherited from superclass ndi.calculator default_scope - default scope types for ndi.mock.ctest object BASE_SCOPE = ndi.mock.ctest.default_scope(); Return a default base_scope structure for an ndi.mock.ctest object. Help for ndi.calc.example.simple.default_scope is inherited from superclass ndi.mock.ctest default_search_for_input_parameters - default parameters for searching for inputs PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ) Returns a list of the default search parameters for finding appropriate inputs to the calculator. defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE) Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object. In the base class, the blank version of the ndi.document is read in and the default structure is built from the ndi.document's class property list. Help for ndi.calc.example.simple/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this uses the property info in the ndi.document to load the data structure. Help for ndi.calc.example.simple/doc2struct is inherited from superclass ndi.app.appdoc doc_about - --------------------------------------------------------------------------------------------- NDI_CALCULATOR: SIMPLE_CALC ---------------------------------------------------------------------------------------------- ------------------------ | SIMPLE_CALC -- ABOUT | ------------------------ SIMPLE_CALC is a demonstration document. It simply produces the 'answer' that is provided in the input parameters. Each SIMPLE_CALC document 'depends_on' an NDI daq system. Definition: apps/simple_calc.json docfiletext - return the text in the requested documentation file TEXT = ndi.calculator.docfiletext(CALCULATOR_TYPE, DOC_TYPE) Returns the text of the documentation files. CALCULATOR_TYPE should be the full object name of the calculator of interest. (for example: 'ndi.calc.stimulus.tuningcurve' or 'ndi.calc.vis.contrasttuning') DOC_TYPE should be the type of document requested ('general', 'output', 'searching for inputs') Example: text = ndi.calculator.docfiletext('ndi.calc.stimulus.tuningcurve','general'); Help for ndi.calc.example.simple.docfiletext is inherited from superclass ndi.calculator find_appdoc - find an ndi.app.appdoc document in the session database DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Using search criteria that is supported by [additional inputs], FIND_APPDOC searches the database for the ndi.document object DOC that is described by APPDOC_TYPE. DOC is always a cell array of all matching NDI_DOCUMENTs. In this superclass, empty is always returned. Subclasses should override this function to search for each document type. The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION. Help for ndi.calc.example.simple/find_appdoc is inherited from superclass ndi.app.appdoc generate_mock_docs - generate tests for ndi.calc. objects* [DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(CSTEST_OBJ,... SCOPE, NUMBER_OF_TESTS) SCOPE should be one of 'standard', 'low_noise', or 'high_noise'. 'standard' performs tests on specific hard-coded inputs. 'low_noise' performs tests on specific hard-coded inputs with small amounts of noise added. 'high_noise' performs tests on specific hard-coded inputs with large amounts of noise added. NUMBER_OF_TESTS is the number of tests to generate. Help for ndi.calc.example.simple/generate_mock_docs is inherited from superclass ndi.mock.ctest graphical_edit_calculator - create and control a GUI to graphically edit an NDI calculator instance GRAPHICAL_EDIT_CALCULATOR(...) Creates and controls a graphical user interface for creating an instance of an ndi.calculator object. Usage by the user: GRAPHICAL_EDIT_CALCULATOR('command','NEW','type','ndi.calc.TYPE','filename',filename,'name',name) or GRAPHICAL_EDIT_CALCULATOR('command','EDIT','filename',filename) Help for ndi.calc.example.simple.graphical_edit_calculator is inherited from superclass ndi.calculator is_valid_dependency_input - is a potential dependency input actually valid for this calculator? B = IS_VALID_DEPENDENCY_INPUT(NDI_CALCULATOR_OBJ, NAME, VALUE) Tests whether a potential input to a calculator is valid. The potential dependency name is provided in NAME and its ndi.document id is provided in VALUE. The base class behavior of this function is simply to return true, but it can be overridden if additional criteria beyond an ndi.query are needed to assess if a document is an appropriate input for the calculator. Help for ndi.calc.example.simple/is_valid_dependency_input is inherited from superclass ndi.calculator isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. This is true if APPDOC_STRUCT2 true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is, B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2). Help for ndi.calc.example.simple/isequal_appdoc_struct is inherited from superclass ndi.calculator isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise. In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.' Help for ndi.calc.example.simple/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc load_mock_expected_output - load expected NDI document answer for a calculation DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N) Load the Nth stored ndi.document that contains the expected answer for the Nth standard mock test. Help for ndi.calc.example.simple/load_mock_expected_output is inherited from superclass ndi.mock.ctest loaddata_appdoc - Load data from an application document [...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments]) Loads the data from app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. In the base class, this always returns empty. This function should be overridden by each subclass. The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION. Help for ndi.calc.example.simple/loaddata_appdoc is inherited from superclass ndi.app.appdoc mock_expected_filename - file of expected NDI document answer for a calculation FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N) Return the filename for the Nth stored ndi.document that contains the expected answer for the Nth standard mock test. Help for ndi.calc.example.simple/mock_expected_filename is inherited from superclass ndi.mock.ctest mock_path - return the path to the stored mock example output documents MP = MOCK_PATH(CTEST_OBJ) Returns the path to the mock document example outputs. The returned path ends in a file separator. Help for ndi.calc.example.simple/mock_path is inherited from superclass ndi.mock.ctest newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). Help for ndi.calc.example.simple/newdocument is inherited from superclass ndi.app parameter_default - return the default parameter code for a given calculator_type [CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE) Return the default parameter code CONTENTS for a given CALCULATOR_TYPE. CONTENTS is a character string. Example: [contents] = ndi.calculator.parameter_default('ndi.calc.stimulus.tuningcurve'); Help for ndi.calc.example.simple.parameter_default is inherited from superclass ndi.calculator parameter_examples - return the parameter code examples for a given calculator_type [NAMES, CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE) Return the example NAMES and parameter example code CONTENTS for a given CALCULATOR_TYPE. NAMES is a cell array of strings with the code example names. CONTENTS is a cell array of strings with the contents of the code examples. Example: [names,contents] = ndi.calculator.parameter_examples('ndi.calc.stimulus.tuningcurve'); Help for ndi.calc.example.simple.parameter_examples is inherited from superclass ndi.calculator plot - provide a diagnostic plot to show the results of the calculator, if appropriate H=PLOT(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...) Produce a diagnostic plot that can indicate to a reader whether or not the calculator has been performed in a manner that makes sense with its input data. Useful for debugging / validating a calculator. Handles to the figure, the axes, and any objects created are returned in H. By default, this plot is made in the current axes. This function takes additional input arguments as name/value pairs. See ndi.calculator.plot_parameters for a description of those parameters. Help for ndi.calc.example.simple/plot is inherited from superclass ndi.calculator plot_parameters - provide a diagnostic plot to show the results of the calculator, if appropriate PLOT_PARAMETERS(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...) Produce a diagnostic plot that can indicate to a reader whether or not the calculator has been performed in a manner that makes sense with its input data. Useful for debugging / validating a calculator. By default, this plot is made in the current axes. This function takes additional input arguments as name/value pairs: |---------------------------|--------------------------------------| | Parameter (default) | Description | |---------------------------|--------------------------------------| | newfigure (0) | 0/1 Should we make a new figure? | | holdstate (0) | 0/1 Should we preserve the 'hold' | | | state of the current axes? | | suppress_x_label (0) | 0/1 Should we suppress the x label? | | suppress_y_label (0) | 0/1 Should we suppress the y label? | | suppress_z_label (0) | 0/1 Should we suppress the z label? | | suppress_title (0) | 0/1 Should we suppress the title? | |---------------------------|--------------------------------------| Help for ndi.calc.example.simple.plot_parameters is inherited from superclass ndi.calculator run - run calculator on all possible inputs that match some parameters DOCS = RUN(NDI_CALCULATOR_OBJ, DOCEXISTSACTION, PARAMETERS) DOCEXISTSACTION can be 'Error', 'NoAction', 'Replace', or 'ReplaceIfDifferent' For calculators, 'ReplaceIfDifferent' is equivalent to 'NoAction' because the input parameters define the calculator. Step 1: set up input parameters; they can either be completely specified by the caller, or defaults can be used Help for ndi.calc.example.simple/run is inherited from superclass ndi.calculator search_for_calculator_docs - search for previous calculators [DOCS] = SEARCH_FOR_CALCULATOR_DOCS(NDI_CALCULATOR_OBJ, PARAMETERS) Performs a search to find all previously-created calculator documents that this mini-app creates. PARAMETERS is a structure with the following fields |------------------------|----------------------------------| | Fieldname | Description | |-----------------------------------------------------------| | input_parameters | A structure of input parameters | | | needed by the calculator. | | depends_on | A structure with fields 'name' | | | and 'value' that indicates any | | | exact matches that should be | | | satisfied. | |------------------------|----------------------------------| in the abstract class, this returns empty Help for ndi.calc.example.simple/search_for_calculator_docs is inherited from superclass ndi.calculator search_for_input_parameters - search for valid inputs to the calculator PARAMETERS = SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION) Identifies all possible sets of specific input PARAMETERS that can be used as inputs to the calculator. PARAMETERS is a cell array of parameter structures with fields 'input_parameters' and 'depends_on'. PARAMETERS_SPECIFICATION is a structure with the following fields: |----------------------------------------------------------------------| | input_parameters | A structure of fixed input parameters needed | | | by the calculator. Should not depend on | | | values in other documents. | | depends_on | A structure with 'name' and 'value' fields | | | that lists specific inputs that should be | | | used for the 'depends_on' field in the | | | PARAMETERS output. | | query | A structure with 'name' and 'query' fields | | | that describes a search to be performed to | | | identify inputs for the 'depends_on' field | | | in the PARAMETERS output. | |-----------------------|----------------------------------------------- Help for ndi.calc.example.simple/search_for_input_parameters is inherited from superclass ndi.calculator searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. Help for ndi.calc.example.simple/searchquery is inherited from superclass ndi.app simple - a simple demonstration of an ndi.calculator object SIMPLE_OBJ = SIMPLE(SESSION) Creates a SIMPLE ndi.calculator object Documentation for ndi.calc.example.simple/simple doc ndi.calc.example.simple struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this always returns empty. It must be overridden in subclasses. The documentation for overridden functions should be in the function APPDOC_DESCRIPTION. Help for ndi.calc.example.simple/struct2doc is inherited from superclass ndi.app.appdoc test - perform a test of an ndi.calculator object [B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN) Perform tests of the calculator for a certain SCOPE. B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons of the expected output of test i and actual output of test j are equal. Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should be 0, although results might be close enough for some comparisons to be equal even if there are no errors. If test indices are specified, B becomes a numel(specific_test_inds) x numel(specific_test_inds) array. ERRORMSG{i,j} is any error message given if the comparison between the expected outcome of test i and the actual outcome of test j. B_EXPECTED is the result of the comparisons between the expected outcome of test i and the expected outcome of test j. Some tests might have the same expected outcome, which can be useful for interpreting the results in B. SCOPE should be one of 'standard', 'low_noise', or 'high_noise'. 'standard' performs tests on specific hard-coded inputs. 'low_noise' performs tests on specific hard-coded inputs with small amounts of noise added. 'high_noise' performs tests on specific hard-coded inputs with large amounts of noise added. NUMBER_OF_TESTS indicates the number of tests to perform. PLOT_IT indicates (0/1) whether or not the results should be plotted. This function's behavior can be modified by name/value pairs. -------------------------------------------------------------------------------- | Parameter (default): | Description: | |--------------------------|---------------------------------------------------| | specific_test_inds([]) | Should we specify which tests to run? | |--------------------------|---------------------------------------------------| Step 1: generate_mock_docs Help for ndi.calc.example.simple/test is inherited from superclass ndi.mock.ctest varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. Help for ndi.calc.example.simple/varappname is inherited from superclass ndi.app version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system. Help for ndi.calc.example.simple/version_url is inherited from superclass ndi.app write_mock_expected_output - write B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC) Set the expected mock document for mock calculation NUMBER to be the ndi.document DOC. This function will not overwrite an existing expected mock document. It must be deleted manually to ensure programmer really wants to overwrite it. Help for ndi.calc.example.simple/write_mock_expected_output is inherited from superclass ndi.mock.ctest","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bstimulus/tuningcurve.m/","text":"CLASS ndi.calc.stimulus.tuningcurve TUNINGCURVE - a tuningcurve demonstration of an ndi.calculator object TUNINGCURVE_OBJ = TUNINGCURVE(SESSION) Creates a TUNINGCURVE ndi.calculator object Superclasses ndi.calculator , ndi.app , ndi.documentservice , ndi.app.appdoc , ndi.mock.ctest Properties Property Description fast_start session name doc_types doc_document_types doc_session base_scope Methods Method Description add_appdoc Load data from an application document appdoc_description return documentation for the type of document that is created by this calculator. are_input_parameters_equivalent are two sets of input parameters equivalent? best_value calculate the stimulus with the \"best\" response best_value_empirical find the best response value for a given stimulus property calc_path CALC_PATH return the path to the ndi.calculator object calculate perform the calculator for ndi.calc.example.tuningcurve clean_mock_docs remove mock/test documents clear_appdoc remove an ndi.app.appdoc document from a session database compare_mock_docs compare an expected calculation answer with an actual answer default_parameters_query what queries should be used to search for input parameters if none are provided? default_scope default scope types for ndi.mock.ctest object default_search_for_input_parameters default parameters for searching for inputs defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters doc_about --------------------------------------------------------------------------------------------- docfiletext return the text in the requested documentation file find_appdoc find an ndi.app.appdoc document in the session database generate_mock_docs generate tests for ndi.calc.* objects graphical_edit_calculator create and control a GUI to graphically edit an NDI calculator instance is_valid_dependency_input is a potential dependency input actually valid for this calculator? isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? load_mock_expected_output load expected NDI document answer for a calculation loaddata_appdoc Load data from an application document mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents newdocument return a new database document of type ndi.document based on an app parameter_default return the default parameter code for a given calculator_type parameter_examples return the parameter code examples for a given calculator_type plot provide a diagnostic plot to show the results of the calculator plot_parameters provide a diagnostic plot to show the results of the calculator, if appropriate property_value_array find all values of a stimulus property run run calculator on all possible inputs that match some parameters search_for_calculator_docs search for previous calculators search_for_input_parameters search for valid inputs to the calculator searchquery return a search query for an ndi.document related to this app struct2doc create an ndi.document from an input structure and input parameters test perform a test of an ndi.calculator object tuningcurve a tuningcurve demonstration of an ndi.calculator object varappname return the name of the application for use in variable creation version_url return the app version and url write_mock_expected_output write Methods help add_appdoc - Load data from an application document [...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ... APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments]) Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT. [additional inputs] are used to find or specify the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than 1 if the document already exists). If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT. This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [additional inputs] already exists: DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- 'Error' | An error is generating indicating the document exists. 'NoAction' | The existing document is left alone. The existing ndi.document | is returned in DOC. 'Replace' | Replace the document; note that this deletes all NDI_DOCUMENTS | that depend on the original. 'ReplaceIfDifferent' | Conditionally replace the document, but only if the | the data structures that define the document are not equal. Help for ndi.calc.stimulus.tuningcurve/add_appdoc is inherited from superclass ndi.app.appdoc appdoc_description - return documentation for the type of document that is created by this calculator. TEXT = APP_DOC_DESCRIPTION(NDI_CALCULATOR_OBJ) Returns the help information for the document type for an NDI calculator object. Help for ndi.calc.stimulus.tuningcurve/appdoc_description is inherited from superclass ndi.calculator are_input_parameters_equivalent - are two sets of input parameters equivalent? B = ARE_INPUT_PARAMETERS_EQUIVALENT(NDI_CALCULATOR_OBJ, INPUT_PARAMETERS1, INPUT_PARAMETERS2) Are two sets of input parameters equivalent? This function is used by SEARCH_FOR_CALCULATOR_DOCS to determine whether potential documents were actually generated by identical input parameters. In the base class, the structures are first re-organized so that all one-dimensional substructures are columns and then compared with vlt.data.eqlen(INPUT_PARAMETERS1, INPUT_PARAMETERS2). It is necessary to \"columnize\" the substructures because Matlab does not not necessarily preserve that orientation when data is written to or read from JSON. Help for ndi.calc.stimulus.tuningcurve/are_input_parameters_equivalent is inherited from superclass ndi.calculator best_value - calculate the stimulus with the \"best\" response [N,V,PROPERTY_VALUE] = ndi.calc.stimulus.tuningcurve.best_value(NDI_CALC_STIMULUS_TUNINGCURVE, ALGORITHM, ... STIM_RESPONSE_DOC, PROPERTY) Given an ndi.document of type STIMULUS_RESPONSE_SCALAR, return the stimulus presentation number N with the \"best\" response, as determined by ALGORITHM, for any stimulus that has the property PROPERTY. N is the stimulus number that meets the criteria. V is the best response value. PROPERTY_VALUE is the value of the PROPERTY of stimulus N. The algorithms known are: ------------------------------------------------------------------------------------- 'empirical_maximum' | Use the stimulus with the empirically largest mean value. best_value_empirical - find the best response value for a given stimulus property [N, V, PROPERTY_VALUE] = ndi.calc.stimulus.tuningcurve.best_value_empirical(NDI_CALC_STIMULUS_TUNINGCURVE_OBJ, STIM_RESPONSE_DOC, PROPERTY) Given an ndi.document of type STIMULUS_RESPONSE_SCALAR, return the stimulus presentation number N with largest mean response for any stimulus that has the property PROPERTY. If the value is complex-valued, then the largest absolute value is used. N is the stimulus number that meets the criteria. V is the best response value. PROPERTY_VALUE is the value of the PROPERTY of stimulus N. If this function cannot find a stimulus presentation document for the STIM_RESPONSE_DOC, it produces an error. calc_path - CALC_PATH return the path to the ndi.calculator object P = CALC_PATH(CTEST_OBJ) Return the path of an ndi.calculator object. Help for ndi.calc.stimulus.tuningcurve/calc_path is inherited from superclass ndi.mock.ctest calculate - perform the calculator for ndi.calc.example.tuningcurve DOC = CALCULATE(NDI_CALCULATOR_OBJ, PARAMETERS) Creates a tuningcurve_calc document given input parameters. The document that is created tuningcurve by the input parameters. check inputs clean_mock_docs - remove mock/test documents Help for ndi.calc.stimulus.tuningcurve/clean_mock_docs is inherited from superclass ndi.mock.ctest clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Deletes the app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. B is 1 if the document is found, and 0 otherwise. Help for ndi.calc.stimulus.tuningcurve/clear_appdoc is inherited from superclass ndi.app.appdoc compare_mock_docs - compare an expected calculation answer with an actual answer [B, ERRORMSG] = COMPARE_MOCK_DOCS(CTEST_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE) Given an NDI document with the expected answer to a calculation (EXPECTED_DOC), the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'), this function computes whether the ACTUAL_DOC is within an allowed tolerance of EXPECTED_DOC. B is 1 if the differences in the documents are within the tolerance of the class. Otherwise, B is 0. If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance. In this abstract class, B is always 1 and ERRORMSG is always an empty string. Developer's note: this method should be overridden in each calculator object. Help for ndi.calc.stimulus.tuningcurve/compare_mock_docs is inherited from superclass ndi.mock.ctest default_parameters_query - what queries should be used to search for input parameters if none are provided? QUERY = DEFAULT_PARAMETERS_QUERY(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION) When one calls SEARCH_FOR_INPUT_PARAMETERS, it is possible to specify a 'query' structure to select particular documents to be placed into the parameters 'depends_on' specification. If one does not provide any 'query' structure, then the default values here are used. The function returns: |-----------------------|----------------------------------------------| | query | A structure with 'name' and 'query' fields | | | that describes a search to be performed to | | | identify inputs for the 'depends_on' field | | | in the PARAMETERS output. | |-----------------------|----------------------------------------------- For the ndi.calc.stimulus.tuningcurve_calc class, this first checks to see if fixed dependencies are already specified. If not, then it looks for documents of type 'stimulus_response_scalar' with 'response_type' fields the contain 'mean' or 'F1'. default_scope - default scope types for ndi.mock.ctest object BASE_SCOPE = ndi.mock.ctest.default_scope(); Return a default base_scope structure for an ndi.mock.ctest object. Help for ndi.calc.stimulus.tuningcurve.default_scope is inherited from superclass ndi.mock.ctest default_search_for_input_parameters - default parameters for searching for inputs PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ) Returns a list of the default search parameters for finding appropriate inputs to the calculator. For tuningcurve_calc, there is no appropriate default parameters so this search will yield empty. defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE) Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object. In the base class, the blank version of the ndi.document is read in and the default structure is built from the ndi.document's class property list. Help for ndi.calc.stimulus.tuningcurve/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this uses the property info in the ndi.document to load the data structure. Help for ndi.calc.stimulus.tuningcurve/doc2struct is inherited from superclass ndi.app.appdoc doc_about - --------------------------------------------------------------------------------------------- NDI_CALCULATOR: TUNINGCURVE_CALC ---------------------------------------------------------------------------------------------- ------------------------ | TUNINGCURVE_CALC -- ABOUT | ------------------------ TUNINGCURVE_CALC is a demonstration document. It simply produces the 'answer' that is provided in the input parameters. Each TUNINGCURVE_CALC document 'depends_on' an NDI daq system. Definition: apps/tuningcurve_calc.json docfiletext - return the text in the requested documentation file TEXT = ndi.calculator.docfiletext(CALCULATOR_TYPE, DOC_TYPE) Returns the text of the documentation files. CALCULATOR_TYPE should be the full object name of the calculator of interest. (for example: 'ndi.calc.stimulus.tuningcurve' or 'ndi.calc.vis.contrasttuning') DOC_TYPE should be the type of document requested ('general', 'output', 'searching for inputs') Example: text = ndi.calculator.docfiletext('ndi.calc.stimulus.tuningcurve','general'); Help for ndi.calc.stimulus.tuningcurve.docfiletext is inherited from superclass ndi.calculator find_appdoc - find an ndi.app.appdoc document in the session database DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Using search criteria that is supported by [additional inputs], FIND_APPDOC searches the database for the ndi.document object DOC that is described by APPDOC_TYPE. DOC is always a cell array of all matching NDI_DOCUMENTs. In this superclass, empty is always returned. Subclasses should override this function to search for each document type. The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION. Help for ndi.calc.stimulus.tuningcurve/find_appdoc is inherited from superclass ndi.app.appdoc generate_mock_docs - generate tests for ndi.calc. objects* [DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(CSTEST_OBJ,... SCOPE, NUMBER_OF_TESTS) SCOPE should be one of 'standard', 'low_noise', or 'high_noise'. 'standard' performs tests on specific hard-coded inputs. 'low_noise' performs tests on specific hard-coded inputs with small amounts of noise added. 'high_noise' performs tests on specific hard-coded inputs with large amounts of noise added. NUMBER_OF_TESTS is the number of tests to generate. Help for ndi.calc.stimulus.tuningcurve/generate_mock_docs is inherited from superclass ndi.mock.ctest graphical_edit_calculator - create and control a GUI to graphically edit an NDI calculator instance GRAPHICAL_EDIT_CALCULATOR(...) Creates and controls a graphical user interface for creating an instance of an ndi.calculator object. Usage by the user: GRAPHICAL_EDIT_CALCULATOR('command','NEW','type','ndi.calc.TYPE','filename',filename,'name',name) or GRAPHICAL_EDIT_CALCULATOR('command','EDIT','filename',filename) Help for ndi.calc.stimulus.tuningcurve.graphical_edit_calculator is inherited from superclass ndi.calculator is_valid_dependency_input - is a potential dependency input actually valid for this calculator? B = IS_VALID_DEPENDENCY_INPUT(NDI_CALCULATOR_OBJ, NAME, VALUE) Tests whether a potential input to a calculator is valid. The potential dependency name is provided in NAME and its base id is provided in VALUE. The base class behavior of this function is simply to return true, but it can be overridden if additional criteria beyond an ndi.query are needed to assess if a document is an appropriate input for the calculator. isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. This is true if APPDOC_STRUCT2 true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is, B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2). Help for ndi.calc.stimulus.tuningcurve/isequal_appdoc_struct is inherited from superclass ndi.calculator isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise. In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.' Help for ndi.calc.stimulus.tuningcurve/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc load_mock_expected_output - load expected NDI document answer for a calculation DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N) Load the Nth stored ndi.document that contains the expected answer for the Nth standard mock test. Help for ndi.calc.stimulus.tuningcurve/load_mock_expected_output is inherited from superclass ndi.mock.ctest loaddata_appdoc - Load data from an application document [...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments]) Loads the data from app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. In the base class, this always returns empty. This function should be overridden by each subclass. The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION. Help for ndi.calc.stimulus.tuningcurve/loaddata_appdoc is inherited from superclass ndi.app.appdoc mock_expected_filename - file of expected NDI document answer for a calculation FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N) Return the filename for the Nth stored ndi.document that contains the expected answer for the Nth standard mock test. Help for ndi.calc.stimulus.tuningcurve/mock_expected_filename is inherited from superclass ndi.mock.ctest mock_path - return the path to the stored mock example output documents MP = MOCK_PATH(CTEST_OBJ) Returns the path to the mock document example outputs. The returned path ends in a file separator. Help for ndi.calc.stimulus.tuningcurve/mock_path is inherited from superclass ndi.mock.ctest newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). Help for ndi.calc.stimulus.tuningcurve/newdocument is inherited from superclass ndi.app parameter_default - return the default parameter code for a given calculator_type [CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE) Return the default parameter code CONTENTS for a given CALCULATOR_TYPE. CONTENTS is a character string. Example: [contents] = ndi.calculator.parameter_default('ndi.calc.stimulus.tuningcurve'); Help for ndi.calc.stimulus.tuningcurve.parameter_default is inherited from superclass ndi.calculator parameter_examples - return the parameter code examples for a given calculator_type [NAMES, CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE) Return the example NAMES and parameter example code CONTENTS for a given CALCULATOR_TYPE. NAMES is a cell array of strings with the code example names. CONTENTS is a cell array of strings with the contents of the code examples. Example: [names,contents] = ndi.calculator.parameter_examples('ndi.calc.stimulus.tuningcurve'); Help for ndi.calc.stimulus.tuningcurve.parameter_examples is inherited from superclass ndi.calculator plot - provide a diagnostic plot to show the results of the calculator H=PLOT(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...) Produce a plot of the tuning curve. Handles to the figure, the axes, and any objects created are returned in H. This function takes additional input arguments as name/value pairs. See ndi.calculator.plot_parameters for a description of those parameters. plot_parameters - provide a diagnostic plot to show the results of the calculator, if appropriate PLOT_PARAMETERS(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...) Produce a diagnostic plot that can indicate to a reader whether or not the calculator has been performed in a manner that makes sense with its input data. Useful for debugging / validating a calculator. By default, this plot is made in the current axes. This function takes additional input arguments as name/value pairs: |---------------------------|--------------------------------------| | Parameter (default) | Description | |---------------------------|--------------------------------------| | newfigure (0) | 0/1 Should we make a new figure? | | holdstate (0) | 0/1 Should we preserve the 'hold' | | | state of the current axes? | | suppress_x_label (0) | 0/1 Should we suppress the x label? | | suppress_y_label (0) | 0/1 Should we suppress the y label? | | suppress_z_label (0) | 0/1 Should we suppress the z label? | | suppress_title (0) | 0/1 Should we suppress the title? | |---------------------------|--------------------------------------| Help for ndi.calc.stimulus.tuningcurve.plot_parameters is inherited from superclass ndi.calculator property_value_array - find all values of a stimulus property [PVA] = ndi.calc.stimulus.tuningcurve.property_value_array(NDI_CALC_STIMULUS_TUNINGCURVE_OBJ, STIM_RESPONSE_DOC, PROPERTY) Given an ndi.document of type STIMULUS_RESPONSE_SCALAR, return all values of the parameter PROPERTY that were used in the stimulus. Values will be returned in a cell array. If this function cannot find a stimulus presentation document for the STIM_RESPONSE_DOC, it produces an error. run - run calculator on all possible inputs that match some parameters DOCS = RUN(NDI_CALCULATOR_OBJ, DOCEXISTSACTION, PARAMETERS) DOCEXISTSACTION can be 'Error', 'NoAction', 'Replace', or 'ReplaceIfDifferent' For calculators, 'ReplaceIfDifferent' is equivalent to 'NoAction' because the input parameters define the calculator. Step 1: set up input parameters; they can either be completely specified by the caller, or defaults can be used Help for ndi.calc.stimulus.tuningcurve/run is inherited from superclass ndi.calculator search_for_calculator_docs - search for previous calculators [DOCS] = SEARCH_FOR_CALCULATOR_DOCS(NDI_CALCULATOR_OBJ, PARAMETERS) Performs a search to find all previously-created calculator documents that this mini-app creates. PARAMETERS is a structure with the following fields |------------------------|----------------------------------| | Fieldname | Description | |-----------------------------------------------------------| | input_parameters | A structure of input parameters | | | needed by the calculator. | | depends_on | A structure with fields 'name' | | | and 'value' that indicates any | | | exact matches that should be | | | satisfied. | |------------------------|----------------------------------| in the abstract class, this returns empty Help for ndi.calc.stimulus.tuningcurve/search_for_calculator_docs is inherited from superclass ndi.calculator search_for_input_parameters - search for valid inputs to the calculator PARAMETERS = SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION) Identifies all possible sets of specific input PARAMETERS that can be used as inputs to the calculator. PARAMETERS is a cell array of parameter structures with fields 'input_parameters' and 'depends_on'. PARAMETERS_SPECIFICATION is a structure with the following fields: |----------------------------------------------------------------------| | input_parameters | A structure of fixed input parameters needed | | | by the calculator. Should not depend on | | | values in other documents. | | depends_on | A structure with 'name' and 'value' fields | | | that lists specific inputs that should be | | | used for the 'depends_on' field in the | | | PARAMETERS output. | | query | A structure with 'name' and 'query' fields | | | that describes a search to be performed to | | | identify inputs for the 'depends_on' field | | | in the PARAMETERS output. | |-----------------------|----------------------------------------------- Help for ndi.calc.stimulus.tuningcurve/search_for_input_parameters is inherited from superclass ndi.calculator searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. Help for ndi.calc.stimulus.tuningcurve/searchquery is inherited from superclass ndi.app struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this always returns empty. It must be overridden in subclasses. The documentation for overridden functions should be in the function APPDOC_DESCRIPTION. Help for ndi.calc.stimulus.tuningcurve/struct2doc is inherited from superclass ndi.app.appdoc test - perform a test of an ndi.calculator object [B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN) Perform tests of the calculator for a certain SCOPE. B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons of the expected output of test i and actual output of test j are equal. Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should be 0, although results might be close enough for some comparisons to be equal even if there are no errors. If test indices are specified, B becomes a numel(specific_test_inds) x numel(specific_test_inds) array. ERRORMSG{i,j} is any error message given if the comparison between the expected outcome of test i and the actual outcome of test j. B_EXPECTED is the result of the comparisons between the expected outcome of test i and the expected outcome of test j. Some tests might have the same expected outcome, which can be useful for interpreting the results in B. SCOPE should be one of 'standard', 'low_noise', or 'high_noise'. 'standard' performs tests on specific hard-coded inputs. 'low_noise' performs tests on specific hard-coded inputs with small amounts of noise added. 'high_noise' performs tests on specific hard-coded inputs with large amounts of noise added. NUMBER_OF_TESTS indicates the number of tests to perform. PLOT_IT indicates (0/1) whether or not the results should be plotted. This function's behavior can be modified by name/value pairs. -------------------------------------------------------------------------------- | Parameter (default): | Description: | |--------------------------|---------------------------------------------------| | specific_test_inds([]) | Should we specify which tests to run? | |--------------------------|---------------------------------------------------| Step 1: generate_mock_docs Help for ndi.calc.stimulus.tuningcurve/test is inherited from superclass ndi.mock.ctest tuningcurve - a tuningcurve demonstration of an ndi.calculator object TUNINGCURVE_OBJ = TUNINGCURVE(SESSION) Creates a TUNINGCURVE ndi.calculator object Documentation for ndi.calc.stimulus.tuningcurve/tuningcurve doc ndi.calc.stimulus.tuningcurve varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. Help for ndi.calc.stimulus.tuningcurve/varappname is inherited from superclass ndi.app version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system. Help for ndi.calc.stimulus.tuningcurve/version_url is inherited from superclass ndi.app write_mock_expected_output - write B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC) Set the expected mock document for mock calculation NUMBER to be the ndi.document DOC. This function will not overwrite an existing expected mock document. It must be deleted manually to ensure programmer really wants to overwrite it. Help for ndi.calc.stimulus.tuningcurve/write_mock_expected_output is inherited from superclass ndi.mock.ctest","title":"ndi.calc.stimulus.tuningcurve"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bstimulus/tuningcurve.m/#class-ndicalcstimulustuningcurve","text":"TUNINGCURVE - a tuningcurve demonstration of an ndi.calculator object TUNINGCURVE_OBJ = TUNINGCURVE(SESSION) Creates a TUNINGCURVE ndi.calculator object","title":"CLASS ndi.calc.stimulus.tuningcurve"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bstimulus/tuningcurve.m/#superclasses","text":"ndi.calculator , ndi.app , ndi.documentservice , ndi.app.appdoc , ndi.mock.ctest","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bstimulus/tuningcurve.m/#properties","text":"Property Description fast_start session name doc_types doc_document_types doc_session base_scope","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bstimulus/tuningcurve.m/#methods","text":"Method Description add_appdoc Load data from an application document appdoc_description return documentation for the type of document that is created by this calculator. are_input_parameters_equivalent are two sets of input parameters equivalent? best_value calculate the stimulus with the \"best\" response best_value_empirical find the best response value for a given stimulus property calc_path CALC_PATH return the path to the ndi.calculator object calculate perform the calculator for ndi.calc.example.tuningcurve clean_mock_docs remove mock/test documents clear_appdoc remove an ndi.app.appdoc document from a session database compare_mock_docs compare an expected calculation answer with an actual answer default_parameters_query what queries should be used to search for input parameters if none are provided? default_scope default scope types for ndi.mock.ctest object default_search_for_input_parameters default parameters for searching for inputs defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters doc_about --------------------------------------------------------------------------------------------- docfiletext return the text in the requested documentation file find_appdoc find an ndi.app.appdoc document in the session database generate_mock_docs generate tests for ndi.calc.* objects graphical_edit_calculator create and control a GUI to graphically edit an NDI calculator instance is_valid_dependency_input is a potential dependency input actually valid for this calculator? isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? load_mock_expected_output load expected NDI document answer for a calculation loaddata_appdoc Load data from an application document mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents newdocument return a new database document of type ndi.document based on an app parameter_default return the default parameter code for a given calculator_type parameter_examples return the parameter code examples for a given calculator_type plot provide a diagnostic plot to show the results of the calculator plot_parameters provide a diagnostic plot to show the results of the calculator, if appropriate property_value_array find all values of a stimulus property run run calculator on all possible inputs that match some parameters search_for_calculator_docs search for previous calculators search_for_input_parameters search for valid inputs to the calculator searchquery return a search query for an ndi.document related to this app struct2doc create an ndi.document from an input structure and input parameters test perform a test of an ndi.calculator object tuningcurve a tuningcurve demonstration of an ndi.calculator object varappname return the name of the application for use in variable creation version_url return the app version and url write_mock_expected_output write","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bstimulus/tuningcurve.m/#methods-help","text":"add_appdoc - Load data from an application document [...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ... APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments]) Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT. [additional inputs] are used to find or specify the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than 1 if the document already exists). If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT. This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [additional inputs] already exists: DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- 'Error' | An error is generating indicating the document exists. 'NoAction' | The existing document is left alone. The existing ndi.document | is returned in DOC. 'Replace' | Replace the document; note that this deletes all NDI_DOCUMENTS | that depend on the original. 'ReplaceIfDifferent' | Conditionally replace the document, but only if the | the data structures that define the document are not equal. Help for ndi.calc.stimulus.tuningcurve/add_appdoc is inherited from superclass ndi.app.appdoc appdoc_description - return documentation for the type of document that is created by this calculator. TEXT = APP_DOC_DESCRIPTION(NDI_CALCULATOR_OBJ) Returns the help information for the document type for an NDI calculator object. Help for ndi.calc.stimulus.tuningcurve/appdoc_description is inherited from superclass ndi.calculator are_input_parameters_equivalent - are two sets of input parameters equivalent? B = ARE_INPUT_PARAMETERS_EQUIVALENT(NDI_CALCULATOR_OBJ, INPUT_PARAMETERS1, INPUT_PARAMETERS2) Are two sets of input parameters equivalent? This function is used by SEARCH_FOR_CALCULATOR_DOCS to determine whether potential documents were actually generated by identical input parameters. In the base class, the structures are first re-organized so that all one-dimensional substructures are columns and then compared with vlt.data.eqlen(INPUT_PARAMETERS1, INPUT_PARAMETERS2). It is necessary to \"columnize\" the substructures because Matlab does not not necessarily preserve that orientation when data is written to or read from JSON. Help for ndi.calc.stimulus.tuningcurve/are_input_parameters_equivalent is inherited from superclass ndi.calculator best_value - calculate the stimulus with the \"best\" response [N,V,PROPERTY_VALUE] = ndi.calc.stimulus.tuningcurve.best_value(NDI_CALC_STIMULUS_TUNINGCURVE, ALGORITHM, ... STIM_RESPONSE_DOC, PROPERTY) Given an ndi.document of type STIMULUS_RESPONSE_SCALAR, return the stimulus presentation number N with the \"best\" response, as determined by ALGORITHM, for any stimulus that has the property PROPERTY. N is the stimulus number that meets the criteria. V is the best response value. PROPERTY_VALUE is the value of the PROPERTY of stimulus N. The algorithms known are: ------------------------------------------------------------------------------------- 'empirical_maximum' | Use the stimulus with the empirically largest mean value. best_value_empirical - find the best response value for a given stimulus property [N, V, PROPERTY_VALUE] = ndi.calc.stimulus.tuningcurve.best_value_empirical(NDI_CALC_STIMULUS_TUNINGCURVE_OBJ, STIM_RESPONSE_DOC, PROPERTY) Given an ndi.document of type STIMULUS_RESPONSE_SCALAR, return the stimulus presentation number N with largest mean response for any stimulus that has the property PROPERTY. If the value is complex-valued, then the largest absolute value is used. N is the stimulus number that meets the criteria. V is the best response value. PROPERTY_VALUE is the value of the PROPERTY of stimulus N. If this function cannot find a stimulus presentation document for the STIM_RESPONSE_DOC, it produces an error. calc_path - CALC_PATH return the path to the ndi.calculator object P = CALC_PATH(CTEST_OBJ) Return the path of an ndi.calculator object. Help for ndi.calc.stimulus.tuningcurve/calc_path is inherited from superclass ndi.mock.ctest calculate - perform the calculator for ndi.calc.example.tuningcurve DOC = CALCULATE(NDI_CALCULATOR_OBJ, PARAMETERS) Creates a tuningcurve_calc document given input parameters. The document that is created tuningcurve by the input parameters. check inputs clean_mock_docs - remove mock/test documents Help for ndi.calc.stimulus.tuningcurve/clean_mock_docs is inherited from superclass ndi.mock.ctest clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Deletes the app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. B is 1 if the document is found, and 0 otherwise. Help for ndi.calc.stimulus.tuningcurve/clear_appdoc is inherited from superclass ndi.app.appdoc compare_mock_docs - compare an expected calculation answer with an actual answer [B, ERRORMSG] = COMPARE_MOCK_DOCS(CTEST_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE) Given an NDI document with the expected answer to a calculation (EXPECTED_DOC), the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'), this function computes whether the ACTUAL_DOC is within an allowed tolerance of EXPECTED_DOC. B is 1 if the differences in the documents are within the tolerance of the class. Otherwise, B is 0. If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance. In this abstract class, B is always 1 and ERRORMSG is always an empty string. Developer's note: this method should be overridden in each calculator object. Help for ndi.calc.stimulus.tuningcurve/compare_mock_docs is inherited from superclass ndi.mock.ctest default_parameters_query - what queries should be used to search for input parameters if none are provided? QUERY = DEFAULT_PARAMETERS_QUERY(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION) When one calls SEARCH_FOR_INPUT_PARAMETERS, it is possible to specify a 'query' structure to select particular documents to be placed into the parameters 'depends_on' specification. If one does not provide any 'query' structure, then the default values here are used. The function returns: |-----------------------|----------------------------------------------| | query | A structure with 'name' and 'query' fields | | | that describes a search to be performed to | | | identify inputs for the 'depends_on' field | | | in the PARAMETERS output. | |-----------------------|----------------------------------------------- For the ndi.calc.stimulus.tuningcurve_calc class, this first checks to see if fixed dependencies are already specified. If not, then it looks for documents of type 'stimulus_response_scalar' with 'response_type' fields the contain 'mean' or 'F1'. default_scope - default scope types for ndi.mock.ctest object BASE_SCOPE = ndi.mock.ctest.default_scope(); Return a default base_scope structure for an ndi.mock.ctest object. Help for ndi.calc.stimulus.tuningcurve.default_scope is inherited from superclass ndi.mock.ctest default_search_for_input_parameters - default parameters for searching for inputs PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ) Returns a list of the default search parameters for finding appropriate inputs to the calculator. For tuningcurve_calc, there is no appropriate default parameters so this search will yield empty. defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE) Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object. In the base class, the blank version of the ndi.document is read in and the default structure is built from the ndi.document's class property list. Help for ndi.calc.stimulus.tuningcurve/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this uses the property info in the ndi.document to load the data structure. Help for ndi.calc.stimulus.tuningcurve/doc2struct is inherited from superclass ndi.app.appdoc doc_about - --------------------------------------------------------------------------------------------- NDI_CALCULATOR: TUNINGCURVE_CALC ---------------------------------------------------------------------------------------------- ------------------------ | TUNINGCURVE_CALC -- ABOUT | ------------------------ TUNINGCURVE_CALC is a demonstration document. It simply produces the 'answer' that is provided in the input parameters. Each TUNINGCURVE_CALC document 'depends_on' an NDI daq system. Definition: apps/tuningcurve_calc.json docfiletext - return the text in the requested documentation file TEXT = ndi.calculator.docfiletext(CALCULATOR_TYPE, DOC_TYPE) Returns the text of the documentation files. CALCULATOR_TYPE should be the full object name of the calculator of interest. (for example: 'ndi.calc.stimulus.tuningcurve' or 'ndi.calc.vis.contrasttuning') DOC_TYPE should be the type of document requested ('general', 'output', 'searching for inputs') Example: text = ndi.calculator.docfiletext('ndi.calc.stimulus.tuningcurve','general'); Help for ndi.calc.stimulus.tuningcurve.docfiletext is inherited from superclass ndi.calculator find_appdoc - find an ndi.app.appdoc document in the session database DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs]) Using search criteria that is supported by [additional inputs], FIND_APPDOC searches the database for the ndi.document object DOC that is described by APPDOC_TYPE. DOC is always a cell array of all matching NDI_DOCUMENTs. In this superclass, empty is always returned. Subclasses should override this function to search for each document type. The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION. Help for ndi.calc.stimulus.tuningcurve/find_appdoc is inherited from superclass ndi.app.appdoc generate_mock_docs - generate tests for ndi.calc. objects* [DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(CSTEST_OBJ,... SCOPE, NUMBER_OF_TESTS) SCOPE should be one of 'standard', 'low_noise', or 'high_noise'. 'standard' performs tests on specific hard-coded inputs. 'low_noise' performs tests on specific hard-coded inputs with small amounts of noise added. 'high_noise' performs tests on specific hard-coded inputs with large amounts of noise added. NUMBER_OF_TESTS is the number of tests to generate. Help for ndi.calc.stimulus.tuningcurve/generate_mock_docs is inherited from superclass ndi.mock.ctest graphical_edit_calculator - create and control a GUI to graphically edit an NDI calculator instance GRAPHICAL_EDIT_CALCULATOR(...) Creates and controls a graphical user interface for creating an instance of an ndi.calculator object. Usage by the user: GRAPHICAL_EDIT_CALCULATOR('command','NEW','type','ndi.calc.TYPE','filename',filename,'name',name) or GRAPHICAL_EDIT_CALCULATOR('command','EDIT','filename',filename) Help for ndi.calc.stimulus.tuningcurve.graphical_edit_calculator is inherited from superclass ndi.calculator is_valid_dependency_input - is a potential dependency input actually valid for this calculator? B = IS_VALID_DEPENDENCY_INPUT(NDI_CALCULATOR_OBJ, NAME, VALUE) Tests whether a potential input to a calculator is valid. The potential dependency name is provided in NAME and its base id is provided in VALUE. The base class behavior of this function is simply to return true, but it can be overridden if additional criteria beyond an ndi.query are needed to assess if a document is an appropriate input for the calculator. isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. This is true if APPDOC_STRUCT2 true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is, B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2). Help for ndi.calc.stimulus.tuningcurve/isequal_appdoc_struct is inherited from superclass ndi.calculator isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise. In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.' Help for ndi.calc.stimulus.tuningcurve/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc load_mock_expected_output - load expected NDI document answer for a calculation DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N) Load the Nth stored ndi.document that contains the expected answer for the Nth standard mock test. Help for ndi.calc.stimulus.tuningcurve/load_mock_expected_output is inherited from superclass ndi.mock.ctest loaddata_appdoc - Load data from an application document [...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments]) Loads the data from app document of style DOC_NAME from the database. [additional inputs] are used to find the NDI_document in the database. They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation for each app. In the base class, this always returns empty. This function should be overridden by each subclass. The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION. Help for ndi.calc.stimulus.tuningcurve/loaddata_appdoc is inherited from superclass ndi.app.appdoc mock_expected_filename - file of expected NDI document answer for a calculation FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N) Return the filename for the Nth stored ndi.document that contains the expected answer for the Nth standard mock test. Help for ndi.calc.stimulus.tuningcurve/mock_expected_filename is inherited from superclass ndi.mock.ctest mock_path - return the path to the stored mock example output documents MP = MOCK_PATH(CTEST_OBJ) Returns the path to the mock document example outputs. The returned path ends in a file separator. Help for ndi.calc.stimulus.tuningcurve/mock_path is inherited from superclass ndi.mock.ctest newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). Help for ndi.calc.stimulus.tuningcurve/newdocument is inherited from superclass ndi.app parameter_default - return the default parameter code for a given calculator_type [CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE) Return the default parameter code CONTENTS for a given CALCULATOR_TYPE. CONTENTS is a character string. Example: [contents] = ndi.calculator.parameter_default('ndi.calc.stimulus.tuningcurve'); Help for ndi.calc.stimulus.tuningcurve.parameter_default is inherited from superclass ndi.calculator parameter_examples - return the parameter code examples for a given calculator_type [NAMES, CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE) Return the example NAMES and parameter example code CONTENTS for a given CALCULATOR_TYPE. NAMES is a cell array of strings with the code example names. CONTENTS is a cell array of strings with the contents of the code examples. Example: [names,contents] = ndi.calculator.parameter_examples('ndi.calc.stimulus.tuningcurve'); Help for ndi.calc.stimulus.tuningcurve.parameter_examples is inherited from superclass ndi.calculator plot - provide a diagnostic plot to show the results of the calculator H=PLOT(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...) Produce a plot of the tuning curve. Handles to the figure, the axes, and any objects created are returned in H. This function takes additional input arguments as name/value pairs. See ndi.calculator.plot_parameters for a description of those parameters. plot_parameters - provide a diagnostic plot to show the results of the calculator, if appropriate PLOT_PARAMETERS(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...) Produce a diagnostic plot that can indicate to a reader whether or not the calculator has been performed in a manner that makes sense with its input data. Useful for debugging / validating a calculator. By default, this plot is made in the current axes. This function takes additional input arguments as name/value pairs: |---------------------------|--------------------------------------| | Parameter (default) | Description | |---------------------------|--------------------------------------| | newfigure (0) | 0/1 Should we make a new figure? | | holdstate (0) | 0/1 Should we preserve the 'hold' | | | state of the current axes? | | suppress_x_label (0) | 0/1 Should we suppress the x label? | | suppress_y_label (0) | 0/1 Should we suppress the y label? | | suppress_z_label (0) | 0/1 Should we suppress the z label? | | suppress_title (0) | 0/1 Should we suppress the title? | |---------------------------|--------------------------------------| Help for ndi.calc.stimulus.tuningcurve.plot_parameters is inherited from superclass ndi.calculator property_value_array - find all values of a stimulus property [PVA] = ndi.calc.stimulus.tuningcurve.property_value_array(NDI_CALC_STIMULUS_TUNINGCURVE_OBJ, STIM_RESPONSE_DOC, PROPERTY) Given an ndi.document of type STIMULUS_RESPONSE_SCALAR, return all values of the parameter PROPERTY that were used in the stimulus. Values will be returned in a cell array. If this function cannot find a stimulus presentation document for the STIM_RESPONSE_DOC, it produces an error. run - run calculator on all possible inputs that match some parameters DOCS = RUN(NDI_CALCULATOR_OBJ, DOCEXISTSACTION, PARAMETERS) DOCEXISTSACTION can be 'Error', 'NoAction', 'Replace', or 'ReplaceIfDifferent' For calculators, 'ReplaceIfDifferent' is equivalent to 'NoAction' because the input parameters define the calculator. Step 1: set up input parameters; they can either be completely specified by the caller, or defaults can be used Help for ndi.calc.stimulus.tuningcurve/run is inherited from superclass ndi.calculator search_for_calculator_docs - search for previous calculators [DOCS] = SEARCH_FOR_CALCULATOR_DOCS(NDI_CALCULATOR_OBJ, PARAMETERS) Performs a search to find all previously-created calculator documents that this mini-app creates. PARAMETERS is a structure with the following fields |------------------------|----------------------------------| | Fieldname | Description | |-----------------------------------------------------------| | input_parameters | A structure of input parameters | | | needed by the calculator. | | depends_on | A structure with fields 'name' | | | and 'value' that indicates any | | | exact matches that should be | | | satisfied. | |------------------------|----------------------------------| in the abstract class, this returns empty Help for ndi.calc.stimulus.tuningcurve/search_for_calculator_docs is inherited from superclass ndi.calculator search_for_input_parameters - search for valid inputs to the calculator PARAMETERS = SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION) Identifies all possible sets of specific input PARAMETERS that can be used as inputs to the calculator. PARAMETERS is a cell array of parameter structures with fields 'input_parameters' and 'depends_on'. PARAMETERS_SPECIFICATION is a structure with the following fields: |----------------------------------------------------------------------| | input_parameters | A structure of fixed input parameters needed | | | by the calculator. Should not depend on | | | values in other documents. | | depends_on | A structure with 'name' and 'value' fields | | | that lists specific inputs that should be | | | used for the 'depends_on' field in the | | | PARAMETERS output. | | query | A structure with 'name' and 'query' fields | | | that describes a search to be performed to | | | identify inputs for the 'depends_on' field | | | in the PARAMETERS output. | |-----------------------|----------------------------------------------- Help for ndi.calc.stimulus.tuningcurve/search_for_input_parameters is inherited from superclass ndi.calculator searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY(NDI_APP_OBJ) Returns a cell array of strings that allow the creation or searching of an ndi.database document for this app with field 'app' that has subfield 'name' equal to the app's VARAPPNAME. Help for ndi.calc.stimulus.tuningcurve/searchquery is inherited from superclass ndi.app struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters] Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ. In the base class, this always returns empty. It must be overridden in subclasses. The documentation for overridden functions should be in the function APPDOC_DESCRIPTION. Help for ndi.calc.stimulus.tuningcurve/struct2doc is inherited from superclass ndi.app.appdoc test - perform a test of an ndi.calculator object [B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN) Perform tests of the calculator for a certain SCOPE. B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons of the expected output of test i and actual output of test j are equal. Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should be 0, although results might be close enough for some comparisons to be equal even if there are no errors. If test indices are specified, B becomes a numel(specific_test_inds) x numel(specific_test_inds) array. ERRORMSG{i,j} is any error message given if the comparison between the expected outcome of test i and the actual outcome of test j. B_EXPECTED is the result of the comparisons between the expected outcome of test i and the expected outcome of test j. Some tests might have the same expected outcome, which can be useful for interpreting the results in B. SCOPE should be one of 'standard', 'low_noise', or 'high_noise'. 'standard' performs tests on specific hard-coded inputs. 'low_noise' performs tests on specific hard-coded inputs with small amounts of noise added. 'high_noise' performs tests on specific hard-coded inputs with large amounts of noise added. NUMBER_OF_TESTS indicates the number of tests to perform. PLOT_IT indicates (0/1) whether or not the results should be plotted. This function's behavior can be modified by name/value pairs. -------------------------------------------------------------------------------- | Parameter (default): | Description: | |--------------------------|---------------------------------------------------| | specific_test_inds([]) | Should we specify which tests to run? | |--------------------------|---------------------------------------------------| Step 1: generate_mock_docs Help for ndi.calc.stimulus.tuningcurve/test is inherited from superclass ndi.mock.ctest tuningcurve - a tuningcurve demonstration of an ndi.calculator object TUNINGCURVE_OBJ = TUNINGCURVE(SESSION) Creates a TUNINGCURVE ndi.calculator object Documentation for ndi.calc.stimulus.tuningcurve/tuningcurve doc ndi.calc.stimulus.tuningcurve varappname - return the name of the application for use in variable creation AN = VARAPPNAME(NDI_APP_OBJ) Returns the name of the app modified for use as a variable name, either as a Matlab variable or a name in a document. Help for ndi.calc.stimulus.tuningcurve/varappname is inherited from superclass ndi.app version_url - return the app version and url [V, URL] = VERSION_URL(NDI_APP_OBJ) Return the version and url for the current app. In the base class, it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory. Developers should override this method in their own class if they use a different version control system. Help for ndi.calc.stimulus.tuningcurve/version_url is inherited from superclass ndi.app write_mock_expected_output - write B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC) Set the expected mock document for mock calculation NUMBER to be the ndi.document DOC. This function will not overwrite an existing expected mock document. It must be deleted manually to ensure programmer really wants to overwrite it. Help for ndi.calc.stimulus.tuningcurve/write_mock_expected_output is inherited from superclass ndi.mock.ctest","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/authenticate.m/","text":"ndi.cloud.authenticate authenticate - Authenticate using secret, environment or GUI Form","title":"ndi.cloud.authenticate"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/authenticate.m/#ndicloudauthenticate","text":"authenticate - Authenticate using secret, environment or GUI Form","title":"ndi.cloud.authenticate"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/calculate_document_size.m/","text":"ndi.cloud.calculate_document_size CALCULATE_DOCUMENT_SIZE - Calculates the size of the OpenMinds documents SIZE = ndi.cloud.CALCULATE_DOCUMENT_SIZE(COVERTEDDOCS) Inputs: CONVERTEDDOCS: A cell array of converted OpenMinds documents Outputs: SIZE: The size of the converted OpenMinds documents in kilobytes","title":"ndi.cloud.calculate_document_size"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/calculate_document_size.m/#ndicloudcalculate_document_size","text":"CALCULATE_DOCUMENT_SIZE - Calculates the size of the OpenMinds documents SIZE = ndi.cloud.CALCULATE_DOCUMENT_SIZE(COVERTEDDOCS) Inputs: CONVERTEDDOCS: A cell array of converted OpenMinds documents Outputs: SIZE: The size of the converted OpenMinds documents in kilobytes","title":"ndi.cloud.calculate_document_size"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/create_cloud_metadata_struct.m/","text":"ndi.cloud.create_cloud_metadata_struct CREATE_CLOUD_METADATA - upload metadata to the NDI Cloud [STATUS, DATASET] = ndi.cloud.CREATE_CLOUD_METADATA_STRUCT(S) Inputs: S - a struct with the metadata to create Outputs: STATUS - did the upload work? 0 for no, 1 for yes RESPONSE - The post request summary DATASET_ID - The created dataset id","title":"ndi.cloud.create_cloud_metadata_struct"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/create_cloud_metadata_struct.m/#ndicloudcreate_cloud_metadata_struct","text":"CREATE_CLOUD_METADATA - upload metadata to the NDI Cloud [STATUS, DATASET] = ndi.cloud.CREATE_CLOUD_METADATA_STRUCT(S) Inputs: S - a struct with the metadata to create Outputs: STATUS - did the upload work? 0 for no, 1 for yes RESPONSE - The post request summary DATASET_ID - The created dataset id","title":"ndi.cloud.create_cloud_metadata_struct"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/delete_cloud_openminds_doc.m/","text":"ndi.cloud.delete_cloud_openminds_doc DELETE_CLOUD_OPENMINDS_DOC - delete all the openminds documents in the dataset ndi.cloud.delete_cloud_openminds_doc(AUTH_TOKEN,DATASET_ID) input: AUTH_TOKEN - the authorization token DATASET_ID - the dataset id where the documents will be deleted output: SIZE - the size (in kilobytes) of the deleted documents SESSION_ID - the session id of the deleted documents","title":"ndi.cloud.delete_cloud_openminds_doc"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/delete_cloud_openminds_doc.m/#ndiclouddelete_cloud_openminds_doc","text":"DELETE_CLOUD_OPENMINDS_DOC - delete all the openminds documents in the dataset ndi.cloud.delete_cloud_openminds_doc(AUTH_TOKEN,DATASET_ID) input: AUTH_TOKEN - the authorization token DATASET_ID - the dataset id where the documents will be deleted output: SIZE - the size (in kilobytes) of the deleted documents SESSION_ID - the session id of the deleted documents","title":"ndi.cloud.delete_cloud_openminds_doc"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/delete_local_openminds_doc.m/","text":"ndi.cloud.delete_local_openminds_doc DELETE_LOCAL_OPENMINDS_DOC delete the openminds documents from dataset D = ndi.cloud.DELETE_LOCAL_OPENMINDS_DOC(D) Inputs: D - a ndi.dataset.dir object Outputs: D - a ndi.dataset.dir object after deleting the docs","title":"ndi.cloud.delete_local_openminds_doc"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/delete_local_openminds_doc.m/#ndiclouddelete_local_openminds_doc","text":"DELETE_LOCAL_OPENMINDS_DOC delete the openminds documents from dataset D = ndi.cloud.DELETE_LOCAL_OPENMINDS_DOC(D) Inputs: D - a ndi.dataset.dir object Outputs: D - a ndi.dataset.dir object after deleting the docs","title":"ndi.cloud.delete_local_openminds_doc"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/download_dataset.m/","text":"ndi.cloud.download_dataset DOWNLOAD_DATASET download the dataset from the server [B, MSG] = ndi.cloud.download_dataset(DATASET_ID, OUTPUT_PATH) Inputs: DATASET_ID - The dataset ID to download OUTPUT_PATH - The path to download the dataset to Outputs: B - did the download work? 0 for no, 1 for yes MSG - An error message if the upload failed; otherwise ''","title":"ndi.cloud.download_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/download_dataset.m/#ndiclouddownload_dataset","text":"DOWNLOAD_DATASET download the dataset from the server [B, MSG] = ndi.cloud.download_dataset(DATASET_ID, OUTPUT_PATH) Inputs: DATASET_ID - The dataset ID to download OUTPUT_PATH - The path to download the dataset to Outputs: B - did the download work? 0 for no, 1 for yes MSG - An error message if the upload failed; otherwise ''","title":"ndi.cloud.download_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/test_auth.m/","text":"ndi.cloud.test_auth ndi.cloud.test_auth is a script.","title":"ndi.cloud.test_auth"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/test_auth.m/#ndicloudtest_auth","text":"ndi.cloud.test_auth is a script.","title":"ndi.cloud.test_auth"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/test_datasets.m/","text":"ndi.cloud.test_datasets datasets prefix = [userpath filesep 'Documents' filesep 'NDI']; foldername = \"/Users/cxy/Documents/NDI/2023-03-08/\"; filename = \"/Users/cxy/Documents/NDI/2023-03-08/t*\"; % ls([foldername filesep 't*']) S = ndi.session.dir(\"2023-03-08\",[foldername]); type (fullfile(filename,'t00001','stims.tsv'))","title":"ndi.cloud.test_datasets"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/test_datasets.m/#ndicloudtest_datasets","text":"datasets prefix = [userpath filesep 'Documents' filesep 'NDI']; foldername = \"/Users/cxy/Documents/NDI/2023-03-08/\"; filename = \"/Users/cxy/Documents/NDI/2023-03-08/t*\"; % ls([foldername filesep 't*']) S = ndi.session.dir(\"2023-03-08\",[foldername]); type (fullfile(filename,'t00001','stims.tsv'))","title":"ndi.cloud.test_datasets"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/test_documents.m/","text":"ndi.cloud.test_documents ndi.cloud.test_documents is a script.","title":"ndi.cloud.test_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/test_documents.m/#ndicloudtest_documents","text":"ndi.cloud.test_documents is a script.","title":"ndi.cloud.test_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/test_files.m/","text":"ndi.cloud.test_files ndi.cloud.test_files is a script.","title":"ndi.cloud.test_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/test_files.m/#ndicloudtest_files","text":"ndi.cloud.test_files is a script.","title":"ndi.cloud.test_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/test_upload.m/","text":"ndi.cloud.test_upload TEST_UPLOAD - upload a test dataset to the cloud [B, MSG, DATASET_ID] = ndi.cloud.test_upload(S, TEST_NAME) inputs: S - ndi.session object TEST_NAME - the name of the test outputs: B - 1 if the upload was successful, 0 if not MSG - a message about the upload DATASET_ID - the dataset id of the uploaded dataset","title":"ndi.cloud.test_upload"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/test_upload.m/#ndicloudtest_upload","text":"TEST_UPLOAD - upload a test dataset to the cloud [B, MSG, DATASET_ID] = ndi.cloud.test_upload(S, TEST_NAME) inputs: S - ndi.session object TEST_NAME - the name of the test outputs: B - 1 if the upload was successful, 0 if not MSG - a message about the upload DATASET_ID - the dataset id of the uploaded dataset","title":"ndi.cloud.test_upload"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/test_upload_old.m/","text":"ndi.cloud.test_upload_old tutorial 2.1","title":"ndi.cloud.test_upload_old"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/test_upload_old.m/#ndicloudtest_upload_old","text":"tutorial 2.1","title":"ndi.cloud.test_upload_old"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/uilogin.m/","text":"ndi.cloud.uilogin uilogin - Retrieves the token from a ui dialog [TOKEN, ORGANIZATION_ID] = UILOGIN([FORCE_RELOGIN]) Note: When the token is retrieved for the first time, it is stored in an environment variable. This function will try to first retrieve the token from the environment variable, and if the variable does not exist, the ui dialog is opened for user to enter username and password. Also, if the token exists, but has expired, the dialog will open for user to re-enter username and password. If FORCE_RELOGIN is 1 or true, then the user is prompted to log in again.","title":"ndi.cloud.uilogin"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/uilogin.m/#ndiclouduilogin","text":"uilogin - Retrieves the token from a ui dialog [TOKEN, ORGANIZATION_ID] = UILOGIN([FORCE_RELOGIN]) Note: When the token is retrieved for the first time, it is stored in an environment variable. This function will try to first retrieve the token from the environment variable, and if the variable does not exist, the ui dialog is opened for user to enter username and password. Also, if the token exists, but has expired, the dialog will open for user to re-enter username and password. If FORCE_RELOGIN is 1 or true, then the user is prompted to log in again.","title":"ndi.cloud.uilogin"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/update_cloud_metadata.m/","text":"ndi.cloud.update_cloud_metadata UPDATE_CLOUD_METADATA - upload metadata to the NDI Cloud [STATUS, DATASET] = ndi.cloud.UPDATE_CLOUD_METADATA(DATASETID, AUTH_TOKEN, S) Inputs: DATASETID - the dataset ID to update AUTH_TOKEN - an upload token for NDI Cloud S - an ndi.session object with the metadata to upload Outputs: STATUS - did the upload work? 0 for no, 1 for yes DATASET - The updated dataset","title":"ndi.cloud.update_cloud_metadata"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/update_cloud_metadata.m/#ndicloudupdate_cloud_metadata","text":"UPDATE_CLOUD_METADATA - upload metadata to the NDI Cloud [STATUS, DATASET] = ndi.cloud.UPDATE_CLOUD_METADATA(DATASETID, AUTH_TOKEN, S) Inputs: DATASETID - the dataset ID to update AUTH_TOKEN - an upload token for NDI Cloud S - an ndi.session object with the metadata to upload Outputs: STATUS - did the upload work? 0 for no, 1 for yes DATASET - The updated dataset","title":"ndi.cloud.update_cloud_metadata"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/update_cloud_metadata_struct.m/","text":"ndi.cloud.update_cloud_metadata_struct UPDATE_CLOUD_METADATA - upload metadata to the NDI Cloud [STATUS, DATASET] = ndi.cloud.UPDATE_CLOUD_METADATA_STRUCT(DATASETID, AUTH_TOKEN, S, SIZE) Inputs: DATASETID - the dataset ID to update AUTH_TOKEN - an upload token for NDI Cloud S - a struct with the metadata to upload SIZE - a float representing the size of this dataset in kilobytes Outputs: STATUS - did the upload work? 0 for no, 1 for yes DATASET - The updated dataset","title":"ndi.cloud.update_cloud_metadata_struct"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/update_cloud_metadata_struct.m/#ndicloudupdate_cloud_metadata_struct","text":"UPDATE_CLOUD_METADATA - upload metadata to the NDI Cloud [STATUS, DATASET] = ndi.cloud.UPDATE_CLOUD_METADATA_STRUCT(DATASETID, AUTH_TOKEN, S, SIZE) Inputs: DATASETID - the dataset ID to update AUTH_TOKEN - an upload token for NDI Cloud S - a struct with the metadata to upload SIZE - a float representing the size of this dataset in kilobytes Outputs: STATUS - did the upload work? 0 for no, 1 for yes DATASET - The updated dataset","title":"ndi.cloud.update_cloud_metadata_struct"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/upload_dataset_database.m/","text":"ndi.cloud.upload_dataset_database UPLOAD_DATASET_DATABASE - Upload the complete database of a dataset Syntax: ndi.cloud.upload_dataset_database(NDI_DATASET, CLOUD_DATASET_ID) uploads all the documents and associated binary files for a dataset to an NDI Cloud Dataset. Input arguments: NDI_DATASET : string an ndi.dataset object CLOUD_DATASET_ID : string an id for a dataset on NDI cloud to upload documents and files to Options (Name - Value pairs) verbose : logical Whether to display status updates. Default is true show_ui : logical Whether to display progress in a gui. Default is true","title":"ndi.cloud.upload_dataset_database"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/upload_dataset_database.m/#ndicloudupload_dataset_database","text":"UPLOAD_DATASET_DATABASE - Upload the complete database of a dataset Syntax: ndi.cloud.upload_dataset_database(NDI_DATASET, CLOUD_DATASET_ID) uploads all the documents and associated binary files for a dataset to an NDI Cloud Dataset. Input arguments: NDI_DATASET : string an ndi.dataset object CLOUD_DATASET_ID : string an id for a dataset on NDI cloud to upload documents and files to Options (Name - Value pairs) verbose : logical Whether to display status updates. Default is true show_ui : logical Whether to display progress in a gui. Default is true","title":"ndi.cloud.upload_dataset_database"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/test_auth.m/","text":"ndi.cloud.api.test_auth ndi.cloud.api.test_auth is a script.","title":"ndi.cloud.api.test_auth"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/test_auth.m/#ndicloudapitest_auth","text":"ndi.cloud.api.test_auth is a script.","title":"ndi.cloud.api.test_auth"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/test_datasets.m/","text":"ndi.cloud.api.test_datasets datasets prefix = [userpath filesep 'Documents' filesep 'NDI']; foldername = \"/Users/cxy/Documents/NDI/2023-03-08/\"; filename = \"/Users/cxy/Documents/NDI/2023-03-08/t*\"; % ls([foldername filesep 't*']) S = ndi.session.dir(\"2023-03-08\",[foldername]); type (fullfile(filename,'t00001','stims.tsv'))","title":"ndi.cloud.api.test_datasets"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/test_datasets.m/#ndicloudapitest_datasets","text":"datasets prefix = [userpath filesep 'Documents' filesep 'NDI']; foldername = \"/Users/cxy/Documents/NDI/2023-03-08/\"; filename = \"/Users/cxy/Documents/NDI/2023-03-08/t*\"; % ls([foldername filesep 't*']) S = ndi.session.dir(\"2023-03-08\",[foldername]); type (fullfile(filename,'t00001','stims.tsv'))","title":"ndi.cloud.api.test_datasets"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/test_documents.m/","text":"ndi.cloud.api.test_documents ndi.cloud.api.test_documents is a script.","title":"ndi.cloud.api.test_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/test_documents.m/#ndicloudapitest_documents","text":"ndi.cloud.api.test_documents is a script.","title":"ndi.cloud.api.test_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/test_files.m/","text":"ndi.cloud.api.test_files ndi.cloud.api.test_files is a script.","title":"ndi.cloud.api.test_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/test_files.m/#ndicloudapitest_files","text":"ndi.cloud.api.test_files is a script.","title":"ndi.cloud.api.test_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/url.m/","text":"ndi.cloud.api.url URL - a function that returns the URL for a named api endpoint URL = ndi.cloud.api.URL(TYPE) returns the URL for the api","title":"ndi.cloud.api.url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/url.m/#ndicloudapiurl","text":"URL - a function that returns the URL for a named api endpoint URL = ndi.cloud.api.URL(TYPE) returns the URL for the api","title":"ndi.cloud.api.url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/change_password.m/","text":"ndi.cloud.api.auth.change_password CHANGE_PASSWORD - Change a user's password RESPONSE = ndi.cloud.api.auth.CHANGE_PASSWORD(OLDPASSWORD, NEWPASSWORD) Inputs: OLDPASSWORD - a string representing the old password NEWPASSWORD - a string representing the new password Outputs: RESPONSE - the response summary","title":"ndi.cloud.api.auth.change_password"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/change_password.m/#ndicloudapiauthchange_password","text":"CHANGE_PASSWORD - Change a user's password RESPONSE = ndi.cloud.api.auth.CHANGE_PASSWORD(OLDPASSWORD, NEWPASSWORD) Inputs: OLDPASSWORD - a string representing the old password NEWPASSWORD - a string representing the new password Outputs: RESPONSE - the response summary","title":"ndi.cloud.api.auth.change_password"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/confirmation_resend.m/","text":"ndi.cloud.api.auth.confirmation_resend CONFIRMATION_RESEND - Resends the verification code via email [STATUS,RESPONSE] = ndi.cloud.api.auth.confirmation_resend(EMAIL) Inputs: EMAIL - a string representing the email address used to send the verification Outputs: STATUS - did the confirmation sent? 1 for no, 0 for yes RESPONSE - the response summary","title":"ndi.cloud.api.auth.confirmation_resend"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/confirmation_resend.m/#ndicloudapiauthconfirmation_resend","text":"CONFIRMATION_RESEND - Resends the verification code via email [STATUS,RESPONSE] = ndi.cloud.api.auth.confirmation_resend(EMAIL) Inputs: EMAIL - a string representing the email address used to send the verification Outputs: STATUS - did the confirmation sent? 1 for no, 0 for yes RESPONSE - the response summary","title":"ndi.cloud.api.auth.confirmation_resend"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/login.m/","text":"ndi.cloud.api.auth.login LOGIN - logs in a user [AUTH_TOKEN,ORGANIZATION_ID] = ndi.cloud.api.auth.LOGIN(EMAIL, PASSWORD) Inputs: EMAIL - a string representing the user's e-mail PASSWORD - a string representing the user's password Outputs: AUTH_TOKEN - bearer token ORGANIZATION_ID - the organization id that the user belongs to","title":"ndi.cloud.api.auth.login"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/login.m/#ndicloudapiauthlogin","text":"LOGIN - logs in a user [AUTH_TOKEN,ORGANIZATION_ID] = ndi.cloud.api.auth.LOGIN(EMAIL, PASSWORD) Inputs: EMAIL - a string representing the user's e-mail PASSWORD - a string representing the user's password Outputs: AUTH_TOKEN - bearer token ORGANIZATION_ID - the organization id that the user belongs to","title":"ndi.cloud.api.auth.login"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/logout.m/","text":"ndi.cloud.api.auth.logout LOGOUT - logs a user out and invalidates their token RESPONSE = ndi.cloud.api.auth.LOGOUT() Inputs: Outputs: RESPONSE - the response summary","title":"ndi.cloud.api.auth.logout"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/logout.m/#ndicloudapiauthlogout","text":"LOGOUT - logs a user out and invalidates their token RESPONSE = ndi.cloud.api.auth.LOGOUT() Inputs: Outputs: RESPONSE - the response summary","title":"ndi.cloud.api.auth.logout"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/password.m/","text":"ndi.cloud.api.auth.password PASSWORD - update a users password [STATUS,RESPONSE] = ndi.cloud.api.auth.PASSWORD(OLDPASSWORD, NEWPASSWORD) Inputs: OLDPASSWORD - a string representing the old password NEWPASSWORD - a string representing the new password Outputs: STATUS - did the new password correctly set? 1 for no, 0 for yes RESPONSE - the response summary","title":"ndi.cloud.api.auth.password"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/password.m/#ndicloudapiauthpassword","text":"PASSWORD - update a users password [STATUS,RESPONSE] = ndi.cloud.api.auth.PASSWORD(OLDPASSWORD, NEWPASSWORD) Inputs: OLDPASSWORD - a string representing the old password NEWPASSWORD - a string representing the new password Outputs: STATUS - did the new password correctly set? 1 for no, 0 for yes RESPONSE - the response summary","title":"ndi.cloud.api.auth.password"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/password_forgot.m/","text":"ndi.cloud.api.auth.password_forgot PASSWORD_FORGOT - sends a password reset e-mail [STATUS,RESPONSE] = ndi.cloud.api.auth.password_forgot(EMAIL) Inputs: EMAIL - a string representing the email address used to send the e-mail Outputs: STATUS - did the e-mail sent? 1 for no, 0 for yes RESPONSE - the response summary","title":"ndi.cloud.api.auth.password_forgot"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/password_forgot.m/#ndicloudapiauthpassword_forgot","text":"PASSWORD_FORGOT - sends a password reset e-mail [STATUS,RESPONSE] = ndi.cloud.api.auth.password_forgot(EMAIL) Inputs: EMAIL - a string representing the email address used to send the e-mail Outputs: STATUS - did the e-mail sent? 1 for no, 0 for yes RESPONSE - the response summary","title":"ndi.cloud.api.auth.password_forgot"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/resend_confirmation.m/","text":"ndi.cloud.api.auth.resend_confirmation RESEND_CONFIRMATION - Resends the verification code via email RESPONSE = ndi.cloud.api.auth.resend_confirmation(EMAIL) Inputs: EMAIL - a string representing the email address used to send the verification Outputs: RESPONSE - the response summary","title":"ndi.cloud.api.auth.resend_confirmation"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/resend_confirmation.m/#ndicloudapiauthresend_confirmation","text":"RESEND_CONFIRMATION - Resends the verification code via email RESPONSE = ndi.cloud.api.auth.resend_confirmation(EMAIL) Inputs: EMAIL - a string representing the email address used to send the verification Outputs: RESPONSE - the response summary","title":"ndi.cloud.api.auth.resend_confirmation"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/reset_password.m/","text":"ndi.cloud.api.auth.reset_password RESET_PASSWORD - sends a password reset e-mail RESPONSE = ndi.cloud.api.auth.reset_password(EMAIL) Inputs: EMAIL - a string representing the email address used to send the e-mail Outputs: RESPONSE - the response summary","title":"ndi.cloud.api.auth.reset_password"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/reset_password.m/#ndicloudapiauthreset_password","text":"RESET_PASSWORD - sends a password reset e-mail RESPONSE = ndi.cloud.api.auth.reset_password(EMAIL) Inputs: EMAIL - a string representing the email address used to send the e-mail Outputs: RESPONSE - the response summary","title":"ndi.cloud.api.auth.reset_password"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/verify.m/","text":"ndi.cloud.api.auth.verify VERIFY - verifies a user via the confirmation code sent in e-mail [STATUS,RESPONSE] = ndi.cloud.api.auth.verify(EMAIL, CONFIRMATION_CODE) Inputs: EMAIL - a string representing the email address used to verify CONFIRMATION_CODE - the code send to the email Outputs: STATUS - is the confirmation code correct? 1 for no, 0 for yes RESPONSE - the response summary","title":"ndi.cloud.api.auth.verify"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/verify.m/#ndicloudapiauthverify","text":"VERIFY - verifies a user via the confirmation code sent in e-mail [STATUS,RESPONSE] = ndi.cloud.api.auth.verify(EMAIL, CONFIRMATION_CODE) Inputs: EMAIL - a string representing the email address used to verify CONFIRMATION_CODE - the code send to the email Outputs: STATUS - is the confirmation code correct? 1 for no, 0 for yes RESPONSE - the response summary","title":"ndi.cloud.api.auth.verify"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/verify_user.m/","text":"ndi.cloud.api.auth.verify_user VERIFY_USER - verifies a user via the confirmation code sent in e-mail RESPONSE = ndi.cloud.api.auth.verify_user(EMAIL, CONFIRMATION_CODE) Inputs: EMAIL - a string representing the email address used to verify CONFIRMATION_CODE - the code send to the email Outputs: RESPONSE - the response summary","title":"ndi.cloud.api.auth.verify_user"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/verify_user.m/#ndicloudapiauthverify_user","text":"VERIFY_USER - verifies a user via the confirmation code sent in e-mail RESPONSE = ndi.cloud.api.auth.verify_user(EMAIL, CONFIRMATION_CODE) Inputs: EMAIL - a string representing the email address used to verify CONFIRMATION_CODE - the code send to the email Outputs: RESPONSE - the response summary","title":"ndi.cloud.api.auth.verify_user"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/bulk_delete_documents.m/","text":"ndi.cloud.api.datasets.bulk_delete_documents BULK_DELETE_DOCUMENTS - Delete a set of documents from the dataset RESPONSE = ndi.cloud.api.datasets.BULK_DELETE_DOCUMENTS(DATASET_ID, DOCUMENT_IDS) Inputs: DATASET_ID - an id of the dataset DOCUMENT_IDS - a cell array of document ids to delete Outputs: response - the post request response","title":"ndi.cloud.api.datasets.bulk_delete_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/bulk_delete_documents.m/#ndicloudapidatasetsbulk_delete_documents","text":"BULK_DELETE_DOCUMENTS - Delete a set of documents from the dataset RESPONSE = ndi.cloud.api.datasets.BULK_DELETE_DOCUMENTS(DATASET_ID, DOCUMENT_IDS) Inputs: DATASET_ID - an id of the dataset DOCUMENT_IDS - a cell array of document ids to delete Outputs: response - the post request response","title":"ndi.cloud.api.datasets.bulk_delete_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/create_dataset.m/","text":"ndi.cloud.api.datasets.create_dataset CREATE_DATASET - Create a new dataset RESPONSE = ndi.cloud.api.datasets.CREATE_DATASET(DATASET) Inputs: DATASET - a JSON object representing the dataset Outputs: RESPONSE - the new dataset summary DATASET_ID - the id of the newly created dataset","title":"ndi.cloud.api.datasets.create_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/create_dataset.m/#ndicloudapidatasetscreate_dataset","text":"CREATE_DATASET - Create a new dataset RESPONSE = ndi.cloud.api.datasets.CREATE_DATASET(DATASET) Inputs: DATASET - a JSON object representing the dataset Outputs: RESPONSE - the new dataset summary DATASET_ID - the id of the newly created dataset","title":"ndi.cloud.api.datasets.create_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/create_dataset_branch.m/","text":"ndi.cloud.api.datasets.create_dataset_branch CREATE_DATASET_BRANCH - branch a given dataset RESPONSE = ndi.cloud.api.datasets.CREATE_DATASET_BRANCH(DATASET_ID, BRANCH_NAME) Inputs: DATASET_ID - a string representing the id of the dataset BRANCH_NAME - a string representing the branch name Outputs: RESPONSE - the updated dataset summary","title":"ndi.cloud.api.datasets.create_dataset_branch"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/create_dataset_branch.m/#ndicloudapidatasetscreate_dataset_branch","text":"CREATE_DATASET_BRANCH - branch a given dataset RESPONSE = ndi.cloud.api.datasets.CREATE_DATASET_BRANCH(DATASET_ID, BRANCH_NAME) Inputs: DATASET_ID - a string representing the id of the dataset BRANCH_NAME - a string representing the branch name Outputs: RESPONSE - the updated dataset summary","title":"ndi.cloud.api.datasets.create_dataset_branch"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/delete_dataset.m/","text":"ndi.cloud.api.datasets.delete_dataset DELETE_DATASET - Delete a dataset. Datasets cannot be deleted if they have been branched off of RESPONSE = ndi.cloud.api.datasets.DELETE_DATASET(DATASET_ID) Inputs: DATASET_ID - a string representing the dataset id Outputs: RESPONSE - the delete confirmation","title":"ndi.cloud.api.datasets.delete_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/delete_dataset.m/#ndicloudapidatasetsdelete_dataset","text":"DELETE_DATASET - Delete a dataset. Datasets cannot be deleted if they have been branched off of RESPONSE = ndi.cloud.api.datasets.DELETE_DATASET(DATASET_ID) Inputs: DATASET_ID - a string representing the dataset id Outputs: RESPONSE - the delete confirmation","title":"ndi.cloud.api.datasets.delete_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/delete_datasetId.m/","text":"ndi.cloud.api.datasets.delete_datasetId DELETE_DATASETID - Delete a dataset. Datasets cannot be deleted if they have been branched off of [STATUS,RESPONSE] = ndi.cloud.api.datasets.DELETE_DATASETID(DATASET_ID) Inputs: DATASET_ID - a string representing the dataset id Outputs: STATUS - did delete request work? 1 for no, 0 for yes RESPONSE - the delete confirmation","title":"ndi.cloud.api.datasets.delete_datasetId"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/delete_datasetId.m/#ndicloudapidatasetsdelete_datasetid","text":"DELETE_DATASETID - Delete a dataset. Datasets cannot be deleted if they have been branched off of [STATUS,RESPONSE] = ndi.cloud.api.datasets.DELETE_DATASETID(DATASET_ID) Inputs: DATASET_ID - a string representing the dataset id Outputs: STATUS - did delete request work? 1 for no, 0 for yes RESPONSE - the delete confirmation","title":"ndi.cloud.api.datasets.delete_datasetId"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_branches.m/","text":"ndi.cloud.api.datasets.get_branches GET_BRANCHES - get the branches of a dataset [RESPONSE,BRANCHES] = ndi.cloud.api.datasets.GET_BRANCHES(DATASET_ID) Inputs: DATASET_ID - a string representing the dataset id Outputs: RESPONSE - the get request summary BRANCHES - the branches required by the user","title":"ndi.cloud.api.datasets.get_branches"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_branches.m/#ndicloudapidatasetsget_branches","text":"GET_BRANCHES - get the branches of a dataset [RESPONSE,BRANCHES] = ndi.cloud.api.datasets.GET_BRANCHES(DATASET_ID) Inputs: DATASET_ID - a string representing the dataset id Outputs: RESPONSE - the get request summary BRANCHES - the branches required by the user","title":"ndi.cloud.api.datasets.get_branches"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_dataset.m/","text":"ndi.cloud.api.datasets.get_dataset GET_DATASET - Get a dataset given it's dataset id [DATASET, RESPONSE] = ndi.cloud.api.datasets.GET_DATASET(DATASET_ID) Inputs: DATASET_ID - a string representing the dataset id Outputs: DATASET - the dataset required by the user RESPONSE - the response from the server","title":"ndi.cloud.api.datasets.get_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_dataset.m/#ndicloudapidatasetsget_dataset","text":"GET_DATASET - Get a dataset given it's dataset id [DATASET, RESPONSE] = ndi.cloud.api.datasets.GET_DATASET(DATASET_ID) Inputs: DATASET_ID - a string representing the dataset id Outputs: DATASET - the dataset required by the user RESPONSE - the response from the server","title":"ndi.cloud.api.datasets.get_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_datasetId.m/","text":"ndi.cloud.api.datasets.get_datasetId GET_DATASETID - get a dataset [STATUS,DATASET, RESPONSE] = ndi.cloud.api.datasets.GET_DATASETID(DATASET_ID) Inputs: DATASET_ID - a string representing the dataset id Outputs: STATUS - did get request work? 1 for no, 0 for yes DATASET - the dataset required by the user RESPONSE - the response from the server","title":"ndi.cloud.api.datasets.get_datasetId"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_datasetId.m/#ndicloudapidatasetsget_datasetid","text":"GET_DATASETID - get a dataset [STATUS,DATASET, RESPONSE] = ndi.cloud.api.datasets.GET_DATASETID(DATASET_ID) Inputs: DATASET_ID - a string representing the dataset id Outputs: STATUS - did get request work? 1 for no, 0 for yes DATASET - the dataset required by the user RESPONSE - the response from the server","title":"ndi.cloud.api.datasets.get_datasetId"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_file_collection_upload_url.m/","text":"ndi.cloud.api.datasets.get_file_collection_upload_url GET_FILE_COLLECTION_UPLOAD_URL - get an upload URL for all file that will be published to the NDI Cloud [RESPONSE,URL] = ndi.cloud.api.datasets.GET_FILE_COLLECTION_UPLOAD_URL(DATASET_ID) Inputs: DATASET_ID - a string representing the id of the dataset Outputs: RESPONSE - the get request summary URL - the upload URL to PUT the file to","title":"ndi.cloud.api.datasets.get_file_collection_upload_url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_file_collection_upload_url.m/#ndicloudapidatasetsget_file_collection_upload_url","text":"GET_FILE_COLLECTION_UPLOAD_URL - get an upload URL for all file that will be published to the NDI Cloud [RESPONSE,URL] = ndi.cloud.api.datasets.GET_FILE_COLLECTION_UPLOAD_URL(DATASET_ID) Inputs: DATASET_ID - a string representing the id of the dataset Outputs: RESPONSE - the get request summary URL - the upload URL to PUT the file to","title":"ndi.cloud.api.datasets.get_file_collection_upload_url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_file_details.m/","text":"ndi.cloud.api.datasets.get_file_details GET_FILE_DETAILS - Get the details, including the download url, for a individual file [FILE_DETAIL, DOWNLOADURL, RESPONSE] = ndi.cloud.api.datasets.GET_FILE_DETAILS(DATASET_ID,UID) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the file uid Outputs: FILE_DETAIL - the details of the file DOWNLOADURL - the download url for the file RESPONSE - the response from the server","title":"ndi.cloud.api.datasets.get_file_details"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_file_details.m/#ndicloudapidatasetsget_file_details","text":"GET_FILE_DETAILS - Get the details, including the download url, for a individual file [FILE_DETAIL, DOWNLOADURL, RESPONSE] = ndi.cloud.api.datasets.GET_FILE_DETAILS(DATASET_ID,UID) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the file uid Outputs: FILE_DETAIL - the details of the file DOWNLOADURL - the download url for the file RESPONSE - the response from the server","title":"ndi.cloud.api.datasets.get_file_details"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_file_upload_url.m/","text":"ndi.cloud.api.datasets.get_file_upload_url GET_FILE_UPLOAD_URL - get an upload URL for an artifact file that will be published to the NDI Cloud Same functionality as ndi.cloud.api.files.GET_FILE_UPLOAD_URL [RESPONSE,URL] = ndi.cloud.api.datasets.GET_FILE_UPLOAD_URL(DATASET_ID, UID) Inputs: DATASET_ID - a string representing the id of the dataset UID - a string representing a unique identifier that can be used to reference the file in documents Outputs: RESPONSE - the get request summary URL - the upload URL to PUT the file to","title":"ndi.cloud.api.datasets.get_file_upload_url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_file_upload_url.m/#ndicloudapidatasetsget_file_upload_url","text":"GET_FILE_UPLOAD_URL - get an upload URL for an artifact file that will be published to the NDI Cloud Same functionality as ndi.cloud.api.files.GET_FILE_UPLOAD_URL [RESPONSE,URL] = ndi.cloud.api.datasets.GET_FILE_UPLOAD_URL(DATASET_ID, UID) Inputs: DATASET_ID - a string representing the id of the dataset UID - a string representing a unique identifier that can be used to reference the file in documents Outputs: RESPONSE - the get request summary URL - the upload URL to PUT the file to","title":"ndi.cloud.api.datasets.get_file_upload_url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_files.m/","text":"ndi.cloud.api.datasets.get_files GET_FILES - get an upload URL for an artifact file that will be published to the NDI Cloud Same functionality as ndi.cloud.api.files.GET_FILES [STATUS,RESPONSE,URL] = ndi.cloud.api.datasets.GET_FILES(DATASET_ID, UID) Inputs: DATASET_ID - a string representing the id of the dataset UID - a string representing a unique identifier that can be used to reference the file in documents Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get request summary URL - the upload URL to PUT the file to","title":"ndi.cloud.api.datasets.get_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_files.m/#ndicloudapidatasetsget_files","text":"GET_FILES - get an upload URL for an artifact file that will be published to the NDI Cloud Same functionality as ndi.cloud.api.files.GET_FILES [STATUS,RESPONSE,URL] = ndi.cloud.api.datasets.GET_FILES(DATASET_ID, UID) Inputs: DATASET_ID - a string representing the id of the dataset UID - a string representing a unique identifier that can be used to reference the file in documents Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get request summary URL - the upload URL to PUT the file to","title":"ndi.cloud.api.datasets.get_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_files_bulk.m/","text":"ndi.cloud.api.datasets.get_files_bulk GET_FILES_BULK - get an upload URL for all file that will be published to the NDI Cloud [STATUS,RESPONSE,URL] = ndi.cloud.api.datasets.GET_FILES_BULK(DATASET_ID) Inputs: DATASET_ID - a string representing the id of the dataset Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get request summary URL - the upload URL to PUT the file to","title":"ndi.cloud.api.datasets.get_files_bulk"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_files_bulk.m/#ndicloudapidatasetsget_files_bulk","text":"GET_FILES_BULK - get an upload URL for all file that will be published to the NDI Cloud [STATUS,RESPONSE,URL] = ndi.cloud.api.datasets.GET_FILES_BULK(DATASET_ID) Inputs: DATASET_ID - a string representing the id of the dataset Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get request summary URL - the upload URL to PUT the file to","title":"ndi.cloud.api.datasets.get_files_bulk"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_files_detail.m/","text":"ndi.cloud.api.datasets.get_files_detail GET_FILES_DETAIL - Get the details, including the download url, for a individual file [STATUS,FILE_DETAIL, DOWNLOADURL, RESPONSE] = ndi.cloud.api.datasets.GET_FILES_DETAIL(DATASET_ID,UID) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the file uid Outputs: STATUS - did get request work? 1 for no, 0 for yes FILE_DETAIL - the details of the file DOWNLOADURL - the download url for the file RESPONSE - the response from the server","title":"ndi.cloud.api.datasets.get_files_detail"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_files_detail.m/#ndicloudapidatasetsget_files_detail","text":"GET_FILES_DETAIL - Get the details, including the download url, for a individual file [STATUS,FILE_DETAIL, DOWNLOADURL, RESPONSE] = ndi.cloud.api.datasets.GET_FILES_DETAIL(DATASET_ID,UID) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the file uid Outputs: STATUS - did get request work? 1 for no, 0 for yes FILE_DETAIL - the details of the file DOWNLOADURL - the download url for the file RESPONSE - the response from the server","title":"ndi.cloud.api.datasets.get_files_detail"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_files_raw.m/","text":"ndi.cloud.api.datasets.get_files_raw GET_FILES_RAW - get an upload URL for a raw data file that will be published to AWS Open Data after review Same functionality as ndi.cloud.api.files.GET_FILES_RAW [STATUS,RESPONSE,URL] = ndi.cloud.api.datasets.GET_FILES_RAW(DATASET_ID, UID) Inputs: DATASET_ID - a string representing the id of the dataset UID - a string representing a unique identifier that can be used to reference the file in documents Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get request summary URL - the upload URL to PUT the file to","title":"ndi.cloud.api.datasets.get_files_raw"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_files_raw.m/#ndicloudapidatasetsget_files_raw","text":"GET_FILES_RAW - get an upload URL for a raw data file that will be published to AWS Open Data after review Same functionality as ndi.cloud.api.files.GET_FILES_RAW [STATUS,RESPONSE,URL] = ndi.cloud.api.datasets.GET_FILES_RAW(DATASET_ID, UID) Inputs: DATASET_ID - a string representing the id of the dataset UID - a string representing a unique identifier that can be used to reference the file in documents Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get request summary URL - the upload URL to PUT the file to","title":"ndi.cloud.api.datasets.get_files_raw"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_organizations.m/","text":"ndi.cloud.api.datasets.get_organizations GET_ORGANIZATIONS - get a high level summary of all datasets in the organization [STATUS,RESPONSE, DATASETS] = ndi.cloud.api.datasets.GET_ORGANIZATIONS() Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get request summary DATASETS - A high level summary of all datasets in the organization","title":"ndi.cloud.api.datasets.get_organizations"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_organizations.m/#ndicloudapidatasetsget_organizations","text":"GET_ORGANIZATIONS - get a high level summary of all datasets in the organization [STATUS,RESPONSE, DATASETS] = ndi.cloud.api.datasets.GET_ORGANIZATIONS() Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get request summary DATASETS - A high level summary of all datasets in the organization","title":"ndi.cloud.api.datasets.get_organizations"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_published.m/","text":"ndi.cloud.api.datasets.get_published GET_PUBLISHED - get all published datasets [RESPONSE,DATASETS] = ndi.cloud.api.datasets.GET_PUBLISHED(PAGE, PAGE_SIZE) Inputs: PAGE - an integer representing the page of result to get DATASET - an integer representing the number of results per page Outputs: RESPONSE - the get request summary DATASETS - a high level summary of all published datasets","title":"ndi.cloud.api.datasets.get_published"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_published.m/#ndicloudapidatasetsget_published","text":"GET_PUBLISHED - get all published datasets [RESPONSE,DATASETS] = ndi.cloud.api.datasets.GET_PUBLISHED(PAGE, PAGE_SIZE) Inputs: PAGE - an integer representing the page of result to get DATASET - an integer representing the number of results per page Outputs: RESPONSE - the get request summary DATASETS - a high level summary of all published datasets","title":"ndi.cloud.api.datasets.get_published"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_raw_file_upload_url.m/","text":"ndi.cloud.api.datasets.get_raw_file_upload_url GET_RAW_FILE_UPLOAD_URL - Get an upload URL for a raw data file that will be published to AWS Open Data after review Same functionality as ndi.cloud.api.files.GET_RAW_FILE_UPLOAD_URL [RESPONSE,URL] = ndi.cloud.api.datasets.GET_RAW_FILE_UPLOAD_URL(DATASET_ID, UID) Inputs: DATASET_ID - a string representing the id of the dataset UID - a string representing a unique identifier that can be used to reference the file in documents Outputs: RESPONSE - the get request summary URL - the upload URL to PUT the file to","title":"ndi.cloud.api.datasets.get_raw_file_upload_url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_raw_file_upload_url.m/#ndicloudapidatasetsget_raw_file_upload_url","text":"GET_RAW_FILE_UPLOAD_URL - Get an upload URL for a raw data file that will be published to AWS Open Data after review Same functionality as ndi.cloud.api.files.GET_RAW_FILE_UPLOAD_URL [RESPONSE,URL] = ndi.cloud.api.datasets.GET_RAW_FILE_UPLOAD_URL(DATASET_ID, UID) Inputs: DATASET_ID - a string representing the id of the dataset UID - a string representing a unique identifier that can be used to reference the file in documents Outputs: RESPONSE - the get request summary URL - the upload URL to PUT the file to","title":"ndi.cloud.api.datasets.get_raw_file_upload_url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_unpublished.m/","text":"ndi.cloud.api.datasets.get_unpublished GET_UNPUBLISHED - get all submitted but unpublished datasets RESPONSE = ndi.cloud.api.datasets.GET_UNPUBLISHED(PAGE, PAGE_SIZE) Inputs: PAGE - an integer representing the page of result to get DATASET - an integer representing the number of results per page Outputs: RESPONSE - the updated dataset summary DATASETS - a high level summary of all unpublished datasets","title":"ndi.cloud.api.datasets.get_unpublished"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_unpublished.m/#ndicloudapidatasetsget_unpublished","text":"GET_UNPUBLISHED - get all submitted but unpublished datasets RESPONSE = ndi.cloud.api.datasets.GET_UNPUBLISHED(PAGE, PAGE_SIZE) Inputs: PAGE - an integer representing the page of result to get DATASET - an integer representing the number of results per page Outputs: RESPONSE - the updated dataset summary DATASETS - a high level summary of all unpublished datasets","title":"ndi.cloud.api.datasets.get_unpublished"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/list_datasets.m/","text":"ndi.cloud.api.datasets.list_datasets LIST_DATASETS - Get a list of all datasets in an organization [RESPONSE, DATASETS] = ndi.cloud.api.datasets.LIST_DATASETS() Outputs: RESPONSE - the get request summary DATASETS - A high level summary of all datasets in the organization","title":"ndi.cloud.api.datasets.list_datasets"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/list_datasets.m/#ndicloudapidatasetslist_datasets","text":"LIST_DATASETS - Get a list of all datasets in an organization [RESPONSE, DATASETS] = ndi.cloud.api.datasets.LIST_DATASETS() Outputs: RESPONSE - the get request summary DATASETS - A high level summary of all datasets in the organization","title":"ndi.cloud.api.datasets.list_datasets"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/post_branch.m/","text":"ndi.cloud.api.datasets.post_branch POST_BRANCH - branch a given dataset [STATUS,RESPONSE] = ndi.cloud.api.datasets.POST_BRANCH(DATASET_ID, BRANCH_NAME) Inputs: DATASET_ID - a string representing the id of the dataset BRANCH_NAME - a string representing the branch name Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the updated dataset summary","title":"ndi.cloud.api.datasets.post_branch"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/post_branch.m/#ndicloudapidatasetspost_branch","text":"POST_BRANCH - branch a given dataset [STATUS,RESPONSE] = ndi.cloud.api.datasets.POST_BRANCH(DATASET_ID, BRANCH_NAME) Inputs: DATASET_ID - a string representing the id of the dataset BRANCH_NAME - a string representing the branch name Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the updated dataset summary","title":"ndi.cloud.api.datasets.post_branch"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/post_bulk_delete.m/","text":"ndi.cloud.api.datasets.post_bulk_delete POST_BULK_DELETE - Delete a set of documents from the dataset [STATUS, RESPONSE] = ndi.cloud.api.datasets.POST_BULK_DELETE(DATASET_ID, DOCUMENT_IDS) Inputs: DATASET_ID - an id of the dataset DOCUMENT_IDS - a cell array of document ids to delete Outputs: STATUS - did the post request work? 1 for no, 0 for yes response - the post request response","title":"ndi.cloud.api.datasets.post_bulk_delete"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/post_bulk_delete.m/#ndicloudapidatasetspost_bulk_delete","text":"POST_BULK_DELETE - Delete a set of documents from the dataset [STATUS, RESPONSE] = ndi.cloud.api.datasets.POST_BULK_DELETE(DATASET_ID, DOCUMENT_IDS) Inputs: DATASET_ID - an id of the dataset DOCUMENT_IDS - a cell array of document ids to delete Outputs: STATUS - did the post request work? 1 for no, 0 for yes response - the post request response","title":"ndi.cloud.api.datasets.post_bulk_delete"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/post_datasetId.m/","text":"ndi.cloud.api.datasets.post_datasetId POST_DATASETID - update a dataset to NDI Cloud [STATUS,RESPONSE] = ndi.cloud.api.datasets.POST_DATASETID(DATASET_ID, DATASET) Inputs: DATASET_ID - an id of the dataset DATASET - the updated version of the dataset in JSON-formatted text Outputs: STATUS - did the post request work? 1 for no, 0 for yes RESPONSE - the updated dataset summary","title":"ndi.cloud.api.datasets.post_datasetId"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/post_datasetId.m/#ndicloudapidatasetspost_datasetid","text":"POST_DATASETID - update a dataset to NDI Cloud [STATUS,RESPONSE] = ndi.cloud.api.datasets.POST_DATASETID(DATASET_ID, DATASET) Inputs: DATASET_ID - an id of the dataset DATASET - the updated version of the dataset in JSON-formatted text Outputs: STATUS - did the post request work? 1 for no, 0 for yes RESPONSE - the updated dataset summary","title":"ndi.cloud.api.datasets.post_datasetId"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/post_organization.m/","text":"ndi.cloud.api.datasets.post_organization POST_ORGANIZATION - Create a new dataset [STATUS,RESPONSE] = ndi.cloud.api.datasets.POST_ORGANIZATION(DATASET) Inputs: DATASET - a JSON object representing the dataset Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - the new dataset summary DATASET_ID - the id of the newly created dataset","title":"ndi.cloud.api.datasets.post_organization"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/post_organization.m/#ndicloudapidatasetspost_organization","text":"POST_ORGANIZATION - Create a new dataset [STATUS,RESPONSE] = ndi.cloud.api.datasets.POST_ORGANIZATION(DATASET) Inputs: DATASET - a JSON object representing the dataset Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - the new dataset summary DATASET_ID - the id of the newly created dataset","title":"ndi.cloud.api.datasets.post_organization"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/post_publish.m/","text":"ndi.cloud.api.datasets.post_publish POST_PUBLISH - publish a dataset [STATUS,RESPONSE] = ndi.cloud.api.datasets.POST_PUBLISH(DATASET_ID) Inputs: DATASET_ID - an id of the dataset Outputs: STATUS - did the post request work? 1 for no, 0 for yes RESPONSE - the dataset was published","title":"ndi.cloud.api.datasets.post_publish"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/post_publish.m/#ndicloudapidatasetspost_publish","text":"POST_PUBLISH - publish a dataset [STATUS,RESPONSE] = ndi.cloud.api.datasets.POST_PUBLISH(DATASET_ID) Inputs: DATASET_ID - an id of the dataset Outputs: STATUS - did the post request work? 1 for no, 0 for yes RESPONSE - the dataset was published","title":"ndi.cloud.api.datasets.post_publish"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/post_submit.m/","text":"ndi.cloud.api.datasets.post_submit POST_SUBMIT - submit a dataset for review [STATUS,RESPONSE] = ndi.cloud.api.datasets.POST_SUBMIT(DATASET_ID) Inputs: DATASET_ID - an id of the dataset Outputs: STATUS - did the post request work? 1 for no, 0 for yes RESPONSE - the dataset was submitted","title":"ndi.cloud.api.datasets.post_submit"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/post_submit.m/#ndicloudapidatasetspost_submit","text":"POST_SUBMIT - submit a dataset for review [STATUS,RESPONSE] = ndi.cloud.api.datasets.POST_SUBMIT(DATASET_ID) Inputs: DATASET_ID - an id of the dataset Outputs: STATUS - did the post request work? 1 for no, 0 for yes RESPONSE - the dataset was submitted","title":"ndi.cloud.api.datasets.post_submit"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/post_unpublish.m/","text":"ndi.cloud.api.datasets.post_unpublish POST_UNPUBLISH - unpublish a dataset [STATUS,RESPONSE] = ndi.cloud.api.datasets.POST_UNPUBLISH(DATASET_ID) Inputs: DATASET_ID - an id of the dataset Outputs: STATUS - did the post request work? 1 for no, 0 for yes RESPONSE - the dataset was unpublished","title":"ndi.cloud.api.datasets.post_unpublish"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/post_unpublish.m/#ndicloudapidatasetspost_unpublish","text":"POST_UNPUBLISH - unpublish a dataset [STATUS,RESPONSE] = ndi.cloud.api.datasets.POST_UNPUBLISH(DATASET_ID) Inputs: DATASET_ID - an id of the dataset Outputs: STATUS - did the post request work? 1 for no, 0 for yes RESPONSE - the dataset was unpublished","title":"ndi.cloud.api.datasets.post_unpublish"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/publish_dataset.m/","text":"ndi.cloud.api.datasets.publish_dataset PUBLISH_DATASET - publish a dataset RESPONSE = ndi.cloud.api.datasets.PUBLISH_DATASET(DATASET_ID) Inputs: DATASET_ID - an id of the dataset Outputs: RESPONSE - the dataset was published","title":"ndi.cloud.api.datasets.publish_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/publish_dataset.m/#ndicloudapidatasetspublish_dataset","text":"PUBLISH_DATASET - publish a dataset RESPONSE = ndi.cloud.api.datasets.PUBLISH_DATASET(DATASET_ID) Inputs: DATASET_ID - an id of the dataset Outputs: RESPONSE - the dataset was published","title":"ndi.cloud.api.datasets.publish_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/submit_dataset.m/","text":"ndi.cloud.api.datasets.submit_dataset SUBMIT_DATASET - submit a dataset for review RESPONSE = ndi.cloud.api.datasets.SUBMIT_DATASET(DATASET_ID) Inputs: DATASET_ID - an id of the dataset Outputs: RESPONSE - the dataset was submitted","title":"ndi.cloud.api.datasets.submit_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/submit_dataset.m/#ndicloudapidatasetssubmit_dataset","text":"SUBMIT_DATASET - submit a dataset for review RESPONSE = ndi.cloud.api.datasets.SUBMIT_DATASET(DATASET_ID) Inputs: DATASET_ID - an id of the dataset Outputs: RESPONSE - the dataset was submitted","title":"ndi.cloud.api.datasets.submit_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/unpublish_dataset.m/","text":"ndi.cloud.api.datasets.unpublish_dataset UNPUBLISH_DATASET - unpublish a dataset RESPONSE = ndi.cloud.api.datasets.UNPUBLISH_DATASET(DATASET_ID) Inputs: DATASET_ID - an id of the dataset Outputs: RESPONSE - the dataset was unpublished","title":"ndi.cloud.api.datasets.unpublish_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/unpublish_dataset.m/#ndicloudapidatasetsunpublish_dataset","text":"UNPUBLISH_DATASET - unpublish a dataset RESPONSE = ndi.cloud.api.datasets.UNPUBLISH_DATASET(DATASET_ID) Inputs: DATASET_ID - an id of the dataset Outputs: RESPONSE - the dataset was unpublished","title":"ndi.cloud.api.datasets.unpublish_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/update_dataset.m/","text":"ndi.cloud.api.datasets.update_dataset UPDATE_DATASET - update a dataset to NDI Cloud RESPONSE = ndi.cloud.api.datasets.UPDATE_DATASET(DATASET_ID, DATASET) Inputs: DATASET_ID - an id of the dataset DATASET - the updated version of the dataset in JSON-formatted text Outputs: RESPONSE - the updated dataset summary","title":"ndi.cloud.api.datasets.update_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/update_dataset.m/#ndicloudapidatasetsupdate_dataset","text":"UPDATE_DATASET - update a dataset to NDI Cloud RESPONSE = ndi.cloud.api.datasets.UPDATE_DATASET(DATASET_ID, DATASET) Inputs: DATASET_ID - an id of the dataset DATASET - the updated version of the dataset in JSON-formatted text Outputs: RESPONSE - the updated dataset summary","title":"ndi.cloud.api.datasets.update_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/add_document.m/","text":"ndi.cloud.api.documents.add_document ADD_DOCUMENT - Add a document to a dataset","title":"ndi.cloud.api.documents.add_document"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/add_document.m/#ndicloudapidocumentsadd_document","text":"ADD_DOCUMENT - Add a document to a dataset","title":"ndi.cloud.api.documents.add_document"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/add_document_as_file.m/","text":"ndi.cloud.api.documents.add_document_as_file ADD_DOCUMENT - add a document to the dataset using a file for upload [RESPONSE, DOCUMENT_ID] = ndi.cloud.api.documents.ADD_DOCUMENT(DATASET_ID, DOCUMENT) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT - a string of JSON object representing the new document Outputs: RESPONSE - the new document summary Note: use this function if documents are too large to send as json","title":"ndi.cloud.api.documents.add_document_as_file"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/add_document_as_file.m/#ndicloudapidocumentsadd_document_as_file","text":"ADD_DOCUMENT - add a document to the dataset using a file for upload [RESPONSE, DOCUMENT_ID] = ndi.cloud.api.documents.ADD_DOCUMENT(DATASET_ID, DOCUMENT) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT - a string of JSON object representing the new document Outputs: RESPONSE - the new document summary Note: use this function if documents are too large to send as json","title":"ndi.cloud.api.documents.add_document_as_file"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/delete_document.m/","text":"ndi.cloud.api.documents.delete_document DELETE_DOCUMENT - delete a document from the dataset RESPONSE = ndi.cloud.api.documents.DELETE_DOCUMENT(DATASET_ID, DOCUMENT_ID) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id Outputs: RESPONSE - a message saying if the document was deleted or not","title":"ndi.cloud.api.documents.delete_document"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/delete_document.m/#ndicloudapidocumentsdelete_document","text":"DELETE_DOCUMENT - delete a document from the dataset RESPONSE = ndi.cloud.api.documents.DELETE_DOCUMENT(DATASET_ID, DOCUMENT_ID) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id Outputs: RESPONSE - a message saying if the document was deleted or not","title":"ndi.cloud.api.documents.delete_document"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/delete_documents.m/","text":"ndi.cloud.api.documents.delete_documents DELETE_DOCUMENTS - delete a document from the dataset [STATUS,RESPONSE] = ndi.cloud.api.documents.DELETE_DOCUMENTS(DATASET_ID, DOCUMENT_ID) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id Outputs: STATUS - did delete request work? 1 for no, 0 for yes RESPONSE - a message saying if the document was deleted or not","title":"ndi.cloud.api.documents.delete_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/delete_documents.m/#ndicloudapidocumentsdelete_documents","text":"DELETE_DOCUMENTS - delete a document from the dataset [STATUS,RESPONSE] = ndi.cloud.api.documents.DELETE_DOCUMENTS(DATASET_ID, DOCUMENT_ID) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id Outputs: STATUS - did delete request work? 1 for no, 0 for yes RESPONSE - a message saying if the document was deleted or not","title":"ndi.cloud.api.documents.delete_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/get_bulk_download_url.m/","text":"ndi.cloud.api.documents.get_bulk_download_url get_bulk_download_url - Get URL for downloading documents in bulk downloadUrl = get_bulk_download_url(dataset_id) returns a signed url to download a zip file containing one or more json files containing document data (as a root-level array) for the specified dataset Inputs: dataset_id - string representing a dataset id Outputs: downloadUrl - string representing a download url","title":"ndi.cloud.api.documents.get_bulk_download_url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/get_bulk_download_url.m/#ndicloudapidocumentsget_bulk_download_url","text":"get_bulk_download_url - Get URL for downloading documents in bulk downloadUrl = get_bulk_download_url(dataset_id) returns a signed url to download a zip file containing one or more json files containing document data (as a root-level array) for the specified dataset Inputs: dataset_id - string representing a dataset id Outputs: downloadUrl - string representing a download url","title":"ndi.cloud.api.documents.get_bulk_download_url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/get_bulk_upload_url.m/","text":"ndi.cloud.api.documents.get_bulk_upload_url get_bulk_upload_url - Get URL for uploading documents in bulk uploadUrl = get_bulk_upload_url(dataset_id) returns a signed url to upload a zip file containing one or more json files containing document data (as a root-level array) for the specified dataset Inputs: dataset_id - string representing a dataset id Outputs: uploadUrl - string representing a upload url","title":"ndi.cloud.api.documents.get_bulk_upload_url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/get_bulk_upload_url.m/#ndicloudapidocumentsget_bulk_upload_url","text":"get_bulk_upload_url - Get URL for uploading documents in bulk uploadUrl = get_bulk_upload_url(dataset_id) returns a signed url to upload a zip file containing one or more json files containing document data (as a root-level array) for the specified dataset Inputs: dataset_id - string representing a dataset id Outputs: uploadUrl - string representing a upload url","title":"ndi.cloud.api.documents.get_bulk_upload_url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/get_document.m/","text":"ndi.cloud.api.documents.get_document GET_DOCUMENT - get a document [RESPONSE,DOCUMENT] = ndi.cloud.api.documents.GET_DOCUMENT(DATASET_ID, DOCUMENT_ID) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id Outputs: RESPONSE - the updated dataset summary DOCUMENT - A document object required by the user","title":"ndi.cloud.api.documents.get_document"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/get_document.m/#ndicloudapidocumentsget_document","text":"GET_DOCUMENT - get a document [RESPONSE,DOCUMENT] = ndi.cloud.api.documents.GET_DOCUMENT(DATASET_ID, DOCUMENT_ID) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id Outputs: RESPONSE - the updated dataset summary DOCUMENT - A document object required by the user","title":"ndi.cloud.api.documents.get_document"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/get_documents.m/","text":"ndi.cloud.api.documents.get_documents GET_DOCUMENTS - get a document [STATUS,RESPONSE,DOCUMENT] = ndi.cloud.api.documents.GET_DOCUMENTS(DATASET_ID, DOCUMENT_ID) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the updated dataset summary DOCUMENT - A document object required by the user","title":"ndi.cloud.api.documents.get_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/get_documents.m/#ndicloudapidocumentsget_documents","text":"GET_DOCUMENTS - get a document [STATUS,RESPONSE,DOCUMENT] = ndi.cloud.api.documents.GET_DOCUMENTS(DATASET_ID, DOCUMENT_ID) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the updated dataset summary DOCUMENT - A document object required by the user","title":"ndi.cloud.api.documents.get_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/get_documents_summary.m/","text":"ndi.cloud.api.documents.get_documents_summary GET_DOCUMENTS_SUMMARY - get a document summaries for a dataset [STATUS,RESPONSE,SUMMARY] = ndi.cloud.api.documents.GET_DOCUMENTS_SUMMARY(DATASET_ID) Inputs: DATASET_ID - a string representing the dataset id Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get response SUMMARY - The list of documents in the dataset","title":"ndi.cloud.api.documents.get_documents_summary"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/get_documents_summary.m/#ndicloudapidocumentsget_documents_summary","text":"GET_DOCUMENTS_SUMMARY - get a document summaries for a dataset [STATUS,RESPONSE,SUMMARY] = ndi.cloud.api.documents.GET_DOCUMENTS_SUMMARY(DATASET_ID) Inputs: DATASET_ID - a string representing the dataset id Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get response SUMMARY - The list of documents in the dataset","title":"ndi.cloud.api.documents.get_documents_summary"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/list_dataset_documents.m/","text":"ndi.cloud.api.documents.list_dataset_documents LIST_DATASET_DOCUMENTS - Get a list of summaries for all documents of a dataset [RESPONSE, SUMMARY] = ndi.cloud.api.documents.LIST_DATASET_DOCUMENTS(DATASET_ID) Inputs: DATASET_ID - a string representing the dataset id Outputs: RESPONSE - the get response SUMMARY - The list of documents in the dataset","title":"ndi.cloud.api.documents.list_dataset_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/list_dataset_documents.m/#ndicloudapidocumentslist_dataset_documents","text":"LIST_DATASET_DOCUMENTS - Get a list of summaries for all documents of a dataset [RESPONSE, SUMMARY] = ndi.cloud.api.documents.LIST_DATASET_DOCUMENTS(DATASET_ID) Inputs: DATASET_ID - a string representing the dataset id Outputs: RESPONSE - the get response SUMMARY - The list of documents in the dataset","title":"ndi.cloud.api.documents.list_dataset_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/post_documents.m/","text":"ndi.cloud.api.documents.post_documents POST_DOCUMENTS - add a document to the dataset [STATUS,RESPONSE] = ndi.cloud.api.documents.POST_DOCUMENTS(DATASET_ID, DOCUMENT) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT - a string of JSON object representing the new document Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - the new document summary","title":"ndi.cloud.api.documents.post_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/post_documents.m/#ndicloudapidocumentspost_documents","text":"POST_DOCUMENTS - add a document to the dataset [STATUS,RESPONSE] = ndi.cloud.api.documents.POST_DOCUMENTS(DATASET_ID, DOCUMENT) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT - a string of JSON object representing the new document Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - the new document summary","title":"ndi.cloud.api.documents.post_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/post_documents_update.m/","text":"ndi.cloud.api.documents.post_documents_update POST_DOCUMENTS_UPDATE - update a document [STATUS,RESPONSE] = ndi.cloud.api.documents.POST_DOCUMENTS_UPDATE(FILE_PATH, DATASET_ID, DOCUMENT_ID, DOCUMENT) Inputs: FILE_PATH - a string representing the file path DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id DOCUMENT - a JSON object representing the updated version of the document Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - the updated document summary","title":"ndi.cloud.api.documents.post_documents_update"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/post_documents_update.m/#ndicloudapidocumentspost_documents_update","text":"POST_DOCUMENTS_UPDATE - update a document [STATUS,RESPONSE] = ndi.cloud.api.documents.POST_DOCUMENTS_UPDATE(FILE_PATH, DATASET_ID, DOCUMENT_ID, DOCUMENT) Inputs: FILE_PATH - a string representing the file path DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id DOCUMENT - a JSON object representing the updated version of the document Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - the updated document summary","title":"ndi.cloud.api.documents.post_documents_update"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/update_document.m/","text":"ndi.cloud.api.documents.update_document UPDATE_DOCUMENT - update a document RESPONSE = ndi.cloud.api.documents.UPDATE_DOCUMENT(FILE_PATH, DATASET_ID, DOCUMENT_ID, DOCUMENT) Inputs: FILE_PATH - a string representing the file path DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id DOCUMENT - a JSON object representing the updated version of the document Outputs: RESPONSE - the updated document summary","title":"ndi.cloud.api.documents.update_document"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/update_document.m/#ndicloudapidocumentsupdate_document","text":"UPDATE_DOCUMENT - update a document RESPONSE = ndi.cloud.api.documents.UPDATE_DOCUMENT(FILE_PATH, DATASET_ID, DOCUMENT_ID, DOCUMENT) Inputs: FILE_PATH - a string representing the file path DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id DOCUMENT - a JSON object representing the updated version of the document Outputs: RESPONSE - the updated document summary","title":"ndi.cloud.api.documents.update_document"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bfiles/get_file_details.m/","text":"ndi.cloud.api.files.get_file_details GET_FILE_DETAILS - Get the details, including the download url, for a individual file [FILE_DETAIL, DOWNLOADURL, RESPONSE] = ndi.cloud.api.files.GET_FILE_DETAILS(DATASET_ID,UID) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the file uid Outputs: FILE_DETAIL - the details of the file DOWNLOADURL - the download url for the file RESPONSE - the response from the server","title":"ndi.cloud.api.files.get_file_details"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bfiles/get_file_details.m/#ndicloudapifilesget_file_details","text":"GET_FILE_DETAILS - Get the details, including the download url, for a individual file [FILE_DETAIL, DOWNLOADURL, RESPONSE] = ndi.cloud.api.files.GET_FILE_DETAILS(DATASET_ID,UID) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the file uid Outputs: FILE_DETAIL - the details of the file DOWNLOADURL - the download url for the file RESPONSE - the response from the server","title":"ndi.cloud.api.files.get_file_details"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bfiles/get_file_upload_url.m/","text":"ndi.cloud.api.files.get_file_upload_url GET_FILE_UPLOAD_URL - get an upload URL for an artifact file that will be published to NDI Cloud Same functionality as ndi.cloud.api.datasets.GET_FILE_UPLOAD_URL [RESPONSE,UPLOAD_URL] = ndi.cloud.api.files.GET_FILE_UPLOAD_URL(DATASET_ID, UID) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the unique identifier that can be used to reference the file in document Outputs: RESPONSE - the upload summary UPLOAD_URL - the upload URL to put the file to","title":"ndi.cloud.api.files.get_file_upload_url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bfiles/get_file_upload_url.m/#ndicloudapifilesget_file_upload_url","text":"GET_FILE_UPLOAD_URL - get an upload URL for an artifact file that will be published to NDI Cloud Same functionality as ndi.cloud.api.datasets.GET_FILE_UPLOAD_URL [RESPONSE,UPLOAD_URL] = ndi.cloud.api.files.GET_FILE_UPLOAD_URL(DATASET_ID, UID) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the unique identifier that can be used to reference the file in document Outputs: RESPONSE - the upload summary UPLOAD_URL - the upload URL to put the file to","title":"ndi.cloud.api.files.get_file_upload_url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bfiles/get_files.m/","text":"ndi.cloud.api.files.get_files GET_FILES - get an upload URL for an artifact file that will be published to NDI Cloud Same functionality as ndi.cloud.api.datasets.GET_FILES [STATUS,RESPONSE,UPLOAD_URL] = ndi.cloud.api.files.GET_FILES(DATASET_ID, UID) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the unique identifier that can be used to reference the file in document Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the upload summary UPLOAD_URL - the upload URL to put the file to","title":"ndi.cloud.api.files.get_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bfiles/get_files.m/#ndicloudapifilesget_files","text":"GET_FILES - get an upload URL for an artifact file that will be published to NDI Cloud Same functionality as ndi.cloud.api.datasets.GET_FILES [STATUS,RESPONSE,UPLOAD_URL] = ndi.cloud.api.files.GET_FILES(DATASET_ID, UID) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the unique identifier that can be used to reference the file in document Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the upload summary UPLOAD_URL - the upload URL to put the file to","title":"ndi.cloud.api.files.get_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bfiles/get_files_detail.m/","text":"ndi.cloud.api.files.get_files_detail GET_FILES_DETAIL - Get the details, including the download url, for a individual file [STATUS,FILE_DETAIL, DOWNLOADURL, RESPONSE] = ndi.cloud.api.files.GET_FILES_DETAIL(DATASET_ID,UID) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the file uid Outputs: STATUS - did get request work? 1 for no, 0 for yes FILE_DETAIL - the details of the file DOWNLOADURL - the download url for the file RESPONSE - the response from the server","title":"ndi.cloud.api.files.get_files_detail"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bfiles/get_files_detail.m/#ndicloudapifilesget_files_detail","text":"GET_FILES_DETAIL - Get the details, including the download url, for a individual file [STATUS,FILE_DETAIL, DOWNLOADURL, RESPONSE] = ndi.cloud.api.files.GET_FILES_DETAIL(DATASET_ID,UID) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the file uid Outputs: STATUS - did get request work? 1 for no, 0 for yes FILE_DETAIL - the details of the file DOWNLOADURL - the download url for the file RESPONSE - the response from the server","title":"ndi.cloud.api.files.get_files_detail"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bfiles/get_files_raw.m/","text":"ndi.cloud.api.files.get_files_raw GET_FILES_RAW - get an upload URL for a raw data file that will be published to AWS Open Data after review. Same functionality as ndi.cloud.api.datasets.GET_FILES_RAW [STATUS,RESPONSE,UPLOAD_URL] = ndi.cloud.api.files.GET_FILES_RAW(DATASET_ID, UID) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the unique identifier that can be used to reference the file in document Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the upload summary UPLOAD_URL - the upload URL to put the file to","title":"ndi.cloud.api.files.get_files_raw"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bfiles/get_files_raw.m/#ndicloudapifilesget_files_raw","text":"GET_FILES_RAW - get an upload URL for a raw data file that will be published to AWS Open Data after review. Same functionality as ndi.cloud.api.datasets.GET_FILES_RAW [STATUS,RESPONSE,UPLOAD_URL] = ndi.cloud.api.files.GET_FILES_RAW(DATASET_ID, UID) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the unique identifier that can be used to reference the file in document Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the upload summary UPLOAD_URL - the upload URL to put the file to","title":"ndi.cloud.api.files.get_files_raw"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bfiles/get_raw_file_upload_url.m/","text":"ndi.cloud.api.files.get_raw_file_upload_url GET_RAW_FILE_UPLOAD_URL - get an upload URL for a raw data file that will be published to AWS Open Data after review. Same functionality as ndi.cloud.api.datasets.GET_RAW_FILE_UPLOAD_URL [RESPONSE,UPLOAD_URL] = ndi.cloud.api.files.GET_RAW_FILE_UPLOAD_URL(DATASET_ID, UID) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the unique identifier that can be used to reference the file in document Outputs: RESPONSE - the upload summary UPLOAD_URL - the upload URL to put the file to","title":"ndi.cloud.api.files.get_raw_file_upload_url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bfiles/get_raw_file_upload_url.m/#ndicloudapifilesget_raw_file_upload_url","text":"GET_RAW_FILE_UPLOAD_URL - get an upload URL for a raw data file that will be published to AWS Open Data after review. Same functionality as ndi.cloud.api.datasets.GET_RAW_FILE_UPLOAD_URL [RESPONSE,UPLOAD_URL] = ndi.cloud.api.files.GET_RAW_FILE_UPLOAD_URL(DATASET_ID, UID) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the unique identifier that can be used to reference the file in document Outputs: RESPONSE - the upload summary UPLOAD_URL - the upload URL to put the file to","title":"ndi.cloud.api.files.get_raw_file_upload_url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bfiles/put_files.m/","text":"ndi.cloud.api.files.put_files PUT_FILES - upload the file at FILE_PATH to the presigned url RESPONSE = ndi.cloud.api.files.PUT_FILES(PRESIGNED_URL, FILE_PATH) Inputs: PRESIGNED_URL - a string representing the url obtained from ndi.cloud.api.files.get_file_upload_url or get_raw_file_upload_url FILE_PATH - a string representing the path to the file to be uploaded Outputs: RESPONSE - the response of the upload","title":"ndi.cloud.api.files.put_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bfiles/put_files.m/#ndicloudapifilesput_files","text":"PUT_FILES - upload the file at FILE_PATH to the presigned url RESPONSE = ndi.cloud.api.files.PUT_FILES(PRESIGNED_URL, FILE_PATH) Inputs: PRESIGNED_URL - a string representing the url obtained from ndi.cloud.api.files.get_file_upload_url or get_raw_file_upload_url FILE_PATH - a string representing the path to the file to be uploaded Outputs: RESPONSE - the response of the upload","title":"ndi.cloud.api.files.put_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Busers/create_user.m/","text":"ndi.cloud.api.users.create_user CREATE_USER - create a new user RESPONSE = ndi.cloud.user.create_user(EMAIL, NAME, PASSWORD) Inputs: EMAIL - a string representing the user's e-mail NAME - a string representing the username PASSWORD - a string representing the user's password Outputs: RESPONSE - a message indicates if the user is created or not","title":"ndi.cloud.api.users.create_user"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Busers/create_user.m/#ndicloudapiuserscreate_user","text":"CREATE_USER - create a new user RESPONSE = ndi.cloud.user.create_user(EMAIL, NAME, PASSWORD) Inputs: EMAIL - a string representing the user's e-mail NAME - a string representing the username PASSWORD - a string representing the user's password Outputs: RESPONSE - a message indicates if the user is created or not","title":"ndi.cloud.api.users.create_user"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Busers/get_user.m/","text":"ndi.cloud.api.users.get_user GET_USER - get a user [RESPONSE, NAME, EMAIL, ORGANIZATIONS] = ndi.cloud.user.get_user(USER_ID, AUTH_TOKEN) Inputs: USER_ID - a string representing the user's id AUTH_TOKEN - a string representing the authentication token Outputs: RESPONSE - a message indicates if the user is found NAME - a string representing the user's name EMAIL - a string representing the user's e-mail ORGANIZATIONS - a json object representing the organization information","title":"ndi.cloud.api.users.get_user"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Busers/get_user.m/#ndicloudapiusersget_user","text":"GET_USER - get a user [RESPONSE, NAME, EMAIL, ORGANIZATIONS] = ndi.cloud.user.get_user(USER_ID, AUTH_TOKEN) Inputs: USER_ID - a string representing the user's id AUTH_TOKEN - a string representing the authentication token Outputs: RESPONSE - a message indicates if the user is found NAME - a string representing the user's name EMAIL - a string representing the user's e-mail ORGANIZATIONS - a json object representing the organization information","title":"ndi.cloud.api.users.get_user"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Busers/post_user.m/","text":"ndi.cloud.api.users.post_user POST_USER - create a new user [STATUS,RESPONSE] = ndi.cloud.user.post_users(EMAIL, NAME, PASSWORD) Inputs: EMAIL - a string representing the user's e-mail NAME - a string representing the username PASSWORD - a string representing the user's password Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - a message indicates if the user is created or not","title":"ndi.cloud.api.users.post_user"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Busers/post_user.m/#ndicloudapiuserspost_user","text":"POST_USER - create a new user [STATUS,RESPONSE] = ndi.cloud.user.post_users(EMAIL, NAME, PASSWORD) Inputs: EMAIL - a string representing the user's e-mail NAME - a string representing the username PASSWORD - a string representing the user's password Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - a message indicates if the user is created or not","title":"ndi.cloud.api.users.post_user"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Busers/post_user_update.m/","text":"ndi.cloud.api.users.post_user_update POST_USER_UPDATE - update a user [STATUS,RESPONSE] = ndi.cloud.user.post_users_update(USER_ID) Inputs: USER_ID - a string representing the user's id AUTH_TOKEN - a string representing the authentication token Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - a message indicates if the user is updated or not","title":"ndi.cloud.api.users.post_user_update"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Busers/post_user_update.m/#ndicloudapiuserspost_user_update","text":"POST_USER_UPDATE - update a user [STATUS,RESPONSE] = ndi.cloud.user.post_users_update(USER_ID) Inputs: USER_ID - a string representing the user's id AUTH_TOKEN - a string representing the authentication token Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - a message indicates if the user is updated or not","title":"ndi.cloud.api.users.post_user_update"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bauth/confirmation_resend.m/","text":"ndi.cloud.auth.confirmation_resend CONFIRMATION_RESEND - Resends the verification code via email [STATUS,RESPONSE] = ndi.cloud.auth.confirmation_resend(EMAIL) Inputs: EMAIL - a string representing the email address used to send the verification Outputs: STATUS - did the confirmation sent? 1 for no, 0 for yes RESPONSE - the response summary","title":"ndi.cloud.auth.confirmation_resend"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bauth/confirmation_resend.m/#ndicloudauthconfirmation_resend","text":"CONFIRMATION_RESEND - Resends the verification code via email [STATUS,RESPONSE] = ndi.cloud.auth.confirmation_resend(EMAIL) Inputs: EMAIL - a string representing the email address used to send the verification Outputs: STATUS - did the confirmation sent? 1 for no, 0 for yes RESPONSE - the response summary","title":"ndi.cloud.auth.confirmation_resend"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bauth/login.m/","text":"ndi.cloud.auth.login LOGIN - logs in a user [AUTH_TOKEN,ORGANIZATION_ID] = ndi.cloud.auth.LOGIN(EMAIL, PASSWORD) Inputs: EMAIL - a string representing the user's e-mail PASSWORD - a string representing the user's password Outputs: STATUS - did the user logs in successfully? 1 for no, 0 for yes AUTH_TOKEN - bearer token ORGANIZATION_ID - the organization id that the user belongs to","title":"ndi.cloud.auth.login"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bauth/login.m/#ndicloudauthlogin","text":"LOGIN - logs in a user [AUTH_TOKEN,ORGANIZATION_ID] = ndi.cloud.auth.LOGIN(EMAIL, PASSWORD) Inputs: EMAIL - a string representing the user's e-mail PASSWORD - a string representing the user's password Outputs: STATUS - did the user logs in successfully? 1 for no, 0 for yes AUTH_TOKEN - bearer token ORGANIZATION_ID - the organization id that the user belongs to","title":"ndi.cloud.auth.login"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bauth/logout.m/","text":"ndi.cloud.auth.logout LOGOUT - logs a user out and invalidates their token [STATUS,RESPONSE] = ndi.cloud.auth.LOGOUT(AUTH_TOKEN) Inputs: AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did user log out? 1 for no, 0 for yes RESPONSE - the response summary","title":"ndi.cloud.auth.logout"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bauth/logout.m/#ndicloudauthlogout","text":"LOGOUT - logs a user out and invalidates their token [STATUS,RESPONSE] = ndi.cloud.auth.LOGOUT(AUTH_TOKEN) Inputs: AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did user log out? 1 for no, 0 for yes RESPONSE - the response summary","title":"ndi.cloud.auth.logout"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bauth/password.m/","text":"ndi.cloud.auth.password PASSWORD - update a users password [STATUS,RESPONSE] = ndi.cloud.auth.PASSWORD(OLDPASSWORD, NEWPASSWORD, AUTH_TOKEN) Inputs: OLDPASSWORD - a string representing the old password NEWPASSWORD - a string representing the new password AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did the new password correctly set? 1 for no, 0 for yes RESPONSE - the response summary Prepare the JSON data to be sent in the POST request","title":"ndi.cloud.auth.password"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bauth/password.m/#ndicloudauthpassword","text":"PASSWORD - update a users password [STATUS,RESPONSE] = ndi.cloud.auth.PASSWORD(OLDPASSWORD, NEWPASSWORD, AUTH_TOKEN) Inputs: OLDPASSWORD - a string representing the old password NEWPASSWORD - a string representing the new password AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did the new password correctly set? 1 for no, 0 for yes RESPONSE - the response summary Prepare the JSON data to be sent in the POST request","title":"ndi.cloud.auth.password"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bauth/password_forgot.m/","text":"ndi.cloud.auth.password_forgot PASSWORD - sends a password reset e-mail [STATUS,RESPONSE] = ndi.cloud.auth.password_forgot(EMAIL) Inputs: EMAIL - a string representing the email address used to send the e-mail Outputs: STATUS - did the e-mail sent? 1 for no, 0 for yes RESPONSE - the response summary Prepare the JSON data to be sent in the POST request","title":"ndi.cloud.auth.password_forgot"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bauth/password_forgot.m/#ndicloudauthpassword_forgot","text":"PASSWORD - sends a password reset e-mail [STATUS,RESPONSE] = ndi.cloud.auth.password_forgot(EMAIL) Inputs: EMAIL - a string representing the email address used to send the e-mail Outputs: STATUS - did the e-mail sent? 1 for no, 0 for yes RESPONSE - the response summary Prepare the JSON data to be sent in the POST request","title":"ndi.cloud.auth.password_forgot"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bauth/verify.m/","text":"ndi.cloud.auth.verify VERIFY - verifies a user via the confirmation code sent in e-mail [STATUS,RESPONSE] = ndi.cloud.auth.verify(EMAIL, CONFIRMATION_CODE) Inputs: EMAIL - a string representing the email address used to verify CONFIRMATION_CODE - the code send to the email Outputs: STATUS - is the confirmation code correct? 1 for no, 0 for yes RESPONSE - the response summary Prepare the JSON data to be sent in the POST request","title":"ndi.cloud.auth.verify"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bauth/verify.m/#ndicloudauthverify","text":"VERIFY - verifies a user via the confirmation code sent in e-mail [STATUS,RESPONSE] = ndi.cloud.auth.verify(EMAIL, CONFIRMATION_CODE) Inputs: EMAIL - a string representing the email address used to verify CONFIRMATION_CODE - the code send to the email Outputs: STATUS - is the confirmation code correct? 1 for no, 0 for yes RESPONSE - the response summary Prepare the JSON data to be sent in the POST request","title":"ndi.cloud.auth.verify"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/delete_datasetId.m/","text":"ndi.cloud.datasets.delete_datasetId DELETE_DATASETID - Delete a dataset. Datasets cannot be deleted if they have been branched off of [STATUS,RESPONSE] = ndi.cloud.datasets.delete_datasetId(DATASET_ID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did delete request work? 1 for no, 0 for yes RESPONSE - the delete confirmation","title":"ndi.cloud.datasets.delete_datasetId"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/delete_datasetId.m/#ndiclouddatasetsdelete_datasetid","text":"DELETE_DATASETID - Delete a dataset. Datasets cannot be deleted if they have been branched off of [STATUS,RESPONSE] = ndi.cloud.datasets.delete_datasetId(DATASET_ID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did delete request work? 1 for no, 0 for yes RESPONSE - the delete confirmation","title":"ndi.cloud.datasets.delete_datasetId"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/get_branches.m/","text":"ndi.cloud.datasets.get_branches GET_BRANCHES - get the branches of a dataset [STATUS,RESPONSE,BRANCHES] = ndi.cloud.datasets.get_branches(DATASET_ID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get request summary BRANCHES - the branches required by the user","title":"ndi.cloud.datasets.get_branches"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/get_branches.m/#ndiclouddatasetsget_branches","text":"GET_BRANCHES - get the branches of a dataset [STATUS,RESPONSE,BRANCHES] = ndi.cloud.datasets.get_branches(DATASET_ID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get request summary BRANCHES - the branches required by the user","title":"ndi.cloud.datasets.get_branches"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/get_datasetId.m/","text":"ndi.cloud.datasets.get_datasetId GET_DATASETID - get a dataset [STATUS,DATASET, RESPONSE] = ndi.cloud.datasets.get_datasetId(DATASET_ID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes DATASET - the dataset required by the user RESPONSE - the response from the server","title":"ndi.cloud.datasets.get_datasetId"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/get_datasetId.m/#ndiclouddatasetsget_datasetid","text":"GET_DATASETID - get a dataset [STATUS,DATASET, RESPONSE] = ndi.cloud.datasets.get_datasetId(DATASET_ID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes DATASET - the dataset required by the user RESPONSE - the response from the server","title":"ndi.cloud.datasets.get_datasetId"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/get_files.m/","text":"ndi.cloud.datasets.get_files GET_FILES - get an upload URL for an artifact file that will be published to the NDI Cloud [STATUS,RESPONSE,URL] = ndi.cloud.datasets.get_files(DATASET_ID, UID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the id of the dataset UID - a string representing a unique identifier that can be used to reference the file in documents AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get request summary URL - the upload URL to PUT the file to","title":"ndi.cloud.datasets.get_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/get_files.m/#ndiclouddatasetsget_files","text":"GET_FILES - get an upload URL for an artifact file that will be published to the NDI Cloud [STATUS,RESPONSE,URL] = ndi.cloud.datasets.get_files(DATASET_ID, UID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the id of the dataset UID - a string representing a unique identifier that can be used to reference the file in documents AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get request summary URL - the upload URL to PUT the file to","title":"ndi.cloud.datasets.get_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/get_files_raw.m/","text":"ndi.cloud.datasets.get_files_raw GET_FILES_RAW - get an upload URL for a raw data file that will be published to AWS Open Data after review [STATUS,RESPONSE,URL] = ndi.cloud.datasets.get_files_raw(DATASET_ID, UID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the id of the dataset UID - a string representing a unique identifier that can be used to reference the file in documents AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get request summary URL - the upload URL to PUT the file to","title":"ndi.cloud.datasets.get_files_raw"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/get_files_raw.m/#ndiclouddatasetsget_files_raw","text":"GET_FILES_RAW - get an upload URL for a raw data file that will be published to AWS Open Data after review [STATUS,RESPONSE,URL] = ndi.cloud.datasets.get_files_raw(DATASET_ID, UID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the id of the dataset UID - a string representing a unique identifier that can be used to reference the file in documents AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get request summary URL - the upload URL to PUT the file to","title":"ndi.cloud.datasets.get_files_raw"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/get_organizations.m/","text":"ndi.cloud.datasets.get_organizations GET_ORGANIZATIONS - get a high level summary of all datasets in the organization [STATUS,RESPONSE, DATASETS] = ndi.cloud.datasets.get_organizations(ORGANIZATION_ID, AUTH_TOKEN) Inputs: ORGANIZATION_ID - a string representing the id of the organization AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get request summary DATASETS - A high level summary of all datasets in the organization","title":"ndi.cloud.datasets.get_organizations"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/get_organizations.m/#ndiclouddatasetsget_organizations","text":"GET_ORGANIZATIONS - get a high level summary of all datasets in the organization [STATUS,RESPONSE, DATASETS] = ndi.cloud.datasets.get_organizations(ORGANIZATION_ID, AUTH_TOKEN) Inputs: ORGANIZATION_ID - a string representing the id of the organization AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get request summary DATASETS - A high level summary of all datasets in the organization","title":"ndi.cloud.datasets.get_organizations"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/get_published.m/","text":"ndi.cloud.datasets.get_published GET_PUBLISHED - get all published datasets [STATUS,RESPONSE,DATASETS] = ndi.cloud.datasets.get_published(PAGE, PAGE_SIZE, AUTH_TOKEN) Inputs: PAGE - an integer representing the page of result to get DATASET - an integer representing the number of results per page AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get request summary DATASETS - a high level summary of all published datasets","title":"ndi.cloud.datasets.get_published"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/get_published.m/#ndiclouddatasetsget_published","text":"GET_PUBLISHED - get all published datasets [STATUS,RESPONSE,DATASETS] = ndi.cloud.datasets.get_published(PAGE, PAGE_SIZE, AUTH_TOKEN) Inputs: PAGE - an integer representing the page of result to get DATASET - an integer representing the number of results per page AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get request summary DATASETS - a high level summary of all published datasets","title":"ndi.cloud.datasets.get_published"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/get_unpublished.m/","text":"ndi.cloud.datasets.get_unpublished GET_UNPUBLISHED - get all submitted but unpublished datasets [STATUS,RESPONSE] = ndi.cloud.datasets.get_unpublished(PAGE, PAGE_SIZE, AUTH_TOKEN) Inputs: PAGE - an integer representing the page of result to get DATASET - an integer representing the number of results per page AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the updated dataset summary DATASETS - a high level summary of all unpublished datasets","title":"ndi.cloud.datasets.get_unpublished"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/get_unpublished.m/#ndiclouddatasetsget_unpublished","text":"GET_UNPUBLISHED - get all submitted but unpublished datasets [STATUS,RESPONSE] = ndi.cloud.datasets.get_unpublished(PAGE, PAGE_SIZE, AUTH_TOKEN) Inputs: PAGE - an integer representing the page of result to get DATASET - an integer representing the number of results per page AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the updated dataset summary DATASETS - a high level summary of all unpublished datasets","title":"ndi.cloud.datasets.get_unpublished"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/post_branch.m/","text":"ndi.cloud.datasets.post_branch POST_BRANCH - branch a given dataset [STATUS,RESPONSE] = ndi.cloud.datasets.post_branch(DATASET_ID, BRANCH_NAME, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the id of the dataset BRANCH_NAME - a string representing the branch name AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the updated dataset summary","title":"ndi.cloud.datasets.post_branch"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/post_branch.m/#ndiclouddatasetspost_branch","text":"POST_BRANCH - branch a given dataset [STATUS,RESPONSE] = ndi.cloud.datasets.post_branch(DATASET_ID, BRANCH_NAME, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the id of the dataset BRANCH_NAME - a string representing the branch name AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the updated dataset summary","title":"ndi.cloud.datasets.post_branch"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/post_bulk_delete.m/","text":"ndi.cloud.datasets.post_bulk_delete POST_BULK_DELETE - Delete a set of documents from the dataset [STATUS, DATASET] = ndi.cloud.datasets.post_bulk_delete(DATASET_ID, DOCUMENT_IDS, AUTH_TOKEN) Inputs: DATASET_ID - an id of the dataset DOCUMENT_IDS - a cell array of document ids to delete AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did the post request work? 1 for no, 0 for yes DATASET - the updated dataset","title":"ndi.cloud.datasets.post_bulk_delete"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/post_bulk_delete.m/#ndiclouddatasetspost_bulk_delete","text":"POST_BULK_DELETE - Delete a set of documents from the dataset [STATUS, DATASET] = ndi.cloud.datasets.post_bulk_delete(DATASET_ID, DOCUMENT_IDS, AUTH_TOKEN) Inputs: DATASET_ID - an id of the dataset DOCUMENT_IDS - a cell array of document ids to delete AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did the post request work? 1 for no, 0 for yes DATASET - the updated dataset","title":"ndi.cloud.datasets.post_bulk_delete"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/post_datasetId.m/","text":"ndi.cloud.datasets.post_datasetId POST_DATASETID - update a dataset to NDI Cloud [STATUS,RESPONSE] = ndi.cloud.datasets.post_datasets_datasetId(DATASET_ID, DATASET, AUTH_TOKEN) Inputs: DATASET_ID - an id of the dataset DATASET - the updated version of the dataset in JSON-formatted text AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did the post request work? 1 for no, 0 for yes RESPONSE - the updated dataset summary","title":"ndi.cloud.datasets.post_datasetId"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/post_datasetId.m/#ndiclouddatasetspost_datasetid","text":"POST_DATASETID - update a dataset to NDI Cloud [STATUS,RESPONSE] = ndi.cloud.datasets.post_datasets_datasetId(DATASET_ID, DATASET, AUTH_TOKEN) Inputs: DATASET_ID - an id of the dataset DATASET - the updated version of the dataset in JSON-formatted text AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did the post request work? 1 for no, 0 for yes RESPONSE - the updated dataset summary","title":"ndi.cloud.datasets.post_datasetId"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/post_organization.m/","text":"ndi.cloud.datasets.post_organization POST_ORGANIZATIONS - Create a new dataset [STATUS,RESPONSE] = ndi.cloud.datasets.post_organizations(ORGANIZATION_ID, DATASET, AUTH_TOKEN) Inputs: ORGANIZATION_ID - a string representing the id of the organization DATASET - a JSON object representing the dataset AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - the new dataset summary DATASET_ID - the id of the newly created dataset","title":"ndi.cloud.datasets.post_organization"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/post_organization.m/#ndiclouddatasetspost_organization","text":"POST_ORGANIZATIONS - Create a new dataset [STATUS,RESPONSE] = ndi.cloud.datasets.post_organizations(ORGANIZATION_ID, DATASET, AUTH_TOKEN) Inputs: ORGANIZATION_ID - a string representing the id of the organization DATASET - a JSON object representing the dataset AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - the new dataset summary DATASET_ID - the id of the newly created dataset","title":"ndi.cloud.datasets.post_organization"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/post_publish.m/","text":"ndi.cloud.datasets.post_publish POST_PUBLISH - publish a dataset [STATUS,RESPONSE] = ndi.cloud.datasets.post_publish(DATASET_ID, AUTH_TOKEN) Inputs: DATASET_ID - an id of the dataset AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did the post request work? 1 for no, 0 for yes RESPONSE - the dataset was published","title":"ndi.cloud.datasets.post_publish"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/post_publish.m/#ndiclouddatasetspost_publish","text":"POST_PUBLISH - publish a dataset [STATUS,RESPONSE] = ndi.cloud.datasets.post_publish(DATASET_ID, AUTH_TOKEN) Inputs: DATASET_ID - an id of the dataset AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did the post request work? 1 for no, 0 for yes RESPONSE - the dataset was published","title":"ndi.cloud.datasets.post_publish"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/post_submit.m/","text":"ndi.cloud.datasets.post_submit POST_SUBMIT - submit a dataset for review [STATUS,RESPONSE] = ndi.cloud.datasets.post_submit(DATASET_ID, AUTH_TOKEN) Inputs: DATASET_ID - an id of the dataset AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did the post request work? 1 for no, 0 for yes RESPONSE - the dataset was submitted","title":"ndi.cloud.datasets.post_submit"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/post_submit.m/#ndiclouddatasetspost_submit","text":"POST_SUBMIT - submit a dataset for review [STATUS,RESPONSE] = ndi.cloud.datasets.post_submit(DATASET_ID, AUTH_TOKEN) Inputs: DATASET_ID - an id of the dataset AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did the post request work? 1 for no, 0 for yes RESPONSE - the dataset was submitted","title":"ndi.cloud.datasets.post_submit"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/post_unpublish.m/","text":"ndi.cloud.datasets.post_unpublish POST_UNPUBLISH - unpublish a dataset [STATUS,RESPONSE] = ndi.cloud.datasets.post_unpublish(DATASET_ID, AUTH_TOKEN) Inputs: DATASET_ID - an id of the dataset AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did the post request work? 1 for no, 0 for yes RESPONSE - the dataset was unpublished","title":"ndi.cloud.datasets.post_unpublish"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdatasets/post_unpublish.m/#ndiclouddatasetspost_unpublish","text":"POST_UNPUBLISH - unpublish a dataset [STATUS,RESPONSE] = ndi.cloud.datasets.post_unpublish(DATASET_ID, AUTH_TOKEN) Inputs: DATASET_ID - an id of the dataset AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did the post request work? 1 for no, 0 for yes RESPONSE - the dataset was unpublished","title":"ndi.cloud.datasets.post_unpublish"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdocuments/delete_documents.m/","text":"ndi.cloud.documents.delete_documents DELETE_DOCUMENTS - delete a document from the dataset [STATUS,RESPONSE] = ndi.cloud.documents.delete_documents(DATASET_ID, DOCUMENT_ID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did delete request work? 1 for no, 0 for yes RESPONSE - a message saying if the document was deleted or not","title":"ndi.cloud.documents.delete_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdocuments/delete_documents.m/#ndiclouddocumentsdelete_documents","text":"DELETE_DOCUMENTS - delete a document from the dataset [STATUS,RESPONSE] = ndi.cloud.documents.delete_documents(DATASET_ID, DOCUMENT_ID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did delete request work? 1 for no, 0 for yes RESPONSE - a message saying if the document was deleted or not","title":"ndi.cloud.documents.delete_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdocuments/get_documents.m/","text":"ndi.cloud.documents.get_documents GET_DOCUMENTS - get a document [STATUS,RESPONSE,DOCUMENT] = ndi.cloud.documents.get_documents(DATASET_ID, DOCUMENT_ID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the updated dataset summary DOCUMENT - A document object required by the user","title":"ndi.cloud.documents.get_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdocuments/get_documents.m/#ndiclouddocumentsget_documents","text":"GET_DOCUMENTS - get a document [STATUS,RESPONSE,DOCUMENT] = ndi.cloud.documents.get_documents(DATASET_ID, DOCUMENT_ID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the updated dataset summary DOCUMENT - A document object required by the user","title":"ndi.cloud.documents.get_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdocuments/get_documents_summary.m/","text":"ndi.cloud.documents.get_documents_summary GET_DOCUMENTS - get a document summaries for a dataset [STATUS,RESPONSE,SUMMARY] = ndi.cloud.documents.get_documents_summary(DATASET_ID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get response SUMMARY - The list of documents in the dataset","title":"ndi.cloud.documents.get_documents_summary"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdocuments/get_documents_summary.m/#ndiclouddocumentsget_documents_summary","text":"GET_DOCUMENTS - get a document summaries for a dataset [STATUS,RESPONSE,SUMMARY] = ndi.cloud.documents.get_documents_summary(DATASET_ID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the get response SUMMARY - The list of documents in the dataset","title":"ndi.cloud.documents.get_documents_summary"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdocuments/post_documents.m/","text":"ndi.cloud.documents.post_documents POST_DOCUMENTS - add a document to the dataset [STATUS,RESPONSE] = ndi.cloud.documents.post_documents(DATASET_ID, DOCUMENT, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT - a string of JSON object representing the new document AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - the new document summary","title":"ndi.cloud.documents.post_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdocuments/post_documents.m/#ndiclouddocumentspost_documents","text":"POST_DOCUMENTS - add a document to the dataset [STATUS,RESPONSE] = ndi.cloud.documents.post_documents(DATASET_ID, DOCUMENT, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT - a string of JSON object representing the new document AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - the new document summary","title":"ndi.cloud.documents.post_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdocuments/post_documents_update.m/","text":"ndi.cloud.documents.post_documents_update POST_DOCUMENTS_UPDATE - update a document [STATUS,RESPONSE] = ndi.cloud.documents.post_documents_update(DATASET_ID, DOCUMENT_ID, DOCUMENT, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id DOCUMENT - a JSON object representing the updated version of the document AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - the updated document summary","title":"ndi.cloud.documents.post_documents_update"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdocuments/post_documents_update.m/#ndiclouddocumentspost_documents_update","text":"POST_DOCUMENTS_UPDATE - update a document [STATUS,RESPONSE] = ndi.cloud.documents.post_documents_update(DATASET_ID, DOCUMENT_ID, DOCUMENT, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id DOCUMENT - a JSON object representing the updated version of the document AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - the updated document summary","title":"ndi.cloud.documents.post_documents_update"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdownload/dataset.m/","text":"ndi.cloud.download.dataset DATASET download a dataset from NDI Cloud [B, MSG] = ndi.cloud.download.dataset(DATASET_ID, MODE, [OUTPUT_PATH]) Inputs: DATASET_ID - The dataset ID to download MODE - 'local' to download all files locally, 'hybrid' to leave binary files in cloud OUTPUT_PATH - The path to download the dataset to. If not provided, the user will be prompted. Outputs: B - did the download work? 0 for no, 1 for yes MSG - An error message if the download failed; otherwise ''","title":"ndi.cloud.download.dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdownload/dataset.m/#ndiclouddownloaddataset","text":"DATASET download a dataset from NDI Cloud [B, MSG] = ndi.cloud.download.dataset(DATASET_ID, MODE, [OUTPUT_PATH]) Inputs: DATASET_ID - The dataset ID to download MODE - 'local' to download all files locally, 'hybrid' to leave binary files in cloud OUTPUT_PATH - The path to download the dataset to. If not provided, the user will be prompted. Outputs: B - did the download work? 0 for no, 1 for yes MSG - An error message if the download failed; otherwise ''","title":"ndi.cloud.download.dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdownload/dataset_documents.m/","text":"ndi.cloud.download.dataset_documents DATASET_DOCUMENTS download dataset documents from NDI Cloud [B, MSG] = ndi.cloud.download.dataset_documents(DATASET, JSONPATH, ...]) Inputs: DATASET - The dataset structure returned from ndi.cloud.api.datasets.get_dataset MODE - 'local' to download all files locally, 'hybrid' to leave binary files in cloud JSONPATH - location to save documents FILEPATH - location to save files Optional inputs (as name/value pairs): verbose - Should output be verbose? (default: true) Outputs: B - did the download work? 0 for no, 1 for yes MSG - An error message if the download failed; otherwise ''","title":"ndi.cloud.download.dataset_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdownload/dataset_documents.m/#ndiclouddownloaddataset_documents","text":"DATASET_DOCUMENTS download dataset documents from NDI Cloud [B, MSG] = ndi.cloud.download.dataset_documents(DATASET, JSONPATH, ...]) Inputs: DATASET - The dataset structure returned from ndi.cloud.api.datasets.get_dataset MODE - 'local' to download all files locally, 'hybrid' to leave binary files in cloud JSONPATH - location to save documents FILEPATH - location to save files Optional inputs (as name/value pairs): verbose - Should output be verbose? (default: true) Outputs: B - did the download work? 0 for no, 1 for yes MSG - An error message if the download failed; otherwise ''","title":"ndi.cloud.download.dataset_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdownload/download_dataset.m/","text":"ndi.cloud.download.download_dataset DOWNLOAD_DATASET download the dataset from the server [B, MSG] = ndi.cloud.download_dataset(DATASET_ID, [OUTPUT_PATH]) Inputs: DATASET_ID - The dataset ID to download OUTPUT_PATH - The path to download the dataset to. If not provided, the user will be prompted. Outputs: B - did the download work? 0 for no, 1 for yes MSG - An error message if the upload failed; otherwise ''","title":"ndi.cloud.download.download_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdownload/download_dataset.m/#ndiclouddownloaddownload_dataset","text":"DOWNLOAD_DATASET download the dataset from the server [B, MSG] = ndi.cloud.download_dataset(DATASET_ID, [OUTPUT_PATH]) Inputs: DATASET_ID - The dataset ID to download OUTPUT_PATH - The path to download the dataset to. If not provided, the user will be prompted. Outputs: B - did the download work? 0 for no, 1 for yes MSG - An error message if the upload failed; otherwise ''","title":"ndi.cloud.download.download_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdownload/download_document_collection.m/","text":"ndi.cloud.download.download_document_collection DOWNLOAD_DOCUMENT_COLLECTION - Download a collection of documents using bulk download documents = ndi.cloud.download.download_document_collection(datasetId) downloads a collection of documents from a specified dataset using a bulk download mechanism. It retrieves a bulk download URL via the ndi.cloud.api.documents.get_bulk_download_url API call, downloads the corresponding ZIP file, and then extracts and decodes the JSON content into a MATLAB struct. INPUTS: datasetId - (1,1) string Unique identifier for the dataset from which documents are to be downloaded. documentIds - (1,:) string, optional Array of document identifiers to download. Default is an empty string (\"\"), which indicates that all documents in the dataset will be downloaded. OUTPUTS: documents - Cell A cell array of structures representing the downloaded documents. EXAMPLE: % Download all documents from a dataset: docs = ndi.cloud.download.download_document_collection(\"dataset123\"); % Download specific documents with a custom timeout: docs = ndi.cloud.download.download_document_collection(\"dataset123\", [\"doc1\", \"doc2\"]); See also: ndi.cloud.api.documents.get_bulk_download_url","title":"ndi.cloud.download.download_document_collection"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdownload/download_document_collection.m/#ndiclouddownloaddownload_document_collection","text":"DOWNLOAD_DOCUMENT_COLLECTION - Download a collection of documents using bulk download documents = ndi.cloud.download.download_document_collection(datasetId) downloads a collection of documents from a specified dataset using a bulk download mechanism. It retrieves a bulk download URL via the ndi.cloud.api.documents.get_bulk_download_url API call, downloads the corresponding ZIP file, and then extracts and decodes the JSON content into a MATLAB struct. INPUTS: datasetId - (1,1) string Unique identifier for the dataset from which documents are to be downloaded. documentIds - (1,:) string, optional Array of document identifiers to download. Default is an empty string (\"\"), which indicates that all documents in the dataset will be downloaded. OUTPUTS: documents - Cell A cell array of structures representing the downloaded documents. EXAMPLE: % Download all documents from a dataset: docs = ndi.cloud.download.download_document_collection(\"dataset123\"); % Download specific documents with a custom timeout: docs = ndi.cloud.download.download_document_collection(\"dataset123\", [\"doc1\", \"doc2\"]); See also: ndi.cloud.api.documents.get_bulk_download_url","title":"ndi.cloud.download.download_document_collection"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdownload/jsons2documents.m/","text":"ndi.cloud.download.jsons2documents [NDIDOCUMENTS] = JSONS2DOCUMENTS(JSONPATH) Load a set of NDI documents from a set of downloaded JSON files at JSONPATH.","title":"ndi.cloud.download.jsons2documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdownload/jsons2documents.m/#ndiclouddownloadjsons2documents","text":"[NDIDOCUMENTS] = JSONS2DOCUMENTS(JSONPATH) Load a set of NDI documents from a set of downloaded JSON files at JSONPATH.","title":"ndi.cloud.download.jsons2documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdownload/set_file_info.m/","text":"ndi.cloud.download.set_file_info SET_FILE_INFO - set file info parameters for different modes NEWDOCSTRUCT = SET_FILE_INFO(DOCSTRUCT, MODE, FILEPATH) Given a document structure downloaded from ndi.cloud.api.documents.get_document, set the 'delete_original' and 'ingest' fields as appropriate to the mode. The MODE can be 'local' or 'hybrid'. If MODE is 'local', then 'delete_original' and 'ingest' are set to 1. Otherwise, the are set to 0. FILEPATH is the location of any locally downloaded files (for 'local' MODE).","title":"ndi.cloud.download.set_file_info"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdownload/set_file_info.m/#ndiclouddownloadset_file_info","text":"SET_FILE_INFO - set file info parameters for different modes NEWDOCSTRUCT = SET_FILE_INFO(DOCSTRUCT, MODE, FILEPATH) Given a document structure downloaded from ndi.cloud.api.documents.get_document, set the 'delete_original' and 'ingest' fields as appropriate to the mode. The MODE can be 'local' or 'hybrid'. If MODE is 'local', then 'delete_original' and 'ingest' are set to 1. Otherwise, the are set to 0. FILEPATH is the location of any locally downloaded files (for 'local' MODE).","title":"ndi.cloud.download.set_file_info"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfiles/get_files.m/","text":"ndi.cloud.files.get_files GET_FILES - get an upload URL for an artifact file that will be published to NDI Cloud [STATUS,RESPONSE,UPLOAD_URL] = ndi.cloud.files.get_files(DATASET_ID, UID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the unique identifier that can be used to reference the file in document AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the upload summary UPLOAD_URL - the upload URL to put the file to","title":"ndi.cloud.files.get_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfiles/get_files.m/#ndicloudfilesget_files","text":"GET_FILES - get an upload URL for an artifact file that will be published to NDI Cloud [STATUS,RESPONSE,UPLOAD_URL] = ndi.cloud.files.get_files(DATASET_ID, UID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the unique identifier that can be used to reference the file in document AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the upload summary UPLOAD_URL - the upload URL to put the file to","title":"ndi.cloud.files.get_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfiles/get_files_raw.m/","text":"ndi.cloud.files.get_files_raw GET_FILES_RAW - get an upload URL for a raw data file that will be published to AWS Open Data after review [STATUS,RESPONSE,UPLOAD_URL] = ndi.cloud.files.get_files_raw(DATASET_ID, UID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the unique identifier that can be used to reference the file in document AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the upload summary UPLOAD_URL - the upload URL to put the file to","title":"ndi.cloud.files.get_files_raw"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfiles/get_files_raw.m/#ndicloudfilesget_files_raw","text":"GET_FILES_RAW - get an upload URL for a raw data file that will be published to AWS Open Data after review [STATUS,RESPONSE,UPLOAD_URL] = ndi.cloud.files.get_files_raw(DATASET_ID, UID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id UID - a string representing the unique identifier that can be used to reference the file in document AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the upload summary UPLOAD_URL - the upload URL to put the file to","title":"ndi.cloud.files.get_files_raw"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfiles/put_files.m/","text":"ndi.cloud.files.put_files PUT_FILES - upload a file [STATUS,RESPONSE,DOCUMENT] = ndi.cloud.files.put_files(DATASET_ID, DOCUMENT_ID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the updated dataset summary DOCUMENT - A document object required by the user","title":"ndi.cloud.files.put_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfiles/put_files.m/#ndicloudfilesput_files","text":"PUT_FILES - upload a file [STATUS,RESPONSE,DOCUMENT] = ndi.cloud.files.put_files(DATASET_ID, DOCUMENT_ID, AUTH_TOKEN) Inputs: DATASET_ID - a string representing the dataset id DOCUMENT_ID - a string representing the document id AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - the updated dataset summary DOCUMENT - A document object required by the user","title":"ndi.cloud.files.put_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfun/check_metadata_cloud_inputs.m/","text":"ndi.cloud.fun.check_metadata_cloud_inputs CHECK_METADATA_CLOUD_INPUTS - check if the input is valid IS_VALID = ndi.cloud.fun.CHECK_METADATA_CLOUD_INPUTS(S) Inputs: S - a structure with fields 'DatasetFullName', 'DatasetShortName', 'Author' 'Funding', 'Description', 'License', 'Subjects' 'Author' is a structure with fields 'givenName', 'familyName', 'authorRole', 'digitalIdentifier' 'digitalIdentifier' is a structure with field 'identifier' 'Funding' is a structure with field 'funder' 'Subjects' is an instance from ndi.database.metadata_app.class.Subject class Outputs: IS_VALID - 1 if the input is valid, 0 otherwise","title":"ndi.cloud.fun.check_metadata_cloud_inputs"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfun/check_metadata_cloud_inputs.m/#ndicloudfuncheck_metadata_cloud_inputs","text":"CHECK_METADATA_CLOUD_INPUTS - check if the input is valid IS_VALID = ndi.cloud.fun.CHECK_METADATA_CLOUD_INPUTS(S) Inputs: S - a structure with fields 'DatasetFullName', 'DatasetShortName', 'Author' 'Funding', 'Description', 'License', 'Subjects' 'Author' is a structure with fields 'givenName', 'familyName', 'authorRole', 'digitalIdentifier' 'digitalIdentifier' is a structure with field 'identifier' 'Funding' is a structure with field 'funder' 'Subjects' is an instance from ndi.database.metadata_app.class.Subject class Outputs: IS_VALID - 1 if the input is valid, 0 otherwise","title":"ndi.cloud.fun.check_metadata_cloud_inputs"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfun/create_new_dataset.m/","text":"ndi.cloud.fun.create_new_dataset CREATE_NEW_DATASET A helper function. Creates a new dataset filling the dataset details using the dataset information collected from the metadata app, and add the openminds_doc to the session. Finally, it uploads all the documents and files to the dataset. Detailed explanation goes here [B, MSG, DATASET_ID] = ndi.cloud.fun.CREATE_NEW_DATASET(S, STRUCT, EMAIL, PASSWORD) Inputs: S - ndi.session object STRUCT - a struct collected from the metadata app EMAIL - email address of the user PASSWORD - password of the user Outputs: B - did the upload work? 0 for no, 1 for yes MSG - An error message if the upload failed; otherwise '' DATASET_ID - the dataset id of the newly created dataset","title":"ndi.cloud.fun.create_new_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfun/create_new_dataset.m/#ndicloudfuncreate_new_dataset","text":"CREATE_NEW_DATASET A helper function. Creates a new dataset filling the dataset details using the dataset information collected from the metadata app, and add the openminds_doc to the session. Finally, it uploads all the documents and files to the dataset. Detailed explanation goes here [B, MSG, DATASET_ID] = ndi.cloud.fun.CREATE_NEW_DATASET(S, STRUCT, EMAIL, PASSWORD) Inputs: S - ndi.session object STRUCT - a struct collected from the metadata app EMAIL - email address of the user PASSWORD - password of the user Outputs: B - did the upload work? 0 for no, 1 for yes MSG - An error message if the upload failed; otherwise '' DATASET_ID - the dataset id of the newly created dataset","title":"ndi.cloud.fun.create_new_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfun/find_instance_name.m/","text":"ndi.cloud.fun.find_instance_name FIND_INSTANCE_NAME Summary of this function goes here Detailed explanation goes here","title":"ndi.cloud.fun.find_instance_name"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfun/find_instance_name.m/#ndicloudfunfind_instance_name","text":"FIND_INSTANCE_NAME Summary of this function goes here Detailed explanation goes here","title":"ndi.cloud.fun.find_instance_name"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfun/find_techniques_names.m/","text":"ndi.cloud.fun.find_techniques_names FIND_TECHNIQUES_NAMES Summary of this function goes here Detailed explanation goes here","title":"ndi.cloud.fun.find_techniques_names"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfun/find_techniques_names.m/#ndicloudfunfind_techniques_names","text":"FIND_TECHNIQUES_NAMES Summary of this function goes here Detailed explanation goes here","title":"ndi.cloud.fun.find_techniques_names"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfun/load_author_from_cloud.m/","text":"ndi.cloud.fun.load_author_from_cloud UNTITLED Summary of this function goes here AUTHOR = ndi.cloud.fun.LOAD_AUTHOR_FROM_CLOUD(AUTHOR_DOCS, OTHERCONTRIBUTION_DOCS, CUSTODIAN_DOCS, ALL_DOCS)","title":"ndi.cloud.fun.load_author_from_cloud"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfun/load_author_from_cloud.m/#ndicloudfunload_author_from_cloud","text":"UNTITLED Summary of this function goes here AUTHOR = ndi.cloud.fun.LOAD_AUTHOR_FROM_CLOUD(AUTHOR_DOCS, OTHERCONTRIBUTION_DOCS, CUSTODIAN_DOCS, ALL_DOCS)","title":"ndi.cloud.fun.load_author_from_cloud"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfun/load_dataType_from_cloud.m/","text":"ndi.cloud.fun.load_dataType_from_cloud LOAD_DATATYPE_FROM_CLOUD Summary of this function goes here Detailed explanation goes here","title":"ndi.cloud.fun.load_dataType_from_cloud"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfun/load_dataType_from_cloud.m/#ndicloudfunload_datatype_from_cloud","text":"LOAD_DATATYPE_FROM_CLOUD Summary of this function goes here Detailed explanation goes here","title":"ndi.cloud.fun.load_dataType_from_cloud"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfun/load_metadata_from_cloud.m/","text":"ndi.cloud.fun.load_metadata_from_cloud LOAD_METADATA_FROM_CLOUD reformat the openminds documents to a struct that can be loaded to the metadata app DATASETINFORMATION = ndi.cloud.fun.LOAD_METADATA_FROM_CLOUD(OPENMINDS_DOCUMENTS) Input: OPENMINDS_DOCUMENTS: a cell array of openminds documents Output: DATASETINFORMATION: a struct ready to be loaded to the metadata app","title":"ndi.cloud.fun.load_metadata_from_cloud"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfun/load_metadata_from_cloud.m/#ndicloudfunload_metadata_from_cloud","text":"LOAD_METADATA_FROM_CLOUD reformat the openminds documents to a struct that can be loaded to the metadata app DATASETINFORMATION = ndi.cloud.fun.LOAD_METADATA_FROM_CLOUD(OPENMINDS_DOCUMENTS) Input: OPENMINDS_DOCUMENTS: a cell array of openminds documents Output: DATASETINFORMATION: a struct ready to be loaded to the metadata app","title":"ndi.cloud.fun.load_metadata_from_cloud"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfun/make_dataset_from_docs_files.m/","text":"ndi.cloud.fun.make_dataset_from_docs_files [D] = make_dataset_from_docs_files(DATASET_PATH, DATASET_REFERENCE, ... DOC_PATH, FILES_PATH) Build an ndi.dataset.dir from a set of downloaded documents and files. DATASET_PATH is the full path of the dataset to be made. DATASET_REFERENCE is the full path of the dataset. DOC_PATH is the full path of a directory with .json files of ndi.documents. FILES_PATH is the full path of a directory with the binary data files for the ndi.documents.","title":"ndi.cloud.fun.make_dataset_from_docs_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfun/make_dataset_from_docs_files.m/#ndicloudfunmake_dataset_from_docs_files","text":"[D] = make_dataset_from_docs_files(DATASET_PATH, DATASET_REFERENCE, ... DOC_PATH, FILES_PATH) Build an ndi.dataset.dir from a set of downloaded documents and files. DATASET_PATH is the full path of the dataset to be made. DATASET_REFERENCE is the full path of the dataset. DOC_PATH is the full path of a directory with .json files of ndi.documents. FILES_PATH is the full path of a directory with the binary data files for the ndi.documents.","title":"ndi.cloud.fun.make_dataset_from_docs_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfun/search_id.m/","text":"ndi.cloud.fun.search_id SEARCH_ID Summary of this function goes here Detailed explanation goes here","title":"ndi.cloud.fun.search_id"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bfun/search_id.m/#ndicloudfunsearch_id","text":"SEARCH_ID Summary of this function goes here Detailed explanation goes here","title":"ndi.cloud.fun.search_id"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/decode_jwt.m/","text":"ndi.cloud.internal.decode_jwt decode_jwt - Decode a JSON Web token","title":"ndi.cloud.internal.decode_jwt"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/decode_jwt.m/#ndicloudinternaldecode_jwt","text":"decode_jwt - Decode a JSON Web token","title":"ndi.cloud.internal.decode_jwt"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/get_active_token.m/","text":"ndi.cloud.internal.get_active_token ndi.cloud.internal.get_active_token is a function. [token, organization_id] = ndi.cloud.internal.get_active_token","title":"ndi.cloud.internal.get_active_token"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/get_active_token.m/#ndicloudinternalget_active_token","text":"ndi.cloud.internal.get_active_token is a function. [token, organization_id] = ndi.cloud.internal.get_active_token","title":"ndi.cloud.internal.get_active_token"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/get_token_expiration.m/","text":"ndi.cloud.internal.get_token_expiration GET_TOKEN_EXPIRATION - Return token expiration time in local time zone","title":"ndi.cloud.internal.get_token_expiration"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/get_token_expiration.m/#ndicloudinternalget_token_expiration","text":"GET_TOKEN_EXPIRATION - Return token expiration time in local time zone","title":"ndi.cloud.internal.get_token_expiration"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/get_uploaded_document_ids.m/","text":"ndi.cloud.internal.get_uploaded_document_ids get_uploaded_document_ids - Get cell array of uploaded document ids. Use api endpoint to get ids for all uploaded documents","title":"ndi.cloud.internal.get_uploaded_document_ids"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/get_uploaded_document_ids.m/#ndicloudinternalget_uploaded_document_ids","text":"get_uploaded_document_ids - Get cell array of uploaded document ids. Use api endpoint to get ids for all uploaded documents","title":"ndi.cloud.internal.get_uploaded_document_ids"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/get_uploaded_file_ids.m/","text":"ndi.cloud.internal.get_uploaded_file_ids get_uploaded_file_ids - Get cell array of uploaded file ids.","title":"ndi.cloud.internal.get_uploaded_file_ids"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/get_uploaded_file_ids.m/#ndicloudinternalget_uploaded_file_ids","text":"get_uploaded_file_ids - Get cell array of uploaded file ids.","title":"ndi.cloud.internal.get_uploaded_file_ids"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/get_weboptions_with_auth_header.m/","text":"ndi.cloud.internal.get_weboptions_with_auth_header ndi.cloud.internal.get_weboptions_with_auth_header is a function. opts = ndi.cloud.internal.get_weboptions_with_auth_header","title":"ndi.cloud.internal.get_weboptions_with_auth_header"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/get_weboptions_with_auth_header.m/#ndicloudinternalget_weboptions_with_auth_header","text":"ndi.cloud.internal.get_weboptions_with_auth_header is a function. opts = ndi.cloud.internal.get_weboptions_with_auth_header","title":"ndi.cloud.internal.get_weboptions_with_auth_header"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/create_cloud_metadata_struct.m/","text":"ndi.cloud.upload.create_cloud_metadata_struct CREATE_CLOUD_METADATA_STRUCT - upload metadata to the NDI Cloud [STATUS, DATASET] = ndi.cloud.upload.CREATE_CLOUD_METADATA_STRUCT(S) Applies the MetaDataEditorApp data structure to a) create a new dataset b) add metadata for the dataset to the cloud API Note: This function does not create any ndi.document representations of the metadata, but only edits the metadata in the cloud API. Inputs: S - a struct with the metadata to create Outputs: STATUS - did the upload work? 0 for no, 1 for yes RESPONSE - The post request summary DATASET_ID - The created dataset id","title":"ndi.cloud.upload.create_cloud_metadata_struct"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/create_cloud_metadata_struct.m/#ndiclouduploadcreate_cloud_metadata_struct","text":"CREATE_CLOUD_METADATA_STRUCT - upload metadata to the NDI Cloud [STATUS, DATASET] = ndi.cloud.upload.CREATE_CLOUD_METADATA_STRUCT(S) Applies the MetaDataEditorApp data structure to a) create a new dataset b) add metadata for the dataset to the cloud API Note: This function does not create any ndi.document representations of the metadata, but only edits the metadata in the cloud API. Inputs: S - a struct with the metadata to create Outputs: STATUS - did the upload work? 0 for no, 1 for yes RESPONSE - The post request summary DATASET_ID - The created dataset id","title":"ndi.cloud.upload.create_cloud_metadata_struct"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/new_dataset.m/","text":"ndi.cloud.upload.new_dataset NEW_DATASET - upload a new dataset to NDI cloud DATASETID = NEW_DATASET(D) Upload an ndi.dataset object to NDI Cloud. The DATASETID on NDI Cloud is returned. Example: ndi.cloud.upload.new_dataset(D)","title":"ndi.cloud.upload.new_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/new_dataset.m/#ndiclouduploadnew_dataset","text":"NEW_DATASET - upload a new dataset to NDI cloud DATASETID = NEW_DATASET(D) Upload an ndi.dataset object to NDI Cloud. The DATASETID on NDI Cloud is returned. Example: ndi.cloud.upload.new_dataset(D)","title":"ndi.cloud.upload.new_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/scan_for_upload.m/","text":"ndi.cloud.upload.scan_for_upload SCAN_FOR_UPLOAD - Scans the session for documents and files to upload. Calculate the size of the files. [DOC_JSON_STRUCT,DOC_FILE_STRUCT] = ndi.cloud.upload.scan_for_upload(S, d, new, DATASET_ID) Inputs: S - an ndi.session object d - documents returned by searching the session using database_search NEW - 1 if this is a new dataset with empty documents and files, 0 otherwise DATASET_ID - The dataset id. dataset_id = '' if it is a new dataset Outputs: DOC_JSON_STRUCT - A structure with the following fields: 'docid' - The document id 'is_uploaded' - A flag indicating if the document is uploaded DOC_FILE_STRUCT - A structure with the following fields: 'uid' - The uid of the file 'name' - The name of the file 'docid' - The document id that the file is associated with 'bytes' - The size of the file in bytes 'is_uploaded' - A flag indicating if the file is uploaded TOTAL_SIZE - The total size of the files to upload in KB","title":"ndi.cloud.upload.scan_for_upload"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/scan_for_upload.m/#ndiclouduploadscan_for_upload","text":"SCAN_FOR_UPLOAD - Scans the session for documents and files to upload. Calculate the size of the files. [DOC_JSON_STRUCT,DOC_FILE_STRUCT] = ndi.cloud.upload.scan_for_upload(S, d, new, DATASET_ID) Inputs: S - an ndi.session object d - documents returned by searching the session using database_search NEW - 1 if this is a new dataset with empty documents and files, 0 otherwise DATASET_ID - The dataset id. dataset_id = '' if it is a new dataset Outputs: DOC_JSON_STRUCT - A structure with the following fields: 'docid' - The document id 'is_uploaded' - A flag indicating if the document is uploaded DOC_FILE_STRUCT - A structure with the following fields: 'uid' - The uid of the file 'name' - The name of the file 'docid' - The document id that the file is associated with 'bytes' - The size of the file in bytes 'is_uploaded' - A flag indicating if the file is uploaded TOTAL_SIZE - The total size of the files to upload in KB","title":"ndi.cloud.upload.scan_for_upload"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/update_cloud_metadata.m/","text":"ndi.cloud.upload.update_cloud_metadata UPDATE_CLOUD_METADATA - upload metadata to the NDI Cloud [STATUS, DATASET] = ndi.cloud.upload.UPDATE_CLOUD_METADATA(DATASETID, S) Inputs: DATASETID - the dataset ID to update S - an ndi.session object with the metadata to upload Outputs: STATUS - did the upload work? 0 for no, 1 for yes DATASET - The updated dataset","title":"ndi.cloud.upload.update_cloud_metadata"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/update_cloud_metadata.m/#ndiclouduploadupdate_cloud_metadata","text":"UPDATE_CLOUD_METADATA - upload metadata to the NDI Cloud [STATUS, DATASET] = ndi.cloud.upload.UPDATE_CLOUD_METADATA(DATASETID, S) Inputs: DATASETID - the dataset ID to update S - an ndi.session object with the metadata to upload Outputs: STATUS - did the upload work? 0 for no, 1 for yes DATASET - The updated dataset","title":"ndi.cloud.upload.update_cloud_metadata"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/update_cloud_metadata_struct.m/","text":"ndi.cloud.upload.update_cloud_metadata_struct UPDATE_CLOUD_METADATA_STRUCT - upload metadata to the NDI Cloud [STATUS, DATASET] = ndi.cloud.upload.UPDATE_CLOUD_METADATA_STRUCT(DATASETID, S, SIZE) Inputs: DATASETID - the dataset ID to update S - a struct with the metadata to upload SIZE - a float representing the size of this dataset in kilobytes Outputs: STATUS - did the upload work? 0 for no, 1 for yes DATASET - The updated dataset","title":"ndi.cloud.upload.update_cloud_metadata_struct"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/update_cloud_metadata_struct.m/#ndiclouduploadupdate_cloud_metadata_struct","text":"UPDATE_CLOUD_METADATA_STRUCT - upload metadata to the NDI Cloud [STATUS, DATASET] = ndi.cloud.upload.UPDATE_CLOUD_METADATA_STRUCT(DATASETID, S, SIZE) Inputs: DATASETID - the dataset ID to update S - a struct with the metadata to upload SIZE - a float representing the size of this dataset in kilobytes Outputs: STATUS - did the upload work? 0 for no, 1 for yes DATASET - The updated dataset","title":"ndi.cloud.upload.update_cloud_metadata_struct"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/upload_document_collection.m/","text":"ndi.cloud.upload.upload_document_collection UPLOAD_DOCUMENT_COLLECTION - Upload a collection of documents using bulk upload ndi.cloud.upload.upload_document_collection(datasetId, documentList) performs a bulk upload of documents to a specified dataset. It creates a ZIP archive from the provided document list, retrieves a bulk upload URL for the dataset, and then uploads the ZIP file to the cloud. INPUTS: datasetId - (1,1) string Unique identifier for the dataset to which the documents are to be uploaded. documentList - (1,:) cell A cell array containing the documents to be uploaded. Each element of the cell array is a structure representing an individual document for inclusion in the upload. EXAMPLE: % Upload a collection of documents to a dataset: docs = {doc1, doc2, doc3}; ndi.cloud.upload.upload_document_collection(\"dataset123\", docs); See also: ndi.cloud.upload.zip_documents_for_upload, ndi.cloud.api.documents.get_bulk_upload_url","title":"ndi.cloud.upload.upload_document_collection"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/upload_document_collection.m/#ndiclouduploadupload_document_collection","text":"UPLOAD_DOCUMENT_COLLECTION - Upload a collection of documents using bulk upload ndi.cloud.upload.upload_document_collection(datasetId, documentList) performs a bulk upload of documents to a specified dataset. It creates a ZIP archive from the provided document list, retrieves a bulk upload URL for the dataset, and then uploads the ZIP file to the cloud. INPUTS: datasetId - (1,1) string Unique identifier for the dataset to which the documents are to be uploaded. documentList - (1,:) cell A cell array containing the documents to be uploaded. Each element of the cell array is a structure representing an individual document for inclusion in the upload. EXAMPLE: % Upload a collection of documents to a dataset: docs = {doc1, doc2, doc3}; ndi.cloud.upload.upload_document_collection(\"dataset123\", docs); See also: ndi.cloud.upload.zip_documents_for_upload, ndi.cloud.api.documents.get_bulk_upload_url","title":"ndi.cloud.upload.upload_document_collection"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/upload_to_NDI_cloud.m/","text":"ndi.cloud.upload.upload_to_NDI_cloud UPLOAD_TO_NDI_CLOUD - upload an NDI database to NDI Cloud [B,MSG] = ndi.cloud.upload.upload_to_NDI_cloud(S, DATASET_ID, VARARGIN) Inputs: S - an ndi.session object DATASET_ID - the dataset id for the NDI Cloud Outputs: B - did the upload work? 0 for no, 1 for yes MSG - An error message if the upload failed; otherwise ''","title":"ndi.cloud.upload.upload_to_NDI_cloud"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/upload_to_NDI_cloud.m/#ndiclouduploadupload_to_ndi_cloud","text":"UPLOAD_TO_NDI_CLOUD - upload an NDI database to NDI Cloud [B,MSG] = ndi.cloud.upload.upload_to_NDI_cloud(S, DATASET_ID, VARARGIN) Inputs: S - an ndi.session object DATASET_ID - the dataset id for the NDI Cloud Outputs: B - did the upload work? 0 for no, 1 for yes MSG - An error message if the upload failed; otherwise ''","title":"ndi.cloud.upload.upload_to_NDI_cloud"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/zip_documents_for_upload.m/","text":"ndi.cloud.upload.zip_documents_for_upload Convert documents to a JSON string","title":"ndi.cloud.upload.zip_documents_for_upload"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/zip_documents_for_upload.m/#ndiclouduploadzip_documents_for_upload","text":"Convert documents to a JSON string","title":"ndi.cloud.upload.zip_documents_for_upload"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/zip_for_upload.m/","text":"ndi.cloud.upload.zip_for_upload ZIP_FOR_UPLOAD - Create a zip file for uploading to the NDI cloud [B, MSG] = ndi.cloud.upload.ZIP_FOR_UPLOAD(D, DOC_FILE_STRUCT, TOTAL_SIZE, DATASET_ID) Inputs: D - the ndi.database object DOC_FILE_STRUCT - A structure with the following fields: 'uid' - The uid of the file 'name' - The name of the file 'docid' - The document id that the file is associated with 'bytes' - The size of the file in bytes 'is_uploaded' - A flag indicating if the file is uploaded TOTAL_SIZE - The total size of the files to be uploaded DATASET_ID - The dataset id Outputs: B - did the upload work? 0 for no, 1 for yes MSG - An error message if the upload failed; otherwise ''","title":"ndi.cloud.upload.zip_for_upload"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/zip_for_upload.m/#ndiclouduploadzip_for_upload","text":"ZIP_FOR_UPLOAD - Create a zip file for uploading to the NDI cloud [B, MSG] = ndi.cloud.upload.ZIP_FOR_UPLOAD(D, DOC_FILE_STRUCT, TOTAL_SIZE, DATASET_ID) Inputs: D - the ndi.database object DOC_FILE_STRUCT - A structure with the following fields: 'uid' - The uid of the file 'name' - The name of the file 'docid' - The document id that the file is associated with 'bytes' - The size of the file in bytes 'is_uploaded' - A flag indicating if the file is uploaded TOTAL_SIZE - The total size of the files to be uploaded DATASET_ID - The dataset id Outputs: B - did the upload work? 0 for no, 1 for yes MSG - An error message if the upload failed; otherwise ''","title":"ndi.cloud.upload.zip_for_upload"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/old/test_upload.m/","text":"ndi.cloud.upload/old.test_upload TEST_UPLOAD - upload a test dataset to the cloud [B, MSG, DATASET_ID] = ndi.cloud.test_upload(S, TEST_NAME) inputs: S - ndi.session object TEST_NAME - the name of the test outputs: B - 1 if the upload was successful, 0 if not MSG - a message about the upload DATASET_ID - the dataset id of the uploaded dataset","title":"ndi.cloud.upload/old.test_upload"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/old/test_upload.m/#ndiclouduploadoldtest_upload","text":"TEST_UPLOAD - upload a test dataset to the cloud [B, MSG, DATASET_ID] = ndi.cloud.test_upload(S, TEST_NAME) inputs: S - ndi.session object TEST_NAME - the name of the test outputs: B - 1 if the upload was successful, 0 if not MSG - a message about the upload DATASET_ID - the dataset id of the uploaded dataset","title":"ndi.cloud.upload/old.test_upload"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/old/test_upload_old.m/","text":"ndi.cloud.upload/old.test_upload_old tutorial 2.1","title":"ndi.cloud.upload/old.test_upload_old"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/old/test_upload_old.m/#ndiclouduploadoldtest_upload_old","text":"tutorial 2.1","title":"ndi.cloud.upload/old.test_upload_old"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/old/upload_dataset_database.m/","text":"ndi.cloud.upload/old.upload_dataset_database UPLOAD_DATASET_DATABASE - Upload the complete database of a dataset Syntax: ndi.cloud.upload_dataset_database(NDI_DATASET, CLOUD_DATASET_ID) uploads all the documents and associated binary files for a dataset to an NDI Cloud Dataset. Input arguments: NDI_DATASET : string an ndi.dataset object CLOUD_DATASET_ID : string an id for a dataset on NDI cloud to upload documents and files to Options (Name - Value pairs) verbose : logical Whether to display status updates. Default is true show_ui : logical Whether to display progress in a gui. Default is true","title":"ndi.cloud.upload/old.upload_dataset_database"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/old/upload_dataset_database.m/#ndiclouduploadoldupload_dataset_database","text":"UPLOAD_DATASET_DATABASE - Upload the complete database of a dataset Syntax: ndi.cloud.upload_dataset_database(NDI_DATASET, CLOUD_DATASET_ID) uploads all the documents and associated binary files for a dataset to an NDI Cloud Dataset. Input arguments: NDI_DATASET : string an ndi.dataset object CLOUD_DATASET_ID : string an id for a dataset on NDI cloud to upload documents and files to Options (Name - Value pairs) verbose : logical Whether to display status updates. Default is true show_ui : logical Whether to display progress in a gui. Default is true","title":"ndi.cloud.upload/old.upload_dataset_database"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/old/upload_to_NDI_cloud_bulk.m/","text":"ndi.cloud.upload/old.upload_to_NDI_cloud_bulk upload_to_NDI_cloud_bulk - upload an NDI database to NDI Cloud [B,MSG] = ndi.database.fun.upload_to_NDI_cloud_bulk(S, DATASET_ID, VARARGIN) Inputs: S - an ndi.session object DATASET_ID - the dataset id for the NDI Cloud Outputs: B - did the upload work? 0 for no, 1 for yes MSG - An error message if the upload failed; otherwise ''","title":"ndi.cloud.upload/old.upload_to_NDI_cloud_bulk"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/old/upload_to_NDI_cloud_bulk.m/#ndiclouduploadoldupload_to_ndi_cloud_bulk","text":"upload_to_NDI_cloud_bulk - upload an NDI database to NDI Cloud [B,MSG] = ndi.database.fun.upload_to_NDI_cloud_bulk(S, DATASET_ID, VARARGIN) Inputs: S - an ndi.session object DATASET_ID - the dataset id for the NDI Cloud Outputs: B - did the upload work? 0 for no, 1 for yes MSG - An error message if the upload failed; otherwise ''","title":"ndi.cloud.upload/old.upload_to_NDI_cloud_bulk"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Busers/get_user.m/","text":"ndi.cloud.users.get_user GET_USER - get a user [STATUS,RESPONSE, NAME, EMAIL, ORGANIZATIONS] = ndi.cloud.user.get_user(USER_ID, AUTH_TOKEN) Inputs: USER_ID - a string representing the user's id AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - a message indicates if the user is found NAME - a string representing the user's name EMAIL - a string representing the user's e-mail ORGANIZATIONS - a json object representing the organization information","title":"ndi.cloud.users.get_user"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Busers/get_user.m/#ndicloudusersget_user","text":"GET_USER - get a user [STATUS,RESPONSE, NAME, EMAIL, ORGANIZATIONS] = ndi.cloud.user.get_user(USER_ID, AUTH_TOKEN) Inputs: USER_ID - a string representing the user's id AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did get request work? 1 for no, 0 for yes RESPONSE - a message indicates if the user is found NAME - a string representing the user's name EMAIL - a string representing the user's e-mail ORGANIZATIONS - a json object representing the organization information","title":"ndi.cloud.users.get_user"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Busers/post_user.m/","text":"ndi.cloud.users.post_user POST_USER - create a new user [STATUS,RESPONSE] = ndi.cloud.user.post_users(EMAIL, NAME, PASSWORD) Inputs: EMAIL - a string representing the user's e-mail NAME - a string representing the username PASSWORD - a string representing the user's password Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - a message indicates if the user is created or not","title":"ndi.cloud.users.post_user"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Busers/post_user.m/#ndiclouduserspost_user","text":"POST_USER - create a new user [STATUS,RESPONSE] = ndi.cloud.user.post_users(EMAIL, NAME, PASSWORD) Inputs: EMAIL - a string representing the user's e-mail NAME - a string representing the username PASSWORD - a string representing the user's password Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - a message indicates if the user is created or not","title":"ndi.cloud.users.post_user"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Busers/post_user_update.m/","text":"ndi.cloud.users.post_user_update POST_USER_UPDATE - update a user [STATUS,RESPONSE] = ndi.cloud.user.post_users_update(USER_ID) Inputs: USER_ID - a string representing the user's id AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - a message indicates if the user is updated or not","title":"ndi.cloud.users.post_user_update"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Busers/post_user_update.m/#ndiclouduserspost_user_update","text":"POST_USER_UPDATE - update a user [STATUS,RESPONSE] = ndi.cloud.user.post_users_update(USER_ID) Inputs: USER_ID - a string representing the user's id AUTH_TOKEN - a string representing the authentification token Outputs: STATUS - did post request work? 1 for no, 0 for yes RESPONSE - a message indicates if the user is updated or not","title":"ndi.cloud.users.post_user_update"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/PathConstants.m/","text":"CLASS ndi.common.PathConstants PathConstants - A set of path constants referenced by the NDI toolbox RootFolder | The path of the NDI distribution on this machine. CommonFolder | The path to the package ndi_common DocumentFolder | The path of the NDI document definitions DocumentSchemaFolder | The path of the NDI document validation schema ExampleDataFolder | The path to the NDI example sessions Preferences | A path to a directory of preferences files FileCacheFolder | A path where files may be cached (not deleted every time) TempFolder | The path to a directory that may be used for temporary files TestFolder | A path to a safe place to run test code CalcDoc | A cell array of paths to NDI calculator document definitions CalcDocSchema | A cell array of paths to NDI calculator document schemas Superclasses none Properties Property Description RootFolder CommonFolder DocumentFolder DocumentSchemaFolder ExampleDataFolder TempFolder TestFolder FileCacheFolder LogFolder Preferences CalcDoc CalcDocSchema Methods Method Description PathConstants A set of path constants referenced by the NDI toolbox getNdiPathPlaceholderName ndi.common.PathConstants.getNdiPathPlaceholderName is a function. updateDIDConstants ndi.common.PathConstants.updateDIDConstants is a function. Methods help PathConstants - A set of path constants referenced by the NDI toolbox RootFolder | The path of the NDI distribution on this machine. CommonFolder | The path to the package ndi_common DocumentFolder | The path of the NDI document definitions DocumentSchemaFolder | The path of the NDI document validation schema ExampleDataFolder | The path to the NDI example sessions Preferences | A path to a directory of preferences files FileCacheFolder | A path where files may be cached (not deleted every time) TempFolder | The path to a directory that may be used for temporary files TestFolder | A path to a safe place to run test code CalcDoc | A cell array of paths to NDI calculator document definitions CalcDocSchema | A cell array of paths to NDI calculator document schemas Documentation for ndi.common.PathConstants/PathConstants doc ndi.common.PathConstants getNdiPathPlaceholderName - ndi.common.PathConstants.getNdiPathPlaceholderName is a function. placeholder = ndi.common.PathConstants.getNdiPathPlaceholderName(name) updateDIDConstants - ndi.common.PathConstants.updateDIDConstants is a function.","title":"ndi.common.PathConstants"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/PathConstants.m/#class-ndicommonpathconstants","text":"PathConstants - A set of path constants referenced by the NDI toolbox RootFolder | The path of the NDI distribution on this machine. CommonFolder | The path to the package ndi_common DocumentFolder | The path of the NDI document definitions DocumentSchemaFolder | The path of the NDI document validation schema ExampleDataFolder | The path to the NDI example sessions Preferences | A path to a directory of preferences files FileCacheFolder | A path where files may be cached (not deleted every time) TempFolder | The path to a directory that may be used for temporary files TestFolder | A path to a safe place to run test code CalcDoc | A cell array of paths to NDI calculator document definitions CalcDocSchema | A cell array of paths to NDI calculator document schemas","title":"CLASS ndi.common.PathConstants"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/PathConstants.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/PathConstants.m/#properties","text":"Property Description RootFolder CommonFolder DocumentFolder DocumentSchemaFolder ExampleDataFolder TempFolder TestFolder FileCacheFolder LogFolder Preferences CalcDoc CalcDocSchema","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/PathConstants.m/#methods","text":"Method Description PathConstants A set of path constants referenced by the NDI toolbox getNdiPathPlaceholderName ndi.common.PathConstants.getNdiPathPlaceholderName is a function. updateDIDConstants ndi.common.PathConstants.updateDIDConstants is a function.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/PathConstants.m/#methods-help","text":"PathConstants - A set of path constants referenced by the NDI toolbox RootFolder | The path of the NDI distribution on this machine. CommonFolder | The path to the package ndi_common DocumentFolder | The path of the NDI document definitions DocumentSchemaFolder | The path of the NDI document validation schema ExampleDataFolder | The path to the NDI example sessions Preferences | A path to a directory of preferences files FileCacheFolder | A path where files may be cached (not deleted every time) TempFolder | The path to a directory that may be used for temporary files TestFolder | A path to a safe place to run test code CalcDoc | A cell array of paths to NDI calculator document definitions CalcDocSchema | A cell array of paths to NDI calculator document schemas Documentation for ndi.common.PathConstants/PathConstants doc ndi.common.PathConstants getNdiPathPlaceholderName - ndi.common.PathConstants.getNdiPathPlaceholderName is a function. placeholder = ndi.common.PathConstants.getNdiPathPlaceholderName(name) updateDIDConstants - ndi.common.PathConstants.updateDIDConstants is a function.","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/assertDIDInstalled.m/","text":"ndi.common.assertDIDInstalled ndi.common.assertDIDInstalled is a function.","title":"ndi.common.assertDIDInstalled"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/assertDIDInstalled.m/#ndicommonassertdidinstalled","text":"ndi.common.assertDIDInstalled is a function.","title":"ndi.common.assertDIDInstalled"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/getCache.m/","text":"ndi.common.getCache ndi.common.getCache is a function. cache = ndi.common.getCache","title":"ndi.common.getCache"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/getCache.m/#ndicommongetcache","text":"ndi.common.getCache is a function. cache = ndi.common.getCache","title":"ndi.common.getCache"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/getDatabaseHierarchy.m/","text":"ndi.common.getDatabaseHierarchy ndi.common.getDatabaseHierarchy is a function. databaseHierarchy = ndi.common.getDatabaseHierarchy","title":"ndi.common.getDatabaseHierarchy"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/getDatabaseHierarchy.m/#ndicommongetdatabasehierarchy","text":"ndi.common.getDatabaseHierarchy is a function. databaseHierarchy = ndi.common.getDatabaseHierarchy","title":"ndi.common.getDatabaseHierarchy"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/getLogger.m/","text":"ndi.common.getLogger ndi.common.getLogger is a function. logger = ndi.common.getLogger","title":"ndi.common.getLogger"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/getLogger.m/#ndicommongetlogger","text":"ndi.common.getLogger is a function. logger = ndi.common.getLogger","title":"ndi.common.getLogger"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/daqsystemstring.m/","text":"CLASS ndi.daq.daqsystemstring NDI_DAQSYSTEMSTRING - a class for describing the device and channels that correspond to an NDI_EPOCHPROBEMAP_DAQSYSTEM ndi.daq.daqsystemstring A 'devicestring' is a part of an ndi.epoch.epochprobemap_daqsystem that indicates the channel types and channel numbers that correspond to a particular record. For example, one may specify that a 4-channel extracellular recording with name 'ctx' and reference 1 was recorded on a device called 'mydevice' via analog input on channels 27-28 and 45 and 88 with the following ndi.epoch.epochprobemap_daqsystem entry: name: 'ctx' reference: 1 type: 'extracellular_electrode-4' devicestring: 'mydevice:ai27-28,45,88 The form of a device string is DEVICENAME:CT####, where DEVICENAME is the name of ndi.daq.system object, CT is the channel type identifier, and #### is a list of channels. The #### list of channels should be numbered from 1, and can use the symbols '-' to indicate a sequential run of channels, and ',' to separate channels. Use a semicolon to separate channel types (e.g., 'ai27-28;di1') For example: '1-5,10,17' corresponds to [1 2 3 4 5 10 17] '2,5,11-12,8 corresponds to [2 5 11 12 8] '' corresponds to [] % if the device doesn't have channels See also: ndi.daq.daqsystemstring/NDI_DEVICESTRING, NDI_DEVICESTRING/DEVICESTRING Superclasses none Properties Property Description devicename The name of the device channeltype The type of channels that are used by the device channellist An array of the channels that are referred to by the devicestring Methods Method Description daqsystemstring Create an NDI_DEVICESTRING object from a string or from a device name, channel type, and channel list devicestring Produce an ndi.daq.daqsystemstring character string ndi_daqsystemstring2channel Convert an ndi.daq.daqsystemstring to device, channel type, channel list Methods help daqsystemstring - Create an NDI_DEVICESTRING object from a string or from a device name, channel type, and channel list DEVSTR = ndi.daq.daqsystemstring(DEVICENAME, CHANNELTYPE, CHANNELLIST) or DEVSTR = ndi.daq.daqsystemstring(DEVSTRING) Creates a device string suitable for a ndi.epoch.epochprobemap_daqsystem from a DEVICENAME, a cell array of strings CHANNELTYPE (such as 'ai', 'di', 'ao'), and a CHANNELLIST. Inputs: In the first form: DEVICENAME should be the name of an ndi.daq.system CHANNEL_PREFIX should be the prefix for a particular type of channel. These channel type will vary from device to device. For example, a NDI_DAQSYSTEM_MULTICHANNELDAQ might use: 'ai' - analog input 'ao' - analog output (it is an 'o' like 'oh', not 0) 'di' - digital input 'do' - digital output CHANNELLIST should be an array of channel numbers, which must start from 1 (that is, the first channel is 1). In the second form: DEVSTRING should be in the form: 'devicename:ct#,#-#,#,#' where devicename is the name of the device, ct is a string that corresponds to the channel type, and the numbers and separators specify the channel numbers to be accessed. Examples: myndi_daqsystemstring1 = ndi_devicestring('mydevice','ai',[1:5 7 23]) myndi_daqsystemstring2 = ndi_devicestring('mydevice:ai1-5,7,23'); See also: ndi.daq.daqsystemstring Documentation for ndi.daq.daqsystemstring/daqsystemstring doc ndi.daq.daqsystemstring devicestring - Produce an ndi.daq.daqsystemstring character string DEVSTR = DEVICESTRING(SELF) Creates a device string suitable for a ndi.epoch.epochprobemap_daqsystem from an ndi.daq.daqsystemstring object. Inputs: SELF - an ndi.daq.daqsystemstring object Outputs: DEVSTR - the device string; e.g., 'mydevice:ai1-5,10,11-23' See also: ndi.daq.daqsystemstring ndi_daqsystemstring2channel - Convert an ndi.daq.daqsystemstring to device, channel type, channel list [DEVICENAME, CHANNELTYPE, CHANNELLIST] = NDI_DAQSYSTEMSTRING2CHANNEL(SELF, DEVSTR) Returns the device name (DEVICENAME), channel type (CHANNELTYPE), and channel list (CHANNEL) of a device string. Inputs: DEVSTR should be an NDI devicestring in the form: devicename:ct#,#-#,#,# Outputs: DEVICENAME is the string corresponding to the device name CHANNELTYPE is a cell array of strings with channel types CHANNELLIST is an array of the channel numbers Example: devstr = ndi.daq.daqsystemstring('mydevice:ai1-5,13,18'); [devicename, channeltype, channel] = ndi_daqsystemstring2channel(devstr); % devicename == 'mydevice', channelype = 'ai', channel == [1 2 3 4 5 13 18] See also: ndi.daq.daqsystemstring, NDI_DEVICESTRING/DEVICESTRING","title":"ndi.daq.daqsystemstring"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/daqsystemstring.m/#class-ndidaqdaqsystemstring","text":"NDI_DAQSYSTEMSTRING - a class for describing the device and channels that correspond to an NDI_EPOCHPROBEMAP_DAQSYSTEM ndi.daq.daqsystemstring A 'devicestring' is a part of an ndi.epoch.epochprobemap_daqsystem that indicates the channel types and channel numbers that correspond to a particular record. For example, one may specify that a 4-channel extracellular recording with name 'ctx' and reference 1 was recorded on a device called 'mydevice' via analog input on channels 27-28 and 45 and 88 with the following ndi.epoch.epochprobemap_daqsystem entry: name: 'ctx' reference: 1 type: 'extracellular_electrode-4' devicestring: 'mydevice:ai27-28,45,88 The form of a device string is DEVICENAME:CT####, where DEVICENAME is the name of ndi.daq.system object, CT is the channel type identifier, and #### is a list of channels. The #### list of channels should be numbered from 1, and can use the symbols '-' to indicate a sequential run of channels, and ',' to separate channels. Use a semicolon to separate channel types (e.g., 'ai27-28;di1') For example: '1-5,10,17' corresponds to [1 2 3 4 5 10 17] '2,5,11-12,8 corresponds to [2 5 11 12 8] '' corresponds to [] % if the device doesn't have channels See also: ndi.daq.daqsystemstring/NDI_DEVICESTRING, NDI_DEVICESTRING/DEVICESTRING","title":"CLASS ndi.daq.daqsystemstring"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/daqsystemstring.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/daqsystemstring.m/#properties","text":"Property Description devicename The name of the device channeltype The type of channels that are used by the device channellist An array of the channels that are referred to by the devicestring","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/daqsystemstring.m/#methods","text":"Method Description daqsystemstring Create an NDI_DEVICESTRING object from a string or from a device name, channel type, and channel list devicestring Produce an ndi.daq.daqsystemstring character string ndi_daqsystemstring2channel Convert an ndi.daq.daqsystemstring to device, channel type, channel list","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/daqsystemstring.m/#methods-help","text":"daqsystemstring - Create an NDI_DEVICESTRING object from a string or from a device name, channel type, and channel list DEVSTR = ndi.daq.daqsystemstring(DEVICENAME, CHANNELTYPE, CHANNELLIST) or DEVSTR = ndi.daq.daqsystemstring(DEVSTRING) Creates a device string suitable for a ndi.epoch.epochprobemap_daqsystem from a DEVICENAME, a cell array of strings CHANNELTYPE (such as 'ai', 'di', 'ao'), and a CHANNELLIST. Inputs: In the first form: DEVICENAME should be the name of an ndi.daq.system CHANNEL_PREFIX should be the prefix for a particular type of channel. These channel type will vary from device to device. For example, a NDI_DAQSYSTEM_MULTICHANNELDAQ might use: 'ai' - analog input 'ao' - analog output (it is an 'o' like 'oh', not 0) 'di' - digital input 'do' - digital output CHANNELLIST should be an array of channel numbers, which must start from 1 (that is, the first channel is 1). In the second form: DEVSTRING should be in the form: 'devicename:ct#,#-#,#,#' where devicename is the name of the device, ct is a string that corresponds to the channel type, and the numbers and separators specify the channel numbers to be accessed. Examples: myndi_daqsystemstring1 = ndi_devicestring('mydevice','ai',[1:5 7 23]) myndi_daqsystemstring2 = ndi_devicestring('mydevice:ai1-5,7,23'); See also: ndi.daq.daqsystemstring Documentation for ndi.daq.daqsystemstring/daqsystemstring doc ndi.daq.daqsystemstring devicestring - Produce an ndi.daq.daqsystemstring character string DEVSTR = DEVICESTRING(SELF) Creates a device string suitable for a ndi.epoch.epochprobemap_daqsystem from an ndi.daq.daqsystemstring object. Inputs: SELF - an ndi.daq.daqsystemstring object Outputs: DEVSTR - the device string; e.g., 'mydevice:ai1-5,10,11-23' See also: ndi.daq.daqsystemstring ndi_daqsystemstring2channel - Convert an ndi.daq.daqsystemstring to device, channel type, channel list [DEVICENAME, CHANNELTYPE, CHANNELLIST] = NDI_DAQSYSTEMSTRING2CHANNEL(SELF, DEVSTR) Returns the device name (DEVICENAME), channel type (CHANNELTYPE), and channel list (CHANNEL) of a device string. Inputs: DEVSTR should be an NDI devicestring in the form: devicename:ct#,#-#,#,# Outputs: DEVICENAME is the string corresponding to the device name CHANNELTYPE is a cell array of strings with channel types CHANNELLIST is an array of the channel numbers Example: devstr = ndi.daq.daqsystemstring('mydevice:ai1-5,13,18'); [devicename, channeltype, channel] = ndi_daqsystemstring2channel(devstr); % devicename == 'mydevice', channelype = 'ai', channel == [1 2 3 4 5 13 18] See also: ndi.daq.daqsystemstring, NDI_DEVICESTRING/DEVICESTRING","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/metadatareader.m/","text":"CLASS ndi.daq.metadatareader NDI.DAQ.METADATAREADER.BASE - a class for reading metadata related to data acquisition, such as stimulus parameter information Superclasses ndi.ido , did.ido , ndi.documentservice Properties Property Description tab_separated_file_parameter regular expression to search within epochfiles for a identifier Methods Method Description eq are 2 ndi.daq.metadatareader objects equal? get_ingested_document get an ingested document for a set of epochfiles id return the identifier of an DID.IDO object ingest_epochfiles create an ndi.document that describes the data that is read by an ndi.daq.metadatareader isvalid is a unique ID number valid? metadatareader Create a new multifunction DAQ object newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata Read metadata parameters readmetadata_ingested Read metadata parameters from a session database readmetadatafromfile Read metadata parameters from file searchquery create a search for this ndi.daq.reader object unique_id Generate a unique ID number for DID databases (Static method) Methods help eq - are 2 ndi.daq.metadatareader objects equal? TF = EQ(NDI_DAQMETADATAREADER_OBJ_A, NDI_DAQMETADATAREADER_OBJ_B) TF is 1 if the two objects are of the same class and have the same properties. TF is 0 otherwise. get_ingested_document - get an ingested document for a set of epochfiles D = GET_INGESTED_DOCUMENT(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES, S) Returns empty if there is no such document or the single document if there is such a document. id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.metadatareader/id is inherited from superclass did.ido ingest_epochfiles - create an ndi.document that describes the data that is read by an ndi.daq.metadatareader D = INGEST_EPOCHFILES(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES) Creates an ndi.document of type 'daqmetadatareader_epochdata_ingested' that contains the data for an ndi.daq.metadatareaderobject. The document D is not added to any database. isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.metadatareader.isvalid is inherited from superclass did.ido metadatareader - Create a new multifunction DAQ object D = ndi.daq.metadatareader() or D = ndi.daq.metadatareader(TSVFILE_REGEXPRESSION) Creates a new ndi.daq.metadatareader object. If TSVFILE_REGEXPRESSION is given, it indicates a regular expression to use to search EPOCHFILES for a tab-separated-value text file that describes stimulus parameters. Documentation for ndi.daq.metadatareader/metadatareader doc ndi.daq.metadatareader newdocument - create a new ndi.document for an ndi.daq.metadatareader object DOC = NEWDOCUMENT(ndi.daq.metadatareader OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. readmetadata - Read metadata parameters PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. If the property 'tab_separated_file_parameter' is not empty, then EPOCHFILES will be searched for files that match the regular expression in 'tab_separated_file_parameter'. The tab-separated-value file should have the form: STIMID<tab>PARAMETER1<tab>PARAMETER2<tab>PARAMETER3 (etc) <newline> 1<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> 2<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> (etc) For example, a stimulus file for an interoral cannula might be: stimid<tab>substance1<tab>substance1_concentration<newline> 1<tab>Sodium chloride<tab>30e-3<newline> 2<tab>Sodium chloride<tab>300e-3<newline> 3<tab>Quinine<tab>30e-6<newline> 4<tab>Quinine<tab>300e-6<newline> This function can be overridden in more specialized stimulus classes. readmetadata_ingested - Read metadata parameters from a session database PARAMETERS = READMETADATA_INGESTED(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES, S) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. S is the ndi.session object associated with the data. readmetadatafromfile - Read metadata parameters from file PARAMETERS = READMETADATAFROMFILE - read in metadata from the file that is identified PARAMETERS = READMETADATAFROMFILE(NDI_DAQMETADATAREADER_OBJ, FILE) Given a file that matches the metadata search criteria for an ndi.daq.metadatareader document, this function loads in the metadata. searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQMETADATAREADER_OBJ) Creates a search query for the ndi.daq.metadatareader object. unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.metadatareader.unique_id is inherited from superclass did.ido","title":"ndi.daq.metadatareader"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/metadatareader.m/#class-ndidaqmetadatareader","text":"NDI.DAQ.METADATAREADER.BASE - a class for reading metadata related to data acquisition, such as stimulus parameter information","title":"CLASS ndi.daq.metadatareader"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/metadatareader.m/#superclasses","text":"ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/metadatareader.m/#properties","text":"Property Description tab_separated_file_parameter regular expression to search within epochfiles for a identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/metadatareader.m/#methods","text":"Method Description eq are 2 ndi.daq.metadatareader objects equal? get_ingested_document get an ingested document for a set of epochfiles id return the identifier of an DID.IDO object ingest_epochfiles create an ndi.document that describes the data that is read by an ndi.daq.metadatareader isvalid is a unique ID number valid? metadatareader Create a new multifunction DAQ object newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata Read metadata parameters readmetadata_ingested Read metadata parameters from a session database readmetadatafromfile Read metadata parameters from file searchquery create a search for this ndi.daq.reader object unique_id Generate a unique ID number for DID databases (Static method)","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/metadatareader.m/#methods-help","text":"eq - are 2 ndi.daq.metadatareader objects equal? TF = EQ(NDI_DAQMETADATAREADER_OBJ_A, NDI_DAQMETADATAREADER_OBJ_B) TF is 1 if the two objects are of the same class and have the same properties. TF is 0 otherwise. get_ingested_document - get an ingested document for a set of epochfiles D = GET_INGESTED_DOCUMENT(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES, S) Returns empty if there is no such document or the single document if there is such a document. id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.metadatareader/id is inherited from superclass did.ido ingest_epochfiles - create an ndi.document that describes the data that is read by an ndi.daq.metadatareader D = INGEST_EPOCHFILES(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES) Creates an ndi.document of type 'daqmetadatareader_epochdata_ingested' that contains the data for an ndi.daq.metadatareaderobject. The document D is not added to any database. isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.metadatareader.isvalid is inherited from superclass did.ido metadatareader - Create a new multifunction DAQ object D = ndi.daq.metadatareader() or D = ndi.daq.metadatareader(TSVFILE_REGEXPRESSION) Creates a new ndi.daq.metadatareader object. If TSVFILE_REGEXPRESSION is given, it indicates a regular expression to use to search EPOCHFILES for a tab-separated-value text file that describes stimulus parameters. Documentation for ndi.daq.metadatareader/metadatareader doc ndi.daq.metadatareader newdocument - create a new ndi.document for an ndi.daq.metadatareader object DOC = NEWDOCUMENT(ndi.daq.metadatareader OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. readmetadata - Read metadata parameters PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. If the property 'tab_separated_file_parameter' is not empty, then EPOCHFILES will be searched for files that match the regular expression in 'tab_separated_file_parameter'. The tab-separated-value file should have the form: STIMID<tab>PARAMETER1<tab>PARAMETER2<tab>PARAMETER3 (etc) <newline> 1<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> 2<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> (etc) For example, a stimulus file for an interoral cannula might be: stimid<tab>substance1<tab>substance1_concentration<newline> 1<tab>Sodium chloride<tab>30e-3<newline> 2<tab>Sodium chloride<tab>300e-3<newline> 3<tab>Quinine<tab>30e-6<newline> 4<tab>Quinine<tab>300e-6<newline> This function can be overridden in more specialized stimulus classes. readmetadata_ingested - Read metadata parameters from a session database PARAMETERS = READMETADATA_INGESTED(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES, S) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. S is the ndi.session object associated with the data. readmetadatafromfile - Read metadata parameters from file PARAMETERS = READMETADATAFROMFILE - read in metadata from the file that is identified PARAMETERS = READMETADATAFROMFILE(NDI_DAQMETADATAREADER_OBJ, FILE) Given a file that matches the metadata search criteria for an ndi.daq.metadatareader document, this function loads in the metadata. searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQMETADATAREADER_OBJ) Creates a search query for the ndi.daq.metadatareader object. unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.metadatareader.unique_id is inherited from superclass did.ido","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/reader.m/","text":"CLASS ndi.daq.reader NDI_DAQREADER - A class for objects that read samples for NDI_DAQSYSTEM objects Superclasses ndi.ido , did.ido , ndi.documentservice Properties Property Description identifier Methods Method Description epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create a document that describes data read by an ndi.daq.reader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.reader object reader create a new ndi.daq.reader object searchquery create a search for this ndi.daq.reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies EPOCHPROBEMAP is compatible with device and data on disk Methods help epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). For the generic ndi.daq.reader, this returns a single clock type 'no_time'; See also: ndi.time.clocktype epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.reader/id is inherited from superclass did.ido ingest_epochfiles - create a document that describes data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles); isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.reader.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. reader - create a new ndi.daq.reader object OBJ = ndi.daq.reader() Creates an ndi.daq.reader. OBJ = ndi.daq.reader(NDI_SESSION_OBJ, NDI_DOCUMENT_OBJ) Creates an ndi.daq.reader from an NDI_DOCUMENT_OBJ. ndi.daq.reader has mostly abstract methods, it is made to be overridden. Documentation for ndi.daq.reader/reader doc ndi.daq.reader searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_DAQREADER_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.reader.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies EPOCHPROBEMAP is compatible with device and data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_OBJ, EPOCHPROBEMAP, NUMBER) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER. For the abstract class ndi.daq.reader, EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. See also: ndi.daq.reader, ndi.epoch.epochprobemap_daqsystem","title":"ndi.daq.reader"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/reader.m/#class-ndidaqreader","text":"NDI_DAQREADER - A class for objects that read samples for NDI_DAQSYSTEM objects","title":"CLASS ndi.daq.reader"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/reader.m/#superclasses","text":"ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/reader.m/#properties","text":"Property Description identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/reader.m/#methods","text":"Method Description epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create a document that describes data read by an ndi.daq.reader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.reader object reader create a new ndi.daq.reader object searchquery create a search for this ndi.daq.reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies EPOCHPROBEMAP is compatible with device and data on disk","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/reader.m/#methods-help","text":"epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). For the generic ndi.daq.reader, this returns a single clock type 'no_time'; See also: ndi.time.clocktype epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.reader/id is inherited from superclass did.ido ingest_epochfiles - create a document that describes data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles); isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.reader.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. reader - create a new ndi.daq.reader object OBJ = ndi.daq.reader() Creates an ndi.daq.reader. OBJ = ndi.daq.reader(NDI_SESSION_OBJ, NDI_DOCUMENT_OBJ) Creates an ndi.daq.reader from an NDI_DOCUMENT_OBJ. ndi.daq.reader has mostly abstract methods, it is made to be overridden. Documentation for ndi.daq.reader/reader doc ndi.daq.reader searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_DAQREADER_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.reader.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies EPOCHPROBEMAP is compatible with device and data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_OBJ, EPOCHPROBEMAP, NUMBER) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER. For the abstract class ndi.daq.reader, EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. See also: ndi.daq.reader, ndi.epoch.epochprobemap_daqsystem","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/system.m/","text":"CLASS ndi.daq.system ndi.daq.system - Create a new NDI_DEVICE class handle object D = ndi.daq.system(NAME, THEFILENAVIGATOR) Creates a new ndi.daq.system object with name and specific data tree object. This is an abstract class that is overridden by specific devices. Superclasses ndi.ido , did.ido , ndi.epoch.epochset.param , ndi.epoch.epochset , ndi.documentservice Properties Property Description name The name of the daq system filenavigator The ndi.file.navigator associated with this device daqreader The ndi.daq.reader associated with this device daqmetadatareader The ndi.daq.metadatareader associated with this device (cell array) identifier epochprobemap_class Methods Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build the epochtable for an ndi.daq.system object cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object deleteepoch Delete an epoch and an epoch record from a device epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid return the epoch id string for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq are two ndi.daq.system objects equal? getcache return the NDI_CACHE and key for ndi.daq.system getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs getepochprobemap Return the epoch record for an ndi.daq.system object getepochtag Get tag(s) from an epoch getmetadata get metadata for an epoch getprobes GETPROBES = Return all of the probes associated with an ndi.daq.system object ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the identifier of an DID.IDO object ingest ingest the data from an ndi.daq.system into the database issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? matchedepochtable compare a hash number from an epochtable to the current version ndi_daqsystem_gui_edit function for editing an ndi.daq.system object newdocument create a new document set for ndi.daq.system objects numepochs Number of epochs of ndi.epoch.epochset removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery search for an ndi.daq.system session return the ndi.session object associated with the ndi.daq.system object set_daqmetadatareader set the cell array of ndi.daq.metadatareader objects setepochprobemap Sets the epoch record of a particular epoch setepochtag Set tag(s) for an epoch setsession set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system) system create a new NDI_DEVICE object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk Methods help addepochtag - Add tag(s) for an epoch ADDEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will be added to any tags in the epoch EPOCHNUMBER. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. Help for ndi.daq.system/addepochtag is inherited from superclass ndi.epoch.epochset.param buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.daq.system/EPOCHNODES Help for ndi.daq.system/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - Build the epochtable for an ndi.daq.system object ET = BUILDEPOCHTABLE(NDI_DAQSYSTEM_OBJ) Returns the epoch table for NDI_DAQSYSTEM_OBJ cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.daq.system.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.daq.system/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.daq.system/cached_epochtable is inherited from superclass ndi.epoch.epochset deleteepoch - Delete an epoch and an epoch record from a device DELETEEPOCH(NDI_DAQSYSTEM_OBJ, NUMBER ... [REMOVEDATA]) Deletes the data and ndi.epoch.epochprobemap_daqsystem and epoch data for epoch NUMBER. If REMOVEDATA is present and is 1, the data and record are physically deleted. If REMOVEDATA is omitted or is 0, the data and record are renamed but not deleted from disk. In the abstract class, this command takes no action. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.daq.system/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQSYSTEM_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). For the generic ndi.daq.system, this returns a single clock type 'no_time'; See also: ndi.time.clocktype epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.daq.system/epochgraph is inherited from superclass ndi.epoch.epochset epochid - return the epoch id string for an epoch EID = EOPCHID(NDI_DAQSYSTEM_OBJ, EPOCH_NUMBER) Returns the EPOCHID for epoch with number EPOCH_NUMBER. In ndi.daq.system, this is determined by the associated ndi.file.navigator object. epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.daq.system/epochnodes is inherited from superclass ndi.epoch.epochset epochprobemapfilename - return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME(NDI_DAQSYSTEM_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHPROBEMAPFILENAME for the ndi.daq.system epoch EPOCH_NUMBER_OR_ID. If there is no epoch NUMBER, an error is generated. The file name is returned with a full path. epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME(NDI_EPOCHSET_OBJ) Returns the object name that is used when creating epoch nodes. If the class has a 'name' property, that property is used. Otherwise, 'unknown' is used. Help for ndi.daq.system/epochsetname is inherited from superclass ndi.epoch.epochset epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.daq.system/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.daq.system/epochtableentry is inherited from superclass ndi.epoch.epochset epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME(NDI_FILENAVIGATOR_OBJ, EPOCHNUMBER) In this base class, empty is returned because it is an abstract class. eq - are two ndi.daq.system objects equal? B = EQ(NDI_DAQSYSTEM_OBJ_A, NDI_DAQSYSTEM_OBJ_B) Returns 1 if the ndi.daq.system objects have the same name and class type. The objects do not have to be the same handle or have the same space in memory. Otherwise, returns 0. getcache - return the NDI_CACHE and key for ndi.daq.system [CACHE,KEY] = GETCACHE(NDI_DAQSYSTEM_OBJ) Returns the CACHE and KEY for the ndi.daq.system object. The CACHE is returned from the associated session. The KEY is the string 'daqsystem_' followed by the object's id. See also: ndi.daq.system, NDI_BASE getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.daq.system/getepocharray is inherited from superclass ndi.epoch.epochset getepochprobemap - Return the epoch record for an ndi.daq.system object EPOCHPROBEMAP = GETEPOCHPROBEMAP(NDI_DAQSYSTEM_OBJ, EPOCH) Inputs: NDI_EPOCHSET_PARAM_OBJ - the ndi.epoch.epochset.param object EPOCH - the epoch number or identifier Output: EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME The ndi.daq.system GETEPOCHPROBEMAP checks its DAQREADER object to see if it has a method called 'GETEPOCHPROBEMAP' that accepts the EPOCHPROBEMAP filename and the EPOCHFILES for that epoch. If it does have a method by that name, it is called and the output returned. If it does not, then the FILENAVIGATOR parameter's method is called. getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. If there are no files in EPOCHNUMBER then an error is returned. Help for ndi.daq.system/getepochtag is inherited from superclass ndi.epoch.epochset.param getmetadata - get metadata for an epoch METADATA = GETMETADATA(NDI_DAQSYSTEM_OBJ, EPOCH, CHANNEL) Returns the metadata (cell array of entries) for EPOCH for metadata channel CHANNEL. CHANNEL indicates the number of the ndi.daq.metadatareader to use to obtain the data. getprobes - GETPROBES = Return all of the probes associated with an ndi.daq.system object PROBES_STRUCT = GETPROBES(NDI_DAQSYSTEM_OBJ) Returns all probes associated with the ndi.daq.system object NDI_DEVICE_OBJ This function returns a structure with fields of all unique probes across all EPOCHPROBEMAP objects returned in ndi.daq.system/GETEPOCHPROBEMAP. The fields are 'name', 'reference', and 'type'. ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.daq.system.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.system/id is inherited from superclass did.ido ingest - ingest the data from an ndi.daq.system into the database [B,D] = INGEST(NDI_DAQSYSTEM_OBJ) Ingest any uningested epochs from an ndi.daq.system object into the database. B is 1 if the operation is successful. D is a cell array of new ndi.document objects that were created and added to the database. issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset objects, this returns 1. For some object types (ndi.probe.*, for example) this will return 0 so that the underlying ndi.daq.system epochs are added. Help for ndi.daq.system/issyncgraphroot is inherited from superclass ndi.epoch.epochset isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.system.isvalid is inherited from superclass did.ido matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.daq.system/matchedepochtable is inherited from superclass ndi.epoch.epochset ndi_daqsystem_gui_edit - function for editing an ndi.daq.system object OBJ = NDI_DAQSYSTEM_GUI_EDIT(NDI_DAQSYSTEM_OBJ) This function will bring up a graphical window to prompt the user to input parameters that edit the NDI_DAQSYSTEM_OBJ and return a new object. newdocument - create a new document set for ndi.daq.system objects NDI_DOCUMENT_OBJ_SET = NEWDOCUMENT(NDI_DAQSYSTEM_OBJ) Creates a set of documents that describe an ndi.daq.system. numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.daq.system/numepochs is inherited from superclass ndi.epoch.epochset removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG(NDI_EPOCH_PARAM_OBJ, EPOCHNUMBER, NAME) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. Any tags with name 'NAME' will be removed from the tags in the epoch EPOCHNUMBER. tags in the epoch directory. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. NAME can be a single string, or it can be a cell array of strings (which will result in the removal of multiple tags). Help for ndi.daq.system/removeepochtag is inherited from superclass ndi.epoch.epochset.param resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.daq.system/EPOCHTABLE Help for ndi.daq.system/resetepochtable is inherited from superclass ndi.epoch.epochset searchquery - search for an ndi.daq.system SQ = SEARCHQUERY(NDI_DAQSYSTEM_OBJ) Returns SQ, an ndi.query object that searches the database for the ndi.daq.system object session - return the ndi.session object associated with the ndi.daq.system object EXP = SESSION(NDI_DAQSYSTEM_OBJ) Return the ndi.session object associated with the ndi.daq.system of the ndi.daq.system object. set_daqmetadatareader - set the cell array of ndi.daq.metadatareader objects NDI_DAQSYSTEM_OBJ = SET_DAQMETADATAREADER(NDI_DAQSYSTEM_OBJ, NEWDAQMETADATAREADERS) Sets the 'daqmetadatareader' property of an ndi.daq.system object. NEWDAQMETADATAREADERS should be a cell array of objects that have ndi.daq.metadatareader as a superclass. setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, EPOCHPROBEMAP, NUMBER, [OVERWRITE]) Sets or replaces the ndi.epoch.epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER. If OVERWRITE is present and is 1, then any existing epoch record is overwritten. Otherwise, an error is given if there is an existing epoch record. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem Help for ndi.daq.system/setepochprobemap is inherited from superclass ndi.epoch.epochset.param setepochtag - Set tag(s) for an epoch SETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will replace any tags in the epoch directory. If there is no epoch EPOCHNUMBER, then an error is returned. Help for ndi.daq.system/setepochtag is inherited from superclass ndi.epoch.epochset.param setsession - set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system) NDI_DAQSYSTEM_OBJ = SETSESSION(NDI_DEVICE_OBJ, SESSION) Set the SESSION property of an ndi.daq.system object's ndi.daq.system object system - create a new NDI_DEVICE object OBJ = ndi.daq.system(NAME, THEFILENAVIGATOR, THEDAQREADER) Creates an ndi.daq.system with name NAME, NDI_FILENAVIGTOR THEFILENAVIGATOR and and ndi.daq.reader THEDAQREADER. An ndi.file.navigator is an interface object to the raw data files on disk that are read by the ndi.daq.reader object. ndi.daq.system is an abstract class, and a specific implementation must be called. Documentation for ndi.daq.system/system doc ndi.daq.system t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.daq.system/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.system.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQSYSTEM_OBJ, EPOCHPROBEMAP, EPOCH) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch EPOCH. For the abstract class ndi.daq.system, EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem","title":"ndi.daq.system"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/system.m/#class-ndidaqsystem","text":"ndi.daq.system - Create a new NDI_DEVICE class handle object D = ndi.daq.system(NAME, THEFILENAVIGATOR) Creates a new ndi.daq.system object with name and specific data tree object. This is an abstract class that is overridden by specific devices.","title":"CLASS ndi.daq.system"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/system.m/#superclasses","text":"ndi.ido , did.ido , ndi.epoch.epochset.param , ndi.epoch.epochset , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/system.m/#properties","text":"Property Description name The name of the daq system filenavigator The ndi.file.navigator associated with this device daqreader The ndi.daq.reader associated with this device daqmetadatareader The ndi.daq.metadatareader associated with this device (cell array) identifier epochprobemap_class","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/system.m/#methods","text":"Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build the epochtable for an ndi.daq.system object cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object deleteepoch Delete an epoch and an epoch record from a device epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid return the epoch id string for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq are two ndi.daq.system objects equal? getcache return the NDI_CACHE and key for ndi.daq.system getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs getepochprobemap Return the epoch record for an ndi.daq.system object getepochtag Get tag(s) from an epoch getmetadata get metadata for an epoch getprobes GETPROBES = Return all of the probes associated with an ndi.daq.system object ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the identifier of an DID.IDO object ingest ingest the data from an ndi.daq.system into the database issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? matchedepochtable compare a hash number from an epochtable to the current version ndi_daqsystem_gui_edit function for editing an ndi.daq.system object newdocument create a new document set for ndi.daq.system objects numepochs Number of epochs of ndi.epoch.epochset removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery search for an ndi.daq.system session return the ndi.session object associated with the ndi.daq.system object set_daqmetadatareader set the cell array of ndi.daq.metadatareader objects setepochprobemap Sets the epoch record of a particular epoch setepochtag Set tag(s) for an epoch setsession set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system) system create a new NDI_DEVICE object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/system.m/#methods-help","text":"addepochtag - Add tag(s) for an epoch ADDEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will be added to any tags in the epoch EPOCHNUMBER. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. Help for ndi.daq.system/addepochtag is inherited from superclass ndi.epoch.epochset.param buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.daq.system/EPOCHNODES Help for ndi.daq.system/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - Build the epochtable for an ndi.daq.system object ET = BUILDEPOCHTABLE(NDI_DAQSYSTEM_OBJ) Returns the epoch table for NDI_DAQSYSTEM_OBJ cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.daq.system.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.daq.system/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.daq.system/cached_epochtable is inherited from superclass ndi.epoch.epochset deleteepoch - Delete an epoch and an epoch record from a device DELETEEPOCH(NDI_DAQSYSTEM_OBJ, NUMBER ... [REMOVEDATA]) Deletes the data and ndi.epoch.epochprobemap_daqsystem and epoch data for epoch NUMBER. If REMOVEDATA is present and is 1, the data and record are physically deleted. If REMOVEDATA is omitted or is 0, the data and record are renamed but not deleted from disk. In the abstract class, this command takes no action. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.daq.system/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQSYSTEM_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). For the generic ndi.daq.system, this returns a single clock type 'no_time'; See also: ndi.time.clocktype epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.daq.system/epochgraph is inherited from superclass ndi.epoch.epochset epochid - return the epoch id string for an epoch EID = EOPCHID(NDI_DAQSYSTEM_OBJ, EPOCH_NUMBER) Returns the EPOCHID for epoch with number EPOCH_NUMBER. In ndi.daq.system, this is determined by the associated ndi.file.navigator object. epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.daq.system/epochnodes is inherited from superclass ndi.epoch.epochset epochprobemapfilename - return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME(NDI_DAQSYSTEM_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHPROBEMAPFILENAME for the ndi.daq.system epoch EPOCH_NUMBER_OR_ID. If there is no epoch NUMBER, an error is generated. The file name is returned with a full path. epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME(NDI_EPOCHSET_OBJ) Returns the object name that is used when creating epoch nodes. If the class has a 'name' property, that property is used. Otherwise, 'unknown' is used. Help for ndi.daq.system/epochsetname is inherited from superclass ndi.epoch.epochset epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.daq.system/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.daq.system/epochtableentry is inherited from superclass ndi.epoch.epochset epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME(NDI_FILENAVIGATOR_OBJ, EPOCHNUMBER) In this base class, empty is returned because it is an abstract class. eq - are two ndi.daq.system objects equal? B = EQ(NDI_DAQSYSTEM_OBJ_A, NDI_DAQSYSTEM_OBJ_B) Returns 1 if the ndi.daq.system objects have the same name and class type. The objects do not have to be the same handle or have the same space in memory. Otherwise, returns 0. getcache - return the NDI_CACHE and key for ndi.daq.system [CACHE,KEY] = GETCACHE(NDI_DAQSYSTEM_OBJ) Returns the CACHE and KEY for the ndi.daq.system object. The CACHE is returned from the associated session. The KEY is the string 'daqsystem_' followed by the object's id. See also: ndi.daq.system, NDI_BASE getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.daq.system/getepocharray is inherited from superclass ndi.epoch.epochset getepochprobemap - Return the epoch record for an ndi.daq.system object EPOCHPROBEMAP = GETEPOCHPROBEMAP(NDI_DAQSYSTEM_OBJ, EPOCH) Inputs: NDI_EPOCHSET_PARAM_OBJ - the ndi.epoch.epochset.param object EPOCH - the epoch number or identifier Output: EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME The ndi.daq.system GETEPOCHPROBEMAP checks its DAQREADER object to see if it has a method called 'GETEPOCHPROBEMAP' that accepts the EPOCHPROBEMAP filename and the EPOCHFILES for that epoch. If it does have a method by that name, it is called and the output returned. If it does not, then the FILENAVIGATOR parameter's method is called. getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. If there are no files in EPOCHNUMBER then an error is returned. Help for ndi.daq.system/getepochtag is inherited from superclass ndi.epoch.epochset.param getmetadata - get metadata for an epoch METADATA = GETMETADATA(NDI_DAQSYSTEM_OBJ, EPOCH, CHANNEL) Returns the metadata (cell array of entries) for EPOCH for metadata channel CHANNEL. CHANNEL indicates the number of the ndi.daq.metadatareader to use to obtain the data. getprobes - GETPROBES = Return all of the probes associated with an ndi.daq.system object PROBES_STRUCT = GETPROBES(NDI_DAQSYSTEM_OBJ) Returns all probes associated with the ndi.daq.system object NDI_DEVICE_OBJ This function returns a structure with fields of all unique probes across all EPOCHPROBEMAP objects returned in ndi.daq.system/GETEPOCHPROBEMAP. The fields are 'name', 'reference', and 'type'. ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.daq.system.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.system/id is inherited from superclass did.ido ingest - ingest the data from an ndi.daq.system into the database [B,D] = INGEST(NDI_DAQSYSTEM_OBJ) Ingest any uningested epochs from an ndi.daq.system object into the database. B is 1 if the operation is successful. D is a cell array of new ndi.document objects that were created and added to the database. issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset objects, this returns 1. For some object types (ndi.probe.*, for example) this will return 0 so that the underlying ndi.daq.system epochs are added. Help for ndi.daq.system/issyncgraphroot is inherited from superclass ndi.epoch.epochset isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.system.isvalid is inherited from superclass did.ido matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.daq.system/matchedepochtable is inherited from superclass ndi.epoch.epochset ndi_daqsystem_gui_edit - function for editing an ndi.daq.system object OBJ = NDI_DAQSYSTEM_GUI_EDIT(NDI_DAQSYSTEM_OBJ) This function will bring up a graphical window to prompt the user to input parameters that edit the NDI_DAQSYSTEM_OBJ and return a new object. newdocument - create a new document set for ndi.daq.system objects NDI_DOCUMENT_OBJ_SET = NEWDOCUMENT(NDI_DAQSYSTEM_OBJ) Creates a set of documents that describe an ndi.daq.system. numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.daq.system/numepochs is inherited from superclass ndi.epoch.epochset removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG(NDI_EPOCH_PARAM_OBJ, EPOCHNUMBER, NAME) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. Any tags with name 'NAME' will be removed from the tags in the epoch EPOCHNUMBER. tags in the epoch directory. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. NAME can be a single string, or it can be a cell array of strings (which will result in the removal of multiple tags). Help for ndi.daq.system/removeepochtag is inherited from superclass ndi.epoch.epochset.param resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.daq.system/EPOCHTABLE Help for ndi.daq.system/resetepochtable is inherited from superclass ndi.epoch.epochset searchquery - search for an ndi.daq.system SQ = SEARCHQUERY(NDI_DAQSYSTEM_OBJ) Returns SQ, an ndi.query object that searches the database for the ndi.daq.system object session - return the ndi.session object associated with the ndi.daq.system object EXP = SESSION(NDI_DAQSYSTEM_OBJ) Return the ndi.session object associated with the ndi.daq.system of the ndi.daq.system object. set_daqmetadatareader - set the cell array of ndi.daq.metadatareader objects NDI_DAQSYSTEM_OBJ = SET_DAQMETADATAREADER(NDI_DAQSYSTEM_OBJ, NEWDAQMETADATAREADERS) Sets the 'daqmetadatareader' property of an ndi.daq.system object. NEWDAQMETADATAREADERS should be a cell array of objects that have ndi.daq.metadatareader as a superclass. setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, EPOCHPROBEMAP, NUMBER, [OVERWRITE]) Sets or replaces the ndi.epoch.epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER. If OVERWRITE is present and is 1, then any existing epoch record is overwritten. Otherwise, an error is given if there is an existing epoch record. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem Help for ndi.daq.system/setepochprobemap is inherited from superclass ndi.epoch.epochset.param setepochtag - Set tag(s) for an epoch SETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will replace any tags in the epoch directory. If there is no epoch EPOCHNUMBER, then an error is returned. Help for ndi.daq.system/setepochtag is inherited from superclass ndi.epoch.epochset.param setsession - set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system) NDI_DAQSYSTEM_OBJ = SETSESSION(NDI_DEVICE_OBJ, SESSION) Set the SESSION property of an ndi.daq.system object's ndi.daq.system object system - create a new NDI_DEVICE object OBJ = ndi.daq.system(NAME, THEFILENAVIGATOR, THEDAQREADER) Creates an ndi.daq.system with name NAME, NDI_FILENAVIGTOR THEFILENAVIGATOR and and ndi.daq.reader THEDAQREADER. An ndi.file.navigator is an interface object to the raw data files on disk that are read by the ndi.daq.reader object. ndi.daq.system is an abstract class, and a specific implementation must be called. Documentation for ndi.daq.system/system doc ndi.daq.system t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.daq.system/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.system.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQSYSTEM_OBJ, EPOCHPROBEMAP, EPOCH) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch EPOCH. For the abstract class ndi.daq.system, EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NewStimStims.m/","text":"CLASS ndi.daq.metadatareader.NewStimStims NDI_DAQMETADATAREADER_NEWSTIMSTIMS - a class for reading NewStim metadata Superclasses ndi.daq.metadatareader , ndi.ido , did.ido , ndi.documentservice Properties Property Description tab_separated_file_parameter identifier Methods Method Description NewStimStims Create a new multifunction DAQ object eq are 2 ndi.daq.metadatareader objects equal? get_ingested_document get an ingested document for a set of epochfiles id return the identifier of an DID.IDO object ingest_epochfiles create an ndi.document that describes the data that is read by an ndi.daq.metadatareader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata Read metadata parameters readmetadata_ingested Read metadata parameters from a session database readmetadatafromfile read in metadata from the file that is identified searchquery create a search for this ndi.daq.reader object unique_id Generate a unique ID number for DID databases (Static method) Methods help NewStimStims - Create a new multifunction DAQ object D = ndi.daq.metadatareader.NewStimStims() or D = ndi.daq.metadatareader(TSVFILE_REGEXPRESSION) Creates a new ndi.daq.metadatareader object. If TSVFILE_REGEXPRESSION is given, it indicates a regular expression to use to search EPOCHFILES for a tab-separated-value text file that describes stimulus parameters. Documentation for ndi.daq.metadatareader.NewStimStims/NewStimStims doc ndi.daq.metadatareader.NewStimStims eq - are 2 ndi.daq.metadatareader objects equal? TF = EQ(NDI_DAQMETADATAREADER_OBJ_A, NDI_DAQMETADATAREADER_OBJ_B) TF is 1 if the two objects are of the same class and have the same properties. TF is 0 otherwise. Help for ndi.daq.metadatareader.NewStimStims/eq is inherited from superclass ndi.daq.metadatareader get_ingested_document - get an ingested document for a set of epochfiles D = GET_INGESTED_DOCUMENT(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES, S) Returns empty if there is no such document or the single document if there is such a document. Help for ndi.daq.metadatareader.NewStimStims/get_ingested_document is inherited from superclass ndi.daq.metadatareader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.metadatareader.NewStimStims/id is inherited from superclass did.ido ingest_epochfiles - create an ndi.document that describes the data that is read by an ndi.daq.metadatareader D = INGEST_EPOCHFILES(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES) Creates an ndi.document of type 'daqmetadatareader_epochdata_ingested' that contains the data for an ndi.daq.metadatareaderobject. The document D is not added to any database. Help for ndi.daq.metadatareader.NewStimStims/ingest_epochfiles is inherited from superclass ndi.daq.metadatareader isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.metadatareader.NewStimStims.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.metadatareader object DOC = NEWDOCUMENT(ndi.daq.metadatareader OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.daq.metadatareader.NewStimStims/newdocument is inherited from superclass ndi.daq.metadatareader readmetadata - Read metadata parameters PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. If the property 'tab_separated_file_parameter' is not empty, then EPOCHFILES will be searched for files that match the regular expression in 'tab_separated_file_parameter'. The tab-separated-value file should have the form: STIMID<tab>PARAMETER1<tab>PARAMETER2<tab>PARAMETER3 (etc) <newline> 1<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> 2<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> (etc) For example, a stimulus file for an interoral cannula might be: stimid<tab>substance1<tab>substance1_concentration<newline> 1<tab>Sodium chloride<tab>30e-3<newline> 2<tab>Sodium chloride<tab>300e-3<newline> 3<tab>Quinine<tab>30e-6<newline> 4<tab>Quinine<tab>300e-6<newline> This function can be overridden in more specialized stimulus classes. Help for ndi.daq.metadatareader.NewStimStims/readmetadata is inherited from superclass ndi.daq.metadatareader readmetadata_ingested - Read metadata parameters from a session database PARAMETERS = READMETADATA_INGESTED(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES, S) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. S is the ndi.session object associated with the data. Help for ndi.daq.metadatareader.NewStimStims/readmetadata_ingested is inherited from superclass ndi.daq.metadatareader readmetadatafromfile - read in metadata from the file that is identified PARAMETERS = READMETADATAFROMFILE(NDI_DAQMETADATAREADER_NEWSTIMSTIMS_OBJ, FILE) Given a file that matches the metadata search criteria for an ndi.daq.metadatareader.NewStimStims document, this function loads in the metadata. searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQMETADATAREADER_OBJ) Creates a search query for the ndi.daq.metadatareader object. Help for ndi.daq.metadatareader.NewStimStims/searchquery is inherited from superclass ndi.daq.metadatareader unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.metadatareader.NewStimStims.unique_id is inherited from superclass did.ido","title":"ndi.daq.metadatareader.NewStimStims"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NewStimStims.m/#class-ndidaqmetadatareadernewstimstims","text":"NDI_DAQMETADATAREADER_NEWSTIMSTIMS - a class for reading NewStim metadata","title":"CLASS ndi.daq.metadatareader.NewStimStims"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NewStimStims.m/#superclasses","text":"ndi.daq.metadatareader , ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NewStimStims.m/#properties","text":"Property Description tab_separated_file_parameter identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NewStimStims.m/#methods","text":"Method Description NewStimStims Create a new multifunction DAQ object eq are 2 ndi.daq.metadatareader objects equal? get_ingested_document get an ingested document for a set of epochfiles id return the identifier of an DID.IDO object ingest_epochfiles create an ndi.document that describes the data that is read by an ndi.daq.metadatareader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata Read metadata parameters readmetadata_ingested Read metadata parameters from a session database readmetadatafromfile read in metadata from the file that is identified searchquery create a search for this ndi.daq.reader object unique_id Generate a unique ID number for DID databases (Static method)","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NewStimStims.m/#methods-help","text":"NewStimStims - Create a new multifunction DAQ object D = ndi.daq.metadatareader.NewStimStims() or D = ndi.daq.metadatareader(TSVFILE_REGEXPRESSION) Creates a new ndi.daq.metadatareader object. If TSVFILE_REGEXPRESSION is given, it indicates a regular expression to use to search EPOCHFILES for a tab-separated-value text file that describes stimulus parameters. Documentation for ndi.daq.metadatareader.NewStimStims/NewStimStims doc ndi.daq.metadatareader.NewStimStims eq - are 2 ndi.daq.metadatareader objects equal? TF = EQ(NDI_DAQMETADATAREADER_OBJ_A, NDI_DAQMETADATAREADER_OBJ_B) TF is 1 if the two objects are of the same class and have the same properties. TF is 0 otherwise. Help for ndi.daq.metadatareader.NewStimStims/eq is inherited from superclass ndi.daq.metadatareader get_ingested_document - get an ingested document for a set of epochfiles D = GET_INGESTED_DOCUMENT(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES, S) Returns empty if there is no such document or the single document if there is such a document. Help for ndi.daq.metadatareader.NewStimStims/get_ingested_document is inherited from superclass ndi.daq.metadatareader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.metadatareader.NewStimStims/id is inherited from superclass did.ido ingest_epochfiles - create an ndi.document that describes the data that is read by an ndi.daq.metadatareader D = INGEST_EPOCHFILES(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES) Creates an ndi.document of type 'daqmetadatareader_epochdata_ingested' that contains the data for an ndi.daq.metadatareaderobject. The document D is not added to any database. Help for ndi.daq.metadatareader.NewStimStims/ingest_epochfiles is inherited from superclass ndi.daq.metadatareader isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.metadatareader.NewStimStims.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.metadatareader object DOC = NEWDOCUMENT(ndi.daq.metadatareader OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.daq.metadatareader.NewStimStims/newdocument is inherited from superclass ndi.daq.metadatareader readmetadata - Read metadata parameters PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. If the property 'tab_separated_file_parameter' is not empty, then EPOCHFILES will be searched for files that match the regular expression in 'tab_separated_file_parameter'. The tab-separated-value file should have the form: STIMID<tab>PARAMETER1<tab>PARAMETER2<tab>PARAMETER3 (etc) <newline> 1<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> 2<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> (etc) For example, a stimulus file for an interoral cannula might be: stimid<tab>substance1<tab>substance1_concentration<newline> 1<tab>Sodium chloride<tab>30e-3<newline> 2<tab>Sodium chloride<tab>300e-3<newline> 3<tab>Quinine<tab>30e-6<newline> 4<tab>Quinine<tab>300e-6<newline> This function can be overridden in more specialized stimulus classes. Help for ndi.daq.metadatareader.NewStimStims/readmetadata is inherited from superclass ndi.daq.metadatareader readmetadata_ingested - Read metadata parameters from a session database PARAMETERS = READMETADATA_INGESTED(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES, S) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. S is the ndi.session object associated with the data. Help for ndi.daq.metadatareader.NewStimStims/readmetadata_ingested is inherited from superclass ndi.daq.metadatareader readmetadatafromfile - read in metadata from the file that is identified PARAMETERS = READMETADATAFROMFILE(NDI_DAQMETADATAREADER_NEWSTIMSTIMS_OBJ, FILE) Given a file that matches the metadata search criteria for an ndi.daq.metadatareader.NewStimStims document, this function loads in the metadata. searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQMETADATAREADER_OBJ) Creates a search query for the ndi.daq.metadatareader object. Help for ndi.daq.metadatareader.NewStimStims/searchquery is inherited from superclass ndi.daq.metadatareader unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.metadatareader.NewStimStims.unique_id is inherited from superclass did.ido","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NielsenLabStims.m/","text":"CLASS ndi.daq.metadatareader.NielsenLabStims NDI_DAQMETADATAREADER_NIELSENLABSTIMS - a class for reading NielsenLabStim metadata Superclasses ndi.daq.metadatareader , ndi.ido , did.ido , ndi.documentservice Properties Property Description tab_separated_file_parameter identifier Methods Method Description NielsenLabStims Create a new multifunction DAQ object eq are 2 ndi.daq.metadatareader objects equal? get_ingested_document get an ingested document for a set of epochfiles id return the identifier of an DID.IDO object ingest_epochfiles create an ndi.document that describes the data that is read by an ndi.daq.metadatareader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata Read metadata parameters readmetadata_ingested Read metadata parameters from a session database readmetadatafromfile read in metadata from the file that is identified searchquery create a search for this ndi.daq.reader object unique_id Generate a unique ID number for DID databases (Static method) Methods help NielsenLabStims - Create a new multifunction DAQ object D = ndi.daq.metadatareader.NielsenLabStims() or D = ndi.daq.metadatareader(TSVFILE_REGEXPRESSION) Creates a new ndi.daq.metadatareader object. If TSVFILE_REGEXPRESSION is given, it indicates a regular expression to use to search EPOCHFILES for a tab-separated-value text file that describes stimulus parameters. Documentation for ndi.daq.metadatareader.NielsenLabStims/NielsenLabStims doc ndi.daq.metadatareader.NielsenLabStims eq - are 2 ndi.daq.metadatareader objects equal? TF = EQ(NDI_DAQMETADATAREADER_OBJ_A, NDI_DAQMETADATAREADER_OBJ_B) TF is 1 if the two objects are of the same class and have the same properties. TF is 0 otherwise. Help for ndi.daq.metadatareader.NielsenLabStims/eq is inherited from superclass ndi.daq.metadatareader get_ingested_document - get an ingested document for a set of epochfiles D = GET_INGESTED_DOCUMENT(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES, S) Returns empty if there is no such document or the single document if there is such a document. Help for ndi.daq.metadatareader.NielsenLabStims/get_ingested_document is inherited from superclass ndi.daq.metadatareader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.metadatareader.NielsenLabStims/id is inherited from superclass did.ido ingest_epochfiles - create an ndi.document that describes the data that is read by an ndi.daq.metadatareader D = INGEST_EPOCHFILES(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES) Creates an ndi.document of type 'daqmetadatareader_epochdata_ingested' that contains the data for an ndi.daq.metadatareaderobject. The document D is not added to any database. Help for ndi.daq.metadatareader.NielsenLabStims/ingest_epochfiles is inherited from superclass ndi.daq.metadatareader isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.metadatareader.NielsenLabStims.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.metadatareader object DOC = NEWDOCUMENT(ndi.daq.metadatareader OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.daq.metadatareader.NielsenLabStims/newdocument is inherited from superclass ndi.daq.metadatareader readmetadata - Read metadata parameters PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. If the property 'tab_separated_file_parameter' is not empty, then EPOCHFILES will be searched for files that match the regular expression in 'tab_separated_file_parameter'. The tab-separated-value file should have the form: STIMID<tab>PARAMETER1<tab>PARAMETER2<tab>PARAMETER3 (etc) <newline> 1<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> 2<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> (etc) For example, a stimulus file for an interoral cannula might be: stimid<tab>substance1<tab>substance1_concentration<newline> 1<tab>Sodium chloride<tab>30e-3<newline> 2<tab>Sodium chloride<tab>300e-3<newline> 3<tab>Quinine<tab>30e-6<newline> 4<tab>Quinine<tab>300e-6<newline> This function can be overridden in more specialized stimulus classes. Help for ndi.daq.metadatareader.NielsenLabStims/readmetadata is inherited from superclass ndi.daq.metadatareader readmetadata_ingested - Read metadata parameters from a session database PARAMETERS = READMETADATA_INGESTED(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES, S) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. S is the ndi.session object associated with the data. Help for ndi.daq.metadatareader.NielsenLabStims/readmetadata_ingested is inherited from superclass ndi.daq.metadatareader readmetadatafromfile - read in metadata from the file that is identified PARAMETERS = READMETADATAFROMFILE(NDI_DAQMETADATAREADER_NIELSENLABSTIMS_OBJ, FILE) Given a file that matches the metadata search criteria for an ndi.daq.metadatareader.NielsenLabStims document, this function loads in the metadata. searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQMETADATAREADER_OBJ) Creates a search query for the ndi.daq.metadatareader object. Help for ndi.daq.metadatareader.NielsenLabStims/searchquery is inherited from superclass ndi.daq.metadatareader unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.metadatareader.NielsenLabStims.unique_id is inherited from superclass did.ido","title":"ndi.daq.metadatareader.NielsenLabStims"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NielsenLabStims.m/#class-ndidaqmetadatareadernielsenlabstims","text":"NDI_DAQMETADATAREADER_NIELSENLABSTIMS - a class for reading NielsenLabStim metadata","title":"CLASS ndi.daq.metadatareader.NielsenLabStims"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NielsenLabStims.m/#superclasses","text":"ndi.daq.metadatareader , ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NielsenLabStims.m/#properties","text":"Property Description tab_separated_file_parameter identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NielsenLabStims.m/#methods","text":"Method Description NielsenLabStims Create a new multifunction DAQ object eq are 2 ndi.daq.metadatareader objects equal? get_ingested_document get an ingested document for a set of epochfiles id return the identifier of an DID.IDO object ingest_epochfiles create an ndi.document that describes the data that is read by an ndi.daq.metadatareader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata Read metadata parameters readmetadata_ingested Read metadata parameters from a session database readmetadatafromfile read in metadata from the file that is identified searchquery create a search for this ndi.daq.reader object unique_id Generate a unique ID number for DID databases (Static method)","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NielsenLabStims.m/#methods-help","text":"NielsenLabStims - Create a new multifunction DAQ object D = ndi.daq.metadatareader.NielsenLabStims() or D = ndi.daq.metadatareader(TSVFILE_REGEXPRESSION) Creates a new ndi.daq.metadatareader object. If TSVFILE_REGEXPRESSION is given, it indicates a regular expression to use to search EPOCHFILES for a tab-separated-value text file that describes stimulus parameters. Documentation for ndi.daq.metadatareader.NielsenLabStims/NielsenLabStims doc ndi.daq.metadatareader.NielsenLabStims eq - are 2 ndi.daq.metadatareader objects equal? TF = EQ(NDI_DAQMETADATAREADER_OBJ_A, NDI_DAQMETADATAREADER_OBJ_B) TF is 1 if the two objects are of the same class and have the same properties. TF is 0 otherwise. Help for ndi.daq.metadatareader.NielsenLabStims/eq is inherited from superclass ndi.daq.metadatareader get_ingested_document - get an ingested document for a set of epochfiles D = GET_INGESTED_DOCUMENT(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES, S) Returns empty if there is no such document or the single document if there is such a document. Help for ndi.daq.metadatareader.NielsenLabStims/get_ingested_document is inherited from superclass ndi.daq.metadatareader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.metadatareader.NielsenLabStims/id is inherited from superclass did.ido ingest_epochfiles - create an ndi.document that describes the data that is read by an ndi.daq.metadatareader D = INGEST_EPOCHFILES(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES) Creates an ndi.document of type 'daqmetadatareader_epochdata_ingested' that contains the data for an ndi.daq.metadatareaderobject. The document D is not added to any database. Help for ndi.daq.metadatareader.NielsenLabStims/ingest_epochfiles is inherited from superclass ndi.daq.metadatareader isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.metadatareader.NielsenLabStims.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.metadatareader object DOC = NEWDOCUMENT(ndi.daq.metadatareader OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.daq.metadatareader.NielsenLabStims/newdocument is inherited from superclass ndi.daq.metadatareader readmetadata - Read metadata parameters PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. If the property 'tab_separated_file_parameter' is not empty, then EPOCHFILES will be searched for files that match the regular expression in 'tab_separated_file_parameter'. The tab-separated-value file should have the form: STIMID<tab>PARAMETER1<tab>PARAMETER2<tab>PARAMETER3 (etc) <newline> 1<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> 2<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> (etc) For example, a stimulus file for an interoral cannula might be: stimid<tab>substance1<tab>substance1_concentration<newline> 1<tab>Sodium chloride<tab>30e-3<newline> 2<tab>Sodium chloride<tab>300e-3<newline> 3<tab>Quinine<tab>30e-6<newline> 4<tab>Quinine<tab>300e-6<newline> This function can be overridden in more specialized stimulus classes. Help for ndi.daq.metadatareader.NielsenLabStims/readmetadata is inherited from superclass ndi.daq.metadatareader readmetadata_ingested - Read metadata parameters from a session database PARAMETERS = READMETADATA_INGESTED(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES, S) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. S is the ndi.session object associated with the data. Help for ndi.daq.metadatareader.NielsenLabStims/readmetadata_ingested is inherited from superclass ndi.daq.metadatareader readmetadatafromfile - read in metadata from the file that is identified PARAMETERS = READMETADATAFROMFILE(NDI_DAQMETADATAREADER_NIELSENLABSTIMS_OBJ, FILE) Given a file that matches the metadata search criteria for an ndi.daq.metadatareader.NielsenLabStims document, this function loads in the metadata. searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQMETADATAREADER_OBJ) Creates a search query for the ndi.daq.metadatareader object. Help for ndi.daq.metadatareader.NielsenLabStims/searchquery is inherited from superclass ndi.daq.metadatareader unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.metadatareader.NielsenLabStims.unique_id is inherited from superclass did.ido","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/mfdaq.m/","text":"CLASS ndi.daq.reader.mfdaq NDI.DAQ.READER.MFDAQ - Multifunction DAQ reader class The ndi.daq.reader.mfdaq object class. This object allows one to address multifunction data acquisition systems that sample a variety of data types potentially simultaneously. The channel types that are supported are the following: Channel type (string): | Description ------------------------------------------------------------- 'analog_in' or 'ai' | Analog input 'analog_out' or 'ao' | Analog output 'digital_in' or 'di' | Digital input 'digital_out' or 'do' | Digital output 'time' or 't' | Time 'auxiliary_in','aux' or 'ax'| Auxiliary channels 'event', or 'e' | Event trigger (returns times of event trigger activation) 'mark', or 'mk' | Mark channel (contains int16 value at specified times) 'text', or 'tx' | Text mark channel (contains character string at specified time) See also: ndi.daq.reader.mfdaq/ndi.daq.reader.mfdaq Superclasses ndi.daq.reader , ndi.ido , did.ido , ndi.documentservice Properties Property Description identifier Methods Method Description channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal getchannelsepoch List the channels that were sampled for this epoch getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader isvalid is a unique ID number valid? mfdaq Create a new multifunction DAQ object newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies EPOCHPROBEMAP is compatible with device and data on disk Methods help channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ? [TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types() Returns a cell array of possible channel types in TYPES, and a corresponding short abbreviation in the cell array ABBREV. ---------------------------------------------------------------------------- | CHANNEL TYPE | ABBREV | Description | |--------------------|---------|-------------------------------------------| | 'analog_in' | 'ai' | Analog input | | 'analog_out' | 'ao' | Analog output | | 'auxiliary_in' | 'ax' | Auxiliary channels | | 'digital_in' | 'di' | Digital input | | 'digital_out' | 'do' | Digital output | | 'event' | 'e' | Event trigger (returns times, codes of | | | | event trigger activation) | | 'marker' | 'mk' | Mark channel (contains value at specified | | | | times) | | 'text' | 'tx' | Text channel (contains text at specified | | | | times) | 'time' | 't' | Time samples | |--------------------|---------|-------------------------------------------| channelsepoch2timechannelinfo - look up time channel info TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER) Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time channel number that corresponds to the channel specified by CHANNELTYPE and CHANNELNUMBER. epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). For the generic ndi.daq.reader.mfdaq, this returns a single clock type 'dev_local'time'; See also: ndi.time.clocktype epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq/epochclock_ingested is inherited from superclass ndi.daq.reader eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. Help for ndi.daq.reader.mfdaq/eq is inherited from superclass ndi.daq.reader getchannelsepoch - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. getchannelsepoch_ingested - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. Help for ndi.daq.reader.mfdaq/getingesteddocument is inherited from superclass ndi.daq.reader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.reader.mfdaq/id is inherited from superclass did.ido ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id); isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.reader.mfdaq.isvalid is inherited from superclass did.ido mfdaq - Create a new multifunction DAQ object D = ndi.daq.reader.mfdaq() Creates a new ndi.daq.reader.mfdaq object. This is an abstract class that is overridden by specific devices. Documentation for ndi.daq.reader.mfdaq/mfdaq doc ndi.daq.reader.mfdaq newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq/newdocument is inherited from superclass ndi.daq.reader readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, CHANNEL, ... EPOCHFILES, S0, S1) CHANNELTYPE is the type of channel to read. It can either be a single string or a cell array with one entry per channel. CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. readchannels_epochsamples_ingested - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, S0, S1, S) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(MYDEV, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc). It must be a string (not a cell array of strings). CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the epoch number or epochID T is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to epoch N at time 0 as the reference. samplerate - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq/searchquery is inherited from superclass ndi.daq.reader standardize_channel_types - return standard channel type names STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES) Given a cell array of strings of CHANNELTYPES, replace any abbreviations with with the standard channel type name in ndi.daq.reader.mfdaq.channel_types() t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES) Return the beginning (t0) and end (t1) times of the epoch defined by EPOCHFILES. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.daq.reader.mfdaq/t0_t1_ingested is inherited from superclass ndi.daq.reader underlying_datatype - get the underlying data type for a channel in an epoch [DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) Return the underlying datatype for the requested channel. DATATYPE is a type that is suitable for passing to FREAD or FWRITE (e.g., 'float64', 'uint16', etc. See help fread.) P is a ,atrix of polynomials that converts between the double data that is returned by READCHANNEL. RETURNED_DATA = (RAW_DATA+P(i,1))*P(i,2)+(RAW_DATA+P(i,1))*P(i,3) ... There is one row of P for each entry of CHANNEL. DATASIZE is the sample size in bits. CHANNELTYPE must be a string. It is assumed that that CHANNELTYPE applies to every entry of CHANNEL. unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.reader.mfdaq.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies EPOCHPROBEMAP is compatible with device and data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_OBJ, EPOCHPROBEMAP, NUMBER) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER. For the abstract class ndi.daq.reader, EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. See also: ndi.daq.reader.mfdaq, ndi.epoch.epochprobemap_daqsystem Help for ndi.daq.reader.mfdaq/verifyepochprobemap is inherited from superclass ndi.daq.reader","title":"ndi.daq.reader.mfdaq"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/mfdaq.m/#class-ndidaqreadermfdaq","text":"NDI.DAQ.READER.MFDAQ - Multifunction DAQ reader class The ndi.daq.reader.mfdaq object class. This object allows one to address multifunction data acquisition systems that sample a variety of data types potentially simultaneously. The channel types that are supported are the following: Channel type (string): | Description ------------------------------------------------------------- 'analog_in' or 'ai' | Analog input 'analog_out' or 'ao' | Analog output 'digital_in' or 'di' | Digital input 'digital_out' or 'do' | Digital output 'time' or 't' | Time 'auxiliary_in','aux' or 'ax'| Auxiliary channels 'event', or 'e' | Event trigger (returns times of event trigger activation) 'mark', or 'mk' | Mark channel (contains int16 value at specified times) 'text', or 'tx' | Text mark channel (contains character string at specified time) See also: ndi.daq.reader.mfdaq/ndi.daq.reader.mfdaq","title":"CLASS ndi.daq.reader.mfdaq"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/mfdaq.m/#superclasses","text":"ndi.daq.reader , ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/mfdaq.m/#properties","text":"Property Description identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/mfdaq.m/#methods","text":"Method Description channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal getchannelsepoch List the channels that were sampled for this epoch getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader isvalid is a unique ID number valid? mfdaq Create a new multifunction DAQ object newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies EPOCHPROBEMAP is compatible with device and data on disk","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/mfdaq.m/#methods-help","text":"channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ? [TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types() Returns a cell array of possible channel types in TYPES, and a corresponding short abbreviation in the cell array ABBREV. ---------------------------------------------------------------------------- | CHANNEL TYPE | ABBREV | Description | |--------------------|---------|-------------------------------------------| | 'analog_in' | 'ai' | Analog input | | 'analog_out' | 'ao' | Analog output | | 'auxiliary_in' | 'ax' | Auxiliary channels | | 'digital_in' | 'di' | Digital input | | 'digital_out' | 'do' | Digital output | | 'event' | 'e' | Event trigger (returns times, codes of | | | | event trigger activation) | | 'marker' | 'mk' | Mark channel (contains value at specified | | | | times) | | 'text' | 'tx' | Text channel (contains text at specified | | | | times) | 'time' | 't' | Time samples | |--------------------|---------|-------------------------------------------| channelsepoch2timechannelinfo - look up time channel info TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER) Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time channel number that corresponds to the channel specified by CHANNELTYPE and CHANNELNUMBER. epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). For the generic ndi.daq.reader.mfdaq, this returns a single clock type 'dev_local'time'; See also: ndi.time.clocktype epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq/epochclock_ingested is inherited from superclass ndi.daq.reader eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. Help for ndi.daq.reader.mfdaq/eq is inherited from superclass ndi.daq.reader getchannelsepoch - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. getchannelsepoch_ingested - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. Help for ndi.daq.reader.mfdaq/getingesteddocument is inherited from superclass ndi.daq.reader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.reader.mfdaq/id is inherited from superclass did.ido ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id); isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.reader.mfdaq.isvalid is inherited from superclass did.ido mfdaq - Create a new multifunction DAQ object D = ndi.daq.reader.mfdaq() Creates a new ndi.daq.reader.mfdaq object. This is an abstract class that is overridden by specific devices. Documentation for ndi.daq.reader.mfdaq/mfdaq doc ndi.daq.reader.mfdaq newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq/newdocument is inherited from superclass ndi.daq.reader readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, CHANNEL, ... EPOCHFILES, S0, S1) CHANNELTYPE is the type of channel to read. It can either be a single string or a cell array with one entry per channel. CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. readchannels_epochsamples_ingested - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, S0, S1, S) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(MYDEV, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc). It must be a string (not a cell array of strings). CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the epoch number or epochID T is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to epoch N at time 0 as the reference. samplerate - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq/searchquery is inherited from superclass ndi.daq.reader standardize_channel_types - return standard channel type names STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES) Given a cell array of strings of CHANNELTYPES, replace any abbreviations with with the standard channel type name in ndi.daq.reader.mfdaq.channel_types() t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES) Return the beginning (t0) and end (t1) times of the epoch defined by EPOCHFILES. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.daq.reader.mfdaq/t0_t1_ingested is inherited from superclass ndi.daq.reader underlying_datatype - get the underlying data type for a channel in an epoch [DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) Return the underlying datatype for the requested channel. DATATYPE is a type that is suitable for passing to FREAD or FWRITE (e.g., 'float64', 'uint16', etc. See help fread.) P is a ,atrix of polynomials that converts between the double data that is returned by READCHANNEL. RETURNED_DATA = (RAW_DATA+P(i,1))*P(i,2)+(RAW_DATA+P(i,1))*P(i,3) ... There is one row of P for each entry of CHANNEL. DATASIZE is the sample size in bits. CHANNELTYPE must be a string. It is assumed that that CHANNELTYPE applies to every entry of CHANNEL. unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.reader.mfdaq.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies EPOCHPROBEMAP is compatible with device and data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_OBJ, EPOCHPROBEMAP, NUMBER) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER. For the abstract class ndi.daq.reader, EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. See also: ndi.daq.reader.mfdaq, ndi.epoch.epochprobemap_daqsystem Help for ndi.daq.reader.mfdaq/verifyepochprobemap is inherited from superclass ndi.daq.reader","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/blackrock.m/","text":"CLASS ndi.daq.reader.mfdaq.blackrock NDI_DAQREADER_MFDAQ_BLACKROCK - Device driver for Blackrock Microsystems NSx/NEV file format This class reads data from Blackrock Microsystems NSx/NEV file format. Blackrock Microsystems: https://www.blackrockmicro.com/ Superclasses ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , did.ido , ndi.documentservice Properties Property Description identifier Methods Method Description blackrock Create a new NDI_DEVICE_MFDAQ_BLACKROCK object channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles return the file name that corresponds to the NEV/NSV files getchannelsepoch List the channels that are available on this Blackrock device for a given set of files getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.reader object read_blackrock_headers read information from Blackrock Micro header files readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk Methods help blackrock - Create a new NDI_DEVICE_MFDAQ_BLACKROCK object D = ndi.daq.reader.mfdaq.blackrock() Creates a new ndi.daq.reader.mfdaq.blackrock object Documentation for ndi.daq.reader.mfdaq.blackrock/blackrock doc ndi.daq.reader.mfdaq.blackrock channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ? [TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types() Returns a cell array of possible channel types in TYPES, and a corresponding short abbreviation in the cell array ABBREV. ---------------------------------------------------------------------------- | CHANNEL TYPE | ABBREV | Description | |--------------------|---------|-------------------------------------------| | 'analog_in' | 'ai' | Analog input | | 'analog_out' | 'ao' | Analog output | | 'auxiliary_in' | 'ax' | Auxiliary channels | | 'digital_in' | 'di' | Digital input | | 'digital_out' | 'do' | Digital output | | 'event' | 'e' | Event trigger (returns times, codes of | | | | event trigger activation) | | 'marker' | 'mk' | Mark channel (contains value at specified | | | | times) | | 'text' | 'tx' | Text channel (contains text at specified | | | | times) | 'time' | 't' | Time samples | |--------------------|---------|-------------------------------------------| Help for ndi.daq.reader.mfdaq.blackrock.channel_types is inherited from superclass ndi.daq.reader.mfdaq channelsepoch2timechannelinfo - look up time channel info TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER) Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time channel number that corresponds to the channel specified by CHANNELTYPE and CHANNELNUMBER. Help for ndi.daq.reader.mfdaq.blackrock.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). For the generic ndi.daq.reader.mfdaq, this returns a single clock type 'dev_local'time'; See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq.blackrock/epochclock is inherited from superclass ndi.daq.reader.mfdaq epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq.blackrock/epochclock_ingested is inherited from superclass ndi.daq.reader eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. Help for ndi.daq.reader.mfdaq.blackrock/eq is inherited from superclass ndi.daq.reader filenamefromepochfiles - return the file name that corresponds to the NEV/NSV files [NEVFILES, NSVFILES] = FILENAMEFROMEPOCHFILES(FILENAME_ARRAY) Examines the list of filenames in FILENAME_ARRAY (cell array of full path file strings) and determines which ones have the extension '.nev' (neuro event file) and which have the extension '.ns#', where # is a number, or the source data files. getchannelsepoch - List the channels that are available on this Blackrock device for a given set of files CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ, EPOCHFILES) Returns the channel list of acquired channels in this session CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') getchannelsepoch_ingested - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. Help for ndi.daq.reader.mfdaq.blackrock/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. Help for ndi.daq.reader.mfdaq.blackrock/getingesteddocument is inherited from superclass ndi.daq.reader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.reader.mfdaq.blackrock/id is inherited from superclass did.ido ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id); Help for ndi.daq.reader.mfdaq.blackrock/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.reader.mfdaq.blackrock.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq.blackrock/newdocument is inherited from superclass ndi.daq.reader read_blackrock_headers - read information from Blackrock Micro header files [NS_H, NEV_H, HEADERS] = READ_BLACKROCK_HEADERS(NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ, EPOCHFILES, [CHANNELTYPE, CHANNELS]) readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1) CHANNELTYPE is the type of channel to read (cell array of strings, one per channel) CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is set of epoch files DATA is the channel data (each column contains data from an individual channel) readchannels_epochsamples_ingested - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, S0, S1, S) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. Help for ndi.daq.reader.mfdaq.blackrock/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.blackrock/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.blackrock/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(MYDEV, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc). It must be a string (not a cell array of strings). CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the epoch number or epochID T is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to epoch N at time 0 as the reference. Help for ndi.daq.reader.mfdaq.blackrock/readevents_epochsamples_native is inherited from superclass ndi.daq.reader.mfdaq samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. SR is the list of sample rate from specified channels samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.daq.reader.mfdaq.blackrock/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq.blackrock/searchquery is inherited from superclass ndi.daq.reader standardize_channel_types - return standard channel type names STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES) Given a cell array of strings of CHANNELTYPES, replace any abbreviations with with the standard channel type name in ndi.daq.reader.mfdaq.channel_types() Help for ndi.daq.reader.mfdaq.blackrock.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.daq.reader.mfdaq.blackrock/t0_t1_ingested is inherited from superclass ndi.daq.reader underlying_datatype - get the underlying data type for a channel in an epoch [DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) Return the underlying datatype for the requested channel. DATATYPE is a type that is suitable for passing to FREAD or FWRITE (e.g., 'float64', 'uint16', etc. See help fread.) P is a ,atrix of polynomials that converts between the double data that is returned by READCHANNEL. RETURNED_DATA = (RAW_DATA+P(i,1))*P(i,2)+(RAW_DATA+P(i,1))*P(i,3) ... There is one row of P for each entry of CHANNEL. DATASIZE is the sample size in bits. CHANNELTYPE must be a string. It is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.daq.reader.mfdaq.blackrock/underlying_datatype is inherited from superclass ndi.daq.reader.mfdaq unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.reader.mfdaq.blackrock.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ, EPOCHPROBEMAP, EPOCHFILES) Examines the NDI_EPOCHPROBEMAP_DAQREADER EPOCHPROBEMAP and determines if it is valid for the given device with epoch files EPOCHFILES. See also: ndi.daq.reader, NDI_EPOCHPROBEMAP_DAQREADER","title":"ndi.daq.reader.mfdaq.blackrock"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/blackrock.m/#class-ndidaqreadermfdaqblackrock","text":"NDI_DAQREADER_MFDAQ_BLACKROCK - Device driver for Blackrock Microsystems NSx/NEV file format This class reads data from Blackrock Microsystems NSx/NEV file format. Blackrock Microsystems: https://www.blackrockmicro.com/","title":"CLASS ndi.daq.reader.mfdaq.blackrock"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/blackrock.m/#superclasses","text":"ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/blackrock.m/#properties","text":"Property Description identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/blackrock.m/#methods","text":"Method Description blackrock Create a new NDI_DEVICE_MFDAQ_BLACKROCK object channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles return the file name that corresponds to the NEV/NSV files getchannelsepoch List the channels that are available on this Blackrock device for a given set of files getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.reader object read_blackrock_headers read information from Blackrock Micro header files readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/blackrock.m/#methods-help","text":"blackrock - Create a new NDI_DEVICE_MFDAQ_BLACKROCK object D = ndi.daq.reader.mfdaq.blackrock() Creates a new ndi.daq.reader.mfdaq.blackrock object Documentation for ndi.daq.reader.mfdaq.blackrock/blackrock doc ndi.daq.reader.mfdaq.blackrock channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ? [TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types() Returns a cell array of possible channel types in TYPES, and a corresponding short abbreviation in the cell array ABBREV. ---------------------------------------------------------------------------- | CHANNEL TYPE | ABBREV | Description | |--------------------|---------|-------------------------------------------| | 'analog_in' | 'ai' | Analog input | | 'analog_out' | 'ao' | Analog output | | 'auxiliary_in' | 'ax' | Auxiliary channels | | 'digital_in' | 'di' | Digital input | | 'digital_out' | 'do' | Digital output | | 'event' | 'e' | Event trigger (returns times, codes of | | | | event trigger activation) | | 'marker' | 'mk' | Mark channel (contains value at specified | | | | times) | | 'text' | 'tx' | Text channel (contains text at specified | | | | times) | 'time' | 't' | Time samples | |--------------------|---------|-------------------------------------------| Help for ndi.daq.reader.mfdaq.blackrock.channel_types is inherited from superclass ndi.daq.reader.mfdaq channelsepoch2timechannelinfo - look up time channel info TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER) Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time channel number that corresponds to the channel specified by CHANNELTYPE and CHANNELNUMBER. Help for ndi.daq.reader.mfdaq.blackrock.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). For the generic ndi.daq.reader.mfdaq, this returns a single clock type 'dev_local'time'; See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq.blackrock/epochclock is inherited from superclass ndi.daq.reader.mfdaq epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq.blackrock/epochclock_ingested is inherited from superclass ndi.daq.reader eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. Help for ndi.daq.reader.mfdaq.blackrock/eq is inherited from superclass ndi.daq.reader filenamefromepochfiles - return the file name that corresponds to the NEV/NSV files [NEVFILES, NSVFILES] = FILENAMEFROMEPOCHFILES(FILENAME_ARRAY) Examines the list of filenames in FILENAME_ARRAY (cell array of full path file strings) and determines which ones have the extension '.nev' (neuro event file) and which have the extension '.ns#', where # is a number, or the source data files. getchannelsepoch - List the channels that are available on this Blackrock device for a given set of files CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ, EPOCHFILES) Returns the channel list of acquired channels in this session CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') getchannelsepoch_ingested - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. Help for ndi.daq.reader.mfdaq.blackrock/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. Help for ndi.daq.reader.mfdaq.blackrock/getingesteddocument is inherited from superclass ndi.daq.reader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.reader.mfdaq.blackrock/id is inherited from superclass did.ido ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id); Help for ndi.daq.reader.mfdaq.blackrock/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.reader.mfdaq.blackrock.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq.blackrock/newdocument is inherited from superclass ndi.daq.reader read_blackrock_headers - read information from Blackrock Micro header files [NS_H, NEV_H, HEADERS] = READ_BLACKROCK_HEADERS(NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ, EPOCHFILES, [CHANNELTYPE, CHANNELS]) readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1) CHANNELTYPE is the type of channel to read (cell array of strings, one per channel) CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is set of epoch files DATA is the channel data (each column contains data from an individual channel) readchannels_epochsamples_ingested - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, S0, S1, S) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. Help for ndi.daq.reader.mfdaq.blackrock/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.blackrock/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.blackrock/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(MYDEV, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc). It must be a string (not a cell array of strings). CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the epoch number or epochID T is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to epoch N at time 0 as the reference. Help for ndi.daq.reader.mfdaq.blackrock/readevents_epochsamples_native is inherited from superclass ndi.daq.reader.mfdaq samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. SR is the list of sample rate from specified channels samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.daq.reader.mfdaq.blackrock/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq.blackrock/searchquery is inherited from superclass ndi.daq.reader standardize_channel_types - return standard channel type names STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES) Given a cell array of strings of CHANNELTYPES, replace any abbreviations with with the standard channel type name in ndi.daq.reader.mfdaq.channel_types() Help for ndi.daq.reader.mfdaq.blackrock.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.daq.reader.mfdaq.blackrock/t0_t1_ingested is inherited from superclass ndi.daq.reader underlying_datatype - get the underlying data type for a channel in an epoch [DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) Return the underlying datatype for the requested channel. DATATYPE is a type that is suitable for passing to FREAD or FWRITE (e.g., 'float64', 'uint16', etc. See help fread.) P is a ,atrix of polynomials that converts between the double data that is returned by READCHANNEL. RETURNED_DATA = (RAW_DATA+P(i,1))*P(i,2)+(RAW_DATA+P(i,1))*P(i,3) ... There is one row of P for each entry of CHANNEL. DATASIZE is the sample size in bits. CHANNELTYPE must be a string. It is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.daq.reader.mfdaq.blackrock/underlying_datatype is inherited from superclass ndi.daq.reader.mfdaq unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.reader.mfdaq.blackrock.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ, EPOCHPROBEMAP, EPOCHFILES) Examines the NDI_EPOCHPROBEMAP_DAQREADER EPOCHPROBEMAP and determines if it is valid for the given device with epoch files EPOCHFILES. See also: ndi.daq.reader, NDI_EPOCHPROBEMAP_DAQREADER","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/cedspike2.m/","text":"CLASS ndi.daq.reader.mfdaq.cedspike2 NDI.DAQ.READER.MFDAQ.CEDSPIKE2 - Device driver for CED Spike2 This class reads data from CED Spike2 .SMR or .SON file formats. It depends on sigTOOL by Malcolm Lidierth (http://sigtool.sourceforge.net). sigTOOL is also included in the https://github.com/VH-Lab/vhlab-thirdparty-matlab bundle and can be installed with instructions at http://code.vhlab.org. Superclasses ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , did.ido , ndi.documentservice Properties Property Description identifier Methods Method Description cedspike2 Create a new NDI_DEVICE_MFDAQ_CEDSPIKE2 object cedspike2filelist2smrfile Identify the .SMR file out of a file list cedspike2headertype2mfdaqchanneltype Convert between Intan headers and the ndi.daq.system.mfdaq channel types channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal getchannelsepoch List the channels that are available on this device getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk Methods help cedspike2 - Create a new NDI_DEVICE_MFDAQ_CEDSPIKE2 object D = NDI.DAQ.READER.MFDAQ.CEDSPIKE2(NAME,THEFILENAVIGATOR) Creates a new NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2 object with name NAME and associated filenavigator THEFILENAVIGATOR. Documentation for ndi.daq.reader.mfdaq.cedspike2/cedspike2 doc ndi.daq.reader.mfdaq.cedspike2 cedspike2filelist2smrfile - Identify the .SMR file out of a file list FILENAME = CEDSPIKE2FILELIST2SMRFILE(FILELIST) Given a cell array of strings FILELIST with full-path file names, this function identifies the first file with an extension '.smr' (case insensitive) and returns the result in FILENAME (full-path file name). cedspike2headertype2mfdaqchanneltype - Convert between Intan headers and the ndi.daq.system.mfdaq channel types CHANNELTYPE = CEDSPIKE2HEADERTYPE2MFDAQCHANNELTYPE(CEDSPIKE2CHANNELTYPE) Given an Intan header file type, returns the standard ndi.daq.system.mfdaq channel type channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ? [TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types() Returns a cell array of possible channel types in TYPES, and a corresponding short abbreviation in the cell array ABBREV. ---------------------------------------------------------------------------- | CHANNEL TYPE | ABBREV | Description | |--------------------|---------|-------------------------------------------| | 'analog_in' | 'ai' | Analog input | | 'analog_out' | 'ao' | Analog output | | 'auxiliary_in' | 'ax' | Auxiliary channels | | 'digital_in' | 'di' | Digital input | | 'digital_out' | 'do' | Digital output | | 'event' | 'e' | Event trigger (returns times, codes of | | | | event trigger activation) | | 'marker' | 'mk' | Mark channel (contains value at specified | | | | times) | | 'text' | 'tx' | Text channel (contains text at specified | | | | times) | 'time' | 't' | Time samples | |--------------------|---------|-------------------------------------------| Help for ndi.daq.reader.mfdaq.cedspike2.channel_types is inherited from superclass ndi.daq.reader.mfdaq channelsepoch2timechannelinfo - look up time channel info TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER) Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time channel number that corresponds to the channel specified by CHANNELTYPE and CHANNELNUMBER. Help for ndi.daq.reader.mfdaq.cedspike2.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). For the generic ndi.daq.reader.mfdaq, this returns a single clock type 'dev_local'time'; See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq.cedspike2/epochclock is inherited from superclass ndi.daq.reader.mfdaq epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq.cedspike2/epochclock_ingested is inherited from superclass ndi.daq.reader eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. Help for ndi.daq.reader.mfdaq.cedspike2/eq is inherited from superclass ndi.daq.reader getchannelsepoch - List the channels that are available on this device CHANNELS = GETCHANNELSEPOCH(THEDEV, EPOCHFILES) Returns the channel list of acquired channels in this session CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') 'time_channel' | The channel number that has the time information for that channel getchannelsepoch_ingested - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. Help for ndi.daq.reader.mfdaq.cedspike2/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. Help for ndi.daq.reader.mfdaq.cedspike2/getingesteddocument is inherited from superclass ndi.daq.reader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.reader.mfdaq.cedspike2/id is inherited from superclass did.ido ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id); Help for ndi.daq.reader.mfdaq.cedspike2/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.reader.mfdaq.cedspike2.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq.cedspike2/newdocument is inherited from superclass ndi.daq.reader readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES, S0, S1) CHANNELTYPE is the type of channel to read (cell array of strings, one per channel, or single string for all channels) CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the cell array of full path filenames for this epoch DATA is the channel data (each column contains data from an individual channel) readchannels_epochsamples_ingested - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, S0, S1, S) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. Help for ndi.daq.reader.mfdaq.cedspike2/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.cedspike2/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.cedspike2/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_native - read events or markers of specified channels for a specified epoch DATA = READEVENTS_EPOCHSAMPLES_NATIVE(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc) CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the set of epoch files DATA is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. disp('reading here') samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is the list of sample rate from specified channels samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.daq.reader.mfdaq.cedspike2/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq.cedspike2/searchquery is inherited from superclass ndi.daq.reader standardize_channel_types - return standard channel type names STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES) Given a cell array of strings of CHANNELTYPES, replace any abbreviations with with the standard channel type name in ndi.daq.reader.mfdaq.channel_types() Help for ndi.daq.reader.mfdaq.cedspike2.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ, EPOCHFILES) Return the beginning (t0) and end (t1) times of the EPOCHFILES that define this epoch in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. See also: ndi.time.clocktype, EPOCHCLOCK t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.daq.reader.mfdaq.cedspike2/t0_t1_ingested is inherited from superclass ndi.daq.reader underlying_datatype - get the underlying data type for a channel in an epoch [DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) Return the underlying datatype for the requested channel. DATATYPE is a type that is suitable for passing to FREAD or FWRITE (e.g., 'float64', 'uint16', etc. See help fread.) P is a polynomial that converts between the double data that is returned by READCHANNEL. RETURNED_DATA = (RAW_DATA+P(1))*P(2)+(RAW_DATA+P(1))*P(3) ... DATASIZE is the sample size in bits. CHANNELTYPE must be a string. It is assumed that that CHANNELTYPE applies to every entry of CHANNEL. unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.reader.mfdaq.cedspike2.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ, EPOCHPROBEMAP, EPOCHFILES) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER. For the abstract class ndi.daq.system, EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem","title":"ndi.daq.reader.mfdaq.cedspike2"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/cedspike2.m/#class-ndidaqreadermfdaqcedspike2","text":"NDI.DAQ.READER.MFDAQ.CEDSPIKE2 - Device driver for CED Spike2 This class reads data from CED Spike2 .SMR or .SON file formats. It depends on sigTOOL by Malcolm Lidierth (http://sigtool.sourceforge.net). sigTOOL is also included in the https://github.com/VH-Lab/vhlab-thirdparty-matlab bundle and can be installed with instructions at http://code.vhlab.org.","title":"CLASS ndi.daq.reader.mfdaq.cedspike2"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/cedspike2.m/#superclasses","text":"ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/cedspike2.m/#properties","text":"Property Description identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/cedspike2.m/#methods","text":"Method Description cedspike2 Create a new NDI_DEVICE_MFDAQ_CEDSPIKE2 object cedspike2filelist2smrfile Identify the .SMR file out of a file list cedspike2headertype2mfdaqchanneltype Convert between Intan headers and the ndi.daq.system.mfdaq channel types channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal getchannelsepoch List the channels that are available on this device getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/cedspike2.m/#methods-help","text":"cedspike2 - Create a new NDI_DEVICE_MFDAQ_CEDSPIKE2 object D = NDI.DAQ.READER.MFDAQ.CEDSPIKE2(NAME,THEFILENAVIGATOR) Creates a new NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2 object with name NAME and associated filenavigator THEFILENAVIGATOR. Documentation for ndi.daq.reader.mfdaq.cedspike2/cedspike2 doc ndi.daq.reader.mfdaq.cedspike2 cedspike2filelist2smrfile - Identify the .SMR file out of a file list FILENAME = CEDSPIKE2FILELIST2SMRFILE(FILELIST) Given a cell array of strings FILELIST with full-path file names, this function identifies the first file with an extension '.smr' (case insensitive) and returns the result in FILENAME (full-path file name). cedspike2headertype2mfdaqchanneltype - Convert between Intan headers and the ndi.daq.system.mfdaq channel types CHANNELTYPE = CEDSPIKE2HEADERTYPE2MFDAQCHANNELTYPE(CEDSPIKE2CHANNELTYPE) Given an Intan header file type, returns the standard ndi.daq.system.mfdaq channel type channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ? [TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types() Returns a cell array of possible channel types in TYPES, and a corresponding short abbreviation in the cell array ABBREV. ---------------------------------------------------------------------------- | CHANNEL TYPE | ABBREV | Description | |--------------------|---------|-------------------------------------------| | 'analog_in' | 'ai' | Analog input | | 'analog_out' | 'ao' | Analog output | | 'auxiliary_in' | 'ax' | Auxiliary channels | | 'digital_in' | 'di' | Digital input | | 'digital_out' | 'do' | Digital output | | 'event' | 'e' | Event trigger (returns times, codes of | | | | event trigger activation) | | 'marker' | 'mk' | Mark channel (contains value at specified | | | | times) | | 'text' | 'tx' | Text channel (contains text at specified | | | | times) | 'time' | 't' | Time samples | |--------------------|---------|-------------------------------------------| Help for ndi.daq.reader.mfdaq.cedspike2.channel_types is inherited from superclass ndi.daq.reader.mfdaq channelsepoch2timechannelinfo - look up time channel info TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER) Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time channel number that corresponds to the channel specified by CHANNELTYPE and CHANNELNUMBER. Help for ndi.daq.reader.mfdaq.cedspike2.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). For the generic ndi.daq.reader.mfdaq, this returns a single clock type 'dev_local'time'; See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq.cedspike2/epochclock is inherited from superclass ndi.daq.reader.mfdaq epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq.cedspike2/epochclock_ingested is inherited from superclass ndi.daq.reader eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. Help for ndi.daq.reader.mfdaq.cedspike2/eq is inherited from superclass ndi.daq.reader getchannelsepoch - List the channels that are available on this device CHANNELS = GETCHANNELSEPOCH(THEDEV, EPOCHFILES) Returns the channel list of acquired channels in this session CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') 'time_channel' | The channel number that has the time information for that channel getchannelsepoch_ingested - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. Help for ndi.daq.reader.mfdaq.cedspike2/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. Help for ndi.daq.reader.mfdaq.cedspike2/getingesteddocument is inherited from superclass ndi.daq.reader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.reader.mfdaq.cedspike2/id is inherited from superclass did.ido ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id); Help for ndi.daq.reader.mfdaq.cedspike2/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.reader.mfdaq.cedspike2.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq.cedspike2/newdocument is inherited from superclass ndi.daq.reader readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES, S0, S1) CHANNELTYPE is the type of channel to read (cell array of strings, one per channel, or single string for all channels) CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the cell array of full path filenames for this epoch DATA is the channel data (each column contains data from an individual channel) readchannels_epochsamples_ingested - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, S0, S1, S) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. Help for ndi.daq.reader.mfdaq.cedspike2/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.cedspike2/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.cedspike2/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_native - read events or markers of specified channels for a specified epoch DATA = READEVENTS_EPOCHSAMPLES_NATIVE(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc) CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the set of epoch files DATA is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. disp('reading here') samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is the list of sample rate from specified channels samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.daq.reader.mfdaq.cedspike2/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq.cedspike2/searchquery is inherited from superclass ndi.daq.reader standardize_channel_types - return standard channel type names STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES) Given a cell array of strings of CHANNELTYPES, replace any abbreviations with with the standard channel type name in ndi.daq.reader.mfdaq.channel_types() Help for ndi.daq.reader.mfdaq.cedspike2.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ, EPOCHFILES) Return the beginning (t0) and end (t1) times of the EPOCHFILES that define this epoch in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. See also: ndi.time.clocktype, EPOCHCLOCK t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.daq.reader.mfdaq.cedspike2/t0_t1_ingested is inherited from superclass ndi.daq.reader underlying_datatype - get the underlying data type for a channel in an epoch [DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) Return the underlying datatype for the requested channel. DATATYPE is a type that is suitable for passing to FREAD or FWRITE (e.g., 'float64', 'uint16', etc. See help fread.) P is a polynomial that converts between the double data that is returned by READCHANNEL. RETURNED_DATA = (RAW_DATA+P(1))*P(2)+(RAW_DATA+P(1))*P(3) ... DATASIZE is the sample size in bits. CHANNELTYPE must be a string. It is assumed that that CHANNELTYPE applies to every entry of CHANNEL. unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.reader.mfdaq.cedspike2.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ, EPOCHPROBEMAP, EPOCHFILES) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER. For the abstract class ndi.daq.system, EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/intan.m/","text":"CLASS ndi.daq.reader.mfdaq.intan NDI_DAQREADER_MFDAQ_INTAN - Device driver for Intan Technologies RHD file forma This class reads data from Intan Technologies .RHD file format. Intan Technologies: http://intantech.com/ Superclasses ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , did.ido , ndi.documentservice Properties Property Description identifier Methods Method Description channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles return the file name that corresponds to the RHD file, or directory in case of directory getchannelsepoch List the channels that are available on this Intan device for a given set of files getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader intan Create a new NDI_DEVICE_MFDAQ_INTAN object intanheadertype2mfdaqchanneltype Convert between Intan headers and the ndi.daq.reader.mfdaq channel types intanname2mfdaqname Converts a channel name from Intan native format to ndi.daq.reader.mfdaq format. isvalid is a unique ID number valid? mfdaqchanneltype2intanchanneltype convert the channel type from generic format of multifuncdaqchannel mfdaqchanneltype2intanfreqheader Return header name with frequency information for channel type mfdaqchanneltype2intanheadertype Convert between the ndi.daq.reader.mfdaq channel types and Intan headers newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk Methods help channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ? [TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types() Returns a cell array of possible channel types in TYPES, and a corresponding short abbreviation in the cell array ABBREV. ---------------------------------------------------------------------------- | CHANNEL TYPE | ABBREV | Description | |--------------------|---------|-------------------------------------------| | 'analog_in' | 'ai' | Analog input | | 'analog_out' | 'ao' | Analog output | | 'auxiliary_in' | 'ax' | Auxiliary channels | | 'digital_in' | 'di' | Digital input | | 'digital_out' | 'do' | Digital output | | 'event' | 'e' | Event trigger (returns times, codes of | | | | event trigger activation) | | 'marker' | 'mk' | Mark channel (contains value at specified | | | | times) | | 'text' | 'tx' | Text channel (contains text at specified | | | | times) | 'time' | 't' | Time samples | |--------------------|---------|-------------------------------------------| Help for ndi.daq.reader.mfdaq.intan.channel_types is inherited from superclass ndi.daq.reader.mfdaq channelsepoch2timechannelinfo - look up time channel info TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER) Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time channel number that corresponds to the channel specified by CHANNELTYPE and CHANNELNUMBER. Help for ndi.daq.reader.mfdaq.intan.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). For the generic ndi.daq.reader.mfdaq, this returns a single clock type 'dev_local'time'; See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq.intan/epochclock is inherited from superclass ndi.daq.reader.mfdaq epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq.intan/epochclock_ingested is inherited from superclass ndi.daq.reader eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. Help for ndi.daq.reader.mfdaq.intan/eq is inherited from superclass ndi.daq.reader filenamefromepochfiles - return the file name that corresponds to the RHD file, or directory in case of directory [FILENAME, PARENTDIR, ISDIRECTORY] = FILENAMEFROMEPOCHFILES(NDI_DAQREADER_MFDAQ_INTAN_OBJ, FILENAME_ARRAY) Examines the list of filenames in FILENAME_ARRAY (cell array of full path file strings) and determines which one is an RHD data file. If the 1-file-per-channel mode is used, then PARENTDIR is the name of the directory that holds the data files and ISDIRECTORY is 1. getchannelsepoch - List the channels that are available on this Intan device for a given set of files CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_INTAN_OBJ, EPOCHFILES) Returns the channel list of acquired channels in this session CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') 'time_channel' | The channel number that contains the time information for | each channel. getchannelsepoch_ingested - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. Help for ndi.daq.reader.mfdaq.intan/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. Help for ndi.daq.reader.mfdaq.intan/getingesteddocument is inherited from superclass ndi.daq.reader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.reader.mfdaq.intan/id is inherited from superclass did.ido ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id); Help for ndi.daq.reader.mfdaq.intan/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq intan - Create a new NDI_DEVICE_MFDAQ_INTAN object D = ndi.daq.reader.mfdaq.intan(NAME,THEFILENAVIGATOR) Creates a new ndi.daq.reader.mfdaq.intan object with name NAME and associated filenavigator THEFILENAVIGATOR. Documentation for ndi.daq.reader.mfdaq.intan/intan doc ndi.daq.reader.mfdaq.intan intanheadertype2mfdaqchanneltype - Convert between Intan headers and the ndi.daq.reader.mfdaq channel types CHANNELTYPE = INTANHEADERTYPE2MFDAQCHANNELTYPE(INTANCHANNELTYPE) Given an Intan header file type, returns the standard ndi.daq.reader.mfdaq channel type intanname2mfdaqname - Converts a channel name from Intan native format to ndi.daq.reader.mfdaq format. MFDAQNAME = INTANNAME2MFDAQNAME(ndi.daq.reader.mfdaq.intan, MFDAQTYPE, NAME) Given an Intan native channel name (e.g., 'A-000') in NAME and a ndi.daq.reader.mfdaq channel type string (see NDI_DEVICE_MFDAQ), this function produces an ndi.daq.reader.mfdaq channel name (e.g., 'ai1'). isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.reader.mfdaq.intan.isvalid is inherited from superclass did.ido mfdaqchanneltype2intanchanneltype - convert the channel type from generic format of multifuncdaqchannel to the specific intan channel type INTANCHANNELTYPE = MFDAQCHANNELTYPE2INTANCHANNELTYPE(CHANNELTYPE) the intanchanneltype is a string of the specific channel type for intan mfdaqchanneltype2intanfreqheader - Return header name with frequency information for channel type HEADERNAME = MFDAQCHANNELTYPE2INTANFREQHEADER(CHANNELTYPE) Given an NDI_DEV_MFDAQ channel type string, this function returns the associated fieldname mfdaqchanneltype2intanheadertype - Convert between the ndi.daq.reader.mfdaq channel types and Intan headers INTANCHANHEADERTYPE = MFDAQCHANNELTYPE2INTANHEADERTYPE(CHANNELTYPE) Given a standard ndi.daq.reader.mfdaq channel type, returns the name of the type as indicated in Intan header files. newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq.intan/newdocument is inherited from superclass ndi.daq.reader readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1) CHANNELTYPE is the type of channel to read (cell array of strings, one per channel, or single string for all channels) CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is set of epoch files DATA is the channel data (each column contains data from an individual channel) readchannels_epochsamples_ingested - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, S0, S1, S) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. Help for ndi.daq.reader.mfdaq.intan/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.intan/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.intan/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(MYDEV, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc). It must be a string (not a cell array of strings). CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the epoch number or epochID T is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to epoch N at time 0 as the reference. Help for ndi.daq.reader.mfdaq.intan/readevents_epochsamples_native is inherited from superclass ndi.daq.reader.mfdaq samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. SR is the list of sample rate from specified channels samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.daq.reader.mfdaq.intan/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq.intan/searchquery is inherited from superclass ndi.daq.reader standardize_channel_types - return standard channel type names STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES) Given a cell array of strings of CHANNELTYPES, replace any abbreviations with with the standard channel type name in ndi.daq.reader.mfdaq.channel_types() Help for ndi.daq.reader.mfdaq.intan.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.daq.reader.mfdaq.intan/t0_t1_ingested is inherited from superclass ndi.daq.reader underlying_datatype - get the underlying data type for a channel in an epoch [DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) Return the underlying datatype for the requested channel. DATATYPE is a type that is suitable for passing to FREAD or FWRITE (e.g., 'float64', 'uint16', etc. See help fread.) P is a polynomial that converts between the double data that is returned by READCHANNEL. RETURNED_DATA = (RAW_DATA+P(1))*P(2)+(RAW_DATA+P(1))*P(3) ... DATASIZE is the sample size in bits. CHANNELTYPE must be a string. It is assumed that that CHANNELTYPE applies to every entry of CHANNEL. unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.reader.mfdaq.intan.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_MFDAQ_INTAN_OBJ, EPOCHPROBEMAP, EPOCHFILES) Examines the NDI_EPOCHPROBEMAP_DAQREADER EPOCHPROBEMAP and determines if it is valid for the given device with epoch files EPOCHFILES. See also: ndi.daq.reader, NDI_EPOCHPROBEMAP_DAQREADER","title":"ndi.daq.reader.mfdaq.intan"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/intan.m/#class-ndidaqreadermfdaqintan","text":"NDI_DAQREADER_MFDAQ_INTAN - Device driver for Intan Technologies RHD file forma This class reads data from Intan Technologies .RHD file format. Intan Technologies: http://intantech.com/","title":"CLASS ndi.daq.reader.mfdaq.intan"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/intan.m/#superclasses","text":"ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/intan.m/#properties","text":"Property Description identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/intan.m/#methods","text":"Method Description channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles return the file name that corresponds to the RHD file, or directory in case of directory getchannelsepoch List the channels that are available on this Intan device for a given set of files getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader intan Create a new NDI_DEVICE_MFDAQ_INTAN object intanheadertype2mfdaqchanneltype Convert between Intan headers and the ndi.daq.reader.mfdaq channel types intanname2mfdaqname Converts a channel name from Intan native format to ndi.daq.reader.mfdaq format. isvalid is a unique ID number valid? mfdaqchanneltype2intanchanneltype convert the channel type from generic format of multifuncdaqchannel mfdaqchanneltype2intanfreqheader Return header name with frequency information for channel type mfdaqchanneltype2intanheadertype Convert between the ndi.daq.reader.mfdaq channel types and Intan headers newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/intan.m/#methods-help","text":"channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ? [TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types() Returns a cell array of possible channel types in TYPES, and a corresponding short abbreviation in the cell array ABBREV. ---------------------------------------------------------------------------- | CHANNEL TYPE | ABBREV | Description | |--------------------|---------|-------------------------------------------| | 'analog_in' | 'ai' | Analog input | | 'analog_out' | 'ao' | Analog output | | 'auxiliary_in' | 'ax' | Auxiliary channels | | 'digital_in' | 'di' | Digital input | | 'digital_out' | 'do' | Digital output | | 'event' | 'e' | Event trigger (returns times, codes of | | | | event trigger activation) | | 'marker' | 'mk' | Mark channel (contains value at specified | | | | times) | | 'text' | 'tx' | Text channel (contains text at specified | | | | times) | 'time' | 't' | Time samples | |--------------------|---------|-------------------------------------------| Help for ndi.daq.reader.mfdaq.intan.channel_types is inherited from superclass ndi.daq.reader.mfdaq channelsepoch2timechannelinfo - look up time channel info TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER) Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time channel number that corresponds to the channel specified by CHANNELTYPE and CHANNELNUMBER. Help for ndi.daq.reader.mfdaq.intan.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). For the generic ndi.daq.reader.mfdaq, this returns a single clock type 'dev_local'time'; See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq.intan/epochclock is inherited from superclass ndi.daq.reader.mfdaq epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq.intan/epochclock_ingested is inherited from superclass ndi.daq.reader eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. Help for ndi.daq.reader.mfdaq.intan/eq is inherited from superclass ndi.daq.reader filenamefromepochfiles - return the file name that corresponds to the RHD file, or directory in case of directory [FILENAME, PARENTDIR, ISDIRECTORY] = FILENAMEFROMEPOCHFILES(NDI_DAQREADER_MFDAQ_INTAN_OBJ, FILENAME_ARRAY) Examines the list of filenames in FILENAME_ARRAY (cell array of full path file strings) and determines which one is an RHD data file. If the 1-file-per-channel mode is used, then PARENTDIR is the name of the directory that holds the data files and ISDIRECTORY is 1. getchannelsepoch - List the channels that are available on this Intan device for a given set of files CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_INTAN_OBJ, EPOCHFILES) Returns the channel list of acquired channels in this session CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') 'time_channel' | The channel number that contains the time information for | each channel. getchannelsepoch_ingested - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. Help for ndi.daq.reader.mfdaq.intan/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. Help for ndi.daq.reader.mfdaq.intan/getingesteddocument is inherited from superclass ndi.daq.reader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.reader.mfdaq.intan/id is inherited from superclass did.ido ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id); Help for ndi.daq.reader.mfdaq.intan/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq intan - Create a new NDI_DEVICE_MFDAQ_INTAN object D = ndi.daq.reader.mfdaq.intan(NAME,THEFILENAVIGATOR) Creates a new ndi.daq.reader.mfdaq.intan object with name NAME and associated filenavigator THEFILENAVIGATOR. Documentation for ndi.daq.reader.mfdaq.intan/intan doc ndi.daq.reader.mfdaq.intan intanheadertype2mfdaqchanneltype - Convert between Intan headers and the ndi.daq.reader.mfdaq channel types CHANNELTYPE = INTANHEADERTYPE2MFDAQCHANNELTYPE(INTANCHANNELTYPE) Given an Intan header file type, returns the standard ndi.daq.reader.mfdaq channel type intanname2mfdaqname - Converts a channel name from Intan native format to ndi.daq.reader.mfdaq format. MFDAQNAME = INTANNAME2MFDAQNAME(ndi.daq.reader.mfdaq.intan, MFDAQTYPE, NAME) Given an Intan native channel name (e.g., 'A-000') in NAME and a ndi.daq.reader.mfdaq channel type string (see NDI_DEVICE_MFDAQ), this function produces an ndi.daq.reader.mfdaq channel name (e.g., 'ai1'). isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.reader.mfdaq.intan.isvalid is inherited from superclass did.ido mfdaqchanneltype2intanchanneltype - convert the channel type from generic format of multifuncdaqchannel to the specific intan channel type INTANCHANNELTYPE = MFDAQCHANNELTYPE2INTANCHANNELTYPE(CHANNELTYPE) the intanchanneltype is a string of the specific channel type for intan mfdaqchanneltype2intanfreqheader - Return header name with frequency information for channel type HEADERNAME = MFDAQCHANNELTYPE2INTANFREQHEADER(CHANNELTYPE) Given an NDI_DEV_MFDAQ channel type string, this function returns the associated fieldname mfdaqchanneltype2intanheadertype - Convert between the ndi.daq.reader.mfdaq channel types and Intan headers INTANCHANHEADERTYPE = MFDAQCHANNELTYPE2INTANHEADERTYPE(CHANNELTYPE) Given a standard ndi.daq.reader.mfdaq channel type, returns the name of the type as indicated in Intan header files. newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq.intan/newdocument is inherited from superclass ndi.daq.reader readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1) CHANNELTYPE is the type of channel to read (cell array of strings, one per channel, or single string for all channels) CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is set of epoch files DATA is the channel data (each column contains data from an individual channel) readchannels_epochsamples_ingested - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, S0, S1, S) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. Help for ndi.daq.reader.mfdaq.intan/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.intan/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.intan/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(MYDEV, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc). It must be a string (not a cell array of strings). CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the epoch number or epochID T is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to epoch N at time 0 as the reference. Help for ndi.daq.reader.mfdaq.intan/readevents_epochsamples_native is inherited from superclass ndi.daq.reader.mfdaq samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. SR is the list of sample rate from specified channels samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.daq.reader.mfdaq.intan/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq.intan/searchquery is inherited from superclass ndi.daq.reader standardize_channel_types - return standard channel type names STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES) Given a cell array of strings of CHANNELTYPES, replace any abbreviations with with the standard channel type name in ndi.daq.reader.mfdaq.channel_types() Help for ndi.daq.reader.mfdaq.intan.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.daq.reader.mfdaq.intan/t0_t1_ingested is inherited from superclass ndi.daq.reader underlying_datatype - get the underlying data type for a channel in an epoch [DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) Return the underlying datatype for the requested channel. DATATYPE is a type that is suitable for passing to FREAD or FWRITE (e.g., 'float64', 'uint16', etc. See help fread.) P is a polynomial that converts between the double data that is returned by READCHANNEL. RETURNED_DATA = (RAW_DATA+P(1))*P(2)+(RAW_DATA+P(1))*P(3) ... DATASIZE is the sample size in bits. CHANNELTYPE must be a string. It is assumed that that CHANNELTYPE applies to every entry of CHANNEL. unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.reader.mfdaq.intan.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_MFDAQ_INTAN_OBJ, EPOCHPROBEMAP, EPOCHFILES) Examines the NDI_EPOCHPROBEMAP_DAQREADER EPOCHPROBEMAP and determines if it is valid for the given device with epoch files EPOCHFILES. See also: ndi.daq.reader, NDI_EPOCHPROBEMAP_DAQREADER","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/ndr.m/","text":"CLASS ndi.daq.reader.mfdaq.ndr ndi.daq.reader.mfdaq.ndr - Allows NDI to use NDR readers This class reads data using NDR-matlab ndr.reader objects. NDR-MATLAB must be installed: https://github.com/VH-Lab/NDR-matlab/ Superclasses ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , did.ido , ndi.documentservice Properties Property Description ndr_reader_string identifier Methods Method Description channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal getchannelsepoch List the channels that are available for this epoch for the NDR daq reader getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader isvalid is a unique ID number valid? ndr create a new ndi.daq.reader.mfdaq.ndr object newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies EPOCHPROBEMAP is compatible with device and data on disk Methods help channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ? [TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types() Returns a cell array of possible channel types in TYPES, and a corresponding short abbreviation in the cell array ABBREV. ---------------------------------------------------------------------------- | CHANNEL TYPE | ABBREV | Description | |--------------------|---------|-------------------------------------------| | 'analog_in' | 'ai' | Analog input | | 'analog_out' | 'ao' | Analog output | | 'auxiliary_in' | 'ax' | Auxiliary channels | | 'digital_in' | 'di' | Digital input | | 'digital_out' | 'do' | Digital output | | 'event' | 'e' | Event trigger (returns times, codes of | | | | event trigger activation) | | 'marker' | 'mk' | Mark channel (contains value at specified | | | | times) | | 'text' | 'tx' | Text channel (contains text at specified | | | | times) | 'time' | 't' | Time samples | |--------------------|---------|-------------------------------------------| Help for ndi.daq.reader.mfdaq.ndr.channel_types is inherited from superclass ndi.daq.reader.mfdaq channelsepoch2timechannelinfo - look up time channel info TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER) Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time channel number that corresponds to the channel specified by CHANNELTYPE and CHANNELNUMBER. Help for ndi.daq.reader.mfdaq.ndr.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq.ndr/epochclock_ingested is inherited from superclass ndi.daq.reader eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. Help for ndi.daq.reader.mfdaq.ndr/eq is inherited from superclass ndi.daq.reader getchannelsepoch - List the channels that are available for this epoch for the NDR daq reader CHANNELS = GETCHANNELSEPOCH(NDI_DAQ_READER_MFDAQ_NDR_OBJ, EPOCHFILES) Returns the channel list of acquired channels in this session CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') 'time_channel' | The channel number that has the time information for that channel getchannelsepoch_ingested - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. Help for ndi.daq.reader.mfdaq.ndr/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. Help for ndi.daq.reader.mfdaq.ndr/getingesteddocument is inherited from superclass ndi.daq.reader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.reader.mfdaq.ndr/id is inherited from superclass did.ido ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id); Help for ndi.daq.reader.mfdaq.ndr/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.reader.mfdaq.ndr.isvalid is inherited from superclass did.ido ndr - create a new ndi.daq.reader.mfdaq.ndr object OBJ = NDR(READER_STRING) Creates a new ndi.daq.reader.mfdaq.ndr object for reading files with ndr.reader objects. READER_STRING should be a string that specifies a file type, such as 'RHD', 'sev', 'som', etc. A list of valid strings may be obtained from reader_string = ndr.known_readers() Documentation for ndi.daq.reader.mfdaq.ndr/ndr doc ndi.daq.reader.mfdaq.ndr newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(NDI_DAQREADER_MFDAQ_NDR_OBJ, CHANNELTYPE, CHANNEL, EPOCHFILES, S0, S1) CHANNELTYPE is the type of channel to read (cell array of strings, one per channel, or single string for all channels) CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the cell array of full path filenames for this epoch DATA is the channel data (each column contains data from an individual channel) readchannels_epochsamples_ingested - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, S0, S1, S) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. Help for ndi.daq.reader.mfdaq.ndr/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.ndr/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.ndr/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_native - read events or markers of specified channels for a specified epoch DATA = READEVENTS_EPOCHSAMPLES_NATIVE(NDR_DAQREADER_MFDAQ_NDR_OBJ, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc) CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the set of epoch files DATA is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(NDI_DAQREADER_MFDAQ_NDR_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is the list of sample rate from specified channels in samples/sec. samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.daq.reader.mfdaq.ndr/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq.ndr/searchquery is inherited from superclass ndi.daq.reader standardize_channel_types - return standard channel type names STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES) Given a cell array of strings of CHANNELTYPES, replace any abbreviations with with the standard channel type name in ndi.daq.reader.mfdaq.channel_types() Help for ndi.daq.reader.mfdaq.ndr.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_DAQSYSTEM_MFDAQ_NDR_OBJ, EPOCHFILES) Return the beginning (t0) and end (t1) times of the EPOCHFILES that define this epoch in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. See also: ndi.time.clocktype, EPOCHCLOCK t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.daq.reader.mfdaq.ndr/t0_t1_ingested is inherited from superclass ndi.daq.reader underlying_datatype - get the underlying data type for a channel in an epoch [DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(NDI_DAQSYSTEM_MFDAQ_NDR_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL) Return the underlying datatype for the requested channel. DATATYPE is a type that is suitable for passing to FREAD or FWRITE (e.g., 'float64', 'uint16', etc. See help fread.) P is a matrix of polynomials that converts between the double data that is returned by READCHANNEL. RETURNED_DATA = (RAW_DATA+P(i,1))*P(i,2)+(RAW_DATA+P(i,1))*P(i,3) ... There is one row of P for each entry of CHANNEL. DATASIZE is the sample size in bits. CHANNELTYPE must be a string. It is assumed that that CHANNELTYPE applies to every entry of CHANNEL. unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.reader.mfdaq.ndr.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies EPOCHPROBEMAP is compatible with device and data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_OBJ, EPOCHPROBEMAP, NUMBER) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER. For the abstract class ndi.daq.reader, EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. See also: ndi.daq.reader.mfdaq.ndr, ndi.epoch.epochprobemap_daqsystem Help for ndi.daq.reader.mfdaq.ndr/verifyepochprobemap is inherited from superclass ndi.daq.reader","title":"ndi.daq.reader.mfdaq.ndr"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/ndr.m/#class-ndidaqreadermfdaqndr","text":"ndi.daq.reader.mfdaq.ndr - Allows NDI to use NDR readers This class reads data using NDR-matlab ndr.reader objects. NDR-MATLAB must be installed: https://github.com/VH-Lab/NDR-matlab/","title":"CLASS ndi.daq.reader.mfdaq.ndr"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/ndr.m/#superclasses","text":"ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/ndr.m/#properties","text":"Property Description ndr_reader_string identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/ndr.m/#methods","text":"Method Description channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal getchannelsepoch List the channels that are available for this epoch for the NDR daq reader getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader isvalid is a unique ID number valid? ndr create a new ndi.daq.reader.mfdaq.ndr object newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies EPOCHPROBEMAP is compatible with device and data on disk","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/ndr.m/#methods-help","text":"channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ? [TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types() Returns a cell array of possible channel types in TYPES, and a corresponding short abbreviation in the cell array ABBREV. ---------------------------------------------------------------------------- | CHANNEL TYPE | ABBREV | Description | |--------------------|---------|-------------------------------------------| | 'analog_in' | 'ai' | Analog input | | 'analog_out' | 'ao' | Analog output | | 'auxiliary_in' | 'ax' | Auxiliary channels | | 'digital_in' | 'di' | Digital input | | 'digital_out' | 'do' | Digital output | | 'event' | 'e' | Event trigger (returns times, codes of | | | | event trigger activation) | | 'marker' | 'mk' | Mark channel (contains value at specified | | | | times) | | 'text' | 'tx' | Text channel (contains text at specified | | | | times) | 'time' | 't' | Time samples | |--------------------|---------|-------------------------------------------| Help for ndi.daq.reader.mfdaq.ndr.channel_types is inherited from superclass ndi.daq.reader.mfdaq channelsepoch2timechannelinfo - look up time channel info TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER) Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time channel number that corresponds to the channel specified by CHANNELTYPE and CHANNELNUMBER. Help for ndi.daq.reader.mfdaq.ndr.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq.ndr/epochclock_ingested is inherited from superclass ndi.daq.reader eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. Help for ndi.daq.reader.mfdaq.ndr/eq is inherited from superclass ndi.daq.reader getchannelsepoch - List the channels that are available for this epoch for the NDR daq reader CHANNELS = GETCHANNELSEPOCH(NDI_DAQ_READER_MFDAQ_NDR_OBJ, EPOCHFILES) Returns the channel list of acquired channels in this session CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') 'time_channel' | The channel number that has the time information for that channel getchannelsepoch_ingested - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. Help for ndi.daq.reader.mfdaq.ndr/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. Help for ndi.daq.reader.mfdaq.ndr/getingesteddocument is inherited from superclass ndi.daq.reader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.reader.mfdaq.ndr/id is inherited from superclass did.ido ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id); Help for ndi.daq.reader.mfdaq.ndr/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.reader.mfdaq.ndr.isvalid is inherited from superclass did.ido ndr - create a new ndi.daq.reader.mfdaq.ndr object OBJ = NDR(READER_STRING) Creates a new ndi.daq.reader.mfdaq.ndr object for reading files with ndr.reader objects. READER_STRING should be a string that specifies a file type, such as 'RHD', 'sev', 'som', etc. A list of valid strings may be obtained from reader_string = ndr.known_readers() Documentation for ndi.daq.reader.mfdaq.ndr/ndr doc ndi.daq.reader.mfdaq.ndr newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(NDI_DAQREADER_MFDAQ_NDR_OBJ, CHANNELTYPE, CHANNEL, EPOCHFILES, S0, S1) CHANNELTYPE is the type of channel to read (cell array of strings, one per channel, or single string for all channels) CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the cell array of full path filenames for this epoch DATA is the channel data (each column contains data from an individual channel) readchannels_epochsamples_ingested - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, S0, S1, S) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. Help for ndi.daq.reader.mfdaq.ndr/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.ndr/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.ndr/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_native - read events or markers of specified channels for a specified epoch DATA = READEVENTS_EPOCHSAMPLES_NATIVE(NDR_DAQREADER_MFDAQ_NDR_OBJ, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc) CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the set of epoch files DATA is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(NDI_DAQREADER_MFDAQ_NDR_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is the list of sample rate from specified channels in samples/sec. samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.daq.reader.mfdaq.ndr/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq.ndr/searchquery is inherited from superclass ndi.daq.reader standardize_channel_types - return standard channel type names STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES) Given a cell array of strings of CHANNELTYPES, replace any abbreviations with with the standard channel type name in ndi.daq.reader.mfdaq.channel_types() Help for ndi.daq.reader.mfdaq.ndr.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_DAQSYSTEM_MFDAQ_NDR_OBJ, EPOCHFILES) Return the beginning (t0) and end (t1) times of the EPOCHFILES that define this epoch in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. See also: ndi.time.clocktype, EPOCHCLOCK t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.daq.reader.mfdaq.ndr/t0_t1_ingested is inherited from superclass ndi.daq.reader underlying_datatype - get the underlying data type for a channel in an epoch [DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(NDI_DAQSYSTEM_MFDAQ_NDR_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL) Return the underlying datatype for the requested channel. DATATYPE is a type that is suitable for passing to FREAD or FWRITE (e.g., 'float64', 'uint16', etc. See help fread.) P is a matrix of polynomials that converts between the double data that is returned by READCHANNEL. RETURNED_DATA = (RAW_DATA+P(i,1))*P(i,2)+(RAW_DATA+P(i,1))*P(i,3) ... There is one row of P for each entry of CHANNEL. DATASIZE is the sample size in bits. CHANNELTYPE must be a string. It is assumed that that CHANNELTYPE applies to every entry of CHANNEL. unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.reader.mfdaq.ndr.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies EPOCHPROBEMAP is compatible with device and data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_OBJ, EPOCHPROBEMAP, NUMBER) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER. For the abstract class ndi.daq.reader, EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. See also: ndi.daq.reader.mfdaq.ndr, ndi.epoch.epochprobemap_daqsystem Help for ndi.daq.reader.mfdaq.ndr/verifyepochprobemap is inherited from superclass ndi.daq.reader","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/spikegadgets.m/","text":"CLASS ndi.daq.reader.mfdaq.spikegadgets NDI.DAQ.READER.MFDAQ.SPIKEGADGETS - Device driver for SpikeGadgets .rec video file format This class reads data from video files .rec that spikegadgets use Spike Gadgets: http://spikegadgets.com/ Superclasses ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , did.ido , ndi.documentservice Properties Property Description identifier Methods Method Description channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles ndi.daq.reader.mfdaq.spikegadgets/filenamefromepochfiles is a function. getchannelsepoch GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER getchannelsepoch_ingested List the channels that were sampled for this epoch getchannelsepochdetailed GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER WITH EXTRA DETAILS getepochprobemap GETEPOCHPROBEMAP returns struct with probe information getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object spikegadgets Create a new NDI_DEVICE_MFDAQ_SPIKEGADGETS object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies EPOCHPROBEMAP is compatible with device and data on disk Methods help channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ? [TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types() Returns a cell array of possible channel types in TYPES, and a corresponding short abbreviation in the cell array ABBREV. ---------------------------------------------------------------------------- | CHANNEL TYPE | ABBREV | Description | |--------------------|---------|-------------------------------------------| | 'analog_in' | 'ai' | Analog input | | 'analog_out' | 'ao' | Analog output | | 'auxiliary_in' | 'ax' | Auxiliary channels | | 'digital_in' | 'di' | Digital input | | 'digital_out' | 'do' | Digital output | | 'event' | 'e' | Event trigger (returns times, codes of | | | | event trigger activation) | | 'marker' | 'mk' | Mark channel (contains value at specified | | | | times) | | 'text' | 'tx' | Text channel (contains text at specified | | | | times) | 'time' | 't' | Time samples | |--------------------|---------|-------------------------------------------| Help for ndi.daq.reader.mfdaq.spikegadgets.channel_types is inherited from superclass ndi.daq.reader.mfdaq channelsepoch2timechannelinfo - look up time channel info TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER) Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time channel number that corresponds to the channel specified by CHANNELTYPE and CHANNELNUMBER. Help for ndi.daq.reader.mfdaq.spikegadgets.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). For the generic ndi.daq.reader.mfdaq, this returns a single clock type 'dev_local'time'; See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq.spikegadgets/epochclock is inherited from superclass ndi.daq.reader.mfdaq epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq.spikegadgets/epochclock_ingested is inherited from superclass ndi.daq.reader eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. Help for ndi.daq.reader.mfdaq.spikegadgets/eq is inherited from superclass ndi.daq.reader filenamefromepochfiles - ndi.daq.reader.mfdaq.spikegadgets/filenamefromepochfiles is a function. filename = filenamefromepochfiles(ndi_daqreader_mfdaq_spikegadgets_obj, filename) getchannelsepoch - GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_SPIKEGADGETS_OBJ) CHANNELS is a STRUCT getchannelsepoch_ingested - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. Help for ndi.daq.reader.mfdaq.spikegadgets/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq getchannelsepochdetailed - GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER WITH EXTRA DETAILS CHANNELS = GETCHANNELSEPOCHDETAILED(NDI_DAQREADER_MFDAQ_SPIKEGADGETS_OBJ) CHANNELS is a STRUCT getepochprobemap - GETEPOCHPROBEMAP returns struct with probe information name, reference, n-trode, channels getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. Help for ndi.daq.reader.mfdaq.spikegadgets/getingesteddocument is inherited from superclass ndi.daq.reader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.reader.mfdaq.spikegadgets/id is inherited from superclass did.ido ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id); Help for ndi.daq.reader.mfdaq.spikegadgets/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.reader.mfdaq.spikegadgets.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq.spikegadgets/newdocument is inherited from superclass ndi.daq.reader readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1) CHANNELTYPE is the type of channel to read 'digital_in', 'digital_out', 'analog_in', 'analog_out' or 'auxiliary' CHANNEL is a vector of the channel numbers to read beginning from 1 if 'etrodeftrode' is channeltype, if channeltype is 'analog_in' channel is an array with the string names of analog channels 'Ain1'through 8 EPOCH is set of files in the epoch DATA is the channel data (each column contains data from an individual channel) readchannels_epochsamples_ingested - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, S0, S1, S) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. Help for ndi.daq.reader.mfdaq.spikegadgets/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.spikegadgets/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.spikegadgets/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(MYDEV, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc). It must be a string (not a cell array of strings). CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the epoch number or epochID T is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to epoch N at time 0 as the reference. Help for ndi.daq.reader.mfdaq.spikegadgets/readevents_epochsamples_native is inherited from superclass ndi.daq.reader.mfdaq samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is the list of sample rate from specified channels CHANNELTYPE and CHANNEL not used in this case since it is the same for all channels in this device samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.daq.reader.mfdaq.spikegadgets/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq.spikegadgets/searchquery is inherited from superclass ndi.daq.reader spikegadgets - Create a new NDI_DEVICE_MFDAQ_SPIKEGADGETS object D = NDI.DAQ.READER.MFDAQ.SPIKEGADGETS(NAME,THEFILENAVIGATOR) Creates a new NDI_DAQREADER_MFDAQ_SPIKEGADGETS object with name NAME and associated filenavigator THEFILENAVIGATOR. Documentation for ndi.daq.reader.mfdaq.spikegadgets/spikegadgets doc ndi.daq.reader.mfdaq.spikegadgets standardize_channel_types - return standard channel type names STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES) Given a cell array of strings of CHANNELTYPES, replace any abbreviations with with the standard channel type name in ndi.daq.reader.mfdaq.channel_types() Help for ndi.daq.reader.mfdaq.spikegadgets.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.daq.reader.mfdaq.spikegadgets/t0_t1_ingested is inherited from superclass ndi.daq.reader underlying_datatype - get the underlying data type for a channel in an epoch [DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) Return the underlying datatype for the requested channel. DATATYPE is a type that is suitable for passing to FREAD or FWRITE (e.g., 'float64', 'uint16', etc. See help fread.) P is a ,atrix of polynomials that converts between the double data that is returned by READCHANNEL. RETURNED_DATA = (RAW_DATA+P(i,1))*P(i,2)+(RAW_DATA+P(i,1))*P(i,3) ... There is one row of P for each entry of CHANNEL. DATASIZE is the sample size in bits. CHANNELTYPE must be a string. It is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.daq.reader.mfdaq.spikegadgets/underlying_datatype is inherited from superclass ndi.daq.reader.mfdaq unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.reader.mfdaq.spikegadgets.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies EPOCHPROBEMAP is compatible with device and data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_OBJ, EPOCHPROBEMAP, NUMBER) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER. For the abstract class ndi.daq.reader, EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. See also: ndi.daq.reader.mfdaq.spikegadgets, ndi.epoch.epochprobemap_daqsystem Help for ndi.daq.reader.mfdaq.spikegadgets/verifyepochprobemap is inherited from superclass ndi.daq.reader","title":"ndi.daq.reader.mfdaq.spikegadgets"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/spikegadgets.m/#class-ndidaqreadermfdaqspikegadgets","text":"NDI.DAQ.READER.MFDAQ.SPIKEGADGETS - Device driver for SpikeGadgets .rec video file format This class reads data from video files .rec that spikegadgets use Spike Gadgets: http://spikegadgets.com/","title":"CLASS ndi.daq.reader.mfdaq.spikegadgets"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/spikegadgets.m/#superclasses","text":"ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/spikegadgets.m/#properties","text":"Property Description identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/spikegadgets.m/#methods","text":"Method Description channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles ndi.daq.reader.mfdaq.spikegadgets/filenamefromepochfiles is a function. getchannelsepoch GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER getchannelsepoch_ingested List the channels that were sampled for this epoch getchannelsepochdetailed GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER WITH EXTRA DETAILS getepochprobemap GETEPOCHPROBEMAP returns struct with probe information getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object spikegadgets Create a new NDI_DEVICE_MFDAQ_SPIKEGADGETS object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies EPOCHPROBEMAP is compatible with device and data on disk","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/spikegadgets.m/#methods-help","text":"channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ? [TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types() Returns a cell array of possible channel types in TYPES, and a corresponding short abbreviation in the cell array ABBREV. ---------------------------------------------------------------------------- | CHANNEL TYPE | ABBREV | Description | |--------------------|---------|-------------------------------------------| | 'analog_in' | 'ai' | Analog input | | 'analog_out' | 'ao' | Analog output | | 'auxiliary_in' | 'ax' | Auxiliary channels | | 'digital_in' | 'di' | Digital input | | 'digital_out' | 'do' | Digital output | | 'event' | 'e' | Event trigger (returns times, codes of | | | | event trigger activation) | | 'marker' | 'mk' | Mark channel (contains value at specified | | | | times) | | 'text' | 'tx' | Text channel (contains text at specified | | | | times) | 'time' | 't' | Time samples | |--------------------|---------|-------------------------------------------| Help for ndi.daq.reader.mfdaq.spikegadgets.channel_types is inherited from superclass ndi.daq.reader.mfdaq channelsepoch2timechannelinfo - look up time channel info TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER) Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time channel number that corresponds to the channel specified by CHANNELTYPE and CHANNELNUMBER. Help for ndi.daq.reader.mfdaq.spikegadgets.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). For the generic ndi.daq.reader.mfdaq, this returns a single clock type 'dev_local'time'; See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq.spikegadgets/epochclock is inherited from superclass ndi.daq.reader.mfdaq epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype Help for ndi.daq.reader.mfdaq.spikegadgets/epochclock_ingested is inherited from superclass ndi.daq.reader eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. Help for ndi.daq.reader.mfdaq.spikegadgets/eq is inherited from superclass ndi.daq.reader filenamefromepochfiles - ndi.daq.reader.mfdaq.spikegadgets/filenamefromepochfiles is a function. filename = filenamefromepochfiles(ndi_daqreader_mfdaq_spikegadgets_obj, filename) getchannelsepoch - GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_SPIKEGADGETS_OBJ) CHANNELS is a STRUCT getchannelsepoch_ingested - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. Help for ndi.daq.reader.mfdaq.spikegadgets/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq getchannelsepochdetailed - GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER WITH EXTRA DETAILS CHANNELS = GETCHANNELSEPOCHDETAILED(NDI_DAQREADER_MFDAQ_SPIKEGADGETS_OBJ) CHANNELS is a STRUCT getepochprobemap - GETEPOCHPROBEMAP returns struct with probe information name, reference, n-trode, channels getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. Help for ndi.daq.reader.mfdaq.spikegadgets/getingesteddocument is inherited from superclass ndi.daq.reader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.reader.mfdaq.spikegadgets/id is inherited from superclass did.ido ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id); Help for ndi.daq.reader.mfdaq.spikegadgets/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.reader.mfdaq.spikegadgets.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq.spikegadgets/newdocument is inherited from superclass ndi.daq.reader readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1) CHANNELTYPE is the type of channel to read 'digital_in', 'digital_out', 'analog_in', 'analog_out' or 'auxiliary' CHANNEL is a vector of the channel numbers to read beginning from 1 if 'etrodeftrode' is channeltype, if channeltype is 'analog_in' channel is an array with the string names of analog channels 'Ain1'through 8 EPOCH is set of files in the epoch DATA is the channel data (each column contains data from an individual channel) readchannels_epochsamples_ingested - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, S0, S1, S) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. Help for ndi.daq.reader.mfdaq.spikegadgets/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.spikegadgets/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.daq.reader.mfdaq.spikegadgets/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(MYDEV, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc). It must be a string (not a cell array of strings). CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the epoch number or epochID T is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to epoch N at time 0 as the reference. Help for ndi.daq.reader.mfdaq.spikegadgets/readevents_epochsamples_native is inherited from superclass ndi.daq.reader.mfdaq samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is the list of sample rate from specified channels CHANNELTYPE and CHANNEL not used in this case since it is the same for all channels in this device samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.daq.reader.mfdaq.spikegadgets/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. Help for ndi.daq.reader.mfdaq.spikegadgets/searchquery is inherited from superclass ndi.daq.reader spikegadgets - Create a new NDI_DEVICE_MFDAQ_SPIKEGADGETS object D = NDI.DAQ.READER.MFDAQ.SPIKEGADGETS(NAME,THEFILENAVIGATOR) Creates a new NDI_DAQREADER_MFDAQ_SPIKEGADGETS object with name NAME and associated filenavigator THEFILENAVIGATOR. Documentation for ndi.daq.reader.mfdaq.spikegadgets/spikegadgets doc ndi.daq.reader.mfdaq.spikegadgets standardize_channel_types - return standard channel type names STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES) Given a cell array of strings of CHANNELTYPES, replace any abbreviations with with the standard channel type name in ndi.daq.reader.mfdaq.channel_types() Help for ndi.daq.reader.mfdaq.spikegadgets.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.daq.reader.mfdaq.spikegadgets/t0_t1_ingested is inherited from superclass ndi.daq.reader underlying_datatype - get the underlying data type for a channel in an epoch [DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) Return the underlying datatype for the requested channel. DATATYPE is a type that is suitable for passing to FREAD or FWRITE (e.g., 'float64', 'uint16', etc. See help fread.) P is a ,atrix of polynomials that converts between the double data that is returned by READCHANNEL. RETURNED_DATA = (RAW_DATA+P(i,1))*P(i,2)+(RAW_DATA+P(i,1))*P(i,3) ... There is one row of P for each entry of CHANNEL. DATASIZE is the sample size in bits. CHANNELTYPE must be a string. It is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.daq.reader.mfdaq.spikegadgets/underlying_datatype is inherited from superclass ndi.daq.reader.mfdaq unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.reader.mfdaq.spikegadgets.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies EPOCHPROBEMAP is compatible with device and data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_OBJ, EPOCHPROBEMAP, NUMBER) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER. For the abstract class ndi.daq.reader, EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. See also: ndi.daq.reader.mfdaq.spikegadgets, ndi.epoch.epochprobemap_daqsystem Help for ndi.daq.reader.mfdaq.spikegadgets/verifyepochprobemap is inherited from superclass ndi.daq.reader","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bsystem/mfdaq.m/","text":"CLASS ndi.daq.system.mfdaq NDI_DAQSYSTEM_MFDAQ - Multifunction DAQ object class The ndi.daq.system.mfdaq object class. This object allows one to address multifunction data acquisition systems that sample a variety of data types potentially simultaneously. The channel types that are supported are the following: Channel type (string): | Description ------------------------------------------------------------- 'analog_in' or 'ai' | Analog input 'analog_out' or 'ao' | Analog output 'digital_in' or 'di' | Digital input 'digital_out' or 'do' | Digital output 'time' or 't' | Time 'auxiliary_in','aux' or 'ax'| Auxiliary channels 'event', or 'e' | Event trigger (returns times of event trigger activation) 'mark', or 'mk' | Mark channel (contains value at specified times) See also: ndi.daq.system.mfdaq/ndi.daq.system.mfdaq Superclasses ndi.daq.system , ndi.ido , did.ido , ndi.epoch.epochset.param , ndi.epoch.epochset , ndi.documentservice Properties Property Description name filenavigator daqreader daqmetadatareader identifier epochprobemap_class Methods Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build the epochtable for an ndi.daq.system object cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object deleteepoch Delete an epoch and an epoch record from a device epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid return the epoch id string for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq are two ndi.daq.system objects equal? getcache return the NDI_CACHE and key for ndi.daq.system getchannels List the channels that are available on this device getchannelsepoch List the channels that are available on this device for an epoch getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs getepochprobemap Return the epoch record for an ndi.daq.system object getepochtag Get tag(s) from an epoch getmetadata get metadata for an epoch getprobes GETPROBES = Return all of the probes associated with an ndi.daq.system object ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the identifier of an DID.IDO object ingest ingest the data from an ndi.daq.system into the database issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? matchedepochtable compare a hash number from an epochtable to the current version mfdaq Create a new multifunction DAQ object mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type ndi_daqsystem_gui_edit function for editing an ndi.daq.system object newdocument create a new document set for ndi.daq.system objects numepochs Number of epochs of ndi.epoch.epochset readchannels read the data based on specified channels readchannels_epochsamples read the data based on specified channels readevents read events or markers of specified channels readevents_epochsamples read events or markers of specified channels for a specified epoch removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery search for an ndi.daq.system session return the ndi.session object associated with the ndi.daq.system object set_daqmetadatareader set the cell array of ndi.daq.metadatareader objects setepochprobemap Sets the epoch record of a particular epoch setepochtag Set tag(s) for an epoch setsession set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system) t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk Methods help addepochtag - Add tag(s) for an epoch ADDEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will be added to any tags in the epoch EPOCHNUMBER. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. Help for ndi.daq.system.mfdaq/addepochtag is inherited from superclass ndi.epoch.epochset.param buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.daq.system.mfdaq/EPOCHNODES Help for ndi.daq.system.mfdaq/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - Build the epochtable for an ndi.daq.system object ET = BUILDEPOCHTABLE(NDI_DAQSYSTEM_OBJ) Returns the epoch table for NDI_DAQSYSTEM_OBJ Help for ndi.daq.system.mfdaq/buildepochtable is inherited from superclass ndi.daq.system cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.daq.system.mfdaq.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.daq.system.mfdaq/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.daq.system.mfdaq/cached_epochtable is inherited from superclass ndi.epoch.epochset deleteepoch - Delete an epoch and an epoch record from a device DELETEEPOCH(NDI_DAQSYSTEM_OBJ, NUMBER ... [REMOVEDATA]) Deletes the data and ndi.epoch.epochprobemap_daqsystem and epoch data for epoch NUMBER. If REMOVEDATA is present and is 1, the data and record are physically deleted. If REMOVEDATA is omitted or is 0, the data and record are renamed but not deleted from disk. In the abstract class, this command takes no action. See also: ndi.daq.system.mfdaq, ndi.epoch.epochprobemap_daqsystem Help for ndi.daq.system.mfdaq/deleteepoch is inherited from superclass ndi.daq.system epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.daq.system.mfdaq/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQSYSTEM_MFDAQ_OBJ, EPOCH) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). For the generic ndi.daq.system.mfdaq, this returns a single clock type 'dev_local'time'; See also: ndi.time.clocktype epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.daq.system.mfdaq/epochgraph is inherited from superclass ndi.epoch.epochset epochid - return the epoch id string for an epoch EID = EOPCHID(NDI_DAQSYSTEM_OBJ, EPOCH_NUMBER) Returns the EPOCHID for epoch with number EPOCH_NUMBER. In ndi.daq.system, this is determined by the associated ndi.file.navigator object. Help for ndi.daq.system.mfdaq/epochid is inherited from superclass ndi.daq.system epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.daq.system.mfdaq/epochnodes is inherited from superclass ndi.epoch.epochset epochprobemapfilename - return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME(NDI_DAQSYSTEM_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHPROBEMAPFILENAME for the ndi.daq.system epoch EPOCH_NUMBER_OR_ID. If there is no epoch NUMBER, an error is generated. The file name is returned with a full path. Help for ndi.daq.system.mfdaq/epochprobemapfilename is inherited from superclass ndi.daq.system epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME(NDI_EPOCHSET_OBJ) Returns the object name that is used when creating epoch nodes. If the class has a 'name' property, that property is used. Otherwise, 'unknown' is used. Help for ndi.daq.system.mfdaq/epochsetname is inherited from superclass ndi.epoch.epochset epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.daq.system.mfdaq/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.daq.system.mfdaq/epochtableentry is inherited from superclass ndi.epoch.epochset epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME(NDI_FILENAVIGATOR_OBJ, EPOCHNUMBER) In this base class, empty is returned because it is an abstract class. Help for ndi.daq.system.mfdaq/epochtagfilename is inherited from superclass ndi.daq.system eq - are two ndi.daq.system objects equal? B = EQ(NDI_DAQSYSTEM_OBJ_A, NDI_DAQSYSTEM_OBJ_B) Returns 1 if the ndi.daq.system objects have the same name and class type. The objects do not have to be the same handle or have the same space in memory. Otherwise, returns 0. Help for ndi.daq.system.mfdaq/eq is inherited from superclass ndi.daq.system getcache - return the NDI_CACHE and key for ndi.daq.system [CACHE,KEY] = GETCACHE(NDI_DAQSYSTEM_OBJ) Returns the CACHE and KEY for the ndi.daq.system object. The CACHE is returned from the associated session. The KEY is the string 'daqsystem_' followed by the object's id. See also: ndi.daq.system.mfdaq, NDI_BASE Help for ndi.daq.system.mfdaq/getcache is inherited from superclass ndi.daq.system getchannels - List the channels that are available on this device CHANNELS = GETCHANNELS(NDI_DAQSYSTEM_MFDAQ_OBJ) Returns the channel list of acquired channels in this session The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The time channel that has timing information for that channel getchannelsepoch - List the channels that are available on this device for an epoch CHANNELS = GETCHANNELSEPOCH(NDI_DAQSYSTEM_MFDAQ_OBJ, EPOCH) Returns the channel list of acquired channels in this session for a given EPOCH (can be epochid or number) The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The time channel that has timing information for that channel getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.daq.system.mfdaq/getepocharray is inherited from superclass ndi.epoch.epochset getepochprobemap - Return the epoch record for an ndi.daq.system object EPOCHPROBEMAP = GETEPOCHPROBEMAP(NDI_DAQSYSTEM_OBJ, EPOCH) Inputs: NDI_EPOCHSET_PARAM_OBJ - the ndi.epoch.epochset.param object EPOCH - the epoch number or identifier Output: EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME The ndi.daq.system GETEPOCHPROBEMAP checks its DAQREADER object to see if it has a method called 'GETEPOCHPROBEMAP' that accepts the EPOCHPROBEMAP filename and the EPOCHFILES for that epoch. If it does have a method by that name, it is called and the output returned. If it does not, then the FILENAVIGATOR parameter's method is called. Help for ndi.daq.system.mfdaq/getepochprobemap is inherited from superclass ndi.daq.system getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. If there are no files in EPOCHNUMBER then an error is returned. Help for ndi.daq.system.mfdaq/getepochtag is inherited from superclass ndi.epoch.epochset.param getmetadata - get metadata for an epoch METADATA = GETMETADATA(NDI_DAQSYSTEM_OBJ, EPOCH, CHANNEL) Returns the metadata (cell array of entries) for EPOCH for metadata channel CHANNEL. CHANNEL indicates the number of the ndi.daq.metadatareader to use to obtain the data. Help for ndi.daq.system.mfdaq/getmetadata is inherited from superclass ndi.daq.system getprobes - GETPROBES = Return all of the probes associated with an ndi.daq.system object PROBES_STRUCT = GETPROBES(NDI_DAQSYSTEM_OBJ) Returns all probes associated with the ndi.daq.system object NDI_DEVICE_OBJ This function returns a structure with fields of all unique probes across all EPOCHPROBEMAP objects returned in ndi.daq.system/GETEPOCHPROBEMAP. The fields are 'name', 'reference', and 'type'. Help for ndi.daq.system.mfdaq/getprobes is inherited from superclass ndi.daq.system ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.daq.system.mfdaq.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.system.mfdaq/id is inherited from superclass did.ido ingest - ingest the data from an ndi.daq.system into the database [B,D] = INGEST(NDI_DAQSYSTEM_OBJ) Ingest any uningested epochs from an ndi.daq.system object into the database. B is 1 if the operation is successful. D is a cell array of new ndi.document objects that were created and added to the database. Help for ndi.daq.system.mfdaq/ingest is inherited from superclass ndi.daq.system issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset objects, this returns 1. For some object types (ndi.probe.*, for example) this will return 0 so that the underlying ndi.daq.system epochs are added. Help for ndi.daq.system.mfdaq/issyncgraphroot is inherited from superclass ndi.epoch.epochset isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.system.mfdaq.isvalid is inherited from superclass did.ido matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.daq.system.mfdaq/matchedepochtable is inherited from superclass ndi.epoch.epochset mfdaq - Create a new multifunction DAQ object D = ndi.daq.system.mfdaq(NAME, THEFILENAVIGATOR) Creates a new ndi.daq.system.mfdaq object with NAME, and FILENAVIGATOR. This is an abstract class that is overridden by specific devices. Documentation for ndi.daq.system.mfdaq/mfdaq doc ndi.daq.system.mfdaq mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi.daq.system.mfdaq objects Returns a cell array of strings of supported channels of the ndi.daq.system.mfdaq class. These are the following: Channel type: | Description: ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also: ndi.daq.system.mfdaq/MFDAQ_TYPE mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX(CHANNELTYPE) Produces the channel name prefix for a given CHANNELTYPE. Channel type: | MFDAQ_PREFIX: --------------------------------------------------------- 'analog_in', 'ai' | 'ai' 'analog_out', 'ao' | 'ao' 'digital_in', 'di' | 'di' 'digital_out', 'do' | 'do' 'time','timestamp','t' | 't' 'auxiliary','aux','ax', | 'ax' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mk' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event', 'de', | 'dep' 'digital_in_event_pos','dep'| 'digital_in_event_neg','den'| 'den' 'digital_in_mark','dimp', | 'dimp' 'digital_in_mark_pos','dim' | 'digital_in_mark_neg','dimn'| 'dimn' 'text' | 'tx' See also: ndi.daq.system.mfdaq/MFDAQ_TYPE mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE(CHANNELTYPE) Produces the preferred long channel type name for a given CHANNELTYPE. Channel type: | MFDAQ_TYPE: --------------------------------------------------------- 'analog_in', 'ai' | 'analog_in' 'analog_out', 'ao' | 'analog_out' 'digital_in', 'di' | 'digital_in' 'digital_out', 'do' | 'digital_out' 'time','timestamp','t' | 'time' 'auxiliary','aux','ax', | 'auxiliary' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mark' 'event' or 'e' | 'event' See also: ndi.daq.system.mfdaq/MFDAQ_PREFIX ndi_daqsystem_gui_edit - function for editing an ndi.daq.system object OBJ = NDI_DAQSYSTEM_GUI_EDIT(NDI_DAQSYSTEM_OBJ) This function will bring up a graphical window to prompt the user to input parameters that edit the NDI_DAQSYSTEM_OBJ and return a new object. Help for ndi.daq.system.mfdaq/ndi_daqsystem_gui_edit is inherited from superclass ndi.daq.system newdocument - create a new document set for ndi.daq.system objects NDI_DOCUMENT_OBJ_SET = NEWDOCUMENT(NDI_DAQSYSTEM_OBJ) Creates a set of documents that describe an ndi.daq.system. Help for ndi.daq.system.mfdaq/newdocument is inherited from superclass ndi.daq.system numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.daq.system.mfdaq/numepochs is inherited from superclass ndi.epoch.epochset readchannels - read the data based on specified channels NB: because this is an abstract class, only empty records are returned DATA = READCHANNELS(MYDEV, CHANNELTYPE, CHANNEL, TIMEREF_OR_EPOCH, T0, T1) CHANNELTYPE is the type of channel to read ('analog','digitalin','digitalout', etc) CHANNEL is a vector with the identity of the channels to be read. TIMEREF_OR_EPOCH is either an NDI_CLOCK object indicating the clock for T0, T1, or it can be a single number, which will indicate the data are to be read from that epoch. DATA is the data collection for specific channels readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCH ,S0, S1) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is the epoch number to read from. DATA will have one column per channel. readevents - read events or markers of specified channels [TIMESTAMPS,DATA] = READEVENTS(MYDEV, CHANNELTYPE, CHANNEL, TIMEREF_OR_EPOCH, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc) CHANNEL is a vector with the identity of the channel(s) to be read. TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the clock for T0, T1, or it can be a single number, which will indicate the data are to be read from that epoch. TIMESTAMPS is an array of the timestamps read. If more than one channel is requested, then TIMESTAMPS will be a cell array of timestamp arrays, one per channel. DATA is an array of the event data. If more than one channel is requested, then DATA will be a cell array of data arrays, one per channel. readevents_epochsamples - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA, TIMEREF] = READEVENTS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCH, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc) CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the epoch number or epochID TIMESTAMPS is an array of the timestamps read. If more than one channel is requested, then TIMESTAMPS will be a cell array of timestamp arrays, one per channel. DATA is an is an array of the event data. For events, values are always 1. If more than one channel is requested, then DATA will be a cell array of data arrays, one per channel. TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to epoch N at time 0 as the reference. removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG(NDI_EPOCH_PARAM_OBJ, EPOCHNUMBER, NAME) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. Any tags with name 'NAME' will be removed from the tags in the epoch EPOCHNUMBER. tags in the epoch directory. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. NAME can be a single string, or it can be a cell array of strings (which will result in the removal of multiple tags). Help for ndi.daq.system.mfdaq/removeepochtag is inherited from superclass ndi.epoch.epochset.param resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.daq.system.mfdaq/EPOCHTABLE Help for ndi.daq.system.mfdaq/resetepochtable is inherited from superclass ndi.epoch.epochset samplerate - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE(DEV, EPOCH, CHANNELTYPE, CHANNEL) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. searchquery - search for an ndi.daq.system SQ = SEARCHQUERY(NDI_DAQSYSTEM_OBJ) Returns SQ, an ndi.query object that searches the database for the ndi.daq.system object Help for ndi.daq.system.mfdaq/searchquery is inherited from superclass ndi.daq.system session - return the ndi.session object associated with the ndi.daq.system object EXP = SESSION(NDI_DAQSYSTEM_OBJ) Return the ndi.session object associated with the ndi.daq.system of the ndi.daq.system object. Help for ndi.daq.system.mfdaq/session is inherited from superclass ndi.daq.system set_daqmetadatareader - set the cell array of ndi.daq.metadatareader objects NDI_DAQSYSTEM_OBJ = SET_DAQMETADATAREADER(NDI_DAQSYSTEM_OBJ, NEWDAQMETADATAREADERS) Sets the 'daqmetadatareader' property of an ndi.daq.system object. NEWDAQMETADATAREADERS should be a cell array of objects that have ndi.daq.metadatareader as a superclass. Help for ndi.daq.system.mfdaq/set_daqmetadatareader is inherited from superclass ndi.daq.system setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, EPOCHPROBEMAP, NUMBER, [OVERWRITE]) Sets or replaces the ndi.epoch.epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER. If OVERWRITE is present and is 1, then any existing epoch record is overwritten. Otherwise, an error is given if there is an existing epoch record. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem Help for ndi.daq.system.mfdaq/setepochprobemap is inherited from superclass ndi.epoch.epochset.param setepochtag - Set tag(s) for an epoch SETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will replace any tags in the epoch directory. If there is no epoch EPOCHNUMBER, then an error is returned. Help for ndi.daq.system.mfdaq/setepochtag is inherited from superclass ndi.epoch.epochset.param setsession - set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system) NDI_DAQSYSTEM_OBJ = SETSESSION(NDI_DEVICE_OBJ, SESSION) Set the SESSION property of an ndi.daq.system object's ndi.daq.system object Help for ndi.daq.system.mfdaq/setsession is inherited from superclass ndi.daq.system t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.daq.system.mfdaq/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.system.mfdaq.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQSYSTEM_OBJ, EPOCHPROBEMAP, EPOCH) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch EPOCH. For the abstract class ndi.daq.system, EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. See also: ndi.daq.system.mfdaq, ndi.epoch.epochprobemap_daqsystem Help for ndi.daq.system.mfdaq/verifyepochprobemap is inherited from superclass ndi.daq.system","title":"ndi.daq.system.mfdaq"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bsystem/mfdaq.m/#class-ndidaqsystemmfdaq","text":"NDI_DAQSYSTEM_MFDAQ - Multifunction DAQ object class The ndi.daq.system.mfdaq object class. This object allows one to address multifunction data acquisition systems that sample a variety of data types potentially simultaneously. The channel types that are supported are the following: Channel type (string): | Description ------------------------------------------------------------- 'analog_in' or 'ai' | Analog input 'analog_out' or 'ao' | Analog output 'digital_in' or 'di' | Digital input 'digital_out' or 'do' | Digital output 'time' or 't' | Time 'auxiliary_in','aux' or 'ax'| Auxiliary channels 'event', or 'e' | Event trigger (returns times of event trigger activation) 'mark', or 'mk' | Mark channel (contains value at specified times) See also: ndi.daq.system.mfdaq/ndi.daq.system.mfdaq","title":"CLASS ndi.daq.system.mfdaq"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bsystem/mfdaq.m/#superclasses","text":"ndi.daq.system , ndi.ido , did.ido , ndi.epoch.epochset.param , ndi.epoch.epochset , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bsystem/mfdaq.m/#properties","text":"Property Description name filenavigator daqreader daqmetadatareader identifier epochprobemap_class","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bsystem/mfdaq.m/#methods","text":"Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build the epochtable for an ndi.daq.system object cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object deleteepoch Delete an epoch and an epoch record from a device epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid return the epoch id string for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq are two ndi.daq.system objects equal? getcache return the NDI_CACHE and key for ndi.daq.system getchannels List the channels that are available on this device getchannelsepoch List the channels that are available on this device for an epoch getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs getepochprobemap Return the epoch record for an ndi.daq.system object getepochtag Get tag(s) from an epoch getmetadata get metadata for an epoch getprobes GETPROBES = Return all of the probes associated with an ndi.daq.system object ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the identifier of an DID.IDO object ingest ingest the data from an ndi.daq.system into the database issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? matchedepochtable compare a hash number from an epochtable to the current version mfdaq Create a new multifunction DAQ object mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type ndi_daqsystem_gui_edit function for editing an ndi.daq.system object newdocument create a new document set for ndi.daq.system objects numepochs Number of epochs of ndi.epoch.epochset readchannels read the data based on specified channels readchannels_epochsamples read the data based on specified channels readevents read events or markers of specified channels readevents_epochsamples read events or markers of specified channels for a specified epoch removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery search for an ndi.daq.system session return the ndi.session object associated with the ndi.daq.system object set_daqmetadatareader set the cell array of ndi.daq.metadatareader objects setepochprobemap Sets the epoch record of a particular epoch setepochtag Set tag(s) for an epoch setsession set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system) t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bsystem/mfdaq.m/#methods-help","text":"addepochtag - Add tag(s) for an epoch ADDEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will be added to any tags in the epoch EPOCHNUMBER. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. Help for ndi.daq.system.mfdaq/addepochtag is inherited from superclass ndi.epoch.epochset.param buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.daq.system.mfdaq/EPOCHNODES Help for ndi.daq.system.mfdaq/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - Build the epochtable for an ndi.daq.system object ET = BUILDEPOCHTABLE(NDI_DAQSYSTEM_OBJ) Returns the epoch table for NDI_DAQSYSTEM_OBJ Help for ndi.daq.system.mfdaq/buildepochtable is inherited from superclass ndi.daq.system cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.daq.system.mfdaq.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.daq.system.mfdaq/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.daq.system.mfdaq/cached_epochtable is inherited from superclass ndi.epoch.epochset deleteepoch - Delete an epoch and an epoch record from a device DELETEEPOCH(NDI_DAQSYSTEM_OBJ, NUMBER ... [REMOVEDATA]) Deletes the data and ndi.epoch.epochprobemap_daqsystem and epoch data for epoch NUMBER. If REMOVEDATA is present and is 1, the data and record are physically deleted. If REMOVEDATA is omitted or is 0, the data and record are renamed but not deleted from disk. In the abstract class, this command takes no action. See also: ndi.daq.system.mfdaq, ndi.epoch.epochprobemap_daqsystem Help for ndi.daq.system.mfdaq/deleteepoch is inherited from superclass ndi.daq.system epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.daq.system.mfdaq/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQSYSTEM_MFDAQ_OBJ, EPOCH) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). For the generic ndi.daq.system.mfdaq, this returns a single clock type 'dev_local'time'; See also: ndi.time.clocktype epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.daq.system.mfdaq/epochgraph is inherited from superclass ndi.epoch.epochset epochid - return the epoch id string for an epoch EID = EOPCHID(NDI_DAQSYSTEM_OBJ, EPOCH_NUMBER) Returns the EPOCHID for epoch with number EPOCH_NUMBER. In ndi.daq.system, this is determined by the associated ndi.file.navigator object. Help for ndi.daq.system.mfdaq/epochid is inherited from superclass ndi.daq.system epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.daq.system.mfdaq/epochnodes is inherited from superclass ndi.epoch.epochset epochprobemapfilename - return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME(NDI_DAQSYSTEM_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHPROBEMAPFILENAME for the ndi.daq.system epoch EPOCH_NUMBER_OR_ID. If there is no epoch NUMBER, an error is generated. The file name is returned with a full path. Help for ndi.daq.system.mfdaq/epochprobemapfilename is inherited from superclass ndi.daq.system epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME(NDI_EPOCHSET_OBJ) Returns the object name that is used when creating epoch nodes. If the class has a 'name' property, that property is used. Otherwise, 'unknown' is used. Help for ndi.daq.system.mfdaq/epochsetname is inherited from superclass ndi.epoch.epochset epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.daq.system.mfdaq/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.daq.system.mfdaq/epochtableentry is inherited from superclass ndi.epoch.epochset epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME(NDI_FILENAVIGATOR_OBJ, EPOCHNUMBER) In this base class, empty is returned because it is an abstract class. Help for ndi.daq.system.mfdaq/epochtagfilename is inherited from superclass ndi.daq.system eq - are two ndi.daq.system objects equal? B = EQ(NDI_DAQSYSTEM_OBJ_A, NDI_DAQSYSTEM_OBJ_B) Returns 1 if the ndi.daq.system objects have the same name and class type. The objects do not have to be the same handle or have the same space in memory. Otherwise, returns 0. Help for ndi.daq.system.mfdaq/eq is inherited from superclass ndi.daq.system getcache - return the NDI_CACHE and key for ndi.daq.system [CACHE,KEY] = GETCACHE(NDI_DAQSYSTEM_OBJ) Returns the CACHE and KEY for the ndi.daq.system object. The CACHE is returned from the associated session. The KEY is the string 'daqsystem_' followed by the object's id. See also: ndi.daq.system.mfdaq, NDI_BASE Help for ndi.daq.system.mfdaq/getcache is inherited from superclass ndi.daq.system getchannels - List the channels that are available on this device CHANNELS = GETCHANNELS(NDI_DAQSYSTEM_MFDAQ_OBJ) Returns the channel list of acquired channels in this session The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The time channel that has timing information for that channel getchannelsepoch - List the channels that are available on this device for an epoch CHANNELS = GETCHANNELSEPOCH(NDI_DAQSYSTEM_MFDAQ_OBJ, EPOCH) Returns the channel list of acquired channels in this session for a given EPOCH (can be epochid or number) The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The time channel that has timing information for that channel getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.daq.system.mfdaq/getepocharray is inherited from superclass ndi.epoch.epochset getepochprobemap - Return the epoch record for an ndi.daq.system object EPOCHPROBEMAP = GETEPOCHPROBEMAP(NDI_DAQSYSTEM_OBJ, EPOCH) Inputs: NDI_EPOCHSET_PARAM_OBJ - the ndi.epoch.epochset.param object EPOCH - the epoch number or identifier Output: EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME The ndi.daq.system GETEPOCHPROBEMAP checks its DAQREADER object to see if it has a method called 'GETEPOCHPROBEMAP' that accepts the EPOCHPROBEMAP filename and the EPOCHFILES for that epoch. If it does have a method by that name, it is called and the output returned. If it does not, then the FILENAVIGATOR parameter's method is called. Help for ndi.daq.system.mfdaq/getepochprobemap is inherited from superclass ndi.daq.system getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. If there are no files in EPOCHNUMBER then an error is returned. Help for ndi.daq.system.mfdaq/getepochtag is inherited from superclass ndi.epoch.epochset.param getmetadata - get metadata for an epoch METADATA = GETMETADATA(NDI_DAQSYSTEM_OBJ, EPOCH, CHANNEL) Returns the metadata (cell array of entries) for EPOCH for metadata channel CHANNEL. CHANNEL indicates the number of the ndi.daq.metadatareader to use to obtain the data. Help for ndi.daq.system.mfdaq/getmetadata is inherited from superclass ndi.daq.system getprobes - GETPROBES = Return all of the probes associated with an ndi.daq.system object PROBES_STRUCT = GETPROBES(NDI_DAQSYSTEM_OBJ) Returns all probes associated with the ndi.daq.system object NDI_DEVICE_OBJ This function returns a structure with fields of all unique probes across all EPOCHPROBEMAP objects returned in ndi.daq.system/GETEPOCHPROBEMAP. The fields are 'name', 'reference', and 'type'. Help for ndi.daq.system.mfdaq/getprobes is inherited from superclass ndi.daq.system ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.daq.system.mfdaq.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.daq.system.mfdaq/id is inherited from superclass did.ido ingest - ingest the data from an ndi.daq.system into the database [B,D] = INGEST(NDI_DAQSYSTEM_OBJ) Ingest any uningested epochs from an ndi.daq.system object into the database. B is 1 if the operation is successful. D is a cell array of new ndi.document objects that were created and added to the database. Help for ndi.daq.system.mfdaq/ingest is inherited from superclass ndi.daq.system issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset objects, this returns 1. For some object types (ndi.probe.*, for example) this will return 0 so that the underlying ndi.daq.system epochs are added. Help for ndi.daq.system.mfdaq/issyncgraphroot is inherited from superclass ndi.epoch.epochset isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.daq.system.mfdaq.isvalid is inherited from superclass did.ido matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.daq.system.mfdaq/matchedepochtable is inherited from superclass ndi.epoch.epochset mfdaq - Create a new multifunction DAQ object D = ndi.daq.system.mfdaq(NAME, THEFILENAVIGATOR) Creates a new ndi.daq.system.mfdaq object with NAME, and FILENAVIGATOR. This is an abstract class that is overridden by specific devices. Documentation for ndi.daq.system.mfdaq/mfdaq doc ndi.daq.system.mfdaq mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi.daq.system.mfdaq objects Returns a cell array of strings of supported channels of the ndi.daq.system.mfdaq class. These are the following: Channel type: | Description: ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also: ndi.daq.system.mfdaq/MFDAQ_TYPE mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX(CHANNELTYPE) Produces the channel name prefix for a given CHANNELTYPE. Channel type: | MFDAQ_PREFIX: --------------------------------------------------------- 'analog_in', 'ai' | 'ai' 'analog_out', 'ao' | 'ao' 'digital_in', 'di' | 'di' 'digital_out', 'do' | 'do' 'time','timestamp','t' | 't' 'auxiliary','aux','ax', | 'ax' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mk' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event', 'de', | 'dep' 'digital_in_event_pos','dep'| 'digital_in_event_neg','den'| 'den' 'digital_in_mark','dimp', | 'dimp' 'digital_in_mark_pos','dim' | 'digital_in_mark_neg','dimn'| 'dimn' 'text' | 'tx' See also: ndi.daq.system.mfdaq/MFDAQ_TYPE mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE(CHANNELTYPE) Produces the preferred long channel type name for a given CHANNELTYPE. Channel type: | MFDAQ_TYPE: --------------------------------------------------------- 'analog_in', 'ai' | 'analog_in' 'analog_out', 'ao' | 'analog_out' 'digital_in', 'di' | 'digital_in' 'digital_out', 'do' | 'digital_out' 'time','timestamp','t' | 'time' 'auxiliary','aux','ax', | 'auxiliary' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mark' 'event' or 'e' | 'event' See also: ndi.daq.system.mfdaq/MFDAQ_PREFIX ndi_daqsystem_gui_edit - function for editing an ndi.daq.system object OBJ = NDI_DAQSYSTEM_GUI_EDIT(NDI_DAQSYSTEM_OBJ) This function will bring up a graphical window to prompt the user to input parameters that edit the NDI_DAQSYSTEM_OBJ and return a new object. Help for ndi.daq.system.mfdaq/ndi_daqsystem_gui_edit is inherited from superclass ndi.daq.system newdocument - create a new document set for ndi.daq.system objects NDI_DOCUMENT_OBJ_SET = NEWDOCUMENT(NDI_DAQSYSTEM_OBJ) Creates a set of documents that describe an ndi.daq.system. Help for ndi.daq.system.mfdaq/newdocument is inherited from superclass ndi.daq.system numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.daq.system.mfdaq/numepochs is inherited from superclass ndi.epoch.epochset readchannels - read the data based on specified channels NB: because this is an abstract class, only empty records are returned DATA = READCHANNELS(MYDEV, CHANNELTYPE, CHANNEL, TIMEREF_OR_EPOCH, T0, T1) CHANNELTYPE is the type of channel to read ('analog','digitalin','digitalout', etc) CHANNEL is a vector with the identity of the channels to be read. TIMEREF_OR_EPOCH is either an NDI_CLOCK object indicating the clock for T0, T1, or it can be a single number, which will indicate the data are to be read from that epoch. DATA is the data collection for specific channels readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCH ,S0, S1) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is the epoch number to read from. DATA will have one column per channel. readevents - read events or markers of specified channels [TIMESTAMPS,DATA] = READEVENTS(MYDEV, CHANNELTYPE, CHANNEL, TIMEREF_OR_EPOCH, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc) CHANNEL is a vector with the identity of the channel(s) to be read. TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the clock for T0, T1, or it can be a single number, which will indicate the data are to be read from that epoch. TIMESTAMPS is an array of the timestamps read. If more than one channel is requested, then TIMESTAMPS will be a cell array of timestamp arrays, one per channel. DATA is an array of the event data. If more than one channel is requested, then DATA will be a cell array of data arrays, one per channel. readevents_epochsamples - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA, TIMEREF] = READEVENTS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCH, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc) CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the epoch number or epochID TIMESTAMPS is an array of the timestamps read. If more than one channel is requested, then TIMESTAMPS will be a cell array of timestamp arrays, one per channel. DATA is an is an array of the event data. For events, values are always 1. If more than one channel is requested, then DATA will be a cell array of data arrays, one per channel. TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to epoch N at time 0 as the reference. removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG(NDI_EPOCH_PARAM_OBJ, EPOCHNUMBER, NAME) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. Any tags with name 'NAME' will be removed from the tags in the epoch EPOCHNUMBER. tags in the epoch directory. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. NAME can be a single string, or it can be a cell array of strings (which will result in the removal of multiple tags). Help for ndi.daq.system.mfdaq/removeepochtag is inherited from superclass ndi.epoch.epochset.param resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.daq.system.mfdaq/EPOCHTABLE Help for ndi.daq.system.mfdaq/resetepochtable is inherited from superclass ndi.epoch.epochset samplerate - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE(DEV, EPOCH, CHANNELTYPE, CHANNEL) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. searchquery - search for an ndi.daq.system SQ = SEARCHQUERY(NDI_DAQSYSTEM_OBJ) Returns SQ, an ndi.query object that searches the database for the ndi.daq.system object Help for ndi.daq.system.mfdaq/searchquery is inherited from superclass ndi.daq.system session - return the ndi.session object associated with the ndi.daq.system object EXP = SESSION(NDI_DAQSYSTEM_OBJ) Return the ndi.session object associated with the ndi.daq.system of the ndi.daq.system object. Help for ndi.daq.system.mfdaq/session is inherited from superclass ndi.daq.system set_daqmetadatareader - set the cell array of ndi.daq.metadatareader objects NDI_DAQSYSTEM_OBJ = SET_DAQMETADATAREADER(NDI_DAQSYSTEM_OBJ, NEWDAQMETADATAREADERS) Sets the 'daqmetadatareader' property of an ndi.daq.system object. NEWDAQMETADATAREADERS should be a cell array of objects that have ndi.daq.metadatareader as a superclass. Help for ndi.daq.system.mfdaq/set_daqmetadatareader is inherited from superclass ndi.daq.system setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, EPOCHPROBEMAP, NUMBER, [OVERWRITE]) Sets or replaces the ndi.epoch.epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER. If OVERWRITE is present and is 1, then any existing epoch record is overwritten. Otherwise, an error is given if there is an existing epoch record. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem Help for ndi.daq.system.mfdaq/setepochprobemap is inherited from superclass ndi.epoch.epochset.param setepochtag - Set tag(s) for an epoch SETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will replace any tags in the epoch directory. If there is no epoch EPOCHNUMBER, then an error is returned. Help for ndi.daq.system.mfdaq/setepochtag is inherited from superclass ndi.epoch.epochset.param setsession - set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system) NDI_DAQSYSTEM_OBJ = SETSESSION(NDI_DEVICE_OBJ, SESSION) Set the SESSION property of an ndi.daq.system object's ndi.daq.system object Help for ndi.daq.system.mfdaq/setsession is inherited from superclass ndi.daq.system t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.daq.system.mfdaq/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.daq.system.mfdaq.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQSYSTEM_OBJ, EPOCHPROBEMAP, EPOCH) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch EPOCH. For the abstract class ndi.daq.system, EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. See also: ndi.daq.system.mfdaq, ndi.epoch.epochprobemap_daqsystem Help for ndi.daq.system.mfdaq/verifyepochprobemap is inherited from superclass ndi.daq.system","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_daqsystem_image.m/","text":"CLASS ndi.daq/premature.ndi_daqsystem_image This is an abstract superclass of all imaging device drivers Superclasses none Properties none Methods none","title":"ndi.daq/premature.ndi_daqsystem_image"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_daqsystem_image.m/#class-ndidaqprematurendi_daqsystem_image","text":"This is an abstract superclass of all imaging device drivers","title":"CLASS ndi.daq/premature.ndi_daqsystem_image"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_daqsystem_image.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_daqsystem_image.m/#properties","text":"none","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_daqsystem_image.m/#methods","text":"none","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_daqsystem_image_tiffstack.m/","text":"CLASS ndi.daq/premature.ndi_daqsystem_image_tiffstack ndi_daqsystem_image_tiffstack is a driver used to read images from a tif Superclasses none Properties none Methods none","title":"ndi.daq/premature.ndi_daqsystem_image_tiffstack"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_daqsystem_image_tiffstack.m/#class-ndidaqprematurendi_daqsystem_image_tiffstack","text":"ndi_daqsystem_image_tiffstack is a driver used to read images from a tif","title":"CLASS ndi.daq/premature.ndi_daqsystem_image_tiffstack"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_daqsystem_image_tiffstack.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_daqsystem_image_tiffstack.m/#properties","text":"none","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_daqsystem_image_tiffstack.m/#methods","text":"none","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_image.m/","text":"CLASS ndi.daq/premature.ndi_image An abstract class defining the main functions of the device image drivers. (frame and numframe) Superclasses none Properties none Methods none","title":"ndi.daq/premature.ndi_image"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_image.m/#class-ndidaqprematurendi_image","text":"An abstract class defining the main functions of the device image drivers. (frame and numframe)","title":"CLASS ndi.daq/premature.ndi_image"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_image.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_image.m/#properties","text":"none","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_image.m/#methods","text":"none","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_image_tiffstack.m/","text":"CLASS ndi.daq/premature.ndi_image_tiffstack function d = sAPI_image_tiffstack(name,thefilenavigator, exp) sAPI_image_tiffstack_struct = struct([]); Superclasses none Properties none Methods none","title":"ndi.daq/premature.ndi_image_tiffstack"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_image_tiffstack.m/#class-ndidaqprematurendi_image_tiffstack","text":"function d = sAPI_image_tiffstack(name,thefilenavigator, exp) sAPI_image_tiffstack_struct = struct([]);","title":"CLASS ndi.daq/premature.ndi_image_tiffstack"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_image_tiffstack.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_image_tiffstack.m/#properties","text":"none","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_image_tiffstack.m/#methods","text":"none","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdata/evaluate_fitcurve.m/","text":"ndi.data.evaluate_fitcurve EVALUATE_FITCURVE - evaluate a fitcurve (the standard fitcurve type) Y = EVALUATE_FITCURVE(FITCURVE_DOC, X, ...) Evaluate an FITCURVE document function for indicated values of X.","title":"ndi.data.evaluate_fitcurve"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdata/evaluate_fitcurve.m/#ndidataevaluate_fitcurve","text":"EVALUATE_FITCURVE - evaluate a fitcurve (the standard fitcurve type) Y = EVALUATE_FITCURVE(FITCURVE_DOC, X, ...) Evaluate an FITCURVE document function for indicated values of X.","title":"ndi.data.evaluate_fitcurve"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/binarydoc.m/","text":"CLASS ndi.database.binarydoc NDI_BINARYDOC - a binary file class that handles reading/writing Superclasses handle Properties none Methods Method Description addlistener addlistener Add listener for event. binarydoc a binary file class that handles reading/writing delete close an ndi.database.binarydoc and delete its handle eq == (EQ) Test handle equality. fclose Close one or all open files feof Test for end of file findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. fopen Open file or obtain information about open files fread Read data from binary file fseek Move file position pointer to specified position in file ftell Current location of file position pointer in file fwrite Write data to binary file ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. Methods help addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.binarydoc, matlab.metadata.Property, events Help for ndi.database.binarydoc/addlistener is inherited from superclass handle binarydoc - a binary file class that handles reading/writing Documentation for ndi.database.binarydoc/binarydoc doc ndi.database.binarydoc delete - close an ndi.database.binarydoc and delete its handle DELETE(NDI_BINARYDOC_OBJ) Closes an ndi.database.binarydoc (if necessary) and then deletes the handle. eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/GE, NDI.DATABASE.BINARYDOC/GT, NDI.DATABASE.BINARYDOC/LE, NDI.DATABASE.BINARYDOC/LT, NDI.DATABASE.BINARYDOC/NE Help for ndi.database.binarydoc/eq is inherited from superclass handle fclose - Close one or all open files This MATLAB function closes an open file. Syntax fclose(fileID) fclose('all') status = fclose(___) Input Arguments fileID - File identifier integer Examples openExample('matlab/ReadFileEx28668493Example') See also ferror, fopen, frewind, fseek, ftell, feof, fscanf, fprintf, fread, fwrite Introduced in MATLAB before R2006a Documentation for fclose doc fclose feof - Test for end of file This MATLAB function returns a 1 if the end of the file specified by fileID was reached by a previous operation. Syntax status = feof(fileID) Input Arguments fileID - File identifier integer Examples openExample('matlab/ReadUntilEndOfFileEx74121020Example') See also fclose, ferror, fopen, frewind, fseek, ftell Introduced in MATLAB before R2006a Documentation for feof doc feof findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.BINARYDOC Help for ndi.database.binarydoc/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.binarydoc, ndi.database.binarydoc/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.binarydoc/findprop is inherited from superclass handle fopen - Open file or obtain information about open files This MATLAB function opens the file, filename, for binary read access, and returns an integer file identifier equal to or greater than 3. Syntax fileID = fopen(filename) fileID = fopen(filename,permission) fileID = fopen(filename,permission,machinefmt,encodingIn) [fileID,errmsg] = fopen(___) filename = fopen(fileID) [filename,permission,machinefmt,encodingOut] = fopen(fileID) Input Arguments filename - Name of file to open string scalar | character vector permission - File access type 'r' (default) | 'w' | 'a' | 'r+' | 'w+' | 'a+' | 'A' | 'W' | ... machinefmt - Order for reading or writing bytes or bits 'n' (default) | 'b' | 'l' | 's' | 'a' | ... encodingIn - Character encoding 'UTF-8' | 'ISO-8859-1' | 'windows-1251' | 'windows-1252' | ... fileID - File identifier of an open file integer Examples web /Applications/MATLAB_R2024b.app/help/matlab/ref/fopen.html#btrnibo-2 web /Applications/MATLAB_R2024b.app/help/matlab/ref/fopen.html#btrnoom-1 web /Applications/MATLAB_R2024b.app/help/matlab/ref/fopen.html#btrnoon-1 web /Applications/MATLAB_R2024b.app/help/matlab/ref/fopen.html#btrnooo-1 See also fclose, openedFiles, ferror, fseek, ftell, feof, fscanf, fprintf, fread, fwrite, frewind Introduced in MATLAB before R2006a Documentation for fopen doc fopen fread - Read data from binary file This MATLAB function reads data from an open binary file into column vector A and positions the file pointer at the end-of-file marker. Syntax A = fread(fileID) A = fread(fileID,sizeA) A = fread(fileID,precision) A = fread(fileID,sizeA,precision) A = fread(___,skip) A = fread(___,machinefmt) [A,count] = fread(___) Input Arguments fileID - File identifier integer sizeA - Dimensions of output array Inf (default) | integer | two-element row vector precision - Class and size of values to read 'uint8=>double' (default) | character vector or string scalar skip - Number of bytes to skip 0 (default) | scalar machinefmt - Order for reading bytes 'n' (default) | 'b' | 'l' | 's' | 'a' | ... Output Arguments A - File data column vector | matrix count - Number of characters read scalar Examples openExample('matlab/ReadEntireFileofuint8DataExample') openExample('matlab/ReadEntireFileofDoublePrecisionDataExample') openExample('matlab/ReadSelectedRowsorColumnsfromFileExample') openExample('matlab/ReadDigitsofBinaryCodedDecimalValuesExample') See also fclose, fgetl, fopen, fscanf, fprintf, fwrite, fseek, ftell Introduced in MATLAB before R2006a Documentation for fread doc fread fseek - Move file position pointer to specified position in file This MATLAB function sets the file position indicator offset bytes from origin in the specified file. Syntax fseek(fileID,offset,origin) status = fseek(___) Input Arguments fileID - File identifier integer offset - Number of bytes integer origin - Starting location integer | character vector | string Examples openExample('matlab/SeekToNewPositionInFileEx03609470Example') See also fclose, feof, ferror, fopen, frewind, ftell, fscanf, fprintf, fread, fwrite Introduced in MATLAB before R2006a Documentation for fseek doc fseek ftell - Current location of file position pointer in file This MATLAB function returns the current location of the position pointer in the specified file. Syntax position = ftell(fileID) Input Arguments fileID - File identifier integer Examples openExample('matlab/FindCurrentFilePositionEx71849017Example') See also fclose, feof, ferror, fopen, frewind, fseek, fscanf, fprintf, fread, fwrite Introduced in MATLAB before R2006a Documentation for ftell doc ftell fwrite - Write data to binary file This MATLAB function writes the elements of array A as 8-bit unsigned integers to a binary file in column order. Syntax fwrite(fileID,A) fwrite(fileID,A,precision) fwrite(fileID,A,precision,skip) fwrite(fileID,A,precision,skip,machinefmt) count = fwrite(___) Input Arguments fileID - File identifier integer | 1 | 2 A - Data to write numeric array | character array | string array precision - Class and size of values to write 'uint8' (default) | character vector | string scalar skip - Number of bytes to skip 0 (default) | scalar machinefmt - Order for writing bytes 'n' (default) | 'b' | 'l' | 's' | 'a' Examples openExample('matlab/WriteUint8DataToFileExample') openExample('matlab/Write4byteIntegersToFileExample') openExample('matlab/AppendDataToBinaryFileExample') openExample('matlab/WriteBinaryFileWithBigendianByteOrderingExample') See also fclose, ferror, fopen, fprintf, fread, fscanf, fseek, ftell Introduced in MATLAB before R2006a Documentation for fwrite doc fwrite ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/EQ, NDI.DATABASE.BINARYDOC/GT, NDI.DATABASE.BINARYDOC/LE, NDI.DATABASE.BINARYDOC/LT, NDI.DATABASE.BINARYDOC/NE Help for ndi.database.binarydoc/ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/EQ, NDI.DATABASE.BINARYDOC/GE, NDI.DATABASE.BINARYDOC/LE, NDI.DATABASE.BINARYDOC/LT, NDI.DATABASE.BINARYDOC/NE Help for ndi.database.binarydoc/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/DELETE Help for ndi.database.binarydoc/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/EQ, NDI.DATABASE.BINARYDOC/GE, NDI.DATABASE.BINARYDOC/GT, NDI.DATABASE.BINARYDOC/LT, NDI.DATABASE.BINARYDOC/NE Help for ndi.database.binarydoc/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.binarydoc, matlab.metadata.Property, events Help for ndi.database.binarydoc/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/EQ, NDI.DATABASE.BINARYDOC/GE, NDI.DATABASE.BINARYDOC/GT, NDI.DATABASE.BINARYDOC/LE, NDI.DATABASE.BINARYDOC/NE Help for ndi.database.binarydoc/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/EQ, NDI.DATABASE.BINARYDOC/GE, NDI.DATABASE.BINARYDOC/GT, NDI.DATABASE.BINARYDOC/LE, NDI.DATABASE.BINARYDOC/LT Help for ndi.database.binarydoc/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/ADDLISTENER, NDI.DATABASE.BINARYDOC/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.binarydoc/notify is inherited from superclass handle","title":"ndi.database.binarydoc"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/binarydoc.m/#class-ndidatabasebinarydoc","text":"NDI_BINARYDOC - a binary file class that handles reading/writing","title":"CLASS ndi.database.binarydoc"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/binarydoc.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/binarydoc.m/#properties","text":"none","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/binarydoc.m/#methods","text":"Method Description addlistener addlistener Add listener for event. binarydoc a binary file class that handles reading/writing delete close an ndi.database.binarydoc and delete its handle eq == (EQ) Test handle equality. fclose Close one or all open files feof Test for end of file findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. fopen Open file or obtain information about open files fread Read data from binary file fseek Move file position pointer to specified position in file ftell Current location of file position pointer in file fwrite Write data to binary file ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/binarydoc.m/#methods-help","text":"addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.binarydoc, matlab.metadata.Property, events Help for ndi.database.binarydoc/addlistener is inherited from superclass handle binarydoc - a binary file class that handles reading/writing Documentation for ndi.database.binarydoc/binarydoc doc ndi.database.binarydoc delete - close an ndi.database.binarydoc and delete its handle DELETE(NDI_BINARYDOC_OBJ) Closes an ndi.database.binarydoc (if necessary) and then deletes the handle. eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/GE, NDI.DATABASE.BINARYDOC/GT, NDI.DATABASE.BINARYDOC/LE, NDI.DATABASE.BINARYDOC/LT, NDI.DATABASE.BINARYDOC/NE Help for ndi.database.binarydoc/eq is inherited from superclass handle fclose - Close one or all open files This MATLAB function closes an open file. Syntax fclose(fileID) fclose('all') status = fclose(___) Input Arguments fileID - File identifier integer Examples openExample('matlab/ReadFileEx28668493Example') See also ferror, fopen, frewind, fseek, ftell, feof, fscanf, fprintf, fread, fwrite Introduced in MATLAB before R2006a Documentation for fclose doc fclose feof - Test for end of file This MATLAB function returns a 1 if the end of the file specified by fileID was reached by a previous operation. Syntax status = feof(fileID) Input Arguments fileID - File identifier integer Examples openExample('matlab/ReadUntilEndOfFileEx74121020Example') See also fclose, ferror, fopen, frewind, fseek, ftell Introduced in MATLAB before R2006a Documentation for feof doc feof findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.BINARYDOC Help for ndi.database.binarydoc/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.binarydoc, ndi.database.binarydoc/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.binarydoc/findprop is inherited from superclass handle fopen - Open file or obtain information about open files This MATLAB function opens the file, filename, for binary read access, and returns an integer file identifier equal to or greater than 3. Syntax fileID = fopen(filename) fileID = fopen(filename,permission) fileID = fopen(filename,permission,machinefmt,encodingIn) [fileID,errmsg] = fopen(___) filename = fopen(fileID) [filename,permission,machinefmt,encodingOut] = fopen(fileID) Input Arguments filename - Name of file to open string scalar | character vector permission - File access type 'r' (default) | 'w' | 'a' | 'r+' | 'w+' | 'a+' | 'A' | 'W' | ... machinefmt - Order for reading or writing bytes or bits 'n' (default) | 'b' | 'l' | 's' | 'a' | ... encodingIn - Character encoding 'UTF-8' | 'ISO-8859-1' | 'windows-1251' | 'windows-1252' | ... fileID - File identifier of an open file integer Examples web /Applications/MATLAB_R2024b.app/help/matlab/ref/fopen.html#btrnibo-2 web /Applications/MATLAB_R2024b.app/help/matlab/ref/fopen.html#btrnoom-1 web /Applications/MATLAB_R2024b.app/help/matlab/ref/fopen.html#btrnoon-1 web /Applications/MATLAB_R2024b.app/help/matlab/ref/fopen.html#btrnooo-1 See also fclose, openedFiles, ferror, fseek, ftell, feof, fscanf, fprintf, fread, fwrite, frewind Introduced in MATLAB before R2006a Documentation for fopen doc fopen fread - Read data from binary file This MATLAB function reads data from an open binary file into column vector A and positions the file pointer at the end-of-file marker. Syntax A = fread(fileID) A = fread(fileID,sizeA) A = fread(fileID,precision) A = fread(fileID,sizeA,precision) A = fread(___,skip) A = fread(___,machinefmt) [A,count] = fread(___) Input Arguments fileID - File identifier integer sizeA - Dimensions of output array Inf (default) | integer | two-element row vector precision - Class and size of values to read 'uint8=>double' (default) | character vector or string scalar skip - Number of bytes to skip 0 (default) | scalar machinefmt - Order for reading bytes 'n' (default) | 'b' | 'l' | 's' | 'a' | ... Output Arguments A - File data column vector | matrix count - Number of characters read scalar Examples openExample('matlab/ReadEntireFileofuint8DataExample') openExample('matlab/ReadEntireFileofDoublePrecisionDataExample') openExample('matlab/ReadSelectedRowsorColumnsfromFileExample') openExample('matlab/ReadDigitsofBinaryCodedDecimalValuesExample') See also fclose, fgetl, fopen, fscanf, fprintf, fwrite, fseek, ftell Introduced in MATLAB before R2006a Documentation for fread doc fread fseek - Move file position pointer to specified position in file This MATLAB function sets the file position indicator offset bytes from origin in the specified file. Syntax fseek(fileID,offset,origin) status = fseek(___) Input Arguments fileID - File identifier integer offset - Number of bytes integer origin - Starting location integer | character vector | string Examples openExample('matlab/SeekToNewPositionInFileEx03609470Example') See also fclose, feof, ferror, fopen, frewind, ftell, fscanf, fprintf, fread, fwrite Introduced in MATLAB before R2006a Documentation for fseek doc fseek ftell - Current location of file position pointer in file This MATLAB function returns the current location of the position pointer in the specified file. Syntax position = ftell(fileID) Input Arguments fileID - File identifier integer Examples openExample('matlab/FindCurrentFilePositionEx71849017Example') See also fclose, feof, ferror, fopen, frewind, fseek, fscanf, fprintf, fread, fwrite Introduced in MATLAB before R2006a Documentation for ftell doc ftell fwrite - Write data to binary file This MATLAB function writes the elements of array A as 8-bit unsigned integers to a binary file in column order. Syntax fwrite(fileID,A) fwrite(fileID,A,precision) fwrite(fileID,A,precision,skip) fwrite(fileID,A,precision,skip,machinefmt) count = fwrite(___) Input Arguments fileID - File identifier integer | 1 | 2 A - Data to write numeric array | character array | string array precision - Class and size of values to write 'uint8' (default) | character vector | string scalar skip - Number of bytes to skip 0 (default) | scalar machinefmt - Order for writing bytes 'n' (default) | 'b' | 'l' | 's' | 'a' Examples openExample('matlab/WriteUint8DataToFileExample') openExample('matlab/Write4byteIntegersToFileExample') openExample('matlab/AppendDataToBinaryFileExample') openExample('matlab/WriteBinaryFileWithBigendianByteOrderingExample') See also fclose, ferror, fopen, fprintf, fread, fscanf, fseek, ftell Introduced in MATLAB before R2006a Documentation for fwrite doc fwrite ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/EQ, NDI.DATABASE.BINARYDOC/GT, NDI.DATABASE.BINARYDOC/LE, NDI.DATABASE.BINARYDOC/LT, NDI.DATABASE.BINARYDOC/NE Help for ndi.database.binarydoc/ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/EQ, NDI.DATABASE.BINARYDOC/GE, NDI.DATABASE.BINARYDOC/LE, NDI.DATABASE.BINARYDOC/LT, NDI.DATABASE.BINARYDOC/NE Help for ndi.database.binarydoc/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/DELETE Help for ndi.database.binarydoc/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/EQ, NDI.DATABASE.BINARYDOC/GE, NDI.DATABASE.BINARYDOC/GT, NDI.DATABASE.BINARYDOC/LT, NDI.DATABASE.BINARYDOC/NE Help for ndi.database.binarydoc/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.binarydoc, matlab.metadata.Property, events Help for ndi.database.binarydoc/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/EQ, NDI.DATABASE.BINARYDOC/GE, NDI.DATABASE.BINARYDOC/GT, NDI.DATABASE.BINARYDOC/LE, NDI.DATABASE.BINARYDOC/NE Help for ndi.database.binarydoc/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/EQ, NDI.DATABASE.BINARYDOC/GE, NDI.DATABASE.BINARYDOC/GT, NDI.DATABASE.BINARYDOC/LE, NDI.DATABASE.BINARYDOC/LT Help for ndi.database.binarydoc/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/ADDLISTENER, NDI.DATABASE.BINARYDOC/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.binarydoc/notify is inherited from superclass handle","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/ingestion_help.m/","text":"CLASS ndi.database.ingestion_help A class that provides helper methods for ingesting raw data files into the database Superclasses none Properties none Methods Method Description ingest create new documents that produce the ingestion of an ingestion_help_obj ingestion_class the name of the ingestion class for this object ingestion_help helper class with methods to help ingest raw data files Methods help ingest - create new documents that produce the ingestion of an ingestion_help_obj [DOCS_OUT, DOC_IDS_REMOVE] = INGEST(INGESTION_HELP_OBJ) Perform the actions necessary to make a database-ingested representation of an INGESTION_HELP_OBJ object. DOCS_OUT is a cell array of ndi.document objects that comprise the new representation. DOCS_IDS_REMOVE are a cell array of ndi.document id numbers that should be removed (or not copied) from the existing database when creating the ingested version. In the abstract class, an empty cell array is returned for all outputs. ingestion_class - the name of the ingestion class for this object CNAME = INGESTION_CLASS(INGESTION_HELP_OBJ) Returns the class name of the object that should be created if this object class is ingested into the database (and won't have access to any raw data). For the base class, this simply returns empty. ingestion_help - helper class with methods to help ingest raw data files OBJ = ndi.database.ingestion_help() Documentation for ndi.database.ingestion_help/ingestion_help doc ndi.database.ingestion_help","title":"ndi.database.ingestion_help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/ingestion_help.m/#class-ndidatabaseingestion_help","text":"A class that provides helper methods for ingesting raw data files into the database","title":"CLASS ndi.database.ingestion_help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/ingestion_help.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/ingestion_help.m/#properties","text":"none","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/ingestion_help.m/#methods","text":"Method Description ingest create new documents that produce the ingestion of an ingestion_help_obj ingestion_class the name of the ingestion class for this object ingestion_help helper class with methods to help ingest raw data files","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/ingestion_help.m/#methods-help","text":"ingest - create new documents that produce the ingestion of an ingestion_help_obj [DOCS_OUT, DOC_IDS_REMOVE] = INGEST(INGESTION_HELP_OBJ) Perform the actions necessary to make a database-ingested representation of an INGESTION_HELP_OBJ object. DOCS_OUT is a cell array of ndi.document objects that comprise the new representation. DOCS_IDS_REMOVE are a cell array of ndi.document id numbers that should be removed (or not copied) from the existing database when creating the ingested version. In the abstract class, an empty cell array is returned for all outputs. ingestion_class - the name of the ingestion class for this object CNAME = INGESTION_CLASS(INGESTION_HELP_OBJ) Returns the class name of the object that should be created if this object class is ingested into the database (and won't have access to any raw data). For the base class, this simply returns empty. ingestion_help - helper class with methods to help ingest raw data files OBJ = ndi.database.ingestion_help() Documentation for ndi.database.ingestion_help/ingestion_help doc ndi.database.ingestion_help","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bapp/%2Bdataset_viewer/%2Butility/listLocalDatasets.m/","text":"ndi.database.app.dataset_viewer.utility.listLocalDatasets listLocalDatasets Load table (inventory) of local datasets. Syntax: datasets = listLocalDatasets() returns a table containing details about local datasets. The function reads information from a session table file and extracts dataset names based on the last folder name in the dataset path. Output: datasets - A table with columns representing dataset details such as the dataset path and name. Example: datasets = ndi.database.dataset_viewer.utility.listLocalDatasets(); disp(datasets);","title":"ndi.database.app.dataset_viewer.utility.listLocalDatasets"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bapp/%2Bdataset_viewer/%2Butility/listLocalDatasets.m/#ndidatabaseappdataset_viewerutilitylistlocaldatasets","text":"listLocalDatasets Load table (inventory) of local datasets. Syntax: datasets = listLocalDatasets() returns a table containing details about local datasets. The function reads information from a session table file and extracts dataset names based on the last folder name in the dataset path. Output: datasets - A table with columns representing dataset details such as the dataset path and name. Example: datasets = ndi.database.dataset_viewer.utility.listLocalDatasets(); disp(datasets);","title":"ndi.database.app.dataset_viewer.utility.listLocalDatasets"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bapp/%2Bdataset_viewer/%2Butility/listRemoteDatasets.m/","text":"ndi.database.app.dataset_viewer.utility.listRemoteDatasets Note: Function is not complete","title":"ndi.database.app.dataset_viewer.utility.listRemoteDatasets"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bapp/%2Bdataset_viewer/%2Butility/listRemoteDatasets.m/#ndidatabaseappdataset_viewerutilitylistremotedatasets","text":"Note: Function is not complete","title":"ndi.database.app.dataset_viewer.utility.listRemoteDatasets"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/NDICloud_essential_metadata_submit.m/","text":"ndi.database.fun.NDICloud_essential_metadata_submit NDICLOUD_ESSENTIAL_METADATA_SUBMIT - submit or update metadata in the cloud [DATASET, DATASET_ID] = ndi.database.fun.NDICloud_essential_metadata_submit(EMAIL, PASSWORD, LOCATION, DATAIDENTIFIER, DATASETINFORMATION) Inputs: EMAIL - a string with the email address PASSWORD - a string with the password LOCATION - a string. Either 'local' or 'cloud'. DATAIDENTIFIER - if LOCATION is 'local', then DATAIDENTIFIER is a ndi.session.dir If LOCATION is 'cloud', then DATAIDENTIFIER is a string representing the dataset_id DATASETINFORMATION - a structure with metadata fields to submit","title":"ndi.database.fun.NDICloud_essential_metadata_submit"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/NDICloud_essential_metadata_submit.m/#ndidatabasefunndicloud_essential_metadata_submit","text":"NDICLOUD_ESSENTIAL_METADATA_SUBMIT - submit or update metadata in the cloud [DATASET, DATASET_ID] = ndi.database.fun.NDICloud_essential_metadata_submit(EMAIL, PASSWORD, LOCATION, DATAIDENTIFIER, DATASETINFORMATION) Inputs: EMAIL - a string with the email address PASSWORD - a string with the password LOCATION - a string. Either 'local' or 'cloud'. DATAIDENTIFIER - if LOCATION is 'local', then DATAIDENTIFIER is a ndi.session.dir If LOCATION is 'cloud', then DATAIDENTIFIER is a string representing the dataset_id DATASETINFORMATION - a structure with metadata fields to submit","title":"ndi.database.fun.NDICloud_essential_metadata_submit"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/calculate_size_in_cloud.m/","text":"ndi.database.fun.calculate_size_in_cloud UPDATE_SIZE_IN_CLOUD - Adds up the size of the files to be uploaded to cloud SIZE = ndi.database.fun.CALCULATE_SIZE_IN_CLOUD(S) returns the size of the files to be Inputs: S - An ndi session Outputs: SIZE - The size of the files to be uploaded to cloud","title":"ndi.database.fun.calculate_size_in_cloud"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/calculate_size_in_cloud.m/#ndidatabasefuncalculate_size_in_cloud","text":"UPDATE_SIZE_IN_CLOUD - Adds up the size of the files to be uploaded to cloud SIZE = ndi.database.fun.CALCULATE_SIZE_IN_CLOUD(S) returns the size of the files to be Inputs: S - An ndi session Outputs: SIZE - The size of the files to be uploaded to cloud","title":"ndi.database.fun.calculate_size_in_cloud"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/check_metadata_inputs.m/","text":"ndi.database.fun.check_metadata_inputs CHECK_METADATA_INPUTS Summary of this function goes here Detailed explanation goes here","title":"ndi.database.fun.check_metadata_inputs"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/check_metadata_inputs.m/#ndidatabasefuncheck_metadata_inputs","text":"CHECK_METADATA_INPUTS Summary of this function goes here Detailed explanation goes here","title":"ndi.database.fun.check_metadata_inputs"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/copy_session_to_dataset.m/","text":"ndi.database.fun.copy_session_to_dataset COPY_SESSION_TO_DATASET - copy an ingested ndi.session object to ndi.dataset object [B,ERRMSG] = COPY_SESSION_TO_DATASET(NDI_SESSION_OBJ, NDI_DATASET_OBJ) Copy the database documents of an ndi.session object to an ndi.dataset object. B is 1 if the operation succeeds and 0 otherwise. The copying process temporarily requires 2 times the total disk space occupied by NDI_SESSION_OBJ, and, long-term, requires 1 times the total disk space occupied by NDI_SESSION_OBJ, which is stored in NDI_DATASET_OBJ. If","title":"ndi.database.fun.copy_session_to_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/copy_session_to_dataset.m/#ndidatabasefuncopy_session_to_dataset","text":"COPY_SESSION_TO_DATASET - copy an ingested ndi.session object to ndi.dataset object [B,ERRMSG] = COPY_SESSION_TO_DATASET(NDI_SESSION_OBJ, NDI_DATASET_OBJ) Copy the database documents of an ndi.session object to an ndi.dataset object. B is 1 if the operation succeeds and 0 otherwise. The copying process temporarily requires 2 times the total disk space occupied by NDI_SESSION_OBJ, and, long-term, requires 1 times the total disk space occupied by NDI_SESSION_OBJ, which is stored in NDI_DATASET_OBJ. If","title":"ndi.database.fun.copy_session_to_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/copydocfile2temp.m/","text":"ndi.database.fun.copydocfile2temp COPYDOCFILE2TEMP - copy a file from an ndi.document to the file system [TNAME,TNAME_WITHOUT_EXT] = COPYDOCFILE2TEMP(DOC, S, FILENAME, EXTENSION) Copies a file associated with an ndi.document to the file system. Note: This function (at present) assumes the entire file can be read into memory at once. Inputs: DOC - the ndi.document that has the file to be copied S - the ndi.session that the document belongs to FILENAME - the file of DOC to be copied EXTENSION - the extension of the filename. Should include the leading period. Output: TNAME - the temporary filename that is created. TNAME_WITHOUT_EXT - the temporary filename without the extension. The calling program should delete the file TNAME when finished using delete(TNAME).","title":"ndi.database.fun.copydocfile2temp"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/copydocfile2temp.m/#ndidatabasefuncopydocfile2temp","text":"COPYDOCFILE2TEMP - copy a file from an ndi.document to the file system [TNAME,TNAME_WITHOUT_EXT] = COPYDOCFILE2TEMP(DOC, S, FILENAME, EXTENSION) Copies a file associated with an ndi.document to the file system. Note: This function (at present) assumes the entire file can be read into memory at once. Inputs: DOC - the ndi.document that has the file to be copied S - the ndi.session that the document belongs to FILENAME - the file of DOC to be copied EXTENSION - the extension of the filename. Should include the leading period. Output: TNAME - the temporary filename that is created. TNAME_WITHOUT_EXT - the temporary filename without the extension. The calling program should delete the file TNAME when finished using delete(TNAME).","title":"ndi.database.fun.copydocfile2temp"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/createGenBankControlledVocabulary.m/","text":"ndi.database.fun.createGenBankControlledVocabulary NDI_CREATEGENBANKCONTROLLEDVOCABULARY - create the controlled vocabulary dictionary for animals ndi.database.fun.createGenBankControlledVocabulary(DIRNAME, ...) This function examines the name file 'names.dmp' and node file 'nodes.dmp' from the GenBank taxonomy database in the directory DIRNAME. It generates a new text file called 'GenBankControlledVocabulary.tsv' with the following structure: Header row: 'Scientific_Name<tab>GenBank_Common_Name<tab>Synonyms<tab><Other_Common_Name' and then 1 entry per organism. This function also takes name/value pairs that modify the behavior. Parameter (default) | Description --------------------------------------------------------------------------- root_node ('Bilateria') | Root scientific name to start with; usually 'Bilateria' to | include most research organisms but not cell lines, | bacteria, viruses, etc (everything not 'Bilateria'). | Use 'Root' for everything. nodefile ('nodes.dmp') | File name of the node file within DIRNAME namefile ('names.dmp') | File name of the name file with DIRNAME outname (... | Output filen name of the file written to disk ['GenBankControlled'... | 'Vocabulary.tsv']) The taxonomy data is available at https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump.tar.gz. This function usually takes a couple of hours to run and shows 3 progress bars (the first one is faster than the second).","title":"ndi.database.fun.createGenBankControlledVocabulary"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/createGenBankControlledVocabulary.m/#ndidatabasefuncreategenbankcontrolledvocabulary","text":"NDI_CREATEGENBANKCONTROLLEDVOCABULARY - create the controlled vocabulary dictionary for animals ndi.database.fun.createGenBankControlledVocabulary(DIRNAME, ...) This function examines the name file 'names.dmp' and node file 'nodes.dmp' from the GenBank taxonomy database in the directory DIRNAME. It generates a new text file called 'GenBankControlledVocabulary.tsv' with the following structure: Header row: 'Scientific_Name<tab>GenBank_Common_Name<tab>Synonyms<tab><Other_Common_Name' and then 1 entry per organism. This function also takes name/value pairs that modify the behavior. Parameter (default) | Description --------------------------------------------------------------------------- root_node ('Bilateria') | Root scientific name to start with; usually 'Bilateria' to | include most research organisms but not cell lines, | bacteria, viruses, etc (everything not 'Bilateria'). | Use 'Root' for everything. nodefile ('nodes.dmp') | File name of the node file within DIRNAME namefile ('names.dmp') | File name of the name file with DIRNAME outname (... | Output filen name of the file written to disk ['GenBankControlled'... | 'Vocabulary.tsv']) The taxonomy data is available at https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump.tar.gz. This function usually takes a couple of hours to run and shows 3 progress bars (the first one is faster than the second).","title":"ndi.database.fun.createGenBankControlledVocabulary"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/createNIFbrainareas.m/","text":"ndi.database.fun.createNIFbrainareas NDI_CREATENIFBRAINAREAS - create a list of allowable brain areas from the NIF-Ontology BA = ndi.database.fun.createNIFbrainareas(...) Creates a list of 'controlled' brain area labels and the corresponding nodes in the NIF-Ontology. Traces all areas that make up a part of the UBERON node 'nervous system', excluding those in the first level of depth (which are all relatively vague descriptors). This is then written to a file 'NIFBrainAreaControlledVocabulary.tsv' with a string id that describes the NIF-Ontology node ID and a string lbl that describes the NIF-Ontology label: Header row: 'ID<tab>LABEL<tab>Synonyms<tab><Other_Common_Name' and then 1 entry per anatomical node. This function also takes name/value pairs that modify the behavior. Parameter (default) | Description --------------------------------------------------------------------------- root ('UBERON:'... | Root node for establishing the controlled vocabulary. '0001016') | (Default is 'nervous system' in Uberon ontology.) depth (1000) | How deep past \"nervous system\" to look depth_exclude (1) | The depths to exclude from the list exclude_ontologies ({...| Ontologies to exclude 'CL'}) | outname (... | Output filen name of the file written to disk ['NIFBrainAreaContr'... | 'olledVocabulary.tsv'])|","title":"ndi.database.fun.createNIFbrainareas"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/createNIFbrainareas.m/#ndidatabasefuncreatenifbrainareas","text":"NDI_CREATENIFBRAINAREAS - create a list of allowable brain areas from the NIF-Ontology BA = ndi.database.fun.createNIFbrainareas(...) Creates a list of 'controlled' brain area labels and the corresponding nodes in the NIF-Ontology. Traces all areas that make up a part of the UBERON node 'nervous system', excluding those in the first level of depth (which are all relatively vague descriptors). This is then written to a file 'NIFBrainAreaControlledVocabulary.tsv' with a string id that describes the NIF-Ontology node ID and a string lbl that describes the NIF-Ontology label: Header row: 'ID<tab>LABEL<tab>Synonyms<tab><Other_Common_Name' and then 1 entry per anatomical node. This function also takes name/value pairs that modify the behavior. Parameter (default) | Description --------------------------------------------------------------------------- root ('UBERON:'... | Root node for establishing the controlled vocabulary. '0001016') | (Default is 'nervous system' in Uberon ontology.) depth (1000) | How deep past \"nervous system\" to look depth_exclude (1) | The depths to exclude from the list exclude_ontologies ({...| Ontologies to exclude 'CL'}) | outname (... | Output filen name of the file written to disk ['NIFBrainAreaContr'... | 'olledVocabulary.tsv'])|","title":"ndi.database.fun.createNIFbrainareas"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/create_new_database.m/","text":"ndi.database.fun.create_new_database c = uicontrol('Style','edit'); c.Callback = @userInput; function userInput(src, event) val = c.String; disp(['input: ' val]); end","title":"ndi.database.fun.create_new_database"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/create_new_database.m/#ndidatabasefuncreate_new_database","text":"c = uicontrol('Style','edit'); c.Callback = @userInput; function userInput(src, event) val = c.String; disp(['input: ' val]); end","title":"ndi.database.fun.create_new_database"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/database2json.m/","text":"ndi.database.fun.database2json DATABASE2JSON - output contents of an ndi.session database to JSON files DATABASE2JSON(S, OUTPUT_PATH) Finds all documents in the database of an ndi.session object S and writes them to the folder OUTPUT_PATH (full path).","title":"ndi.database.fun.database2json"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/database2json.m/#ndidatabasefundatabase2json","text":"DATABASE2JSON - output contents of an ndi.session database to JSON files DATABASE2JSON(S, OUTPUT_PATH) Finds all documents in the database of an ndi.session object S and writes them to the folder OUTPUT_PATH (full path).","title":"ndi.database.fun.database2json"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/databasehierarchyinit.m/","text":"ndi.database.fun.databasehierarchyinit DATABASEHIERARCHYINIT - Initializes the list of databases to try ndi.database.fun.databasehierarchyinit Use TYPE ndi.probe.fun.probetype2objectinit to see the structure Question: What is the above command?","title":"ndi.database.fun.databasehierarchyinit"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/databasehierarchyinit.m/#ndidatabasefundatabasehierarchyinit","text":"DATABASEHIERARCHYINIT - Initializes the list of databases to try ndi.database.fun.databasehierarchyinit Use TYPE ndi.probe.fun.probetype2objectinit to see the structure Question: What is the above command?","title":"ndi.database.fun.databasehierarchyinit"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/dataset_metadata.m/","text":"ndi.database.fun.dataset_metadata DATASET_METADATA - opens a MATLAB app for users to enter metadata information ndi.database.fun.dataset_metadata(S, NEW) Inputs: S - an ndi.session object NEW - create a new metadata form enter 1. Otherwise enter 0.","title":"ndi.database.fun.dataset_metadata"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/dataset_metadata.m/#ndidatabasefundataset_metadata","text":"DATASET_METADATA - opens a MATLAB app for users to enter metadata information ndi.database.fun.dataset_metadata(S, NEW) Inputs: S - an ndi.session object NEW - create a new metadata form enter 1. Otherwise enter 0.","title":"ndi.database.fun.dataset_metadata"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/docs2graph.m/","text":"ndi.database.fun.docs2graph NDI_DOCS2GRAPH - create a directed graph from a cell array of NDI_DOCUMENT objects [G,NODES,MDIGRAPH] = ndi.database.fun.docs2graph(NDI_DOCUMENT_OBJ) Given a cell array of ndi.document objects, this function creates a directed graph with the 'depends_on' relationships. If an object A 'depends on' another object B, there will be an edge from B to A. The adjacency matrix G, the node names (document ids) NODES, and the Matlab directed graph object MDIGRAPH are all returned. See also: DIGRAPH","title":"ndi.database.fun.docs2graph"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/docs2graph.m/#ndidatabasefundocs2graph","text":"NDI_DOCS2GRAPH - create a directed graph from a cell array of NDI_DOCUMENT objects [G,NODES,MDIGRAPH] = ndi.database.fun.docs2graph(NDI_DOCUMENT_OBJ) Given a cell array of ndi.document objects, this function creates a directed graph with the 'depends_on' relationships. If an object A 'depends on' another object B, there will be an edge from B to A. The adjacency matrix G, the node names (document ids) NODES, and the Matlab directed graph object MDIGRAPH are all returned. See also: DIGRAPH","title":"ndi.database.fun.docs2graph"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/docs_from_ids.m/","text":"ndi.database.fun.docs_from_ids DOCS_FROM_IDS - read ndi.document objects given an array of IDs in a single query DOCS = DOCS_FROM_IDS(D_OR_S, DOCUMENT_IDS) Retrieve a set of documents that correspond to a cell array of DOCUMENT_IDS. This function is faster than similar code that searches for each document one at a time because it combines the search into a single query. D_OR_S is an ndi.dataset or ndi.session object. DOCS is a cell array the same size as DOCUMENT_IDS. If the document is found, it is provided in DOCS{i}. Otherwise, DOCS{i} is empty.","title":"ndi.database.fun.docs_from_ids"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/docs_from_ids.m/#ndidatabasefundocs_from_ids","text":"DOCS_FROM_IDS - read ndi.document objects given an array of IDs in a single query DOCS = DOCS_FROM_IDS(D_OR_S, DOCUMENT_IDS) Retrieve a set of documents that correspond to a cell array of DOCUMENT_IDS. This function is faster than similar code that searches for each document one at a time because it combines the search into a single query. D_OR_S is an ndi.dataset or ndi.session object. DOCS is a cell array the same size as DOCUMENT_IDS. If the document is found, it is provided in DOCS{i}. Otherwise, DOCS{i} is empty.","title":"ndi.database.fun.docs_from_ids"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/extract_docs_files.m/","text":"ndi.database.fun.extract_docs_files EXTRACT_DOC_FILES - extract a copy of all ndi.documents and files to path [DOCS,TARGET_PATH] = EXTRACT_DOC_FILES(NDI_SESSION_OBJ, TARGET_PATH) Copies the ndi.document objects from an ndi.session object or an ndi.dataset object. The files associated with the documents DOCS will be placed in the directory TARGET_PATH. If TARGE_TPATH is not given, then a subdirectory inside ndi.common.PathConstants.TempFolder is used and the path is returned as an output.","title":"ndi.database.fun.extract_docs_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/extract_docs_files.m/#ndidatabasefunextract_docs_files","text":"EXTRACT_DOC_FILES - extract a copy of all ndi.documents and files to path [DOCS,TARGET_PATH] = EXTRACT_DOC_FILES(NDI_SESSION_OBJ, TARGET_PATH) Copies the ndi.document objects from an ndi.session object or an ndi.dataset object. The files associated with the documents DOCS will be placed in the directory TARGET_PATH. If TARGE_TPATH is not given, then a subdirectory inside ndi.common.PathConstants.TempFolder is used and the path is returned as an output.","title":"ndi.database.fun.extract_docs_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/find_ingested_docs.m/","text":"ndi.database.fun.find_ingested_docs FIND_INGESTED_DOCS - find ingested documents from an ndi.session D = FIND_INGESTED_DOCS(S) Return all documents in ndi.session S that correspond to ingested data.","title":"ndi.database.fun.find_ingested_docs"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/find_ingested_docs.m/#ndidatabasefunfind_ingested_docs","text":"FIND_INGESTED_DOCS - find ingested documents from an ndi.session D = FIND_INGESTED_DOCS(S) Return all documents in ndi.session S that correspond to ingested data.","title":"ndi.database.fun.find_ingested_docs"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/findallantecedents.m/","text":"ndi.database.fun.findallantecedents FINDALLANTECEDENTS - find documents that have the provided documents as dependencies [D] = ndi.database.fun.findallantecedents(E, VISITED, DOC1, DOC2, ...) Searches the database of session or dataset E and returns all documents for which DOC1, DOC2, etc have a dependency. That is, this function crawls up the list of 'depends_on' fields to find all documents that DOC1, DOC2 etc. depend on. If any DOCS do not need to be searched, provide them in VISITED. Otherwise, provide empty for VISITED. D is always a cell array of NDI_DOCUMENTS (perhaps empty, {}). See also: ndi.database.fun.findalldependencies()","title":"ndi.database.fun.findallantecedents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/findallantecedents.m/#ndidatabasefunfindallantecedents","text":"FINDALLANTECEDENTS - find documents that have the provided documents as dependencies [D] = ndi.database.fun.findallantecedents(E, VISITED, DOC1, DOC2, ...) Searches the database of session or dataset E and returns all documents for which DOC1, DOC2, etc have a dependency. That is, this function crawls up the list of 'depends_on' fields to find all documents that DOC1, DOC2 etc. depend on. If any DOCS do not need to be searched, provide them in VISITED. Otherwise, provide empty for VISITED. D is always a cell array of NDI_DOCUMENTS (perhaps empty, {}). See also: ndi.database.fun.findalldependencies()","title":"ndi.database.fun.findallantecedents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/findalldependencies.m/","text":"ndi.database.fun.findalldependencies FINDALLDEPENDENCIES- find documents that have dependencies on provided documents [D] = ndi.database.fun.findalldependencies(E, VISITED, DOC1, DOC2, ...) Searches the database of session E and returns all documents that have a dependency ('depends_on') field for which the 'value' field corresponds to the id of DOC1 or DOC2, etc. If any DOCS do not need to be searched, provide them in VISITED. Otherwise, provide empty for VISITED. D is always a cell array of NDI_DOCUMENTS (perhaps empty, {}). See also: ndi.database.fun.findallantecedents()","title":"ndi.database.fun.findalldependencies"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/findalldependencies.m/#ndidatabasefunfindalldependencies","text":"FINDALLDEPENDENCIES- find documents that have dependencies on provided documents [D] = ndi.database.fun.findalldependencies(E, VISITED, DOC1, DOC2, ...) Searches the database of session E and returns all documents that have a dependency ('depends_on') field for which the 'value' field corresponds to the id of DOC1 or DOC2, etc. If any DOCS do not need to be searched, provide them in VISITED. Otherwise, provide empty for VISITED. D is always a cell array of NDI_DOCUMENTS (perhaps empty, {}). See also: ndi.database.fun.findallantecedents()","title":"ndi.database.fun.findalldependencies"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/finddocs_missing_dependencies.m/","text":"ndi.database.fun.finddocs_missing_dependencies NDI_FINDDOCS_MISSING_DEPENDENCIES - find documents that have dependencies on documents that do not exist D = ndi.database.fun.finddocs_missing_dependencies(E) Searches the database of session E and returns all documents that have a dependency ('depends_on') field for which the 'value' field does not correspond to an existing document. The following form: D = ndi.database.fun.finddocs_missing_dependencies(E, NAME1, NAME2, ...) works similarly except that it only examines variables with depends_on fields with names NAME1, NAME2, etc.","title":"ndi.database.fun.finddocs_missing_dependencies"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/finddocs_missing_dependencies.m/#ndidatabasefunfinddocs_missing_dependencies","text":"NDI_FINDDOCS_MISSING_DEPENDENCIES - find documents that have dependencies on documents that do not exist D = ndi.database.fun.finddocs_missing_dependencies(E) Searches the database of session E and returns all documents that have a dependency ('depends_on') field for which the 'value' field does not correspond to an existing document. The following form: D = ndi.database.fun.finddocs_missing_dependencies(E, NAME1, NAME2, ...) works similarly except that it only examines variables with depends_on fields with names NAME1, NAME2, etc.","title":"ndi.database.fun.finddocs_missing_dependencies"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/load_metadata_to_GUI.m/","text":"ndi.database.fun.load_metadata_to_GUI LOAD_METADATA_TO_GUI Summary of this function goes here Detailed explanation goes here fig = app.UIFigure; ud = fig.UserData;","title":"ndi.database.fun.load_metadata_to_GUI"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/load_metadata_to_GUI.m/#ndidatabasefunload_metadata_to_gui","text":"LOAD_METADATA_TO_GUI Summary of this function goes here Detailed explanation goes here fig = app.UIFigure; ud = fig.UserData;","title":"ndi.database.fun.load_metadata_to_GUI"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/lookup_uberon_term.m/","text":"ndi.database.fun.lookup_uberon_term LOOKUP_UBERON_TERM Looks up a term in the UBERON ontology using the OLS API. [labels, docs] = LOOKUP_UBERON_TERM(term_name, ...) searches for the specified term in the UBERON ontology and returns information about the matching terms. Inputs: term_name: The name or description of the term to search for. ontology: The ontology to search in (default: 'uberon'). type: The type of term to search for (default: 'class'). exact: Whether to perform an exact match (default: false). queryFields: The field to search in (default: 'label'). Outputs: labels: A cell array of labels for the matching terms. docs: The complete response.response.docs structure from the OLS API. Example: [labels, docs] = lookup_uberon_term('lateral gastric nerve'); [labels, docs] = lookup_uberon_term('heart', 'queryFields','description');","title":"ndi.database.fun.lookup_uberon_term"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/lookup_uberon_term.m/#ndidatabasefunlookup_uberon_term","text":"LOOKUP_UBERON_TERM Looks up a term in the UBERON ontology using the OLS API. [labels, docs] = LOOKUP_UBERON_TERM(term_name, ...) searches for the specified term in the UBERON ontology and returns information about the matching terms. Inputs: term_name: The name or description of the term to search for. ontology: The ontology to search in (default: 'uberon'). type: The type of term to search for (default: 'class'). exact: Whether to perform an exact match (default: false). queryFields: The field to search in (default: 'label'). Outputs: labels: A cell array of labels for the matching terms. docs: The complete response.response.docs structure from the OLS API. Example: [labels, docs] = lookup_uberon_term('lateral gastric nerve'); [labels, docs] = lookup_uberon_term('heart', 'queryFields','description');","title":"ndi.database.fun.lookup_uberon_term"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/ndi_document2ndi_object.m/","text":"ndi.database.fun.ndi_document2ndi_object NDI_DOCUMENT2NDI_OBJECT - create an NDI object from an NDI_DOCUMENT O = ndi.database.fun.ndi_document2ndi_object(NDI_DOCUMENT_OBJ, NDI_SESSION_OBJ) Create an NDI object O from an ndi.document object and a related ndi.session object. ndi.document can also be an ndi.document ID number that will be looked up in the session.","title":"ndi.database.fun.ndi_document2ndi_object"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/ndi_document2ndi_object.m/#ndidatabasefunndi_document2ndi_object","text":"NDI_DOCUMENT2NDI_OBJECT - create an NDI object from an NDI_DOCUMENT O = ndi.database.fun.ndi_document2ndi_object(NDI_DOCUMENT_OBJ, NDI_SESSION_OBJ) Create an NDI object O from an ndi.document object and a related ndi.session object. ndi.document can also be an ndi.document ID number that will be looked up in the session.","title":"ndi.database.fun.ndi_document2ndi_object"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/ndicloud_ontology_lookup.m/","text":"ndi.database.fun.ndicloud_ontology_lookup NDICLOUD_ONTOLOGY_LOOKUP - look up an entry in NDI Cloud Ontology [ITEM] = NDICLOUD_ONTOLOGY_LOOKUP('field',value) Look up entries in the NDI Cloud Ontology. Search for 'Name','Identifier', or 'Description'. This function only finds exact matches. Example: item = ndi.database.fun.ndicloud_ontology_lookup(... 'Name','Left eye view blocked');","title":"ndi.database.fun.ndicloud_ontology_lookup"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/ndicloud_ontology_lookup.m/#ndidatabasefunndicloud_ontology_lookup","text":"NDICLOUD_ONTOLOGY_LOOKUP - look up an entry in NDI Cloud Ontology [ITEM] = NDICLOUD_ONTOLOGY_LOOKUP('field',value) Look up entries in the NDI Cloud Ontology. Search for 'Name','Identifier', or 'Description'. This function only finds exact matches. Example: item = ndi.database.fun.ndicloud_ontology_lookup(... 'Name','Left eye view blocked');","title":"ndi.database.fun.ndicloud_ontology_lookup"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/openMINDSobj2ndi_document.m/","text":"ndi.database.fun.openMINDSobj2ndi_document OPENMINDSOBJ2NDI_DOCUMENT - openMinds objects to set of ndi.document objects D = ndi.database.fun.openMINDSobj2ndi_document(OPENMINDS_OBJ, SESSION_ID, [DEPENDENCY_TYPE], [DEPENDENCY_VALUE]) Convert a cell array of openMINDS objects to a set of ndi.document objects. D is a cell array of ndi.document objects. If the document is requested to be of a particular DEPENDENCY_TYPE ('subject', 'element'), then the corresponding dependency is set to DEPENDENCY_VALUE. Example 1: p = personWithTwoAffiliations(); % openMINDS library function session_id = S.id(); % get the id of an ndi.session S d = ndi.database.fun.openMINDSobj2ndi_document(p, session_id); Example 2: s = openminds.controlledterms.Species('name','Mustela putorius furo','preferredOntologyIdentifier','NCBI:txid9669'); session_id = S.id(); % get the id of an ndi.session S subject_docs = S.database_search(ndi.query('','isa','subject')); d = ndi.database.fun.openMINDSobj2ndi_document(s, session_id, 'subject', subject_docs{1}.id());","title":"ndi.database.fun.openMINDSobj2ndi_document"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/openMINDSobj2ndi_document.m/#ndidatabasefunopenmindsobj2ndi_document","text":"OPENMINDSOBJ2NDI_DOCUMENT - openMinds objects to set of ndi.document objects D = ndi.database.fun.openMINDSobj2ndi_document(OPENMINDS_OBJ, SESSION_ID, [DEPENDENCY_TYPE], [DEPENDENCY_VALUE]) Convert a cell array of openMINDS objects to a set of ndi.document objects. D is a cell array of ndi.document objects. If the document is requested to be of a particular DEPENDENCY_TYPE ('subject', 'element'), then the corresponding dependency is set to DEPENDENCY_VALUE. Example 1: p = personWithTwoAffiliations(); % openMINDS library function session_id = S.id(); % get the id of an ndi.session S d = ndi.database.fun.openMINDSobj2ndi_document(p, session_id); Example 2: s = openminds.controlledterms.Species('name','Mustela putorius furo','preferredOntologyIdentifier','NCBI:txid9669'); session_id = S.id(); % get the id of an ndi.session S subject_docs = S.database_search(ndi.query('','isa','subject')); d = ndi.database.fun.openMINDSobj2ndi_document(s, session_id, 'subject', subject_docs{1}.id());","title":"ndi.database.fun.openMINDSobj2ndi_document"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/openMINDSobj2struct.m/","text":"ndi.database.fun.openMINDSobj2struct OPENMINDSOBJ2STRUCT - convert an openMINDS object to a Matlab structure for creating an NDI document S = ndi.database.fun.openMINDSobj2struct(OPENMINDSOBJ) Given a cell array of openminds objects, returns a set of Matlab structures for each object. Requires: https://github.com/openMetadataInitiative/openMINDS_MATLAB Example: p = personWithTwoAffiliations(); s = ndi.database.fun.openMINDSobj2struct(p);","title":"ndi.database.fun.openMINDSobj2struct"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/openMINDSobj2struct.m/#ndidatabasefunopenmindsobj2struct","text":"OPENMINDSOBJ2STRUCT - convert an openMINDS object to a Matlab structure for creating an NDI document S = ndi.database.fun.openMINDSobj2struct(OPENMINDSOBJ) Given a cell array of openminds objects, returns a set of Matlab structures for each object. Requires: https://github.com/openMetadataInitiative/openMINDS_MATLAB Example: p = personWithTwoAffiliations(); s = ndi.database.fun.openMINDSobj2struct(p);","title":"ndi.database.fun.openMINDSobj2struct"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/opendatabase.m/","text":"ndi.database.fun.opendatabase OPENDATABASE - open the database associated with an session DB = ndi.database.fun.opendatabase(DATABASE_PATH, SESSION_UNIQUE_REFERENCE) Searches the file path DATABASE_PATH for any known databases in NDI_DATABASEHIERACHY. If it finds a database of subtype ndi.database, then it is opened and returned in DB. If it finds no databases, then it tries to create a new database following the order in the hierarchy. Otherwise, DB is empty.","title":"ndi.database.fun.opendatabase"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/opendatabase.m/#ndidatabasefunopendatabase","text":"OPENDATABASE - open the database associated with an session DB = ndi.database.fun.opendatabase(DATABASE_PATH, SESSION_UNIQUE_REFERENCE) Searches the file path DATABASE_PATH for any known databases in NDI_DATABASEHIERACHY. If it finds a database of subtype ndi.database, then it is opened and returned in DB. If it finds no databases, then it tries to create a new database following the order in the hierarchy. Otherwise, DB is empty.","title":"ndi.database.fun.opendatabase"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/plotinteractivedocgraph.m/","text":"ndi.database.fun.plotinteractivedocgraph ndi.database.fun.plotinteractivedocgraph(DOCS, G, MDIGRAPH, NODES, LAYOUT,INTERACTIVE) Given a cell array of NDI_DOCUMENTs DOCS, a connectivity matrix G, a DIGRAPH object MDIGRAPH, a cell array of node names NODES, and a type of DIGRAPH/PLOT layout LAYOUT, this plots a graph of the graph of the NDI_DOCUMENTS. Usually, G, MDIGRAPH, and NODES are the output of ndi.database.fun.docs2graph If INTERACTIVE is 1, then the plot is made interactive, in that the closest node to any clicked point will be displayed on the command line, and a global variable 'clicked_node' will be set to the ndi.document of the closest node to the clicked point. The user should click nearby but not directly on the node to reveal it. If INTERACTIVE is 0, then some data about each document node is shown as a data tip when the user hovers over the node. Example values of LAYOUT include 'force', 'layered', 'auto', and others. See HELP DIGRAPH/PLOT for all options. See also: DIGRAPH/PLOT, ndi.database.fun.docs2graph Example: % Given session E, plot a graph of all documents. docs = E.database_search({'document_class.class_name','(.*)'}); [G,nodes,mdigraph] = ndi.database.fun.docs2graph(docs); ndi.database.fun.plotinteractivedocgraph(docs,G,mdigraph,nodes,'layered');","title":"ndi.database.fun.plotinteractivedocgraph"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/plotinteractivedocgraph.m/#ndidatabasefunplotinteractivedocgraph","text":"ndi.database.fun.plotinteractivedocgraph(DOCS, G, MDIGRAPH, NODES, LAYOUT,INTERACTIVE) Given a cell array of NDI_DOCUMENTs DOCS, a connectivity matrix G, a DIGRAPH object MDIGRAPH, a cell array of node names NODES, and a type of DIGRAPH/PLOT layout LAYOUT, this plots a graph of the graph of the NDI_DOCUMENTS. Usually, G, MDIGRAPH, and NODES are the output of ndi.database.fun.docs2graph If INTERACTIVE is 1, then the plot is made interactive, in that the closest node to any clicked point will be displayed on the command line, and a global variable 'clicked_node' will be set to the ndi.document of the closest node to the clicked point. The user should click nearby but not directly on the node to reveal it. If INTERACTIVE is 0, then some data about each document node is shown as a data tip when the user hovers over the node. Example values of LAYOUT include 'force', 'layered', 'auto', and others. See HELP DIGRAPH/PLOT for all options. See also: DIGRAPH/PLOT, ndi.database.fun.docs2graph Example: % Given session E, plot a graph of all documents. docs = E.database_search({'document_class.class_name','(.*)'}); [G,nodes,mdigraph] = ndi.database.fun.docs2graph(docs); ndi.database.fun.plotinteractivedocgraph(docs,G,mdigraph,nodes,'layered');","title":"ndi.database.fun.plotinteractivedocgraph"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/projectvardef.m/","text":"ndi.database.fun.projectvardef NDI_PROJECTVARDEF - shorthand function for building an 'projectvar' document PVD = ndi.database.fun.projectvardef(NAME, TYPE, DESCRIPTION, DATA) Makes a cell array definition of the fields for an 'projectvar' document. Creates a set of name/value pairs in a 1x4 cell list: Name: | Value ------------------------------------------------------ 'base.name' | NAME 'projectvar.type' | TYPE 'projectvar.description'| DESCRIPTION 'projectvar.data' | DATA","title":"ndi.database.fun.projectvardef"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/projectvardef.m/#ndidatabasefunprojectvardef","text":"NDI_PROJECTVARDEF - shorthand function for building an 'projectvar' document PVD = ndi.database.fun.projectvardef(NAME, TYPE, DESCRIPTION, DATA) Makes a cell array definition of the fields for an 'projectvar' document. Creates a set of name/value pairs in a 1x4 cell list: Name: | Value ------------------------------------------------------ 'base.name' | NAME 'projectvar.type' | TYPE 'projectvar.description'| DESCRIPTION 'projectvar.data' | DATA","title":"ndi.database.fun.projectvardef"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/queryNCIm.m/","text":"ndi.database.fun.queryNCIm queryNCIm Queries the NCI Metathesaurus API. data = queryNCIm(term) sends a request to the NCI Metathesaurus API to search for the given term and returns the response data. Inputs: term: The search term (string). Output: data: The API response data (struct).","title":"ndi.database.fun.queryNCIm"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/queryNCIm.m/#ndidatabasefunqueryncim","text":"queryNCIm Queries the NCI Metathesaurus API. data = queryNCIm(term) sends a request to the NCI Metathesaurus API to search for the given term and returns the response data. Inputs: term: The search term (string). Output: data: The API response data (struct).","title":"ndi.database.fun.queryNCIm"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/readGenBankNames.m/","text":"ndi.database.fun.readGenBankNames NDI_READGENBANKNAMES - read the GenBank names from the 'names.dmp' file GENBANK_NAMES = ndi.database.fun.readGenBankNames(FILENAME) Given a 'names.dmp' file from a GenBank taxonomy data dump, this function produces a Matlab structure with the following fields: fieldname | Description ----------------------------------------------------------------- genbank_commonname | The genbank common name of the organism | (cell array of strings, 1 entry per node) | genbank_commonname{i} is the entry for node i. scientific_name | The genbank scientific name | (cell array of strings, 1 entry per node) | scientific_name{i} is the entry for node i. synonym | A cell array of strings with scientific name synonyms | (cell array of strings, potentially many entries per node) | synonym{i}{j} is the jth synonym for node i other_commonname | A cell array of strings with the other common names | (cell array of strings, potentially many entries per node) | other_commonname{i}{j} is the jth other common name for node i","title":"ndi.database.fun.readGenBankNames"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/readGenBankNames.m/#ndidatabasefunreadgenbanknames","text":"NDI_READGENBANKNAMES - read the GenBank names from the 'names.dmp' file GENBANK_NAMES = ndi.database.fun.readGenBankNames(FILENAME) Given a 'names.dmp' file from a GenBank taxonomy data dump, this function produces a Matlab structure with the following fields: fieldname | Description ----------------------------------------------------------------- genbank_commonname | The genbank common name of the organism | (cell array of strings, 1 entry per node) | genbank_commonname{i} is the entry for node i. scientific_name | The genbank scientific name | (cell array of strings, 1 entry per node) | scientific_name{i} is the entry for node i. synonym | A cell array of strings with scientific name synonyms | (cell array of strings, potentially many entries per node) | synonym{i}{j} is the jth synonym for node i other_commonname | A cell array of strings with the other common names | (cell array of strings, potentially many entries per node) | other_commonname{i}{j} is the jth other common name for node i","title":"ndi.database.fun.readGenBankNames"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/readGenBankNodes.m/","text":"ndi.database.fun.readGenBankNodes NDI_READGENBANKNODES - read the node tree from GenBank data dump G = ndi.database.fun.readGenBankNodes(FILENAME) Given a 'nodes.dmp' file from a GenBank taxonomy data dump, this function produces a sparse connectivity matrix G such that G(i,j) = 1 iff node number i is a parent of node j.","title":"ndi.database.fun.readGenBankNodes"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/readGenBankNodes.m/#ndidatabasefunreadgenbanknodes","text":"NDI_READGENBANKNODES - read the node tree from GenBank data dump G = ndi.database.fun.readGenBankNodes(FILENAME) Given a 'nodes.dmp' file from a GenBank taxonomy data dump, this function produces a sparse connectivity matrix G such that G(i,j) = 1 iff node number i is a parent of node j.","title":"ndi.database.fun.readGenBankNodes"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/read_presentation_time_structure.m/","text":"ndi.database.fun.read_presentation_time_structure READ_PRESENTATION_TIME_STRUCTURE - read the binary file from N0 to N1 that contains presentation time structure information and output it to a struct. If N0 and N1 are not provided, return all the entries. [HEADER,PRESENTATION_TIME] = ndi.database.fun.read_presentation_time_structure(FILENAME, N0, N1) Inputs: FILENAME - a string representing the file name of the binary file N0 - an integer representing the starting entry to read the data N1 - an integer representing the ending entry to read the data Outputs: HEADER - description of the data PRESENTATION_TIME - presentation time structure data","title":"ndi.database.fun.read_presentation_time_structure"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/read_presentation_time_structure.m/#ndidatabasefunread_presentation_time_structure","text":"READ_PRESENTATION_TIME_STRUCTURE - read the binary file from N0 to N1 that contains presentation time structure information and output it to a struct. If N0 and N1 are not provided, return all the entries. [HEADER,PRESENTATION_TIME] = ndi.database.fun.read_presentation_time_structure(FILENAME, N0, N1) Inputs: FILENAME - a string representing the file name of the binary file N0 - an integer representing the starting entry to read the data N1 - an integer representing the ending entry to read the data Outputs: HEADER - description of the data PRESENTATION_TIME - presentation time structure data","title":"ndi.database.fun.read_presentation_time_structure"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/readtablechar.m/","text":"ndi.database.fun.readtablechar readtablechar - read a table from a character array t = readtablechar(C,EXT, ...) Read a Matlab table object from a character array C that would have the file extension EXT if it were a file. Passes extra arguments to readtable() so that all the arguments to readtable() can be used to readtablechar. Example: t = array2table(rand(10,3)) c = ndi.database.fun.writetablechar(t,... 'Delimiter','\\t','WriteVariableNames',false); t2 = ndi.database.fun.readtablechar(c,'.txt','Delimiter','\\t'); diffs = abs(t{:,:}-t2{:,:}); does_it_match = all(diffs(:)<1e-15) % does it meet tolerance? See also: writetable, readtable, ndi.database.fun.writetablechar","title":"ndi.database.fun.readtablechar"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/readtablechar.m/#ndidatabasefunreadtablechar","text":"readtablechar - read a table from a character array t = readtablechar(C,EXT, ...) Read a Matlab table object from a character array C that would have the file extension EXT if it were a file. Passes extra arguments to readtable() so that all the arguments to readtable() can be used to readtablechar. Example: t = array2table(rand(10,3)) c = ndi.database.fun.writetablechar(t,... 'Delimiter','\\t','WriteVariableNames',false); t2 = ndi.database.fun.readtablechar(c,'.txt','Delimiter','\\t'); diffs = abs(t{:,:}-t2{:,:}); does_it_match = all(diffs(:)<1e-15) % does it meet tolerance? See also: writetable, readtable, ndi.database.fun.writetablechar","title":"ndi.database.fun.readtablechar"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/scan_for_upload.m/","text":"ndi.database.fun.scan_for_upload SCAN_FOR_UPLOAD - Scans the session for documents and files to upload. Calculate the size of the files. [DOC_JSON_STRUCT,DOC_FILE_STRUCT] = ndi.database.fun.scan_for_upload(S, d, new, DATASET_ID) Inputs: S - an ndi.session object d - documents returned by searching the session using database_search NEW - 1 if this is a new dataset with empty documents and files, 0 otherwise DATASET_ID - The dataset id. dataset_id = '' if it is a new dataset Outputs: DOC_JSON_STRUCT - A structure with the following fields: 'docid' - The document id 'is_uploaded' - A flag indicating if the document is uploaded DOC_FILE_STRUCT - A structure with the following fields: 'uid' - The uid of the file 'name' - The name of the file 'docid' - The document id that the file is associated with 'bytes' - The size of the file in bytes 'is_uploaded' - A flag indicating if the file is uploaded TOTAL_SIZE - The total size of the files to upload in KB","title":"ndi.database.fun.scan_for_upload"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/scan_for_upload.m/#ndidatabasefunscan_for_upload","text":"SCAN_FOR_UPLOAD - Scans the session for documents and files to upload. Calculate the size of the files. [DOC_JSON_STRUCT,DOC_FILE_STRUCT] = ndi.database.fun.scan_for_upload(S, d, new, DATASET_ID) Inputs: S - an ndi.session object d - documents returned by searching the session using database_search NEW - 1 if this is a new dataset with empty documents and files, 0 otherwise DATASET_ID - The dataset id. dataset_id = '' if it is a new dataset Outputs: DOC_JSON_STRUCT - A structure with the following fields: 'docid' - The document id 'is_uploaded' - A flag indicating if the document is uploaded DOC_FILE_STRUCT - A structure with the following fields: 'uid' - The uid of the file 'name' - The name of the file 'docid' - The document id that the file is associated with 'bytes' - The size of the file in bytes 'is_uploaded' - A flag indicating if the file is uploaded TOTAL_SIZE - The total size of the files to upload in KB","title":"ndi.database.fun.scan_for_upload"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/uberon_ontology_lookup.m/","text":"ndi.database.fun.uberon_ontology_lookup UBERON_ONTOLOGY_LOOKUP - look up an entry in NDI Cloud Ontology [ITEM] = UBERON_ONTOLOGY_LOOKUP('field',value) Look up entries in the UBERON ontology This is current a placeholder to help us look up terms we've requested but that are not there yet. Search for 'Name','Identifier', or 'Description'. This function only finds exact matches. Example: item = ndi.database.fun.uberon_ontology_lookup(... 'Name','lateral ventricular nerve (sensu Cancer borealis)');","title":"ndi.database.fun.uberon_ontology_lookup"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/uberon_ontology_lookup.m/#ndidatabasefunuberon_ontology_lookup","text":"UBERON_ONTOLOGY_LOOKUP - look up an entry in NDI Cloud Ontology [ITEM] = UBERON_ONTOLOGY_LOOKUP('field',value) Look up entries in the UBERON ontology This is current a placeholder to help us look up terms we've requested but that are not there yet. Search for 'Name','Identifier', or 'Description'. This function only finds exact matches. Example: item = ndi.database.fun.uberon_ontology_lookup(... 'Name','lateral ventricular nerve (sensu Cancer borealis)');","title":"ndi.database.fun.uberon_ontology_lookup"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/upload_to_NDI_cloud.m/","text":"ndi.database.fun.upload_to_NDI_cloud UPLOAD_TO_NDI_CLOUD - upload an NDI database to NDI Cloud [B,MSG] = ndi.database.fun.upload_to_NDI_cloud(S, DATASET_ID, VARARGIN) Inputs: S - an ndi.session object DATASET_ID - the dataset id for the NDI Cloud Outputs: B - did the upload work? 0 for no, 1 for yes MSG - An error message if the upload failed; otherwise ''","title":"ndi.database.fun.upload_to_NDI_cloud"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/upload_to_NDI_cloud.m/#ndidatabasefunupload_to_ndi_cloud","text":"UPLOAD_TO_NDI_CLOUD - upload an NDI database to NDI Cloud [B,MSG] = ndi.database.fun.upload_to_NDI_cloud(S, DATASET_ID, VARARGIN) Inputs: S - an ndi.session object DATASET_ID - the dataset id for the NDI Cloud Outputs: B - did the upload work? 0 for no, 1 for yes MSG - An error message if the upload failed; otherwise ''","title":"ndi.database.fun.upload_to_NDI_cloud"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/write_presentation_time_structure.m/","text":"ndi.database.fun.write_presentation_time_structure WRITE_PRESENTATION_TIME_STRUCTURE - write the presentation time structure to a binary file ndi.database.fun.write_presentation_time_structure(FILENAME,PRESENTATION_TIME) Inputs: FILENAME - a string representing the file name of the binary file PRESENTATION_TIME - presentation time structure data","title":"ndi.database.fun.write_presentation_time_structure"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/write_presentation_time_structure.m/#ndidatabasefunwrite_presentation_time_structure","text":"WRITE_PRESENTATION_TIME_STRUCTURE - write the presentation time structure to a binary file ndi.database.fun.write_presentation_time_structure(FILENAME,PRESENTATION_TIME) Inputs: FILENAME - a string representing the file name of the binary file PRESENTATION_TIME - presentation time structure data","title":"ndi.database.fun.write_presentation_time_structure"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/writetablechar.m/","text":"ndi.database.fun.writetablechar writetablechar - write a table to a character array C = writetablechar(T, ...) Write a Matlab table object to a character array. Passes extra arguments to writetable() so that all the arguments to writetable() can be used to writetablechar. Example: t = array2table(rand(10,3)) c = ndi.database.fun.writetablechar(t,... 'Delimiter','\\t','WriteVariableNames',false); t2 = ndi.database.fun.readtablechar(c,'.txt','Delimiter','\\t') diffs = abs(t{:,:}-t2{:,:}); does_it_match = all(diffs(:)<1e-15) % does it meet tolerance? See also: writetable, readtable, ndi.database.fun.readtablechar","title":"ndi.database.fun.writetablechar"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/writetablechar.m/#ndidatabasefunwritetablechar","text":"writetablechar - write a table to a character array C = writetablechar(T, ...) Write a Matlab table object to a character array. Passes extra arguments to writetable() so that all the arguments to writetable() can be used to writetablechar. Example: t = array2table(rand(10,3)) c = ndi.database.fun.writetablechar(t,... 'Delimiter','\\t','WriteVariableNames',false); t2 = ndi.database.fun.readtablechar(c,'.txt','Delimiter','\\t') diffs = abs(t{:,:}-t2{:,:}); does_it_match = all(diffs(:)<1e-15) % does it meet tolerance? See also: writetable, readtable, ndi.database.fun.readtablechar","title":"ndi.database.fun.writetablechar"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bbinarydoc/matfid.m/","text":"CLASS ndi.database.implementations.binarydoc.matfid ndi.database.implementations.binarydoc.matfid - create a new ndi.database.implementations.binarydoc.matfid object NDI_BINARYDOC_MATFID_OBJ = ndi.database.implementations.binarydoc.matfid(PARAM1,VALUE1, ...) Follows same arguments as vlt.file.fileobj See also: vlt.file.fileobj, vlt.file.fileobj/FILEOBJ Superclasses ndi.database.binarydoc , handle , vlt.file.fileobj Properties Property Description key The key that is created when the binary doc is locked doc_unique_id The document unique id fullpathfilename fid permission machineformat Methods Method Description addlistener addlistener Add listener for event. delete close an ndi.database.binarydoc and delete its handle eq == (EQ) Test handle equality. fclose close an ndi.database.implementations.binarydoc.matfid object feof test to see if a FILEOBJ is at END-OF-FILE ferror return the last file error message for FILEOBJ fgetl get a line from a FILEOBJ fgets get a line from a FILEOBJ fileparts return filename parts for the file associated with FILEOBJ findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. fopen open a FILEOBJ fprintf print data to a FILEOBJ_OBJ fread read data from a FILEOBJ frewind 'rewind' a FILEOBJ back to the beginning fscanf scan data from a FILEOBJ_OBJ fseek seek to a location within a FILEOBJ ftell find current location within a FILEOBJ fwrite write data to a FILEOBJ ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. matfid create a new ndi.database.implementations.binarydoc.matfid object ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setproperties set the properties of a FILEOBJ Methods help addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.implementations.binarydoc.matfid, matlab.metadata.Property, events Help for ndi.database.implementations.binarydoc.matfid/addlistener is inherited from superclass handle delete - close an ndi.database.binarydoc and delete its handle DELETE(NDI_BINARYDOC_OBJ) Closes an ndi.database.binarydoc (if necessary) and then deletes the handle. Help for ndi.database.implementations.binarydoc.matfid/delete is inherited from superclass ndi.database.binarydoc eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/NE Help for ndi.database.implementations.binarydoc.matfid/eq is inherited from superclass handle fclose - close an ndi.database.implementations.binarydoc.matfid object Closes the file, but also clears the fullpathfilename and other fields so the user cannot reuse the object without checking out another binary document from the database. feof - test to see if a FILEOBJ is at END-OF-FILE B = FEOF(FILEOBJ_OBJ) Returns 1 if FILEOBJ_OBJ is at its end of file, 0 otherwise. See also: FSEEK, FILEOBJ/FSEEK, FTELL Help for ndi.database.implementations.binarydoc.matfid/feof is inherited from superclass vlt.file.fileobj ferror - return the last file error message for FILEOBJ [MESSAGE, ERRORNUM] = FERROR(FILEOBJ_OBJ, COMMAND) Return the most recent file error MESSAGE and ERRORNUM for the file associated with FERROR. Help for ndi.database.implementations.binarydoc.matfid/ferror is inherited from superclass vlt.file.fileobj fgetl - get a line from a FILEOBJ TLINE = FGETL(FILEOBJ_OBJ) Returns the next line (not including NEWLINE character) just like FGETL. See also: FGETL Help for ndi.database.implementations.binarydoc.matfid/fgetl is inherited from superclass vlt.file.fileobj fgets - get a line from a FILEOBJ TLINE = FGETS(FILEOBJ_OBJ, [NCHAR]) Returns the next line (including NEWLINE character) just like FGETS. See also: FGETS Help for ndi.database.implementations.binarydoc.matfid/fgets is inherited from superclass vlt.file.fileobj fileparts - return filename parts for the file associated with FILEOBJ [PATHSTR,NAME,EXT] = FILEPARTS(FILEOBJ_OBJ) Returns FILEPARTS of the 'fullpathfilename' field of FILEOBJ. Help for ndi.database.implementations.binarydoc.matfid/fileparts is inherited from superclass vlt.file.fileobj findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID Help for ndi.database.implementations.binarydoc.matfid/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.implementations.binarydoc.matfid, ndi.database.implementations.binarydoc.matfid/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.implementations.binarydoc.matfid/findprop is inherited from superclass handle fopen - open a FILEOBJ FILEOBJ_OBJ = FOPEN(FILEOBJ_OBJ, [ , PERMISSION], [MACHINEFORMAT],[FILENAME]) Opens the file associated with a FILEOBJ_OBJ object. If FILENAME, PERMISSION, and MACHINEFORMAT are given, then those variables of FILEOBJ_OBJ are updated. If they are not given, then the existing values in the FILEOBJ_OBJ are used. Note that the order of the input arguments differs from FOPEN, so that the object can be called in place of an FID (e.g., fid=fopen(myvariable), where myvariable is either a file name or a FILEOBJ object). If the operation is successful, then FILEOBJ_OBJ.fid is greater than 3. Otherwise, FILEOBJ_OBJ.fid is -1. See also: FOPEN, FILEOBJ/FCLOSE, FCLOSE Help for ndi.database.implementations.binarydoc.matfid/fopen is inherited from superclass vlt.file.fileobj fprintf - print data to a FILEOBJ_OBJ [COUNT] = FPRINTF(FID,FORMAT,A, ...) Call FPRINTF (see FPRINTF for inputs) for the file associated with FILEOBJ_OBJ. Help for ndi.database.implementations.binarydoc.matfid/fprintf is inherited from superclass vlt.file.fileobj fread - read data from a FILEOBJ COUNT = FWRITE(FILEOBJ_OBJ, COUNT, [PRECISION], [SKIP], [MACHINEFORMAT]) Attempts to read COUNT elements with resolution PRECISION. If PRECISION is not provided, then 'char' is assumed. If SKIP is provided, then SKIP is in number of bytes, unless PRECISION is in bits, in which case SKIP is in bits. MACHINEFORMAT is the machine format to use. See FREAD for a full description of these input arguments. See also: FREAD Help for ndi.database.implementations.binarydoc.matfid/fread is inherited from superclass vlt.file.fileobj frewind - 'rewind' a FILEOBJ back to the beginning FREWIND(FILEOBJ_OBJ) Seeks to the beginning of the file. See also: FSEEK, FILEOBJ/FSEEK, FTELL Help for ndi.database.implementations.binarydoc.matfid/frewind is inherited from superclass vlt.file.fileobj fscanf - scan data from a FILEOBJ_OBJ [A,COUNT] = FSCANF(FID,FORMAT,[SIZEA]) Call FSCANF (see FSCANF for inputs) for the file associated with FILEOBJ_OBJ. Help for ndi.database.implementations.binarydoc.matfid/fscanf is inherited from superclass vlt.file.fileobj fseek - seek to a location within a FILEOBJ B = FSEEK(FILEOBJ_OBJ, OFFSET, REFERENCE) Seeks the file to the location OFFSET (in bytes) relative to REFERENCE. REFERENCE can be 'bof' or -1 Beginning of file 'cof' or 0 Current position in file 'eof' or 1 End of file B is 0 on success and -1 on failure. See also: FSEEK, FILEOBJ/FTELL Help for ndi.database.implementations.binarydoc.matfid/fseek is inherited from superclass vlt.file.fileobj ftell - find current location within a FILEOBJ LOCATION = FTELL(FILEOBJ_OBJ) Returns the current location (in bytes) relative to the beginning of the file. If the query fails, -1 is returned. See also: FSEEK, FILEOBJ/FSEEK, FTELL Help for ndi.database.implementations.binarydoc.matfid/ftell is inherited from superclass vlt.file.fileobj fwrite - write data to a FILEOBJ COUNT = FWRITE(FILEOBJ_OBJ, DATA, [PRECISION], [SKIP], [MACHINEFORMAT]) Attempts to write DATA elements with resolution PRECISION. If PRECISION is not provided, then 'char' is assumed. If SKIP is provided, then SKIP is in number of bytes, unless PRECISION is in bits, in which case SKIP is in bits. MACHINEFORMAT is the machine format to use. See FWRITE for a full description of these input arguments. See also: FWRITE Help for ndi.database.implementations.binarydoc.matfid/fwrite is inherited from superclass vlt.file.fileobj ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/EQ, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/NE Help for ndi.database.implementations.binarydoc.matfid/ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/EQ, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/NE Help for ndi.database.implementations.binarydoc.matfid/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/DELETE Help for ndi.database.implementations.binarydoc.matfid/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/EQ, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/NE Help for ndi.database.implementations.binarydoc.matfid/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.implementations.binarydoc.matfid, matlab.metadata.Property, events Help for ndi.database.implementations.binarydoc.matfid/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/EQ, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/NE Help for ndi.database.implementations.binarydoc.matfid/lt is inherited from superclass handle matfid - create a new ndi.database.implementations.binarydoc.matfid object NDI_BINARYDOC_MATFID_OBJ = ndi.database.implementations.binarydoc.matfid(PARAM1,VALUE1, ...) Follows same arguments as vlt.file.fileobj See also: vlt.file.fileobj, vlt.file.fileobj/FILEOBJ Documentation for ndi.database.implementations.binarydoc.matfid/matfid doc ndi.database.implementations.binarydoc.matfid ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/EQ, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LT Help for ndi.database.implementations.binarydoc.matfid/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/ADDLISTENER, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.implementations.binarydoc.matfid/notify is inherited from superclass handle setproperties - set the properties of a FILEOBJ FILEOBJ_OBJ = SETPROPERTIES(FILEOBJ_OBJ, 'PROPERTY1',VALUE1, ...) Sets the properties of a FILEOBJ with name/value pairs. Properties are: fullpathfilename; % the full path file name of the file fid; % The Matlab file identifier permission; % The file permission machineformat % big-endian ('b'), little-endian ('l'), or native ('n') Help for ndi.database.implementations.binarydoc.matfid/setproperties is inherited from superclass vlt.file.fileobj","title":"ndi.database.implementations.binarydoc.matfid"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bbinarydoc/matfid.m/#class-ndidatabaseimplementationsbinarydocmatfid","text":"ndi.database.implementations.binarydoc.matfid - create a new ndi.database.implementations.binarydoc.matfid object NDI_BINARYDOC_MATFID_OBJ = ndi.database.implementations.binarydoc.matfid(PARAM1,VALUE1, ...) Follows same arguments as vlt.file.fileobj See also: vlt.file.fileobj, vlt.file.fileobj/FILEOBJ","title":"CLASS ndi.database.implementations.binarydoc.matfid"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bbinarydoc/matfid.m/#superclasses","text":"ndi.database.binarydoc , handle , vlt.file.fileobj","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bbinarydoc/matfid.m/#properties","text":"Property Description key The key that is created when the binary doc is locked doc_unique_id The document unique id fullpathfilename fid permission machineformat","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bbinarydoc/matfid.m/#methods","text":"Method Description addlistener addlistener Add listener for event. delete close an ndi.database.binarydoc and delete its handle eq == (EQ) Test handle equality. fclose close an ndi.database.implementations.binarydoc.matfid object feof test to see if a FILEOBJ is at END-OF-FILE ferror return the last file error message for FILEOBJ fgetl get a line from a FILEOBJ fgets get a line from a FILEOBJ fileparts return filename parts for the file associated with FILEOBJ findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. fopen open a FILEOBJ fprintf print data to a FILEOBJ_OBJ fread read data from a FILEOBJ frewind 'rewind' a FILEOBJ back to the beginning fscanf scan data from a FILEOBJ_OBJ fseek seek to a location within a FILEOBJ ftell find current location within a FILEOBJ fwrite write data to a FILEOBJ ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. matfid create a new ndi.database.implementations.binarydoc.matfid object ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setproperties set the properties of a FILEOBJ","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bbinarydoc/matfid.m/#methods-help","text":"addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.implementations.binarydoc.matfid, matlab.metadata.Property, events Help for ndi.database.implementations.binarydoc.matfid/addlistener is inherited from superclass handle delete - close an ndi.database.binarydoc and delete its handle DELETE(NDI_BINARYDOC_OBJ) Closes an ndi.database.binarydoc (if necessary) and then deletes the handle. Help for ndi.database.implementations.binarydoc.matfid/delete is inherited from superclass ndi.database.binarydoc eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/NE Help for ndi.database.implementations.binarydoc.matfid/eq is inherited from superclass handle fclose - close an ndi.database.implementations.binarydoc.matfid object Closes the file, but also clears the fullpathfilename and other fields so the user cannot reuse the object without checking out another binary document from the database. feof - test to see if a FILEOBJ is at END-OF-FILE B = FEOF(FILEOBJ_OBJ) Returns 1 if FILEOBJ_OBJ is at its end of file, 0 otherwise. See also: FSEEK, FILEOBJ/FSEEK, FTELL Help for ndi.database.implementations.binarydoc.matfid/feof is inherited from superclass vlt.file.fileobj ferror - return the last file error message for FILEOBJ [MESSAGE, ERRORNUM] = FERROR(FILEOBJ_OBJ, COMMAND) Return the most recent file error MESSAGE and ERRORNUM for the file associated with FERROR. Help for ndi.database.implementations.binarydoc.matfid/ferror is inherited from superclass vlt.file.fileobj fgetl - get a line from a FILEOBJ TLINE = FGETL(FILEOBJ_OBJ) Returns the next line (not including NEWLINE character) just like FGETL. See also: FGETL Help for ndi.database.implementations.binarydoc.matfid/fgetl is inherited from superclass vlt.file.fileobj fgets - get a line from a FILEOBJ TLINE = FGETS(FILEOBJ_OBJ, [NCHAR]) Returns the next line (including NEWLINE character) just like FGETS. See also: FGETS Help for ndi.database.implementations.binarydoc.matfid/fgets is inherited from superclass vlt.file.fileobj fileparts - return filename parts for the file associated with FILEOBJ [PATHSTR,NAME,EXT] = FILEPARTS(FILEOBJ_OBJ) Returns FILEPARTS of the 'fullpathfilename' field of FILEOBJ. Help for ndi.database.implementations.binarydoc.matfid/fileparts is inherited from superclass vlt.file.fileobj findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID Help for ndi.database.implementations.binarydoc.matfid/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.implementations.binarydoc.matfid, ndi.database.implementations.binarydoc.matfid/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.implementations.binarydoc.matfid/findprop is inherited from superclass handle fopen - open a FILEOBJ FILEOBJ_OBJ = FOPEN(FILEOBJ_OBJ, [ , PERMISSION], [MACHINEFORMAT],[FILENAME]) Opens the file associated with a FILEOBJ_OBJ object. If FILENAME, PERMISSION, and MACHINEFORMAT are given, then those variables of FILEOBJ_OBJ are updated. If they are not given, then the existing values in the FILEOBJ_OBJ are used. Note that the order of the input arguments differs from FOPEN, so that the object can be called in place of an FID (e.g., fid=fopen(myvariable), where myvariable is either a file name or a FILEOBJ object). If the operation is successful, then FILEOBJ_OBJ.fid is greater than 3. Otherwise, FILEOBJ_OBJ.fid is -1. See also: FOPEN, FILEOBJ/FCLOSE, FCLOSE Help for ndi.database.implementations.binarydoc.matfid/fopen is inherited from superclass vlt.file.fileobj fprintf - print data to a FILEOBJ_OBJ [COUNT] = FPRINTF(FID,FORMAT,A, ...) Call FPRINTF (see FPRINTF for inputs) for the file associated with FILEOBJ_OBJ. Help for ndi.database.implementations.binarydoc.matfid/fprintf is inherited from superclass vlt.file.fileobj fread - read data from a FILEOBJ COUNT = FWRITE(FILEOBJ_OBJ, COUNT, [PRECISION], [SKIP], [MACHINEFORMAT]) Attempts to read COUNT elements with resolution PRECISION. If PRECISION is not provided, then 'char' is assumed. If SKIP is provided, then SKIP is in number of bytes, unless PRECISION is in bits, in which case SKIP is in bits. MACHINEFORMAT is the machine format to use. See FREAD for a full description of these input arguments. See also: FREAD Help for ndi.database.implementations.binarydoc.matfid/fread is inherited from superclass vlt.file.fileobj frewind - 'rewind' a FILEOBJ back to the beginning FREWIND(FILEOBJ_OBJ) Seeks to the beginning of the file. See also: FSEEK, FILEOBJ/FSEEK, FTELL Help for ndi.database.implementations.binarydoc.matfid/frewind is inherited from superclass vlt.file.fileobj fscanf - scan data from a FILEOBJ_OBJ [A,COUNT] = FSCANF(FID,FORMAT,[SIZEA]) Call FSCANF (see FSCANF for inputs) for the file associated with FILEOBJ_OBJ. Help for ndi.database.implementations.binarydoc.matfid/fscanf is inherited from superclass vlt.file.fileobj fseek - seek to a location within a FILEOBJ B = FSEEK(FILEOBJ_OBJ, OFFSET, REFERENCE) Seeks the file to the location OFFSET (in bytes) relative to REFERENCE. REFERENCE can be 'bof' or -1 Beginning of file 'cof' or 0 Current position in file 'eof' or 1 End of file B is 0 on success and -1 on failure. See also: FSEEK, FILEOBJ/FTELL Help for ndi.database.implementations.binarydoc.matfid/fseek is inherited from superclass vlt.file.fileobj ftell - find current location within a FILEOBJ LOCATION = FTELL(FILEOBJ_OBJ) Returns the current location (in bytes) relative to the beginning of the file. If the query fails, -1 is returned. See also: FSEEK, FILEOBJ/FSEEK, FTELL Help for ndi.database.implementations.binarydoc.matfid/ftell is inherited from superclass vlt.file.fileobj fwrite - write data to a FILEOBJ COUNT = FWRITE(FILEOBJ_OBJ, DATA, [PRECISION], [SKIP], [MACHINEFORMAT]) Attempts to write DATA elements with resolution PRECISION. If PRECISION is not provided, then 'char' is assumed. If SKIP is provided, then SKIP is in number of bytes, unless PRECISION is in bits, in which case SKIP is in bits. MACHINEFORMAT is the machine format to use. See FWRITE for a full description of these input arguments. See also: FWRITE Help for ndi.database.implementations.binarydoc.matfid/fwrite is inherited from superclass vlt.file.fileobj ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/EQ, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/NE Help for ndi.database.implementations.binarydoc.matfid/ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/EQ, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/NE Help for ndi.database.implementations.binarydoc.matfid/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/DELETE Help for ndi.database.implementations.binarydoc.matfid/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/EQ, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/NE Help for ndi.database.implementations.binarydoc.matfid/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.implementations.binarydoc.matfid, matlab.metadata.Property, events Help for ndi.database.implementations.binarydoc.matfid/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/EQ, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/NE Help for ndi.database.implementations.binarydoc.matfid/lt is inherited from superclass handle matfid - create a new ndi.database.implementations.binarydoc.matfid object NDI_BINARYDOC_MATFID_OBJ = ndi.database.implementations.binarydoc.matfid(PARAM1,VALUE1, ...) Follows same arguments as vlt.file.fileobj See also: vlt.file.fileobj, vlt.file.fileobj/FILEOBJ Documentation for ndi.database.implementations.binarydoc.matfid/matfid doc ndi.database.implementations.binarydoc.matfid ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/EQ, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LT Help for ndi.database.implementations.binarydoc.matfid/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/ADDLISTENER, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.implementations.binarydoc.matfid/notify is inherited from superclass handle setproperties - set the properties of a FILEOBJ FILEOBJ_OBJ = SETPROPERTIES(FILEOBJ_OBJ, 'PROPERTY1',VALUE1, ...) Sets the properties of a FILEOBJ with name/value pairs. Properties are: fullpathfilename; % the full path file name of the file fid; % The Matlab file identifier permission; % The file permission machineformat % big-endian ('b'), little-endian ('l'), or native ('n') Help for ndi.database.implementations.binarydoc.matfid/setproperties is inherited from superclass vlt.file.fileobj","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/didsqlite.m/","text":"CLASS ndi.database.implementations.database.didsqlite didsqlite - a database based on sqlite Superclasses ndi.database Properties Property Description db did.sqlitedb path session_unique_reference Methods Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc didsqlite ndi.database.implementations.database.didsqlite make a new ndi.database.implementations.database.didsqlite object existbinarydoc check if a binary doc exists for a given document id newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database Methods help add - add an ndi.document to the database at a given path NDI_DATABASE_OBJ = ADD(NDI_DATABASE_OBJ, NDI_DOCUMENT_OBJ, DBPATH, ...) Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ. This function also accepts name/value pairs that modify its behavior: Parameter (default) | Description ------------------------------------------------------------------------- 'Update' (1) | If document exists, update it. If 0, an error is | generated if a document with the same ID exists See also: vlt.data.namevaluepair Help for ndi.database.implementations.database.didsqlite/add is inherited from superclass ndi.database alldocids - return all document unique reference numbers for the database DOCIDS = ALLDOCIDS(NDI_DIDSQLITE_OBJ) Return all document unique reference strings as a cell array of strings. If there are no documents, empty is returned. clear - remove/delete all records from an ndi.database CLEAR(NDI_DATABASE_OBJ, [AREYOUSURE]) Removes all documents from the vlt.file.dumbjsondb object. Use with care. If AREYOUSURE is 'yes' then the function will proceed. Otherwise, it will not. See also: ndi.database.implementations.database.didsqlite/REMOVE Help for ndi.database.implementations.database.didsqlite/clear is inherited from superclass ndi.database closebinarydoc - close and unlock an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = CLOSEBINARYDOC(NDI_DATABASE_OBJ, NDI_BINARYDOC_OBJ) Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the database, which is why it is necessary to call this function through the database. Help for ndi.database.implementations.database.didsqlite/closebinarydoc is inherited from superclass ndi.database didsqlite - ndi.database.implementations.database.didsqlite make a new ndi.database.implementations.database.didsqlite object NDI_DIDSQLITE_OBJ = ndi.database.implementation.database.didsqlite(... PATH, SESSION_UNIQUE_REFERENCE, COMMAND, ...) Creates a new ndi.database.implementations.database.didsqlite object. COMMAND can either be 'Load' or 'New'. The second argument should be the full pathname of the location where the files should be stored on disk. See also: did.database, did.implementations.sqlitedb Documentation for ndi.database.implementations.database.didsqlite/didsqlite doc ndi.database.implementations.database.didsqlite existbinarydoc - check if a binary doc exists for a given document id [TF, FILE_PATH] = EXISTBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. Help for ndi.database.implementations.database.didsqlite/existbinarydoc is inherited from superclass ndi.database newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DATABASE_OBJ [, DOCUMENT_TYPE]) Creates a new/blank ndi.document document object that can be used with this ndi.database. Help for ndi.database.implementations.database.didsqlite/newdocument is inherited from superclass ndi.database openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id [NDI_BINARYDOC_OBJ] = OPENBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME]) Return the open ndi.database.binarydoc object and VERSION that corresponds to an ndi.document and the requested version (the latest version is used if the argument is omitted). NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself. Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi.database/CLOSEBINARYDOC. The locked nature of the binary doc is a property of the database, not the document, which is why the database is needed. Help for ndi.database.implementations.database.didsqlite/openbinarydoc is inherited from superclass ndi.database read - read an ndi.document from an ndi.database at a given db path NDI_DOCUMENT_OBJ = READ(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID, [VERSION]) Read the ndi.document object with the document ID specified by NDI_DOCUMENT_ID. If VERSION is provided (an integer) then only the version that is equal to VERSION is returned. Otherwise, the latest version is returned. If there is no ndi.document object with that ID, then empty is returned ([]). Help for ndi.database.implementations.database.didsqlite/read is inherited from superclass ndi.database remove - remove a document from an ndi.database NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID) or NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT) Removes the ndi.document object with the 'document unique reference' equal to NDI_DOCUMENT_OBJ_ID. If an ndi.document is passed, then the NDI_DOCUMENT_ID is extracted using ndi.document/DOC_UNIQUE_ID. If a cell array of ndi.document is passed instead, then all of the documents are removed. Help for ndi.database.implementations.database.didsqlite/remove is inherited from superclass ndi.database search - search for an ndi.document from an ndi.database [DOCUMENT_OBJS] = SEARCH(NDI_DATABASE_OBJ, {'PARAM1', VALUE1, 'PARAM2', VALUE2, ... }) Searches metadata parameters PARAM1, PARAM2, etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ. If VALUEN is a string, then a regular expression is evaluated to determine the match. If VALUEN is not a string, then the items must match exactly. If PARAMN1 begins with a dash, then VALUEN indicates the value of one of these special parameters: This function returns a cell array of ndi.document objects. If no documents match the query, then an empty cell array ({}) is returned. Help for ndi.database.implementations.database.didsqlite/search is inherited from superclass ndi.database","title":"ndi.database.implementations.database.didsqlite"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/didsqlite.m/#class-ndidatabaseimplementationsdatabasedidsqlite","text":"didsqlite - a database based on sqlite","title":"CLASS ndi.database.implementations.database.didsqlite"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/didsqlite.m/#superclasses","text":"ndi.database","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/didsqlite.m/#properties","text":"Property Description db did.sqlitedb path session_unique_reference","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/didsqlite.m/#methods","text":"Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc didsqlite ndi.database.implementations.database.didsqlite make a new ndi.database.implementations.database.didsqlite object existbinarydoc check if a binary doc exists for a given document id newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/didsqlite.m/#methods-help","text":"add - add an ndi.document to the database at a given path NDI_DATABASE_OBJ = ADD(NDI_DATABASE_OBJ, NDI_DOCUMENT_OBJ, DBPATH, ...) Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ. This function also accepts name/value pairs that modify its behavior: Parameter (default) | Description ------------------------------------------------------------------------- 'Update' (1) | If document exists, update it. If 0, an error is | generated if a document with the same ID exists See also: vlt.data.namevaluepair Help for ndi.database.implementations.database.didsqlite/add is inherited from superclass ndi.database alldocids - return all document unique reference numbers for the database DOCIDS = ALLDOCIDS(NDI_DIDSQLITE_OBJ) Return all document unique reference strings as a cell array of strings. If there are no documents, empty is returned. clear - remove/delete all records from an ndi.database CLEAR(NDI_DATABASE_OBJ, [AREYOUSURE]) Removes all documents from the vlt.file.dumbjsondb object. Use with care. If AREYOUSURE is 'yes' then the function will proceed. Otherwise, it will not. See also: ndi.database.implementations.database.didsqlite/REMOVE Help for ndi.database.implementations.database.didsqlite/clear is inherited from superclass ndi.database closebinarydoc - close and unlock an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = CLOSEBINARYDOC(NDI_DATABASE_OBJ, NDI_BINARYDOC_OBJ) Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the database, which is why it is necessary to call this function through the database. Help for ndi.database.implementations.database.didsqlite/closebinarydoc is inherited from superclass ndi.database didsqlite - ndi.database.implementations.database.didsqlite make a new ndi.database.implementations.database.didsqlite object NDI_DIDSQLITE_OBJ = ndi.database.implementation.database.didsqlite(... PATH, SESSION_UNIQUE_REFERENCE, COMMAND, ...) Creates a new ndi.database.implementations.database.didsqlite object. COMMAND can either be 'Load' or 'New'. The second argument should be the full pathname of the location where the files should be stored on disk. See also: did.database, did.implementations.sqlitedb Documentation for ndi.database.implementations.database.didsqlite/didsqlite doc ndi.database.implementations.database.didsqlite existbinarydoc - check if a binary doc exists for a given document id [TF, FILE_PATH] = EXISTBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. Help for ndi.database.implementations.database.didsqlite/existbinarydoc is inherited from superclass ndi.database newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DATABASE_OBJ [, DOCUMENT_TYPE]) Creates a new/blank ndi.document document object that can be used with this ndi.database. Help for ndi.database.implementations.database.didsqlite/newdocument is inherited from superclass ndi.database openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id [NDI_BINARYDOC_OBJ] = OPENBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME]) Return the open ndi.database.binarydoc object and VERSION that corresponds to an ndi.document and the requested version (the latest version is used if the argument is omitted). NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself. Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi.database/CLOSEBINARYDOC. The locked nature of the binary doc is a property of the database, not the document, which is why the database is needed. Help for ndi.database.implementations.database.didsqlite/openbinarydoc is inherited from superclass ndi.database read - read an ndi.document from an ndi.database at a given db path NDI_DOCUMENT_OBJ = READ(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID, [VERSION]) Read the ndi.document object with the document ID specified by NDI_DOCUMENT_ID. If VERSION is provided (an integer) then only the version that is equal to VERSION is returned. Otherwise, the latest version is returned. If there is no ndi.document object with that ID, then empty is returned ([]). Help for ndi.database.implementations.database.didsqlite/read is inherited from superclass ndi.database remove - remove a document from an ndi.database NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID) or NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT) Removes the ndi.document object with the 'document unique reference' equal to NDI_DOCUMENT_OBJ_ID. If an ndi.document is passed, then the NDI_DOCUMENT_ID is extracted using ndi.document/DOC_UNIQUE_ID. If a cell array of ndi.document is passed instead, then all of the documents are removed. Help for ndi.database.implementations.database.didsqlite/remove is inherited from superclass ndi.database search - search for an ndi.document from an ndi.database [DOCUMENT_OBJS] = SEARCH(NDI_DATABASE_OBJ, {'PARAM1', VALUE1, 'PARAM2', VALUE2, ... }) Searches metadata parameters PARAM1, PARAM2, etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ. If VALUEN is a string, then a regular expression is evaluated to determine the match. If VALUEN is not a string, then the items must match exactly. If PARAMN1 begins with a dash, then VALUEN indicates the value of one of these special parameters: This function returns a cell array of ndi.document objects. If no documents match the query, then an empty cell array ({}) is returned. Help for ndi.database.implementations.database.didsqlite/search is inherited from superclass ndi.database","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb.m/","text":"CLASS ndi.database.implementations.database.matlabdumbjsondb ndi.database.implementations.database.matlabdumbjsondb make a new ndi.database.implementations.database.matlabdumbjsondb object NDI_MATLABDUMBJSONDB_OBJ = ndi.database.implementation.database.matlabdumbjsondb(PATH, SESSION_UNIQUE_REFERENCE, COMMAND, ...) Creates a new ndi.database.implementations.database.matlabdumbjsondb object. COMMAND can either be 'Load' or 'New'. The second argument should be the full pathname of the location where the files should be stored on disk. See also: vlt.file.dumbjsondb, vlt.file.dumbjsondb/DUMBJSONDB Superclasses ndi.database Properties Property Description db vlt.file.dumbjsondb object path session_unique_reference Methods Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc existbinarydoc check if a binary doc exists for a given document id matlabdumbjsondb ndi.database.implementations.database.matlabdumbjsondb make a new ndi.database.implementations.database.matlabdumbjsondb object newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database Methods help add - add an ndi.document to the database at a given path NDI_DATABASE_OBJ = ADD(NDI_DATABASE_OBJ, NDI_DOCUMENT_OBJ, DBPATH, ...) Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ. This function also accepts name/value pairs that modify its behavior: Parameter (default) | Description ------------------------------------------------------------------------- 'Update' (1) | If document exists, update it. If 0, an error is | generated if a document with the same ID exists See also: vlt.data.namevaluepair Help for ndi.database.implementations.database.matlabdumbjsondb/add is inherited from superclass ndi.database alldocids - return all document unique reference numbers for the database DOCIDS = ALLDOCIDS(NDI_MATLABDUMBJSONDB_OBJ) Return all document unique reference strings as a cell array of strings. If there are no documents, empty is returned. clear - remove/delete all records from an ndi.database CLEAR(NDI_DATABASE_OBJ, [AREYOUSURE]) Removes all documents from the vlt.file.dumbjsondb object. Use with care. If AREYOUSURE is 'yes' then the function will proceed. Otherwise, it will not. See also: ndi.database.implementations.database.matlabdumbjsondb/REMOVE Help for ndi.database.implementations.database.matlabdumbjsondb/clear is inherited from superclass ndi.database closebinarydoc - close and unlock an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = CLOSEBINARYDOC(NDI_DATABASE_OBJ, NDI_BINARYDOC_OBJ) Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the database, which is why it is necessary to call this function through the database. Help for ndi.database.implementations.database.matlabdumbjsondb/closebinarydoc is inherited from superclass ndi.database existbinarydoc - check if a binary doc exists for a given document id [TF, FILE_PATH] = EXISTBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. Help for ndi.database.implementations.database.matlabdumbjsondb/existbinarydoc is inherited from superclass ndi.database matlabdumbjsondb - ndi.database.implementations.database.matlabdumbjsondb make a new ndi.database.implementations.database.matlabdumbjsondb object NDI_MATLABDUMBJSONDB_OBJ = ndi.database.implementation.database.matlabdumbjsondb(PATH, SESSION_UNIQUE_REFERENCE, COMMAND, ...) Creates a new ndi.database.implementations.database.matlabdumbjsondb object. COMMAND can either be 'Load' or 'New'. The second argument should be the full pathname of the location where the files should be stored on disk. See also: vlt.file.dumbjsondb, vlt.file.dumbjsondb/DUMBJSONDB Documentation for ndi.database.implementations.database.matlabdumbjsondb/matlabdumbjsondb doc ndi.database.implementations.database.matlabdumbjsondb newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DATABASE_OBJ [, DOCUMENT_TYPE]) Creates a new/blank ndi.document document object that can be used with this ndi.database. Help for ndi.database.implementations.database.matlabdumbjsondb/newdocument is inherited from superclass ndi.database openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id [NDI_BINARYDOC_OBJ] = OPENBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME]) Return the open ndi.database.binarydoc object and VERSION that corresponds to an ndi.document and the requested version (the latest version is used if the argument is omitted). NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself. Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi.database/CLOSEBINARYDOC. The locked nature of the binary doc is a property of the database, not the document, which is why the database is needed. Help for ndi.database.implementations.database.matlabdumbjsondb/openbinarydoc is inherited from superclass ndi.database read - read an ndi.document from an ndi.database at a given db path NDI_DOCUMENT_OBJ = READ(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID, [VERSION]) Read the ndi.document object with the document ID specified by NDI_DOCUMENT_ID. If VERSION is provided (an integer) then only the version that is equal to VERSION is returned. Otherwise, the latest version is returned. If there is no ndi.document object with that ID, then empty is returned ([]). Help for ndi.database.implementations.database.matlabdumbjsondb/read is inherited from superclass ndi.database remove - remove a document from an ndi.database NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID) or NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT) Removes the ndi.document object with the 'document unique reference' equal to NDI_DOCUMENT_OBJ_ID. If an ndi.document is passed, then the NDI_DOCUMENT_ID is extracted using ndi.document/DOC_UNIQUE_ID. If a cell array of ndi.document is passed instead, then all of the documents are removed. Help for ndi.database.implementations.database.matlabdumbjsondb/remove is inherited from superclass ndi.database search - search for an ndi.document from an ndi.database [DOCUMENT_OBJS] = SEARCH(NDI_DATABASE_OBJ, {'PARAM1', VALUE1, 'PARAM2', VALUE2, ... }) Searches metadata parameters PARAM1, PARAM2, etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ. If VALUEN is a string, then a regular expression is evaluated to determine the match. If VALUEN is not a string, then the items must match exactly. If PARAMN1 begins with a dash, then VALUEN indicates the value of one of these special parameters: This function returns a cell array of ndi.document objects. If no documents match the query, then an empty cell array ({}) is returned. Help for ndi.database.implementations.database.matlabdumbjsondb/search is inherited from superclass ndi.database","title":"ndi.database.implementations.database.matlabdumbjsondb"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb.m/#class-ndidatabaseimplementationsdatabasematlabdumbjsondb","text":"ndi.database.implementations.database.matlabdumbjsondb make a new ndi.database.implementations.database.matlabdumbjsondb object NDI_MATLABDUMBJSONDB_OBJ = ndi.database.implementation.database.matlabdumbjsondb(PATH, SESSION_UNIQUE_REFERENCE, COMMAND, ...) Creates a new ndi.database.implementations.database.matlabdumbjsondb object. COMMAND can either be 'Load' or 'New'. The second argument should be the full pathname of the location where the files should be stored on disk. See also: vlt.file.dumbjsondb, vlt.file.dumbjsondb/DUMBJSONDB","title":"CLASS ndi.database.implementations.database.matlabdumbjsondb"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb.m/#superclasses","text":"ndi.database","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb.m/#properties","text":"Property Description db vlt.file.dumbjsondb object path session_unique_reference","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb.m/#methods","text":"Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc existbinarydoc check if a binary doc exists for a given document id matlabdumbjsondb ndi.database.implementations.database.matlabdumbjsondb make a new ndi.database.implementations.database.matlabdumbjsondb object newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb.m/#methods-help","text":"add - add an ndi.document to the database at a given path NDI_DATABASE_OBJ = ADD(NDI_DATABASE_OBJ, NDI_DOCUMENT_OBJ, DBPATH, ...) Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ. This function also accepts name/value pairs that modify its behavior: Parameter (default) | Description ------------------------------------------------------------------------- 'Update' (1) | If document exists, update it. If 0, an error is | generated if a document with the same ID exists See also: vlt.data.namevaluepair Help for ndi.database.implementations.database.matlabdumbjsondb/add is inherited from superclass ndi.database alldocids - return all document unique reference numbers for the database DOCIDS = ALLDOCIDS(NDI_MATLABDUMBJSONDB_OBJ) Return all document unique reference strings as a cell array of strings. If there are no documents, empty is returned. clear - remove/delete all records from an ndi.database CLEAR(NDI_DATABASE_OBJ, [AREYOUSURE]) Removes all documents from the vlt.file.dumbjsondb object. Use with care. If AREYOUSURE is 'yes' then the function will proceed. Otherwise, it will not. See also: ndi.database.implementations.database.matlabdumbjsondb/REMOVE Help for ndi.database.implementations.database.matlabdumbjsondb/clear is inherited from superclass ndi.database closebinarydoc - close and unlock an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = CLOSEBINARYDOC(NDI_DATABASE_OBJ, NDI_BINARYDOC_OBJ) Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the database, which is why it is necessary to call this function through the database. Help for ndi.database.implementations.database.matlabdumbjsondb/closebinarydoc is inherited from superclass ndi.database existbinarydoc - check if a binary doc exists for a given document id [TF, FILE_PATH] = EXISTBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. Help for ndi.database.implementations.database.matlabdumbjsondb/existbinarydoc is inherited from superclass ndi.database matlabdumbjsondb - ndi.database.implementations.database.matlabdumbjsondb make a new ndi.database.implementations.database.matlabdumbjsondb object NDI_MATLABDUMBJSONDB_OBJ = ndi.database.implementation.database.matlabdumbjsondb(PATH, SESSION_UNIQUE_REFERENCE, COMMAND, ...) Creates a new ndi.database.implementations.database.matlabdumbjsondb object. COMMAND can either be 'Load' or 'New'. The second argument should be the full pathname of the location where the files should be stored on disk. See also: vlt.file.dumbjsondb, vlt.file.dumbjsondb/DUMBJSONDB Documentation for ndi.database.implementations.database.matlabdumbjsondb/matlabdumbjsondb doc ndi.database.implementations.database.matlabdumbjsondb newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DATABASE_OBJ [, DOCUMENT_TYPE]) Creates a new/blank ndi.document document object that can be used with this ndi.database. Help for ndi.database.implementations.database.matlabdumbjsondb/newdocument is inherited from superclass ndi.database openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id [NDI_BINARYDOC_OBJ] = OPENBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME]) Return the open ndi.database.binarydoc object and VERSION that corresponds to an ndi.document and the requested version (the latest version is used if the argument is omitted). NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself. Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi.database/CLOSEBINARYDOC. The locked nature of the binary doc is a property of the database, not the document, which is why the database is needed. Help for ndi.database.implementations.database.matlabdumbjsondb/openbinarydoc is inherited from superclass ndi.database read - read an ndi.document from an ndi.database at a given db path NDI_DOCUMENT_OBJ = READ(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID, [VERSION]) Read the ndi.document object with the document ID specified by NDI_DOCUMENT_ID. If VERSION is provided (an integer) then only the version that is equal to VERSION is returned. Otherwise, the latest version is returned. If there is no ndi.document object with that ID, then empty is returned ([]). Help for ndi.database.implementations.database.matlabdumbjsondb/read is inherited from superclass ndi.database remove - remove a document from an ndi.database NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID) or NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT) Removes the ndi.document object with the 'document unique reference' equal to NDI_DOCUMENT_OBJ_ID. If an ndi.document is passed, then the NDI_DOCUMENT_ID is extracted using ndi.document/DOC_UNIQUE_ID. If a cell array of ndi.document is passed instead, then all of the documents are removed. Help for ndi.database.implementations.database.matlabdumbjsondb/remove is inherited from superclass ndi.database search - search for an ndi.document from an ndi.database [DOCUMENT_OBJS] = SEARCH(NDI_DATABASE_OBJ, {'PARAM1', VALUE1, 'PARAM2', VALUE2, ... }) Searches metadata parameters PARAM1, PARAM2, etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ. If VALUEN is a string, then a regular expression is evaluated to determine the match. If VALUEN is not a string, then the items must match exactly. If PARAMN1 begins with a dash, then VALUEN indicates the value of one of these special parameters: This function returns a cell array of ndi.document objects. If no documents match the query, then an empty cell array ({}) is returned. Help for ndi.database.implementations.database.matlabdumbjsondb/search is inherited from superclass ndi.database","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb2.m/","text":"CLASS ndi.database.implementations.database.matlabdumbjsondb2 matlabdumbjsondb2 - with enhanced file management Superclasses ndi.database Properties Property Description db vlt.file.dumbjsondb object path session_unique_reference Methods Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc existbinarydoc check if a binary doc exists for a given document id matlabdumbjsondb2 ndi.database.implementations.database.matlabdumbjsondb2 make a new ndi.database.implementations.database.matlabdumbjsondb object newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database Methods help add - add an ndi.document to the database at a given path NDI_DATABASE_OBJ = ADD(NDI_DATABASE_OBJ, NDI_DOCUMENT_OBJ, DBPATH, ...) Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ. This function also accepts name/value pairs that modify its behavior: Parameter (default) | Description ------------------------------------------------------------------------- 'Update' (1) | If document exists, update it. If 0, an error is | generated if a document with the same ID exists See also: vlt.data.namevaluepair Help for ndi.database.implementations.database.matlabdumbjsondb2/add is inherited from superclass ndi.database alldocids - return all document unique reference numbers for the database DOCIDS = ALLDOCIDS(NDI_MATLABDUMBJSONDB_OBJ) Return all document unique reference strings as a cell array of strings. If there are no documents, empty is returned. clear - remove/delete all records from an ndi.database CLEAR(NDI_DATABASE_OBJ, [AREYOUSURE]) Removes all documents from the vlt.file.dumbjsondb object. Use with care. If AREYOUSURE is 'yes' then the function will proceed. Otherwise, it will not. See also: ndi.database.implementations.database.matlabdumbjsondb2/REMOVE Help for ndi.database.implementations.database.matlabdumbjsondb2/clear is inherited from superclass ndi.database closebinarydoc - close and unlock an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = CLOSEBINARYDOC(NDI_DATABASE_OBJ, NDI_BINARYDOC_OBJ) Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the database, which is why it is necessary to call this function through the database. Help for ndi.database.implementations.database.matlabdumbjsondb2/closebinarydoc is inherited from superclass ndi.database existbinarydoc - check if a binary doc exists for a given document id [TF, FILE_PATH] = EXISTBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. Help for ndi.database.implementations.database.matlabdumbjsondb2/existbinarydoc is inherited from superclass ndi.database matlabdumbjsondb2 - ndi.database.implementations.database.matlabdumbjsondb2 make a new ndi.database.implementations.database.matlabdumbjsondb object NDI_MATLABDUMBJSONDB_OBJ = ndi.database.implementation.database.matlabdumbjsondb2(... PATH, SESSION_UNIQUE_REFERENCE, COMMAND, ...) Creates a new ndi.database.implementations.database.matlabdumbjsondb2 object. COMMAND can either be 'Load' or 'New'. The second argument should be the full pathname of the location where the files should be stored on disk. See also: vlt.file.dumbjsondb, vlt.file.dumbjsondb/DUMBJSONDB Documentation for ndi.database.implementations.database.matlabdumbjsondb2/matlabdumbjsondb2 doc ndi.database.implementations.database.matlabdumbjsondb2 newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DATABASE_OBJ [, DOCUMENT_TYPE]) Creates a new/blank ndi.document document object that can be used with this ndi.database. Help for ndi.database.implementations.database.matlabdumbjsondb2/newdocument is inherited from superclass ndi.database openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id [NDI_BINARYDOC_OBJ] = OPENBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME]) Return the open ndi.database.binarydoc object and VERSION that corresponds to an ndi.document and the requested version (the latest version is used if the argument is omitted). NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself. Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi.database/CLOSEBINARYDOC. The locked nature of the binary doc is a property of the database, not the document, which is why the database is needed. Help for ndi.database.implementations.database.matlabdumbjsondb2/openbinarydoc is inherited from superclass ndi.database read - read an ndi.document from an ndi.database at a given db path NDI_DOCUMENT_OBJ = READ(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID, [VERSION]) Read the ndi.document object with the document ID specified by NDI_DOCUMENT_ID. If VERSION is provided (an integer) then only the version that is equal to VERSION is returned. Otherwise, the latest version is returned. If there is no ndi.document object with that ID, then empty is returned ([]). Help for ndi.database.implementations.database.matlabdumbjsondb2/read is inherited from superclass ndi.database remove - remove a document from an ndi.database NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID) or NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT) Removes the ndi.document object with the 'document unique reference' equal to NDI_DOCUMENT_OBJ_ID. If an ndi.document is passed, then the NDI_DOCUMENT_ID is extracted using ndi.document/DOC_UNIQUE_ID. If a cell array of ndi.document is passed instead, then all of the documents are removed. Help for ndi.database.implementations.database.matlabdumbjsondb2/remove is inherited from superclass ndi.database search - search for an ndi.document from an ndi.database [DOCUMENT_OBJS] = SEARCH(NDI_DATABASE_OBJ, {'PARAM1', VALUE1, 'PARAM2', VALUE2, ... }) Searches metadata parameters PARAM1, PARAM2, etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ. If VALUEN is a string, then a regular expression is evaluated to determine the match. If VALUEN is not a string, then the items must match exactly. If PARAMN1 begins with a dash, then VALUEN indicates the value of one of these special parameters: This function returns a cell array of ndi.document objects. If no documents match the query, then an empty cell array ({}) is returned. Help for ndi.database.implementations.database.matlabdumbjsondb2/search is inherited from superclass ndi.database","title":"ndi.database.implementations.database.matlabdumbjsondb2"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb2.m/#class-ndidatabaseimplementationsdatabasematlabdumbjsondb2","text":"matlabdumbjsondb2 - with enhanced file management","title":"CLASS ndi.database.implementations.database.matlabdumbjsondb2"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb2.m/#superclasses","text":"ndi.database","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb2.m/#properties","text":"Property Description db vlt.file.dumbjsondb object path session_unique_reference","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb2.m/#methods","text":"Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc existbinarydoc check if a binary doc exists for a given document id matlabdumbjsondb2 ndi.database.implementations.database.matlabdumbjsondb2 make a new ndi.database.implementations.database.matlabdumbjsondb object newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb2.m/#methods-help","text":"add - add an ndi.document to the database at a given path NDI_DATABASE_OBJ = ADD(NDI_DATABASE_OBJ, NDI_DOCUMENT_OBJ, DBPATH, ...) Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ. This function also accepts name/value pairs that modify its behavior: Parameter (default) | Description ------------------------------------------------------------------------- 'Update' (1) | If document exists, update it. If 0, an error is | generated if a document with the same ID exists See also: vlt.data.namevaluepair Help for ndi.database.implementations.database.matlabdumbjsondb2/add is inherited from superclass ndi.database alldocids - return all document unique reference numbers for the database DOCIDS = ALLDOCIDS(NDI_MATLABDUMBJSONDB_OBJ) Return all document unique reference strings as a cell array of strings. If there are no documents, empty is returned. clear - remove/delete all records from an ndi.database CLEAR(NDI_DATABASE_OBJ, [AREYOUSURE]) Removes all documents from the vlt.file.dumbjsondb object. Use with care. If AREYOUSURE is 'yes' then the function will proceed. Otherwise, it will not. See also: ndi.database.implementations.database.matlabdumbjsondb2/REMOVE Help for ndi.database.implementations.database.matlabdumbjsondb2/clear is inherited from superclass ndi.database closebinarydoc - close and unlock an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = CLOSEBINARYDOC(NDI_DATABASE_OBJ, NDI_BINARYDOC_OBJ) Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the database, which is why it is necessary to call this function through the database. Help for ndi.database.implementations.database.matlabdumbjsondb2/closebinarydoc is inherited from superclass ndi.database existbinarydoc - check if a binary doc exists for a given document id [TF, FILE_PATH] = EXISTBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. Help for ndi.database.implementations.database.matlabdumbjsondb2/existbinarydoc is inherited from superclass ndi.database matlabdumbjsondb2 - ndi.database.implementations.database.matlabdumbjsondb2 make a new ndi.database.implementations.database.matlabdumbjsondb object NDI_MATLABDUMBJSONDB_OBJ = ndi.database.implementation.database.matlabdumbjsondb2(... PATH, SESSION_UNIQUE_REFERENCE, COMMAND, ...) Creates a new ndi.database.implementations.database.matlabdumbjsondb2 object. COMMAND can either be 'Load' or 'New'. The second argument should be the full pathname of the location where the files should be stored on disk. See also: vlt.file.dumbjsondb, vlt.file.dumbjsondb/DUMBJSONDB Documentation for ndi.database.implementations.database.matlabdumbjsondb2/matlabdumbjsondb2 doc ndi.database.implementations.database.matlabdumbjsondb2 newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DATABASE_OBJ [, DOCUMENT_TYPE]) Creates a new/blank ndi.document document object that can be used with this ndi.database. Help for ndi.database.implementations.database.matlabdumbjsondb2/newdocument is inherited from superclass ndi.database openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id [NDI_BINARYDOC_OBJ] = OPENBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME]) Return the open ndi.database.binarydoc object and VERSION that corresponds to an ndi.document and the requested version (the latest version is used if the argument is omitted). NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself. Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi.database/CLOSEBINARYDOC. The locked nature of the binary doc is a property of the database, not the document, which is why the database is needed. Help for ndi.database.implementations.database.matlabdumbjsondb2/openbinarydoc is inherited from superclass ndi.database read - read an ndi.document from an ndi.database at a given db path NDI_DOCUMENT_OBJ = READ(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID, [VERSION]) Read the ndi.document object with the document ID specified by NDI_DOCUMENT_ID. If VERSION is provided (an integer) then only the version that is equal to VERSION is returned. Otherwise, the latest version is returned. If there is no ndi.document object with that ID, then empty is returned ([]). Help for ndi.database.implementations.database.matlabdumbjsondb2/read is inherited from superclass ndi.database remove - remove a document from an ndi.database NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID) or NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT) Removes the ndi.document object with the 'document unique reference' equal to NDI_DOCUMENT_OBJ_ID. If an ndi.document is passed, then the NDI_DOCUMENT_ID is extracted using ndi.document/DOC_UNIQUE_ID. If a cell array of ndi.document is passed instead, then all of the documents are removed. Help for ndi.database.implementations.database.matlabdumbjsondb2/remove is inherited from superclass ndi.database search - search for an ndi.document from an ndi.database [DOCUMENT_OBJS] = SEARCH(NDI_DATABASE_OBJ, {'PARAM1', VALUE1, 'PARAM2', VALUE2, ... }) Searches metadata parameters PARAM1, PARAM2, etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ. If VALUEN is a string, then a regular expression is evaluated to determine the match. If VALUEN is not a string, then the items must match exactly. If PARAMN1 begins with a dash, then VALUEN indicates the value of one of these special parameters: This function returns a cell array of ndi.document objects. If no documents match the query, then an empty cell array ({}) is returned. Help for ndi.database.implementations.database.matlabdumbjsondb2/search is inherited from superclass ndi.database","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/postgresdb.m/","text":"CLASS ndi.database.implementations.database.postgresdb ndi.database.implementations.database.postgresdb is a class. obj = ndi.database.implementations.database.postgresdb Superclasses ndi.database Properties Property Description db Stores PostgreSQL database dbname Used to specify name of Postgres database path session_unique_reference Methods Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc existbinarydoc check if a binary doc exists for a given document id ndi.database.postgresdb ndiquery_to_sql Translates an ndiquery into a SQL command newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id postgresdb ndi.database.implementations.database.postgresdb/postgresdb is a constructor. read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database Methods help add - add an ndi.document to the database at a given path NDI_DATABASE_OBJ = ADD(NDI_DATABASE_OBJ, NDI_DOCUMENT_OBJ, DBPATH, ...) Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ. This function also accepts name/value pairs that modify its behavior: Parameter (default) | Description ------------------------------------------------------------------------- 'Update' (1) | If document exists, update it. If 0, an error is | generated if a document with the same ID exists See also: vlt.data.namevaluepair Help for ndi.database.implementations.database.postgresdb/add is inherited from superclass ndi.database alldocids - return all document unique reference numbers for the database DOCIDS = ALLDOCIDS(NDI_POSTGRESDB_OBJ, DBNAME) Return all document unique reference strings as a cell array of strings. If there are no documents, empty is returned. NOTE: Requires Database name as input and Assuming data is stored in public.documents docid_query = \"SELECT id FROM \" + ndi_postgresdb_obj.dbname + \".public.documents\" data = select(ndi_postgresdb_obj.db,docid_query); clear - remove/delete all records from an ndi.database CLEAR(NDI_DATABASE_OBJ, [AREYOUSURE]) Removes all documents from the vlt.file.dumbjsondb object. Use with care. If AREYOUSURE is 'yes' then the function will proceed. Otherwise, it will not. See also: ndi.database.implementations.database.postgresdb/REMOVE Help for ndi.database.implementations.database.postgresdb/clear is inherited from superclass ndi.database closebinarydoc - close and unlock an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = CLOSEBINARYDOC(NDI_DATABASE_OBJ, NDI_BINARYDOC_OBJ) Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the database, which is why it is necessary to call this function through the database. Help for ndi.database.implementations.database.postgresdb/closebinarydoc is inherited from superclass ndi.database existbinarydoc - check if a binary doc exists for a given document id [TF, FILE_PATH] = EXISTBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. Help for ndi.database.implementations.database.postgresdb/existbinarydoc is inherited from superclass ndi.database ndi.database.postgresdb - ** ndiquery_to_sql - Translates an ndiquery into a SQL command Assumes input is a ndiquery converted to struct Assumes params are correct q = ndi.query('ndi_document.id','exact_string','ABCD','') (This means: find all documents that have a field ndi_document.id that exactly matches the string 'ABCD') q = ndi.query('list','exact_string','abc','') Example SQL query: SELECT data ->> 'list' AS list FROM dbname.public.documents WHERE data ->> 'list' LIKE ('%abc%') newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DATABASE_OBJ [, DOCUMENT_TYPE]) Creates a new/blank ndi.document document object that can be used with this ndi.database. Help for ndi.database.implementations.database.postgresdb/newdocument is inherited from superclass ndi.database openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id [NDI_BINARYDOC_OBJ] = OPENBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME]) Return the open ndi.database.binarydoc object and VERSION that corresponds to an ndi.document and the requested version (the latest version is used if the argument is omitted). NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itsef. Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi.database/CLOSEBINARYDOC. The locked nature of the binary doc is a property of the database, not the document, which is why the database is needed. Help for ndi.database.implementations.database.postgresdb/openbinarydoc is inherited from superclass ndi.database postgresdb - ndi.database.implementations.database.postgresdb/postgresdb is a constructor. obj = ndi.database.implementations.database.postgresdb Documentation for ndi.database.implementations.database.postgresdb/postgresdb doc ndi.database.implementations.database.postgresdb read - read an ndi.document from an ndi.database at a given db path NDI_DOCUMENT_OBJ = READ(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID, [VERSION]) Read the ndi.document object with the document ID specified by NDI_DOCUMENT_ID. If VERSION is provided (an integer) then only the version that is equal to VERSION is returned. Otherwise, the latest version is returned. If there is no ndi.document object with that ID, then empty is returned ([]). Help for ndi.database.implementations.database.postgresdb/read is inherited from superclass ndi.database remove - remove a document from an ndi.database NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID) or NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT) Removes the ndi.document object with the 'document unique reference' equal to NDI_DOCUMENT_OBJ_ID. If an ndi.document is passed, then the NDI_DOCUMENT_ID is extracted using ndi.document/DOC_UNIQUE_ID. If a cell array of ndi.document is passed instead, then all of the documents are removed. Help for ndi.database.implementations.database.postgresdb/remove is inherited from superclass ndi.database search - search for an ndi.document from an ndi.database [DOCUMENT_OBJS] = SEARCH(NDI_DATABASE_OBJ, {'PARAM1', VALUE1, 'PARAM2', VALUE2, ... }) Searches metadata parameters PARAM1, PARAM2, etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ. If VALUEN is a string, then a regular expression is evaluated to determine the match. If VALUEN is not a string, then the items must match exactly. If PARAMN1 begins with a dash, then VALUEN indicates the value of one of these special parameters: This function returns a cell array of ndi.document objects. If no documents match the query, then an empty cell array ({}) is returned. Help for ndi.database.implementations.database.postgresdb/search is inherited from superclass ndi.database","title":"CLASS ndi.database.implementations.database.postgresdb"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/postgresdb.m/#class-ndidatabaseimplementationsdatabasepostgresdb","text":"ndi.database.implementations.database.postgresdb is a class. obj = ndi.database.implementations.database.postgresdb","title":"CLASS ndi.database.implementations.database.postgresdb"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/postgresdb.m/#superclasses","text":"ndi.database","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/postgresdb.m/#properties","text":"Property Description db Stores PostgreSQL database dbname Used to specify name of Postgres database path session_unique_reference","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/postgresdb.m/#methods","text":"Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc existbinarydoc check if a binary doc exists for a given document id ndi.database.postgresdb ndiquery_to_sql Translates an ndiquery into a SQL command newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id postgresdb ndi.database.implementations.database.postgresdb/postgresdb is a constructor. read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/postgresdb.m/#methods-help","text":"add - add an ndi.document to the database at a given path NDI_DATABASE_OBJ = ADD(NDI_DATABASE_OBJ, NDI_DOCUMENT_OBJ, DBPATH, ...) Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ. This function also accepts name/value pairs that modify its behavior: Parameter (default) | Description ------------------------------------------------------------------------- 'Update' (1) | If document exists, update it. If 0, an error is | generated if a document with the same ID exists See also: vlt.data.namevaluepair Help for ndi.database.implementations.database.postgresdb/add is inherited from superclass ndi.database alldocids - return all document unique reference numbers for the database DOCIDS = ALLDOCIDS(NDI_POSTGRESDB_OBJ, DBNAME) Return all document unique reference strings as a cell array of strings. If there are no documents, empty is returned. NOTE: Requires Database name as input and Assuming data is stored in public.documents docid_query = \"SELECT id FROM \" + ndi_postgresdb_obj.dbname + \".public.documents\" data = select(ndi_postgresdb_obj.db,docid_query); clear - remove/delete all records from an ndi.database CLEAR(NDI_DATABASE_OBJ, [AREYOUSURE]) Removes all documents from the vlt.file.dumbjsondb object. Use with care. If AREYOUSURE is 'yes' then the function will proceed. Otherwise, it will not. See also: ndi.database.implementations.database.postgresdb/REMOVE Help for ndi.database.implementations.database.postgresdb/clear is inherited from superclass ndi.database closebinarydoc - close and unlock an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = CLOSEBINARYDOC(NDI_DATABASE_OBJ, NDI_BINARYDOC_OBJ) Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the database, which is why it is necessary to call this function through the database. Help for ndi.database.implementations.database.postgresdb/closebinarydoc is inherited from superclass ndi.database existbinarydoc - check if a binary doc exists for a given document id [TF, FILE_PATH] = EXISTBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. Help for ndi.database.implementations.database.postgresdb/existbinarydoc is inherited from superclass ndi.database ndi.database.postgresdb - ** ndiquery_to_sql - Translates an ndiquery into a SQL command Assumes input is a ndiquery converted to struct Assumes params are correct q = ndi.query('ndi_document.id','exact_string','ABCD','') (This means: find all documents that have a field ndi_document.id that exactly matches the string 'ABCD') q = ndi.query('list','exact_string','abc','') Example SQL query: SELECT data ->> 'list' AS list FROM dbname.public.documents WHERE data ->> 'list' LIKE ('%abc%') newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DATABASE_OBJ [, DOCUMENT_TYPE]) Creates a new/blank ndi.document document object that can be used with this ndi.database. Help for ndi.database.implementations.database.postgresdb/newdocument is inherited from superclass ndi.database openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id [NDI_BINARYDOC_OBJ] = OPENBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME]) Return the open ndi.database.binarydoc object and VERSION that corresponds to an ndi.document and the requested version (the latest version is used if the argument is omitted). NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itsef. Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi.database/CLOSEBINARYDOC. The locked nature of the binary doc is a property of the database, not the document, which is why the database is needed. Help for ndi.database.implementations.database.postgresdb/openbinarydoc is inherited from superclass ndi.database postgresdb - ndi.database.implementations.database.postgresdb/postgresdb is a constructor. obj = ndi.database.implementations.database.postgresdb Documentation for ndi.database.implementations.database.postgresdb/postgresdb doc ndi.database.implementations.database.postgresdb read - read an ndi.document from an ndi.database at a given db path NDI_DOCUMENT_OBJ = READ(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID, [VERSION]) Read the ndi.document object with the document ID specified by NDI_DOCUMENT_ID. If VERSION is provided (an integer) then only the version that is equal to VERSION is returned. Otherwise, the latest version is returned. If there is no ndi.document object with that ID, then empty is returned ([]). Help for ndi.database.implementations.database.postgresdb/read is inherited from superclass ndi.database remove - remove a document from an ndi.database NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID) or NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT) Removes the ndi.document object with the 'document unique reference' equal to NDI_DOCUMENT_OBJ_ID. If an ndi.document is passed, then the NDI_DOCUMENT_ID is extracted using ndi.document/DOC_UNIQUE_ID. If a cell array of ndi.document is passed instead, then all of the documents are removed. Help for ndi.database.implementations.database.postgresdb/remove is inherited from superclass ndi.database search - search for an ndi.document from an ndi.database [DOCUMENT_OBJS] = SEARCH(NDI_DATABASE_OBJ, {'PARAM1', VALUE1, 'PARAM2', VALUE2, ... }) Searches metadata parameters PARAM1, PARAM2, etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ. If VALUEN is a string, then a regular expression is evaluated to determine the match. If VALUEN is not a string, then the items must match exactly. If PARAMN1 begins with a dash, then VALUEN indicates the value of one of these special parameters: This function returns a cell array of ndi.document objects. If no documents match the query, then an empty cell array ({}) is returned. Help for ndi.database.implementations.database.postgresdb/search is inherited from superclass ndi.database","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bfun/doc2ingesteddbfilename.m/","text":"ndi.database.implementations.fun.doc2ingesteddbfilename DBFILENAME = DOC2INGESTEDDBFILENAME(NDI_DOCUMENT_OBJ, FILENAME) Given an ndi.document object and its internal binary FILENAME, and if the file exists in an ingested form, return the full path filename in the database.","title":"ndi.database.implementations.fun.doc2ingesteddbfilename"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bfun/doc2ingesteddbfilename.m/#ndidatabaseimplementationsfundoc2ingesteddbfilename","text":"DBFILENAME = DOC2INGESTEDDBFILENAME(NDI_DOCUMENT_OBJ, FILENAME) Given an ndi.document object and its internal binary FILENAME, and if the file exists in an ingested form, return the full path filename in the database.","title":"ndi.database.implementations.fun.doc2ingesteddbfilename"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bfun/expell.m/","text":"ndi.database.implementations.fun.expell EXPELL - actually expell files from an ndi_document file_info from a database [B,MSG] = ndi.database.implementations.fun.ingest(TO_DELETE_LIST]); Expell files from a database. TO_DELETE_LIST is a list of files to be deleted. B is 1 if the operation is successful, 0 otherwise. MSG is empty ('') if there is no error and contains a description of the error that occurred if there was an error. See also: ndi.database.implementations.fun.expell_plan()","title":"ndi.database.implementations.fun.expell"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bfun/expell.m/#ndidatabaseimplementationsfunexpell","text":"EXPELL - actually expell files from an ndi_document file_info from a database [B,MSG] = ndi.database.implementations.fun.ingest(TO_DELETE_LIST]); Expell files from a database. TO_DELETE_LIST is a list of files to be deleted. B is 1 if the operation is successful, 0 otherwise. MSG is empty ('') if there is no error and contains a description of the error that occurred if there was an error. See also: ndi.database.implementations.fun.expell_plan()","title":"ndi.database.implementations.fun.expell"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bfun/expell_plan.m/","text":"ndi.database.implementations.fun.expell_plan EXPELL_PLAN - prepare to remove files from an ndi_document file_info from a database [TO_DELETE_LIST] = ndi.database.implementations.fun.expell_plan(NDI_DOCUMENT_OBJ, INGESTION_DIRECTORY) Plan to expell all of the files from an ndi.document NDI_DOCUMENT_OBJ from the directory INGESTION_DIRECTORY. A list of files (full path) to be deleted is returned in the cell array TO_DELETE_LIST. See also: ndi.database.implementations.fun.ingest_plan","title":"ndi.database.implementations.fun.expell_plan"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bfun/expell_plan.m/#ndidatabaseimplementationsfunexpell_plan","text":"EXPELL_PLAN - prepare to remove files from an ndi_document file_info from a database [TO_DELETE_LIST] = ndi.database.implementations.fun.expell_plan(NDI_DOCUMENT_OBJ, INGESTION_DIRECTORY) Plan to expell all of the files from an ndi.document NDI_DOCUMENT_OBJ from the directory INGESTION_DIRECTORY. A list of files (full path) to be deleted is returned in the cell array TO_DELETE_LIST. See also: ndi.database.implementations.fun.ingest_plan","title":"ndi.database.implementations.fun.expell_plan"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bfun/ingest.m/","text":"ndi.database.implementations.fun.ingest INGEST - actually ingest files from an ndi_document file_info into a database [B,MSG] = ndi.database.implementations.fun.ingest(SOURCE_FILENAME_LIST, ... DESTINATION_FILENAME_LIST, TO_DELETE_LIST]); Ingest files into a database. SOURCE_FILENAME_LIST, DESTINATION_FILENAME_LIST, and TO_DELETE_LIST are typically returned from ndi.database.implementations.fun.ingest_plan(). SOURCE_FILENAME_LIST are a list of the source files to be copied, and DESTINATION_FILENAME_LIST are a list of locations to be written to. TO_DELETE_LIST is a list of files to be deleted. B is 1 if the operation is successful, 0 otherwise. MSG is empty ('') if there is no error and contains a description of the error that occurred if there was an error. See also: ndi.database.implementations.fun.ingest_plan()","title":"ndi.database.implementations.fun.ingest"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bfun/ingest.m/#ndidatabaseimplementationsfuningest","text":"INGEST - actually ingest files from an ndi_document file_info into a database [B,MSG] = ndi.database.implementations.fun.ingest(SOURCE_FILENAME_LIST, ... DESTINATION_FILENAME_LIST, TO_DELETE_LIST]); Ingest files into a database. SOURCE_FILENAME_LIST, DESTINATION_FILENAME_LIST, and TO_DELETE_LIST are typically returned from ndi.database.implementations.fun.ingest_plan(). SOURCE_FILENAME_LIST are a list of the source files to be copied, and DESTINATION_FILENAME_LIST are a list of locations to be written to. TO_DELETE_LIST is a list of files to be deleted. B is 1 if the operation is successful, 0 otherwise. MSG is empty ('') if there is no error and contains a description of the error that occurred if there was an error. See also: ndi.database.implementations.fun.ingest_plan()","title":"ndi.database.implementations.fun.ingest"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bfun/ingest_plan.m/","text":"ndi.database.implementations.fun.ingest_plan INGEST_PLAN - ingest files from an ndi_document file_info into a database [SOURCE_FILENAME_LIST, DESTINATION_FILENAME_LIST, TO_DELETE_LIST] = ... ndi.database.implementations.fun.ingest_plan(NDI_DOCUMENT_OBJ, INGESTION_DIRECTORY) Plan to ingest all of the files from an ndi.document NDI_DOCUMENT_OBJ into the directory INGESTION_DIRECTORY. The source files to be copied are returned in a cell array SOURCE_FILENAME_LIST, and the corresponding destination where each file should be copied is returned in a cell array DESINATION_FILENAME_LIST. A list of files (full path) to be deleted after successful addition of the document to the database is returned in the cell array TO_DELETE_LIST. See also: ndi.database.implementations.fun.ingest","title":"ndi.database.implementations.fun.ingest_plan"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bfun/ingest_plan.m/#ndidatabaseimplementationsfuningest_plan","text":"INGEST_PLAN - ingest files from an ndi_document file_info into a database [SOURCE_FILENAME_LIST, DESTINATION_FILENAME_LIST, TO_DELETE_LIST] = ... ndi.database.implementations.fun.ingest_plan(NDI_DOCUMENT_OBJ, INGESTION_DIRECTORY) Plan to ingest all of the files from an ndi.document NDI_DOCUMENT_OBJ into the directory INGESTION_DIRECTORY. The source files to be copied are returned in a cell array SOURCE_FILENAME_LIST, and the corresponding destination where each file should be copied is returned in a cell array DESINATION_FILENAME_LIST. A list of files (full path) to be deleted after successful addition of the document to the database is returned in the cell array TO_DELETE_LIST. See also: ndi.database.implementations.fun.ingest","title":"ndi.database.implementations.fun.ingest_plan"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Binternal/list_binary_files.m/","text":"ndi.database.internal.list_binary_files LIST_BINARY_FILES - Scans a dataset for binary files of documents FILE_MANIFEST = ndi.database.internal.list_binary_files(NDI_DATASET, DATABASE_DOCUMENTS) Inputs: NDI_DATASET - an ndi.dataset object DATABASE_DOCUMENTS - documents returned by searching the dataset using database_search Outputs: FILE_MANIFEST - A structure with the following fields: 'name' - The name of the file 'file_path' - The full (absolute) pathname of the file 'docid' - The document id that the file is associated with 'bytes' - The size of the file in bytes","title":"ndi.database.internal.list_binary_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Binternal/list_binary_files.m/#ndidatabaseinternallist_binary_files","text":"LIST_BINARY_FILES - Scans a dataset for binary files of documents FILE_MANIFEST = ndi.database.internal.list_binary_files(NDI_DATASET, DATABASE_DOCUMENTS) Inputs: NDI_DATASET - an ndi.dataset object DATABASE_DOCUMENTS - documents returned by searching the dataset using database_search Outputs: FILE_MANIFEST - A structure with the following fields: 'name' - The name of the file 'file_path' - The full (absolute) pathname of the file 'docid' - The document id that the file is associated with 'bytes' - The size of the file in bytes","title":"ndi.database.internal.list_binary_files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata/table2treatment.m/","text":"ndi.database.metadata.table2treatment TABLE2TREATMENT - read in treatments for a session from a table D = TABLE2TREATMENT(S, TABLEFILE, SUBJECTID, ...) or D = TABLE2TREATMENT(S, TABLE, SUBJECTID ...) Reads in table of treatment types and creates ndi.document objects of type 'treatment'. The table should have the following columns: ontologyName - the ontology name for the manipulation name - the name of the manipulation (from the ontology) numeric_value - a numeric value string_value - a string value group - a group number for the manipulation All manipulations of the same group will have 'manipulation_id' set to the first manipulation listed. The first manipulation in each group will have 'manipulation_id' unset. This function takes name/value pairs: --------------------------------------------------------------------------- | Parameter (default) | Description | |-------------------------|-----------------------------------------------| | delimiter (',') | Delmiter for the table file | | doNotAdd (false) | If true, do not add documents to database | ---------------------------------------------------------------------------","title":"ndi.database.metadata.table2treatment"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata/table2treatment.m/#ndidatabasemetadatatable2treatment","text":"TABLE2TREATMENT - read in treatments for a session from a table D = TABLE2TREATMENT(S, TABLEFILE, SUBJECTID, ...) or D = TABLE2TREATMENT(S, TABLE, SUBJECTID ...) Reads in table of treatment types and creates ndi.document objects of type 'treatment'. The table should have the following columns: ontologyName - the ontology name for the manipulation name - the name of the manipulation (from the ontology) numeric_value - a numeric value string_value - a string value group - a group number for the manipulation All manipulations of the same group will have 'manipulation_id' set to the first manipulation listed. The first manipulation in each group will have 'manipulation_id' unset. This function takes name/value pairs: --------------------------------------------------------------------------- | Parameter (default) | Description | |-------------------------|-----------------------------------------------| | delimiter (',') | Delmiter for the table file | | doNotAdd (false) | If true, do not add documents to database | ---------------------------------------------------------------------------","title":"ndi.database.metadata.table2treatment"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/convertFormDataToDocuments.m/","text":"ndi.database.metadata_app.convertFormDataToDocuments Todo: [ ] RelatedPublications [ ] Probes [ ] Link subjects to ndi subjects using dependency_type? [ ] Any other dependency_type?","title":"ndi.database.metadata_app.convertFormDataToDocuments"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/convertFormDataToDocuments.m/#ndidatabasemetadata_appconvertformdatatodocuments","text":"Todo: [ ] RelatedPublications [ ] Probes [ ] Link subjects to ndi subjects using dependency_type? [ ] Any other dependency_type?","title":"ndi.database.metadata_app.convertFormDataToDocuments"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/getRequiredFields.m/","text":"ndi.database.metadata_app.getRequiredFields ndi.database.metadata_app.getRequiredFields is a function. S = ndi.database.metadata_app.getRequiredFields","title":"ndi.database.metadata_app.getRequiredFields"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/getRequiredFields.m/#ndidatabasemetadata_appgetrequiredfields","text":"ndi.database.metadata_app.getRequiredFields is a function. S = ndi.database.metadata_app.getRequiredFields","title":"ndi.database.metadata_app.getRequiredFields"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bchecker/subject.m/","text":"ndi.database.metadata_app.checker.subject SUBJECT Summary of this function goes here Detailed explanation goes here","title":"ndi.database.metadata_app.checker.subject"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bchecker/subject.m/#ndidatabasemetadata_appcheckersubject","text":"SUBJECT Summary of this function goes here Detailed explanation goes here","title":"ndi.database.metadata_app.checker.subject"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Affiliation.m/","text":"CLASS ndi.database.metadata_app.class.Affiliation AFFILIATION Summary of this class goes here Detailed explanation goes here Superclasses none Properties Property Description memberOf Methods Method Description Affiliation AFFILIATION Construct an instance of this class getName getName Get the value in a field getTableStruct getTableStruct Get the value in a field updateIdentifier updateIdentifier Update the value in a field updateName updateName Update the value in a field Methods help Affiliation - AFFILIATION Construct an instance of this class Detailed explanation goes here Documentation for ndi.database.metadata_app.class.Affiliation/Affiliation doc ndi.database.metadata_app.class.Affiliation getName - getName Get the value in a field getTableStruct - getTableStruct Get the value in a field updateIdentifier - updateIdentifier Update the value in a field updateName - updateName Update the value in a field","title":"ndi.database.metadata_app.class.Affiliation"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Affiliation.m/#class-ndidatabasemetadata_appclassaffiliation","text":"AFFILIATION Summary of this class goes here Detailed explanation goes here","title":"CLASS ndi.database.metadata_app.class.Affiliation"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Affiliation.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Affiliation.m/#properties","text":"Property Description memberOf","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Affiliation.m/#methods","text":"Method Description Affiliation AFFILIATION Construct an instance of this class getName getName Get the value in a field getTableStruct getTableStruct Get the value in a field updateIdentifier updateIdentifier Update the value in a field updateName updateName Update the value in a field","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Affiliation.m/#methods-help","text":"Affiliation - AFFILIATION Construct an instance of this class Detailed explanation goes here Documentation for ndi.database.metadata_app.class.Affiliation/Affiliation doc ndi.database.metadata_app.class.Affiliation getName - getName Get the value in a field getTableStruct - getTableStruct Get the value in a field updateIdentifier - updateIdentifier Update the value in a field updateName - updateName Update the value in a field","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AffiliationData.m/","text":"CLASS ndi.database.metadata_app.class.AffiliationData AffiliationData A utility class for storing and retrieving information about affiliations. Superclasses handle Properties Property Description AffiliationList Methods Method Description AffiliationData AffiliationData A utility class for storing and retrieving information about affiliations. addItem ndi.database.metadata_app.class.AffiliationData/addItem is a function. addlistener addlistener Add listener for event. checkName ndi.database.metadata_app.class.AffiliationData/checkName is a function. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getAffiliationList getAffiliationList Same as S = AffiliationData.AffiliationList getAffiliationName getAffiliationName Get the full name for the given affiliation getDefaultAffiliationItem ndi.database.metadata_app.class.AffiliationData.getDefaultAffiliationItem is a function. getItem getItem Get a struct with affiliation details for the given index getSize ndi.database.metadata_app.class.AffiliationData/getSize is a function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. removeItem removeItem Remove the specified author form the list. setAffiliationList setAffiliationList Same as AffiliationData.AffiliationList = S updateIdentifier updateIdentifier Update the value in a field updateName updateName Update the value in a field updateProperty updateProperty Update the value in a field for the given Methods help AffiliationData - AffiliationData A utility class for storing and retrieving information about affiliations. Documentation for ndi.database.metadata_app.class.AffiliationData/AffiliationData doc ndi.database.metadata_app.class.AffiliationData addItem - ndi.database.metadata_app.class.AffiliationData/addItem is a function. addItem(obj, af) addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.affiliationdata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.AffiliationData/addlistener is inherited from superclass handle checkName - ndi.database.metadata_app.class.AffiliationData/checkName is a function. checkName(obj, ror, affiliationIndex) delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/ISVALID, CLEAR Help for ndi.database.metadata_app.class.AffiliationData/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/NE Help for ndi.database.metadata_app.class.AffiliationData/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA Help for ndi.database.metadata_app.class.AffiliationData/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.affiliationdata, ndi.database.metadata_app.class.affiliationdata/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.AffiliationData/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/NE Help for ndi.database.metadata_app.class.AffiliationData/ge is inherited from superclass handle getAffiliationList - getAffiliationList Same as S = AffiliationData.AffiliationList getAffiliationName - getAffiliationName Get the full name for the given affiliation getDefaultAffiliationItem - ndi.database.metadata_app.class.AffiliationData.getDefaultAffiliationItem is a function. S = ndi.database.metadata_app.class.AffiliationData.getDefaultAffiliationItem getItem - getItem Get a struct with affiliation details for the given index getSize - ndi.database.metadata_app.class.AffiliationData/getSize is a function. size = getSize(obj) gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/NE Help for ndi.database.metadata_app.class.AffiliationData/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/DELETE Help for ndi.database.metadata_app.class.AffiliationData/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/NE Help for ndi.database.metadata_app.class.AffiliationData/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.affiliationdata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.AffiliationData/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/NE Help for ndi.database.metadata_app.class.AffiliationData/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LT Help for ndi.database.metadata_app.class.AffiliationData/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.AffiliationData/notify is inherited from superclass handle removeItem - removeItem Remove the specified author form the list. Usage: AffiliationData.removeItem(affiliationIndex) removes the affiliation from the list where affiliationIndex is the index in the struct. setAffiliationList - setAffiliationList Same as AffiliationData.AffiliationList = S updateIdentifier - updateIdentifier Update the value in a field updateName - updateName Update the value in a field updateProperty - updateProperty Update the value in a field for the given affiliationIndex","title":"ndi.database.metadata_app.class.AffiliationData"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AffiliationData.m/#class-ndidatabasemetadata_appclassaffiliationdata","text":"AffiliationData A utility class for storing and retrieving information about affiliations.","title":"CLASS ndi.database.metadata_app.class.AffiliationData"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AffiliationData.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AffiliationData.m/#properties","text":"Property Description AffiliationList","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AffiliationData.m/#methods","text":"Method Description AffiliationData AffiliationData A utility class for storing and retrieving information about affiliations. addItem ndi.database.metadata_app.class.AffiliationData/addItem is a function. addlistener addlistener Add listener for event. checkName ndi.database.metadata_app.class.AffiliationData/checkName is a function. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getAffiliationList getAffiliationList Same as S = AffiliationData.AffiliationList getAffiliationName getAffiliationName Get the full name for the given affiliation getDefaultAffiliationItem ndi.database.metadata_app.class.AffiliationData.getDefaultAffiliationItem is a function. getItem getItem Get a struct with affiliation details for the given index getSize ndi.database.metadata_app.class.AffiliationData/getSize is a function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. removeItem removeItem Remove the specified author form the list. setAffiliationList setAffiliationList Same as AffiliationData.AffiliationList = S updateIdentifier updateIdentifier Update the value in a field updateName updateName Update the value in a field updateProperty updateProperty Update the value in a field for the given","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AffiliationData.m/#methods-help","text":"AffiliationData - AffiliationData A utility class for storing and retrieving information about affiliations. Documentation for ndi.database.metadata_app.class.AffiliationData/AffiliationData doc ndi.database.metadata_app.class.AffiliationData addItem - ndi.database.metadata_app.class.AffiliationData/addItem is a function. addItem(obj, af) addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.affiliationdata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.AffiliationData/addlistener is inherited from superclass handle checkName - ndi.database.metadata_app.class.AffiliationData/checkName is a function. checkName(obj, ror, affiliationIndex) delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/ISVALID, CLEAR Help for ndi.database.metadata_app.class.AffiliationData/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/NE Help for ndi.database.metadata_app.class.AffiliationData/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA Help for ndi.database.metadata_app.class.AffiliationData/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.affiliationdata, ndi.database.metadata_app.class.affiliationdata/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.AffiliationData/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/NE Help for ndi.database.metadata_app.class.AffiliationData/ge is inherited from superclass handle getAffiliationList - getAffiliationList Same as S = AffiliationData.AffiliationList getAffiliationName - getAffiliationName Get the full name for the given affiliation getDefaultAffiliationItem - ndi.database.metadata_app.class.AffiliationData.getDefaultAffiliationItem is a function. S = ndi.database.metadata_app.class.AffiliationData.getDefaultAffiliationItem getItem - getItem Get a struct with affiliation details for the given index getSize - ndi.database.metadata_app.class.AffiliationData/getSize is a function. size = getSize(obj) gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/NE Help for ndi.database.metadata_app.class.AffiliationData/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/DELETE Help for ndi.database.metadata_app.class.AffiliationData/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/NE Help for ndi.database.metadata_app.class.AffiliationData/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.affiliationdata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.AffiliationData/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/NE Help for ndi.database.metadata_app.class.AffiliationData/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LT Help for ndi.database.metadata_app.class.AffiliationData/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.AffiliationData/notify is inherited from superclass handle removeItem - removeItem Remove the specified author form the list. Usage: AffiliationData.removeItem(affiliationIndex) removes the affiliation from the list where affiliationIndex is the index in the struct. setAffiliationList - setAffiliationList Same as AffiliationData.AffiliationList = S updateIdentifier - updateIdentifier Update the value in a field updateName - updateName Update the value in a field updateProperty - updateProperty Update the value in a field for the given affiliationIndex","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AuthorData.m/","text":"CLASS ndi.database.metadata_app.class.AuthorData AuthorData A utility class for storing and retrieving information about authors. Superclasses handle Properties Property Description AuthorList Methods Method Description AuthorData AuthorData A utility class for storing and retrieving information about authors. addAffiliation ndi.database.metadata_app.class.AuthorData/addAffiliation is a function. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getAuthorList getAuthorList Same as S = authorData.AuthorList getAuthorName getAuthorName Get the full name for the given author getDefaultAuthorItem ndi.database.metadata_app.class.AuthorData.getDefaultAuthorItem is a function. getItem getItem Get a struct with author details for the given index gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. removeAffiliation ndi.database.metadata_app.class.AuthorData/removeAffiliation is a function. removeItem removeItem Remove the specified author from the list. reorderItems ndi.database.metadata_app.class.AuthorData/reorderItems is a function. setAuthorList setAuthorList Same as authorData.AuthorList = S updateProperty updateProperty Update the value in a field for the given Methods help AuthorData - AuthorData A utility class for storing and retrieving information about authors. Documentation for ndi.database.metadata_app.class.AuthorData/AuthorData doc ndi.database.metadata_app.class.AuthorData addAffiliation - ndi.database.metadata_app.class.AuthorData/addAffiliation is a function. addAffiliation(obj, organizationName, authorIndex) addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.authordata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.AuthorData/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/ISVALID, CLEAR Help for ndi.database.metadata_app.class.AuthorData/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/NE Help for ndi.database.metadata_app.class.AuthorData/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA Help for ndi.database.metadata_app.class.AuthorData/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.authordata, ndi.database.metadata_app.class.authordata/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.AuthorData/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/NE Help for ndi.database.metadata_app.class.AuthorData/ge is inherited from superclass handle getAuthorList - getAuthorList Same as S = authorData.AuthorList getAuthorName - getAuthorName Get the full name for the given author getDefaultAuthorItem - ndi.database.metadata_app.class.AuthorData.getDefaultAuthorItem is a function. S = ndi.database.metadata_app.class.AuthorData.getDefaultAuthorItem getItem - getItem Get a struct with author details for the given index gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/NE Help for ndi.database.metadata_app.class.AuthorData/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/DELETE Help for ndi.database.metadata_app.class.AuthorData/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/NE Help for ndi.database.metadata_app.class.AuthorData/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.authordata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.AuthorData/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/NE Help for ndi.database.metadata_app.class.AuthorData/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LT Help for ndi.database.metadata_app.class.AuthorData/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.AuthorData/notify is inherited from superclass handle removeAffiliation - ndi.database.metadata_app.class.AuthorData/removeAffiliation is a function. removeAffiliation(obj, authorIndex, affiliationIndex) removeItem - removeItem Remove the specified author from the list. Usage: authorData.removeItem(authorIndex) removes the author from the list where authorIndex is the index in the struct. reorderItems - ndi.database.metadata_app.class.AuthorData/reorderItems is a function. reorderItems(obj, newIndex, oldIndex) setAuthorList - setAuthorList Same as authorData.AuthorList = S updateProperty - updateProperty Update the value in a field for the given authorIndex","title":"ndi.database.metadata_app.class.AuthorData"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AuthorData.m/#class-ndidatabasemetadata_appclassauthordata","text":"AuthorData A utility class for storing and retrieving information about authors.","title":"CLASS ndi.database.metadata_app.class.AuthorData"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AuthorData.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AuthorData.m/#properties","text":"Property Description AuthorList","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AuthorData.m/#methods","text":"Method Description AuthorData AuthorData A utility class for storing and retrieving information about authors. addAffiliation ndi.database.metadata_app.class.AuthorData/addAffiliation is a function. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getAuthorList getAuthorList Same as S = authorData.AuthorList getAuthorName getAuthorName Get the full name for the given author getDefaultAuthorItem ndi.database.metadata_app.class.AuthorData.getDefaultAuthorItem is a function. getItem getItem Get a struct with author details for the given index gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. removeAffiliation ndi.database.metadata_app.class.AuthorData/removeAffiliation is a function. removeItem removeItem Remove the specified author from the list. reorderItems ndi.database.metadata_app.class.AuthorData/reorderItems is a function. setAuthorList setAuthorList Same as authorData.AuthorList = S updateProperty updateProperty Update the value in a field for the given","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AuthorData.m/#methods-help","text":"AuthorData - AuthorData A utility class for storing and retrieving information about authors. Documentation for ndi.database.metadata_app.class.AuthorData/AuthorData doc ndi.database.metadata_app.class.AuthorData addAffiliation - ndi.database.metadata_app.class.AuthorData/addAffiliation is a function. addAffiliation(obj, organizationName, authorIndex) addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.authordata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.AuthorData/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/ISVALID, CLEAR Help for ndi.database.metadata_app.class.AuthorData/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/NE Help for ndi.database.metadata_app.class.AuthorData/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA Help for ndi.database.metadata_app.class.AuthorData/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.authordata, ndi.database.metadata_app.class.authordata/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.AuthorData/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/NE Help for ndi.database.metadata_app.class.AuthorData/ge is inherited from superclass handle getAuthorList - getAuthorList Same as S = authorData.AuthorList getAuthorName - getAuthorName Get the full name for the given author getDefaultAuthorItem - ndi.database.metadata_app.class.AuthorData.getDefaultAuthorItem is a function. S = ndi.database.metadata_app.class.AuthorData.getDefaultAuthorItem getItem - getItem Get a struct with author details for the given index gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/NE Help for ndi.database.metadata_app.class.AuthorData/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/DELETE Help for ndi.database.metadata_app.class.AuthorData/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/NE Help for ndi.database.metadata_app.class.AuthorData/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.authordata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.AuthorData/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/NE Help for ndi.database.metadata_app.class.AuthorData/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LT Help for ndi.database.metadata_app.class.AuthorData/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.AuthorData/notify is inherited from superclass handle removeAffiliation - ndi.database.metadata_app.class.AuthorData/removeAffiliation is a function. removeAffiliation(obj, authorIndex, affiliationIndex) removeItem - removeItem Remove the specified author from the list. Usage: authorData.removeItem(authorIndex) removes the author from the list where authorIndex is the index in the struct. reorderItems - ndi.database.metadata_app.class.AuthorData/reorderItems is a function. reorderItems(obj, newIndex, oldIndex) setAuthorList - setAuthorList Same as authorData.AuthorList = S updateProperty - updateProperty Update the value in a field for the given authorIndex","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetData.m/","text":"CLASS ndi.database.metadata_app.class.DatasetData AuthorData A utility class for storing and retrieving information about Dataset. Superclasses handle Properties Property Description DatasetInfo Methods Method Description DatasetData AuthorData A utility class for storing and retrieving information about Dataset. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getDataset Same as S = datasetData.DatasetInfo getDefaultDatasetItem ndi.database.metadata_app.class.DatasetData.getDefaultDatasetItem is a function. getItem getItem Get a struct with dataset details for the given index gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setDataset Same as datasetData.DatasetInfo = S updateProperty updateProperty Update the value in a field Methods help DatasetData - AuthorData A utility class for storing and retrieving information about Dataset. Documentation for ndi.database.metadata_app.class.DatasetData/DatasetData doc ndi.database.metadata_app.class.DatasetData addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.datasetdata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.DatasetData/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/ISVALID, CLEAR Help for ndi.database.metadata_app.class.DatasetData/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/NE Help for ndi.database.metadata_app.class.DatasetData/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA Help for ndi.database.metadata_app.class.DatasetData/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.datasetdata, ndi.database.metadata_app.class.datasetdata/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.DatasetData/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/NE Help for ndi.database.metadata_app.class.DatasetData/ge is inherited from superclass handle getDataset - Same as S = datasetData.DatasetInfo getDefaultDatasetItem - ndi.database.metadata_app.class.DatasetData.getDefaultDatasetItem is a function. S = ndi.database.metadata_app.class.DatasetData.getDefaultDatasetItem getItem - getItem Get a struct with dataset details for the given index gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/NE Help for ndi.database.metadata_app.class.DatasetData/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/DELETE Help for ndi.database.metadata_app.class.DatasetData/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/NE Help for ndi.database.metadata_app.class.DatasetData/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.datasetdata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.DatasetData/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/NE Help for ndi.database.metadata_app.class.DatasetData/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LT Help for ndi.database.metadata_app.class.DatasetData/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.DatasetData/notify is inherited from superclass handle setDataset - Same as datasetData.DatasetInfo = S updateProperty - updateProperty Update the value in a field","title":"ndi.database.metadata_app.class.DatasetData"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetData.m/#class-ndidatabasemetadata_appclassdatasetdata","text":"AuthorData A utility class for storing and retrieving information about Dataset.","title":"CLASS ndi.database.metadata_app.class.DatasetData"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetData.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetData.m/#properties","text":"Property Description DatasetInfo","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetData.m/#methods","text":"Method Description DatasetData AuthorData A utility class for storing and retrieving information about Dataset. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getDataset Same as S = datasetData.DatasetInfo getDefaultDatasetItem ndi.database.metadata_app.class.DatasetData.getDefaultDatasetItem is a function. getItem getItem Get a struct with dataset details for the given index gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setDataset Same as datasetData.DatasetInfo = S updateProperty updateProperty Update the value in a field","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetData.m/#methods-help","text":"DatasetData - AuthorData A utility class for storing and retrieving information about Dataset. Documentation for ndi.database.metadata_app.class.DatasetData/DatasetData doc ndi.database.metadata_app.class.DatasetData addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.datasetdata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.DatasetData/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/ISVALID, CLEAR Help for ndi.database.metadata_app.class.DatasetData/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/NE Help for ndi.database.metadata_app.class.DatasetData/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA Help for ndi.database.metadata_app.class.DatasetData/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.datasetdata, ndi.database.metadata_app.class.datasetdata/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.DatasetData/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/NE Help for ndi.database.metadata_app.class.DatasetData/ge is inherited from superclass handle getDataset - Same as S = datasetData.DatasetInfo getDefaultDatasetItem - ndi.database.metadata_app.class.DatasetData.getDefaultDatasetItem is a function. S = ndi.database.metadata_app.class.DatasetData.getDefaultDatasetItem getItem - getItem Get a struct with dataset details for the given index gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/NE Help for ndi.database.metadata_app.class.DatasetData/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/DELETE Help for ndi.database.metadata_app.class.DatasetData/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/NE Help for ndi.database.metadata_app.class.DatasetData/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.datasetdata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.DatasetData/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/NE Help for ndi.database.metadata_app.class.DatasetData/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LT Help for ndi.database.metadata_app.class.DatasetData/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.DatasetData/notify is inherited from superclass handle setDataset - Same as datasetData.DatasetInfo = S updateProperty - updateProperty Update the value in a field","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetVersionData.m/","text":"CLASS ndi.database.metadata_app.class.DatasetVersionData AuthorData A utility class for storing and retrieving information about Dataset version. Superclasses handle Properties Property Description DatasetVersionInfo Methods Method Description DatasetVersionData AuthorData A utility class for storing and retrieving information about Dataset version. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getDataset ndi.database.metadata_app.class.DatasetVersionData/getDataset is a function. getDefaultDatasetItem ndi.database.metadata_app.class.DatasetVersionData.getDefaultDatasetItem is a function. getItem getItem Get a struct with datasetversion details for the given index gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setDataset ndi.database.metadata_app.class.DatasetVersionData/setDataset is a function. updateProperty updateProperty Update the value in a field Methods help DatasetVersionData - AuthorData A utility class for storing and retrieving information about Dataset version. Documentation for ndi.database.metadata_app.class.DatasetVersionData/DatasetVersionData doc ndi.database.metadata_app.class.DatasetVersionData addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.datasetversiondata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.DatasetVersionData/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/ISVALID, CLEAR Help for ndi.database.metadata_app.class.DatasetVersionData/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/NE Help for ndi.database.metadata_app.class.DatasetVersionData/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA Help for ndi.database.metadata_app.class.DatasetVersionData/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.datasetversiondata, ndi.database.metadata_app.class.datasetversiondata/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.DatasetVersionData/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/NE Help for ndi.database.metadata_app.class.DatasetVersionData/ge is inherited from superclass handle getDataset - ndi.database.metadata_app.class.DatasetVersionData/getDataset is a function. S = getDataset(obj) getDefaultDatasetItem - ndi.database.metadata_app.class.DatasetVersionData.getDefaultDatasetItem is a function. S = ndi.database.metadata_app.class.DatasetVersionData.getDefaultDatasetItem getItem - getItem Get a struct with datasetversion details for the given index gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/NE Help for ndi.database.metadata_app.class.DatasetVersionData/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/DELETE Help for ndi.database.metadata_app.class.DatasetVersionData/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/NE Help for ndi.database.metadata_app.class.DatasetVersionData/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.datasetversiondata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.DatasetVersionData/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/NE Help for ndi.database.metadata_app.class.DatasetVersionData/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LT Help for ndi.database.metadata_app.class.DatasetVersionData/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.DatasetVersionData/notify is inherited from superclass handle setDataset - ndi.database.metadata_app.class.DatasetVersionData/setDataset is a function. setDataset(obj, S) updateProperty - updateProperty Update the value in a field","title":"ndi.database.metadata_app.class.DatasetVersionData"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetVersionData.m/#class-ndidatabasemetadata_appclassdatasetversiondata","text":"AuthorData A utility class for storing and retrieving information about Dataset version.","title":"CLASS ndi.database.metadata_app.class.DatasetVersionData"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetVersionData.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetVersionData.m/#properties","text":"Property Description DatasetVersionInfo","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetVersionData.m/#methods","text":"Method Description DatasetVersionData AuthorData A utility class for storing and retrieving information about Dataset version. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getDataset ndi.database.metadata_app.class.DatasetVersionData/getDataset is a function. getDefaultDatasetItem ndi.database.metadata_app.class.DatasetVersionData.getDefaultDatasetItem is a function. getItem getItem Get a struct with datasetversion details for the given index gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setDataset ndi.database.metadata_app.class.DatasetVersionData/setDataset is a function. updateProperty updateProperty Update the value in a field","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetVersionData.m/#methods-help","text":"DatasetVersionData - AuthorData A utility class for storing and retrieving information about Dataset version. Documentation for ndi.database.metadata_app.class.DatasetVersionData/DatasetVersionData doc ndi.database.metadata_app.class.DatasetVersionData addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.datasetversiondata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.DatasetVersionData/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/ISVALID, CLEAR Help for ndi.database.metadata_app.class.DatasetVersionData/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/NE Help for ndi.database.metadata_app.class.DatasetVersionData/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA Help for ndi.database.metadata_app.class.DatasetVersionData/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.datasetversiondata, ndi.database.metadata_app.class.datasetversiondata/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.DatasetVersionData/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/NE Help for ndi.database.metadata_app.class.DatasetVersionData/ge is inherited from superclass handle getDataset - ndi.database.metadata_app.class.DatasetVersionData/getDataset is a function. S = getDataset(obj) getDefaultDatasetItem - ndi.database.metadata_app.class.DatasetVersionData.getDefaultDatasetItem is a function. S = ndi.database.metadata_app.class.DatasetVersionData.getDefaultDatasetItem getItem - getItem Get a struct with datasetversion details for the given index gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/NE Help for ndi.database.metadata_app.class.DatasetVersionData/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/DELETE Help for ndi.database.metadata_app.class.DatasetVersionData/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/NE Help for ndi.database.metadata_app.class.DatasetVersionData/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.datasetversiondata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.DatasetVersionData/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/NE Help for ndi.database.metadata_app.class.DatasetVersionData/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LT Help for ndi.database.metadata_app.class.DatasetVersionData/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.DatasetVersionData/notify is inherited from superclass handle setDataset - ndi.database.metadata_app.class.DatasetVersionData/setDataset is a function. setDataset(obj, S) updateProperty - updateProperty Update the value in a field","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DeviceType.m/","text":"CLASS ndi.database.metadata_app.class.DeviceType DEVICETYPE Summary of this class goes here Detailed explanation goes here Superclasses handle Properties Property Description Name Definition Description Synonym Methods Method Description DeviceType DEVICETYPE Summary of this class goes here addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getProperties ndi.database.metadata_app.class.DeviceType/getProperties is a function. getProperty ndi.database.metadata_app.class.DeviceType/getProperty is a function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. updateProperty ndi.database.metadata_app.class.DeviceType/updateProperty is a function. Methods help DeviceType - DEVICETYPE Summary of this class goes here Detailed explanation goes here Documentation for ndi.database.metadata_app.class.DeviceType/DeviceType doc ndi.database.metadata_app.class.DeviceType addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.devicetype, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.DeviceType/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/ISVALID, CLEAR Help for ndi.database.metadata_app.class.DeviceType/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/NE Help for ndi.database.metadata_app.class.DeviceType/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE Help for ndi.database.metadata_app.class.DeviceType/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.devicetype, ndi.database.metadata_app.class.devicetype/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.DeviceType/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/EQ, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/NE Help for ndi.database.metadata_app.class.DeviceType/ge is inherited from superclass handle getProperties - ndi.database.metadata_app.class.DeviceType/getProperties is a function. properties = getProperties(obj) getProperty - ndi.database.metadata_app.class.DeviceType/getProperty is a function. Property = getProperty(obj, name) gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/EQ, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/NE Help for ndi.database.metadata_app.class.DeviceType/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/DELETE Help for ndi.database.metadata_app.class.DeviceType/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/EQ, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/NE Help for ndi.database.metadata_app.class.DeviceType/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.devicetype, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.DeviceType/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/EQ, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/NE Help for ndi.database.metadata_app.class.DeviceType/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/EQ, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LT Help for ndi.database.metadata_app.class.DeviceType/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.DeviceType/notify is inherited from superclass handle updateProperty - ndi.database.metadata_app.class.DeviceType/updateProperty is a function. updateProperty(obj, name, value)","title":"ndi.database.metadata_app.class.DeviceType"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DeviceType.m/#class-ndidatabasemetadata_appclassdevicetype","text":"DEVICETYPE Summary of this class goes here Detailed explanation goes here","title":"CLASS ndi.database.metadata_app.class.DeviceType"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DeviceType.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DeviceType.m/#properties","text":"Property Description Name Definition Description Synonym","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DeviceType.m/#methods","text":"Method Description DeviceType DEVICETYPE Summary of this class goes here addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getProperties ndi.database.metadata_app.class.DeviceType/getProperties is a function. getProperty ndi.database.metadata_app.class.DeviceType/getProperty is a function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. updateProperty ndi.database.metadata_app.class.DeviceType/updateProperty is a function.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DeviceType.m/#methods-help","text":"DeviceType - DEVICETYPE Summary of this class goes here Detailed explanation goes here Documentation for ndi.database.metadata_app.class.DeviceType/DeviceType doc ndi.database.metadata_app.class.DeviceType addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.devicetype, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.DeviceType/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/ISVALID, CLEAR Help for ndi.database.metadata_app.class.DeviceType/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/NE Help for ndi.database.metadata_app.class.DeviceType/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE Help for ndi.database.metadata_app.class.DeviceType/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.devicetype, ndi.database.metadata_app.class.devicetype/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.DeviceType/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/EQ, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/NE Help for ndi.database.metadata_app.class.DeviceType/ge is inherited from superclass handle getProperties - ndi.database.metadata_app.class.DeviceType/getProperties is a function. properties = getProperties(obj) getProperty - ndi.database.metadata_app.class.DeviceType/getProperty is a function. Property = getProperty(obj, name) gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/EQ, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/NE Help for ndi.database.metadata_app.class.DeviceType/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/DELETE Help for ndi.database.metadata_app.class.DeviceType/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/EQ, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/NE Help for ndi.database.metadata_app.class.DeviceType/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.devicetype, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.DeviceType/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/EQ, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/NE Help for ndi.database.metadata_app.class.DeviceType/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/EQ, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LT Help for ndi.database.metadata_app.class.DeviceType/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.DeviceType/notify is inherited from superclass handle updateProperty - ndi.database.metadata_app.class.DeviceType/updateProperty is a function. updateProperty(obj, name, value)","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Electrode.m/","text":"CLASS ndi.database.metadata_app.class.Electrode ndi.database.metadata_app.class.Electrode is a class. obj = ndi.database.metadata_app.class.Electrode(varargin) Superclasses ndi.database.metadata_app.class.Probe , handle Properties Property Description IntrinsicResistance IntrinsicResistanceUnit Name DeviceType ProbeType ClassType Description DigitalIdentifier Manufacturer Complete sessionIdentifier Methods Method Description Electrode ndi.database.metadata_app.class.Electrode/Electrode is a constructor. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. digitalIdentifierTypeSelected ndi.database.metadata_app.class.Electrode/digitalIdentifierTypeSelected is an undocumented builtin function. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getDigitalIdentifier ndi.database.metadata_app.class.Electrode/getDigitalIdentifier is an undocumented builtin function. getManufacturerName ndi.database.metadata_app.class.Electrode/getManufacturerName is an undocumented builtin function. getProperties ndi.database.metadata_app.class.Electrode/getProperties is an undocumented builtin function. getProperty ndi.database.metadata_app.class.Electrode/getProperty is an undocumented builtin function. gt > (GT) Greater than relation for handles. intrinsicResistanceCheck ndi.database.metadata_app.class.Electrode/intrinsicResistanceCheck is a function. intrinsicResistanceUnitSelected ndi.database.metadata_app.class.Electrode/intrinsicResistanceUnitSelected is a function. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. makeOpenMindsObj ndi.database.metadata_app.class.Electrode/makeOpenMindsObj is a function. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setDigitalIdentifier ndi.database.metadata_app.class.Electrode/setDigitalIdentifier is an undocumented builtin function. toTableStruct ndi.database.metadata_app.class.Electrode/toTableStruct is an undocumented builtin function. updateProperty ndi.database.metadata_app.class.Electrode/updateProperty is an undocumented builtin function. Methods help Electrode - ndi.database.metadata_app.class.Electrode/Electrode is a constructor. obj = Electrode(varargin) Documentation for ndi.database.metadata_app.class.Electrode/Electrode doc ndi.database.metadata_app.class.Electrode addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.electrode, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Electrode/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/ISVALID, CLEAR Help for ndi.database.metadata_app.class.Electrode/delete is inherited from superclass handle digitalIdentifierTypeSelected - ndi.database.metadata_app.class.Electrode/digitalIdentifierTypeSelected is an undocumented builtin function. eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/NE Help for ndi.database.metadata_app.class.Electrode/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE Help for ndi.database.metadata_app.class.Electrode/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.electrode, ndi.database.metadata_app.class.electrode/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.Electrode/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/NE Help for ndi.database.metadata_app.class.Electrode/ge is inherited from superclass handle getDigitalIdentifier - ndi.database.metadata_app.class.Electrode/getDigitalIdentifier is an undocumented builtin function. getManufacturerName - ndi.database.metadata_app.class.Electrode/getManufacturerName is an undocumented builtin function. getProperties - ndi.database.metadata_app.class.Electrode/getProperties is an undocumented builtin function. getProperty - ndi.database.metadata_app.class.Electrode/getProperty is an undocumented builtin function. gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/NE Help for ndi.database.metadata_app.class.Electrode/gt is inherited from superclass handle intrinsicResistanceCheck - ndi.database.metadata_app.class.Electrode/intrinsicResistanceCheck is a function. filled = intrinsicResistanceCheck(obj) intrinsicResistanceUnitSelected - ndi.database.metadata_app.class.Electrode/intrinsicResistanceUnitSelected is a function. selected = intrinsicResistanceUnitSelected(obj) isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/DELETE Help for ndi.database.metadata_app.class.Electrode/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/NE Help for ndi.database.metadata_app.class.Electrode/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.electrode, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Electrode/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/NE Help for ndi.database.metadata_app.class.Electrode/lt is inherited from superclass handle makeOpenMindsObj - ndi.database.metadata_app.class.Electrode/makeOpenMindsObj is a function. openminds_obj = makeOpenMindsObj(obj) ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LT Help for ndi.database.metadata_app.class.Electrode/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.Electrode/notify is inherited from superclass handle setDigitalIdentifier - ndi.database.metadata_app.class.Electrode/setDigitalIdentifier is an undocumented builtin function. toTableStruct - ndi.database.metadata_app.class.Electrode/toTableStruct is an undocumented builtin function. updateProperty - ndi.database.metadata_app.class.Electrode/updateProperty is an undocumented builtin function.","title":"ndi.database.metadata_app.class.Electrode"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Electrode.m/#class-ndidatabasemetadata_appclasselectrode","text":"ndi.database.metadata_app.class.Electrode is a class. obj = ndi.database.metadata_app.class.Electrode(varargin)","title":"CLASS ndi.database.metadata_app.class.Electrode"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Electrode.m/#superclasses","text":"ndi.database.metadata_app.class.Probe , handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Electrode.m/#properties","text":"Property Description IntrinsicResistance IntrinsicResistanceUnit Name DeviceType ProbeType ClassType Description DigitalIdentifier Manufacturer Complete sessionIdentifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Electrode.m/#methods","text":"Method Description Electrode ndi.database.metadata_app.class.Electrode/Electrode is a constructor. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. digitalIdentifierTypeSelected ndi.database.metadata_app.class.Electrode/digitalIdentifierTypeSelected is an undocumented builtin function. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getDigitalIdentifier ndi.database.metadata_app.class.Electrode/getDigitalIdentifier is an undocumented builtin function. getManufacturerName ndi.database.metadata_app.class.Electrode/getManufacturerName is an undocumented builtin function. getProperties ndi.database.metadata_app.class.Electrode/getProperties is an undocumented builtin function. getProperty ndi.database.metadata_app.class.Electrode/getProperty is an undocumented builtin function. gt > (GT) Greater than relation for handles. intrinsicResistanceCheck ndi.database.metadata_app.class.Electrode/intrinsicResistanceCheck is a function. intrinsicResistanceUnitSelected ndi.database.metadata_app.class.Electrode/intrinsicResistanceUnitSelected is a function. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. makeOpenMindsObj ndi.database.metadata_app.class.Electrode/makeOpenMindsObj is a function. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setDigitalIdentifier ndi.database.metadata_app.class.Electrode/setDigitalIdentifier is an undocumented builtin function. toTableStruct ndi.database.metadata_app.class.Electrode/toTableStruct is an undocumented builtin function. updateProperty ndi.database.metadata_app.class.Electrode/updateProperty is an undocumented builtin function.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Electrode.m/#methods-help","text":"Electrode - ndi.database.metadata_app.class.Electrode/Electrode is a constructor. obj = Electrode(varargin) Documentation for ndi.database.metadata_app.class.Electrode/Electrode doc ndi.database.metadata_app.class.Electrode addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.electrode, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Electrode/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/ISVALID, CLEAR Help for ndi.database.metadata_app.class.Electrode/delete is inherited from superclass handle digitalIdentifierTypeSelected - ndi.database.metadata_app.class.Electrode/digitalIdentifierTypeSelected is an undocumented builtin function. eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/NE Help for ndi.database.metadata_app.class.Electrode/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE Help for ndi.database.metadata_app.class.Electrode/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.electrode, ndi.database.metadata_app.class.electrode/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.Electrode/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/NE Help for ndi.database.metadata_app.class.Electrode/ge is inherited from superclass handle getDigitalIdentifier - ndi.database.metadata_app.class.Electrode/getDigitalIdentifier is an undocumented builtin function. getManufacturerName - ndi.database.metadata_app.class.Electrode/getManufacturerName is an undocumented builtin function. getProperties - ndi.database.metadata_app.class.Electrode/getProperties is an undocumented builtin function. getProperty - ndi.database.metadata_app.class.Electrode/getProperty is an undocumented builtin function. gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/NE Help for ndi.database.metadata_app.class.Electrode/gt is inherited from superclass handle intrinsicResistanceCheck - ndi.database.metadata_app.class.Electrode/intrinsicResistanceCheck is a function. filled = intrinsicResistanceCheck(obj) intrinsicResistanceUnitSelected - ndi.database.metadata_app.class.Electrode/intrinsicResistanceUnitSelected is a function. selected = intrinsicResistanceUnitSelected(obj) isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/DELETE Help for ndi.database.metadata_app.class.Electrode/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/NE Help for ndi.database.metadata_app.class.Electrode/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.electrode, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Electrode/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/NE Help for ndi.database.metadata_app.class.Electrode/lt is inherited from superclass handle makeOpenMindsObj - ndi.database.metadata_app.class.Electrode/makeOpenMindsObj is a function. openminds_obj = makeOpenMindsObj(obj) ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LT Help for ndi.database.metadata_app.class.Electrode/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.Electrode/notify is inherited from superclass handle setDigitalIdentifier - ndi.database.metadata_app.class.Electrode/setDigitalIdentifier is an undocumented builtin function. toTableStruct - ndi.database.metadata_app.class.Electrode/toTableStruct is an undocumented builtin function. updateProperty - ndi.database.metadata_app.class.Electrode/updateProperty is an undocumented builtin function.","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ElectrodeArray.m/","text":"CLASS ndi.database.metadata_app.class.ElectrodeArray ndi.database.metadata_app.class.ElectrodeArray is a class. obj = ndi.database.metadata_app.class.ElectrodeArray Superclasses ndi.database.metadata_app.class.Probe , handle Properties Property Description ElectrodeIdentifier NoofElectrodes Name DeviceType ProbeType ClassType Description DigitalIdentifier Manufacturer Complete sessionIdentifier Methods Method Description ElectrodeArray ndi.database.metadata_app.class.ElectrodeArray/ElectrodeArray is a constructor. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. digitalIdentifierTypeSelected ndi.database.metadata_app.class.ElectrodeArray/digitalIdentifierTypeSelected is an undocumented builtin function. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getDigitalIdentifier ndi.database.metadata_app.class.ElectrodeArray/getDigitalIdentifier is an undocumented builtin function. getManufacturerName ndi.database.metadata_app.class.ElectrodeArray/getManufacturerName is an undocumented builtin function. getProperties ndi.database.metadata_app.class.ElectrodeArray/getProperties is an undocumented builtin function. getProperty ndi.database.metadata_app.class.ElectrodeArray/getProperty is an undocumented builtin function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setDigitalIdentifier ndi.database.metadata_app.class.ElectrodeArray/setDigitalIdentifier is an undocumented builtin function. toTableStruct ndi.database.metadata_app.class.ElectrodeArray/toTableStruct is an undocumented builtin function. updateProperty ndi.database.metadata_app.class.ElectrodeArray/updateProperty is an undocumented builtin function. Methods help ElectrodeArray - ndi.database.metadata_app.class.ElectrodeArray/ElectrodeArray is a constructor. obj = ndi.database.metadata_app.class.ElectrodeArray Documentation for ndi.database.metadata_app.class.ElectrodeArray/ElectrodeArray doc ndi.database.metadata_app.class.ElectrodeArray addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.electrodearray, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.ElectrodeArray/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/ISVALID, CLEAR Help for ndi.database.metadata_app.class.ElectrodeArray/delete is inherited from superclass handle digitalIdentifierTypeSelected - ndi.database.metadata_app.class.ElectrodeArray/digitalIdentifierTypeSelected is an undocumented builtin function. eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/NE Help for ndi.database.metadata_app.class.ElectrodeArray/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY Help for ndi.database.metadata_app.class.ElectrodeArray/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.electrodearray, ndi.database.metadata_app.class.electrodearray/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.ElectrodeArray/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/NE Help for ndi.database.metadata_app.class.ElectrodeArray/ge is inherited from superclass handle getDigitalIdentifier - ndi.database.metadata_app.class.ElectrodeArray/getDigitalIdentifier is an undocumented builtin function. getManufacturerName - ndi.database.metadata_app.class.ElectrodeArray/getManufacturerName is an undocumented builtin function. getProperties - ndi.database.metadata_app.class.ElectrodeArray/getProperties is an undocumented builtin function. getProperty - ndi.database.metadata_app.class.ElectrodeArray/getProperty is an undocumented builtin function. gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/NE Help for ndi.database.metadata_app.class.ElectrodeArray/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/DELETE Help for ndi.database.metadata_app.class.ElectrodeArray/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/NE Help for ndi.database.metadata_app.class.ElectrodeArray/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.electrodearray, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.ElectrodeArray/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/NE Help for ndi.database.metadata_app.class.ElectrodeArray/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LT Help for ndi.database.metadata_app.class.ElectrodeArray/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.ElectrodeArray/notify is inherited from superclass handle setDigitalIdentifier - ndi.database.metadata_app.class.ElectrodeArray/setDigitalIdentifier is an undocumented builtin function. toTableStruct - ndi.database.metadata_app.class.ElectrodeArray/toTableStruct is an undocumented builtin function. updateProperty - ndi.database.metadata_app.class.ElectrodeArray/updateProperty is an undocumented builtin function.","title":"ndi.database.metadata_app.class.ElectrodeArray"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ElectrodeArray.m/#class-ndidatabasemetadata_appclasselectrodearray","text":"ndi.database.metadata_app.class.ElectrodeArray is a class. obj = ndi.database.metadata_app.class.ElectrodeArray","title":"CLASS ndi.database.metadata_app.class.ElectrodeArray"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ElectrodeArray.m/#superclasses","text":"ndi.database.metadata_app.class.Probe , handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ElectrodeArray.m/#properties","text":"Property Description ElectrodeIdentifier NoofElectrodes Name DeviceType ProbeType ClassType Description DigitalIdentifier Manufacturer Complete sessionIdentifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ElectrodeArray.m/#methods","text":"Method Description ElectrodeArray ndi.database.metadata_app.class.ElectrodeArray/ElectrodeArray is a constructor. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. digitalIdentifierTypeSelected ndi.database.metadata_app.class.ElectrodeArray/digitalIdentifierTypeSelected is an undocumented builtin function. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getDigitalIdentifier ndi.database.metadata_app.class.ElectrodeArray/getDigitalIdentifier is an undocumented builtin function. getManufacturerName ndi.database.metadata_app.class.ElectrodeArray/getManufacturerName is an undocumented builtin function. getProperties ndi.database.metadata_app.class.ElectrodeArray/getProperties is an undocumented builtin function. getProperty ndi.database.metadata_app.class.ElectrodeArray/getProperty is an undocumented builtin function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setDigitalIdentifier ndi.database.metadata_app.class.ElectrodeArray/setDigitalIdentifier is an undocumented builtin function. toTableStruct ndi.database.metadata_app.class.ElectrodeArray/toTableStruct is an undocumented builtin function. updateProperty ndi.database.metadata_app.class.ElectrodeArray/updateProperty is an undocumented builtin function.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ElectrodeArray.m/#methods-help","text":"ElectrodeArray - ndi.database.metadata_app.class.ElectrodeArray/ElectrodeArray is a constructor. obj = ndi.database.metadata_app.class.ElectrodeArray Documentation for ndi.database.metadata_app.class.ElectrodeArray/ElectrodeArray doc ndi.database.metadata_app.class.ElectrodeArray addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.electrodearray, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.ElectrodeArray/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/ISVALID, CLEAR Help for ndi.database.metadata_app.class.ElectrodeArray/delete is inherited from superclass handle digitalIdentifierTypeSelected - ndi.database.metadata_app.class.ElectrodeArray/digitalIdentifierTypeSelected is an undocumented builtin function. eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/NE Help for ndi.database.metadata_app.class.ElectrodeArray/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY Help for ndi.database.metadata_app.class.ElectrodeArray/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.electrodearray, ndi.database.metadata_app.class.electrodearray/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.ElectrodeArray/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/NE Help for ndi.database.metadata_app.class.ElectrodeArray/ge is inherited from superclass handle getDigitalIdentifier - ndi.database.metadata_app.class.ElectrodeArray/getDigitalIdentifier is an undocumented builtin function. getManufacturerName - ndi.database.metadata_app.class.ElectrodeArray/getManufacturerName is an undocumented builtin function. getProperties - ndi.database.metadata_app.class.ElectrodeArray/getProperties is an undocumented builtin function. getProperty - ndi.database.metadata_app.class.ElectrodeArray/getProperty is an undocumented builtin function. gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/NE Help for ndi.database.metadata_app.class.ElectrodeArray/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/DELETE Help for ndi.database.metadata_app.class.ElectrodeArray/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/NE Help for ndi.database.metadata_app.class.ElectrodeArray/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.electrodearray, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.ElectrodeArray/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/NE Help for ndi.database.metadata_app.class.ElectrodeArray/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LT Help for ndi.database.metadata_app.class.ElectrodeArray/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.ElectrodeArray/notify is inherited from superclass handle setDigitalIdentifier - ndi.database.metadata_app.class.ElectrodeArray/setDigitalIdentifier is an undocumented builtin function. toTableStruct - ndi.database.metadata_app.class.ElectrodeArray/toTableStruct is an undocumented builtin function. updateProperty - ndi.database.metadata_app.class.ElectrodeArray/updateProperty is an undocumented builtin function.","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/License.m/","text":"CLASS ndi.database.metadata_app.class.License AuthorData A utility class for License. Superclasses handle Properties Property Description FullName LegalCode ShortName Methods Method Description License AuthorData A utility class for License. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getFullName ndi.database.metadata_app.class.License/getFullName is a function. getLegalCode ndi.database.metadata_app.class.License/getLegalCode is a function. getShortName ndi.database.metadata_app.class.License/getShortName is a function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. Methods help License - AuthorData A utility class for License. Documentation for ndi.database.metadata_app.class.License/License doc ndi.database.metadata_app.class.License addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.license, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.License/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/ISVALID, CLEAR Help for ndi.database.metadata_app.class.License/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/NE Help for ndi.database.metadata_app.class.License/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.LICENSE Help for ndi.database.metadata_app.class.License/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.license, ndi.database.metadata_app.class.license/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.License/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/EQ, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/NE Help for ndi.database.metadata_app.class.License/ge is inherited from superclass handle getFullName - ndi.database.metadata_app.class.License/getFullName is a function. FullName = getFullName(obj) getLegalCode - ndi.database.metadata_app.class.License/getLegalCode is a function. LegalCode = getLegalCode(obj) getShortName - ndi.database.metadata_app.class.License/getShortName is a function. ShortName = getShortName(obj) gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/EQ, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/NE Help for ndi.database.metadata_app.class.License/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/DELETE Help for ndi.database.metadata_app.class.License/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/EQ, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/NE Help for ndi.database.metadata_app.class.License/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.license, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.License/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/EQ, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/NE Help for ndi.database.metadata_app.class.License/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/EQ, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LT Help for ndi.database.metadata_app.class.License/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.License/notify is inherited from superclass handle","title":"ndi.database.metadata_app.class.License"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/License.m/#class-ndidatabasemetadata_appclasslicense","text":"AuthorData A utility class for License.","title":"CLASS ndi.database.metadata_app.class.License"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/License.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/License.m/#properties","text":"Property Description FullName LegalCode ShortName","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/License.m/#methods","text":"Method Description License AuthorData A utility class for License. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getFullName ndi.database.metadata_app.class.License/getFullName is a function. getLegalCode ndi.database.metadata_app.class.License/getLegalCode is a function. getShortName ndi.database.metadata_app.class.License/getShortName is a function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/License.m/#methods-help","text":"License - AuthorData A utility class for License. Documentation for ndi.database.metadata_app.class.License/License doc ndi.database.metadata_app.class.License addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.license, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.License/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/ISVALID, CLEAR Help for ndi.database.metadata_app.class.License/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/NE Help for ndi.database.metadata_app.class.License/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.LICENSE Help for ndi.database.metadata_app.class.License/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.license, ndi.database.metadata_app.class.license/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.License/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/EQ, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/NE Help for ndi.database.metadata_app.class.License/ge is inherited from superclass handle getFullName - ndi.database.metadata_app.class.License/getFullName is a function. FullName = getFullName(obj) getLegalCode - ndi.database.metadata_app.class.License/getLegalCode is a function. LegalCode = getLegalCode(obj) getShortName - ndi.database.metadata_app.class.License/getShortName is a function. ShortName = getShortName(obj) gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/EQ, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/NE Help for ndi.database.metadata_app.class.License/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/DELETE Help for ndi.database.metadata_app.class.License/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/EQ, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/NE Help for ndi.database.metadata_app.class.License/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.license, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.License/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/EQ, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/NE Help for ndi.database.metadata_app.class.License/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/EQ, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LT Help for ndi.database.metadata_app.class.License/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.License/notify is inherited from superclass handle","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/MiscellaneousProbe.m/","text":"CLASS ndi.database.metadata_app.class.MiscellaneousProbe ndi.database.metadata_app.class.MiscellaneousProbe is a class. obj = ndi.database.metadata_app.class.MiscellaneousProbe Superclasses ndi.database.metadata_app.class.Probe , handle Properties Property Description Name DeviceType ProbeType ClassType Description DigitalIdentifier Manufacturer Complete sessionIdentifier Methods Method Description MiscellaneousProbe ndi.database.metadata_app.class.MiscellaneousProbe/MiscellaneousProbe is a constructor. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. digitalIdentifierTypeSelected ndi.database.metadata_app.class.MiscellaneousProbe/digitalIdentifierTypeSelected is an undocumented builtin function. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getDigitalIdentifier ndi.database.metadata_app.class.MiscellaneousProbe/getDigitalIdentifier is an undocumented builtin function. getManufacturerName ndi.database.metadata_app.class.MiscellaneousProbe/getManufacturerName is an undocumented builtin function. getProperties ndi.database.metadata_app.class.MiscellaneousProbe/getProperties is an undocumented builtin function. getProperty ndi.database.metadata_app.class.MiscellaneousProbe/getProperty is an undocumented builtin function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setDigitalIdentifier ndi.database.metadata_app.class.MiscellaneousProbe/setDigitalIdentifier is an undocumented builtin function. toTableStruct ndi.database.metadata_app.class.MiscellaneousProbe/toTableStruct is an undocumented builtin function. updateProperty ndi.database.metadata_app.class.MiscellaneousProbe/updateProperty is an undocumented builtin function. Methods help MiscellaneousProbe - ndi.database.metadata_app.class.MiscellaneousProbe/MiscellaneousProbe is a constructor. obj = ndi.database.metadata_app.class.MiscellaneousProbe Documentation for ndi.database.metadata_app.class.MiscellaneousProbe/MiscellaneousProbe doc ndi.database.metadata_app.class.MiscellaneousProbe addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.miscellaneousprobe, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.MiscellaneousProbe/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/ISVALID, CLEAR Help for ndi.database.metadata_app.class.MiscellaneousProbe/delete is inherited from superclass handle digitalIdentifierTypeSelected - ndi.database.metadata_app.class.MiscellaneousProbe/digitalIdentifierTypeSelected is an undocumented builtin function. eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/NE Help for ndi.database.metadata_app.class.MiscellaneousProbe/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE Help for ndi.database.metadata_app.class.MiscellaneousProbe/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.miscellaneousprobe, ndi.database.metadata_app.class.miscellaneousprobe/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.MiscellaneousProbe/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/NE Help for ndi.database.metadata_app.class.MiscellaneousProbe/ge is inherited from superclass handle getDigitalIdentifier - ndi.database.metadata_app.class.MiscellaneousProbe/getDigitalIdentifier is an undocumented builtin function. getManufacturerName - ndi.database.metadata_app.class.MiscellaneousProbe/getManufacturerName is an undocumented builtin function. getProperties - ndi.database.metadata_app.class.MiscellaneousProbe/getProperties is an undocumented builtin function. getProperty - ndi.database.metadata_app.class.MiscellaneousProbe/getProperty is an undocumented builtin function. gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/NE Help for ndi.database.metadata_app.class.MiscellaneousProbe/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/DELETE Help for ndi.database.metadata_app.class.MiscellaneousProbe/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/NE Help for ndi.database.metadata_app.class.MiscellaneousProbe/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.miscellaneousprobe, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.MiscellaneousProbe/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/NE Help for ndi.database.metadata_app.class.MiscellaneousProbe/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LT Help for ndi.database.metadata_app.class.MiscellaneousProbe/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.MiscellaneousProbe/notify is inherited from superclass handle setDigitalIdentifier - ndi.database.metadata_app.class.MiscellaneousProbe/setDigitalIdentifier is an undocumented builtin function. toTableStruct - ndi.database.metadata_app.class.MiscellaneousProbe/toTableStruct is an undocumented builtin function. updateProperty - ndi.database.metadata_app.class.MiscellaneousProbe/updateProperty is an undocumented builtin function.","title":"ndi.database.metadata_app.class.MiscellaneousProbe"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/MiscellaneousProbe.m/#class-ndidatabasemetadata_appclassmiscellaneousprobe","text":"ndi.database.metadata_app.class.MiscellaneousProbe is a class. obj = ndi.database.metadata_app.class.MiscellaneousProbe","title":"CLASS ndi.database.metadata_app.class.MiscellaneousProbe"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/MiscellaneousProbe.m/#superclasses","text":"ndi.database.metadata_app.class.Probe , handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/MiscellaneousProbe.m/#properties","text":"Property Description Name DeviceType ProbeType ClassType Description DigitalIdentifier Manufacturer Complete sessionIdentifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/MiscellaneousProbe.m/#methods","text":"Method Description MiscellaneousProbe ndi.database.metadata_app.class.MiscellaneousProbe/MiscellaneousProbe is a constructor. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. digitalIdentifierTypeSelected ndi.database.metadata_app.class.MiscellaneousProbe/digitalIdentifierTypeSelected is an undocumented builtin function. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getDigitalIdentifier ndi.database.metadata_app.class.MiscellaneousProbe/getDigitalIdentifier is an undocumented builtin function. getManufacturerName ndi.database.metadata_app.class.MiscellaneousProbe/getManufacturerName is an undocumented builtin function. getProperties ndi.database.metadata_app.class.MiscellaneousProbe/getProperties is an undocumented builtin function. getProperty ndi.database.metadata_app.class.MiscellaneousProbe/getProperty is an undocumented builtin function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setDigitalIdentifier ndi.database.metadata_app.class.MiscellaneousProbe/setDigitalIdentifier is an undocumented builtin function. toTableStruct ndi.database.metadata_app.class.MiscellaneousProbe/toTableStruct is an undocumented builtin function. updateProperty ndi.database.metadata_app.class.MiscellaneousProbe/updateProperty is an undocumented builtin function.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/MiscellaneousProbe.m/#methods-help","text":"MiscellaneousProbe - ndi.database.metadata_app.class.MiscellaneousProbe/MiscellaneousProbe is a constructor. obj = ndi.database.metadata_app.class.MiscellaneousProbe Documentation for ndi.database.metadata_app.class.MiscellaneousProbe/MiscellaneousProbe doc ndi.database.metadata_app.class.MiscellaneousProbe addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.miscellaneousprobe, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.MiscellaneousProbe/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/ISVALID, CLEAR Help for ndi.database.metadata_app.class.MiscellaneousProbe/delete is inherited from superclass handle digitalIdentifierTypeSelected - ndi.database.metadata_app.class.MiscellaneousProbe/digitalIdentifierTypeSelected is an undocumented builtin function. eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/NE Help for ndi.database.metadata_app.class.MiscellaneousProbe/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE Help for ndi.database.metadata_app.class.MiscellaneousProbe/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.miscellaneousprobe, ndi.database.metadata_app.class.miscellaneousprobe/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.MiscellaneousProbe/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/NE Help for ndi.database.metadata_app.class.MiscellaneousProbe/ge is inherited from superclass handle getDigitalIdentifier - ndi.database.metadata_app.class.MiscellaneousProbe/getDigitalIdentifier is an undocumented builtin function. getManufacturerName - ndi.database.metadata_app.class.MiscellaneousProbe/getManufacturerName is an undocumented builtin function. getProperties - ndi.database.metadata_app.class.MiscellaneousProbe/getProperties is an undocumented builtin function. getProperty - ndi.database.metadata_app.class.MiscellaneousProbe/getProperty is an undocumented builtin function. gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/NE Help for ndi.database.metadata_app.class.MiscellaneousProbe/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/DELETE Help for ndi.database.metadata_app.class.MiscellaneousProbe/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/NE Help for ndi.database.metadata_app.class.MiscellaneousProbe/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.miscellaneousprobe, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.MiscellaneousProbe/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/NE Help for ndi.database.metadata_app.class.MiscellaneousProbe/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LT Help for ndi.database.metadata_app.class.MiscellaneousProbe/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.MiscellaneousProbe/notify is inherited from superclass handle setDigitalIdentifier - ndi.database.metadata_app.class.MiscellaneousProbe/setDigitalIdentifier is an undocumented builtin function. toTableStruct - ndi.database.metadata_app.class.MiscellaneousProbe/toTableStruct is an undocumented builtin function. updateProperty - ndi.database.metadata_app.class.MiscellaneousProbe/updateProperty is an undocumented builtin function.","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Organization.m/","text":"CLASS ndi.database.metadata_app.class.Organization ORGANIZATION Summary of this class goes here Detailed explanation goes here Superclasses none Properties Property Description digitalIdentifier fullName Methods Method Description Organization ORGANIZATION Construct an instance of this class getName getName Get the value in a field updateIdentifier updateIdentifier Update the value in a field updateName updateName Update the value in a field Methods help Organization - ORGANIZATION Construct an instance of this class Documentation for ndi.database.metadata_app.class.Organization/Organization doc ndi.database.metadata_app.class.Organization getName - getName Get the value in a field updateIdentifier - updateIdentifier Update the value in a field updateName - updateName Update the value in a field","title":"ndi.database.metadata_app.class.Organization"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Organization.m/#class-ndidatabasemetadata_appclassorganization","text":"ORGANIZATION Summary of this class goes here Detailed explanation goes here","title":"CLASS ndi.database.metadata_app.class.Organization"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Organization.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Organization.m/#properties","text":"Property Description digitalIdentifier fullName","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Organization.m/#methods","text":"Method Description Organization ORGANIZATION Construct an instance of this class getName getName Get the value in a field updateIdentifier updateIdentifier Update the value in a field updateName updateName Update the value in a field","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Organization.m/#methods-help","text":"Organization - ORGANIZATION Construct an instance of this class Documentation for ndi.database.metadata_app.class.Organization/Organization doc ndi.database.metadata_app.class.Organization getName - getName Get the value in a field updateIdentifier - updateIdentifier Update the value in a field updateName - updateName Update the value in a field","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Pipette.m/","text":"CLASS ndi.database.metadata_app.class.Pipette ndi.database.metadata_app.class.Pipette is a class. obj = ndi.database.metadata_app.class.Pipette(varargin) Superclasses ndi.database.metadata_app.class.Probe , handle Properties Property Description InternalDiameter InternalDiameterUnit Name DeviceType ProbeType ClassType Description DigitalIdentifier Manufacturer Complete sessionIdentifier Methods Method Description InternalDiameterUnitSelected ndi.database.metadata_app.class.Pipette/InternalDiameterUnitSelected is a function. Pipette ndi.database.metadata_app.class.Pipette/Pipette is a constructor. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. digitalIdentifierTypeSelected ndi.database.metadata_app.class.Pipette/digitalIdentifierTypeSelected is an undocumented builtin function. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getDigitalIdentifier ndi.database.metadata_app.class.Pipette/getDigitalIdentifier is an undocumented builtin function. getManufacturerName ndi.database.metadata_app.class.Pipette/getManufacturerName is an undocumented builtin function. getProperties ndi.database.metadata_app.class.Pipette/getProperties is an undocumented builtin function. getProperty ndi.database.metadata_app.class.Pipette/getProperty is an undocumented builtin function. gt > (GT) Greater than relation for handles. intrinsicDiameterCheck ndi.database.metadata_app.class.Pipette/intrinsicDiameterCheck is a function. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setDigitalIdentifier ndi.database.metadata_app.class.Pipette/setDigitalIdentifier is an undocumented builtin function. toTableStruct ndi.database.metadata_app.class.Pipette/toTableStruct is an undocumented builtin function. updateProperty ndi.database.metadata_app.class.Pipette/updateProperty is an undocumented builtin function. Methods help InternalDiameterUnitSelected - ndi.database.metadata_app.class.Pipette/InternalDiameterUnitSelected is a function. selected = InternalDiameterUnitSelected(obj) Pipette - ndi.database.metadata_app.class.Pipette/Pipette is a constructor. obj = Pipette(varargin) Documentation for ndi.database.metadata_app.class.Pipette/Pipette doc ndi.database.metadata_app.class.Pipette addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.pipette, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Pipette/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/ISVALID, CLEAR Help for ndi.database.metadata_app.class.Pipette/delete is inherited from superclass handle digitalIdentifierTypeSelected - ndi.database.metadata_app.class.Pipette/digitalIdentifierTypeSelected is an undocumented builtin function. eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/NE Help for ndi.database.metadata_app.class.Pipette/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE Help for ndi.database.metadata_app.class.Pipette/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.pipette, ndi.database.metadata_app.class.pipette/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.Pipette/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/NE Help for ndi.database.metadata_app.class.Pipette/ge is inherited from superclass handle getDigitalIdentifier - ndi.database.metadata_app.class.Pipette/getDigitalIdentifier is an undocumented builtin function. getManufacturerName - ndi.database.metadata_app.class.Pipette/getManufacturerName is an undocumented builtin function. getProperties - ndi.database.metadata_app.class.Pipette/getProperties is an undocumented builtin function. getProperty - ndi.database.metadata_app.class.Pipette/getProperty is an undocumented builtin function. gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/NE Help for ndi.database.metadata_app.class.Pipette/gt is inherited from superclass handle intrinsicDiameterCheck - ndi.database.metadata_app.class.Pipette/intrinsicDiameterCheck is a function. filled = intrinsicDiameterCheck(obj) isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/DELETE Help for ndi.database.metadata_app.class.Pipette/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/NE Help for ndi.database.metadata_app.class.Pipette/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.pipette, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Pipette/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/NE Help for ndi.database.metadata_app.class.Pipette/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LT Help for ndi.database.metadata_app.class.Pipette/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.Pipette/notify is inherited from superclass handle setDigitalIdentifier - ndi.database.metadata_app.class.Pipette/setDigitalIdentifier is an undocumented builtin function. toTableStruct - ndi.database.metadata_app.class.Pipette/toTableStruct is an undocumented builtin function. updateProperty - ndi.database.metadata_app.class.Pipette/updateProperty is an undocumented builtin function.","title":"ndi.database.metadata_app.class.Pipette"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Pipette.m/#class-ndidatabasemetadata_appclasspipette","text":"ndi.database.metadata_app.class.Pipette is a class. obj = ndi.database.metadata_app.class.Pipette(varargin)","title":"CLASS ndi.database.metadata_app.class.Pipette"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Pipette.m/#superclasses","text":"ndi.database.metadata_app.class.Probe , handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Pipette.m/#properties","text":"Property Description InternalDiameter InternalDiameterUnit Name DeviceType ProbeType ClassType Description DigitalIdentifier Manufacturer Complete sessionIdentifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Pipette.m/#methods","text":"Method Description InternalDiameterUnitSelected ndi.database.metadata_app.class.Pipette/InternalDiameterUnitSelected is a function. Pipette ndi.database.metadata_app.class.Pipette/Pipette is a constructor. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. digitalIdentifierTypeSelected ndi.database.metadata_app.class.Pipette/digitalIdentifierTypeSelected is an undocumented builtin function. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getDigitalIdentifier ndi.database.metadata_app.class.Pipette/getDigitalIdentifier is an undocumented builtin function. getManufacturerName ndi.database.metadata_app.class.Pipette/getManufacturerName is an undocumented builtin function. getProperties ndi.database.metadata_app.class.Pipette/getProperties is an undocumented builtin function. getProperty ndi.database.metadata_app.class.Pipette/getProperty is an undocumented builtin function. gt > (GT) Greater than relation for handles. intrinsicDiameterCheck ndi.database.metadata_app.class.Pipette/intrinsicDiameterCheck is a function. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setDigitalIdentifier ndi.database.metadata_app.class.Pipette/setDigitalIdentifier is an undocumented builtin function. toTableStruct ndi.database.metadata_app.class.Pipette/toTableStruct is an undocumented builtin function. updateProperty ndi.database.metadata_app.class.Pipette/updateProperty is an undocumented builtin function.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Pipette.m/#methods-help","text":"InternalDiameterUnitSelected - ndi.database.metadata_app.class.Pipette/InternalDiameterUnitSelected is a function. selected = InternalDiameterUnitSelected(obj) Pipette - ndi.database.metadata_app.class.Pipette/Pipette is a constructor. obj = Pipette(varargin) Documentation for ndi.database.metadata_app.class.Pipette/Pipette doc ndi.database.metadata_app.class.Pipette addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.pipette, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Pipette/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/ISVALID, CLEAR Help for ndi.database.metadata_app.class.Pipette/delete is inherited from superclass handle digitalIdentifierTypeSelected - ndi.database.metadata_app.class.Pipette/digitalIdentifierTypeSelected is an undocumented builtin function. eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/NE Help for ndi.database.metadata_app.class.Pipette/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE Help for ndi.database.metadata_app.class.Pipette/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.pipette, ndi.database.metadata_app.class.pipette/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.Pipette/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/NE Help for ndi.database.metadata_app.class.Pipette/ge is inherited from superclass handle getDigitalIdentifier - ndi.database.metadata_app.class.Pipette/getDigitalIdentifier is an undocumented builtin function. getManufacturerName - ndi.database.metadata_app.class.Pipette/getManufacturerName is an undocumented builtin function. getProperties - ndi.database.metadata_app.class.Pipette/getProperties is an undocumented builtin function. getProperty - ndi.database.metadata_app.class.Pipette/getProperty is an undocumented builtin function. gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/NE Help for ndi.database.metadata_app.class.Pipette/gt is inherited from superclass handle intrinsicDiameterCheck - ndi.database.metadata_app.class.Pipette/intrinsicDiameterCheck is a function. filled = intrinsicDiameterCheck(obj) isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/DELETE Help for ndi.database.metadata_app.class.Pipette/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/NE Help for ndi.database.metadata_app.class.Pipette/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.pipette, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Pipette/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/NE Help for ndi.database.metadata_app.class.Pipette/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LT Help for ndi.database.metadata_app.class.Pipette/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.Pipette/notify is inherited from superclass handle setDigitalIdentifier - ndi.database.metadata_app.class.Pipette/setDigitalIdentifier is an undocumented builtin function. toTableStruct - ndi.database.metadata_app.class.Pipette/toTableStruct is an undocumented builtin function. updateProperty - ndi.database.metadata_app.class.Pipette/updateProperty is an undocumented builtin function.","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Probe.m/","text":"CLASS ndi.database.metadata_app.class.Probe ndi.database.metadata_app.class.Probe is a class. obj = ndi.database.metadata_app.class.Probe Superclasses handle Properties Property Description Name DeviceType ProbeType ClassType Description DigitalIdentifier Manufacturer Complete sessionIdentifier Methods Method Description Probe ndi.database.metadata_app.class.Probe/Probe is a constructor. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. digitalIdentifierTypeSelected ndi.database.metadata_app.class.Probe/digitalIdentifierTypeSelected is a function. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getDigitalIdentifier ndi.database.metadata_app.class.Probe/getDigitalIdentifier is a function. getManufacturerName ndi.database.metadata_app.class.Probe/getManufacturerName is a function. getProperties ndi.database.metadata_app.class.Probe/getProperties is a function. getProperty ndi.database.metadata_app.class.Probe/getProperty is a function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setDigitalIdentifier ndi.database.metadata_app.class.Probe/setDigitalIdentifier is a function. toTableStruct ndi.database.metadata_app.class.Probe/toTableStruct is a function. updateProperty ndi.database.metadata_app.class.Probe/updateProperty is a function. Methods help Probe - ndi.database.metadata_app.class.Probe/Probe is a constructor. obj = Probe Documentation for ndi.database.metadata_app.class.Probe/Probe doc ndi.database.metadata_app.class.Probe addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.probe, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Probe/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/ISVALID, CLEAR Help for ndi.database.metadata_app.class.Probe/delete is inherited from superclass handle digitalIdentifierTypeSelected - ndi.database.metadata_app.class.Probe/digitalIdentifierTypeSelected is a function. selected = digitalIdentifierTypeSelected(obj) eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/NE Help for ndi.database.metadata_app.class.Probe/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.PROBE Help for ndi.database.metadata_app.class.Probe/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.probe, ndi.database.metadata_app.class.probe/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.Probe/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/NE Help for ndi.database.metadata_app.class.Probe/ge is inherited from superclass handle getDigitalIdentifier - ndi.database.metadata_app.class.Probe/getDigitalIdentifier is a function. [digitalIdentifierType, digitalIdentifier] = getDigitalIdentifier(obj) getManufacturerName - ndi.database.metadata_app.class.Probe/getManufacturerName is a function. manufacturerName = getManufacturerName(obj) getProperties - ndi.database.metadata_app.class.Probe/getProperties is a function. properties = getProperties(obj) getProperty - ndi.database.metadata_app.class.Probe/getProperty is a function. property = getProperty(obj, name) gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/NE Help for ndi.database.metadata_app.class.Probe/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/DELETE Help for ndi.database.metadata_app.class.Probe/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/NE Help for ndi.database.metadata_app.class.Probe/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.probe, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Probe/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/NE Help for ndi.database.metadata_app.class.Probe/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LT Help for ndi.database.metadata_app.class.Probe/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.Probe/notify is inherited from superclass handle setDigitalIdentifier - ndi.database.metadata_app.class.Probe/setDigitalIdentifier is a function. [digitalIdentifier, digitalIdentifierType] = setDigitalIdentifier(obj, digitalIdentifierType, digitalIdentifier) toTableStruct - ndi.database.metadata_app.class.Probe/toTableStruct is a function. s = toTableStruct(obj) updateProperty - ndi.database.metadata_app.class.Probe/updateProperty is a function. updateProperty(obj, name, value)","title":"ndi.database.metadata_app.class.Probe"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Probe.m/#class-ndidatabasemetadata_appclassprobe","text":"ndi.database.metadata_app.class.Probe is a class. obj = ndi.database.metadata_app.class.Probe","title":"CLASS ndi.database.metadata_app.class.Probe"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Probe.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Probe.m/#properties","text":"Property Description Name DeviceType ProbeType ClassType Description DigitalIdentifier Manufacturer Complete sessionIdentifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Probe.m/#methods","text":"Method Description Probe ndi.database.metadata_app.class.Probe/Probe is a constructor. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. digitalIdentifierTypeSelected ndi.database.metadata_app.class.Probe/digitalIdentifierTypeSelected is a function. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getDigitalIdentifier ndi.database.metadata_app.class.Probe/getDigitalIdentifier is a function. getManufacturerName ndi.database.metadata_app.class.Probe/getManufacturerName is a function. getProperties ndi.database.metadata_app.class.Probe/getProperties is a function. getProperty ndi.database.metadata_app.class.Probe/getProperty is a function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setDigitalIdentifier ndi.database.metadata_app.class.Probe/setDigitalIdentifier is a function. toTableStruct ndi.database.metadata_app.class.Probe/toTableStruct is a function. updateProperty ndi.database.metadata_app.class.Probe/updateProperty is a function.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Probe.m/#methods-help","text":"Probe - ndi.database.metadata_app.class.Probe/Probe is a constructor. obj = Probe Documentation for ndi.database.metadata_app.class.Probe/Probe doc ndi.database.metadata_app.class.Probe addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.probe, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Probe/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/ISVALID, CLEAR Help for ndi.database.metadata_app.class.Probe/delete is inherited from superclass handle digitalIdentifierTypeSelected - ndi.database.metadata_app.class.Probe/digitalIdentifierTypeSelected is a function. selected = digitalIdentifierTypeSelected(obj) eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/NE Help for ndi.database.metadata_app.class.Probe/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.PROBE Help for ndi.database.metadata_app.class.Probe/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.probe, ndi.database.metadata_app.class.probe/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.Probe/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/NE Help for ndi.database.metadata_app.class.Probe/ge is inherited from superclass handle getDigitalIdentifier - ndi.database.metadata_app.class.Probe/getDigitalIdentifier is a function. [digitalIdentifierType, digitalIdentifier] = getDigitalIdentifier(obj) getManufacturerName - ndi.database.metadata_app.class.Probe/getManufacturerName is a function. manufacturerName = getManufacturerName(obj) getProperties - ndi.database.metadata_app.class.Probe/getProperties is a function. properties = getProperties(obj) getProperty - ndi.database.metadata_app.class.Probe/getProperty is a function. property = getProperty(obj, name) gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/NE Help for ndi.database.metadata_app.class.Probe/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/DELETE Help for ndi.database.metadata_app.class.Probe/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/NE Help for ndi.database.metadata_app.class.Probe/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.probe, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Probe/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/NE Help for ndi.database.metadata_app.class.Probe/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LT Help for ndi.database.metadata_app.class.Probe/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.Probe/notify is inherited from superclass handle setDigitalIdentifier - ndi.database.metadata_app.class.Probe/setDigitalIdentifier is a function. [digitalIdentifier, digitalIdentifierType] = setDigitalIdentifier(obj, digitalIdentifierType, digitalIdentifier) toTableStruct - ndi.database.metadata_app.class.Probe/toTableStruct is a function. s = toTableStruct(obj) updateProperty - ndi.database.metadata_app.class.Probe/updateProperty is a function. updateProperty(obj, name, value)","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ProbeData.m/","text":"CLASS ndi.database.metadata_app.class.ProbeData ProbeData A utility class for storing and retrieving information about probes. Superclasses matlab.mixin.Heterogeneous , handle Properties Property Description TypeAssigned A Map storing all the probes that have selected a type. ProbeList Methods Method Description ProbeData ProbeData A utility class for storing and retrieving information about probes. addNewProbe ndi.database.metadata_app.class.ProbeData/addNewProbe is a function. addlistener addlistener Add listener for event. createNewProbe ndi.database.metadata_app.class.ProbeData/createNewProbe is a function. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. formatTable ndi.database.metadata_app.class.ProbeData/formatTable is a function. ge >= (GE) Greater than or equal relation for handles. getPipetteList ndi.database.metadata_app.class.ProbeData/getPipetteList is a function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. probeExist ndi.database.metadata_app.class.ProbeData/probeExist is a function. replaceProbe ndi.database.metadata_app.class.ProbeData/replaceProbe is a function. Methods help ProbeData - ProbeData A utility class for storing and retrieving information about probes. Documentation for ndi.database.metadata_app.class.ProbeData/ProbeData doc ndi.database.metadata_app.class.ProbeData addNewProbe - ndi.database.metadata_app.class.ProbeData/addNewProbe is a function. addNewProbe(obj, probe) addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.probedata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.ProbeData/addlistener is inherited from superclass handle createNewProbe - ndi.database.metadata_app.class.ProbeData/createNewProbe is a function. createNewProbe(obj, index, probeType) delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/ISVALID, CLEAR Help for ndi.database.metadata_app.class.ProbeData/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/NE Help for ndi.database.metadata_app.class.ProbeData/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA Help for ndi.database.metadata_app.class.ProbeData/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.probedata, ndi.database.metadata_app.class.probedata/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.ProbeData/findprop is inherited from superclass handle formatTable - ndi.database.metadata_app.class.ProbeData/formatTable is a function. t = formatTable(obj) ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/NE Help for ndi.database.metadata_app.class.ProbeData/ge is inherited from superclass handle getPipetteList - ndi.database.metadata_app.class.ProbeData/getPipetteList is a function. list = getPipetteList(obj) gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/NE Help for ndi.database.metadata_app.class.ProbeData/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/DELETE Help for ndi.database.metadata_app.class.ProbeData/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/NE Help for ndi.database.metadata_app.class.ProbeData/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.probedata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.ProbeData/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/NE Help for ndi.database.metadata_app.class.ProbeData/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LT Help for ndi.database.metadata_app.class.ProbeData/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.ProbeData/notify is inherited from superclass handle probeExist - ndi.database.metadata_app.class.ProbeData/probeExist is a function. exist = probeExist(obj, index) replaceProbe - ndi.database.metadata_app.class.ProbeData/replaceProbe is a function. replaceProbe(obj, index, probe)","title":"ndi.database.metadata_app.class.ProbeData"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ProbeData.m/#class-ndidatabasemetadata_appclassprobedata","text":"ProbeData A utility class for storing and retrieving information about probes.","title":"CLASS ndi.database.metadata_app.class.ProbeData"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ProbeData.m/#superclasses","text":"matlab.mixin.Heterogeneous , handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ProbeData.m/#properties","text":"Property Description TypeAssigned A Map storing all the probes that have selected a type. ProbeList","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ProbeData.m/#methods","text":"Method Description ProbeData ProbeData A utility class for storing and retrieving information about probes. addNewProbe ndi.database.metadata_app.class.ProbeData/addNewProbe is a function. addlistener addlistener Add listener for event. createNewProbe ndi.database.metadata_app.class.ProbeData/createNewProbe is a function. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. formatTable ndi.database.metadata_app.class.ProbeData/formatTable is a function. ge >= (GE) Greater than or equal relation for handles. getPipetteList ndi.database.metadata_app.class.ProbeData/getPipetteList is a function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. probeExist ndi.database.metadata_app.class.ProbeData/probeExist is a function. replaceProbe ndi.database.metadata_app.class.ProbeData/replaceProbe is a function.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ProbeData.m/#methods-help","text":"ProbeData - ProbeData A utility class for storing and retrieving information about probes. Documentation for ndi.database.metadata_app.class.ProbeData/ProbeData doc ndi.database.metadata_app.class.ProbeData addNewProbe - ndi.database.metadata_app.class.ProbeData/addNewProbe is a function. addNewProbe(obj, probe) addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.probedata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.ProbeData/addlistener is inherited from superclass handle createNewProbe - ndi.database.metadata_app.class.ProbeData/createNewProbe is a function. createNewProbe(obj, index, probeType) delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/ISVALID, CLEAR Help for ndi.database.metadata_app.class.ProbeData/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/NE Help for ndi.database.metadata_app.class.ProbeData/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA Help for ndi.database.metadata_app.class.ProbeData/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.probedata, ndi.database.metadata_app.class.probedata/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.ProbeData/findprop is inherited from superclass handle formatTable - ndi.database.metadata_app.class.ProbeData/formatTable is a function. t = formatTable(obj) ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/NE Help for ndi.database.metadata_app.class.ProbeData/ge is inherited from superclass handle getPipetteList - ndi.database.metadata_app.class.ProbeData/getPipetteList is a function. list = getPipetteList(obj) gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/NE Help for ndi.database.metadata_app.class.ProbeData/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/DELETE Help for ndi.database.metadata_app.class.ProbeData/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/NE Help for ndi.database.metadata_app.class.ProbeData/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.probedata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.ProbeData/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/NE Help for ndi.database.metadata_app.class.ProbeData/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LT Help for ndi.database.metadata_app.class.ProbeData/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.ProbeData/notify is inherited from superclass handle probeExist - ndi.database.metadata_app.class.ProbeData/probeExist is a function. exist = probeExist(obj, index) replaceProbe - ndi.database.metadata_app.class.ProbeData/replaceProbe is a function. replaceProbe(obj, index, probe)","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Species.m/","text":"CLASS ndi.database.metadata_app.class.Species Species A class for Species. Superclasses handle Properties Property Description Name Synonym OntologyIdentifier uuid Definition Description Methods Method Description Species Species A class for Species. addlistener addlistener Add listener for event. convertToOpenMinds ndi.database.metadata_app.class.Species/convertToOpenMinds is a function. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. fromStruct ndi.database.metadata_app.class.Species.fromStruct is a function. ge >= (GE) Greater than or equal relation for handles. getProperty ndi.database.metadata_app.class.Species/getProperty is a function. getUuid ndi.database.metadata_app.class.Species/getUuid is a function. gt > (GT) Greater than relation for handles. isEqual ndi.database.metadata_app.class.Species/isEqual is a function. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. toString ndi.database.metadata_app.class.Species/toString is a function. toStruct ndi.database.metadata_app.class.Species/toStruct is a function. updateProperty ndi.database.metadata_app.class.Species/updateProperty is a function. Methods help Species - Species A class for Species. Documentation for ndi.database.metadata_app.class.Species/Species doc ndi.database.metadata_app.class.Species addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.species, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Species/addlistener is inherited from superclass handle convertToOpenMinds - ndi.database.metadata_app.class.Species/convertToOpenMinds is a function. instances = convertToOpenMinds(obj) delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/ISVALID, CLEAR Help for ndi.database.metadata_app.class.Species/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/NE Help for ndi.database.metadata_app.class.Species/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.SPECIES Help for ndi.database.metadata_app.class.Species/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.species, ndi.database.metadata_app.class.species/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.Species/findprop is inherited from superclass handle fromStruct - ndi.database.metadata_app.class.Species.fromStruct is a function. obj = ndi.database.metadata_app.class.Species.fromStruct(s) ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/NE Help for ndi.database.metadata_app.class.Species/ge is inherited from superclass handle getProperty - ndi.database.metadata_app.class.Species/getProperty is a function. property = getProperty(obj, name) getUuid - ndi.database.metadata_app.class.Species/getUuid is a function. uuid = getUuid(object) gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/NE Help for ndi.database.metadata_app.class.Species/gt is inherited from superclass handle isEqual - ndi.database.metadata_app.class.Species/isEqual is a function. equal = isEqual(obj, species) isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/DELETE Help for ndi.database.metadata_app.class.Species/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/NE Help for ndi.database.metadata_app.class.Species/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.species, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Species/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/NE Help for ndi.database.metadata_app.class.Species/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LT Help for ndi.database.metadata_app.class.Species/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.Species/notify is inherited from superclass handle toString - ndi.database.metadata_app.class.Species/toString is a function. str = toString(obj) toStruct - ndi.database.metadata_app.class.Species/toStruct is a function. s = toStruct(obj) updateProperty - ndi.database.metadata_app.class.Species/updateProperty is a function. updateProperty(obj, name, value)","title":"ndi.database.metadata_app.class.Species"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Species.m/#class-ndidatabasemetadata_appclassspecies","text":"Species A class for Species.","title":"CLASS ndi.database.metadata_app.class.Species"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Species.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Species.m/#properties","text":"Property Description Name Synonym OntologyIdentifier uuid Definition Description","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Species.m/#methods","text":"Method Description Species Species A class for Species. addlistener addlistener Add listener for event. convertToOpenMinds ndi.database.metadata_app.class.Species/convertToOpenMinds is a function. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. fromStruct ndi.database.metadata_app.class.Species.fromStruct is a function. ge >= (GE) Greater than or equal relation for handles. getProperty ndi.database.metadata_app.class.Species/getProperty is a function. getUuid ndi.database.metadata_app.class.Species/getUuid is a function. gt > (GT) Greater than relation for handles. isEqual ndi.database.metadata_app.class.Species/isEqual is a function. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. toString ndi.database.metadata_app.class.Species/toString is a function. toStruct ndi.database.metadata_app.class.Species/toStruct is a function. updateProperty ndi.database.metadata_app.class.Species/updateProperty is a function.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Species.m/#methods-help","text":"Species - Species A class for Species. Documentation for ndi.database.metadata_app.class.Species/Species doc ndi.database.metadata_app.class.Species addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.species, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Species/addlistener is inherited from superclass handle convertToOpenMinds - ndi.database.metadata_app.class.Species/convertToOpenMinds is a function. instances = convertToOpenMinds(obj) delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/ISVALID, CLEAR Help for ndi.database.metadata_app.class.Species/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/NE Help for ndi.database.metadata_app.class.Species/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.SPECIES Help for ndi.database.metadata_app.class.Species/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.species, ndi.database.metadata_app.class.species/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.Species/findprop is inherited from superclass handle fromStruct - ndi.database.metadata_app.class.Species.fromStruct is a function. obj = ndi.database.metadata_app.class.Species.fromStruct(s) ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/NE Help for ndi.database.metadata_app.class.Species/ge is inherited from superclass handle getProperty - ndi.database.metadata_app.class.Species/getProperty is a function. property = getProperty(obj, name) getUuid - ndi.database.metadata_app.class.Species/getUuid is a function. uuid = getUuid(object) gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/NE Help for ndi.database.metadata_app.class.Species/gt is inherited from superclass handle isEqual - ndi.database.metadata_app.class.Species/isEqual is a function. equal = isEqual(obj, species) isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/DELETE Help for ndi.database.metadata_app.class.Species/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/NE Help for ndi.database.metadata_app.class.Species/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.species, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Species/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/NE Help for ndi.database.metadata_app.class.Species/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LT Help for ndi.database.metadata_app.class.Species/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.Species/notify is inherited from superclass handle toString - ndi.database.metadata_app.class.Species/toString is a function. str = toString(obj) toStruct - ndi.database.metadata_app.class.Species/toStruct is a function. s = toStruct(obj) updateProperty - ndi.database.metadata_app.class.Species/updateProperty is a function. updateProperty(obj, name, value)","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SpeciesData.m/","text":"CLASS ndi.database.metadata_app.class.SpeciesData SpeciesData A utility class for storing and retrieving information about Species. Superclasses handle Properties Property Description SpeciesList Methods Method Description SpeciesData SpeciesData A utility class for storing and retrieving information about Species. addItem ndi.database.metadata_app.class.SpeciesData/addItem is a function. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getItem getItem Get a struct with species details for the given name getSpeciesList getSpeciesList Same as S = SpeciesData.SpeciesList gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. removeItem removeItem Remove the specified species form the list. setSpeciesList setSpeciesList Same as SpeciesData.SpeciesList = S updateProperty updateProperty Update the value in a field for the given Methods help SpeciesData - SpeciesData A utility class for storing and retrieving information about Species. Documentation for ndi.database.metadata_app.class.SpeciesData/SpeciesData doc ndi.database.metadata_app.class.SpeciesData addItem - ndi.database.metadata_app.class.SpeciesData/addItem is a function. addItem(obj, varargin) addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.speciesdata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.SpeciesData/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/ISVALID, CLEAR Help for ndi.database.metadata_app.class.SpeciesData/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/NE Help for ndi.database.metadata_app.class.SpeciesData/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA Help for ndi.database.metadata_app.class.SpeciesData/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.speciesdata, ndi.database.metadata_app.class.speciesdata/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.SpeciesData/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/NE Help for ndi.database.metadata_app.class.SpeciesData/ge is inherited from superclass handle getItem - getItem Get a struct with species details for the given name getSpeciesList - getSpeciesList Same as S = SpeciesData.SpeciesList gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/NE Help for ndi.database.metadata_app.class.SpeciesData/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/DELETE Help for ndi.database.metadata_app.class.SpeciesData/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/NE Help for ndi.database.metadata_app.class.SpeciesData/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.speciesdata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.SpeciesData/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/NE Help for ndi.database.metadata_app.class.SpeciesData/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LT Help for ndi.database.metadata_app.class.SpeciesData/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.SpeciesData/notify is inherited from superclass handle removeItem - removeItem Remove the specified species form the list. Usage: SpeciesData.removeItem(speciesIndex) removes the species from the list where speciesIndex is the index in the struct. setSpeciesList - setSpeciesList Same as SpeciesData.SpeciesList = S updateProperty - updateProperty Update the value in a field for the given speciesIndex","title":"ndi.database.metadata_app.class.SpeciesData"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SpeciesData.m/#class-ndidatabasemetadata_appclassspeciesdata","text":"SpeciesData A utility class for storing and retrieving information about Species.","title":"CLASS ndi.database.metadata_app.class.SpeciesData"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SpeciesData.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SpeciesData.m/#properties","text":"Property Description SpeciesList","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SpeciesData.m/#methods","text":"Method Description SpeciesData SpeciesData A utility class for storing and retrieving information about Species. addItem ndi.database.metadata_app.class.SpeciesData/addItem is a function. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getItem getItem Get a struct with species details for the given name getSpeciesList getSpeciesList Same as S = SpeciesData.SpeciesList gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. removeItem removeItem Remove the specified species form the list. setSpeciesList setSpeciesList Same as SpeciesData.SpeciesList = S updateProperty updateProperty Update the value in a field for the given","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SpeciesData.m/#methods-help","text":"SpeciesData - SpeciesData A utility class for storing and retrieving information about Species. Documentation for ndi.database.metadata_app.class.SpeciesData/SpeciesData doc ndi.database.metadata_app.class.SpeciesData addItem - ndi.database.metadata_app.class.SpeciesData/addItem is a function. addItem(obj, varargin) addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.speciesdata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.SpeciesData/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/ISVALID, CLEAR Help for ndi.database.metadata_app.class.SpeciesData/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/NE Help for ndi.database.metadata_app.class.SpeciesData/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA Help for ndi.database.metadata_app.class.SpeciesData/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.speciesdata, ndi.database.metadata_app.class.speciesdata/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.SpeciesData/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/NE Help for ndi.database.metadata_app.class.SpeciesData/ge is inherited from superclass handle getItem - getItem Get a struct with species details for the given name getSpeciesList - getSpeciesList Same as S = SpeciesData.SpeciesList gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/NE Help for ndi.database.metadata_app.class.SpeciesData/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/DELETE Help for ndi.database.metadata_app.class.SpeciesData/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/NE Help for ndi.database.metadata_app.class.SpeciesData/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.speciesdata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.SpeciesData/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/NE Help for ndi.database.metadata_app.class.SpeciesData/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LT Help for ndi.database.metadata_app.class.SpeciesData/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.SpeciesData/notify is inherited from superclass handle removeItem - removeItem Remove the specified species form the list. Usage: SpeciesData.removeItem(speciesIndex) removes the species from the list where speciesIndex is the index in the struct. setSpeciesList - setSpeciesList Same as SpeciesData.SpeciesList = S updateProperty - updateProperty Update the value in a field for the given speciesIndex","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Strain.m/","text":"CLASS ndi.database.metadata_app.class.Strain STRAIN Summary of this class goes here Detailed explanation goes here Superclasses handle Properties Property Description Name Methods Method Description Strain STRAIN Summary of this class goes here addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. fromStruct ndi.database.metadata_app.class.Strain.fromStruct is a function. ge >= (GE) Greater than or equal relation for handles. getProperty ndi.database.metadata_app.class.Strain/getProperty is a function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. toString ndi.database.metadata_app.class.Strain/toString is a function. toStruct ndi.database.metadata_app.class.Strain/toStruct is a function. updateProperty ndi.database.metadata_app.class.Strain/updateProperty is a function. Methods help Strain - STRAIN Summary of this class goes here Detailed explanation goes here Documentation for ndi.database.metadata_app.class.Strain/Strain doc ndi.database.metadata_app.class.Strain addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.strain, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Strain/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/ISVALID, CLEAR Help for ndi.database.metadata_app.class.Strain/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/NE Help for ndi.database.metadata_app.class.Strain/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.STRAIN Help for ndi.database.metadata_app.class.Strain/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.strain, ndi.database.metadata_app.class.strain/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.Strain/findprop is inherited from superclass handle fromStruct - ndi.database.metadata_app.class.Strain.fromStruct is a function. obj = ndi.database.metadata_app.class.Strain.fromStruct(s) ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/EQ, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/NE Help for ndi.database.metadata_app.class.Strain/ge is inherited from superclass handle getProperty - ndi.database.metadata_app.class.Strain/getProperty is a function. property = getProperty(obj, name) gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/EQ, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/NE Help for ndi.database.metadata_app.class.Strain/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/DELETE Help for ndi.database.metadata_app.class.Strain/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/EQ, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/NE Help for ndi.database.metadata_app.class.Strain/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.strain, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Strain/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/EQ, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/NE Help for ndi.database.metadata_app.class.Strain/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/EQ, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LT Help for ndi.database.metadata_app.class.Strain/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.Strain/notify is inherited from superclass handle toString - ndi.database.metadata_app.class.Strain/toString is a function. str = toString(obj) toStruct - ndi.database.metadata_app.class.Strain/toStruct is a function. s = toStruct(obj) updateProperty - ndi.database.metadata_app.class.Strain/updateProperty is a function. updateProperty(obj, name, value)","title":"ndi.database.metadata_app.class.Strain"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Strain.m/#class-ndidatabasemetadata_appclassstrain","text":"STRAIN Summary of this class goes here Detailed explanation goes here","title":"CLASS ndi.database.metadata_app.class.Strain"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Strain.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Strain.m/#properties","text":"Property Description Name","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Strain.m/#methods","text":"Method Description Strain STRAIN Summary of this class goes here addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. fromStruct ndi.database.metadata_app.class.Strain.fromStruct is a function. ge >= (GE) Greater than or equal relation for handles. getProperty ndi.database.metadata_app.class.Strain/getProperty is a function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. toString ndi.database.metadata_app.class.Strain/toString is a function. toStruct ndi.database.metadata_app.class.Strain/toStruct is a function. updateProperty ndi.database.metadata_app.class.Strain/updateProperty is a function.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Strain.m/#methods-help","text":"Strain - STRAIN Summary of this class goes here Detailed explanation goes here Documentation for ndi.database.metadata_app.class.Strain/Strain doc ndi.database.metadata_app.class.Strain addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.strain, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Strain/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/ISVALID, CLEAR Help for ndi.database.metadata_app.class.Strain/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/NE Help for ndi.database.metadata_app.class.Strain/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.STRAIN Help for ndi.database.metadata_app.class.Strain/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.strain, ndi.database.metadata_app.class.strain/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.Strain/findprop is inherited from superclass handle fromStruct - ndi.database.metadata_app.class.Strain.fromStruct is a function. obj = ndi.database.metadata_app.class.Strain.fromStruct(s) ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/EQ, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/NE Help for ndi.database.metadata_app.class.Strain/ge is inherited from superclass handle getProperty - ndi.database.metadata_app.class.Strain/getProperty is a function. property = getProperty(obj, name) gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/EQ, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/NE Help for ndi.database.metadata_app.class.Strain/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/DELETE Help for ndi.database.metadata_app.class.Strain/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/EQ, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/NE Help for ndi.database.metadata_app.class.Strain/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.strain, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Strain/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/EQ, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/NE Help for ndi.database.metadata_app.class.Strain/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/EQ, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LT Help for ndi.database.metadata_app.class.Strain/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.Strain/notify is inherited from superclass handle toString - ndi.database.metadata_app.class.Strain/toString is a function. str = toString(obj) toStruct - ndi.database.metadata_app.class.Strain/toStruct is a function. s = toStruct(obj) updateProperty - ndi.database.metadata_app.class.Strain/updateProperty is a function. updateProperty(obj, name, value)","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Subject.m/","text":"CLASS ndi.database.metadata_app.class.Subject SUBJECT Summary of this class goes here Detailed explanation goes here Superclasses handle Properties Property Description SubjectName BiologicalSexList SpeciesList StrainList StrainMap sessionIdentifier Methods Method Description Subject SUBJECT Summary of this class goes here addItem ndi.database.metadata_app.class.Subject/addItem is a function. addStrain ndi.database.metadata_app.class.Subject/addStrain is a function. addlistener addlistener Add listener for event. biologicalSexToString ndi.database.metadata_app.class.Subject/biologicalSexToString is a function. delete DELETE Delete a handle object. deleteBiologicalSex ndi.database.metadata_app.class.Subject/deleteBiologicalSex is a function. deleteItem ndi.database.metadata_app.class.Subject/deleteItem is a function. deleteSpeciesList ndi.database.metadata_app.class.Subject/deleteSpeciesList is a function. deleteStrainList ndi.database.metadata_app.class.Subject/deleteStrainList is a function. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. formatTable ndi.database.metadata_app.class.Subject/formatTable is a function. fromStruct ndi.database.metadata_app.class.Subject.fromStruct is a function. ge >= (GE) Greater than or equal relation for handles. getSpeciesList ndi.database.metadata_app.class.Subject/getSpeciesList is a function. gt > (GT) Greater than relation for handles. isEqual ndi.database.metadata_app.class.Subject/isEqual is a function. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. loadobj Customize load process for objects lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. padList Helper function to pad a list with a placeholder to match the target length sortSpeciesList ndi.database.metadata_app.class.Subject/sortSpeciesList is a function. toStringArr ndi.database.metadata_app.class.Subject/toStringArr is a function. toStruct ndi.database.metadata_app.class.Subject/toStruct is a function. updateProperty ndi.database.metadata_app.class.Subject/updateProperty is a function. Methods help Subject - SUBJECT Summary of this class goes here Detailed explanation goes here Documentation for ndi.database.metadata_app.class.Subject/Subject doc ndi.database.metadata_app.class.Subject addItem - ndi.database.metadata_app.class.Subject/addItem is a function. addItem(obj, name, value) addStrain - ndi.database.metadata_app.class.Subject/addStrain is a function. addStrain(obj, strainName) addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.subject, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Subject/addlistener is inherited from superclass handle biologicalSexToString - ndi.database.metadata_app.class.Subject/biologicalSexToString is a function. str = biologicalSexToString(obj) delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/ISVALID, CLEAR Help for ndi.database.metadata_app.class.Subject/delete is inherited from superclass handle deleteBiologicalSex - ndi.database.metadata_app.class.Subject/deleteBiologicalSex is a function. deleteBiologicalSex(obj) deleteItem - ndi.database.metadata_app.class.Subject/deleteItem is a function. deleteItem(obj, name) deleteSpeciesList - ndi.database.metadata_app.class.Subject/deleteSpeciesList is a function. deleteSpeciesList(obj) deleteStrainList - ndi.database.metadata_app.class.Subject/deleteStrainList is a function. deleteStrainList(obj) eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/NE Help for ndi.database.metadata_app.class.Subject/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT Help for ndi.database.metadata_app.class.Subject/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.subject, ndi.database.metadata_app.class.subject/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.Subject/findprop is inherited from superclass handle formatTable - ndi.database.metadata_app.class.Subject/formatTable is a function. formattedStruct = formatTable(obj) fromStruct - ndi.database.metadata_app.class.Subject.fromStruct is a function. obj = ndi.database.metadata_app.class.Subject.fromStruct(s) ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/NE Help for ndi.database.metadata_app.class.Subject/ge is inherited from superclass handle getSpeciesList - ndi.database.metadata_app.class.Subject/getSpeciesList is a function. speciesList = getSpeciesList(obj) gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/NE Help for ndi.database.metadata_app.class.Subject/gt is inherited from superclass handle isEqual - ndi.database.metadata_app.class.Subject/isEqual is a function. equal = isEqual(obj, subject) isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/DELETE Help for ndi.database.metadata_app.class.Subject/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/NE Help for ndi.database.metadata_app.class.Subject/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.subject, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Subject/listener is inherited from superclass handle loadobj - Customize load process for objects This MATLAB function deserializes an object represented by a. Syntax b = loadobj(a) Input Arguments a - Content to be deserialized object | structure Output Arguments b - Object passed to load function object Examples web /Applications/MATLAB_R2024b.app/help/matlab/ref/loadobj.html#mw_a49e89ac-ff4a-41ec-91bc-9f53cc933896 See also load, save, saveobj Introduced in MATLAB before R2006a Documentation for loadobj doc loadobj lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/NE Help for ndi.database.metadata_app.class.Subject/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LT Help for ndi.database.metadata_app.class.Subject/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.Subject/notify is inherited from superclass handle padList - Helper function to pad a list with a placeholder to match the target length sortSpeciesList - ndi.database.metadata_app.class.Subject/sortSpeciesList is a function. sortedSpeciesList = sortSpeciesList(obj) toStringArr - ndi.database.metadata_app.class.Subject/toStringArr is a function. str = toStringArr(obj, name) toStruct - ndi.database.metadata_app.class.Subject/toStruct is a function. s = toStruct(obj) updateProperty - ndi.database.metadata_app.class.Subject/updateProperty is a function. updateProperty(obj, name, idx, value)","title":"ndi.database.metadata_app.class.Subject"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Subject.m/#class-ndidatabasemetadata_appclasssubject","text":"SUBJECT Summary of this class goes here Detailed explanation goes here","title":"CLASS ndi.database.metadata_app.class.Subject"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Subject.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Subject.m/#properties","text":"Property Description SubjectName BiologicalSexList SpeciesList StrainList StrainMap sessionIdentifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Subject.m/#methods","text":"Method Description Subject SUBJECT Summary of this class goes here addItem ndi.database.metadata_app.class.Subject/addItem is a function. addStrain ndi.database.metadata_app.class.Subject/addStrain is a function. addlistener addlistener Add listener for event. biologicalSexToString ndi.database.metadata_app.class.Subject/biologicalSexToString is a function. delete DELETE Delete a handle object. deleteBiologicalSex ndi.database.metadata_app.class.Subject/deleteBiologicalSex is a function. deleteItem ndi.database.metadata_app.class.Subject/deleteItem is a function. deleteSpeciesList ndi.database.metadata_app.class.Subject/deleteSpeciesList is a function. deleteStrainList ndi.database.metadata_app.class.Subject/deleteStrainList is a function. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. formatTable ndi.database.metadata_app.class.Subject/formatTable is a function. fromStruct ndi.database.metadata_app.class.Subject.fromStruct is a function. ge >= (GE) Greater than or equal relation for handles. getSpeciesList ndi.database.metadata_app.class.Subject/getSpeciesList is a function. gt > (GT) Greater than relation for handles. isEqual ndi.database.metadata_app.class.Subject/isEqual is a function. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. loadobj Customize load process for objects lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. padList Helper function to pad a list with a placeholder to match the target length sortSpeciesList ndi.database.metadata_app.class.Subject/sortSpeciesList is a function. toStringArr ndi.database.metadata_app.class.Subject/toStringArr is a function. toStruct ndi.database.metadata_app.class.Subject/toStruct is a function. updateProperty ndi.database.metadata_app.class.Subject/updateProperty is a function.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Subject.m/#methods-help","text":"Subject - SUBJECT Summary of this class goes here Detailed explanation goes here Documentation for ndi.database.metadata_app.class.Subject/Subject doc ndi.database.metadata_app.class.Subject addItem - ndi.database.metadata_app.class.Subject/addItem is a function. addItem(obj, name, value) addStrain - ndi.database.metadata_app.class.Subject/addStrain is a function. addStrain(obj, strainName) addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.subject, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Subject/addlistener is inherited from superclass handle biologicalSexToString - ndi.database.metadata_app.class.Subject/biologicalSexToString is a function. str = biologicalSexToString(obj) delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/ISVALID, CLEAR Help for ndi.database.metadata_app.class.Subject/delete is inherited from superclass handle deleteBiologicalSex - ndi.database.metadata_app.class.Subject/deleteBiologicalSex is a function. deleteBiologicalSex(obj) deleteItem - ndi.database.metadata_app.class.Subject/deleteItem is a function. deleteItem(obj, name) deleteSpeciesList - ndi.database.metadata_app.class.Subject/deleteSpeciesList is a function. deleteSpeciesList(obj) deleteStrainList - ndi.database.metadata_app.class.Subject/deleteStrainList is a function. deleteStrainList(obj) eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/NE Help for ndi.database.metadata_app.class.Subject/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT Help for ndi.database.metadata_app.class.Subject/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.subject, ndi.database.metadata_app.class.subject/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.Subject/findprop is inherited from superclass handle formatTable - ndi.database.metadata_app.class.Subject/formatTable is a function. formattedStruct = formatTable(obj) fromStruct - ndi.database.metadata_app.class.Subject.fromStruct is a function. obj = ndi.database.metadata_app.class.Subject.fromStruct(s) ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/NE Help for ndi.database.metadata_app.class.Subject/ge is inherited from superclass handle getSpeciesList - ndi.database.metadata_app.class.Subject/getSpeciesList is a function. speciesList = getSpeciesList(obj) gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/NE Help for ndi.database.metadata_app.class.Subject/gt is inherited from superclass handle isEqual - ndi.database.metadata_app.class.Subject/isEqual is a function. equal = isEqual(obj, subject) isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/DELETE Help for ndi.database.metadata_app.class.Subject/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/NE Help for ndi.database.metadata_app.class.Subject/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.subject, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.Subject/listener is inherited from superclass handle loadobj - Customize load process for objects This MATLAB function deserializes an object represented by a. Syntax b = loadobj(a) Input Arguments a - Content to be deserialized object | structure Output Arguments b - Object passed to load function object Examples web /Applications/MATLAB_R2024b.app/help/matlab/ref/loadobj.html#mw_a49e89ac-ff4a-41ec-91bc-9f53cc933896 See also load, save, saveobj Introduced in MATLAB before R2006a Documentation for loadobj doc loadobj lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/NE Help for ndi.database.metadata_app.class.Subject/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LT Help for ndi.database.metadata_app.class.Subject/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.Subject/notify is inherited from superclass handle padList - Helper function to pad a list with a placeholder to match the target length sortSpeciesList - ndi.database.metadata_app.class.Subject/sortSpeciesList is a function. sortedSpeciesList = sortSpeciesList(obj) toStringArr - ndi.database.metadata_app.class.Subject/toStringArr is a function. str = toStringArr(obj, name) toStruct - ndi.database.metadata_app.class.Subject/toStruct is a function. s = toStruct(obj) updateProperty - ndi.database.metadata_app.class.Subject/updateProperty is a function. updateProperty(obj, name, idx, value)","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SubjectData.m/","text":"CLASS ndi.database.metadata_app.class.SubjectData SubjectData A utility class for storing and retrieving information about subjecs. Superclasses handle Properties Property Description SubjectList Methods Method Description SpeciesSelected ndi.database.metadata_app.class.SubjectData/SpeciesSelected is a function. SubjectData SubjectData A utility class for storing and retrieving information about subjecs. addItem addItem Add a subject to the list. addlistener addlistener Add listener for event. assignName ndi.database.metadata_app.class.SubjectData/assignName is a function. biologicalSexSelected ndi.database.metadata_app.class.SubjectData/biologicalSexSelected is a function. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. formatTable ndi.database.metadata_app.class.SubjectData/formatTable is a function. ge >= (GE) Greater than or equal relation for handles. getIndex ndi.database.metadata_app.class.SubjectData/getIndex is a function. getItem getItem Get a struct with subject details for the given index getSubjectList ndi.database.metadata_app.class.SubjectData/getSubjectList is a function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. removeItem removeItem Remove the specified subject form the list. setSubjectList ndi.database.metadata_app.class.SubjectData/setSubjectList is a function. Methods help SpeciesSelected - ndi.database.metadata_app.class.SubjectData/SpeciesSelected is a function. selected = SpeciesSelected(obj, subjectName) SubjectData - SubjectData A utility class for storing and retrieving information about subjecs. Documentation for ndi.database.metadata_app.class.SubjectData/SubjectData doc ndi.database.metadata_app.class.SubjectData addItem - addItem Add a subject to the list. Usage: newSubject = subjectData.addItem(subjectIndex) adds a subject to the end of the list. addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.subjectdata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.SubjectData/addlistener is inherited from superclass handle assignName - ndi.database.metadata_app.class.SubjectData/assignName is a function. assignName(obj) biologicalSexSelected - ndi.database.metadata_app.class.SubjectData/biologicalSexSelected is a function. selected = biologicalSexSelected(obj, subjectName) delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/ISVALID, CLEAR Help for ndi.database.metadata_app.class.SubjectData/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/NE Help for ndi.database.metadata_app.class.SubjectData/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA Help for ndi.database.metadata_app.class.SubjectData/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.subjectdata, ndi.database.metadata_app.class.subjectdata/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.SubjectData/findprop is inherited from superclass handle formatTable - ndi.database.metadata_app.class.SubjectData/formatTable is a function. data = formatTable(obj) ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/NE Help for ndi.database.metadata_app.class.SubjectData/ge is inherited from superclass handle getIndex - ndi.database.metadata_app.class.SubjectData/getIndex is a function. idx = getIndex(obj, subjectName) getItem - getItem Get a struct with subject details for the given index getSubjectList - ndi.database.metadata_app.class.SubjectData/getSubjectList is a function. S = getSubjectList(obj) gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/NE Help for ndi.database.metadata_app.class.SubjectData/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/DELETE Help for ndi.database.metadata_app.class.SubjectData/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/NE Help for ndi.database.metadata_app.class.SubjectData/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.subjectdata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.SubjectData/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/NE Help for ndi.database.metadata_app.class.SubjectData/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LT Help for ndi.database.metadata_app.class.SubjectData/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.SubjectData/notify is inherited from superclass handle removeItem - removeItem Remove the specified subject form the list. Usage: subjectData.removeItem(subjectIndex) removes the author from the list where subjectIndex is the index in the struct. setSubjectList - ndi.database.metadata_app.class.SubjectData/setSubjectList is a function. setSubjectList(obj, S)","title":"ndi.database.metadata_app.class.SubjectData"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SubjectData.m/#class-ndidatabasemetadata_appclasssubjectdata","text":"SubjectData A utility class for storing and retrieving information about subjecs.","title":"CLASS ndi.database.metadata_app.class.SubjectData"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SubjectData.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SubjectData.m/#properties","text":"Property Description SubjectList","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SubjectData.m/#methods","text":"Method Description SpeciesSelected ndi.database.metadata_app.class.SubjectData/SpeciesSelected is a function. SubjectData SubjectData A utility class for storing and retrieving information about subjecs. addItem addItem Add a subject to the list. addlistener addlistener Add listener for event. assignName ndi.database.metadata_app.class.SubjectData/assignName is a function. biologicalSexSelected ndi.database.metadata_app.class.SubjectData/biologicalSexSelected is a function. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. formatTable ndi.database.metadata_app.class.SubjectData/formatTable is a function. ge >= (GE) Greater than or equal relation for handles. getIndex ndi.database.metadata_app.class.SubjectData/getIndex is a function. getItem getItem Get a struct with subject details for the given index getSubjectList ndi.database.metadata_app.class.SubjectData/getSubjectList is a function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. removeItem removeItem Remove the specified subject form the list. setSubjectList ndi.database.metadata_app.class.SubjectData/setSubjectList is a function.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SubjectData.m/#methods-help","text":"SpeciesSelected - ndi.database.metadata_app.class.SubjectData/SpeciesSelected is a function. selected = SpeciesSelected(obj, subjectName) SubjectData - SubjectData A utility class for storing and retrieving information about subjecs. Documentation for ndi.database.metadata_app.class.SubjectData/SubjectData doc ndi.database.metadata_app.class.SubjectData addItem - addItem Add a subject to the list. Usage: newSubject = subjectData.addItem(subjectIndex) adds a subject to the end of the list. addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.database.metadata_app.class.subjectdata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.SubjectData/addlistener is inherited from superclass handle assignName - ndi.database.metadata_app.class.SubjectData/assignName is a function. assignName(obj) biologicalSexSelected - ndi.database.metadata_app.class.SubjectData/biologicalSexSelected is a function. selected = biologicalSexSelected(obj, subjectName) delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/ISVALID, CLEAR Help for ndi.database.metadata_app.class.SubjectData/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/NE Help for ndi.database.metadata_app.class.SubjectData/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA Help for ndi.database.metadata_app.class.SubjectData/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.database.metadata_app.class.subjectdata, ndi.database.metadata_app.class.subjectdata/findobj, dynamicprops, matlab.metadata.Property Help for ndi.database.metadata_app.class.SubjectData/findprop is inherited from superclass handle formatTable - ndi.database.metadata_app.class.SubjectData/formatTable is a function. data = formatTable(obj) ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/NE Help for ndi.database.metadata_app.class.SubjectData/ge is inherited from superclass handle getIndex - ndi.database.metadata_app.class.SubjectData/getIndex is a function. idx = getIndex(obj, subjectName) getItem - getItem Get a struct with subject details for the given index getSubjectList - ndi.database.metadata_app.class.SubjectData/getSubjectList is a function. S = getSubjectList(obj) gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/NE Help for ndi.database.metadata_app.class.SubjectData/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/DELETE Help for ndi.database.metadata_app.class.SubjectData/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/NE Help for ndi.database.metadata_app.class.SubjectData/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.database.metadata_app.class.subjectdata, matlab.metadata.Property, events Help for ndi.database.metadata_app.class.SubjectData/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/NE Help for ndi.database.metadata_app.class.SubjectData/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LT Help for ndi.database.metadata_app.class.SubjectData/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.database.metadata_app.class.SubjectData/notify is inherited from superclass handle removeItem - removeItem Remove the specified subject form the list. Usage: subjectData.removeItem(subjectIndex) removes the author from the list where subjectIndex is the index in the struct. setSubjectList - ndi.database.metadata_app.class.SubjectData/setSubjectList is a function. setSubjectList(obj, S)","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/test.m/","text":"ndi.database.metadata_app.class.test ndi.database.metadata_app.class.test is a script.","title":"ndi.database.metadata_app.class.test"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/test.m/#ndidatabasemetadata_appclasstest","text":"ndi.database.metadata_app.class.test is a script.","title":"ndi.database.metadata_app.class.test"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/SearchSpecies.m/","text":"ndi.database.metadata_app.fun.SearchSpecies ndi.database.metadata_app.fun.SearchSpecies is a function. [species, uuid] = ndi.database.metadata_app.fun.SearchSpecies(term)","title":"ndi.database.metadata_app.fun.SearchSpecies"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/SearchSpecies.m/#ndidatabasemetadata_appfunsearchspecies","text":"ndi.database.metadata_app.fun.SearchSpecies is a function. [species, uuid] = ndi.database.metadata_app.fun.SearchSpecies(term)","title":"ndi.database.metadata_app.fun.SearchSpecies"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/add_to_database.m/","text":"ndi.database.metadata_app.fun.add_to_database ADD_TO_DATABASE - add a list of documents to the database S = ndi.database.metadata_app..fun.ADD_TO_DATABASE(S, DOCUMENTLIST) Inputs: S - the ndi.session.dir object or ndi.dataset.dir object DOCUMENTLIST - a cell array of ndi.document objects Outputs: S - the ndi.session.dir object or ndi.dataset.dir object","title":"ndi.database.metadata_app.fun.add_to_database"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/add_to_database.m/#ndidatabasemetadata_appfunadd_to_database","text":"ADD_TO_DATABASE - add a list of documents to the database S = ndi.database.metadata_app..fun.ADD_TO_DATABASE(S, DOCUMENTLIST) Inputs: S - the ndi.session.dir object or ndi.dataset.dir object DOCUMENTLIST - a cell array of ndi.document objects Outputs: S - the ndi.session.dir object or ndi.dataset.dir object","title":"ndi.database.metadata_app.fun.add_to_database"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/checkValidRORID.m/","text":"ndi.database.metadata_app.fun.checkValidRORID ndi.database.metadata_app.fun.checkValidRORID is a function. [name, formattedID] = ndi.database.metadata_app.fun.checkValidRORID(rorid)","title":"ndi.database.metadata_app.fun.checkValidRORID"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/checkValidRORID.m/#ndidatabasemetadata_appfuncheckvalidrorid","text":"ndi.database.metadata_app.fun.checkValidRORID is a function. [name, formattedID] = ndi.database.metadata_app.fun.checkValidRORID(rorid)","title":"ndi.database.metadata_app.fun.checkValidRORID"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/expandDropDownItems.m/","text":"ndi.database.metadata_app.fun.expandDropDownItems expandDropDownItems Expands a dropdown list by adding default and new options. [items, itemsData] = expandDropDownItems(items, itemsData, schemaName) takes an existing cell array of dropdown items (items) and their corresponding data (itemsData), and expands it by adding default options. The default options include selecting an existing item and creating a new item with a specified schema name. Input Arguments: - items: Existing cell array of dropdown items. - itemsData: Corresponding data for each item in items. - schemaName: Name of the schema for new items. Output Arguments: - items: Updated cell array with added default options. - itemsData: Updated data array with corresponding default values.","title":"ndi.database.metadata_app.fun.expandDropDownItems"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/expandDropDownItems.m/#ndidatabasemetadata_appfunexpanddropdownitems","text":"expandDropDownItems Expands a dropdown list by adding default and new options. [items, itemsData] = expandDropDownItems(items, itemsData, schemaName) takes an existing cell array of dropdown items (items) and their corresponding data (itemsData), and expands it by adding default options. The default options include selecting an existing item and creating a new item with a specified schema name. Input Arguments: - items: Existing cell array of dropdown items. - itemsData: Corresponding data for each item in items. - schemaName: Name of the schema for new items. Output Arguments: - items: Updated cell array with added default options. - itemsData: Updated data array with corresponding default values.","title":"ndi.database.metadata_app.fun.expandDropDownItems"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/generateShortName.m/","text":"ndi.database.metadata_app.fun.generateShortName ndi.database.metadata_app.fun.generateShortName is a function. shortName = ndi.database.metadata_app.fun.generateShortName(fullName, length)","title":"ndi.database.metadata_app.fun.generateShortName"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/generateShortName.m/#ndidatabasemetadata_appfungenerateshortname","text":"ndi.database.metadata_app.fun.generateShortName is a function. shortName = ndi.database.metadata_app.fun.generateShortName(fullName, length)","title":"ndi.database.metadata_app.fun.generateShortName"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getCCByLicences.m/","text":"ndi.database.metadata_app.fun.getCCByLicences getCCByLicences - Get names and short names for CC BY licences from openMINDS Syntax [names, shortNames] = ndi.database.metadata_app.fun.getCCByLicences()","title":"ndi.database.metadata_app.fun.getCCByLicences"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getCCByLicences.m/#ndidatabasemetadata_appfungetccbylicences","text":"getCCByLicences - Get names and short names for CC BY licences from openMINDS Syntax [names, shortNames] = ndi.database.metadata_app.fun.getCCByLicences()","title":"ndi.database.metadata_app.fun.getCCByLicences"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getOpenMindsInstances.m/","text":"ndi.database.metadata_app.fun.getOpenMindsInstances getOpenMindsInstances - Get names and short names for controlled term instances from openMINDS Syntax [names, labels] = ndi.database.metadata_app.fun.getOpenMindsInstances(schemaName) Output arguments names : String array of openMINDS names. Names correspond with instance names of openMINDS instances (not the name property) labels : String array of corresponding labels. Labels correspond with the name property of the instances.","title":"ndi.database.metadata_app.fun.getOpenMindsInstances"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getOpenMindsInstances.m/#ndidatabasemetadata_appfungetopenmindsinstances","text":"getOpenMindsInstances - Get names and short names for controlled term instances from openMINDS Syntax [names, labels] = ndi.database.metadata_app.fun.getOpenMindsInstances(schemaName) Output arguments names : String array of openMINDS names. Names correspond with instance names of openMINDS instances (not the name property) labels : String array of corresponding labels. Labels correspond with the name property of the instances.","title":"ndi.database.metadata_app.fun.getOpenMindsInstances"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getOpenmindsInstanceFile.m/","text":"ndi.database.metadata_app.fun.getOpenmindsInstanceFile Todo: Return a folder where to save openminds jsons. Right now, instances are saved as structs to a matfile.","title":"ndi.database.metadata_app.fun.getOpenmindsInstanceFile"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getOpenmindsInstanceFile.m/#ndidatabasemetadata_appfungetopenmindsinstancefile","text":"Todo: Return a folder where to save openminds jsons. Right now, instances are saved as structs to a matfile.","title":"ndi.database.metadata_app.fun.getOpenmindsInstanceFile"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getOrcId.m/","text":"ndi.database.metadata_app.fun.getOrcId name = 'stephen van hooser';","title":"ndi.database.metadata_app.fun.getOrcId"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getOrcId.m/#ndidatabasemetadata_appfungetorcid","text":"name = 'stephen van hooser';","title":"ndi.database.metadata_app.fun.getOrcId"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getOrcIdSearchUrl.m/","text":"ndi.database.metadata_app.fun.getOrcIdSearchUrl ndi.database.metadata_app.fun.getOrcIdSearchUrl is a function. apiQueryUrl = ndi.database.metadata_app.fun.getOrcIdSearchUrl(name)","title":"ndi.database.metadata_app.fun.getOrcIdSearchUrl"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getOrcIdSearchUrl.m/#ndidatabasemetadata_appfungetorcidsearchurl","text":"ndi.database.metadata_app.fun.getOrcIdSearchUrl is a function. apiQueryUrl = ndi.database.metadata_app.fun.getOrcIdSearchUrl(name)","title":"ndi.database.metadata_app.fun.getOrcIdSearchUrl"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getPublicationTitleFromDoi.m/","text":"ndi.database.metadata_app.fun.getPublicationTitleFromDoi ndi.database.metadata_app.fun.getPublicationTitleFromDoi is a function. [publicationTitle, doi] = ndi.database.metadata_app.fun.getPublicationTitleFromDoi(doi)","title":"ndi.database.metadata_app.fun.getPublicationTitleFromDoi"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getPublicationTitleFromDoi.m/#ndidatabasemetadata_appfungetpublicationtitlefromdoi","text":"ndi.database.metadata_app.fun.getPublicationTitleFromDoi is a function. [publicationTitle, doi] = ndi.database.metadata_app.fun.getPublicationTitleFromDoi(doi)","title":"ndi.database.metadata_app.fun.getPublicationTitleFromDoi"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getPubmedIdFromDoi.m/","text":"ndi.database.metadata_app.fun.getPubmedIdFromDoi ndi.database.metadata_app.fun.getPubmedIdFromDoi is a function. [pmId, pmcId] = ndi.database.metadata_app.fun.getPubmedIdFromDoi(doi)","title":"ndi.database.metadata_app.fun.getPubmedIdFromDoi"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getPubmedIdFromDoi.m/#ndidatabasemetadata_appfungetpubmedidfromdoi","text":"ndi.database.metadata_app.fun.getPubmedIdFromDoi is a function. [pmId, pmcId] = ndi.database.metadata_app.fun.getPubmedIdFromDoi(doi)","title":"ndi.database.metadata_app.fun.getPubmedIdFromDoi"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getRequiredFields.m/","text":"ndi.database.metadata_app.fun.getRequiredFields ndi.database.metadata_app.fun.getRequiredFields is a function. S = ndi.database.metadata_app.fun.getRequiredFields","title":"ndi.database.metadata_app.fun.getRequiredFields"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getRequiredFields.m/#ndidatabasemetadata_appfungetrequiredfields","text":"ndi.database.metadata_app.fun.getRequiredFields is a function. S = ndi.database.metadata_app.fun.getRequiredFields","title":"ndi.database.metadata_app.fun.getRequiredFields"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getRorId.m/","text":"ndi.database.metadata_app.fun.getRorId ndi.database.metadata_app.fun.getRorId is a function. rorid = ndi.database.metadata_app.fun.getRorId(name)","title":"ndi.database.metadata_app.fun.getRorId"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getRorId.m/#ndidatabasemetadata_appfungetrorid","text":"ndi.database.metadata_app.fun.getRorId is a function. rorid = ndi.database.metadata_app.fun.getRorId(name)","title":"ndi.database.metadata_app.fun.getRorId"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getRorIdSearchUrl.m/","text":"ndi.database.metadata_app.fun.getRorIdSearchUrl ndi.database.metadata_app.fun.getRorIdSearchUrl is a function. apiQueryUrl = ndi.database.metadata_app.fun.getRorIdSearchUrl(name)","title":"ndi.database.metadata_app.fun.getRorIdSearchUrl"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getRorIdSearchUrl.m/#ndidatabasemetadata_appfungetroridsearchurl","text":"ndi.database.metadata_app.fun.getRorIdSearchUrl is a function. apiQueryUrl = ndi.database.metadata_app.fun.getRorIdSearchUrl(name)","title":"ndi.database.metadata_app.fun.getRorIdSearchUrl"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getSpeciesInfo.m/","text":"ndi.database.metadata_app.fun.getSpeciesInfo ndi.database.metadata_app.fun.getSpeciesInfo is a function. [name, ontology_identifier, synonym] = ndi.database.metadata_app.fun.getSpeciesInfo(uuid)","title":"ndi.database.metadata_app.fun.getSpeciesInfo"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getSpeciesInfo.m/#ndidatabasemetadata_appfungetspeciesinfo","text":"ndi.database.metadata_app.fun.getSpeciesInfo is a function. [name, ontology_identifier, synonym] = ndi.database.metadata_app.fun.getSpeciesInfo(uuid)","title":"ndi.database.metadata_app.fun.getSpeciesInfo"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadExperimentalApproach.m/","text":"ndi.database.metadata_app.fun.loadExperimentalApproach loadExperimentalApproach loads the experimental approach and returns it as a checkList nodes. Output: cbt - checkList nodes containing the experimental approach","title":"ndi.database.metadata_app.fun.loadExperimentalApproach"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadExperimentalApproach.m/#ndidatabasemetadata_appfunloadexperimentalapproach","text":"loadExperimentalApproach loads the experimental approach and returns it as a checkList nodes. Output: cbt - checkList nodes containing the experimental approach","title":"ndi.database.metadata_app.fun.loadExperimentalApproach"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadInstancesToListBox.m/","text":"ndi.database.metadata_app.fun.loadInstancesToListBox loadInstancesToListBox Load the instances of a controlled term into a list box Inputs listBox: The list box to load the instances into name: A string representing the name of the openminds controlledterms to load terms: The term to be filtered","title":"ndi.database.metadata_app.fun.loadInstancesToListBox"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadInstancesToListBox.m/#ndidatabasemetadata_appfunloadinstancestolistbox","text":"loadInstancesToListBox Load the instances of a controlled term into a list box Inputs listBox: The list box to load the instances into name: A string representing the name of the openminds controlledterms to load terms: The term to be filtered","title":"ndi.database.metadata_app.fun.loadInstancesToListBox"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadInstancesToTreeCheckbox.m/","text":"ndi.database.metadata_app.fun.loadInstancesToTreeCheckbox loadInstancesToTreeCheckbox Load the instances of a controlled term into a tree checkbox Inputs tree: The tree to load the instances into name: A string representing the name of the openminds controlledterms to load","title":"ndi.database.metadata_app.fun.loadInstancesToTreeCheckbox"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadInstancesToTreeCheckbox.m/#ndidatabasemetadata_appfunloadinstancestotreecheckbox","text":"loadInstancesToTreeCheckbox Load the instances of a controlled term into a tree checkbox Inputs tree: The tree to load the instances into name: A string representing the name of the openminds controlledterms to load","title":"ndi.database.metadata_app.fun.loadInstancesToTreeCheckbox"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadOpenMindsInstanceCatalog.m/","text":"ndi.database.metadata_app.fun.loadOpenMindsInstanceCatalog loadOpenMindsInstanceCatalog - Get a catalog of controlled instances from openMINDS Syntax catalog = ndi.database.metadata_app.fun.loadOpenMindsInstanceCatalog(openMindsType) Input arguments openMindsType - Name of the openMINDS type, i.e \"Species\" Output arguments catalog - A catalog of openMINDS controlled instances.","title":"ndi.database.metadata_app.fun.loadOpenMindsInstanceCatalog"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadOpenMindsInstanceCatalog.m/#ndidatabasemetadata_appfunloadopenmindsinstancecatalog","text":"loadOpenMindsInstanceCatalog - Get a catalog of controlled instances from openMINDS Syntax catalog = ndi.database.metadata_app.fun.loadOpenMindsInstanceCatalog(openMindsType) Input arguments openMindsType - Name of the openMINDS type, i.e \"Species\" Output arguments catalog - A catalog of openMINDS controlled instances.","title":"ndi.database.metadata_app.fun.loadOpenMindsInstanceCatalog"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadProbes.m/","text":"ndi.database.metadata_app.fun.loadProbes LOADPROBES loads the probe data from ndi session ndi.database.metadat_app.fun.loadProbes(S) Inputs: S - ndi.session.dir object Output: PROBEDATA - a ndi.database.metadat_app.class.ProbeData object that contains all the probe data in session S","title":"ndi.database.metadata_app.fun.loadProbes"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadProbes.m/#ndidatabasemetadata_appfunloadprobes","text":"LOADPROBES loads the probe data from ndi session ndi.database.metadat_app.fun.loadProbes(S) Inputs: S - ndi.session.dir object Output: PROBEDATA - a ndi.database.metadat_app.class.ProbeData object that contains all the probe data in session S","title":"ndi.database.metadata_app.fun.loadProbes"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadSubjects.m/","text":"ndi.database.metadata_app.fun.loadSubjects LOADSUBJECTS loads the subject data from ndi session ndi.database.metadata_app.fun.loadSubjects(S) Inputs: S - ndi.session.dir object Output: SUBJECTDATA - a ndi.database.metadata_app.class.SubjectData object that contains all the subject data in session S","title":"ndi.database.metadata_app.fun.loadSubjects"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadSubjects.m/#ndidatabasemetadata_appfunloadsubjects","text":"LOADSUBJECTS loads the subject data from ndi session ndi.database.metadata_app.fun.loadSubjects(S) Inputs: S - ndi.session.dir object Output: SUBJECTDATA - a ndi.database.metadata_app.class.SubjectData object that contains all the subject data in session S","title":"ndi.database.metadata_app.fun.loadSubjects"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadTechniquesEmployed.m/","text":"ndi.database.metadata_app.fun.loadTechniquesEmployed loadTechniquesEmployed loads the techniques employed and returns it as a checkList nodes. Output: cbt - checkList nodes containing the TechniquesEmployed","title":"ndi.database.metadata_app.fun.loadTechniquesEmployed"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadTechniquesEmployed.m/#ndidatabasemetadata_appfunloadtechniquesemployed","text":"loadTechniquesEmployed loads the techniques employed and returns it as a checkList nodes. Output: cbt - checkList nodes containing the TechniquesEmployed","title":"ndi.database.metadata_app.fun.loadTechniquesEmployed"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadUnits.m/","text":"ndi.database.metadata_app.fun.loadUnits loadUnits loads the techniques from the given path and returns it as a checkList nodes. Output: cbt - checkList nodes containing the loadUnits","title":"ndi.database.metadata_app.fun.loadUnits"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadUnits.m/#ndidatabasemetadata_appfunloadunits","text":"loadUnits loads the techniques from the given path and returns it as a checkList nodes. Output: cbt - checkList nodes containing the loadUnits","title":"ndi.database.metadata_app.fun.loadUnits"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadUserInstanceCatalog.m/","text":"ndi.database.metadata_app.fun.loadUserInstanceCatalog loadUserInstanceCatalog - Load a catalog of user metadata instances","title":"ndi.database.metadata_app.fun.loadUserInstanceCatalog"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadUserInstanceCatalog.m/#ndidatabasemetadata_appfunloaduserinstancecatalog","text":"loadUserInstanceCatalog - Load a catalog of user metadata instances","title":"ndi.database.metadata_app.fun.loadUserInstanceCatalog"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadUserInstances.m/","text":"ndi.database.metadata_app.fun.loadUserInstances loadUserInstances - Load user instances of metadata based on openMINDS Syntax: instances = ndi.database.metadata_app.fun.loadUserInstances(name) Input arguments: name - A name describing what kind of instances to load. Output arguments: instances - A struct array of instances See also ndi.database.metadata_app.fun.saveUserInstances","title":"ndi.database.metadata_app.fun.loadUserInstances"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadUserInstances.m/#ndidatabasemetadata_appfunloaduserinstances","text":"loadUserInstances - Load user instances of metadata based on openMINDS Syntax: instances = ndi.database.metadata_app.fun.loadUserInstances(name) Input arguments: name - A name describing what kind of instances to load. Output arguments: instances - A struct array of instances See also ndi.database.metadata_app.fun.saveUserInstances","title":"ndi.database.metadata_app.fun.loadUserInstances"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/mustBeValidDate.m/","text":"ndi.database.metadata_app.fun.mustBeValidDate ndi.database.metadata_app.fun.mustBeValidDate is a function. ndi.database.metadata_app.fun.mustBeValidDate(value)","title":"ndi.database.metadata_app.fun.mustBeValidDate"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/mustBeValidDate.m/#ndidatabasemetadata_appfunmustbevaliddate","text":"ndi.database.metadata_app.fun.mustBeValidDate is a function. ndi.database.metadata_app.fun.mustBeValidDate(value)","title":"ndi.database.metadata_app.fun.mustBeValidDate"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/parseOpenMINDSAtID.m/","text":"ndi.database.metadata_app.fun.parseOpenMINDSAtID parseOpenMINDSAtID - Parse an openMINDS @id Syntax: S = parseOpenMINDSAtID(semanticName) [type, name] = parseOpenMINDSAtID(semanticName) Input: semanticName : A URI representing an openMINDS instance @id. Ex: https://openminds.ebrains.eu/instances/geneticStrainType/knockout Output: S : A struct with fields - Type - Name OR type : openMINDS type, i.e schema specification name : name of instance Example: atId = \"https://openminds.ebrains.eu/instances/geneticStrainType/knockout\" S = ndi.database.metadata_app.fun.parseOpenMINDSAtID(atId) S = struct with fields: Type: \"geneticStrainType\" Name: \"knockout\"","title":"ndi.database.metadata_app.fun.parseOpenMINDSAtID"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/parseOpenMINDSAtID.m/#ndidatabasemetadata_appfunparseopenmindsatid","text":"parseOpenMINDSAtID - Parse an openMINDS @id Syntax: S = parseOpenMINDSAtID(semanticName) [type, name] = parseOpenMINDSAtID(semanticName) Input: semanticName : A URI representing an openMINDS instance @id. Ex: https://openminds.ebrains.eu/instances/geneticStrainType/knockout Output: S : A struct with fields - Type - Name OR type : openMINDS type, i.e schema specification name : name of instance Example: atId = \"https://openminds.ebrains.eu/instances/geneticStrainType/knockout\" S = ndi.database.metadata_app.fun.parseOpenMINDSAtID(atId) S = struct with fields: Type: \"geneticStrainType\" Name: \"knockout\"","title":"ndi.database.metadata_app.fun.parseOpenMINDSAtID"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/readExistingMetadata.m/","text":"ndi.database.metadata_app.fun.readExistingMetadata READEXISTINGMETADATA - retrieves metadata from an existing dataset DATASETINFORMATION = ndi.database.fun.READEXISTINGMETADATA(D) Inputs: D - the ndi.dataset object Outputs: DATASETINFORMATION - the metadata structure","title":"ndi.database.metadata_app.fun.readExistingMetadata"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/readExistingMetadata.m/#ndidatabasemetadata_appfunreadexistingmetadata","text":"READEXISTINGMETADATA - retrieves metadata from an existing dataset DATASETINFORMATION = ndi.database.fun.READEXISTINGMETADATA(D) Inputs: D - the ndi.dataset object Outputs: DATASETINFORMATION - the metadata structure","title":"ndi.database.metadata_app.fun.readExistingMetadata"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/resolveRelatedPublication.m/","text":"ndi.database.metadata_app.fun.resolveRelatedPublication resolveRelatedPublication - Resolve publication information based on DOI. S = resolveRelatedPublication(doi) retrieves publication information such as title, PubMed ID, and PubMed Central ID using the provided DOI. Input: - doi (1x1 string): Digital Object Identifier for the publication. Output: - S (struct): Structure containing publication information. - S.doi: Original cleaned DOI. - S.title: Title of the publication. - S.pmid: PubMed ID of the publication. - S.pmcid: PubMed Central ID of the publication. Example: doi = '10.1523/ENEURO.0073-21.2022'; publicationInfo = ndi.database.metadata_app.fun.resolveRelatedPublication(doi);","title":"ndi.database.metadata_app.fun.resolveRelatedPublication"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/resolveRelatedPublication.m/#ndidatabasemetadata_appfunresolverelatedpublication","text":"resolveRelatedPublication - Resolve publication information based on DOI. S = resolveRelatedPublication(doi) retrieves publication information such as title, PubMed ID, and PubMed Central ID using the provided DOI. Input: - doi (1x1 string): Digital Object Identifier for the publication. Output: - S (struct): Structure containing publication information. - S.doi: Original cleaned DOI. - S.title: Title of the publication. - S.pmid: PubMed ID of the publication. - S.pmcid: PubMed Central ID of the publication. Example: doi = '10.1523/ENEURO.0073-21.2022'; publicationInfo = ndi.database.metadata_app.fun.resolveRelatedPublication(doi);","title":"ndi.database.metadata_app.fun.resolveRelatedPublication"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/saveUserInstances.m/","text":"ndi.database.metadata_app.fun.saveUserInstances saveUserInstances - Save user instances of metadata based on openMINDS Syntax: ndi.database.metadata_app.fun.saveUserInstances(name, instance) Input arguments: name - A name describing what kind of instances are saved. instances - A struct array of instances See also ndi.database.metadata_app.fun.loadUserInstances","title":"ndi.database.metadata_app.fun.saveUserInstances"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/saveUserInstances.m/#ndidatabasemetadata_appfunsaveuserinstances","text":"saveUserInstances - Save user instances of metadata based on openMINDS Syntax: ndi.database.metadata_app.fun.saveUserInstances(name, instance) Input arguments: name - A name describing what kind of instances are saved. instances - A struct array of instances See also ndi.database.metadata_app.fun.loadUserInstances","title":"ndi.database.metadata_app.fun.saveUserInstances"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/save_dataset_docs.m/","text":"ndi.database.metadata_app.fun.save_dataset_docs SAVE_DATASET_DOCS - save metadata from metadata editor as ndi.documents to dataset/session SAVE_DATASET_DOCS(S, TEST_NAME) inputs: S - ndi.session or ndi.dataset object session_id - the session id of the incoming session or dataset datasetInformation - metadata collected using the metadata app","title":"ndi.database.metadata_app.fun.save_dataset_docs"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/save_dataset_docs.m/#ndidatabasemetadata_appfunsave_dataset_docs","text":"SAVE_DATASET_DOCS - save metadata from metadata editor as ndi.documents to dataset/session SAVE_DATASET_DOCS(S, TEST_NAME) inputs: S - ndi.session or ndi.dataset object session_id - the session id of the incoming session or dataset datasetInformation - metadata collected using the metadata app","title":"ndi.database.metadata_app.fun.save_dataset_docs"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/submit_dataset.m/","text":"ndi.database.metadata_app.fun.submit_dataset SUBMIT_DATASET - upload a test dataset to the cloud [B, MSG, DATASET_ID] = ndi.database.metadata_app.fun.submit_dataset(S, TEST_NAME) inputs: S - ndi.session or ndi.dataset object session_id - the session id of the incoming session or dataset datasetInformation - metadata collected using the metadata app outputs: B - 1 if the upload was successful, 0 if not MSG - a message about the upload DATASET - the newly created dataset DATASET_ID - the dataset id of the uploaded dataset","title":"ndi.database.metadata_app.fun.submit_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/submit_dataset.m/#ndidatabasemetadata_appfunsubmit_dataset","text":"SUBMIT_DATASET - upload a test dataset to the cloud [B, MSG, DATASET_ID] = ndi.database.metadata_app.fun.submit_dataset(S, TEST_NAME) inputs: S - ndi.session or ndi.dataset object session_id - the session id of the incoming session or dataset datasetInformation - metadata collected using the metadata app outputs: B - 1 if the upload was successful, 0 if not MSG - a message about the upload DATASET - the newly created dataset DATASET_ID - the dataset id of the uploaded dataset","title":"ndi.database.metadata_app.fun.submit_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/Contents.m/","text":"ndi.database.metadata_ds_core.Contents ndi.database.metadata_ds_core is a namespace.","title":"ndi.database.metadata_ds_core.Contents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/Contents.m/#ndidatabasemetadata_ds_corecontents","text":"ndi.database.metadata_ds_core is a namespace.","title":"ndi.database.metadata_ds_core.Contents"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/check_metadata_cloud_inputs.m/","text":"ndi.database.metadata_ds_core.check_metadata_cloud_inputs CHECK_METADATA_CLOUD_INPUTS - check if the input is valid IS_VALID = ndi.cloud.fun.CHECK_METADATA_CLOUD_INPUTS(S) Inputs: S - a structure with fields 'DatasetFullName', 'DatasetShortName', 'Author' 'Funding', 'Description', 'License', 'Subjects' 'Author' is a structure with fields 'givenName', 'familyName', 'authorRole', 'digitalIdentifier' 'digitalIdentifier' is a structure with field 'identifier' 'Funding' is a structure with field 'funder' 'Subjects' is an instance from ndi.database.metadata_app.class.Subject class Outputs: IS_VALID - 1 if the input is valid, 0 otherwise","title":"ndi.database.metadata_ds_core.check_metadata_cloud_inputs"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/check_metadata_cloud_inputs.m/#ndidatabasemetadata_ds_corecheck_metadata_cloud_inputs","text":"CHECK_METADATA_CLOUD_INPUTS - check if the input is valid IS_VALID = ndi.cloud.fun.CHECK_METADATA_CLOUD_INPUTS(S) Inputs: S - a structure with fields 'DatasetFullName', 'DatasetShortName', 'Author' 'Funding', 'Description', 'License', 'Subjects' 'Author' is a structure with fields 'givenName', 'familyName', 'authorRole', 'digitalIdentifier' 'digitalIdentifier' is a structure with field 'identifier' 'Funding' is a structure with field 'funder' 'Subjects' is an instance from ndi.database.metadata_app.class.Subject class Outputs: IS_VALID - 1 if the input is valid, 0 otherwise","title":"ndi.database.metadata_ds_core.check_metadata_cloud_inputs"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/check_metadata_inputs.m/","text":"ndi.database.metadata_ds_core.check_metadata_inputs CHECK_METADATA_INPUTS Summary of this function goes here Detailed explanation goes here","title":"ndi.database.metadata_ds_core.check_metadata_inputs"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/check_metadata_inputs.m/#ndidatabasemetadata_ds_corecheck_metadata_inputs","text":"CHECK_METADATA_INPUTS Summary of this function goes here Detailed explanation goes here","title":"ndi.database.metadata_ds_core.check_metadata_inputs"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/convertDatasetInfoToDocument.m/","text":"ndi.database.metadata_ds_core.convertDatasetInfoToDocument CONVERTDATASETINFOTODOCUMENT function to convert datasetInfo to NDI document DOCUMENT = ndi.database.metadata_app.fun.CONVERTDATASETINFOTODOCUMENT(DATASETINFO) Inputs: DATASETINFO - struct containing the dataset information Outputs: DOCUMENT - struct containing the dataset information","title":"ndi.database.metadata_ds_core.convertDatasetInfoToDocument"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/convertDatasetInfoToDocument.m/#ndidatabasemetadata_ds_coreconvertdatasetinfotodocument","text":"CONVERTDATASETINFOTODOCUMENT function to convert datasetInfo to NDI document DOCUMENT = ndi.database.metadata_app.fun.CONVERTDATASETINFOTODOCUMENT(DATASETINFO) Inputs: DATASETINFO - struct containing the dataset information Outputs: DOCUMENT - struct containing the dataset information","title":"ndi.database.metadata_ds_core.convertDatasetInfoToDocument"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/convertDocumentToDatasetInfo.m/","text":"ndi.database.metadata_ds_core.convertDocumentToDatasetInfo CONVERTDOCUMENTTODATASETINFO function to convert NDI document to datasetInfo DATASETINFO = ndi.database.metadata_app.fun.CONVERTDOCUMENTTODATASETINFO(DOCUMENT) Inputs: DOCUMENT - struct containing the saved dataset information for our app Note that this is not a set of saved metadata objects in the dataset, but just the saved structure data from the MetaDataEditorApp Outputs: DATASETINFO - struct containing the dataset information","title":"ndi.database.metadata_ds_core.convertDocumentToDatasetInfo"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/convertDocumentToDatasetInfo.m/#ndidatabasemetadata_ds_coreconvertdocumenttodatasetinfo","text":"CONVERTDOCUMENTTODATASETINFO function to convert NDI document to datasetInfo DATASETINFO = ndi.database.metadata_app.fun.CONVERTDOCUMENTTODATASETINFO(DOCUMENT) Inputs: DOCUMENT - struct containing the saved dataset information for our app Note that this is not a set of saved metadata objects in the dataset, but just the saved structure data from the MetaDataEditorApp Outputs: DATASETINFO - struct containing the dataset information","title":"ndi.database.metadata_ds_core.convertDocumentToDatasetInfo"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/convertFormDataToDocuments.m/","text":"ndi.database.metadata_ds_core.convertFormDataToDocuments Todo: [ ] Probes [ ] Link subjects to ndi subjects using dependency_type? [ ] Any other dependency_type?","title":"ndi.database.metadata_ds_core.convertFormDataToDocuments"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/convertFormDataToDocuments.m/#ndidatabasemetadata_ds_coreconvertformdatatodocuments","text":"Todo: [ ] Probes [ ] Link subjects to ndi subjects using dependency_type? [ ] Any other dependency_type?","title":"ndi.database.metadata_ds_core.convertFormDataToDocuments"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/load_author_from_ndidocument.m/","text":"ndi.database.metadata_ds_core.load_author_from_ndidocument LOAD_AUTHOR_FROM_NDIDOCUMENT Summary of this function goes here AUTHOR = ndi.database.metadata_ds_core.LOAD_AUTHOR_FROM_NDIDOCUMENT(AUTHOR_DOCS, OTHERCONTRIBUTION_DOCS, CUSTODIAN_DOCS, D)","title":"ndi.database.metadata_ds_core.load_author_from_ndidocument"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/load_author_from_ndidocument.m/#ndidatabasemetadata_ds_coreload_author_from_ndidocument","text":"LOAD_AUTHOR_FROM_NDIDOCUMENT Summary of this function goes here AUTHOR = ndi.database.metadata_ds_core.LOAD_AUTHOR_FROM_NDIDOCUMENT(AUTHOR_DOCS, OTHERCONTRIBUTION_DOCS, CUSTODIAN_DOCS, D)","title":"ndi.database.metadata_ds_core.load_author_from_ndidocument"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/metadata_to_json.m/","text":"ndi.database.metadata_ds_core.metadata_to_json METADATA_TO_JSON - Convert NDIMetadataEditorApp metadata structure to json DATASET_UPDATE = METADATA_TO_JSON(S) Inputs: S - the metadata structure to convert Outputs: DATASET_UPDATE - the json structure to update the dataset","title":"ndi.database.metadata_ds_core.metadata_to_json"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/metadata_to_json.m/#ndidatabasemetadata_ds_coremetadata_to_json","text":"METADATA_TO_JSON - Convert NDIMetadataEditorApp metadata structure to json DATASET_UPDATE = METADATA_TO_JSON(S) Inputs: S - the metadata structure to convert Outputs: DATASET_UPDATE - the json structure to update the dataset","title":"ndi.database.metadata_ds_core.metadata_to_json"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/ndidataset2metadataeditorstruct.m/","text":"ndi.database.metadata_ds_core.ndidataset2metadataeditorstruct DATASETINFORMATION = NDIDATASET2METADATAEDITORSTRUCT(D) Read an NDIMetaDataEditorApp data structure from the documents in an ndi.dataset D. Inputs: D - an ndi.dataset object Outputs: DATASETINFORMATION - metadata structured used by the NDIMetaDataEditorApp","title":"ndi.database.metadata_ds_core.ndidataset2metadataeditorstruct"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/ndidataset2metadataeditorstruct.m/#ndidatabasemetadata_ds_corendidataset2metadataeditorstruct","text":"DATASETINFORMATION = NDIDATASET2METADATAEDITORSTRUCT(D) Read an NDIMetaDataEditorApp data structure from the documents in an ndi.dataset D. Inputs: D - an ndi.dataset object Outputs: DATASETINFORMATION - metadata structured used by the NDIMetaDataEditorApp","title":"ndi.database.metadata_ds_core.ndidataset2metadataeditorstruct"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/saveEditor2Doc.m/","text":"ndi.database.metadata_ds_core.saveEditor2Doc SAVEEDITOR2DOC function to save the editor content to NDI document D = ndi.database.metadata_app.fun.SAVEEDITOR2DOC(D, DATASETINFO) Inputs: D - ndi.dataset object DATASETINFO - struct containing the dataset information Outputs: D - ndi.dataset object","title":"ndi.database.metadata_ds_core.saveEditor2Doc"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/saveEditor2Doc.m/#ndidatabasemetadata_ds_coresaveeditor2doc","text":"SAVEEDITOR2DOC function to save the editor content to NDI document D = ndi.database.metadata_app.fun.SAVEEDITOR2DOC(D, DATASETINFO) Inputs: D - ndi.dataset object DATASETINFO - struct containing the dataset information Outputs: D - ndi.dataset object","title":"ndi.database.metadata_ds_core.saveEditor2Doc"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdataset/dir.m/","text":"CLASS ndi.dataset.dir ndi.dataset.dir - Create a new ndi.dataset.dir object D = ndi.dataset.dir(REFERENCE, PATH_NAME) Creates an ndi.dataset.dir object, that is, an ndi.dataset object with an associated directory. One can also create an existing ndi.dataset.dir object with D = ndi.dataset.dir(PATH_NAME) Superclasses ndi.dataset , handle Properties Property Description path the file path of the session Methods Method Description add_ingested_session ingets an ndi.session into an ndi.dataset add_linked_session link an ndi.session to an ndi.dataset addlistener addlistener Add listener for event. database_add Add an ndi.document to an ndi.dataset object database_closebinarydoc close an ndi.database.binarydoc database_existbinarydoc checks if an ndi.database.binarydoc exists for an ndi.document database_openbinarydoc open the ndi.database.binarydoc channel of an ndi.document database_rm Remove an ndi.document with a given document ID from a dataset database_search Search for an ndi.document in a database of an ndi.dataset object delete DELETE Delete a handle object. dir Create a new ndi.dataset.dir object document_session DOCUMENT_SESSION return the ndi.session of an ndi.document object in an ndi.dataset eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getpath Return the path of the dataset gt > (GT) Greater than relation for handles. id return the identifier of an ndi.dataset object isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. open_session open an ndi.session object from an ndi.dataset reference return the reference string for an ndi.dataset object session_list return the session reference/identifier list for a dataset Methods help add_ingested_session - ingets an ndi.session into an ndi.dataset NDI_DATASET_OBJ = ADD_INGESTED_SESSION(NDI_DATASET_OBJ, NDI_SESSION_OBJ) Add an ndi.session object to an ndi.dataset, by copying the session documents into the dataset. Help for ndi.dataset.dir/add_ingested_session is inherited from superclass ndi.dataset add_linked_session - link an ndi.session to an ndi.dataset NDI_DATASET_OBJ = ADD_LINKED_SESSION(NDI_DATASET_OBJ, NDI_SESSION_OBJ) Add an ndi.session object to an ndi.dataset, without ingesting the session into the dataset. Instead, the ndi.session is linked to the dataset, but the session remains where it is. Help for ndi.dataset.dir/add_linked_session is inherited from superclass ndi.dataset addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.dataset.dir, matlab.metadata.Property, events Help for ndi.dataset.dir/addlistener is inherited from superclass handle database_add - Add an ndi.document to an ndi.dataset object NDI_DATASET_OBJ = DATABASE_ADD(NDI_DATASET_OBJ, NDI_DOCUMENT_OBJ) Adds the ndi.document NDI_DOCUMENT_OBJ to the ndi.dataset NDI_DATASET_OBJ. NDI_DOCUMENT_OBJ can also be a cell array of ndi.document objects, which will all be added in turn. If the base.session_id of each NDI_DOCUMENT_OBJ matches one of the sessions in the DATASET, the document will be added to that session. If the base.session_id of the document matches the id of the NDI_DATASET_OBJ, it will be added to the dataset instead of one of the invidiual sessions. The database can be queried by calling NDI_DATASET_OBJ/SEARCH See also: ndi.dataset.dir/database_search(), ndi.dataset.dir/database_rm() Help for ndi.dataset.dir/database_add is inherited from superclass ndi.dataset database_closebinarydoc - close an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = DATABASE_CLOSEBINARYDOC(NDI_DATASET_OBJ, NDI_BINARYDOC_OBJ) Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the database, which is why it is necessary to call this function through the dataset object. Help for ndi.dataset.dir/database_closebinarydoc is inherited from superclass ndi.dataset database_existbinarydoc - checks if an ndi.database.binarydoc exists for an ndi.document [TF, FILE_PATH] = DATABASE_EXISTBINARYDOC(NDI_DATASET_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. Help for ndi.dataset.dir/database_existbinarydoc is inherited from superclass ndi.dataset database_openbinarydoc - open the ndi.database.binarydoc channel of an ndi.document NDI_BINARYDOC_OBJ = DATABASE_OPENBINARYDOC(NDI_DATASET_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return the open ndi.database.binarydoc object that corresponds to an ndi.document and NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself. The document is opened for reading only. Document binary streams may not be edited once the document is added to the database. Note that this NDI_BINARYDOC_OBJ must be closed with ndi.dataset/CLOSEBINARYDOC. Help for ndi.dataset.dir/database_openbinarydoc is inherited from superclass ndi.dataset database_rm - Remove an ndi.document with a given document ID from a dataset NDI_DATASET_OBJ = DATABASE_RM(NDI_DATASET_OBJ, DOC_UNIQUE_ID) or NDI_DATASET_OBJ = DATABASE_RM(NDI_DATASET_OBJ, DOC) Removes an ndi.document with document id DOC_UNIQUE_ID from the NDI_DATASET_OBJ database. In the second form, if an ndi.document or cell array of NDI_DOCUMENTS is passed for DOC, then the document unique ids are retrieved and they are removed in turn. If DOC/DOC_UNIQUE_ID is empty, no action is taken. If the base.session_id of each NDI_DOCUMENT_OBJ matches one of the linked sessions in the DATASET, the document will be removed from the linked session. If the linked session is opened individually, the document will have been removed. This function also takes parameters as name/value pairs that modify its behavior: Parameter (default) | Description -------------------------------------------------------------------------------- ErrIfNotFound (0) | Produce an error if an ID to be deleted is not found. See also: ndi.dataset.dir/database_add(), ndi.dataset.dir/database_search() Help for ndi.dataset.dir/database_rm is inherited from superclass ndi.dataset database_search - Search for an ndi.document in a database of an ndi.dataset object NDI_DOCUMENT_OBJ = DATABASE_SEARCH(NDI_DATASET_OBJ, SEARCHPARAMETERS)T Given search parameters, which is an ndi.query object, the database associated with the ndi.dataset object NDI_DATASET_OBJ is searched. Matches are returned in a cell list NDI_DOCUMENT_OBJ. See also: ndi.dataset.dir/database_add(), ndi.dataset.dir/database_rm() Help for ndi.dataset.dir/database_search is inherited from superclass ndi.dataset delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATASET.DIR, NDI.DATASET.DIR/ISVALID, CLEAR Help for ndi.dataset.dir/delete is inherited from superclass handle dir - Create a new ndi.dataset.dir object D = ndi.dataset.dir(REFERENCE, PATH_NAME) Creates an ndi.dataset.dir object, that is, an ndi.dataset object with an associated directory. One can also create an existing ndi.dataset.dir object with D = ndi.dataset.dir(PATH_NAME) Documentation for ndi.dataset.dir/dir doc ndi.dataset.dir document_session - DOCUMENT_SESSION return the ndi.session of an ndi.document object in an ndi.dataset NDI_SESSION_OBJ = DOCUMENT_SESSION(NDI_DATASET_OBJ, NDI_DOCUMENT_OBJ) Given an ndi.document, return an open ndi.session object that contains the the document. Help for ndi.dataset.dir/document_session is inherited from superclass ndi.dataset eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET.DIR, NDI.DATASET.DIR/GE, NDI.DATASET.DIR/GT, NDI.DATASET.DIR/LE, NDI.DATASET.DIR/LT, NDI.DATASET.DIR/NE Help for ndi.dataset.dir/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATASET.DIR Help for ndi.dataset.dir/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.dataset.dir, ndi.dataset.dir/findobj, dynamicprops, matlab.metadata.Property Help for ndi.dataset.dir/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET.DIR, NDI.DATASET.DIR/EQ, NDI.DATASET.DIR/GT, NDI.DATASET.DIR/LE, NDI.DATASET.DIR/LT, NDI.DATASET.DIR/NE Help for ndi.dataset.dir/ge is inherited from superclass handle getpath - Return the path of the dataset P = GETPATH(NDI_DATASET_OBJ) Returns the path of an ndi.dataset object. The path is some sort of reference to the storage location of the dataset. This might be a URL, or a file directory, depending upon the subclass. In the ndi.dataset class, this returns empty. See also: ndidataset. Help for ndi.dataset.dir/getpath is inherited from superclass ndi.dataset gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET.DIR, NDI.DATASET.DIR/EQ, NDI.DATASET.DIR/GE, NDI.DATASET.DIR/LE, NDI.DATASET.DIR/LT, NDI.DATASET.DIR/NE Help for ndi.dataset.dir/gt is inherited from superclass handle id - return the identifier of an ndi.dataset object IDENTIFIER = ID(NDI_DATASET_OBJ) Returns the unique identifier of an ndi.dataset object. Help for ndi.dataset.dir/id is inherited from superclass ndi.dataset isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATASET.DIR, NDI.DATASET.DIR/DELETE Help for ndi.dataset.dir/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET.DIR, NDI.DATASET.DIR/EQ, NDI.DATASET.DIR/GE, NDI.DATASET.DIR/GT, NDI.DATASET.DIR/LT, NDI.DATASET.DIR/NE Help for ndi.dataset.dir/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.dataset.dir, matlab.metadata.Property, events Help for ndi.dataset.dir/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET.DIR, NDI.DATASET.DIR/EQ, NDI.DATASET.DIR/GE, NDI.DATASET.DIR/GT, NDI.DATASET.DIR/LE, NDI.DATASET.DIR/NE Help for ndi.dataset.dir/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET.DIR, NDI.DATASET.DIR/EQ, NDI.DATASET.DIR/GE, NDI.DATASET.DIR/GT, NDI.DATASET.DIR/LE, NDI.DATASET.DIR/LT Help for ndi.dataset.dir/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATASET.DIR, NDI.DATASET.DIR/ADDLISTENER, NDI.DATASET.DIR/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.dataset.dir/notify is inherited from superclass handle open_session - open an ndi.session object from an ndi.dataset NDI_SESSION_OBJ = OPEN_SESSION(NDI_DATASET_OBJ, SESSION_ID) Open an ndi.session object with session identifier SESSION_ID that is stored in the ndi.dataset NDI_DATASET_OBJ. See also: ndi.session, ndi.dataset.dir/session_list() Help for ndi.dataset.dir/open_session is inherited from superclass ndi.dataset reference - return the reference string for an ndi.dataset object REF_STRING = REFERENCE(NDI_DATASET_OBJ) Returns the reference string for an ndi.dataset object. This can be any string, it is not necessarily unique among datasets. The dataset identifier returned by ID is unique. See also: ndi.dataset.dir/ID Help for ndi.dataset.dir/reference is inherited from superclass ndi.dataset session_list - return the session reference/identifier list for a dataset [REF_LIST, ID_LIST] = SESSION_LIST(NDI_DATASET_OBJ) Returns information about ndi.session objects contained in an ndi.dataset object NDI_DATASET_OBJ. REF_LIST is a cell array of reference strings, and ID_LIST is a cell array of unique identifier strings. The nth entry of REF_LIST corresponds to the Nth entry of ID_LIST (that is, REF_LIST{n} is the reference that corresponds to the ndi.session with unique identifier ID_LIST{n}. Help for ndi.dataset.dir/session_list is inherited from superclass ndi.dataset","title":"ndi.dataset.dir"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdataset/dir.m/#class-ndidatasetdir","text":"ndi.dataset.dir - Create a new ndi.dataset.dir object D = ndi.dataset.dir(REFERENCE, PATH_NAME) Creates an ndi.dataset.dir object, that is, an ndi.dataset object with an associated directory. One can also create an existing ndi.dataset.dir object with D = ndi.dataset.dir(PATH_NAME)","title":"CLASS ndi.dataset.dir"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdataset/dir.m/#superclasses","text":"ndi.dataset , handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdataset/dir.m/#properties","text":"Property Description path the file path of the session","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdataset/dir.m/#methods","text":"Method Description add_ingested_session ingets an ndi.session into an ndi.dataset add_linked_session link an ndi.session to an ndi.dataset addlistener addlistener Add listener for event. database_add Add an ndi.document to an ndi.dataset object database_closebinarydoc close an ndi.database.binarydoc database_existbinarydoc checks if an ndi.database.binarydoc exists for an ndi.document database_openbinarydoc open the ndi.database.binarydoc channel of an ndi.document database_rm Remove an ndi.document with a given document ID from a dataset database_search Search for an ndi.document in a database of an ndi.dataset object delete DELETE Delete a handle object. dir Create a new ndi.dataset.dir object document_session DOCUMENT_SESSION return the ndi.session of an ndi.document object in an ndi.dataset eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getpath Return the path of the dataset gt > (GT) Greater than relation for handles. id return the identifier of an ndi.dataset object isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. open_session open an ndi.session object from an ndi.dataset reference return the reference string for an ndi.dataset object session_list return the session reference/identifier list for a dataset","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdataset/dir.m/#methods-help","text":"add_ingested_session - ingets an ndi.session into an ndi.dataset NDI_DATASET_OBJ = ADD_INGESTED_SESSION(NDI_DATASET_OBJ, NDI_SESSION_OBJ) Add an ndi.session object to an ndi.dataset, by copying the session documents into the dataset. Help for ndi.dataset.dir/add_ingested_session is inherited from superclass ndi.dataset add_linked_session - link an ndi.session to an ndi.dataset NDI_DATASET_OBJ = ADD_LINKED_SESSION(NDI_DATASET_OBJ, NDI_SESSION_OBJ) Add an ndi.session object to an ndi.dataset, without ingesting the session into the dataset. Instead, the ndi.session is linked to the dataset, but the session remains where it is. Help for ndi.dataset.dir/add_linked_session is inherited from superclass ndi.dataset addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.dataset.dir, matlab.metadata.Property, events Help for ndi.dataset.dir/addlistener is inherited from superclass handle database_add - Add an ndi.document to an ndi.dataset object NDI_DATASET_OBJ = DATABASE_ADD(NDI_DATASET_OBJ, NDI_DOCUMENT_OBJ) Adds the ndi.document NDI_DOCUMENT_OBJ to the ndi.dataset NDI_DATASET_OBJ. NDI_DOCUMENT_OBJ can also be a cell array of ndi.document objects, which will all be added in turn. If the base.session_id of each NDI_DOCUMENT_OBJ matches one of the sessions in the DATASET, the document will be added to that session. If the base.session_id of the document matches the id of the NDI_DATASET_OBJ, it will be added to the dataset instead of one of the invidiual sessions. The database can be queried by calling NDI_DATASET_OBJ/SEARCH See also: ndi.dataset.dir/database_search(), ndi.dataset.dir/database_rm() Help for ndi.dataset.dir/database_add is inherited from superclass ndi.dataset database_closebinarydoc - close an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = DATABASE_CLOSEBINARYDOC(NDI_DATASET_OBJ, NDI_BINARYDOC_OBJ) Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the database, which is why it is necessary to call this function through the dataset object. Help for ndi.dataset.dir/database_closebinarydoc is inherited from superclass ndi.dataset database_existbinarydoc - checks if an ndi.database.binarydoc exists for an ndi.document [TF, FILE_PATH] = DATABASE_EXISTBINARYDOC(NDI_DATASET_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. Help for ndi.dataset.dir/database_existbinarydoc is inherited from superclass ndi.dataset database_openbinarydoc - open the ndi.database.binarydoc channel of an ndi.document NDI_BINARYDOC_OBJ = DATABASE_OPENBINARYDOC(NDI_DATASET_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return the open ndi.database.binarydoc object that corresponds to an ndi.document and NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself. The document is opened for reading only. Document binary streams may not be edited once the document is added to the database. Note that this NDI_BINARYDOC_OBJ must be closed with ndi.dataset/CLOSEBINARYDOC. Help for ndi.dataset.dir/database_openbinarydoc is inherited from superclass ndi.dataset database_rm - Remove an ndi.document with a given document ID from a dataset NDI_DATASET_OBJ = DATABASE_RM(NDI_DATASET_OBJ, DOC_UNIQUE_ID) or NDI_DATASET_OBJ = DATABASE_RM(NDI_DATASET_OBJ, DOC) Removes an ndi.document with document id DOC_UNIQUE_ID from the NDI_DATASET_OBJ database. In the second form, if an ndi.document or cell array of NDI_DOCUMENTS is passed for DOC, then the document unique ids are retrieved and they are removed in turn. If DOC/DOC_UNIQUE_ID is empty, no action is taken. If the base.session_id of each NDI_DOCUMENT_OBJ matches one of the linked sessions in the DATASET, the document will be removed from the linked session. If the linked session is opened individually, the document will have been removed. This function also takes parameters as name/value pairs that modify its behavior: Parameter (default) | Description -------------------------------------------------------------------------------- ErrIfNotFound (0) | Produce an error if an ID to be deleted is not found. See also: ndi.dataset.dir/database_add(), ndi.dataset.dir/database_search() Help for ndi.dataset.dir/database_rm is inherited from superclass ndi.dataset database_search - Search for an ndi.document in a database of an ndi.dataset object NDI_DOCUMENT_OBJ = DATABASE_SEARCH(NDI_DATASET_OBJ, SEARCHPARAMETERS)T Given search parameters, which is an ndi.query object, the database associated with the ndi.dataset object NDI_DATASET_OBJ is searched. Matches are returned in a cell list NDI_DOCUMENT_OBJ. See also: ndi.dataset.dir/database_add(), ndi.dataset.dir/database_rm() Help for ndi.dataset.dir/database_search is inherited from superclass ndi.dataset delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.DATASET.DIR, NDI.DATASET.DIR/ISVALID, CLEAR Help for ndi.dataset.dir/delete is inherited from superclass handle dir - Create a new ndi.dataset.dir object D = ndi.dataset.dir(REFERENCE, PATH_NAME) Creates an ndi.dataset.dir object, that is, an ndi.dataset object with an associated directory. One can also create an existing ndi.dataset.dir object with D = ndi.dataset.dir(PATH_NAME) Documentation for ndi.dataset.dir/dir doc ndi.dataset.dir document_session - DOCUMENT_SESSION return the ndi.session of an ndi.document object in an ndi.dataset NDI_SESSION_OBJ = DOCUMENT_SESSION(NDI_DATASET_OBJ, NDI_DOCUMENT_OBJ) Given an ndi.document, return an open ndi.session object that contains the the document. Help for ndi.dataset.dir/document_session is inherited from superclass ndi.dataset eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET.DIR, NDI.DATASET.DIR/GE, NDI.DATASET.DIR/GT, NDI.DATASET.DIR/LE, NDI.DATASET.DIR/LT, NDI.DATASET.DIR/NE Help for ndi.dataset.dir/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.DATASET.DIR Help for ndi.dataset.dir/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.dataset.dir, ndi.dataset.dir/findobj, dynamicprops, matlab.metadata.Property Help for ndi.dataset.dir/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET.DIR, NDI.DATASET.DIR/EQ, NDI.DATASET.DIR/GT, NDI.DATASET.DIR/LE, NDI.DATASET.DIR/LT, NDI.DATASET.DIR/NE Help for ndi.dataset.dir/ge is inherited from superclass handle getpath - Return the path of the dataset P = GETPATH(NDI_DATASET_OBJ) Returns the path of an ndi.dataset object. The path is some sort of reference to the storage location of the dataset. This might be a URL, or a file directory, depending upon the subclass. In the ndi.dataset class, this returns empty. See also: ndidataset. Help for ndi.dataset.dir/getpath is inherited from superclass ndi.dataset gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET.DIR, NDI.DATASET.DIR/EQ, NDI.DATASET.DIR/GE, NDI.DATASET.DIR/LE, NDI.DATASET.DIR/LT, NDI.DATASET.DIR/NE Help for ndi.dataset.dir/gt is inherited from superclass handle id - return the identifier of an ndi.dataset object IDENTIFIER = ID(NDI_DATASET_OBJ) Returns the unique identifier of an ndi.dataset object. Help for ndi.dataset.dir/id is inherited from superclass ndi.dataset isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.DATASET.DIR, NDI.DATASET.DIR/DELETE Help for ndi.dataset.dir/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET.DIR, NDI.DATASET.DIR/EQ, NDI.DATASET.DIR/GE, NDI.DATASET.DIR/GT, NDI.DATASET.DIR/LT, NDI.DATASET.DIR/NE Help for ndi.dataset.dir/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.dataset.dir, matlab.metadata.Property, events Help for ndi.dataset.dir/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET.DIR, NDI.DATASET.DIR/EQ, NDI.DATASET.DIR/GE, NDI.DATASET.DIR/GT, NDI.DATASET.DIR/LE, NDI.DATASET.DIR/NE Help for ndi.dataset.dir/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.DATASET.DIR, NDI.DATASET.DIR/EQ, NDI.DATASET.DIR/GE, NDI.DATASET.DIR/GT, NDI.DATASET.DIR/LE, NDI.DATASET.DIR/LT Help for ndi.dataset.dir/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.DATASET.DIR, NDI.DATASET.DIR/ADDLISTENER, NDI.DATASET.DIR/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.dataset.dir/notify is inherited from superclass handle open_session - open an ndi.session object from an ndi.dataset NDI_SESSION_OBJ = OPEN_SESSION(NDI_DATASET_OBJ, SESSION_ID) Open an ndi.session object with session identifier SESSION_ID that is stored in the ndi.dataset NDI_DATASET_OBJ. See also: ndi.session, ndi.dataset.dir/session_list() Help for ndi.dataset.dir/open_session is inherited from superclass ndi.dataset reference - return the reference string for an ndi.dataset object REF_STRING = REFERENCE(NDI_DATASET_OBJ) Returns the reference string for an ndi.dataset object. This can be any string, it is not necessarily unique among datasets. The dataset identifier returned by ID is unique. See also: ndi.dataset.dir/ID Help for ndi.dataset.dir/reference is inherited from superclass ndi.dataset session_list - return the session reference/identifier list for a dataset [REF_LIST, ID_LIST] = SESSION_LIST(NDI_DATASET_OBJ) Returns information about ndi.session objects contained in an ndi.dataset object NDI_DATASET_OBJ. REF_LIST is a cell array of reference strings, and ID_LIST is a cell array of unique identifier strings. The nth entry of REF_LIST corresponds to the Nth entry of ID_LIST (that is, REF_LIST{n} is the reference that corresponds to the ndi.session with unique identifier ID_LIST{n}. Help for ndi.dataset.dir/session_list is inherited from superclass ndi.dataset","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdocs/all_documents2markdown.m/","text":"ndi.docs.all_documents2markdown ALL_DOCUMENTS2MARKDOWN - write all NDI document types to documentation folder","title":"ndi.docs.all_documents2markdown"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdocs/all_documents2markdown.m/#ndidocsall_documents2markdown","text":"ALL_DOCUMENTS2MARKDOWN - write all NDI document types to documentation folder","title":"ndi.docs.all_documents2markdown"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdocs/build.m/","text":"ndi.docs.build ndi.docs.build - build the NDI markdown documentation from Matlab source Builds the NDI documentation locally in $NDI-matlab/docs and updates the mkdocs-yml file in the $NDI-matlab directory. **Example**: ndi.docs.build(); Need to move mkdocs.yml to the root directory of the repo before running `mkdocs gh-deploy` on regular command line (not Matlab command line).","title":"ndi.docs.build"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdocs/build.m/#ndidocsbuild","text":"ndi.docs.build - build the NDI markdown documentation from Matlab source Builds the NDI documentation locally in $NDI-matlab/docs and updates the mkdocs-yml file in the $NDI-matlab directory. **Example**: ndi.docs.build(); Need to move mkdocs.yml to the root directory of the repo before running `mkdocs gh-deploy` on regular command line (not Matlab command line).","title":"ndi.docs.build"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdocs/calcbuild.m/","text":"ndi.docs.calcbuild ndi.docs.calcbuild - build NDI calculator markdown documentation from Matlab source ndi.docs.calcbuild(DIRNAME) Builds the documentation locally in NDI calculator GitHub directories. **Example**: ndi.docs.calcbuild('/Users/myname/Documents/MATLAB/tools/NDIcalc-vis-matlab'); % builds documentation for NDIcalc-vis","title":"ndi.docs.calcbuild"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdocs/calcbuild.m/#ndidocscalcbuild","text":"ndi.docs.calcbuild - build NDI calculator markdown documentation from Matlab source ndi.docs.calcbuild(DIRNAME) Builds the documentation locally in NDI calculator GitHub directories. **Example**: ndi.docs.calcbuild('/Users/myname/Documents/MATLAB/tools/NDIcalc-vis-matlab'); % builds documentation for NDIcalc-vis","title":"ndi.docs.calcbuild"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdocs/concatenateFiles.m/","text":"ndi.docs.concatenateFiles concatenateFiles Concatenates text files within a directory and its subdirectories into a single output file. concatenateFiles(directory, outputFile) concatenates all text files within the specified directory and its subdirectories into the specified output file. concatenateFiles(directory, outputFile, options) allows specifying optional parameters in the 'options' structure. Inputs: directory: The path to the directory to search. outputFile: The path to the output file. options: A structure containing optional parameters: 'IgnoreFile': Path to a JSON file containing a list of files to ignore. The JSON file should contain a JSON array of strings, where each string is a filename to ignore. 'Extensions': A cell array of strings specifying the file extensions to include (e.g., {'.txt', '.log'}). 'ParentDir': A path to be prepended to the files in 'IgnoreFile' Example: concatenateFiles('my_data_dir', 'combined_data.txt'); options.IgnoreFile = 'ignore_list.json'; concatenateFiles('my_data_dir', 'combined_data.txt', options); options.Extensions = {'.txt', '.csv'}; concatenateFiles('my_data_dir', 'combined_data.txt', options); options.IgnoreFile = 'ignore_list.json'; options.Extensions = {'.txt'}; concatenateFiles('my_data_dir', 'combined_data.txt', options); See also: dir, fopen, fprintf, fclose, jsondecode","title":"ndi.docs.concatenateFiles"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdocs/concatenateFiles.m/#ndidocsconcatenatefiles","text":"concatenateFiles Concatenates text files within a directory and its subdirectories into a single output file. concatenateFiles(directory, outputFile) concatenates all text files within the specified directory and its subdirectories into the specified output file. concatenateFiles(directory, outputFile, options) allows specifying optional parameters in the 'options' structure. Inputs: directory: The path to the directory to search. outputFile: The path to the output file. options: A structure containing optional parameters: 'IgnoreFile': Path to a JSON file containing a list of files to ignore. The JSON file should contain a JSON array of strings, where each string is a filename to ignore. 'Extensions': A cell array of strings specifying the file extensions to include (e.g., {'.txt', '.log'}). 'ParentDir': A path to be prepended to the files in 'IgnoreFile' Example: concatenateFiles('my_data_dir', 'combined_data.txt'); options.IgnoreFile = 'ignore_list.json'; concatenateFiles('my_data_dir', 'combined_data.txt', options); options.Extensions = {'.txt', '.csv'}; concatenateFiles('my_data_dir', 'combined_data.txt', options); options.IgnoreFile = 'ignore_list.json'; options.Extensions = {'.txt'}; concatenateFiles('my_data_dir', 'combined_data.txt', options); See also: dir, fopen, fprintf, fclose, jsondecode","title":"ndi.docs.concatenateFiles"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdocs/document2markdown.m/","text":"ndi.docs.document2markdown DOCUMENT2MARKDOWN - convert an NDI document to markdown text MD = ndi.docs.document2markdown(ndi_document_obj) Given an ndi.document NDI_DOCUMENT_OBJ, this function creates a documentation-style markdown file.","title":"ndi.docs.document2markdown"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdocs/document2markdown.m/#ndidocsdocument2markdown","text":"DOCUMENT2MARKDOWN - convert an NDI document to markdown text MD = ndi.docs.document2markdown(ndi_document_obj) Given an ndi.document NDI_DOCUMENT_OBJ, this function creates a documentation-style markdown file.","title":"ndi.docs.document2markdown"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdocs/schemastructure2docstructure.m/","text":"ndi.docs.schemastructure2docstructure schemastructure2docstructure - return documentation information from an ndi document schema DOCS = SCHEMASTRUCTURE2DOCSTRUCTURE(SCHEMA) Given an NDI schema structure (json-schema.org/draft/2019-09/schema#) this function returns documentation information for all properties. This returns a structure array with fields: - property - doc_default_value - doc_data_type - doc_description","title":"ndi.docs.schemastructure2docstructure"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdocs/schemastructure2docstructure.m/#ndidocsschemastructure2docstructure","text":"schemastructure2docstructure - return documentation information from an ndi document schema DOCS = SCHEMASTRUCTURE2DOCSTRUCTURE(SCHEMA) Given an NDI schema structure (json-schema.org/draft/2019-09/schema#) this function returns documentation information for all properties. This returns a structure array with fields: - property - doc_default_value - doc_data_type - doc_description","title":"ndi.docs.schemastructure2docstructure"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/downsample.m/","text":"ndi.element.downsample NDI.ELEMENT.DOWNSAMPLE - Downsamples an ndi.element.timeseries object, applying anti-aliasing ELEM_OUT = NDI.ELEMENT.DOWNSAMPLE(D, NDI_ELEMENT_TIMESERIES_OBJ_IN, LP, NAME_OUT, REFERENCE_OUT) Downsamples the ndi.element.timeseries object NDI_ELEMENT_TIMESERIES_OBJ_IN and creates a new ndi.element.timeseries object ELEM_OUT. The new object will have the name NAME_OUT and reference REFERENCE_OUT. The original object will not be modified. Inputs: D - The ndi.dataset or ndi.session object containing the data. NDI_ELEMENT_TIMESERIES_OBJ_IN - The ndi.element.timeseries object to downsample. LP - The low-pass frequency (in Hz) to use for downsampling. NAME_OUT - The name of the new ndi.element.timeseries object. REFERENCE_OUT - The reference number of the new ndi.element.timeseries object. Outputs: ELEM_OUT - The new downsampled ndi.element.timeseries object. See also: DOWNSAMPLETIMESERIES, NDI.ELEMENT.TIMESERIES","title":"ndi.element.downsample"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/downsample.m/#ndielementdownsample","text":"NDI.ELEMENT.DOWNSAMPLE - Downsamples an ndi.element.timeseries object, applying anti-aliasing ELEM_OUT = NDI.ELEMENT.DOWNSAMPLE(D, NDI_ELEMENT_TIMESERIES_OBJ_IN, LP, NAME_OUT, REFERENCE_OUT) Downsamples the ndi.element.timeseries object NDI_ELEMENT_TIMESERIES_OBJ_IN and creates a new ndi.element.timeseries object ELEM_OUT. The new object will have the name NAME_OUT and reference REFERENCE_OUT. The original object will not be modified. Inputs: D - The ndi.dataset or ndi.session object containing the data. NDI_ELEMENT_TIMESERIES_OBJ_IN - The ndi.element.timeseries object to downsample. LP - The low-pass frequency (in Hz) to use for downsampling. NAME_OUT - The name of the new ndi.element.timeseries object. REFERENCE_OUT - The reference number of the new ndi.element.timeseries object. Outputs: ELEM_OUT - The new downsampled ndi.element.timeseries object. See also: DOWNSAMPLETIMESERIES, NDI.ELEMENT.TIMESERIES","title":"ndi.element.downsample"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/oneepoch.m/","text":"ndi.element.oneepoch ONEEPOCH - make a 1 epoch version of an ndi.element.timeseries ELEM_OUT = ONEEPOCH(D, NDI_ELEMENT_TIMESERIES_OBJ_IN, NAME_OUT, REFERENCE_OUT) Creates a concatenated version of an ndi.element.timeseries (or ndi.probe.timeseries). Use with caution, as this could create enormous documents. The new object will have the name NAME_OUT and reference REFERENCE_OUT. The original object will not be modified. The epoch will be created with the most \"global\" clock available. The preferred order is 'utc','approx_utc','exp_global_time','approx_exp_global_time','dev_global_time','approx_dev_global_time'. If a global clock cannot be found, the epoch will be given a 'dev_local_time' with the concatenation of all the local times as though the recordings occurred one immediately after the other. Inputs: D - The ndi.dataset or ndi.session object containing the data. NDI_ELEMENT_TIMESERIES_OBJ_IN - The ndi.element.timeseries object to concatenate. NAME_OUT - The name of the new ndi.element.timeseries object. REFERENCE_OUT - The reference number of the new ndi.element.timeseries object. Outputs: ELEM_OUT - The new concatenated ndi.element.timeseries object. See also: NDI.ELEMENT.TIMESERIES","title":"ndi.element.oneepoch"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/oneepoch.m/#ndielementoneepoch","text":"ONEEPOCH - make a 1 epoch version of an ndi.element.timeseries ELEM_OUT = ONEEPOCH(D, NDI_ELEMENT_TIMESERIES_OBJ_IN, NAME_OUT, REFERENCE_OUT) Creates a concatenated version of an ndi.element.timeseries (or ndi.probe.timeseries). Use with caution, as this could create enormous documents. The new object will have the name NAME_OUT and reference REFERENCE_OUT. The original object will not be modified. The epoch will be created with the most \"global\" clock available. The preferred order is 'utc','approx_utc','exp_global_time','approx_exp_global_time','dev_global_time','approx_dev_global_time'. If a global clock cannot be found, the epoch will be given a 'dev_local_time' with the concatenation of all the local times as though the recordings occurred one immediately after the other. Inputs: D - The ndi.dataset or ndi.session object containing the data. NDI_ELEMENT_TIMESERIES_OBJ_IN - The ndi.element.timeseries object to concatenate. NAME_OUT - The name of the new ndi.element.timeseries object. REFERENCE_OUT - The reference number of the new ndi.element.timeseries object. Outputs: ELEM_OUT - The new concatenated ndi.element.timeseries object. See also: NDI.ELEMENT.TIMESERIES","title":"ndi.element.oneepoch"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/oneepoch_bkup.m/","text":"ndi.element.oneepoch_bkup ONEEPOCH - make a 1 epoch version of an ndi.element.timeseries ELEM_OUT = ONEEPOCH(D, NDI_ELEMENT_TIMESERIES_OBJ_IN, NAME_OUT, REFERENCE_OUT) Creates a concatenated version of an ndi.element.timeseries (or ndi.probe.timeseries). Use with caution, as this could create enormous documents. The new object will have the name NAME_OUT and reference REFERENCE_OUT. The original object will not be modified. The epoch will be created with the most \"global\" clock available. The preferred order is 'utc','approx_utc','exp_global_time','approx_exp_global_time','dev_global_time','approx_dev_global_time'. If a global clock cannot be found, the epoch will be given a 'dev_local_time' with the concatenation of all the local times as though the recordings occurred one immediately after the other. Inputs: D - The ndi.dataset or ndi.session object containing the data. NDI_ELEMENT_TIMESERIES_OBJ_IN - The ndi.element.timeseries object to concatenate. NAME_OUT - The name of the new ndi.element.timeseries object. REFERENCE_OUT - The reference number of the new ndi.element.timeseries object. Outputs: ELEM_OUT - The new concatenated ndi.element.timeseries object. See also: NDI.ELEMENT.TIMESERIES","title":"ndi.element.oneepoch_bkup"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/oneepoch_bkup.m/#ndielementoneepoch_bkup","text":"ONEEPOCH - make a 1 epoch version of an ndi.element.timeseries ELEM_OUT = ONEEPOCH(D, NDI_ELEMENT_TIMESERIES_OBJ_IN, NAME_OUT, REFERENCE_OUT) Creates a concatenated version of an ndi.element.timeseries (or ndi.probe.timeseries). Use with caution, as this could create enormous documents. The new object will have the name NAME_OUT and reference REFERENCE_OUT. The original object will not be modified. The epoch will be created with the most \"global\" clock available. The preferred order is 'utc','approx_utc','exp_global_time','approx_exp_global_time','dev_global_time','approx_dev_global_time'. If a global clock cannot be found, the epoch will be given a 'dev_local_time' with the concatenation of all the local times as though the recordings occurred one immediately after the other. Inputs: D - The ndi.dataset or ndi.session object containing the data. NDI_ELEMENT_TIMESERIES_OBJ_IN - The ndi.element.timeseries object to concatenate. NAME_OUT - The name of the new ndi.element.timeseries object. REFERENCE_OUT - The reference number of the new ndi.element.timeseries object. Outputs: ELEM_OUT - The new concatenated ndi.element.timeseries object. See also: NDI.ELEMENT.TIMESERIES","title":"ndi.element.oneepoch_bkup"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/timeseries.m/","text":"CLASS ndi.element.timeseries NDI_ELEMENT - define or examine a element in the session Superclasses ndi.element , ndi.ido , did.ido , ndi.epoch.epochset , ndi.documentservice , matlab.mixin.Heterogeneous , ndi.time.timeseries Properties Property Description session name type reference underlying_element direct subject_id dependencies identifier Methods Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.element cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochsetname the name of the ndi.element object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID getcache return the NDI_CACHE and key for ndi.element getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version newdocument Todo: need docs here numepochs Number of epochs of ndi.epoch.epochset readtimeseries read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery Todo: need docs here t0_t1 times2samples convert from the timeseries time to sample numbers timeseries define or examine a element in the session underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method) Methods help addepoch - add an epoch to the ndi.element [NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_TIMESERIES_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, TIMEPOINTS, DATAPOINTS) Registers the data for an epoch with the NDI_ELEMENT_OBJ. Inputs: NDI_ELEMENT_OBJ: The ndi.element object to modify EPOCHID: The name of the epoch to add; should match the name of an epoch from the probe EPOCHCLOCK: The epoch clock; must be a single clock type that matches one of the clock types of the probe T0_T1: The starting time and ending time of the existence of information about the ELEMENT on the probe, in units of the epock clock TIMEPOINTS: the time points to be added to this epoch; can also be the string 'probe' which means the points are read directly from the probe (must be Tx1). Timepoints must be in the units of the EPOCHCLOCK. DATAPOINTS: the data points that accompany each timepoint (must be TxXxY...), or can be 'probe' to read from the probe Outputs: If a second output is requested in EPOCHDOC, then the DOC is NOT added to the database buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.element.timeseries/EPOCHNODES Help for ndi.element.timeseries/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - build the epoch table for an ndi.element ET = BUILDEPOCHTABLE(NDI_ELEMENT_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch (may change) 'epoch_id' | The epoch ID code (will never change once established) | This uniquely specifies the epoch (with the session id). 'epoch_session_id' | Session of the epoch 'epochprobemap' | The epochprobemap object from each epoch 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', and 'epoch_id' Help for ndi.element.timeseries/buildepochtable is inherited from superclass ndi.element cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.element.timeseries.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.element.timeseries/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.element.timeseries/cached_epochtable is inherited from superclass ndi.epoch.epochset doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then empty is returned. Help for ndi.element.timeseries/doc_unique_id is inherited from superclass ndi.element elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ) Returns the name as a human-readable string. For ndi.element objects, this is the string 'element: ' followed by its name Help for ndi.element.timeseries/elementstring is inherited from superclass ndi.element epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.element.timeseries/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_ELEMENT_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch. The ndi.element class always returns the clock type(s) of the element it is based on Help for ndi.element.timeseries/epochclock is inherited from superclass ndi.element epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.element.timeseries/epochgraph is inherited from superclass ndi.epoch.epochset epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string. The abstract class just queries the EPOCHTABLE. Most classes that manage epochs themselves (ndi.file.navigator, ndi.daq.system) will override this method. Help for ndi.element.timeseries/epochid is inherited from superclass ndi.epoch.epochset epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.element.timeseries/epochnodes is inherited from superclass ndi.epoch.epochset epochsetname - the name of the ndi.element object, for EPOCHNODES NAME = EPOCHSETNAME(NDI_ELEMENT_OBJ) Returns the object name that is used when creating epoch nodes. For ndi.element objects, this is ndi.element/ELEMENTSTRING. Help for ndi.element.timeseries/epochsetname is inherited from superclass ndi.element epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.element.timeseries/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.element.timeseries/epochtableentry is inherited from superclass ndi.epoch.epochset getcache - return the NDI_CACHE and key for ndi.element [CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ) Returns the CACHE and KEY for the ndi.element object. The CACHE is returned from the associated session. The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT. See also: ndi.file.navigator Help for ndi.element.timeseries/getcache is inherited from superclass ndi.element getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.element.timeseries/getepocharray is inherited from superclass ndi.epoch.epochset ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.element.timeseries.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then an error is returned. Help for ndi.element.timeseries/id is inherited from superclass ndi.element issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_ELEMENT_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.element objects, this returns 0 so that underlying ndi.probe epochs are added. Help for ndi.element.timeseries/issyncgraphroot is inherited from superclass ndi.element isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.element.timeseries.isvalid is inherited from superclass did.ido load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ) Loads the ndi.document that is based on the ndi.element object and any associated epoch documents. Help for ndi.element.timeseries/load_all_element_docs is inherited from superclass ndi.element load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ) Load an ndi.document that is based on the ndi.element object. Returns empty if there is no such document. Help for ndi.element.timeseries/load_element_doc is inherited from superclass ndi.element loadaddedepochs - load the added epochs from an ndi.element [ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ) Load the EPOCHTABLE that consists of added/registered epochs that provide information about the ndi.element. Help for ndi.element.timeseries/loadaddedepochs is inherited from superclass ndi.element matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.element.timeseries/matchedepochtable is inherited from superclass ndi.epoch.epochset newdocument - Todo: need docs here numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.element.timeseries/numepochs is inherited from superclass ndi.epoch.epochset readtimeseries - read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch [DATA, T, TIMEREF] = READTIMESERIES(NDI_ELEMENT_TIMESERIES_OBJ, TIMEREF_OR_EPOCH, T0, T1) Reads timeseries data from an ndi.element.timeseries object. The DATA and time information T that are returned depend on the the specific subclass of ndi.element.timeseries that is called (see READTIMESERIESEPOCH). In the base class, this function merely calls the element's probe's READTIMESERIES function. TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the time reference for T0, T1, or it can be a single number, which will indicate the data are to be read from that epoch. DATA is the data for the probe. T is a time structure, in units of TIMEREF if it is an ndi.time.timereference object or in units of the epoch if an epoch is passed. The TIMEREF is returned. resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.element.timeseries/EPOCHTABLE Help for ndi.element.timeseries/resetepochtable is inherited from superclass ndi.epoch.epochset samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLERATE(NDI_TIMESERIES_OBJ, EPOCH) Returns the sampling rate of a given ndi.time.timeseries object for the epoch EPOCH. EPOCH can be specified as an index or EPOCH_ID. If NDI_TIMESERIES_OBJ is not regularly sampled, then -1 is returned. Help for ndi.element.timeseries/samplerate is inherited from superclass ndi.time.timeseries samples2times - convert from the timeseries time to sample numbers SAMPLES = SAMPLES2TIMES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. TODO: convert times to dev_local_clock Help for ndi.element.timeseries/samples2times is inherited from superclass ndi.time.timeseries searchquery - Todo: need docs here t0_t1 - ** T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK TODO: this must be a bug, it's just self-referential Help for ndi.element.timeseries/t0_t1 is inherited from superclass ndi.element times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. Help for ndi.element.timeseries/times2samples is inherited from superclass ndi.time.timeseries timeseries - define or examine a element in the session Documentation for ndi.element.timeseries/timeseries doc ndi.element.timeseries underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.element.timeseries/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.element.timeseries.unique_id is inherited from superclass did.ido","title":"ndi.element.timeseries"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/timeseries.m/#class-ndielementtimeseries","text":"NDI_ELEMENT - define or examine a element in the session","title":"CLASS ndi.element.timeseries"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/timeseries.m/#superclasses","text":"ndi.element , ndi.ido , did.ido , ndi.epoch.epochset , ndi.documentservice , matlab.mixin.Heterogeneous , ndi.time.timeseries","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/timeseries.m/#properties","text":"Property Description session name type reference underlying_element direct subject_id dependencies identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/timeseries.m/#methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.element cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochsetname the name of the ndi.element object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID getcache return the NDI_CACHE and key for ndi.element getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version newdocument Todo: need docs here numepochs Number of epochs of ndi.epoch.epochset readtimeseries read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery Todo: need docs here t0_t1 times2samples convert from the timeseries time to sample numbers timeseries define or examine a element in the session underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method)","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/timeseries.m/#methods-help","text":"addepoch - add an epoch to the ndi.element [NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_TIMESERIES_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, TIMEPOINTS, DATAPOINTS) Registers the data for an epoch with the NDI_ELEMENT_OBJ. Inputs: NDI_ELEMENT_OBJ: The ndi.element object to modify EPOCHID: The name of the epoch to add; should match the name of an epoch from the probe EPOCHCLOCK: The epoch clock; must be a single clock type that matches one of the clock types of the probe T0_T1: The starting time and ending time of the existence of information about the ELEMENT on the probe, in units of the epock clock TIMEPOINTS: the time points to be added to this epoch; can also be the string 'probe' which means the points are read directly from the probe (must be Tx1). Timepoints must be in the units of the EPOCHCLOCK. DATAPOINTS: the data points that accompany each timepoint (must be TxXxY...), or can be 'probe' to read from the probe Outputs: If a second output is requested in EPOCHDOC, then the DOC is NOT added to the database buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.element.timeseries/EPOCHNODES Help for ndi.element.timeseries/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - build the epoch table for an ndi.element ET = BUILDEPOCHTABLE(NDI_ELEMENT_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch (may change) 'epoch_id' | The epoch ID code (will never change once established) | This uniquely specifies the epoch (with the session id). 'epoch_session_id' | Session of the epoch 'epochprobemap' | The epochprobemap object from each epoch 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', and 'epoch_id' Help for ndi.element.timeseries/buildepochtable is inherited from superclass ndi.element cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.element.timeseries.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.element.timeseries/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.element.timeseries/cached_epochtable is inherited from superclass ndi.epoch.epochset doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then empty is returned. Help for ndi.element.timeseries/doc_unique_id is inherited from superclass ndi.element elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ) Returns the name as a human-readable string. For ndi.element objects, this is the string 'element: ' followed by its name Help for ndi.element.timeseries/elementstring is inherited from superclass ndi.element epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.element.timeseries/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_ELEMENT_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch. The ndi.element class always returns the clock type(s) of the element it is based on Help for ndi.element.timeseries/epochclock is inherited from superclass ndi.element epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.element.timeseries/epochgraph is inherited from superclass ndi.epoch.epochset epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string. The abstract class just queries the EPOCHTABLE. Most classes that manage epochs themselves (ndi.file.navigator, ndi.daq.system) will override this method. Help for ndi.element.timeseries/epochid is inherited from superclass ndi.epoch.epochset epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.element.timeseries/epochnodes is inherited from superclass ndi.epoch.epochset epochsetname - the name of the ndi.element object, for EPOCHNODES NAME = EPOCHSETNAME(NDI_ELEMENT_OBJ) Returns the object name that is used when creating epoch nodes. For ndi.element objects, this is ndi.element/ELEMENTSTRING. Help for ndi.element.timeseries/epochsetname is inherited from superclass ndi.element epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.element.timeseries/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.element.timeseries/epochtableentry is inherited from superclass ndi.epoch.epochset getcache - return the NDI_CACHE and key for ndi.element [CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ) Returns the CACHE and KEY for the ndi.element object. The CACHE is returned from the associated session. The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT. See also: ndi.file.navigator Help for ndi.element.timeseries/getcache is inherited from superclass ndi.element getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.element.timeseries/getepocharray is inherited from superclass ndi.epoch.epochset ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.element.timeseries.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then an error is returned. Help for ndi.element.timeseries/id is inherited from superclass ndi.element issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_ELEMENT_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.element objects, this returns 0 so that underlying ndi.probe epochs are added. Help for ndi.element.timeseries/issyncgraphroot is inherited from superclass ndi.element isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.element.timeseries.isvalid is inherited from superclass did.ido load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ) Loads the ndi.document that is based on the ndi.element object and any associated epoch documents. Help for ndi.element.timeseries/load_all_element_docs is inherited from superclass ndi.element load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ) Load an ndi.document that is based on the ndi.element object. Returns empty if there is no such document. Help for ndi.element.timeseries/load_element_doc is inherited from superclass ndi.element loadaddedepochs - load the added epochs from an ndi.element [ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ) Load the EPOCHTABLE that consists of added/registered epochs that provide information about the ndi.element. Help for ndi.element.timeseries/loadaddedepochs is inherited from superclass ndi.element matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.element.timeseries/matchedepochtable is inherited from superclass ndi.epoch.epochset newdocument - Todo: need docs here numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.element.timeseries/numepochs is inherited from superclass ndi.epoch.epochset readtimeseries - read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch [DATA, T, TIMEREF] = READTIMESERIES(NDI_ELEMENT_TIMESERIES_OBJ, TIMEREF_OR_EPOCH, T0, T1) Reads timeseries data from an ndi.element.timeseries object. The DATA and time information T that are returned depend on the the specific subclass of ndi.element.timeseries that is called (see READTIMESERIESEPOCH). In the base class, this function merely calls the element's probe's READTIMESERIES function. TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the time reference for T0, T1, or it can be a single number, which will indicate the data are to be read from that epoch. DATA is the data for the probe. T is a time structure, in units of TIMEREF if it is an ndi.time.timereference object or in units of the epoch if an epoch is passed. The TIMEREF is returned. resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.element.timeseries/EPOCHTABLE Help for ndi.element.timeseries/resetepochtable is inherited from superclass ndi.epoch.epochset samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLERATE(NDI_TIMESERIES_OBJ, EPOCH) Returns the sampling rate of a given ndi.time.timeseries object for the epoch EPOCH. EPOCH can be specified as an index or EPOCH_ID. If NDI_TIMESERIES_OBJ is not regularly sampled, then -1 is returned. Help for ndi.element.timeseries/samplerate is inherited from superclass ndi.time.timeseries samples2times - convert from the timeseries time to sample numbers SAMPLES = SAMPLES2TIMES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. TODO: convert times to dev_local_clock Help for ndi.element.timeseries/samples2times is inherited from superclass ndi.time.timeseries searchquery - Todo: need docs here t0_t1 - ** T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK TODO: this must be a bug, it's just self-referential Help for ndi.element.timeseries/t0_t1 is inherited from superclass ndi.element times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. Help for ndi.element.timeseries/times2samples is inherited from superclass ndi.time.timeseries timeseries - define or examine a element in the session Documentation for ndi.element.timeseries/timeseries doc ndi.element.timeseries underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.element.timeseries/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.element.timeseries.unique_id is inherited from superclass did.ido","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap.m/","text":"CLASS ndi.epoch.epochprobemap ndi.epoch.epochprobemap - Create a new ndi.epoch.epochprobemap object MYNDI_EPOCHPROBEMAP = ndi.epoch.epochprobemap() Creates a new ndi.epoch.epochprobemap object. This is an abstract base class so it has no inputs. Superclasses none Properties none Methods Method Description decode decode table information for an ndi.epoch.epochprobemap object from a serialized string epochprobemap Create a new ndi.epoch.epochprobemap object serialize Turn the ndi.epoch.epochprobemap object into a string Methods help decode - decode table information for an ndi.epoch.epochprobemap object from a serialized string ST = DECODE(S) Return a structure ST that contains decoded information to build an ndi.epoch.epochprobemap object from a string epochprobemap - Create a new ndi.epoch.epochprobemap object MYNDI_EPOCHPROBEMAP = ndi.epoch.epochprobemap() Creates a new ndi.epoch.epochprobemap object. This is an abstract base class so it has no inputs. Documentation for ndi.epoch.epochprobemap/epochprobemap doc ndi.epoch.epochprobemap serialize - Turn the ndi.epoch.epochprobemap object into a string S = SERIALIZE(NDI_EPOCHPROBEMAP_OBJ) Create a character array representation of an ndi.epoch.epochprobemap object","title":"ndi.epoch.epochprobemap"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap.m/#class-ndiepochepochprobemap","text":"ndi.epoch.epochprobemap - Create a new ndi.epoch.epochprobemap object MYNDI_EPOCHPROBEMAP = ndi.epoch.epochprobemap() Creates a new ndi.epoch.epochprobemap object. This is an abstract base class so it has no inputs.","title":"CLASS ndi.epoch.epochprobemap"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap.m/#properties","text":"none","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap.m/#methods","text":"Method Description decode decode table information for an ndi.epoch.epochprobemap object from a serialized string epochprobemap Create a new ndi.epoch.epochprobemap object serialize Turn the ndi.epoch.epochprobemap object into a string","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap.m/#methods-help","text":"decode - decode table information for an ndi.epoch.epochprobemap object from a serialized string ST = DECODE(S) Return a structure ST that contains decoded information to build an ndi.epoch.epochprobemap object from a string epochprobemap - Create a new ndi.epoch.epochprobemap object MYNDI_EPOCHPROBEMAP = ndi.epoch.epochprobemap() Creates a new ndi.epoch.epochprobemap object. This is an abstract base class so it has no inputs. Documentation for ndi.epoch.epochprobemap/epochprobemap doc ndi.epoch.epochprobemap serialize - Turn the ndi.epoch.epochprobemap object into a string S = SERIALIZE(NDI_EPOCHPROBEMAP_OBJ) Create a character array representation of an ndi.epoch.epochprobemap object","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap_daqsystem.m/","text":"CLASS ndi.epoch.epochprobemap_daqsystem ndi.epoch.epochprobemap_daqsystem - Create a new ndi.epoch.epochprobemap_daqsystem object MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(NAME, REFERENCE, TYPE, DEVICESTRING, SUBJECTSTRING) Creates a new ndi.epoch.epochprobemap_daqsystem with name NAME, reference REFERENCE, type TYPE, and devicestring DEVICESTRING. NAME can be any string that begins with a letter and contains no whitespace. It is CASE SENSITIVE. REFERENCE must be a non-negative scalar integer. TYPE is the type of recording. DEVICESTRING is a string that indicates the channels that were used to acquire this record. SUBJECTSTRING describes the subject of the probe, either using the unique local identifier or the document unique identifier (ID) of the ndi.document that describes the subject. The function has an alternative form: MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(FILENAME) Here, FILENAME is assumed to be a tab-delimitted text file with a header row that has entries 'name<tab>reference<tab>type<tab>devicestring<tab><subjectstring>', with one line per ndi.epoch.epochprobemap_daqsystem entry. Superclasses ndi.epoch.epochprobemap Properties Property Description name Name of the contents; can by any string that begins with a letter and contains no whitespace reference A non-negative scalar integer reference number that uniquely identifies data records that can be combined type The type of recording that is present in the data devicestring An ndi.daq.daqsystemstring that indicates the device and channels that comprise the data subjectstring A string describing the local_id or unique document ID of the subject of the probe Methods Method Description decode decode table information for an ndi.epoch.epochprobemap object from a serialized string epochprobemap_daqsystem Create a new ndi.epoch.epochprobemap_daqsystem object savetofile Write ndi.epoch.epochprobemap_daqsystem object array to disk serialization_struct create a Matlab structure for serialization serialize Turn the ndi.epoch.epochprobemap object into a string Methods help decode - decode table information for an ndi.epoch.epochprobemap object from a serialized string ST = DECODE(S) Return a structure ST that contains decoded information to build an ndi.epoch.epochprobemap object from a string epochprobemap_daqsystem - Create a new ndi.epoch.epochprobemap_daqsystem object MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(NAME, REFERENCE, TYPE, DEVICESTRING, SUBJECTSTRING) Creates a new ndi.epoch.epochprobemap_daqsystem with name NAME, reference REFERENCE, type TYPE, and devicestring DEVICESTRING. NAME can be any string that begins with a letter and contains no whitespace. It is CASE SENSITIVE. REFERENCE must be a non-negative scalar integer. TYPE is the type of recording. DEVICESTRING is a string that indicates the channels that were used to acquire this record. SUBJECTSTRING describes the subject of the probe, either using the unique local identifier or the document unique identifier (ID) of the ndi.document that describes the subject. The function has an alternative form: MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(FILENAME) Here, FILENAME is assumed to be a tab-delimitted text file with a header row that has entries 'name<tab>reference<tab>type<tab>devicestring<tab><subjectstring>', with one line per ndi.epoch.epochprobemap_daqsystem entry. Documentation for ndi.epoch.epochprobemap_daqsystem/epochprobemap_daqsystem doc ndi.epoch.epochprobemap_daqsystem savetofile - Write ndi.epoch.epochprobemap_daqsystem object array to disk SAVETOFILE(NDI_EPOCHPROBEMAP_DAQSYSTEM_OBJ, FILENAME) Writes the ndi.epoch.epochprobemap_daqsystem object to disk in filename FILENAME (full path). serialization_struct - create a Matlab structure for serialization ST = SERIALIZATION_STRUCT(NDI_EPOCHPROBEMAP_DAQSYSTEM_OBJ) Returns a structure of the parameters of an ndi.epoch.epochprobemap_daqsystem object. serialize - Turn the ndi.epoch.epochprobemap object into a string S = SERIALIZE(NDI_EPOCHPROBEMAP_OBJ) Create a character array representation of an ndi.epoch.epochprobemap_daqsystem object","title":"ndi.epoch.epochprobemap_daqsystem"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap_daqsystem.m/#class-ndiepochepochprobemap_daqsystem","text":"ndi.epoch.epochprobemap_daqsystem - Create a new ndi.epoch.epochprobemap_daqsystem object MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(NAME, REFERENCE, TYPE, DEVICESTRING, SUBJECTSTRING) Creates a new ndi.epoch.epochprobemap_daqsystem with name NAME, reference REFERENCE, type TYPE, and devicestring DEVICESTRING. NAME can be any string that begins with a letter and contains no whitespace. It is CASE SENSITIVE. REFERENCE must be a non-negative scalar integer. TYPE is the type of recording. DEVICESTRING is a string that indicates the channels that were used to acquire this record. SUBJECTSTRING describes the subject of the probe, either using the unique local identifier or the document unique identifier (ID) of the ndi.document that describes the subject. The function has an alternative form: MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(FILENAME) Here, FILENAME is assumed to be a tab-delimitted text file with a header row that has entries 'name<tab>reference<tab>type<tab>devicestring<tab><subjectstring>', with one line per ndi.epoch.epochprobemap_daqsystem entry.","title":"CLASS ndi.epoch.epochprobemap_daqsystem"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap_daqsystem.m/#superclasses","text":"ndi.epoch.epochprobemap","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap_daqsystem.m/#properties","text":"Property Description name Name of the contents; can by any string that begins with a letter and contains no whitespace reference A non-negative scalar integer reference number that uniquely identifies data records that can be combined type The type of recording that is present in the data devicestring An ndi.daq.daqsystemstring that indicates the device and channels that comprise the data subjectstring A string describing the local_id or unique document ID of the subject of the probe","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap_daqsystem.m/#methods","text":"Method Description decode decode table information for an ndi.epoch.epochprobemap object from a serialized string epochprobemap_daqsystem Create a new ndi.epoch.epochprobemap_daqsystem object savetofile Write ndi.epoch.epochprobemap_daqsystem object array to disk serialization_struct create a Matlab structure for serialization serialize Turn the ndi.epoch.epochprobemap object into a string","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap_daqsystem.m/#methods-help","text":"decode - decode table information for an ndi.epoch.epochprobemap object from a serialized string ST = DECODE(S) Return a structure ST that contains decoded information to build an ndi.epoch.epochprobemap object from a string epochprobemap_daqsystem - Create a new ndi.epoch.epochprobemap_daqsystem object MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(NAME, REFERENCE, TYPE, DEVICESTRING, SUBJECTSTRING) Creates a new ndi.epoch.epochprobemap_daqsystem with name NAME, reference REFERENCE, type TYPE, and devicestring DEVICESTRING. NAME can be any string that begins with a letter and contains no whitespace. It is CASE SENSITIVE. REFERENCE must be a non-negative scalar integer. TYPE is the type of recording. DEVICESTRING is a string that indicates the channels that were used to acquire this record. SUBJECTSTRING describes the subject of the probe, either using the unique local identifier or the document unique identifier (ID) of the ndi.document that describes the subject. The function has an alternative form: MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(FILENAME) Here, FILENAME is assumed to be a tab-delimitted text file with a header row that has entries 'name<tab>reference<tab>type<tab>devicestring<tab><subjectstring>', with one line per ndi.epoch.epochprobemap_daqsystem entry. Documentation for ndi.epoch.epochprobemap_daqsystem/epochprobemap_daqsystem doc ndi.epoch.epochprobemap_daqsystem savetofile - Write ndi.epoch.epochprobemap_daqsystem object array to disk SAVETOFILE(NDI_EPOCHPROBEMAP_DAQSYSTEM_OBJ, FILENAME) Writes the ndi.epoch.epochprobemap_daqsystem object to disk in filename FILENAME (full path). serialization_struct - create a Matlab structure for serialization ST = SERIALIZATION_STRUCT(NDI_EPOCHPROBEMAP_DAQSYSTEM_OBJ) Returns a structure of the parameters of an ndi.epoch.epochprobemap_daqsystem object. serialize - Turn the ndi.epoch.epochprobemap object into a string S = SERIALIZE(NDI_EPOCHPROBEMAP_OBJ) Create a character array representation of an ndi.epoch.epochprobemap_daqsystem object","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochrange.m/","text":"ndi.epoch.epochrange EPOCHRANGE - return a range of epochs between a first and last epoch [ER,ET,T0_T1] = EPOCHRANGE(NDI_EPOCHSET_OBJ, CLOCKTYPE, FIRSTEPOCH, LASTEPOCH) Examine the NDI_EPOCHSET_OBJ and return the epochs between FIRSTEPOCH and LASTEPOCH. FIRSTEPOCH and LASTEPOCH can be number or epoch_ids. Only epochs with a CLOCKTYPE are considered matches. NDI_EPOCHSET_OBJ must be of type ndi.epoch.epochset. ER is a cell array of epoch_ids spanning FIRSTEPOCH and LASTEPOCH, inclusive. ET is the epochtable of the NDI_EPOCHSET_OBJ. T0_T1 (Nx2) are values of T0 and T1 for the given CLOCKTYPE for each epoch. Example: er = ndi.epoch.epochrange(myprobe,2,4);","title":"ndi.epoch.epochrange"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochrange.m/#ndiepochepochrange","text":"EPOCHRANGE - return a range of epochs between a first and last epoch [ER,ET,T0_T1] = EPOCHRANGE(NDI_EPOCHSET_OBJ, CLOCKTYPE, FIRSTEPOCH, LASTEPOCH) Examine the NDI_EPOCHSET_OBJ and return the epochs between FIRSTEPOCH and LASTEPOCH. FIRSTEPOCH and LASTEPOCH can be number or epoch_ids. Only epochs with a CLOCKTYPE are considered matches. NDI_EPOCHSET_OBJ must be of type ndi.epoch.epochset. ER is a cell array of epoch_ids spanning FIRSTEPOCH and LASTEPOCH, inclusive. ET is the epochtable of the NDI_EPOCHSET_OBJ. T0_T1 (Nx2) are values of T0 and T1 for the given CLOCKTYPE for each epoch. Example: er = ndi.epoch.epochrange(myprobe,2,4);","title":"ndi.epoch.epochrange"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochset.m/","text":"CLASS ndi.epoch.epochset NDI_EPOCHSET - routines for managing a set of epochs and their dependencies Superclasses none Properties none Methods Method Description buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build and store an epoch table that relates the current object's epochs to underlying epochs cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochset constructor for ndi.epoch.epochset objects epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID getcache return the NDI_CACHE and key for an ndi.epoch.epochset object getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? matchedepochtable compare a hash number from an epochtable to the current version numepochs Number of epochs of ndi.epoch.epochset resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode Methods help buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.epoch.epochset/EPOCHNODES buildepochtable - Build and store an epoch table that relates the current object's epochs to underlying epochs [ET] = BUILDEPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', 'epochprobemap', and 'epoch_clock' After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). The abstract class always returns ndi.time.clocktype('no_time') See also: ndi.time.clocktype, T0_T1 epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string. The abstract class just queries the EPOCHTABLE. Most classes that manage epochs themselves (ndi.file.navigator, ndi.daq.system) will override this method. epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. epochset - constructor for ndi.epoch.epochset objects NDI_EPOCHSET_OBJ = ndi.epoch.epochset() This class has no parameters so the constructor is called with no input arguments. Documentation for ndi.epoch.epochset/epochset doc ndi.epoch.epochset epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME(NDI_EPOCHSET_OBJ) Returns the object name that is used when creating epoch nodes. If the class has a 'name' property, that property is used. Otherwise, 'unknown' is used. epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. getcache - return the NDI_CACHE and key for an ndi.epoch.epochset object [CACHE, KEY] = GETCACHE(NDI_EPOCHSET_OBJ) Returns the NDI_CACHE object CACHE and the KEY used by the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. In this abstract class, no cache is available, so CACHE and KEY are empty. But subclasses can engage the cache services of the class by returning an NDI_CACHE object and a unique key. getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset objects, this returns 1. For some object types (ndi.probe.*, for example) this will return 0 so that the underlying ndi.daq.system epochs are added. matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.epoch.epochset/EPOCHTABLE t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT","title":"ndi.epoch.epochset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochset.m/#class-ndiepochepochset","text":"NDI_EPOCHSET - routines for managing a set of epochs and their dependencies","title":"CLASS ndi.epoch.epochset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochset.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochset.m/#properties","text":"none","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochset.m/#methods","text":"Method Description buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build and store an epoch table that relates the current object's epochs to underlying epochs cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochset constructor for ndi.epoch.epochset objects epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID getcache return the NDI_CACHE and key for an ndi.epoch.epochset object getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? matchedepochtable compare a hash number from an epochtable to the current version numepochs Number of epochs of ndi.epoch.epochset resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochset.m/#methods-help","text":"buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.epoch.epochset/EPOCHNODES buildepochtable - Build and store an epoch table that relates the current object's epochs to underlying epochs [ET] = BUILDEPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', 'epochprobemap', and 'epoch_clock' After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). The abstract class always returns ndi.time.clocktype('no_time') See also: ndi.time.clocktype, T0_T1 epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string. The abstract class just queries the EPOCHTABLE. Most classes that manage epochs themselves (ndi.file.navigator, ndi.daq.system) will override this method. epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. epochset - constructor for ndi.epoch.epochset objects NDI_EPOCHSET_OBJ = ndi.epoch.epochset() This class has no parameters so the constructor is called with no input arguments. Documentation for ndi.epoch.epochset/epochset doc ndi.epoch.epochset epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME(NDI_EPOCHSET_OBJ) Returns the object name that is used when creating epoch nodes. If the class has a 'name' property, that property is used. Otherwise, 'unknown' is used. epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. getcache - return the NDI_CACHE and key for an ndi.epoch.epochset object [CACHE, KEY] = GETCACHE(NDI_EPOCHSET_OBJ) Returns the NDI_CACHE object CACHE and the KEY used by the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. In this abstract class, no cache is available, so CACHE and KEY are empty. But subclasses can engage the cache services of the class by returning an NDI_CACHE object and a unique key. getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset objects, this returns 1. For some object types (ndi.probe.*, for example) this will return 0 so that the underlying ndi.daq.system epochs are added. matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.epoch.epochset/EPOCHTABLE t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/findepochnode.m/","text":"ndi.epoch.findepochnode FINDEPOCHNODE - find an occurrence of an epochnode in an array of epochnodes INDEX = ndi.epoch.findepochnode(EPOCHNODE, EPOCHNODEARRAY) Returns the index of any occurrence(s) of EPOCHNODE in EPOCHNODEARRAY. EPOCHNODE and EPOCHNODEARRAY should be structures of the type returned by ndi.epoch.epochset/EPOCHNODES. EPOCHNODE should be a single element, and EPOCHNODEARRAY can be an array of epochnode structures. If any fields of EPOCHNODE are empty or are not present in the structure, then that field is not searched over. Thus, INDEX can be an array of all nodes that match the other criteria. If EPOCHNODE is fully filled, then only exact matches are returned. Note: at present, the 'epochprobemap' field is not compared. See also: ndi.epoch.epochset/EPOCHNODES","title":"ndi.epoch.findepochnode"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/findepochnode.m/#ndiepochfindepochnode","text":"FINDEPOCHNODE - find an occurrence of an epochnode in an array of epochnodes INDEX = ndi.epoch.findepochnode(EPOCHNODE, EPOCHNODEARRAY) Returns the index of any occurrence(s) of EPOCHNODE in EPOCHNODEARRAY. EPOCHNODE and EPOCHNODEARRAY should be structures of the type returned by ndi.epoch.epochset/EPOCHNODES. EPOCHNODE should be a single element, and EPOCHNODEARRAY can be an array of epochnode structures. If any fields of EPOCHNODE are empty or are not present in the structure, then that field is not searched over. Thus, INDEX can be an array of all nodes that match the other criteria. If EPOCHNODE is fully filled, then only exact matches are returned. Note: at present, the 'epochprobemap' field is not compared. See also: ndi.epoch.epochset/EPOCHNODES","title":"ndi.epoch.findepochnode"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/%2Bepochset/param.m/","text":"CLASS ndi.epoch.epochset.param NDI_EPOCHSET_PARAM - special class of NDI_EPOCHSET that can read/write parameters about epochs Superclasses ndi.epoch.epochset Properties Property Description epochprobemap_class The (sub)class of ndi.epoch.epochprobemap_daqsystem to be used; NDI_EPOCHCONTS is the default; a string Methods Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build and store an epoch table that relates the current object's epochs to underlying epochs cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch getcache return the NDI_CACHE and key for an ndi.epoch.epochset object getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs getepochprobemap Return the epoch record for a given ndi.epoch.epochset.param epoch number getepochtag Get tag(s) from an epoch ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? matchedepochtable compare a hash number from an epochtable to the current version numepochs Number of epochs of ndi.epoch.epochset param Constructor for ndi.epoch.epochset.param objects removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk setepochprobemap Sets the epoch record of a particular epoch setepochtag Set tag(s) for an epoch t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode verifyepochprobemap Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object Methods help addepochtag - Add tag(s) for an epoch ADDEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will be added to any tags in the epoch EPOCHNUMBER. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.epoch.epochset.param/EPOCHNODES Help for ndi.epoch.epochset.param/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - Build and store an epoch table that relates the current object's epochs to underlying epochs [ET] = BUILDEPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', 'epochprobemap', and 'epoch_clock' After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.epoch.epochset.param/buildepochtable is inherited from superclass ndi.epoch.epochset cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.epoch.epochset.param.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.epoch.epochset.param/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.epoch.epochset.param/cached_epochtable is inherited from superclass ndi.epoch.epochset epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.epoch.epochset.param/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). The abstract class always returns ndi.time.clocktype('no_time') See also: ndi.time.clocktype, T0_T1 Help for ndi.epoch.epochset.param/epochclock is inherited from superclass ndi.epoch.epochset epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.epoch.epochset.param/epochgraph is inherited from superclass ndi.epoch.epochset epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string. The abstract class just queries the EPOCHTABLE. Most classes that manage epochs themselves (ndi.file.navigator, ndi.daq.system) will override this method. Help for ndi.epoch.epochset.param/epochid is inherited from superclass ndi.epoch.epochset epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.epoch.epochset.param/epochnodes is inherited from superclass ndi.epoch.epochset epochprobemapfilename - return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME(NDI_EPOCHSET_PARAM_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHPROBEMAPFILENAME for the NDI_EPOCHSET_PARAM_OBJ epoch EPOCH_NUMBER_OR_ID. If there is no epoch NUMBER, an error is generated. The file name is returned with a full path. In this abstract class, an error is always generated. It must be overridden by child classes. epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME(NDI_EPOCHSET_OBJ) Returns the object name that is used when creating epoch nodes. If the class has a 'name' property, that property is used. Otherwise, 'unknown' is used. Help for ndi.epoch.epochset.param/epochsetname is inherited from superclass ndi.epoch.epochset epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.epoch.epochset.param/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.epoch.epochset.param/epochtableentry is inherited from superclass ndi.epoch.epochset epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER) In this base class, empty is returned because it is an abstract class. getcache - return the NDI_CACHE and key for an ndi.epoch.epochset object [CACHE, KEY] = GETCACHE(NDI_EPOCHSET_OBJ) Returns the NDI_CACHE object CACHE and the KEY used by the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. In this abstract class, no cache is available, so CACHE and KEY are empty. But subclasses can engage the cache services of the class by returning an NDI_CACHE object and a unique key. Help for ndi.epoch.epochset.param/getcache is inherited from superclass ndi.epoch.epochset getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.epoch.epochset.param/getepocharray is inherited from superclass ndi.epoch.epochset getepochprobemap - Return the epoch record for a given ndi.epoch.epochset.param epoch number EPOCHPROBEMAP = GETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, N) Inputs: NDI_EPOCHSET_PARAM_OBJ - the ndi.epoch.epochset.param object N - the epoch number or identifier Output: EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. If there are no files in EPOCHNUMBER then an error is returned. ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.epoch.epochset.param.ginfo2cache is inherited from superclass ndi.epoch.epochset issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset objects, this returns 1. For some object types (ndi.probe.*, for example) this will return 0 so that the underlying ndi.daq.system epochs are added. Help for ndi.epoch.epochset.param/issyncgraphroot is inherited from superclass ndi.epoch.epochset matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.epoch.epochset.param/matchedepochtable is inherited from superclass ndi.epoch.epochset numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.epoch.epochset.param/numepochs is inherited from superclass ndi.epoch.epochset param - Constructor for ndi.epoch.epochset.param objects NDI_EPOCHSET_PARAM_OBJ = ndi.epoch.epochset.param(EPOCHPROBEMAP_CLASS) Create a new ndi.epoch.epochset.param object. It has one optional input argument, EPOCHPROBEMAP_CLASS, a string, that specifies the name of the class or subclass of ndi.epoch.epochprobemap_daqsystem to be used. Documentation for ndi.epoch.epochset.param/param doc ndi.epoch.epochset.param removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG(NDI_EPOCH_PARAM_OBJ, EPOCHNUMBER, NAME) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. Any tags with name 'NAME' will be removed from the tags in the epoch EPOCHNUMBER. tags in the epoch directory. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. NAME can be a single string, or it can be a cell array of strings (which will result in the removal of multiple tags). resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.epoch.epochset.param/EPOCHTABLE Help for ndi.epoch.epochset.param/resetepochtable is inherited from superclass ndi.epoch.epochset setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, EPOCHPROBEMAP, NUMBER, [OVERWRITE]) Sets or replaces the ndi.epoch.epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER. If OVERWRITE is present and is 1, then any existing epoch record is overwritten. Otherwise, an error is given if there is an existing epoch record. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem setepochtag - Set tag(s) for an epoch SETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will replace any tags in the epoch directory. If there is no epoch EPOCHNUMBER, then an error is returned. t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.epoch.epochset.param/t0_t1 is inherited from superclass ndi.epoch.epochset underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.epoch.epochset.param/underlyingepochnodes is inherited from superclass ndi.epoch.epochset verifyepochprobemap - Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object [B,MSG] = VERIFYEPOCHPROBEMAP(ndi.epoch.epochset.param, EPOCHPROBEMAP, EPOCH_NUMBER_OR_ID) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given epoch number or epoch id EPOCH_NUMBER_OR_ID. For the abstract class EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. If B is 0, then the error message is returned in MSG. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem","title":"ndi.epoch.epochset.param"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/%2Bepochset/param.m/#class-ndiepochepochsetparam","text":"NDI_EPOCHSET_PARAM - special class of NDI_EPOCHSET that can read/write parameters about epochs","title":"CLASS ndi.epoch.epochset.param"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/%2Bepochset/param.m/#superclasses","text":"ndi.epoch.epochset","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/%2Bepochset/param.m/#properties","text":"Property Description epochprobemap_class The (sub)class of ndi.epoch.epochprobemap_daqsystem to be used; NDI_EPOCHCONTS is the default; a string","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/%2Bepochset/param.m/#methods","text":"Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build and store an epoch table that relates the current object's epochs to underlying epochs cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch getcache return the NDI_CACHE and key for an ndi.epoch.epochset object getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs getepochprobemap Return the epoch record for a given ndi.epoch.epochset.param epoch number getepochtag Get tag(s) from an epoch ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? matchedepochtable compare a hash number from an epochtable to the current version numepochs Number of epochs of ndi.epoch.epochset param Constructor for ndi.epoch.epochset.param objects removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk setepochprobemap Sets the epoch record of a particular epoch setepochtag Set tag(s) for an epoch t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode verifyepochprobemap Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/%2Bepochset/param.m/#methods-help","text":"addepochtag - Add tag(s) for an epoch ADDEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will be added to any tags in the epoch EPOCHNUMBER. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.epoch.epochset.param/EPOCHNODES Help for ndi.epoch.epochset.param/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - Build and store an epoch table that relates the current object's epochs to underlying epochs [ET] = BUILDEPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', 'epochprobemap', and 'epoch_clock' After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.epoch.epochset.param/buildepochtable is inherited from superclass ndi.epoch.epochset cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.epoch.epochset.param.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.epoch.epochset.param/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.epoch.epochset.param/cached_epochtable is inherited from superclass ndi.epoch.epochset epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.epoch.epochset.param/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). The abstract class always returns ndi.time.clocktype('no_time') See also: ndi.time.clocktype, T0_T1 Help for ndi.epoch.epochset.param/epochclock is inherited from superclass ndi.epoch.epochset epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.epoch.epochset.param/epochgraph is inherited from superclass ndi.epoch.epochset epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string. The abstract class just queries the EPOCHTABLE. Most classes that manage epochs themselves (ndi.file.navigator, ndi.daq.system) will override this method. Help for ndi.epoch.epochset.param/epochid is inherited from superclass ndi.epoch.epochset epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.epoch.epochset.param/epochnodes is inherited from superclass ndi.epoch.epochset epochprobemapfilename - return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME(NDI_EPOCHSET_PARAM_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHPROBEMAPFILENAME for the NDI_EPOCHSET_PARAM_OBJ epoch EPOCH_NUMBER_OR_ID. If there is no epoch NUMBER, an error is generated. The file name is returned with a full path. In this abstract class, an error is always generated. It must be overridden by child classes. epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME(NDI_EPOCHSET_OBJ) Returns the object name that is used when creating epoch nodes. If the class has a 'name' property, that property is used. Otherwise, 'unknown' is used. Help for ndi.epoch.epochset.param/epochsetname is inherited from superclass ndi.epoch.epochset epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.epoch.epochset.param/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.epoch.epochset.param/epochtableentry is inherited from superclass ndi.epoch.epochset epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER) In this base class, empty is returned because it is an abstract class. getcache - return the NDI_CACHE and key for an ndi.epoch.epochset object [CACHE, KEY] = GETCACHE(NDI_EPOCHSET_OBJ) Returns the NDI_CACHE object CACHE and the KEY used by the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. In this abstract class, no cache is available, so CACHE and KEY are empty. But subclasses can engage the cache services of the class by returning an NDI_CACHE object and a unique key. Help for ndi.epoch.epochset.param/getcache is inherited from superclass ndi.epoch.epochset getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.epoch.epochset.param/getepocharray is inherited from superclass ndi.epoch.epochset getepochprobemap - Return the epoch record for a given ndi.epoch.epochset.param epoch number EPOCHPROBEMAP = GETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, N) Inputs: NDI_EPOCHSET_PARAM_OBJ - the ndi.epoch.epochset.param object N - the epoch number or identifier Output: EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. If there are no files in EPOCHNUMBER then an error is returned. ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.epoch.epochset.param.ginfo2cache is inherited from superclass ndi.epoch.epochset issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset objects, this returns 1. For some object types (ndi.probe.*, for example) this will return 0 so that the underlying ndi.daq.system epochs are added. Help for ndi.epoch.epochset.param/issyncgraphroot is inherited from superclass ndi.epoch.epochset matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.epoch.epochset.param/matchedepochtable is inherited from superclass ndi.epoch.epochset numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.epoch.epochset.param/numepochs is inherited from superclass ndi.epoch.epochset param - Constructor for ndi.epoch.epochset.param objects NDI_EPOCHSET_PARAM_OBJ = ndi.epoch.epochset.param(EPOCHPROBEMAP_CLASS) Create a new ndi.epoch.epochset.param object. It has one optional input argument, EPOCHPROBEMAP_CLASS, a string, that specifies the name of the class or subclass of ndi.epoch.epochprobemap_daqsystem to be used. Documentation for ndi.epoch.epochset.param/param doc ndi.epoch.epochset.param removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG(NDI_EPOCH_PARAM_OBJ, EPOCHNUMBER, NAME) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. Any tags with name 'NAME' will be removed from the tags in the epoch EPOCHNUMBER. tags in the epoch directory. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. NAME can be a single string, or it can be a cell array of strings (which will result in the removal of multiple tags). resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.epoch.epochset.param/EPOCHTABLE Help for ndi.epoch.epochset.param/resetepochtable is inherited from superclass ndi.epoch.epochset setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, EPOCHPROBEMAP, NUMBER, [OVERWRITE]) Sets or replaces the ndi.epoch.epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER. If OVERWRITE is present and is 1, then any existing epoch record is overwritten. Otherwise, an error is given if there is an existing epoch record. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem setepochtag - Set tag(s) for an epoch SETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will replace any tags in the epoch directory. If there is no epoch EPOCHNUMBER, then an error is returned. t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.epoch.epochset.param/t0_t1 is inherited from superclass ndi.epoch.epochset underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.epoch.epochset.param/underlyingepochnodes is inherited from superclass ndi.epoch.epochset verifyepochprobemap - Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object [B,MSG] = VERIFYEPOCHPROBEMAP(ndi.epoch.epochset.param, EPOCHPROBEMAP, EPOCH_NUMBER_OR_ID) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given epoch number or epoch id EPOCH_NUMBER_OR_ID. For the abstract class EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. If B is 0, then the error message is returned in MSG. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/element2spiketimes.m/","text":"ndi.example.fun.element2spiketimes ELEMENT2SPIKETIMES - retrieve spike times from an element SPIKESTRUCT = ELEMENT2SPIKETIMES(E, ED) Given an element E and its corresponding element document ED, this function retrieves all spike times and related information. It returns a structure: |----------------|----------------------------------------| | Field | Description | |----------------|----------------------------------------| | element_info | Information about the element | | epoch_data | A structure with fields of all the data| | epoch_id | Epoch ID | | spiketimes | Spike times in the local epoch clock | | t0_t1 | Start and end times of the epoch in the| | | local epoch clock | | neuron_info | Extracellular spike info (if available)| |----------------|----------------------------------------| This function assumes that E is an element of type 'spikes'. Example: [ed, e] = ndi.example.fun.probe2elements(probe, 'type', 'spikes'); spikeStruct = element2spiketimes(e{1}, ed{1});","title":"ndi.example.fun.element2spiketimes"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/element2spiketimes.m/#ndiexamplefunelement2spiketimes","text":"ELEMENT2SPIKETIMES - retrieve spike times from an element SPIKESTRUCT = ELEMENT2SPIKETIMES(E, ED) Given an element E and its corresponding element document ED, this function retrieves all spike times and related information. It returns a structure: |----------------|----------------------------------------| | Field | Description | |----------------|----------------------------------------| | element_info | Information about the element | | epoch_data | A structure with fields of all the data| | epoch_id | Epoch ID | | spiketimes | Spike times in the local epoch clock | | t0_t1 | Start and end times of the epoch in the| | | local epoch clock | | neuron_info | Extracellular spike info (if available)| |----------------|----------------------------------------| This function assumes that E is an element of type 'spikes'. Example: [ed, e] = ndi.example.fun.probe2elements(probe, 'type', 'spikes'); spikeStruct = element2spiketimes(e{1}, ed{1});","title":"ndi.example.fun.element2spiketimes"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/find_epochids_with_temperature.m/","text":"ndi.example.fun.find_epochids_with_temperature FIND_EPOCHIDS_WITH_TEMPERATURE - Find all epochids where the temperature was held constant at a specified value EPOCH_IDS = FIND_EPOCHIDS_WITH_TEMPERATURE(NDI_SESSION_OR_DATASET_OBJ, TEMPERATURE) This function searches for all epochs in an NDI session or dataset where the temperature was held constant at a specified value. It returns a cell array of epoch IDs. Inputs: NDI_SESSION_OR_DATASET_OBJ: An ndi.session object or an ndi.dataset object representing the session or dataset to search. TEMPERATURE: The temperature value to search for in degrees Celsius. Outputs: EPOCH_IDS: A cell array of epoch IDs where the specified temperature was held constant. Example: % Find all epochids where the temperature was held constant at 15 degrees Celsius epoch_ids = ndi.example.fun.find_epochids_with_temperature(my_ndi_session, 15);","title":"ndi.example.fun.find_epochids_with_temperature"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/find_epochids_with_temperature.m/#ndiexamplefunfind_epochids_with_temperature","text":"FIND_EPOCHIDS_WITH_TEMPERATURE - Find all epochids where the temperature was held constant at a specified value EPOCH_IDS = FIND_EPOCHIDS_WITH_TEMPERATURE(NDI_SESSION_OR_DATASET_OBJ, TEMPERATURE) This function searches for all epochs in an NDI session or dataset where the temperature was held constant at a specified value. It returns a cell array of epoch IDs. Inputs: NDI_SESSION_OR_DATASET_OBJ: An ndi.session object or an ndi.dataset object representing the session or dataset to search. TEMPERATURE: The temperature value to search for in degrees Celsius. Outputs: EPOCH_IDS: A cell array of epoch IDs where the specified temperature was held constant. Example: % Find all epochids where the temperature was held constant at 15 degrees Celsius epoch_ids = ndi.example.fun.find_epochids_with_temperature(my_ndi_session, 15);","title":"ndi.example.fun.find_epochids_with_temperature"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/getEarlyEyeOpening.m/","text":"ndi.example.fun.getEarlyEyeOpening GETEARLYEYEOPENING - Retrieve early eye opening data for subjects in a dataset EEData = GETEARLYEYEOPENING(D) Extracts information about early eye opening treatments and associated probe data for each subject in an ndi.dataset or ndi.session object D. The function returns a structure array, EEData, where each element corresponds to a subject and contains the following fields: |-------------------|------------------------------------------------| | Field | Description | |-------------------|------------------------------------------------| | subject_name | The local identifier of the subject | | subject_id | The unique ID of the subject | | probe_name | Name of the probe associated with the subject | | probe_hemisphere | Hemisphere location information of the probe | | left_eye | Treatment information for the left eye | | right_eye | Treatment information for the right eye | | spike_data | A structure with the following fields: | | | element_info: Information about the element | | | epoch_data : A structure with fields: | | | epoch_id : Epoch ID | | | spiketimes : Spike times | | | t0_t1 : Start and end times | | | neuron_info : Extracellular spike info | |-------------------|------------------------------------------------| See also: ndi.example.fun.probe2elements(), ndi.example.fun.element2spiketimes() Example: D = ndi.example.fun.opendataset('early_eye_opening'); EEData = getEarlyEyeOpening(D);","title":"ndi.example.fun.getEarlyEyeOpening"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/getEarlyEyeOpening.m/#ndiexamplefungetearlyeyeopening","text":"GETEARLYEYEOPENING - Retrieve early eye opening data for subjects in a dataset EEData = GETEARLYEYEOPENING(D) Extracts information about early eye opening treatments and associated probe data for each subject in an ndi.dataset or ndi.session object D. The function returns a structure array, EEData, where each element corresponds to a subject and contains the following fields: |-------------------|------------------------------------------------| | Field | Description | |-------------------|------------------------------------------------| | subject_name | The local identifier of the subject | | subject_id | The unique ID of the subject | | probe_name | Name of the probe associated with the subject | | probe_hemisphere | Hemisphere location information of the probe | | left_eye | Treatment information for the left eye | | right_eye | Treatment information for the right eye | | spike_data | A structure with the following fields: | | | element_info: Information about the element | | | epoch_data : A structure with fields: | | | epoch_id : Epoch ID | | | spiketimes : Spike times | | | t0_t1 : Start and end times | | | neuron_info : Extracellular spike info | |-------------------|------------------------------------------------| See also: ndi.example.fun.probe2elements(), ndi.example.fun.element2spiketimes() Example: D = ndi.example.fun.opendataset('early_eye_opening'); EEData = getEarlyEyeOpening(D);","title":"ndi.example.fun.getEarlyEyeOpening"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/get_unique_bath_components.m/","text":"ndi.example.fun.get_unique_bath_components GET_UNIQUE_BATH_COMPONENTS - Extract unique ontologyName and name entries from stimulus_bath documents. UNIQUE_DATA = GET_UNIQUE_BATH_COMPONENTS(NDI_SESSION_OBJ) This function searches for all documents of type 'stimulus_bath' within the provided NDI session or dataset object, extracts the 'ontologyName' and 'name' entries from their 'mixture_table' fields, and returns a table containing the unique combinations of these entries. Inputs: NDI_SESSION_OBJ: An ndi.session or ndi.dataset object representing the NDI session or dataset to search. Outputs: UNIQUE_DATA: A Matlab table containing the unique combinations of 'ontologyName' and 'name' entries found in the 'mixture_table' fields of all 'stimulus_bath' documents. Example: % if S is an ndi.session or ndi.dataset object unique_data = ndi.example.fun.get_unique_bath_components(S);","title":"ndi.example.fun.get_unique_bath_components"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/get_unique_bath_components.m/#ndiexamplefunget_unique_bath_components","text":"GET_UNIQUE_BATH_COMPONENTS - Extract unique ontologyName and name entries from stimulus_bath documents. UNIQUE_DATA = GET_UNIQUE_BATH_COMPONENTS(NDI_SESSION_OBJ) This function searches for all documents of type 'stimulus_bath' within the provided NDI session or dataset object, extracts the 'ontologyName' and 'name' entries from their 'mixture_table' fields, and returns a table containing the unique combinations of these entries. Inputs: NDI_SESSION_OBJ: An ndi.session or ndi.dataset object representing the NDI session or dataset to search. Outputs: UNIQUE_DATA: A Matlab table containing the unique combinations of 'ontologyName' and 'name' entries found in the 'mixture_table' fields of all 'stimulus_bath' documents. Example: % if S is an ndi.session or ndi.dataset object unique_data = ndi.example.fun.get_unique_bath_components(S);","title":"ndi.example.fun.get_unique_bath_components"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/mfdaqsysepoch2timetablestruct.m/","text":"ndi.example.fun.mfdaqsysepoch2timetablestruct MFDAQSYSEPOCH2TIMETABLESTRUCT - extract all records of an mfdaq daq system to Matlab timetables TIMETABLESTRUCT = MFDAQSYSEPOCH2TIMETABLESTRUCT(DQ, EPOCH) Given an ndi.system.mfdaq, create a structure of timetable objects. The structure will have one entry for all analog input data (ai), and another entry for all event data (event). Note that this will attempt to load all data from an epoch; if the epoch is very large, the program may run out of memory. EPOCH is a number or epoch_id of the epoch to be read.","title":"ndi.example.fun.mfdaqsysepoch2timetablestruct"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/mfdaqsysepoch2timetablestruct.m/#ndiexamplefunmfdaqsysepoch2timetablestruct","text":"MFDAQSYSEPOCH2TIMETABLESTRUCT - extract all records of an mfdaq daq system to Matlab timetables TIMETABLESTRUCT = MFDAQSYSEPOCH2TIMETABLESTRUCT(DQ, EPOCH) Given an ndi.system.mfdaq, create a structure of timetable objects. The structure will have one entry for all analog input data (ai), and another entry for all event data (event). Note that this will attempt to load all data from an epoch; if the epoch is very large, the program may run out of memory. EPOCH is a number or epoch_id of the epoch to be read.","title":"ndi.example.fun.mfdaqsysepoch2timetablestruct"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/probe2elements.m/","text":"ndi.example.fun.probe2elements PROBE2ELEMENTS - retrieve the elements derived directly from a probe [ED,E] = PROBE2ELEMENTS(PROBE, ...) Retrieves element documents and the corresponding ndi.element objects that are derived from the ndi.probe object PROBE. One can provide additional arguments as name/value pairs that modify the default behavior: |-------------------------|------------------------------------------| | Parameter (default) | Description | |-------------------------|------------------------------------------| | type ('') | If not empty, restrict to this element | | | type (e.g., 'spikes') | | name ('') | If not empty, restrict to element name | | reference (NaN) | If not NaN, restrict to reference | |-------------------------|------------------------------------------|","title":"ndi.example.fun.probe2elements"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/probe2elements.m/#ndiexamplefunprobe2elements","text":"PROBE2ELEMENTS - retrieve the elements derived directly from a probe [ED,E] = PROBE2ELEMENTS(PROBE, ...) Retrieves element documents and the corresponding ndi.element objects that are derived from the ndi.probe object PROBE. One can provide additional arguments as name/value pairs that modify the default behavior: |-------------------------|------------------------------------------| | Parameter (default) | Description | |-------------------------|------------------------------------------| | type ('') | If not empty, restrict to this element | | | type (e.g., 'spikes') | | name ('') | If not empty, restrict to element name | | reference (NaN) | If not NaN, restrict to reference | |-------------------------|------------------------------------------|","title":"ndi.example.fun.probe2elements"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/probe2spiketimes.m/","text":"ndi.example.fun.probe2spiketimes PROBE2SPIKETIMES - retrieve all spike recordings and times from a probe SPIKESTRUCT = PROBE2SPIKETIMES(PROBE) Identifies all spike records (elements of type 'spike') that were recorded on a given PROBE. Then, creates a structure: |----------------|----------------------------------------| | Field | Description | |----------------|----------------------------------------| | element_info | Information about the element | | epoch_data | A structure with fields of all the data| | epoch_id | Epoch ID | | spiketimes | Spike times in the local epoch clock | | t0_t1 | Start and end times of the epoch in the| | | local epoch clock | | neuron_info | Extracellular spike info | |----------------|----------------------------------------|","title":"ndi.example.fun.probe2spiketimes"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/probe2spiketimes.m/#ndiexamplefunprobe2spiketimes","text":"PROBE2SPIKETIMES - retrieve all spike recordings and times from a probe SPIKESTRUCT = PROBE2SPIKETIMES(PROBE) Identifies all spike records (elements of type 'spike') that were recorded on a given PROBE. Then, creates a structure: |----------------|----------------------------------------| | Field | Description | |----------------|----------------------------------------| | element_info | Information about the element | | epoch_data | A structure with fields of all the data| | epoch_id | Epoch ID | | spiketimes | Spike times in the local epoch clock | | t0_t1 | Start and end times of the epoch in the| | | local epoch clock | | neuron_info | Extracellular spike info | |----------------|----------------------------------------|","title":"ndi.example.fun.probe2spiketimes"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Btutorial/plottreeshrewdata.m/","text":"ndi.example.tutorial.plottreeshrewdata ndi.example.tutorial.plottreeshrewdata - plot tree shrew data from Van Hooser et al. 2014 ndi.example.tutorial.plottreeshrewdata(filename) This function also accepts additional arguments in the form of name/value pairs (see help NAMEVALUEPAIR) ------------------------------------------------------------------------------- | Property (default) | Description | | ------------------------ | ------------------------------------------------ | | electrodeChannel (11) | Channel with the electrode recording | | stimTriggerChannel (2) | Channel with the stimulus trigger record | | syncChannel (4) | Channel with the synchronizing information | | stimCodeMarkChannel (32) | Channel with stimulus code mark information | | timeWindow ([0 100]) | Time window to show initially in graph | | ePhysYRange ([-11 11]) | ePhys Y range | | ePhysYStimLabel (7) | Y location for stimulus code type plot | | syncYRange ([0 8]) | stimSync Y range | | syncYStimLabel (7) | Y location for stimulus code type plot | | stimDuration (2)) | Stimulus duration in seconds | | fig ([]) | The figure to use. If empty, make a new one | | verbose (1) | Should we print status messages? | | plotit (1) | Plot the data | | plotstimsync (0) | Plot a graph of the stimSync data | | title_string ('') | Plot title string | |-----------------------------------------------------------------------------|","title":"ndi.example.tutorial.plottreeshrewdata"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Btutorial/plottreeshrewdata.m/#ndiexampletutorialplottreeshrewdata","text":"ndi.example.tutorial.plottreeshrewdata - plot tree shrew data from Van Hooser et al. 2014 ndi.example.tutorial.plottreeshrewdata(filename) This function also accepts additional arguments in the form of name/value pairs (see help NAMEVALUEPAIR) ------------------------------------------------------------------------------- | Property (default) | Description | | ------------------------ | ------------------------------------------------ | | electrodeChannel (11) | Channel with the electrode recording | | stimTriggerChannel (2) | Channel with the stimulus trigger record | | syncChannel (4) | Channel with the synchronizing information | | stimCodeMarkChannel (32) | Channel with stimulus code mark information | | timeWindow ([0 100]) | Time window to show initially in graph | | ePhysYRange ([-11 11]) | ePhys Y range | | ePhysYStimLabel (7) | Y location for stimulus code type plot | | syncYRange ([0 8]) | stimSync Y range | | syncYStimLabel (7) | Y location for stimulus code type plot | | stimDuration (2)) | Stimulus duration in seconds | | fig ([]) | The figure to use. If empty, make a new one | | verbose (1) | Should we print status messages? | | plotit (1) | Plot the data | | plotstimsync (0) | Plot a graph of the stimSync data | | title_string ('') | Plot title string | |-----------------------------------------------------------------------------|","title":"ndi.example.tutorial.plottreeshrewdata"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_02_01.m/","text":"ndi.example.tutorial.tutorial_02_01 ndi.example.tutorial.tutorial_02_01 - runs the code in Tutorial 2.1 out = ndi.example.tutorial.tutorial_02_01(PREFIX, [TESTING]) Runs (and tests) the code for NDI Tutorial 2: Analyzing your first electrophysiology experiment with NDI Tutorial 2.1: Reading an example dataset The tutorial is available at https://vh-lab.github.io/NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset.md PREFIX should be the directory that contains the directory 'ts_exper1'. If it is not provided or is empty, the default is [userpath filesep 'Documents' filesep 'NDI']. If TESTING is 1, then PREFIX is taken to be [userpath filesep 'Documents' filesep' NDI filesep 'Test'], and the files are copied to the temporary directory before proceeding so that the files in the directory called PREFIX are not touched.","title":"ndi.example.tutorial.tutorial_02_01"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_02_01.m/#ndiexampletutorialtutorial_02_01","text":"ndi.example.tutorial.tutorial_02_01 - runs the code in Tutorial 2.1 out = ndi.example.tutorial.tutorial_02_01(PREFIX, [TESTING]) Runs (and tests) the code for NDI Tutorial 2: Analyzing your first electrophysiology experiment with NDI Tutorial 2.1: Reading an example dataset The tutorial is available at https://vh-lab.github.io/NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset.md PREFIX should be the directory that contains the directory 'ts_exper1'. If it is not provided or is empty, the default is [userpath filesep 'Documents' filesep 'NDI']. If TESTING is 1, then PREFIX is taken to be [userpath filesep 'Documents' filesep' NDI filesep 'Test'], and the files are copied to the temporary directory before proceeding so that the files in the directory called PREFIX are not touched.","title":"ndi.example.tutorial.tutorial_02_01"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_02_02.m/","text":"ndi.example.tutorial.tutorial_02_02 ndi.example.tutorial.tutorial_02_02 - runs the code in Tutorial 2.2 out = ndi.example.tutorial.tutorial_02_02(PREFIX, [TESTING]) Runs (and tests) the code for NDI Tutorial 2: Analyzing your first electrophysiology experiment with NDI Tutorial 2.2: The automated way The tutorial is available at https://vh-lab.github.io/NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway PREFIX should be the directory that contains the directory 'ts_exper2'. If it is not provided or is empty, the default is [userpath filesep 'Documents' filesep 'NDI']. If TESTING is 1, then the files are copied to the temporary directory before proceeding so that the files in the directory called PREFIX are not touched.","title":"ndi.example.tutorial.tutorial_02_02"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_02_02.m/#ndiexampletutorialtutorial_02_02","text":"ndi.example.tutorial.tutorial_02_02 - runs the code in Tutorial 2.2 out = ndi.example.tutorial.tutorial_02_02(PREFIX, [TESTING]) Runs (and tests) the code for NDI Tutorial 2: Analyzing your first electrophysiology experiment with NDI Tutorial 2.2: The automated way The tutorial is available at https://vh-lab.github.io/NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway PREFIX should be the directory that contains the directory 'ts_exper2'. If it is not provided or is empty, the default is [userpath filesep 'Documents' filesep 'NDI']. If TESTING is 1, then the files are copied to the temporary directory before proceeding so that the files in the directory called PREFIX are not touched.","title":"ndi.example.tutorial.tutorial_02_02"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_02_03.m/","text":"ndi.example.tutorial.tutorial_02_03 ndi.example.tutorial.tutorial_02_03 - runs the code in Tutorial 2.3 out = ndi.example.tutorial.tutorial_02_03(PREFIX, [TESTING]) Runs (and tests) the code for NDI Tutorial 2: Analyzing your first electrophysiology experiment with NDI Tutorial 2.3: Using apps to analyze data (example - spike sorting) The tutorial is available at https://vh-lab.github.io/NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/ PREFIX should be the directory that contains the directory 'ts_exper2'. If it is not provided or is empty, the default is [userpath filesep 'Documents' filesep 'NDI']. If TESTING is 1, then the files are examined in the temporary directory ndi.common.PathConstants.TempFolder . It is assumed that ndi.example.tutorial.tutorial_t02_02([],1) has been run (with TESTING set to 1). Note: a little manual intervention is needed in this tutorial.","title":"ndi.example.tutorial.tutorial_02_03"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_02_03.m/#ndiexampletutorialtutorial_02_03","text":"ndi.example.tutorial.tutorial_02_03 - runs the code in Tutorial 2.3 out = ndi.example.tutorial.tutorial_02_03(PREFIX, [TESTING]) Runs (and tests) the code for NDI Tutorial 2: Analyzing your first electrophysiology experiment with NDI Tutorial 2.3: Using apps to analyze data (example - spike sorting) The tutorial is available at https://vh-lab.github.io/NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/ PREFIX should be the directory that contains the directory 'ts_exper2'. If it is not provided or is empty, the default is [userpath filesep 'Documents' filesep 'NDI']. If TESTING is 1, then the files are examined in the temporary directory ndi.common.PathConstants.TempFolder . It is assumed that ndi.example.tutorial.tutorial_t02_02([],1) has been run (with TESTING set to 1). Note: a little manual intervention is needed in this tutorial.","title":"ndi.example.tutorial.tutorial_02_03"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_02_04.m/","text":"ndi.example.tutorial.tutorial_02_04 ndi.example.tutorial.tutorial_02_04 - runs the code in Tutorial 2.4 out = ndi.example.tutorial.tutorial_02_04(PREFIX, [TESTING]) Runs (and tests) the code for NDI Tutorial 2: Analyzing your first electrophysiology experiment with NDI Tutorial 2.4: Analyzing stimulus responses The tutorial is available at https://vh-lab.github.io/NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/ PREFIX should be the directory that contains the directory 'ts_exper2'. If it is not provided or is empty, the default is [userpath filesep 'Documents' filesep 'NDI']. If TESTING is 1, then the files are examined in the temporary directory ndi.common.PathConstants.TempFolder. It is assumed that ndi.example.tutorial.tutorial_t02_03([],1) has been run (with TESTING set to 1).","title":"ndi.example.tutorial.tutorial_02_04"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_02_04.m/#ndiexampletutorialtutorial_02_04","text":"ndi.example.tutorial.tutorial_02_04 - runs the code in Tutorial 2.4 out = ndi.example.tutorial.tutorial_02_04(PREFIX, [TESTING]) Runs (and tests) the code for NDI Tutorial 2: Analyzing your first electrophysiology experiment with NDI Tutorial 2.4: Analyzing stimulus responses The tutorial is available at https://vh-lab.github.io/NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/ PREFIX should be the directory that contains the directory 'ts_exper2'. If it is not provided or is empty, the default is [userpath filesep 'Documents' filesep 'NDI']. If TESTING is 1, then the files are examined in the temporary directory ndi.common.PathConstants.TempFolder. It is assumed that ndi.example.tutorial.tutorial_t02_03([],1) has been run (with TESTING set to 1).","title":"ndi.example.tutorial.tutorial_02_04"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_02_05.m/","text":"ndi.example.tutorial.tutorial_02_05 ndi.example.tutorial.tutorial_02_05 - runs the code in Tutorial 2.5 out = ndi.example.tutorial.tutorial_02_05(PREFIX, [TESTING]) Runs (and tests) the code for NDI Tutorial 2: Analyzing your first electrophysiology experiment with NDI Tutorial 2.5: Understanding and searching the NDI database The tutorial is available at https://vh-lab.github.io/NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/ PREFIX should be the directory that contains the directory 'ts_exper2'. If it is not provided or is empty, the default is [userpath filesep 'Documents' filesep 'NDI']. If TESTING is 1, then the files are examined in the temporary directory ndi.common.PathConstants.TempFolder. It is assumed that ndi.example.tutorial.tutorial_t02_04([],1) has been run (with TESTING set to 1).","title":"ndi.example.tutorial.tutorial_02_05"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_02_05.m/#ndiexampletutorialtutorial_02_05","text":"ndi.example.tutorial.tutorial_02_05 - runs the code in Tutorial 2.5 out = ndi.example.tutorial.tutorial_02_05(PREFIX, [TESTING]) Runs (and tests) the code for NDI Tutorial 2: Analyzing your first electrophysiology experiment with NDI Tutorial 2.5: Understanding and searching the NDI database The tutorial is available at https://vh-lab.github.io/NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/ PREFIX should be the directory that contains the directory 'ts_exper2'. If it is not provided or is empty, the default is [userpath filesep 'Documents' filesep 'NDI']. If TESTING is 1, then the files are examined in the temporary directory ndi.common.PathConstants.TempFolder. It is assumed that ndi.example.tutorial.tutorial_t02_04([],1) has been run (with TESTING set to 1).","title":"ndi.example.tutorial.tutorial_02_05"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/navigator.m/","text":"CLASS ndi.file.navigator ndi.file.navigator - object class for accessing files on disk Superclasses ndi.ido , did.ido , ndi.epoch.epochset.param , ndi.epoch.epochset , ndi.documentservice , ndi.database.ingestion_help Properties Property Description session The ndi.session to be examined (handle) fileparameters The parameters for finding files (see ndi.file.navigator/SETFILEPARAMETERS) epochprobemap_fileparameters The parameters for finding the epochprobemap files (see ndi.file.navigator/SETEPOCHPROBEMAPFILEPARAMETERS) identifier epochprobemap_class Methods Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Return an epoch table for ndi.file.navigator cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object defaultepochprobemapfilename return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochidfilename return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq determines whether two ndi.file.navigator objects are equivalent filematch_hashstring a computation to produce a (likely to be) unique string based on filematch find_ingested_documents find ndi.documents that reflect ingested epochs getcache return the NDI_CACHE and key for ndi.file.navigator getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs getepochfiles Return the file paths for one recording epoch getepochfiles_number Return the file paths for one recording epoch getepochingesteddoc get an ingested epoch document if it exists getepochprobemap Return the epoch record for a given ndi.file.navigator epoch number getepochtag Get tag(s) from an epoch ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the identifier of an DID.IDO object ingest create new documents that produce the ingestion of an ingestion_help_obj ingestedfiles_epochid what is the epoch id for ingested epochfiles? ingestion_class the name of the ingestion class for this object isingested is a set of epochfiles ingested? issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? matchedepochtable compare a hash number from an epochtable to the current version navigator Create a new ndi.file.navigator object that is associated with an session and daqsystem newdocument create an ndi.document that is based on an ndi.file.navigator object numepochs Number of epochs of ndi.epoch.epochset path Return the file path for the ndi.file.navigator object removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery create a search query that will search for this object selectfilegroups Return groups of files that will comprise epochs selectfilegroups_disk select groups of files that will comprise epochs on disk setepochprobemap Sets the epoch record of a particular epoch setepochprobemapfileparameters Set the epoch record fileparameters field of a ndi.file.navigator object setepochtag Set tag(s) for an epoch setfileparameters Set the fileparameters field of a ndi.file.navigator object setsession set the SESSION for an ndi.file.navigator object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object Methods help addepochtag - Add tag(s) for an epoch ADDEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will be added to any tags in the epoch EPOCHNUMBER. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. Help for ndi.file.navigator/addepochtag is inherited from superclass ndi.epoch.epochset.param buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.file.navigator/EPOCHNODES Help for ndi.file.navigator/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - Return an epoch table for ndi.file.navigator ET = BUILDEPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch (may change) 'epoch_id' | The epoch ID code (will never change once established) | This uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains this epoch. 'epochprobemap' | The epochprobemap object from each epoch 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' | 'underlying' contains the file list for each epoch; 'epoch_id' and 'epoch_number' | match those of NDI_FILENAVIGATOR_OBJ cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.file.navigator.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.file.navigator/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.file.navigator/cached_epochtable is inherited from superclass ndi.epoch.epochset defaultepochprobemapfilename - return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = DEFAULTEPOCHPROBEMAPFILENAME(NDI_FILENAVIGATOR_OBJ, NUMBER) Returns the default EPOCHPROBEMAPFILENAME for the ndi.daq.system NDI_DEVICE_OBJ for epoch NUMBER. If there are no files in epoch NUMBER, an error is generated. NUMBER cannot be an epoch id. In the base class, ndi.epoch.epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file. If the first file in the epoch file list is 'PATH/MYFILENAME.ext', then the default ndi.epoch.epochprobemap_daqsystem data is stored as 'PATH/.MYFILENAME.ext.epochprobemap.ndi.'. This may be overridden if there is an EPOCHPROBEMAP_FILEPARAMETERS set. See also: ndi.file.navigator/SETEPOCHPROBEMAPFILEPARAMETERS epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.file.navigator/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). The abstract class always returns ndi.time.clocktype('no_time') See also: ndi.time.clocktype, T0_T1 Help for ndi.file.navigator/epochclock is inherited from superclass ndi.epoch.epochset epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.file.navigator/epochgraph is inherited from superclass ndi.epoch.epochset epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_FILENAVIGATOR_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it is created. epochidfilename - return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHIDFILENAME(NDI_FILENAVIGATOR_OBJ, NUMBER) Returns the EPOCHIDFILENAME for the ndi.daq.system NDI_DEVICE_OBJ for epoch NUMBER. If there are no files in epoch NUMBER, an error is generated. In the base class, ndi.epoch.epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file. If the first file in the epoch file list is 'PATH/MYFILENAME.ext', then the ndi.epoch.epochprobemap_daqsystem data is stored as 'PATH/.MYFILENAME.ext.epochid.ndi.'. epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.file.navigator/epochnodes is inherited from superclass ndi.epoch.epochset epochprobemapfilename - return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME(NDI_FILENAVIGATOR_OBJ, NUMBER) Returns the EPOCHPROBEMAPFILENAME for the ndi.file.navigator NDI_FILENAVIGATOR_OBJ for epoch NUMBER. If there are no files in epoch NUMBER, an error is generated. The file name is returned with a full path. NUMBER cannot be an epoch_id. The file name is determined by examining if the user has specified any EPOCHPROBEMAP_FILEPARAMETERS; if not, then the DEFAULTEPOCHPROBEMAPFILENAME is used. See also: ndi.file.navigator/SETEPOCHPROBEMAPFILEPARAMETERS, ndi.file.navigator/DEFAULTEPOCHPROBEMAPFILENAME default epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME(NDI_EPOCHSET_OBJ) Returns the object name that is used when creating epoch nodes. If the class has a 'name' property, that property is used. Otherwise, 'unknown' is used. Help for ndi.file.navigator/epochsetname is inherited from superclass ndi.epoch.epochset epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.file.navigator/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.file.navigator/epochtableentry is inherited from superclass ndi.epoch.epochset epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER) In this base class, empty is returned because it is an abstract class. Help for ndi.file.navigator/epochtagfilename is inherited from superclass ndi.epoch.epochset.param eq - determines whether two ndi.file.navigator objects are equivalent B = EQ(NDI_FILENAVIGATOR_OBJ_A, NDI_FILENAVIGATOR_OBJ_B) Returns 1 if the ndi.file.navigator objects are equivalent, and 0 otherwise. This equivalency does not depend on NDI_FILENAVIGATOR_OBJ_A and NDI_FILENAVIGATOR_OBJ_B are the same HANDLE objects. They can be equivalent and occupy different places in memory. filematch_hashstring - a computation to produce a (likely to be) unique string based on filematch FMSTR = FILEMATCH_HASHSTRING(NDI_FILENAVIGATOR_OBJ) Returns a string that is based on a hash function that is computed on the concatenated text of the 'filematch' field of the 'fileparameters' property. Note: the function used is 'MD5' (see DataHash) find_ingested_documents - find ndi.documents that reflect ingested epochs D_INGESTED = FIND_INGESTED_DOCUMENTS(NDI_FILENAVIGATOR_OBJ) Returns ndi.document objects that correspond to ingested epochs of this NDI_FILENAVIGATOR_OBJ. getcache - return the NDI_CACHE and key for ndi.file.navigator [CACHE,KEY] = GETCACHE(NDI_FILENAVIGATOR_OBJ) Returns the CACHE and KEY for the ndi.file.navigator object. The CACHE is returned from the associated session. The KEY is the string 'filenavigator_' followed by the object's id. See also: ndi.file.navigator getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.file.navigator/getepocharray is inherited from superclass ndi.epoch.epochset getepochfiles - Return the file paths for one recording epoch [FULLPATHFILENAMES, EPOCHID] = GETEPOCHFILES(NDI_FILENAVIGATOR_OBJ, EPOCH_NUMBER_OR_ID) Return the file names or file paths associated with one recording epoch of of an NDI_FILENAVIGATOR_OBJ. EPOCH_NUMBER_OR_ID can either be a number of an epoch to return, or an epoch identifier (epoch id). Requesting multiple epochs simultaneously: EPOCH_NUMBER_OR_ID can also be an array of numbers, in which case a cell array of cell arrays is returned in FULLPATHFILENAMES, one entry per number in EPOCH_NUMBER_OR_ID. Further, EPOCH_NUMBER_OR_ID can be a cell array of strings of multiple epoch identifiers; in this case, a cell array of cell arrays is returned in FULLPATHFILENAMES. Uses the FILEPARAMETERS (see ndi.file.navigator/SETFILEPARAMETERS) to identify recording epochs under the SESSION path. See also: EPOCHID getepochfiles_number - Return the file paths for one recording epoch [FULLPATHFILENAMES] = GETEPOCHFILES_NUMBER(NDI_FILENAVIGATOR_OBJ, EPOCH_NUMBER) Return the file names or file paths associated with one recording epoch. EPOCH_NUMBER must be a number or array of epoch numbers. EPOCH_NUMBER cannot be an EPOCH_ID. If EPOCH_NUMBER is an array, then a cell array of cell arrays is returned in FULLPATHFILENAMES. Uses the FILEPARAMETERS (see ndi.file.navigator/SETFILEPARAMETERS) to identify recording epochs under the SESSION path. See also: GETEPOCHFILES developer note: possibility of caching this with some timeout developer note: this function exists so you can get the epoch files without calling epochtable, which also needs to get the epoch files; infinite recursion happens getepochingesteddoc - get an ingested epoch document if it exists D = GETEPOCHINGESTEDDOC(NDI_FILENAVIGATOR_OBJ, EPOCHFILES) Returns the document if it exists, empty if it doesn't. getepochprobemap - Return the epoch record for a given ndi.file.navigator epoch number EPOCHPROBEMAP = GETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, N, EPOCHFILES) Inputs: NDI_EPOCHSET_PARAM_OBJ - the ndi.epoch.epochset.param object N - the epoch number or identifier EPOCHFILES - the files for this epoch Output: EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. If there are no files in EPOCHNUMBER then an error is returned. Help for ndi.file.navigator/getepochtag is inherited from superclass ndi.epoch.epochset.param ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.file.navigator.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.file.navigator/id is inherited from superclass did.ido ingest - create new documents that produce the ingestion of an ingestion_help_obj [DOCS_OUT] = INGEST(NDI_FILENAVIGATOR_OBJ) Creates documents to specify the epochs of an ndi.file.navigator object. ingestedfiles_epochid - what is the epoch id for ingested epochfiles? EPOCHID = INGESTEDFILES_EPOCHID(EPOCHFILES) Returns the EPOCHID for the ingested EPOCHFILES ingestion_class - the name of the ingestion class for this object CNAME = INGESTION_CLASS(INGESTION_HELP_OBJ) Returns the class name of the object that should be created if this object class is ingested into the database (and won't have access to any raw data). For the base class, this simply returns empty. Help for ndi.file.navigator/ingestion_class is inherited from superclass ndi.database.ingestion_help isingested - is a set of epochfiles ingested? B = ISINGESTED(EPOCHFILES) Returns 1 if the cell array of filenames reflects ingested filenames. Returns 0 otherwise. Checks to see if the first file begins with 'epochid://'. issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset objects, this returns 1. For some object types (ndi.probe.*, for example) this will return 0 so that the underlying ndi.daq.system epochs are added. Help for ndi.file.navigator/issyncgraphroot is inherited from superclass ndi.epoch.epochset isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.file.navigator.isvalid is inherited from superclass did.ido matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.file.navigator/matchedepochtable is inherited from superclass ndi.epoch.epochset navigator - Create a new ndi.file.navigator object that is associated with an session and daqsystem OBJ = ndi.file.navigator(SESSION, [ FILEPARAMETERS, EPOCHPROBEMAP_CLASS, EPOCHPROBEMAP_FILEPARAMETERS]) or OBJ = ndi.file.navigator(SESSION, NDI_FILENAVIGATOR_DOC_OBJ) Creates a new ndi.file.navigator object that negotiates the data tree of daqsystem's data that is stored at the file path PATH. Inputs: SESSION: an ndi.session Optional inputs: FILEPARAMETERS: the files that are recorded in each epoch of DEVICE in this data tree style (see ndi.file.navigator/SETFILEPARAMETERS for description) EPOCHPROBEMAP_CLASS: the class of epoch_record to be used; 'ndi.epoch.epochprobemap_daqsystem' is used by default EPOCHPROBEMAP_FILEPARAMETERS: the file parameters to search for the epoch record file among the files present in each epoch (see ndi.file.navigator/SETEPOCHPROBEMAPFILEPARAMETERS). By default, the file location specified in ndi.file.navigator/EPOCHPROBEMAPFILENAME is used Output: OBJ - an ndi.file.navigator object See also: ndi.session Documentation for ndi.file.navigator/navigator doc ndi.file.navigator newdocument - create an ndi.document that is based on an ndi.file.navigator object NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_FILENAVIGATOR_OBJ) Creates an ndi.document of type 'filenavigator' numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.file.navigator/numepochs is inherited from superclass ndi.epoch.epochset path - Return the file path for the ndi.file.navigator object THEPATH = PATH(NDI_FILENAVIGATOR_OBJ) Returns the path of the ndi.session associated with the ndi.file.navigator object NDI_FILENAVIGATOR_OBJ. removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG(NDI_EPOCH_PARAM_OBJ, EPOCHNUMBER, NAME) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. Any tags with name 'NAME' will be removed from the tags in the epoch EPOCHNUMBER. tags in the epoch directory. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. NAME can be a single string, or it can be a cell array of strings (which will result in the removal of multiple tags). Help for ndi.file.navigator/removeepochtag is inherited from superclass ndi.epoch.epochset.param resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.file.navigator/EPOCHTABLE Help for ndi.file.navigator/resetepochtable is inherited from superclass ndi.epoch.epochset searchquery - create a search query that will search for this object SQ = SEARCHQUERY(NDI_FILENAVIGATOR_OBJ) Returns a database search query for this ndi.file.navigator object. selectfilegroups - Return groups of files that will comprise epochs EPOCHFILES = SELECTFILEGROUPS(NDI_FILENAVIGATOR_OBJ) Return the files that comprise epochs. EPOCHFILES{n} will be a cell list of the files in epoch n. For ndi.file.navigator, this simply uses the file matching parameters. See also: ndi.file.navigator/SETFILEPARAMETERS Step 1: find epochs on disk selectfilegroups_disk - select groups of files that will comprise epochs on disk EPOCHFILES = SELECTFILEGROUPS_DISK(NDI_FILENAVIGATOR_OBJ) Return the files on disk that comprise epochs. setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, EPOCHPROBEMAP, NUMBER, [OVERWRITE]) Sets or replaces the ndi.epoch.epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER. If OVERWRITE is present and is 1, then any existing epoch record is overwritten. Otherwise, an error is given if there is an existing epoch record. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem Help for ndi.file.navigator/setepochprobemap is inherited from superclass ndi.epoch.epochset.param setepochprobemapfileparameters - Set the epoch record fileparameters field of a ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETEPOCHPROBEMAPFILEPARAMETERS(NDI_FILENAVIGATOR_OBJ, THEEPOCHPROBEMAPFILEPARAMETERS) THEEPOCHPROBEMAPFILEPARAMETERS is a string or cell list of strings that specifies the epoch record file. By default, if no parameters are specified, the epoch record file is located at: [EXP]/.ndi/device_name/epoch_NNNNNNNNN.ndierf, where [EXP] is the session's path. However, one can pass search parameters that will search among all the file names returned by ndi.file.navigator/GETEPOCHS. The search parameter should be a regular expression or a set of regular expressions such as: Example: theepochprobemapfileparameters = '.*\\.ext\\>' Example: theepochprobemapfileparameters = {'myfile1.ext1', 'myfile2.ext2'} Example: theepochprobemapfileparameters = {'#.ext1', 'myfile#.ext2'} (# is the same, unknown string) setepochtag - Set tag(s) for an epoch SETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will replace any tags in the epoch directory. If there is no epoch EPOCHNUMBER, then an error is returned. Help for ndi.file.navigator/setepochtag is inherited from superclass ndi.epoch.epochset.param setfileparameters - Set the fileparameters field of a ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETFILEPARAMETERS(NDI_FILENAVIGATOR_OBJ, THEFILEPARAMETERS) THEFILEPARAMETERS is a string or cell list of strings that specifies the files that comprise an epoch. Example: filematch = '.*\\.ext\\>' Example: filematch = {'myfile1.ext1', 'myfile2.ext2'} Example: filematch = {'#.ext1', 'myfile#.ext2'} (# is the same, unknown string) Alternatively, THEFILEPARAMETERS can be delivered as a structure with the following fields: Fieldname: | Description ---------------------------------------------------------------------- filematch | A string or cell list of strings that need to be matched | Regular expressions are allowed | Example: filematch = '.*\\.ext\\>' | Example: filematch = {'myfile1.ext1', 'myfile2.ext2'} | Example: filematch = {'#.ext1', 'myfile#.ext2'} (# is the same, unknown string) setsession - set the SESSION for an ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETSESSION(NDI_FILENAVIGATOR_OBJ, SESSION) Set the SESSION property of an ndi.file.navigator object t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.file.navigator/t0_t1 is inherited from superclass ndi.epoch.epochset underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.file.navigator/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.file.navigator.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object [B,MSG] = VERIFYEPOCHPROBEMAP(ndi.epoch.epochset.param, EPOCHPROBEMAP, EPOCH_NUMBER_OR_ID) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given epoch number or epoch id EPOCH_NUMBER_OR_ID. For the abstract class EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. If B is 0, then the error message is returned in MSG. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem Help for ndi.file.navigator/verifyepochprobemap is inherited from superclass ndi.epoch.epochset.param","title":"ndi.file.navigator"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/navigator.m/#class-ndifilenavigator","text":"ndi.file.navigator - object class for accessing files on disk","title":"CLASS ndi.file.navigator"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/navigator.m/#superclasses","text":"ndi.ido , did.ido , ndi.epoch.epochset.param , ndi.epoch.epochset , ndi.documentservice , ndi.database.ingestion_help","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/navigator.m/#properties","text":"Property Description session The ndi.session to be examined (handle) fileparameters The parameters for finding files (see ndi.file.navigator/SETFILEPARAMETERS) epochprobemap_fileparameters The parameters for finding the epochprobemap files (see ndi.file.navigator/SETEPOCHPROBEMAPFILEPARAMETERS) identifier epochprobemap_class","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/navigator.m/#methods","text":"Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Return an epoch table for ndi.file.navigator cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object defaultepochprobemapfilename return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochidfilename return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq determines whether two ndi.file.navigator objects are equivalent filematch_hashstring a computation to produce a (likely to be) unique string based on filematch find_ingested_documents find ndi.documents that reflect ingested epochs getcache return the NDI_CACHE and key for ndi.file.navigator getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs getepochfiles Return the file paths for one recording epoch getepochfiles_number Return the file paths for one recording epoch getepochingesteddoc get an ingested epoch document if it exists getepochprobemap Return the epoch record for a given ndi.file.navigator epoch number getepochtag Get tag(s) from an epoch ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the identifier of an DID.IDO object ingest create new documents that produce the ingestion of an ingestion_help_obj ingestedfiles_epochid what is the epoch id for ingested epochfiles? ingestion_class the name of the ingestion class for this object isingested is a set of epochfiles ingested? issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? matchedepochtable compare a hash number from an epochtable to the current version navigator Create a new ndi.file.navigator object that is associated with an session and daqsystem newdocument create an ndi.document that is based on an ndi.file.navigator object numepochs Number of epochs of ndi.epoch.epochset path Return the file path for the ndi.file.navigator object removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery create a search query that will search for this object selectfilegroups Return groups of files that will comprise epochs selectfilegroups_disk select groups of files that will comprise epochs on disk setepochprobemap Sets the epoch record of a particular epoch setepochprobemapfileparameters Set the epoch record fileparameters field of a ndi.file.navigator object setepochtag Set tag(s) for an epoch setfileparameters Set the fileparameters field of a ndi.file.navigator object setsession set the SESSION for an ndi.file.navigator object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/navigator.m/#methods-help","text":"addepochtag - Add tag(s) for an epoch ADDEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will be added to any tags in the epoch EPOCHNUMBER. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. Help for ndi.file.navigator/addepochtag is inherited from superclass ndi.epoch.epochset.param buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.file.navigator/EPOCHNODES Help for ndi.file.navigator/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - Return an epoch table for ndi.file.navigator ET = BUILDEPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch (may change) 'epoch_id' | The epoch ID code (will never change once established) | This uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains this epoch. 'epochprobemap' | The epochprobemap object from each epoch 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' | 'underlying' contains the file list for each epoch; 'epoch_id' and 'epoch_number' | match those of NDI_FILENAVIGATOR_OBJ cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.file.navigator.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.file.navigator/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.file.navigator/cached_epochtable is inherited from superclass ndi.epoch.epochset defaultepochprobemapfilename - return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = DEFAULTEPOCHPROBEMAPFILENAME(NDI_FILENAVIGATOR_OBJ, NUMBER) Returns the default EPOCHPROBEMAPFILENAME for the ndi.daq.system NDI_DEVICE_OBJ for epoch NUMBER. If there are no files in epoch NUMBER, an error is generated. NUMBER cannot be an epoch id. In the base class, ndi.epoch.epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file. If the first file in the epoch file list is 'PATH/MYFILENAME.ext', then the default ndi.epoch.epochprobemap_daqsystem data is stored as 'PATH/.MYFILENAME.ext.epochprobemap.ndi.'. This may be overridden if there is an EPOCHPROBEMAP_FILEPARAMETERS set. See also: ndi.file.navigator/SETEPOCHPROBEMAPFILEPARAMETERS epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.file.navigator/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). The abstract class always returns ndi.time.clocktype('no_time') See also: ndi.time.clocktype, T0_T1 Help for ndi.file.navigator/epochclock is inherited from superclass ndi.epoch.epochset epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.file.navigator/epochgraph is inherited from superclass ndi.epoch.epochset epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_FILENAVIGATOR_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it is created. epochidfilename - return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHIDFILENAME(NDI_FILENAVIGATOR_OBJ, NUMBER) Returns the EPOCHIDFILENAME for the ndi.daq.system NDI_DEVICE_OBJ for epoch NUMBER. If there are no files in epoch NUMBER, an error is generated. In the base class, ndi.epoch.epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file. If the first file in the epoch file list is 'PATH/MYFILENAME.ext', then the ndi.epoch.epochprobemap_daqsystem data is stored as 'PATH/.MYFILENAME.ext.epochid.ndi.'. epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.file.navigator/epochnodes is inherited from superclass ndi.epoch.epochset epochprobemapfilename - return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME(NDI_FILENAVIGATOR_OBJ, NUMBER) Returns the EPOCHPROBEMAPFILENAME for the ndi.file.navigator NDI_FILENAVIGATOR_OBJ for epoch NUMBER. If there are no files in epoch NUMBER, an error is generated. The file name is returned with a full path. NUMBER cannot be an epoch_id. The file name is determined by examining if the user has specified any EPOCHPROBEMAP_FILEPARAMETERS; if not, then the DEFAULTEPOCHPROBEMAPFILENAME is used. See also: ndi.file.navigator/SETEPOCHPROBEMAPFILEPARAMETERS, ndi.file.navigator/DEFAULTEPOCHPROBEMAPFILENAME default epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME(NDI_EPOCHSET_OBJ) Returns the object name that is used when creating epoch nodes. If the class has a 'name' property, that property is used. Otherwise, 'unknown' is used. Help for ndi.file.navigator/epochsetname is inherited from superclass ndi.epoch.epochset epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.file.navigator/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.file.navigator/epochtableentry is inherited from superclass ndi.epoch.epochset epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER) In this base class, empty is returned because it is an abstract class. Help for ndi.file.navigator/epochtagfilename is inherited from superclass ndi.epoch.epochset.param eq - determines whether two ndi.file.navigator objects are equivalent B = EQ(NDI_FILENAVIGATOR_OBJ_A, NDI_FILENAVIGATOR_OBJ_B) Returns 1 if the ndi.file.navigator objects are equivalent, and 0 otherwise. This equivalency does not depend on NDI_FILENAVIGATOR_OBJ_A and NDI_FILENAVIGATOR_OBJ_B are the same HANDLE objects. They can be equivalent and occupy different places in memory. filematch_hashstring - a computation to produce a (likely to be) unique string based on filematch FMSTR = FILEMATCH_HASHSTRING(NDI_FILENAVIGATOR_OBJ) Returns a string that is based on a hash function that is computed on the concatenated text of the 'filematch' field of the 'fileparameters' property. Note: the function used is 'MD5' (see DataHash) find_ingested_documents - find ndi.documents that reflect ingested epochs D_INGESTED = FIND_INGESTED_DOCUMENTS(NDI_FILENAVIGATOR_OBJ) Returns ndi.document objects that correspond to ingested epochs of this NDI_FILENAVIGATOR_OBJ. getcache - return the NDI_CACHE and key for ndi.file.navigator [CACHE,KEY] = GETCACHE(NDI_FILENAVIGATOR_OBJ) Returns the CACHE and KEY for the ndi.file.navigator object. The CACHE is returned from the associated session. The KEY is the string 'filenavigator_' followed by the object's id. See also: ndi.file.navigator getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.file.navigator/getepocharray is inherited from superclass ndi.epoch.epochset getepochfiles - Return the file paths for one recording epoch [FULLPATHFILENAMES, EPOCHID] = GETEPOCHFILES(NDI_FILENAVIGATOR_OBJ, EPOCH_NUMBER_OR_ID) Return the file names or file paths associated with one recording epoch of of an NDI_FILENAVIGATOR_OBJ. EPOCH_NUMBER_OR_ID can either be a number of an epoch to return, or an epoch identifier (epoch id). Requesting multiple epochs simultaneously: EPOCH_NUMBER_OR_ID can also be an array of numbers, in which case a cell array of cell arrays is returned in FULLPATHFILENAMES, one entry per number in EPOCH_NUMBER_OR_ID. Further, EPOCH_NUMBER_OR_ID can be a cell array of strings of multiple epoch identifiers; in this case, a cell array of cell arrays is returned in FULLPATHFILENAMES. Uses the FILEPARAMETERS (see ndi.file.navigator/SETFILEPARAMETERS) to identify recording epochs under the SESSION path. See also: EPOCHID getepochfiles_number - Return the file paths for one recording epoch [FULLPATHFILENAMES] = GETEPOCHFILES_NUMBER(NDI_FILENAVIGATOR_OBJ, EPOCH_NUMBER) Return the file names or file paths associated with one recording epoch. EPOCH_NUMBER must be a number or array of epoch numbers. EPOCH_NUMBER cannot be an EPOCH_ID. If EPOCH_NUMBER is an array, then a cell array of cell arrays is returned in FULLPATHFILENAMES. Uses the FILEPARAMETERS (see ndi.file.navigator/SETFILEPARAMETERS) to identify recording epochs under the SESSION path. See also: GETEPOCHFILES developer note: possibility of caching this with some timeout developer note: this function exists so you can get the epoch files without calling epochtable, which also needs to get the epoch files; infinite recursion happens getepochingesteddoc - get an ingested epoch document if it exists D = GETEPOCHINGESTEDDOC(NDI_FILENAVIGATOR_OBJ, EPOCHFILES) Returns the document if it exists, empty if it doesn't. getepochprobemap - Return the epoch record for a given ndi.file.navigator epoch number EPOCHPROBEMAP = GETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, N, EPOCHFILES) Inputs: NDI_EPOCHSET_PARAM_OBJ - the ndi.epoch.epochset.param object N - the epoch number or identifier EPOCHFILES - the files for this epoch Output: EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. If there are no files in EPOCHNUMBER then an error is returned. Help for ndi.file.navigator/getepochtag is inherited from superclass ndi.epoch.epochset.param ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.file.navigator.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.file.navigator/id is inherited from superclass did.ido ingest - create new documents that produce the ingestion of an ingestion_help_obj [DOCS_OUT] = INGEST(NDI_FILENAVIGATOR_OBJ) Creates documents to specify the epochs of an ndi.file.navigator object. ingestedfiles_epochid - what is the epoch id for ingested epochfiles? EPOCHID = INGESTEDFILES_EPOCHID(EPOCHFILES) Returns the EPOCHID for the ingested EPOCHFILES ingestion_class - the name of the ingestion class for this object CNAME = INGESTION_CLASS(INGESTION_HELP_OBJ) Returns the class name of the object that should be created if this object class is ingested into the database (and won't have access to any raw data). For the base class, this simply returns empty. Help for ndi.file.navigator/ingestion_class is inherited from superclass ndi.database.ingestion_help isingested - is a set of epochfiles ingested? B = ISINGESTED(EPOCHFILES) Returns 1 if the cell array of filenames reflects ingested filenames. Returns 0 otherwise. Checks to see if the first file begins with 'epochid://'. issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset objects, this returns 1. For some object types (ndi.probe.*, for example) this will return 0 so that the underlying ndi.daq.system epochs are added. Help for ndi.file.navigator/issyncgraphroot is inherited from superclass ndi.epoch.epochset isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.file.navigator.isvalid is inherited from superclass did.ido matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.file.navigator/matchedepochtable is inherited from superclass ndi.epoch.epochset navigator - Create a new ndi.file.navigator object that is associated with an session and daqsystem OBJ = ndi.file.navigator(SESSION, [ FILEPARAMETERS, EPOCHPROBEMAP_CLASS, EPOCHPROBEMAP_FILEPARAMETERS]) or OBJ = ndi.file.navigator(SESSION, NDI_FILENAVIGATOR_DOC_OBJ) Creates a new ndi.file.navigator object that negotiates the data tree of daqsystem's data that is stored at the file path PATH. Inputs: SESSION: an ndi.session Optional inputs: FILEPARAMETERS: the files that are recorded in each epoch of DEVICE in this data tree style (see ndi.file.navigator/SETFILEPARAMETERS for description) EPOCHPROBEMAP_CLASS: the class of epoch_record to be used; 'ndi.epoch.epochprobemap_daqsystem' is used by default EPOCHPROBEMAP_FILEPARAMETERS: the file parameters to search for the epoch record file among the files present in each epoch (see ndi.file.navigator/SETEPOCHPROBEMAPFILEPARAMETERS). By default, the file location specified in ndi.file.navigator/EPOCHPROBEMAPFILENAME is used Output: OBJ - an ndi.file.navigator object See also: ndi.session Documentation for ndi.file.navigator/navigator doc ndi.file.navigator newdocument - create an ndi.document that is based on an ndi.file.navigator object NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_FILENAVIGATOR_OBJ) Creates an ndi.document of type 'filenavigator' numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.file.navigator/numepochs is inherited from superclass ndi.epoch.epochset path - Return the file path for the ndi.file.navigator object THEPATH = PATH(NDI_FILENAVIGATOR_OBJ) Returns the path of the ndi.session associated with the ndi.file.navigator object NDI_FILENAVIGATOR_OBJ. removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG(NDI_EPOCH_PARAM_OBJ, EPOCHNUMBER, NAME) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. Any tags with name 'NAME' will be removed from the tags in the epoch EPOCHNUMBER. tags in the epoch directory. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. NAME can be a single string, or it can be a cell array of strings (which will result in the removal of multiple tags). Help for ndi.file.navigator/removeepochtag is inherited from superclass ndi.epoch.epochset.param resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.file.navigator/EPOCHTABLE Help for ndi.file.navigator/resetepochtable is inherited from superclass ndi.epoch.epochset searchquery - create a search query that will search for this object SQ = SEARCHQUERY(NDI_FILENAVIGATOR_OBJ) Returns a database search query for this ndi.file.navigator object. selectfilegroups - Return groups of files that will comprise epochs EPOCHFILES = SELECTFILEGROUPS(NDI_FILENAVIGATOR_OBJ) Return the files that comprise epochs. EPOCHFILES{n} will be a cell list of the files in epoch n. For ndi.file.navigator, this simply uses the file matching parameters. See also: ndi.file.navigator/SETFILEPARAMETERS Step 1: find epochs on disk selectfilegroups_disk - select groups of files that will comprise epochs on disk EPOCHFILES = SELECTFILEGROUPS_DISK(NDI_FILENAVIGATOR_OBJ) Return the files on disk that comprise epochs. setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, EPOCHPROBEMAP, NUMBER, [OVERWRITE]) Sets or replaces the ndi.epoch.epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER. If OVERWRITE is present and is 1, then any existing epoch record is overwritten. Otherwise, an error is given if there is an existing epoch record. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem Help for ndi.file.navigator/setepochprobemap is inherited from superclass ndi.epoch.epochset.param setepochprobemapfileparameters - Set the epoch record fileparameters field of a ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETEPOCHPROBEMAPFILEPARAMETERS(NDI_FILENAVIGATOR_OBJ, THEEPOCHPROBEMAPFILEPARAMETERS) THEEPOCHPROBEMAPFILEPARAMETERS is a string or cell list of strings that specifies the epoch record file. By default, if no parameters are specified, the epoch record file is located at: [EXP]/.ndi/device_name/epoch_NNNNNNNNN.ndierf, where [EXP] is the session's path. However, one can pass search parameters that will search among all the file names returned by ndi.file.navigator/GETEPOCHS. The search parameter should be a regular expression or a set of regular expressions such as: Example: theepochprobemapfileparameters = '.*\\.ext\\>' Example: theepochprobemapfileparameters = {'myfile1.ext1', 'myfile2.ext2'} Example: theepochprobemapfileparameters = {'#.ext1', 'myfile#.ext2'} (# is the same, unknown string) setepochtag - Set tag(s) for an epoch SETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will replace any tags in the epoch directory. If there is no epoch EPOCHNUMBER, then an error is returned. Help for ndi.file.navigator/setepochtag is inherited from superclass ndi.epoch.epochset.param setfileparameters - Set the fileparameters field of a ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETFILEPARAMETERS(NDI_FILENAVIGATOR_OBJ, THEFILEPARAMETERS) THEFILEPARAMETERS is a string or cell list of strings that specifies the files that comprise an epoch. Example: filematch = '.*\\.ext\\>' Example: filematch = {'myfile1.ext1', 'myfile2.ext2'} Example: filematch = {'#.ext1', 'myfile#.ext2'} (# is the same, unknown string) Alternatively, THEFILEPARAMETERS can be delivered as a structure with the following fields: Fieldname: | Description ---------------------------------------------------------------------- filematch | A string or cell list of strings that need to be matched | Regular expressions are allowed | Example: filematch = '.*\\.ext\\>' | Example: filematch = {'myfile1.ext1', 'myfile2.ext2'} | Example: filematch = {'#.ext1', 'myfile#.ext2'} (# is the same, unknown string) setsession - set the SESSION for an ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETSESSION(NDI_FILENAVIGATOR_OBJ, SESSION) Set the SESSION property of an ndi.file.navigator object t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.file.navigator/t0_t1 is inherited from superclass ndi.epoch.epochset underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.file.navigator/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.file.navigator.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object [B,MSG] = VERIFYEPOCHPROBEMAP(ndi.epoch.epochset.param, EPOCHPROBEMAP, EPOCH_NUMBER_OR_ID) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given epoch number or epoch id EPOCH_NUMBER_OR_ID. For the abstract class EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. If B is 0, then the error message is returned in MSG. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem Help for ndi.file.navigator/verifyepochprobemap is inherited from superclass ndi.epoch.epochset.param","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/pfilemirror.m/","text":"ndi.file.pfilemirror PFILEMIRROR Mirror a directory with m files into a directory with p files B = PFILEMIRROR(M_PATH, P_PATH) Recursively copy a directory with .m files into a directory of .p files. M_PATH is a full path of a directory with .m files and subdirectories, and P_PATH is the location where the mirrored .p files should be placed.","title":"ndi.file.pfilemirror"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/pfilemirror.m/#ndifilepfilemirror","text":"PFILEMIRROR Mirror a directory with m files into a directory with p files B = PFILEMIRROR(M_PATH, P_PATH) Recursively copy a directory with .m files into a directory of .p files. M_PATH is a full path of a directory with .m files and subdirectories, and P_PATH is the location where the mirrored .p files should be placed.","title":"ndi.file.pfilemirror"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/temp_fid.m/","text":"ndi.file.temp_fid TEMP_FID - open a new temporary file for writing [FID,FNAME] = TEMP_FID() Open a new temporary file for writing. The full name of the file is returned in FNAME and the file identiifer is returned in FID. The file is opened for writing and little-endian byte order, the NDI default. An error is produced if the operation fails.","title":"ndi.file.temp_fid"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/temp_fid.m/#ndifiletemp_fid","text":"TEMP_FID - open a new temporary file for writing [FID,FNAME] = TEMP_FID() Open a new temporary file for writing. The full name of the file is returned in FNAME and the file identiifer is returned in FID. The file is opened for writing and little-endian byte order, the NDI default. An error is produced if the operation fails.","title":"ndi.file.temp_fid"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/temp_name.m/","text":"ndi.file.temp_name TEMP_NAME - return a unique temporary file name FNAME = ndi.file.temp_name() Return the full path of a unique temporary file name that can be used by NDI programs.","title":"ndi.file.temp_name"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/temp_name.m/#ndifiletemp_name","text":"TEMP_NAME - return a unique temporary file name FNAME = ndi.file.temp_name() Return the full path of a unique temporary file name that can be used by NDI programs.","title":"ndi.file.temp_name"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Bnavigator/epochdir.m/","text":"CLASS ndi.file.navigator.epochdir NDI_FILENAVIGATOR_EPOCHDIR - Create a new NDI_FILENAVIGATOR_EPOCHDIR object DT = FILENAVIGATOR_EPOCHDIR(EXP, FILETYPE) Creates a new file tree object with the session name This class in inherited from filenavigator and with epochdir organization Superclasses ndi.file.navigator , ndi.ido , did.ido , ndi.epoch.epochset.param , ndi.epoch.epochset , ndi.documentservice , ndi.database.ingestion_help Properties Property Description session fileparameters epochprobemap_fileparameters identifier epochprobemap_class Methods Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Return an epoch table for ndi.file.navigator cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object defaultepochprobemapfilename return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochdir Create a new ndi.file.navigator.epochdir object that is associated with an session and device epochgraph graph of the mapping and cost of converting time among epochs epochid EPOCHID = Get the epoch identifier for a particular epoch epochidfilename return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq determines whether two ndi.file.navigator objects are equivalent filematch_hashstring a computation to produce a (likely to be) unique string based on filematch find_ingested_documents find ndi.documents that reflect ingested epochs getcache return the NDI_CACHE and key for ndi.file.navigator getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs getepochfiles Return the file paths for one recording epoch getepochfiles_number Return the file paths for one recording epoch getepochingesteddoc get an ingested epoch document if it exists getepochprobemap Return the epoch record for a given ndi.file.navigator epoch number getepochtag Get tag(s) from an epoch ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the identifier of an DID.IDO object ingest create new documents that produce the ingestion of an ingestion_help_obj ingestedfiles_epochid what is the epoch id for ingested epochfiles? ingestion_class the name of the ingestion class for this object isingested is a set of epochfiles ingested? issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? matchedepochtable compare a hash number from an epochtable to the current version newdocument create an ndi.document that is based on an ndi.file.navigator object numepochs Number of epochs of ndi.epoch.epochset path Return the file path for the ndi.file.navigator object removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery create a search query that will search for this object selectfilegroups Return groups of files that will comprise epochs selectfilegroups_disk Return groups of files that will comprise epochs setepochprobemap Sets the epoch record of a particular epoch setepochprobemapfileparameters Set the epoch record fileparameters field of a ndi.file.navigator object setepochtag Set tag(s) for an epoch setfileparameters Set the fileparameters field of a ndi.file.navigator object setsession set the SESSION for an ndi.file.navigator object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object Methods help addepochtag - Add tag(s) for an epoch ADDEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will be added to any tags in the epoch EPOCHNUMBER. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. Help for ndi.file.navigator.epochdir/addepochtag is inherited from superclass ndi.epoch.epochset.param buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.file.navigator.epochdir/EPOCHNODES Help for ndi.file.navigator.epochdir/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - Return an epoch table for ndi.file.navigator ET = BUILDEPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch (may change) 'epoch_id' | The epoch ID code (will never change once established) | This uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains this epoch. 'epochprobemap' | The epochprobemap object from each epoch 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' | 'underlying' contains the file list for each epoch; 'epoch_id' and 'epoch_number' | match those of NDI_FILENAVIGATOR_OBJ Help for ndi.file.navigator.epochdir/buildepochtable is inherited from superclass ndi.file.navigator cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.file.navigator.epochdir.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.file.navigator.epochdir/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.file.navigator.epochdir/cached_epochtable is inherited from superclass ndi.epoch.epochset defaultepochprobemapfilename - return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = DEFAULTEPOCHPROBEMAPFILENAME(NDI_FILENAVIGATOR_OBJ, NUMBER) Returns the default EPOCHPROBEMAPFILENAME for the ndi.daq.system NDI_DEVICE_OBJ for epoch NUMBER. If there are no files in epoch NUMBER, an error is generated. NUMBER cannot be an epoch id. In the base class, ndi.epoch.epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file. If the first file in the epoch file list is 'PATH/MYFILENAME.ext', then the default ndi.epoch.epochprobemap_daqsystem data is stored as 'PATH/.MYFILENAME.ext.epochprobemap.ndi.'. This may be overridden if there is an EPOCHPROBEMAP_FILEPARAMETERS set. See also: ndi.file.navigator.epochdir/SETEPOCHPROBEMAPFILEPARAMETERS Help for ndi.file.navigator.epochdir/defaultepochprobemapfilename is inherited from superclass ndi.file.navigator epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.file.navigator.epochdir/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). The abstract class always returns ndi.time.clocktype('no_time') See also: ndi.time.clocktype, T0_T1 Help for ndi.file.navigator.epochdir/epochclock is inherited from superclass ndi.epoch.epochset epochdir - Create a new ndi.file.navigator.epochdir object that is associated with an session and device OBJ = ndi.file.navigator.epochdir(EXP, [FILEPARAMETERS, EPOCHPROBEMAP_CLASS, EPOCHPROBEMAP_FILEPARAMETERS]) Creates a new ndi.file.navigator.epochdir object that negotiates the data tree of device's data that is stored in an session EXP. (document FILEPARAMETERS) Inputs: EXP - an ndi.session ; FILEPARAMETERS - the files that are recorded in each epoch FILEPARAMETERS: the files that are recorded in each epoch of DEVICE in this data tree style (see ndi.file.navigator/SETFILEPARAMETERS for description) EPOCHPROBEMAP_CLASS: the class of epoch_record to be used; 'ndi.epoch.epochprobemap_daqsystem' is used by default EPOCHPROBEMAP_FILEPARAMETERS: the file parameters to search for the epoch record file among the files present in each epoch (see ndi.file.navigator/SETEPOCHPROBEMAPFILEPARAMETERS). By default, the file location specified in ndi.file.navigator/EPOCHPROBEMAPFILENAME is used Output: OBJ - an ndi.file.navigator.epochdir object See also: ndi.session, ndi.daq.system Documentation for ndi.file.navigator.epochdir/epochdir doc ndi.file.navigator.epochdir epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.file.navigator.epochdir/epochgraph is inherited from superclass ndi.epoch.epochset epochid - EPOCHID = Get the epoch identifier for a particular epoch ID = EPOCHID(NDI_FILENAVIGATOR_EPOCHDIR_OBJ, EPOCH_NUMBER, [EPOCHFILES]) Returns the epoch identifier string for the epoch EPOCH_NUMBER. For the ndi.file.navigator.epochdir object, each EPOCH is organized in its own subdirectory, and the epoch identifier is the _name_ of the subdirectory. For example, if my device has a file tree that reads files with extension .dat, the session directory is mysession/ t00001/ mydata.dat Then ID is 't00001' epochidfilename - return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHIDFILENAME(NDI_FILENAVIGATOR_OBJ, NUMBER) Returns the EPOCHIDFILENAME for the ndi.daq.system NDI_DEVICE_OBJ for epoch NUMBER. If there are no files in epoch NUMBER, an error is generated. In the base class, ndi.epoch.epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file. If the first file in the epoch file list is 'PATH/MYFILENAME.ext', then the ndi.epoch.epochprobemap_daqsystem data is stored as 'PATH/.MYFILENAME.ext.epochid.ndi.'. Help for ndi.file.navigator.epochdir/epochidfilename is inherited from superclass ndi.file.navigator epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.file.navigator.epochdir/epochnodes is inherited from superclass ndi.epoch.epochset epochprobemapfilename - return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME(NDI_FILENAVIGATOR_OBJ, NUMBER) Returns the EPOCHPROBEMAPFILENAME for the ndi.file.navigator NDI_FILENAVIGATOR_OBJ for epoch NUMBER. If there are no files in epoch NUMBER, an error is generated. The file name is returned with a full path. NUMBER cannot be an epoch_id. The file name is determined by examining if the user has specified any EPOCHPROBEMAP_FILEPARAMETERS; if not, then the DEFAULTEPOCHPROBEMAPFILENAME is used. See also: ndi.file.navigator.epochdir/SETEPOCHPROBEMAPFILEPARAMETERS, ndi.file.navigator.epochdir/DEFAULTEPOCHPROBEMAPFILENAME default Help for ndi.file.navigator.epochdir/epochprobemapfilename is inherited from superclass ndi.file.navigator epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME(NDI_EPOCHSET_OBJ) Returns the object name that is used when creating epoch nodes. If the class has a 'name' property, that property is used. Otherwise, 'unknown' is used. Help for ndi.file.navigator.epochdir/epochsetname is inherited from superclass ndi.epoch.epochset epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.file.navigator.epochdir/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.file.navigator.epochdir/epochtableentry is inherited from superclass ndi.epoch.epochset epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER) In this base class, empty is returned because it is an abstract class. Help for ndi.file.navigator.epochdir/epochtagfilename is inherited from superclass ndi.epoch.epochset.param eq - determines whether two ndi.file.navigator objects are equivalent B = EQ(NDI_FILENAVIGATOR_OBJ_A, NDI_FILENAVIGATOR_OBJ_B) Returns 1 if the ndi.file.navigator objects are equivalent, and 0 otherwise. This equivalency does not depend on NDI_FILENAVIGATOR_OBJ_A and NDI_FILENAVIGATOR_OBJ_B are the same HANDLE objects. They can be equivalent and occupy different places in memory. Help for ndi.file.navigator.epochdir/eq is inherited from superclass ndi.file.navigator filematch_hashstring - a computation to produce a (likely to be) unique string based on filematch FMSTR = FILEMATCH_HASHSTRING(NDI_FILENAVIGATOR_OBJ) Returns a string that is based on a hash function that is computed on the concatenated text of the 'filematch' field of the 'fileparameters' property. Note: the function used is 'MD5' (see DataHash) Help for ndi.file.navigator.epochdir/filematch_hashstring is inherited from superclass ndi.file.navigator find_ingested_documents - find ndi.documents that reflect ingested epochs D_INGESTED = FIND_INGESTED_DOCUMENTS(NDI_FILENAVIGATOR_OBJ) Returns ndi.document objects that correspond to ingested epochs of this NDI_FILENAVIGATOR_OBJ. Help for ndi.file.navigator.epochdir/find_ingested_documents is inherited from superclass ndi.file.navigator getcache - return the NDI_CACHE and key for ndi.file.navigator [CACHE,KEY] = GETCACHE(NDI_FILENAVIGATOR_OBJ) Returns the CACHE and KEY for the ndi.file.navigator object. The CACHE is returned from the associated session. The KEY is the string 'filenavigator_' followed by the object's id. See also: ndi.file.navigator.epochdir Help for ndi.file.navigator.epochdir/getcache is inherited from superclass ndi.file.navigator getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.file.navigator.epochdir/getepocharray is inherited from superclass ndi.epoch.epochset getepochfiles - Return the file paths for one recording epoch [FULLPATHFILENAMES, EPOCHID] = GETEPOCHFILES(NDI_FILENAVIGATOR_OBJ, EPOCH_NUMBER_OR_ID) Return the file names or file paths associated with one recording epoch of of an NDI_FILENAVIGATOR_OBJ. EPOCH_NUMBER_OR_ID can either be a number of an epoch to return, or an epoch identifier (epoch id). Requesting multiple epochs simultaneously: EPOCH_NUMBER_OR_ID can also be an array of numbers, in which case a cell array of cell arrays is returned in FULLPATHFILENAMES, one entry per number in EPOCH_NUMBER_OR_ID. Further, EPOCH_NUMBER_OR_ID can be a cell array of strings of multiple epoch identifiers; in this case, a cell array of cell arrays is returned in FULLPATHFILENAMES. Uses the FILEPARAMETERS (see ndi.file.navigator/SETFILEPARAMETERS) to identify recording epochs under the SESSION path. See also: EPOCHID Help for ndi.file.navigator.epochdir/getepochfiles is inherited from superclass ndi.file.navigator getepochfiles_number - Return the file paths for one recording epoch [FULLPATHFILENAMES] = GETEPOCHFILES_NUMBER(NDI_FILENAVIGATOR_OBJ, EPOCH_NUMBER) Return the file names or file paths associated with one recording epoch. EPOCH_NUMBER must be a number or array of epoch numbers. EPOCH_NUMBER cannot be an EPOCH_ID. If EPOCH_NUMBER is an array, then a cell array of cell arrays is returned in FULLPATHFILENAMES. Uses the FILEPARAMETERS (see ndi.file.navigator/SETFILEPARAMETERS) to identify recording epochs under the SESSION path. See also: GETEPOCHFILES developer note: possibility of caching this with some timeout developer note: this function exists so you can get the epoch files without calling epochtable, which also needs to get the epoch files; infinite recursion happens Help for ndi.file.navigator.epochdir/getepochfiles_number is inherited from superclass ndi.file.navigator getepochingesteddoc - get an ingested epoch document if it exists D = GETEPOCHINGESTEDDOC(NDI_FILENAVIGATOR_OBJ, EPOCHFILES) Returns the document if it exists, empty if it doesn't. Help for ndi.file.navigator.epochdir/getepochingesteddoc is inherited from superclass ndi.file.navigator getepochprobemap - Return the epoch record for a given ndi.file.navigator epoch number EPOCHPROBEMAP = GETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, N, EPOCHFILES) Inputs: NDI_EPOCHSET_PARAM_OBJ - the ndi.epoch.epochset.param object N - the epoch number or identifier EPOCHFILES - the files for this epoch Output: EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME Help for ndi.file.navigator.epochdir/getepochprobemap is inherited from superclass ndi.file.navigator getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. If there are no files in EPOCHNUMBER then an error is returned. Help for ndi.file.navigator.epochdir/getepochtag is inherited from superclass ndi.epoch.epochset.param ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.file.navigator.epochdir.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.file.navigator.epochdir/id is inherited from superclass did.ido ingest - create new documents that produce the ingestion of an ingestion_help_obj [DOCS_OUT] = INGEST(NDI_FILENAVIGATOR_OBJ) Creates documents to specify the epochs of an ndi.file.navigator object. Help for ndi.file.navigator.epochdir/ingest is inherited from superclass ndi.file.navigator ingestedfiles_epochid - what is the epoch id for ingested epochfiles? EPOCHID = INGESTEDFILES_EPOCHID(EPOCHFILES) Returns the EPOCHID for the ingested EPOCHFILES Help for ndi.file.navigator.epochdir.ingestedfiles_epochid is inherited from superclass ndi.file.navigator ingestion_class - the name of the ingestion class for this object CNAME = INGESTION_CLASS(INGESTION_HELP_OBJ) Returns the class name of the object that should be created if this object class is ingested into the database (and won't have access to any raw data). For the base class, this simply returns empty. Help for ndi.file.navigator.epochdir/ingestion_class is inherited from superclass ndi.database.ingestion_help isingested - is a set of epochfiles ingested? B = ISINGESTED(EPOCHFILES) Returns 1 if the cell array of filenames reflects ingested filenames. Returns 0 otherwise. Checks to see if the first file begins with 'epochid://'. Help for ndi.file.navigator.epochdir.isingested is inherited from superclass ndi.file.navigator issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset objects, this returns 1. For some object types (ndi.probe.*, for example) this will return 0 so that the underlying ndi.daq.system epochs are added. Help for ndi.file.navigator.epochdir/issyncgraphroot is inherited from superclass ndi.epoch.epochset isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.file.navigator.epochdir.isvalid is inherited from superclass did.ido matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.file.navigator.epochdir/matchedepochtable is inherited from superclass ndi.epoch.epochset newdocument - create an ndi.document that is based on an ndi.file.navigator object NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_FILENAVIGATOR_OBJ) Creates an ndi.document of type 'filenavigator' Help for ndi.file.navigator.epochdir/newdocument is inherited from superclass ndi.file.navigator numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.file.navigator.epochdir/numepochs is inherited from superclass ndi.epoch.epochset path - Return the file path for the ndi.file.navigator object THEPATH = PATH(NDI_FILENAVIGATOR_OBJ) Returns the path of the ndi.session associated with the ndi.file.navigator object NDI_FILENAVIGATOR_OBJ. Help for ndi.file.navigator.epochdir/path is inherited from superclass ndi.file.navigator removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG(NDI_EPOCH_PARAM_OBJ, EPOCHNUMBER, NAME) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. Any tags with name 'NAME' will be removed from the tags in the epoch EPOCHNUMBER. tags in the epoch directory. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. NAME can be a single string, or it can be a cell array of strings (which will result in the removal of multiple tags). Help for ndi.file.navigator.epochdir/removeepochtag is inherited from superclass ndi.epoch.epochset.param resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.file.navigator.epochdir/EPOCHTABLE Help for ndi.file.navigator.epochdir/resetepochtable is inherited from superclass ndi.epoch.epochset searchquery - create a search query that will search for this object SQ = SEARCHQUERY(NDI_FILENAVIGATOR_OBJ) Returns a database search query for this ndi.file.navigator object. Help for ndi.file.navigator.epochdir/searchquery is inherited from superclass ndi.file.navigator selectfilegroups - Return groups of files that will comprise epochs EPOCHFILES = SELECTFILEGROUPS(NDI_FILENAVIGATOR_OBJ) Return the files that comprise epochs. EPOCHFILES{n} will be a cell list of the files in epoch n. For ndi.file.navigator, this simply uses the file matching parameters. See also: ndi.file.navigator.epochdir/SETFILEPARAMETERS Step 1: find epochs on disk Help for ndi.file.navigator.epochdir/selectfilegroups is inherited from superclass ndi.file.navigator selectfilegroups_disk - Return groups of files that will comprise epochs EPOCHFILES = SELECTFILEGROUPS_DISK(NDI_FILENAVIGATOR_EPOCHDIR_OBJ) Return the files that comprise epochs. EPOCHFILES{n} will be a cell list of the files in epoch n. For ndi.file.navigator.epochdir, this uses the file matching parameters in all subdirectories within the session (at a folder depth of 1; that is, it doesn't search folders in folders). See also: ndi.file.navigator/SETFILEPARAMETERS setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, EPOCHPROBEMAP, NUMBER, [OVERWRITE]) Sets or replaces the ndi.epoch.epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER. If OVERWRITE is present and is 1, then any existing epoch record is overwritten. Otherwise, an error is given if there is an existing epoch record. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem Help for ndi.file.navigator.epochdir/setepochprobemap is inherited from superclass ndi.epoch.epochset.param setepochprobemapfileparameters - Set the epoch record fileparameters field of a ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETEPOCHPROBEMAPFILEPARAMETERS(NDI_FILENAVIGATOR_OBJ, THEEPOCHPROBEMAPFILEPARAMETERS) THEEPOCHPROBEMAPFILEPARAMETERS is a string or cell list of strings that specifies the epoch record file. By default, if no parameters are specified, the epoch record file is located at: [EXP]/.ndi/device_name/epoch_NNNNNNNNN.ndierf, where [EXP] is the session's path. However, one can pass search parameters that will search among all the file names returned by ndi.file.navigator/GETEPOCHS. The search parameter should be a regular expression or a set of regular expressions such as: Example: theepochprobemapfileparameters = '.*\\.ext\\>' Example: theepochprobemapfileparameters = {'myfile1.ext1', 'myfile2.ext2'} Example: theepochprobemapfileparameters = {'#.ext1', 'myfile#.ext2'} (# is the same, unknown string) Help for ndi.file.navigator.epochdir/setepochprobemapfileparameters is inherited from superclass ndi.file.navigator setepochtag - Set tag(s) for an epoch SETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will replace any tags in the epoch directory. If there is no epoch EPOCHNUMBER, then an error is returned. Help for ndi.file.navigator.epochdir/setepochtag is inherited from superclass ndi.epoch.epochset.param setfileparameters - Set the fileparameters field of a ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETFILEPARAMETERS(NDI_FILENAVIGATOR_OBJ, THEFILEPARAMETERS) THEFILEPARAMETERS is a string or cell list of strings that specifies the files that comprise an epoch. Example: filematch = '.*\\.ext\\>' Example: filematch = {'myfile1.ext1', 'myfile2.ext2'} Example: filematch = {'#.ext1', 'myfile#.ext2'} (# is the same, unknown string) Alternatively, THEFILEPARAMETERS can be delivered as a structure with the following fields: Fieldname: | Description ---------------------------------------------------------------------- filematch | A string or cell list of strings that need to be matched | Regular expressions are allowed | Example: filematch = '.*\\.ext\\>' | Example: filematch = {'myfile1.ext1', 'myfile2.ext2'} | Example: filematch = {'#.ext1', 'myfile#.ext2'} (# is the same, unknown string) Help for ndi.file.navigator.epochdir/setfileparameters is inherited from superclass ndi.file.navigator setsession - set the SESSION for an ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETSESSION(NDI_FILENAVIGATOR_OBJ, SESSION) Set the SESSION property of an ndi.file.navigator object Help for ndi.file.navigator.epochdir/setsession is inherited from superclass ndi.file.navigator t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.file.navigator.epochdir/t0_t1 is inherited from superclass ndi.epoch.epochset underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.file.navigator.epochdir/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.file.navigator.epochdir.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object [B,MSG] = VERIFYEPOCHPROBEMAP(ndi.epoch.epochset.param, EPOCHPROBEMAP, EPOCH_NUMBER_OR_ID) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given epoch number or epoch id EPOCH_NUMBER_OR_ID. For the abstract class EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. If B is 0, then the error message is returned in MSG. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem Help for ndi.file.navigator.epochdir/verifyepochprobemap is inherited from superclass ndi.epoch.epochset.param","title":"ndi.file.navigator.epochdir"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Bnavigator/epochdir.m/#class-ndifilenavigatorepochdir","text":"NDI_FILENAVIGATOR_EPOCHDIR - Create a new NDI_FILENAVIGATOR_EPOCHDIR object DT = FILENAVIGATOR_EPOCHDIR(EXP, FILETYPE) Creates a new file tree object with the session name This class in inherited from filenavigator and with epochdir organization","title":"CLASS ndi.file.navigator.epochdir"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Bnavigator/epochdir.m/#superclasses","text":"ndi.file.navigator , ndi.ido , did.ido , ndi.epoch.epochset.param , ndi.epoch.epochset , ndi.documentservice , ndi.database.ingestion_help","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Bnavigator/epochdir.m/#properties","text":"Property Description session fileparameters epochprobemap_fileparameters identifier epochprobemap_class","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Bnavigator/epochdir.m/#methods","text":"Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Return an epoch table for ndi.file.navigator cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object defaultepochprobemapfilename return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochdir Create a new ndi.file.navigator.epochdir object that is associated with an session and device epochgraph graph of the mapping and cost of converting time among epochs epochid EPOCHID = Get the epoch identifier for a particular epoch epochidfilename return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq determines whether two ndi.file.navigator objects are equivalent filematch_hashstring a computation to produce a (likely to be) unique string based on filematch find_ingested_documents find ndi.documents that reflect ingested epochs getcache return the NDI_CACHE and key for ndi.file.navigator getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs getepochfiles Return the file paths for one recording epoch getepochfiles_number Return the file paths for one recording epoch getepochingesteddoc get an ingested epoch document if it exists getepochprobemap Return the epoch record for a given ndi.file.navigator epoch number getepochtag Get tag(s) from an epoch ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the identifier of an DID.IDO object ingest create new documents that produce the ingestion of an ingestion_help_obj ingestedfiles_epochid what is the epoch id for ingested epochfiles? ingestion_class the name of the ingestion class for this object isingested is a set of epochfiles ingested? issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? matchedepochtable compare a hash number from an epochtable to the current version newdocument create an ndi.document that is based on an ndi.file.navigator object numepochs Number of epochs of ndi.epoch.epochset path Return the file path for the ndi.file.navigator object removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery create a search query that will search for this object selectfilegroups Return groups of files that will comprise epochs selectfilegroups_disk Return groups of files that will comprise epochs setepochprobemap Sets the epoch record of a particular epoch setepochprobemapfileparameters Set the epoch record fileparameters field of a ndi.file.navigator object setepochtag Set tag(s) for an epoch setfileparameters Set the fileparameters field of a ndi.file.navigator object setsession set the SESSION for an ndi.file.navigator object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Bnavigator/epochdir.m/#methods-help","text":"addepochtag - Add tag(s) for an epoch ADDEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will be added to any tags in the epoch EPOCHNUMBER. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. Help for ndi.file.navigator.epochdir/addepochtag is inherited from superclass ndi.epoch.epochset.param buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.file.navigator.epochdir/EPOCHNODES Help for ndi.file.navigator.epochdir/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - Return an epoch table for ndi.file.navigator ET = BUILDEPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch (may change) 'epoch_id' | The epoch ID code (will never change once established) | This uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains this epoch. 'epochprobemap' | The epochprobemap object from each epoch 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' | 'underlying' contains the file list for each epoch; 'epoch_id' and 'epoch_number' | match those of NDI_FILENAVIGATOR_OBJ Help for ndi.file.navigator.epochdir/buildepochtable is inherited from superclass ndi.file.navigator cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.file.navigator.epochdir.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.file.navigator.epochdir/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.file.navigator.epochdir/cached_epochtable is inherited from superclass ndi.epoch.epochset defaultepochprobemapfilename - return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = DEFAULTEPOCHPROBEMAPFILENAME(NDI_FILENAVIGATOR_OBJ, NUMBER) Returns the default EPOCHPROBEMAPFILENAME for the ndi.daq.system NDI_DEVICE_OBJ for epoch NUMBER. If there are no files in epoch NUMBER, an error is generated. NUMBER cannot be an epoch id. In the base class, ndi.epoch.epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file. If the first file in the epoch file list is 'PATH/MYFILENAME.ext', then the default ndi.epoch.epochprobemap_daqsystem data is stored as 'PATH/.MYFILENAME.ext.epochprobemap.ndi.'. This may be overridden if there is an EPOCHPROBEMAP_FILEPARAMETERS set. See also: ndi.file.navigator.epochdir/SETEPOCHPROBEMAPFILEPARAMETERS Help for ndi.file.navigator.epochdir/defaultepochprobemapfilename is inherited from superclass ndi.file.navigator epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.file.navigator.epochdir/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). The abstract class always returns ndi.time.clocktype('no_time') See also: ndi.time.clocktype, T0_T1 Help for ndi.file.navigator.epochdir/epochclock is inherited from superclass ndi.epoch.epochset epochdir - Create a new ndi.file.navigator.epochdir object that is associated with an session and device OBJ = ndi.file.navigator.epochdir(EXP, [FILEPARAMETERS, EPOCHPROBEMAP_CLASS, EPOCHPROBEMAP_FILEPARAMETERS]) Creates a new ndi.file.navigator.epochdir object that negotiates the data tree of device's data that is stored in an session EXP. (document FILEPARAMETERS) Inputs: EXP - an ndi.session ; FILEPARAMETERS - the files that are recorded in each epoch FILEPARAMETERS: the files that are recorded in each epoch of DEVICE in this data tree style (see ndi.file.navigator/SETFILEPARAMETERS for description) EPOCHPROBEMAP_CLASS: the class of epoch_record to be used; 'ndi.epoch.epochprobemap_daqsystem' is used by default EPOCHPROBEMAP_FILEPARAMETERS: the file parameters to search for the epoch record file among the files present in each epoch (see ndi.file.navigator/SETEPOCHPROBEMAPFILEPARAMETERS). By default, the file location specified in ndi.file.navigator/EPOCHPROBEMAPFILENAME is used Output: OBJ - an ndi.file.navigator.epochdir object See also: ndi.session, ndi.daq.system Documentation for ndi.file.navigator.epochdir/epochdir doc ndi.file.navigator.epochdir epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.file.navigator.epochdir/epochgraph is inherited from superclass ndi.epoch.epochset epochid - EPOCHID = Get the epoch identifier for a particular epoch ID = EPOCHID(NDI_FILENAVIGATOR_EPOCHDIR_OBJ, EPOCH_NUMBER, [EPOCHFILES]) Returns the epoch identifier string for the epoch EPOCH_NUMBER. For the ndi.file.navigator.epochdir object, each EPOCH is organized in its own subdirectory, and the epoch identifier is the _name_ of the subdirectory. For example, if my device has a file tree that reads files with extension .dat, the session directory is mysession/ t00001/ mydata.dat Then ID is 't00001' epochidfilename - return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHIDFILENAME(NDI_FILENAVIGATOR_OBJ, NUMBER) Returns the EPOCHIDFILENAME for the ndi.daq.system NDI_DEVICE_OBJ for epoch NUMBER. If there are no files in epoch NUMBER, an error is generated. In the base class, ndi.epoch.epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file. If the first file in the epoch file list is 'PATH/MYFILENAME.ext', then the ndi.epoch.epochprobemap_daqsystem data is stored as 'PATH/.MYFILENAME.ext.epochid.ndi.'. Help for ndi.file.navigator.epochdir/epochidfilename is inherited from superclass ndi.file.navigator epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.file.navigator.epochdir/epochnodes is inherited from superclass ndi.epoch.epochset epochprobemapfilename - return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME(NDI_FILENAVIGATOR_OBJ, NUMBER) Returns the EPOCHPROBEMAPFILENAME for the ndi.file.navigator NDI_FILENAVIGATOR_OBJ for epoch NUMBER. If there are no files in epoch NUMBER, an error is generated. The file name is returned with a full path. NUMBER cannot be an epoch_id. The file name is determined by examining if the user has specified any EPOCHPROBEMAP_FILEPARAMETERS; if not, then the DEFAULTEPOCHPROBEMAPFILENAME is used. See also: ndi.file.navigator.epochdir/SETEPOCHPROBEMAPFILEPARAMETERS, ndi.file.navigator.epochdir/DEFAULTEPOCHPROBEMAPFILENAME default Help for ndi.file.navigator.epochdir/epochprobemapfilename is inherited from superclass ndi.file.navigator epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME(NDI_EPOCHSET_OBJ) Returns the object name that is used when creating epoch nodes. If the class has a 'name' property, that property is used. Otherwise, 'unknown' is used. Help for ndi.file.navigator.epochdir/epochsetname is inherited from superclass ndi.epoch.epochset epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.file.navigator.epochdir/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.file.navigator.epochdir/epochtableentry is inherited from superclass ndi.epoch.epochset epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER) In this base class, empty is returned because it is an abstract class. Help for ndi.file.navigator.epochdir/epochtagfilename is inherited from superclass ndi.epoch.epochset.param eq - determines whether two ndi.file.navigator objects are equivalent B = EQ(NDI_FILENAVIGATOR_OBJ_A, NDI_FILENAVIGATOR_OBJ_B) Returns 1 if the ndi.file.navigator objects are equivalent, and 0 otherwise. This equivalency does not depend on NDI_FILENAVIGATOR_OBJ_A and NDI_FILENAVIGATOR_OBJ_B are the same HANDLE objects. They can be equivalent and occupy different places in memory. Help for ndi.file.navigator.epochdir/eq is inherited from superclass ndi.file.navigator filematch_hashstring - a computation to produce a (likely to be) unique string based on filematch FMSTR = FILEMATCH_HASHSTRING(NDI_FILENAVIGATOR_OBJ) Returns a string that is based on a hash function that is computed on the concatenated text of the 'filematch' field of the 'fileparameters' property. Note: the function used is 'MD5' (see DataHash) Help for ndi.file.navigator.epochdir/filematch_hashstring is inherited from superclass ndi.file.navigator find_ingested_documents - find ndi.documents that reflect ingested epochs D_INGESTED = FIND_INGESTED_DOCUMENTS(NDI_FILENAVIGATOR_OBJ) Returns ndi.document objects that correspond to ingested epochs of this NDI_FILENAVIGATOR_OBJ. Help for ndi.file.navigator.epochdir/find_ingested_documents is inherited from superclass ndi.file.navigator getcache - return the NDI_CACHE and key for ndi.file.navigator [CACHE,KEY] = GETCACHE(NDI_FILENAVIGATOR_OBJ) Returns the CACHE and KEY for the ndi.file.navigator object. The CACHE is returned from the associated session. The KEY is the string 'filenavigator_' followed by the object's id. See also: ndi.file.navigator.epochdir Help for ndi.file.navigator.epochdir/getcache is inherited from superclass ndi.file.navigator getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.file.navigator.epochdir/getepocharray is inherited from superclass ndi.epoch.epochset getepochfiles - Return the file paths for one recording epoch [FULLPATHFILENAMES, EPOCHID] = GETEPOCHFILES(NDI_FILENAVIGATOR_OBJ, EPOCH_NUMBER_OR_ID) Return the file names or file paths associated with one recording epoch of of an NDI_FILENAVIGATOR_OBJ. EPOCH_NUMBER_OR_ID can either be a number of an epoch to return, or an epoch identifier (epoch id). Requesting multiple epochs simultaneously: EPOCH_NUMBER_OR_ID can also be an array of numbers, in which case a cell array of cell arrays is returned in FULLPATHFILENAMES, one entry per number in EPOCH_NUMBER_OR_ID. Further, EPOCH_NUMBER_OR_ID can be a cell array of strings of multiple epoch identifiers; in this case, a cell array of cell arrays is returned in FULLPATHFILENAMES. Uses the FILEPARAMETERS (see ndi.file.navigator/SETFILEPARAMETERS) to identify recording epochs under the SESSION path. See also: EPOCHID Help for ndi.file.navigator.epochdir/getepochfiles is inherited from superclass ndi.file.navigator getepochfiles_number - Return the file paths for one recording epoch [FULLPATHFILENAMES] = GETEPOCHFILES_NUMBER(NDI_FILENAVIGATOR_OBJ, EPOCH_NUMBER) Return the file names or file paths associated with one recording epoch. EPOCH_NUMBER must be a number or array of epoch numbers. EPOCH_NUMBER cannot be an EPOCH_ID. If EPOCH_NUMBER is an array, then a cell array of cell arrays is returned in FULLPATHFILENAMES. Uses the FILEPARAMETERS (see ndi.file.navigator/SETFILEPARAMETERS) to identify recording epochs under the SESSION path. See also: GETEPOCHFILES developer note: possibility of caching this with some timeout developer note: this function exists so you can get the epoch files without calling epochtable, which also needs to get the epoch files; infinite recursion happens Help for ndi.file.navigator.epochdir/getepochfiles_number is inherited from superclass ndi.file.navigator getepochingesteddoc - get an ingested epoch document if it exists D = GETEPOCHINGESTEDDOC(NDI_FILENAVIGATOR_OBJ, EPOCHFILES) Returns the document if it exists, empty if it doesn't. Help for ndi.file.navigator.epochdir/getepochingesteddoc is inherited from superclass ndi.file.navigator getepochprobemap - Return the epoch record for a given ndi.file.navigator epoch number EPOCHPROBEMAP = GETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, N, EPOCHFILES) Inputs: NDI_EPOCHSET_PARAM_OBJ - the ndi.epoch.epochset.param object N - the epoch number or identifier EPOCHFILES - the files for this epoch Output: EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME Help for ndi.file.navigator.epochdir/getepochprobemap is inherited from superclass ndi.file.navigator getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. If there are no files in EPOCHNUMBER then an error is returned. Help for ndi.file.navigator.epochdir/getepochtag is inherited from superclass ndi.epoch.epochset.param ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.file.navigator.epochdir.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.file.navigator.epochdir/id is inherited from superclass did.ido ingest - create new documents that produce the ingestion of an ingestion_help_obj [DOCS_OUT] = INGEST(NDI_FILENAVIGATOR_OBJ) Creates documents to specify the epochs of an ndi.file.navigator object. Help for ndi.file.navigator.epochdir/ingest is inherited from superclass ndi.file.navigator ingestedfiles_epochid - what is the epoch id for ingested epochfiles? EPOCHID = INGESTEDFILES_EPOCHID(EPOCHFILES) Returns the EPOCHID for the ingested EPOCHFILES Help for ndi.file.navigator.epochdir.ingestedfiles_epochid is inherited from superclass ndi.file.navigator ingestion_class - the name of the ingestion class for this object CNAME = INGESTION_CLASS(INGESTION_HELP_OBJ) Returns the class name of the object that should be created if this object class is ingested into the database (and won't have access to any raw data). For the base class, this simply returns empty. Help for ndi.file.navigator.epochdir/ingestion_class is inherited from superclass ndi.database.ingestion_help isingested - is a set of epochfiles ingested? B = ISINGESTED(EPOCHFILES) Returns 1 if the cell array of filenames reflects ingested filenames. Returns 0 otherwise. Checks to see if the first file begins with 'epochid://'. Help for ndi.file.navigator.epochdir.isingested is inherited from superclass ndi.file.navigator issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset objects, this returns 1. For some object types (ndi.probe.*, for example) this will return 0 so that the underlying ndi.daq.system epochs are added. Help for ndi.file.navigator.epochdir/issyncgraphroot is inherited from superclass ndi.epoch.epochset isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.file.navigator.epochdir.isvalid is inherited from superclass did.ido matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.file.navigator.epochdir/matchedepochtable is inherited from superclass ndi.epoch.epochset newdocument - create an ndi.document that is based on an ndi.file.navigator object NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_FILENAVIGATOR_OBJ) Creates an ndi.document of type 'filenavigator' Help for ndi.file.navigator.epochdir/newdocument is inherited from superclass ndi.file.navigator numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.file.navigator.epochdir/numepochs is inherited from superclass ndi.epoch.epochset path - Return the file path for the ndi.file.navigator object THEPATH = PATH(NDI_FILENAVIGATOR_OBJ) Returns the path of the ndi.session associated with the ndi.file.navigator object NDI_FILENAVIGATOR_OBJ. Help for ndi.file.navigator.epochdir/path is inherited from superclass ndi.file.navigator removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG(NDI_EPOCH_PARAM_OBJ, EPOCHNUMBER, NAME) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. Any tags with name 'NAME' will be removed from the tags in the epoch EPOCHNUMBER. tags in the epoch directory. If tags with the same names as those in TAG already exist, they will be overwritten. If there is no epoch EPOCHNUMBER, then an error is returned. NAME can be a single string, or it can be a cell array of strings (which will result in the removal of multiple tags). Help for ndi.file.navigator.epochdir/removeepochtag is inherited from superclass ndi.epoch.epochset.param resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.file.navigator.epochdir/EPOCHTABLE Help for ndi.file.navigator.epochdir/resetepochtable is inherited from superclass ndi.epoch.epochset searchquery - create a search query that will search for this object SQ = SEARCHQUERY(NDI_FILENAVIGATOR_OBJ) Returns a database search query for this ndi.file.navigator object. Help for ndi.file.navigator.epochdir/searchquery is inherited from superclass ndi.file.navigator selectfilegroups - Return groups of files that will comprise epochs EPOCHFILES = SELECTFILEGROUPS(NDI_FILENAVIGATOR_OBJ) Return the files that comprise epochs. EPOCHFILES{n} will be a cell list of the files in epoch n. For ndi.file.navigator, this simply uses the file matching parameters. See also: ndi.file.navigator.epochdir/SETFILEPARAMETERS Step 1: find epochs on disk Help for ndi.file.navigator.epochdir/selectfilegroups is inherited from superclass ndi.file.navigator selectfilegroups_disk - Return groups of files that will comprise epochs EPOCHFILES = SELECTFILEGROUPS_DISK(NDI_FILENAVIGATOR_EPOCHDIR_OBJ) Return the files that comprise epochs. EPOCHFILES{n} will be a cell list of the files in epoch n. For ndi.file.navigator.epochdir, this uses the file matching parameters in all subdirectories within the session (at a folder depth of 1; that is, it doesn't search folders in folders). See also: ndi.file.navigator/SETFILEPARAMETERS setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, EPOCHPROBEMAP, NUMBER, [OVERWRITE]) Sets or replaces the ndi.epoch.epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER. If OVERWRITE is present and is 1, then any existing epoch record is overwritten. Otherwise, an error is given if there is an existing epoch record. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem Help for ndi.file.navigator.epochdir/setepochprobemap is inherited from superclass ndi.epoch.epochset.param setepochprobemapfileparameters - Set the epoch record fileparameters field of a ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETEPOCHPROBEMAPFILEPARAMETERS(NDI_FILENAVIGATOR_OBJ, THEEPOCHPROBEMAPFILEPARAMETERS) THEEPOCHPROBEMAPFILEPARAMETERS is a string or cell list of strings that specifies the epoch record file. By default, if no parameters are specified, the epoch record file is located at: [EXP]/.ndi/device_name/epoch_NNNNNNNNN.ndierf, where [EXP] is the session's path. However, one can pass search parameters that will search among all the file names returned by ndi.file.navigator/GETEPOCHS. The search parameter should be a regular expression or a set of regular expressions such as: Example: theepochprobemapfileparameters = '.*\\.ext\\>' Example: theepochprobemapfileparameters = {'myfile1.ext1', 'myfile2.ext2'} Example: theepochprobemapfileparameters = {'#.ext1', 'myfile#.ext2'} (# is the same, unknown string) Help for ndi.file.navigator.epochdir/setepochprobemapfileparameters is inherited from superclass ndi.file.navigator setepochtag - Set tag(s) for an epoch SETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG) Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. These tags will replace any tags in the epoch directory. If there is no epoch EPOCHNUMBER, then an error is returned. Help for ndi.file.navigator.epochdir/setepochtag is inherited from superclass ndi.epoch.epochset.param setfileparameters - Set the fileparameters field of a ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETFILEPARAMETERS(NDI_FILENAVIGATOR_OBJ, THEFILEPARAMETERS) THEFILEPARAMETERS is a string or cell list of strings that specifies the files that comprise an epoch. Example: filematch = '.*\\.ext\\>' Example: filematch = {'myfile1.ext1', 'myfile2.ext2'} Example: filematch = {'#.ext1', 'myfile#.ext2'} (# is the same, unknown string) Alternatively, THEFILEPARAMETERS can be delivered as a structure with the following fields: Fieldname: | Description ---------------------------------------------------------------------- filematch | A string or cell list of strings that need to be matched | Regular expressions are allowed | Example: filematch = '.*\\.ext\\>' | Example: filematch = {'myfile1.ext1', 'myfile2.ext2'} | Example: filematch = {'#.ext1', 'myfile#.ext2'} (# is the same, unknown string) Help for ndi.file.navigator.epochdir/setfileparameters is inherited from superclass ndi.file.navigator setsession - set the SESSION for an ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETSESSION(NDI_FILENAVIGATOR_OBJ, SESSION) Set the SESSION property of an ndi.file.navigator object Help for ndi.file.navigator.epochdir/setsession is inherited from superclass ndi.file.navigator t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.file.navigator.epochdir/t0_t1 is inherited from superclass ndi.epoch.epochset underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.file.navigator.epochdir/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.file.navigator.epochdir.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object [B,MSG] = VERIFYEPOCHPROBEMAP(ndi.epoch.epochset.param, EPOCHPROBEMAP, EPOCH_NUMBER_OR_ID) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given epoch number or epoch id EPOCH_NUMBER_OR_ID. For the abstract class EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. If B is 0, then the error message is returned in MSG. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem Help for ndi.file.navigator.epochdir/verifyepochprobemap is inherited from superclass ndi.epoch.epochset.param","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Btype/mfdaq_epoch_channel.m/","text":"CLASS ndi.file.type.mfdaq_epoch_channel MFDAQ_EPOCH_CHANNEL - create a new MFDAQ_EPOCH_CHANNEL file document OBJ = MFDAQ_EPOCH_CHANNEL(INPUT1, ...) Creates a new MFDAQ_EPOCH_CHANNEL object. If INPUT1 is a character string, then it is assumed that this object should be built from information stored in a file. If INPUT1 is a structure, then it is assumed that this object should be built with a channel_structure (provided in INPUT1) as in ndi.file.type.mfdaq_epoch_channel.create_properties(). Superclasses none Properties Property Description channel_information Methods Method Description channelgroupdecoding decode channel list into the groups where the channels are stored create_properties make a structure that describes segmented storage of MFDAQ data mfdaq_epoch_channel create a new MFDAQ_EPOCH_CHANNEL file document readFromFile read an mfdaq_epoch_channel object from a file writeToFile write the channel_structure to a file Methods help channelgroupdecoding - decode channel list into the groups where the channels are stored [GROUPS, CHANNEL_INDEXES_IN_GROUPS, CHANNEL_INDEXES_IN_OUTPUT]=... CHANNELGROUPDECODING(CHANNEL_INFO, CHANNEL_TYPE, CHANNELS) create_properties - make a structure that describes segmented storage of MFDAQ data OBJ = CREATE_PROPERTIES(OBJ, CHANNEL_STRUCTURE, ...) CHANNEL_STRUCTURE has fields 'name','type', 'sample_rate', 'offset', and 'scale' This function also takes name/value pairs that modify the default behavior. ----------------------------------------------------------------- | Parameters (default) | Description | |---------------------------------|------------------------------| | analog_in_channels_per_group | Number of channels per group | | (400) | for analog input channels | | analog_out_channels_per_group | Number of channels per group | | (400) | for analog output channels | | auxiliary_in_channels_per_group | Number of channels per group | | (400) | for auxiliary input channels| | auxiliary_out_channels_per_group| Number of channels per group | | (400) | for auxiliary output | | analog_out_channels_per_group | Number of channels per group | | (400) | for analog output channels | | ditial_in_channels_per_group | Number of channels per group | | (512) | for digital input channels | | digital_out_channels_per_group | Number of channels per group | | (512) | for digital output channels | mfdaq_epoch_channel - create a new MFDAQ_EPOCH_CHANNEL file document OBJ = MFDAQ_EPOCH_CHANNEL(INPUT1, ...) Creates a new MFDAQ_EPOCH_CHANNEL object. If INPUT1 is a character string, then it is assumed that this object should be built from information stored in a file. If INPUT1 is a structure, then it is assumed that this object should be built with a channel_structure (provided in INPUT1) as in ndi.file.type.mfdaq_epoch_channel.create_properties(). Documentation for ndi.file.type.mfdaq_epoch_channel/mfdaq_epoch_channel doc ndi.file.type.mfdaq_epoch_channel readFromFile - read an mfdaq_epoch_channel object from a file MFDAQ_EPOCH_CHANNEL_OBJ = READFROMFILE(MFDAQ_EPOCH_CHANNEL_OBJ, FILENAME) Reads the properties of an MFDAQ_EPOCH_CHANNEL object from FILENAME. Example: mfdaq_epoch_channel_obj = mfdaq_epoch_channel_obj.readFromFile(filename); writeToFile - write the channel_structure to a file [B,ERRMSG] = WRITETOFILE(MFDAQ_EPOCH_CHANNEL_OBJ, FILENAME) Writes the properties of an MFDAQ_EPOCH_CHANNEL object to the binary file FILENAME. If the operation is successful, B is 1. Otherwise, it is 0. ERRMSG contains any error message that describes the error state. Example: [b,errmsg] = mfdaq_epoch_channel_obj.writeToFile(filename); if ~b, disp(['The function failed with an error: ' errmsg '.']); end;","title":"ndi.file.type.mfdaq_epoch_channel"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Btype/mfdaq_epoch_channel.m/#class-ndifiletypemfdaq_epoch_channel","text":"MFDAQ_EPOCH_CHANNEL - create a new MFDAQ_EPOCH_CHANNEL file document OBJ = MFDAQ_EPOCH_CHANNEL(INPUT1, ...) Creates a new MFDAQ_EPOCH_CHANNEL object. If INPUT1 is a character string, then it is assumed that this object should be built from information stored in a file. If INPUT1 is a structure, then it is assumed that this object should be built with a channel_structure (provided in INPUT1) as in ndi.file.type.mfdaq_epoch_channel.create_properties().","title":"CLASS ndi.file.type.mfdaq_epoch_channel"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Btype/mfdaq_epoch_channel.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Btype/mfdaq_epoch_channel.m/#properties","text":"Property Description channel_information","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Btype/mfdaq_epoch_channel.m/#methods","text":"Method Description channelgroupdecoding decode channel list into the groups where the channels are stored create_properties make a structure that describes segmented storage of MFDAQ data mfdaq_epoch_channel create a new MFDAQ_EPOCH_CHANNEL file document readFromFile read an mfdaq_epoch_channel object from a file writeToFile write the channel_structure to a file","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Btype/mfdaq_epoch_channel.m/#methods-help","text":"channelgroupdecoding - decode channel list into the groups where the channels are stored [GROUPS, CHANNEL_INDEXES_IN_GROUPS, CHANNEL_INDEXES_IN_OUTPUT]=... CHANNELGROUPDECODING(CHANNEL_INFO, CHANNEL_TYPE, CHANNELS) create_properties - make a structure that describes segmented storage of MFDAQ data OBJ = CREATE_PROPERTIES(OBJ, CHANNEL_STRUCTURE, ...) CHANNEL_STRUCTURE has fields 'name','type', 'sample_rate', 'offset', and 'scale' This function also takes name/value pairs that modify the default behavior. ----------------------------------------------------------------- | Parameters (default) | Description | |---------------------------------|------------------------------| | analog_in_channels_per_group | Number of channels per group | | (400) | for analog input channels | | analog_out_channels_per_group | Number of channels per group | | (400) | for analog output channels | | auxiliary_in_channels_per_group | Number of channels per group | | (400) | for auxiliary input channels| | auxiliary_out_channels_per_group| Number of channels per group | | (400) | for auxiliary output | | analog_out_channels_per_group | Number of channels per group | | (400) | for analog output channels | | ditial_in_channels_per_group | Number of channels per group | | (512) | for digital input channels | | digital_out_channels_per_group | Number of channels per group | | (512) | for digital output channels | mfdaq_epoch_channel - create a new MFDAQ_EPOCH_CHANNEL file document OBJ = MFDAQ_EPOCH_CHANNEL(INPUT1, ...) Creates a new MFDAQ_EPOCH_CHANNEL object. If INPUT1 is a character string, then it is assumed that this object should be built from information stored in a file. If INPUT1 is a structure, then it is assumed that this object should be built with a channel_structure (provided in INPUT1) as in ndi.file.type.mfdaq_epoch_channel.create_properties(). Documentation for ndi.file.type.mfdaq_epoch_channel/mfdaq_epoch_channel doc ndi.file.type.mfdaq_epoch_channel readFromFile - read an mfdaq_epoch_channel object from a file MFDAQ_EPOCH_CHANNEL_OBJ = READFROMFILE(MFDAQ_EPOCH_CHANNEL_OBJ, FILENAME) Reads the properties of an MFDAQ_EPOCH_CHANNEL object from FILENAME. Example: mfdaq_epoch_channel_obj = mfdaq_epoch_channel_obj.readFromFile(filename); writeToFile - write the channel_structure to a file [B,ERRMSG] = WRITETOFILE(MFDAQ_EPOCH_CHANNEL_OBJ, FILENAME) Writes the properties of an MFDAQ_EPOCH_CHANNEL object to the binary file FILENAME. If the operation is successful, B is 1. Otherwise, it is 0. ERRMSG contains any error message that describes the error state. Example: [b,errmsg] = mfdaq_epoch_channel_obj.writeToFile(filename); if ~b, disp(['The function failed with an error: ' errmsg '.']); end;","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/assertAddonOnPath.m/","text":"ndi.fun.assertAddonOnPath Get struct array listing installed toolboxes","title":"ndi.fun.assertAddonOnPath"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/assertAddonOnPath.m/#ndifunassertaddononpath","text":"Get struct array listing installed toolboxes","title":"ndi.fun.assertAddonOnPath"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/channelname2prefixnumber.m/","text":"ndi.fun.channelname2prefixnumber CHANNELNAME2PREFIXNUMBER - identify the prefix, number from channel name string [PREFIX, NUMBER] = CHANNELNAME2PREFIXNUMBER(CHANNELNAME) Given a channel name like 'ai5', return the prefix (in this case 'ai') and the number (in this case, 5) as PREFIX and NUMBER, respectively. Example: [prefix,number] = ndi.fun.channelname2prefixnumber('ai5') % prefix == 'ai', number == 5","title":"ndi.fun.channelname2prefixnumber"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/channelname2prefixnumber.m/#ndifunchannelname2prefixnumber","text":"CHANNELNAME2PREFIXNUMBER - identify the prefix, number from channel name string [PREFIX, NUMBER] = CHANNELNAME2PREFIXNUMBER(CHANNELNAME) Given a channel name like 'ai5', return the prefix (in this case 'ai') and the number (in this case, 5) as PREFIX and NUMBER, respectively. Example: [prefix,number] = ndi.fun.channelname2prefixnumber('ai5') % prefix == 'ai', number == 5","title":"ndi.fun.channelname2prefixnumber"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/check_Matlab_toolboxes.m/","text":"ndi.fun.check_Matlab_toolboxes ndi.fun.check_Matlab_toolboxes is a function.","title":"ndi.fun.check_Matlab_toolboxes"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/check_Matlab_toolboxes.m/#ndifuncheck_matlab_toolboxes","text":"ndi.fun.check_Matlab_toolboxes is a function.","title":"ndi.fun.check_Matlab_toolboxes"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/console.m/","text":"ndi.fun.console CONSOLE - pop up an external terminal window that displays a log file CONSOLE(FILENAME) Pops up a console window that displays a log file. Right now, only MacOS is supported.","title":"ndi.fun.console"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/console.m/#ndifunconsole","text":"CONSOLE - pop up an external terminal window that displays a log file CONSOLE(FILENAME) Pops up a console window that displays a log file. Right now, only MacOS is supported.","title":"ndi.fun.console"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/convertoldnsd2ndi.m/","text":"ndi.fun.convertoldnsd2ndi CONVERTOLDNSD2NDI - convert an old 'nsd' session to 'ndi' ndi.fun.convertoldnsd2ndi(PATHNAME) Converts the NDS_SESSION_DIR session at PATHNAME to the new 'ndi' name convention. Needs to be run on MacOS for the unix tools used (might work on Linux). The following irreversible changes are made: (1) Any instance of 'nsd' in a filename is changed to 'ndi'. (2) Any instance of 'NSD' in a filename is changed to 'NDI'. (3) All instances of 'nsd' in .m, .json, .txt *object_* files are replaced with 'ndi'. (4) All instances of 'NSD' in .m, .json, .txt or *object_* files are replaced with 'NDI'. This function is deprecated and should be irrelevant shortly as everyone uses 'NDI' instead of 'NSD'","title":"ndi.fun.convertoldnsd2ndi"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/convertoldnsd2ndi.m/#ndifunconvertoldnsd2ndi","text":"CONVERTOLDNSD2NDI - convert an old 'nsd' session to 'ndi' ndi.fun.convertoldnsd2ndi(PATHNAME) Converts the NDS_SESSION_DIR session at PATHNAME to the new 'ndi' name convention. Needs to be run on MacOS for the unix tools used (might work on Linux). The following irreversible changes are made: (1) Any instance of 'nsd' in a filename is changed to 'ndi'. (2) Any instance of 'NSD' in a filename is changed to 'NDI'. (3) All instances of 'nsd' in .m, .json, .txt *object_* files are replaced with 'ndi'. (4) All instances of 'NSD' in .m, .json, .txt or *object_* files are replaced with 'NDI'. This function is deprecated and should be irrelevant shortly as everyone uses 'NDI' instead of 'NSD'","title":"ndi.fun.convertoldnsd2ndi"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/debuglog.m/","text":"ndi.fun.debuglog DEBUGLOG - open the NDI debug log in a terminal DEBUGLOG() Opens the debug log file in a terminal window. (Right now, only MacOS is supported.)","title":"ndi.fun.debuglog"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/debuglog.m/#ndifundebuglog","text":"DEBUGLOG - open the NDI debug log in a terminal DEBUGLOG() Opens the debug log file in a terminal window. (Right now, only MacOS is supported.)","title":"ndi.fun.debuglog"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/errlog.m/","text":"ndi.fun.errlog ERRLOG - open the NDI error log ERRLOG() Opens the error log file in a terminal window. (Right now, only MacOS is supported.)","title":"ndi.fun.errlog"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/errlog.m/#ndifunerrlog","text":"ERRLOG - open the NDI error log ERRLOG() Opens the error log file in a terminal window. (Right now, only MacOS is supported.)","title":"ndi.fun.errlog"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/find_calc_directories.m/","text":"ndi.fun.find_calc_directories ndi.fun.find_calc_directories - find all NDIcalc-X-matlab directories D = ndi.fun.find_calc_directories() Scan the installed packages for NDIcalc-X-matlab packages. D is a cell array of full path directories.","title":"ndi.fun.find_calc_directories"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/find_calc_directories.m/#ndifunfind_calc_directories","text":"ndi.fun.find_calc_directories - find all NDIcalc-X-matlab directories D = ndi.fun.find_calc_directories() Scan the installed packages for NDIcalc-X-matlab packages. D is a cell array of full path directories.","title":"ndi.fun.find_calc_directories"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/plot_extracellular_spikeshapes.m/","text":"ndi.fun.plot_extracellular_spikeshapes ndi.fun.plot_extracellular_spikeshapes - plot the extracellularly recorded neuron spike shapes G = ndi.fun.plot_extracellular_spikeshapes(S, space) Searches the experimental session S for documents of type 'neuron_extracellular', and then plots the element names and their waveforms. SPACE is the space between multichannel waveforms (in the same units as the spike waveform).","title":"ndi.fun.plot_extracellular_spikeshapes"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/plot_extracellular_spikeshapes.m/#ndifunplot_extracellular_spikeshapes","text":"ndi.fun.plot_extracellular_spikeshapes - plot the extracellularly recorded neuron spike shapes G = ndi.fun.plot_extracellular_spikeshapes(S, space) Searches the experimental session S for documents of type 'neuron_extracellular', and then plots the element names and their waveforms. SPACE is the space between multichannel waveforms (in the same units as the spike waveform).","title":"ndi.fun.plot_extracellular_spikeshapes"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/pseudorandomint.m/","text":"ndi.fun.pseudorandomint ndi.fun.pseudorandomint - generate a random integer based on the date and time and a random number T = ndi.fun.pseudorandomint() Generates a pseudorandom integer that is linked to the current date/time. Generates 1000 possible numbers for each second. The portion of the number greater than 1000 is deterministic based on the date (works through the year 2200 at least). Example: t = ndi.fun.pseudorandomint()","title":"ndi.fun.pseudorandomint"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/pseudorandomint.m/#ndifunpseudorandomint","text":"ndi.fun.pseudorandomint - generate a random integer based on the date and time and a random number T = ndi.fun.pseudorandomint() Generates a pseudorandom integer that is linked to the current date/time. Generates 1000 possible numbers for each second. The portion of the number greater than 1000 is deterministic based on the date (works through the year 2200 at least). Example: t = ndi.fun.pseudorandomint()","title":"ndi.fun.pseudorandomint"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/run_Linux_checks.m/","text":"ndi.fun.run_Linux_checks RUN_LINUX_CHECKS - run any Linux compatibility checks RUN_LINUX_CHECKS Run Linux compatibility checks and provide any warnings needed.","title":"ndi.fun.run_Linux_checks"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/run_Linux_checks.m/#ndifunrun_linux_checks","text":"RUN_LINUX_CHECKS - run any Linux compatibility checks RUN_LINUX_CHECKS Run Linux compatibility checks and provide any warnings needed.","title":"ndi.fun.run_Linux_checks"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/stimulustemporalfrequency.m/","text":"ndi.fun.stimulustemporalfrequency NDI.FUN.STIMULUSTEMPORALFREQUENCY Extract temporal frequency from stimulus parameters using predefined rules. [TF_VALUE, TF_NAME] = NDI.FUN.STIMULUSTEMPORALFREQUENCY(STIMULUS_PARAMETERS) Determines the temporal frequency (TF) of a stimulus based on its parameters provided in the STIMULUS_PARAMETERS structure. The function checks the field names of the input STIMULUS_PARAMETERS structure against a predefined list of known temporal frequency parameter names. This list and the rules for calculating TF are loaded from a configuration file: [ndi.common.PathConstants.CommonFolder]/stimulus/ndi_stimulusparameters2temporalfrequency.json The JSON configuration allows for various ways TF might be encoded: - Direct value: A parameter directly represents TF in Hz. - Scaled/Offset value: A parameter value needs multiplication and/or addition. - Period value: A parameter represents the temporal period (e.g., in seconds), requiring inversion (1/value) to get frequency. - Multi-parameter dependency: The calculation might involve multiplying by the value of another parameter within STIMULUS_PARAMETERS. If a matching parameter name is found in STIMULUS_PARAMETERS, the function calculates the TF according to the rules defined in the JSON file for that parameter. It returns the calculated TF in TF_VALUE (typically in Hz) and the name of the parameter used for the calculation in TF_NAME. If multiple known TF parameters exist in STIMULUS_PARAMETERS, the function uses the *first* one it finds based on the order in the JSON file and returns immediately after successful calculation. If no known temporal frequency parameter field name is found within STIMULUS_PARAMETERS after checking all rules, TF_VALUE is returned as empty (`[]`) and TF_NAME is returned as an empty char array (`''`). **Error Handling:** This function will throw an error and stop execution if: - The JSON configuration file is not found or cannot be read/parsed. - An entry in the JSON file is missing required fields. - A matched parameter in `STIMULUS_PARAMETERS` has a non-numeric or non-scalar value. - A calculation results in division by zero (e.g., zero period). - A required secondary multiplier parameter is missing or has an invalid value. - Any other calculation error occurs for a matched parameter rule. Error identifiers start with 'NDI:STIMULUSTEMPORALFREQUENCY:'. **JSON Configuration File Structure:** The `ndi_stimulusparameters2temporalfrequency.json` file contains an array of objects, where each object defines a rule for a potential TF parameter: - `parameter_name` (string): The exact field name to look for in the `STIMULUS_PARAMETERS` input structure (e.g., \"tFrequency\", \"t_period\"). - `temporalFrequencyMultiplier` (number): A value to multiply the parameter's value by. Use 1 for no multiplication. - `temporalFrequencyAdder` (number): A value to add to the parameter's value *after* multiplication. Use 0 for no addition. (Calculation: `NewValue = temporalFrequencyAdder + temporalFrequencyMultiplier * OriginalValue`) - `isPeriod` (boolean): If `true`, the `NewValue` calculated above is treated as a period, and the final TF is `1 / NewValue`. If `false`, `NewValue` is treated as the frequency. - `parameterMultiplier` (string): If not empty, this should be the name of *another* field within the `STIMULUS_PARAMETERS` structure. The TF value (calculated using the steps above) will be multiplied by the value of this additional parameter. If empty (`\"\"`), no secondary multiplication occurs. Inputs: STIMULUS_PARAMETERS (1,1) struct: A scalar structure where each field represents a parameter of the stimulus. Field names are strings, and values are the corresponding parameter values (typically numeric). Example: struct('tFreq', 10, 'contrast', 0.5) Outputs: TF_VALUE (numeric or []): The calculated temporal frequency, typically in Hz. Returns empty `[]` only if no matching TF parameter rule is found in the JSON for any field present in STIMULUS_PARAMETERS. TF_NAME (char row vector or ''): The field name in STIMULUS_PARAMETERS from which TF_VALUE was derived. Returns empty `''` only if no match found. Requires: - NDI (Neuroscience Data Interface) toolbox, including `ndi.common.PathConstants`. - MATLAB R2016b or newer (for `jsondecode`). R2019a or newer recommended for `fileread`. - The JSON configuration file `ndi_stimulusparameters2temporalfrequency.json` must exist in the expected location and be correctly formatted. Examples: % Assume ndi_stimulusparameters2temporalfrequency.json maps 'tFreq' directly: % { \"parameter_name\": \"tFreq\", \"temporalFrequencyMultiplier\": 1, ... % \"temporalFrequencyAdder\": 0, \"isPeriod\": false, \"parameterMultiplier\": \"\" } params1 = struct('tFreq', 8, 'spatialFreq', 0.1); [tf1, name1] = ndi.fun.stimulustemporalfrequency(params1); % Expected: tf1 = 8, name1 = 'tFreq' % Assume JSON maps 'temporal_period_property' with \"isPeriod\": true: % { \"parameter_name\": \"temporal_period_property\", \"isPeriod\": true, ... } params2 = struct('contrast', 1, 'temporal_period_property', 0.125); [tf2, name2] = ndi.fun.stimulustemporalfrequency(params2); % Expected: tf2 = 1 / 0.125 = 8, name2 = 'temporal_period_property' % Assume JSON maps 't_period' with \"isPeriod\": true and % \"parameterMultiplier\": \"refreshRate\": % { \"parameter_name\": \"t_period\", \"isPeriod\": true, ... % \"parameterMultiplier\": \"refreshRate\", ...} params3 = struct('t_period', 15, 'refreshRate', 60); % t_period in frames [tf3, name3] = ndi.fun.stimulustemporalfrequency(params3); % Expected: tf3 = (1 / 15) * 60 = 4 Hz, name3 = 't_period' % Case where no known TF parameter is present params4 = struct('orientation', 90, 'diameter', 5); [tf4, name4] = ndi.fun.stimulustemporalfrequency(params4); % Expected: tf4 = [], name4 = '' % Example that would now cause an error (previously warning): % params5 = struct('tFreq', [1 2]); % Non-scalar value % try % ndi.fun.stimulustemporalfrequency(params5); % catch ME % disp(ME.message); % Will display error about non-scalar value % end See also: NDI.SETUP.STIMULUSPARAMETERMAPS, FILEREAD, JSONDECODE, ERROR","title":"ndi.fun.stimulustemporalfrequency"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/stimulustemporalfrequency.m/#ndifunstimulustemporalfrequency","text":"NDI.FUN.STIMULUSTEMPORALFREQUENCY Extract temporal frequency from stimulus parameters using predefined rules. [TF_VALUE, TF_NAME] = NDI.FUN.STIMULUSTEMPORALFREQUENCY(STIMULUS_PARAMETERS) Determines the temporal frequency (TF) of a stimulus based on its parameters provided in the STIMULUS_PARAMETERS structure. The function checks the field names of the input STIMULUS_PARAMETERS structure against a predefined list of known temporal frequency parameter names. This list and the rules for calculating TF are loaded from a configuration file: [ndi.common.PathConstants.CommonFolder]/stimulus/ndi_stimulusparameters2temporalfrequency.json The JSON configuration allows for various ways TF might be encoded: - Direct value: A parameter directly represents TF in Hz. - Scaled/Offset value: A parameter value needs multiplication and/or addition. - Period value: A parameter represents the temporal period (e.g., in seconds), requiring inversion (1/value) to get frequency. - Multi-parameter dependency: The calculation might involve multiplying by the value of another parameter within STIMULUS_PARAMETERS. If a matching parameter name is found in STIMULUS_PARAMETERS, the function calculates the TF according to the rules defined in the JSON file for that parameter. It returns the calculated TF in TF_VALUE (typically in Hz) and the name of the parameter used for the calculation in TF_NAME. If multiple known TF parameters exist in STIMULUS_PARAMETERS, the function uses the *first* one it finds based on the order in the JSON file and returns immediately after successful calculation. If no known temporal frequency parameter field name is found within STIMULUS_PARAMETERS after checking all rules, TF_VALUE is returned as empty (`[]`) and TF_NAME is returned as an empty char array (`''`). **Error Handling:** This function will throw an error and stop execution if: - The JSON configuration file is not found or cannot be read/parsed. - An entry in the JSON file is missing required fields. - A matched parameter in `STIMULUS_PARAMETERS` has a non-numeric or non-scalar value. - A calculation results in division by zero (e.g., zero period). - A required secondary multiplier parameter is missing or has an invalid value. - Any other calculation error occurs for a matched parameter rule. Error identifiers start with 'NDI:STIMULUSTEMPORALFREQUENCY:'. **JSON Configuration File Structure:** The `ndi_stimulusparameters2temporalfrequency.json` file contains an array of objects, where each object defines a rule for a potential TF parameter: - `parameter_name` (string): The exact field name to look for in the `STIMULUS_PARAMETERS` input structure (e.g., \"tFrequency\", \"t_period\"). - `temporalFrequencyMultiplier` (number): A value to multiply the parameter's value by. Use 1 for no multiplication. - `temporalFrequencyAdder` (number): A value to add to the parameter's value *after* multiplication. Use 0 for no addition. (Calculation: `NewValue = temporalFrequencyAdder + temporalFrequencyMultiplier * OriginalValue`) - `isPeriod` (boolean): If `true`, the `NewValue` calculated above is treated as a period, and the final TF is `1 / NewValue`. If `false`, `NewValue` is treated as the frequency. - `parameterMultiplier` (string): If not empty, this should be the name of *another* field within the `STIMULUS_PARAMETERS` structure. The TF value (calculated using the steps above) will be multiplied by the value of this additional parameter. If empty (`\"\"`), no secondary multiplication occurs. Inputs: STIMULUS_PARAMETERS (1,1) struct: A scalar structure where each field represents a parameter of the stimulus. Field names are strings, and values are the corresponding parameter values (typically numeric). Example: struct('tFreq', 10, 'contrast', 0.5) Outputs: TF_VALUE (numeric or []): The calculated temporal frequency, typically in Hz. Returns empty `[]` only if no matching TF parameter rule is found in the JSON for any field present in STIMULUS_PARAMETERS. TF_NAME (char row vector or ''): The field name in STIMULUS_PARAMETERS from which TF_VALUE was derived. Returns empty `''` only if no match found. Requires: - NDI (Neuroscience Data Interface) toolbox, including `ndi.common.PathConstants`. - MATLAB R2016b or newer (for `jsondecode`). R2019a or newer recommended for `fileread`. - The JSON configuration file `ndi_stimulusparameters2temporalfrequency.json` must exist in the expected location and be correctly formatted. Examples: % Assume ndi_stimulusparameters2temporalfrequency.json maps 'tFreq' directly: % { \"parameter_name\": \"tFreq\", \"temporalFrequencyMultiplier\": 1, ... % \"temporalFrequencyAdder\": 0, \"isPeriod\": false, \"parameterMultiplier\": \"\" } params1 = struct('tFreq', 8, 'spatialFreq', 0.1); [tf1, name1] = ndi.fun.stimulustemporalfrequency(params1); % Expected: tf1 = 8, name1 = 'tFreq' % Assume JSON maps 'temporal_period_property' with \"isPeriod\": true: % { \"parameter_name\": \"temporal_period_property\", \"isPeriod\": true, ... } params2 = struct('contrast', 1, 'temporal_period_property', 0.125); [tf2, name2] = ndi.fun.stimulustemporalfrequency(params2); % Expected: tf2 = 1 / 0.125 = 8, name2 = 'temporal_period_property' % Assume JSON maps 't_period' with \"isPeriod\": true and % \"parameterMultiplier\": \"refreshRate\": % { \"parameter_name\": \"t_period\", \"isPeriod\": true, ... % \"parameterMultiplier\": \"refreshRate\", ...} params3 = struct('t_period', 15, 'refreshRate', 60); % t_period in frames [tf3, name3] = ndi.fun.stimulustemporalfrequency(params3); % Expected: tf3 = (1 / 15) * 60 = 4 Hz, name3 = 't_period' % Case where no known TF parameter is present params4 = struct('orientation', 90, 'diameter', 5); [tf4, name4] = ndi.fun.stimulustemporalfrequency(params4); % Expected: tf4 = [], name4 = '' % Example that would now cause an error (previously warning): % params5 = struct('tFreq', [1 2]); % Non-scalar value % try % ndi.fun.stimulustemporalfrequency(params5); % catch ME % disp(ME.message); % Will display error about non-scalar value % end See also: NDI.SETUP.STIMULUSPARAMETERMAPS, FILEREAD, JSONDECODE, ERROR","title":"ndi.fun.stimulustemporalfrequency"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/syslog.m/","text":"ndi.fun.syslog SYSLOG - open the NDI system log SYSLOG() Opens the log file in a terminal window. (Right now, only MacOS is supported.)","title":"ndi.fun.syslog"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/syslog.m/#ndifunsyslog","text":"SYSLOG - open the NDI system log SYSLOG() Opens the log file in a terminal window. (Right now, only MacOS is supported.)","title":"ndi.fun.syslog"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/timestamp.m/","text":"ndi.fun.timestamp TIMESTAMP - return a current time stamp string TIMESTAMP_STRING = ndi.fun.timestamp() Returns a current time stamp string using the expression: TIMESTAMP_STRING = char(datetime('now','TimeZone','UTCLeapSeconds')) The string is checked to make sure that the seconds are not \"60.000\", which can occur due to rounding and which can cause a validation error when the data is included in a database. In that case, the seconds are set to \"59.999\". Example: ts_st = ndi.fun.timestamp()","title":"ndi.fun.timestamp"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/timestamp.m/#ndifuntimestamp","text":"TIMESTAMP - return a current time stamp string TIMESTAMP_STRING = ndi.fun.timestamp() Returns a current time stamp string using the expression: TIMESTAMP_STRING = char(datetime('now','TimeZone','UTCLeapSeconds')) The string is checked to make sure that the seconds are not \"60.000\", which can occur due to rounding and which can cause a validation error when the data is included in a database. In that case, the seconds are set to \"59.999\". Example: ts_st = ndi.fun.timestamp()","title":"ndi.fun.timestamp"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bcalc/stimulus_tuningcurve_log.m/","text":"ndi.fun.calc.stimulus_tuningcurve_log STIMULUS_TUNINGCURVE_LOG - retrieve stimulus_tuningcurve log string from dependent document LOG_STR = STIMULUS_TUNINGCURVE_LOG(S, DOC) Given an ndi.document that has a dependency 'stimulus_tuningcurve_id' that was created by ndi.calc.stimulus.tuningcuve, this function looks up the DOC's dependent tuningcurve_calc document and retrieves the 'log' string field.","title":"ndi.fun.calc.stimulus_tuningcurve_log"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bcalc/stimulus_tuningcurve_log.m/#ndifuncalcstimulus_tuningcurve_log","text":"STIMULUS_TUNINGCURVE_LOG - retrieve stimulus_tuningcurve log string from dependent document LOG_STR = STIMULUS_TUNINGCURVE_LOG(S, DOC) Given an ndi.document that has a dependency 'stimulus_tuningcurve_id' that was created by ndi.calc.stimulus.tuningcuve, this function looks up the DOC's dependent tuningcurve_calc document and retrieves the 'log' string field.","title":"ndi.fun.calc.stimulus_tuningcurve_log"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bplot/multichan.m/","text":"ndi.fun.plot.multichan MULTICHAN - Plots multiple channels H = ndi.fun.plot.multichan(DATA,T,SPACE) Plots multiple channels of DATA (assumed to be NUMSAMPLES X NUMCHANNELS) T is the time for each sample and SPACE is the space to put between channels.","title":"ndi.fun.plot.multichan"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bplot/multichan.m/#ndifunplotmultichan","text":"MULTICHAN - Plots multiple channels H = ndi.fun.plot.multichan(DATA,T,SPACE) Plots multiple channels of DATA (assumed to be NUMSAMPLES X NUMCHANNELS) T is the time for each sample and SPACE is the space to put between channels.","title":"ndi.fun.plot.multichan"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bstimulus/f0_f1_responses.m/","text":"ndi.fun.stimulus.f0_f1_responses F0_F1_RESPONSES - get the F0 and F1 responses for a tuning curve document [F0,F1] = F0_F1_RESPONSES(S, DOC, [STIMULUS_INDEX]) Given an ndi.document object of type stimulus_tuningcurve (or a document that has a single dependency of 'stimulus_tuningcurve_id'), and a response_index number (the entry in the 'mean' response array of responses), this function returns the f0 and f1 responses for that stimulus. This function looks up the appropriate stimulus_tuningcurve objects. If STIMULUS_INDEX is not given, then the overall maximum response rate (either mean or F1) is examined and that location is taken as the STIMULUS_INDEX.","title":"ndi.fun.stimulus.f0_f1_responses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bstimulus/f0_f1_responses.m/#ndifunstimulusf0_f1_responses","text":"F0_F1_RESPONSES - get the F0 and F1 responses for a tuning curve document [F0,F1] = F0_F1_RESPONSES(S, DOC, [STIMULUS_INDEX]) Given an ndi.document object of type stimulus_tuningcurve (or a document that has a single dependency of 'stimulus_tuningcurve_id'), and a response_index number (the entry in the 'mean' response array of responses), this function returns the f0 and f1 responses for that stimulus. This function looks up the appropriate stimulus_tuningcurve objects. If STIMULUS_INDEX is not given, then the overall maximum response rate (either mean or F1) is examined and that location is taken as the STIMULUS_INDEX.","title":"ndi.fun.stimulus.f0_f1_responses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bstimulus/tuning_curve_to_response_type.m/","text":"ndi.fun.stimulus.tuning_curve_to_response_type TUNING_CURVE_TO_RESPONSE_TYPE - get the response type ('mean', 'F1', etc) of a tuning curve document [RESPONSE_TYPE,STIM_RESPONSE_SCALAR_DOC] = ndi.fun.stimulus.tuning_curve_to_response_type(S, DOC) Given an ndi.document object DOC that is either a stimulus_tuningcurve or a document that has a dependency, 'stimulus_tuningcurve_id', this function looks up the 'stimulus_response_scalar' document and returns its 'response_type' field. This is typically 'mean', 'F1','F2', etc.","title":"ndi.fun.stimulus.tuning_curve_to_response_type"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bstimulus/tuning_curve_to_response_type.m/#ndifunstimulustuning_curve_to_response_type","text":"TUNING_CURVE_TO_RESPONSE_TYPE - get the response type ('mean', 'F1', etc) of a tuning curve document [RESPONSE_TYPE,STIM_RESPONSE_SCALAR_DOC] = ndi.fun.stimulus.tuning_curve_to_response_type(S, DOC) Given an ndi.document object DOC that is either a stimulus_tuningcurve or a document that has a dependency, 'stimulus_tuningcurve_id', this function looks up the 'stimulus_response_scalar' document and returns its 'response_type' field. This is typically 'mean', 'F1','F2', etc.","title":"ndi.fun.stimulus.tuning_curve_to_response_type"},{"location":"NDI-matlab/reference/%2Bndi/%2Bglobals/assert.m/","text":"ndi.globals.assert ndi.globals.assert - check that ndi_globals has been initialized properly [B,MSG] = ndi.globals.assert(ndi_global_variables, ...) Returns true if the variable ndi_global_variables has been initialized properly. Returns 0 otherwise, and, by default, triggers an error. Also returns the error message in MSG, if applicable. If there was no error, MSG is empty. This function takes name/value pairs that modify its default behavior: ------------------------------------------------------------------------------ | Parameter (default) | Description | |------------------------------|---------------------------------------------| | generateError (1) | 0/1 Should we generate a Matlab error call | | | and message? (0=no, 1=yes) | | tryToInit (1) | 0/1 Should we try to initialize ndi by | | | calling ndi_Init if globals are not | | | set up? | |----------------------------------------------------------------------------|","title":"ndi.globals.assert"},{"location":"NDI-matlab/reference/%2Bndi/%2Bglobals/assert.m/#ndiglobalsassert","text":"ndi.globals.assert - check that ndi_globals has been initialized properly [B,MSG] = ndi.globals.assert(ndi_global_variables, ...) Returns true if the variable ndi_global_variables has been initialized properly. Returns 0 otherwise, and, by default, triggers an error. Also returns the error message in MSG, if applicable. If there was no error, MSG is empty. This function takes name/value pairs that modify its default behavior: ------------------------------------------------------------------------------ | Parameter (default) | Description | |------------------------------|---------------------------------------------| | generateError (1) | 0/1 Should we generate a Matlab error call | | | and message? (0=no, 1=yes) | | tryToInit (1) | 0/1 Should we try to initialize ndi by | | | calling ndi_Init if globals are not | | | set up? | |----------------------------------------------------------------------------|","title":"ndi.globals.assert"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Data.m/","text":"CLASS ndi.gui.Data ndi.gui.Data is a class. obj = ndi.gui.Data Superclasses handle Properties Property Description fullDocuments fullTable tempDocuments tempTable search table panel name info Methods Method Description Data ndi.gui.Data/Data is a constructor. addDoc ndi.gui.Data/addDoc is a function. addlistener addlistener Add listener for event. clear Remove items from workspace, freeing up system memory delete DELETE Delete a handle object. details Display array details eq == (EQ) Test handle equality. filter 1-D digital filter findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. graph Graph with undirected edges gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. subgraph ndi.gui.Data/subgraph is a function. Methods help Data - ndi.gui.Data/Data is a constructor. obj = Data Documentation for ndi.gui.Data/Data doc ndi.gui.Data addDoc - ndi.gui.Data/addDoc is a function. addDoc(obj, docs) addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.data, matlab.metadata.Property, events Help for ndi.gui.Data/addlistener is inherited from superclass handle clear - Remove items from workspace, freeing up system memory This MATLAB function removes all variables from the current workspace, releasing them from system memory. Syntax clear clear name1 ... nameN clear -regexp expr1 ... exprN clear ItemType Input Arguments name1 ... nameN - Names of variables, scripts, functions, or MEX functions to clear character vectors | string scalars expr1 ... exprN - Regular expressions matching names of variables to clear character vectors | string scalars ItemType - Type of items to clear all | classes | functions | global | import | java | mex | variables Examples openExample('matlab/ClearASingleVariableExample') openExample('matlab/ClearSpecificVariablesbyNameExample') openExample('matlab/ClearSetOfVariablesExample') openExample('matlab/ClearAllCompiledScriptsFunctionsandMEXfunctionsExample') See also clc, clearvars, delete, import, inmem, load, mlock, whos Introduced in MATLAB before R2006a Documentation for clear doc clear delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.GUI.DATA, NDI.GUI.DATA/ISVALID, CLEAR Help for ndi.gui.Data/delete is inherited from superclass handle details - Display array details This MATLAB function displays detailed information about the array, A. Syntax details(A) Input Arguments A - Input array scalar or nonscalar array of any type Examples web /Applications/MATLAB_R2024b.app/help/matlab/ref/details.html#bt8wlxq-2 See also classdef, disp Introduced in MATLAB in R2013b Documentation for details doc details eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DATA, NDI.GUI.DATA/GE, NDI.GUI.DATA/GT, NDI.GUI.DATA/LE, NDI.GUI.DATA/LT, NDI.GUI.DATA/NE Help for ndi.gui.Data/eq is inherited from superclass handle filter - 1-D digital filter This MATLAB function filters the input data x using a rational transfer function defined by the numerator and denominator coefficients b and a. Syntax y = filter(b,a,x) y = filter(b,a,x,zi) y = filter(b,a,x,zi,dim) [y,zf] = filter(___) Input Arguments b - Numerator coefficients of rational transfer function vector a - Denominator coefficients of rational transfer function vector x - Input data vector | matrix | multidimensional array zi - Initial conditions for filter delays [] (default) | vector | matrix | multidimensional array dim - Dimension to operate along positive integer scalar Output Arguments y - Filtered data vector | matrix | multidimensional array zf - Final conditions for filter delays vector | matrix | multidimensional array Examples openExample('matlab/MovingAverageFilterOfVectorDataExample') openExample('matlab/FilterMatrixRowsExample') openExample('matlab/SpecifyInitialConditionsExample') openExample('matlab/FilterDataInSectionsExample') See also conv, filter2 Introduced in MATLAB before R2006a Documentation for filter doc filter findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.DATA Help for ndi.gui.Data/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.data, ndi.gui.data/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.Data/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DATA, NDI.GUI.DATA/EQ, NDI.GUI.DATA/GT, NDI.GUI.DATA/LE, NDI.GUI.DATA/LT, NDI.GUI.DATA/NE Help for ndi.gui.Data/ge is inherited from superclass handle graph - Graph with undirected edges graph objects represent undirected graphs, which have direction-less edges connecting the nodes. Creation Syntax G = graph G = graph(A) G = graph(A,nodenames) G = graph(A,NodeTable) G = graph(A,___,type) G = graph(A,___,'omitselfloops') G = graph(s,t) G = graph(s,t,weights) G = graph(s,t,weights,nodenames) G = graph(s,t,weights,NodeTable) G = graph(s,t,weights,num) G = graph(s,t,___,'omitselfloops') G = graph(s,t,EdgeTable,___) G = graph(EdgeTable) G = graph(EdgeTable,NodeTable) G = graph(EdgeTable,___,'omitselfloops') Input Arguments A - Adjacency matrix matrix nodenames - Node names cell array of character vectors | string array type - Type of adjacency matrix 'upper' | 'lower' s,t - Node pairs (as separate arguments) node indices | node names weights - Edge weights scalar | vector | matrix | multidimensional array | [] num - Number of graph nodes positive scalar integer EdgeTable - Table of edge information table NodeTable - Table of node information table Properties Edges - Edges of graph table Nodes - Nodes of graph table Object Functions layoutcoords - Graph node and edge layout coordinates simplify - Reduce multigraph to simple graph ismultigraph - Determine whether graph has multiple edges edgecount - Number of edges between two nodes isisomorphic - Determine whether two graphs are isomorphic isomorphism - Compute isomorphism between two graphs nearest - Nearest neighbors within radius centrality - Measure node importance minspantree - Minimum spanning tree of graph maxflow - Maximum flow in graph dfsearch - Depth-first graph search bfsearch - Breadth-first graph search bctree - Block-cut tree graph biconncomp - Biconnected graph components conncomp - Connected graph components subgraph - Extract subgraph reordernodes - Reorder graph nodes shortestpathtree - Shortest path tree from node shortestpath - Shortest path between two single nodes distances - Shortest path distances of all node pairs laplacian - Graph Laplacian matrix incidence - Graph incidence matrix adjacency - Graph adjacency matrix rmedge - Remove edge from graph addedge - Add new edge to graph findedge - Locate edge in graph numedges - Number of edges in graph outedges - Outgoing edges from node neighbors - Neighbors of graph node degree - Degree of graph nodes rmnode - Remove node from graph addnode - Add new node to graph findnode - Locate node in graph numnodes - Number of nodes in graph allcycles - Find all cycles in graph allpaths - Find all paths between two graph nodes cyclebasis - Fundamental cycle basis of graph hascycles - Determine whether graph contains cycles plot - Plot graph nodes and edges Examples openExample('matlab/CreateAndModifyGraphObjectExample') openExample('matlab/AdjacencyMatrixGraphConstructionExample') openExample('matlab/AdjacencyMatrixConstructionWithNodeNamesExample') openExample('matlab/EdgeListGraphConstructionExample') openExample('matlab/EdgeListGraphConstructionWithNodeNamesAndEdgeWeightsExample') openExample('matlab/EdgeListConstructionWithExtraNodesExample') openExample('matlab/AddNodesAndEdgesToEmptyGraphExample') openExample('matlab/GraphConstructionWithTablesExample') See also digraph, subgraph Introduced in MATLAB in R2015b Documentation for graph doc graph gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DATA, NDI.GUI.DATA/EQ, NDI.GUI.DATA/GE, NDI.GUI.DATA/LE, NDI.GUI.DATA/LT, NDI.GUI.DATA/NE Help for ndi.gui.Data/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.DATA, NDI.GUI.DATA/DELETE Help for ndi.gui.Data/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DATA, NDI.GUI.DATA/EQ, NDI.GUI.DATA/GE, NDI.GUI.DATA/GT, NDI.GUI.DATA/LT, NDI.GUI.DATA/NE Help for ndi.gui.Data/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.data, matlab.metadata.Property, events Help for ndi.gui.Data/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DATA, NDI.GUI.DATA/EQ, NDI.GUI.DATA/GE, NDI.GUI.DATA/GT, NDI.GUI.DATA/LE, NDI.GUI.DATA/NE Help for ndi.gui.Data/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DATA, NDI.GUI.DATA/EQ, NDI.GUI.DATA/GE, NDI.GUI.DATA/GT, NDI.GUI.DATA/LE, NDI.GUI.DATA/LT Help for ndi.gui.Data/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.DATA, NDI.GUI.DATA/ADDLISTENER, NDI.GUI.DATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.Data/notify is inherited from superclass handle subgraph - ndi.gui.Data/subgraph is a function. subgraph(obj, ~, ~, ind)","title":"ndi.gui.Data"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Data.m/#class-ndiguidata","text":"ndi.gui.Data is a class. obj = ndi.gui.Data","title":"CLASS ndi.gui.Data"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Data.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Data.m/#properties","text":"Property Description fullDocuments fullTable tempDocuments tempTable search table panel name info","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Data.m/#methods","text":"Method Description Data ndi.gui.Data/Data is a constructor. addDoc ndi.gui.Data/addDoc is a function. addlistener addlistener Add listener for event. clear Remove items from workspace, freeing up system memory delete DELETE Delete a handle object. details Display array details eq == (EQ) Test handle equality. filter 1-D digital filter findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. graph Graph with undirected edges gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. subgraph ndi.gui.Data/subgraph is a function.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Data.m/#methods-help","text":"Data - ndi.gui.Data/Data is a constructor. obj = Data Documentation for ndi.gui.Data/Data doc ndi.gui.Data addDoc - ndi.gui.Data/addDoc is a function. addDoc(obj, docs) addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.data, matlab.metadata.Property, events Help for ndi.gui.Data/addlistener is inherited from superclass handle clear - Remove items from workspace, freeing up system memory This MATLAB function removes all variables from the current workspace, releasing them from system memory. Syntax clear clear name1 ... nameN clear -regexp expr1 ... exprN clear ItemType Input Arguments name1 ... nameN - Names of variables, scripts, functions, or MEX functions to clear character vectors | string scalars expr1 ... exprN - Regular expressions matching names of variables to clear character vectors | string scalars ItemType - Type of items to clear all | classes | functions | global | import | java | mex | variables Examples openExample('matlab/ClearASingleVariableExample') openExample('matlab/ClearSpecificVariablesbyNameExample') openExample('matlab/ClearSetOfVariablesExample') openExample('matlab/ClearAllCompiledScriptsFunctionsandMEXfunctionsExample') See also clc, clearvars, delete, import, inmem, load, mlock, whos Introduced in MATLAB before R2006a Documentation for clear doc clear delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.GUI.DATA, NDI.GUI.DATA/ISVALID, CLEAR Help for ndi.gui.Data/delete is inherited from superclass handle details - Display array details This MATLAB function displays detailed information about the array, A. Syntax details(A) Input Arguments A - Input array scalar or nonscalar array of any type Examples web /Applications/MATLAB_R2024b.app/help/matlab/ref/details.html#bt8wlxq-2 See also classdef, disp Introduced in MATLAB in R2013b Documentation for details doc details eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DATA, NDI.GUI.DATA/GE, NDI.GUI.DATA/GT, NDI.GUI.DATA/LE, NDI.GUI.DATA/LT, NDI.GUI.DATA/NE Help for ndi.gui.Data/eq is inherited from superclass handle filter - 1-D digital filter This MATLAB function filters the input data x using a rational transfer function defined by the numerator and denominator coefficients b and a. Syntax y = filter(b,a,x) y = filter(b,a,x,zi) y = filter(b,a,x,zi,dim) [y,zf] = filter(___) Input Arguments b - Numerator coefficients of rational transfer function vector a - Denominator coefficients of rational transfer function vector x - Input data vector | matrix | multidimensional array zi - Initial conditions for filter delays [] (default) | vector | matrix | multidimensional array dim - Dimension to operate along positive integer scalar Output Arguments y - Filtered data vector | matrix | multidimensional array zf - Final conditions for filter delays vector | matrix | multidimensional array Examples openExample('matlab/MovingAverageFilterOfVectorDataExample') openExample('matlab/FilterMatrixRowsExample') openExample('matlab/SpecifyInitialConditionsExample') openExample('matlab/FilterDataInSectionsExample') See also conv, filter2 Introduced in MATLAB before R2006a Documentation for filter doc filter findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.DATA Help for ndi.gui.Data/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.data, ndi.gui.data/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.Data/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DATA, NDI.GUI.DATA/EQ, NDI.GUI.DATA/GT, NDI.GUI.DATA/LE, NDI.GUI.DATA/LT, NDI.GUI.DATA/NE Help for ndi.gui.Data/ge is inherited from superclass handle graph - Graph with undirected edges graph objects represent undirected graphs, which have direction-less edges connecting the nodes. Creation Syntax G = graph G = graph(A) G = graph(A,nodenames) G = graph(A,NodeTable) G = graph(A,___,type) G = graph(A,___,'omitselfloops') G = graph(s,t) G = graph(s,t,weights) G = graph(s,t,weights,nodenames) G = graph(s,t,weights,NodeTable) G = graph(s,t,weights,num) G = graph(s,t,___,'omitselfloops') G = graph(s,t,EdgeTable,___) G = graph(EdgeTable) G = graph(EdgeTable,NodeTable) G = graph(EdgeTable,___,'omitselfloops') Input Arguments A - Adjacency matrix matrix nodenames - Node names cell array of character vectors | string array type - Type of adjacency matrix 'upper' | 'lower' s,t - Node pairs (as separate arguments) node indices | node names weights - Edge weights scalar | vector | matrix | multidimensional array | [] num - Number of graph nodes positive scalar integer EdgeTable - Table of edge information table NodeTable - Table of node information table Properties Edges - Edges of graph table Nodes - Nodes of graph table Object Functions layoutcoords - Graph node and edge layout coordinates simplify - Reduce multigraph to simple graph ismultigraph - Determine whether graph has multiple edges edgecount - Number of edges between two nodes isisomorphic - Determine whether two graphs are isomorphic isomorphism - Compute isomorphism between two graphs nearest - Nearest neighbors within radius centrality - Measure node importance minspantree - Minimum spanning tree of graph maxflow - Maximum flow in graph dfsearch - Depth-first graph search bfsearch - Breadth-first graph search bctree - Block-cut tree graph biconncomp - Biconnected graph components conncomp - Connected graph components subgraph - Extract subgraph reordernodes - Reorder graph nodes shortestpathtree - Shortest path tree from node shortestpath - Shortest path between two single nodes distances - Shortest path distances of all node pairs laplacian - Graph Laplacian matrix incidence - Graph incidence matrix adjacency - Graph adjacency matrix rmedge - Remove edge from graph addedge - Add new edge to graph findedge - Locate edge in graph numedges - Number of edges in graph outedges - Outgoing edges from node neighbors - Neighbors of graph node degree - Degree of graph nodes rmnode - Remove node from graph addnode - Add new node to graph findnode - Locate node in graph numnodes - Number of nodes in graph allcycles - Find all cycles in graph allpaths - Find all paths between two graph nodes cyclebasis - Fundamental cycle basis of graph hascycles - Determine whether graph contains cycles plot - Plot graph nodes and edges Examples openExample('matlab/CreateAndModifyGraphObjectExample') openExample('matlab/AdjacencyMatrixGraphConstructionExample') openExample('matlab/AdjacencyMatrixConstructionWithNodeNamesExample') openExample('matlab/EdgeListGraphConstructionExample') openExample('matlab/EdgeListGraphConstructionWithNodeNamesAndEdgeWeightsExample') openExample('matlab/EdgeListConstructionWithExtraNodesExample') openExample('matlab/AddNodesAndEdgesToEmptyGraphExample') openExample('matlab/GraphConstructionWithTablesExample') See also digraph, subgraph Introduced in MATLAB in R2015b Documentation for graph doc graph gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DATA, NDI.GUI.DATA/EQ, NDI.GUI.DATA/GE, NDI.GUI.DATA/LE, NDI.GUI.DATA/LT, NDI.GUI.DATA/NE Help for ndi.gui.Data/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.DATA, NDI.GUI.DATA/DELETE Help for ndi.gui.Data/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DATA, NDI.GUI.DATA/EQ, NDI.GUI.DATA/GE, NDI.GUI.DATA/GT, NDI.GUI.DATA/LT, NDI.GUI.DATA/NE Help for ndi.gui.Data/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.data, matlab.metadata.Property, events Help for ndi.gui.Data/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DATA, NDI.GUI.DATA/EQ, NDI.GUI.DATA/GE, NDI.GUI.DATA/GT, NDI.GUI.DATA/LE, NDI.GUI.DATA/NE Help for ndi.gui.Data/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DATA, NDI.GUI.DATA/EQ, NDI.GUI.DATA/GE, NDI.GUI.DATA/GT, NDI.GUI.DATA/LE, NDI.GUI.DATA/LT Help for ndi.gui.Data/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.DATA, NDI.GUI.DATA/ADDLISTENER, NDI.GUI.DATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.Data/notify is inherited from superclass handle subgraph - ndi.gui.Data/subgraph is a function. subgraph(obj, ~, ~, ind)","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Icon.m/","text":"CLASS ndi.gui.Icon ndi.gui.Icon is a class. obj = ndi.gui.Icon(src, len, elem, hShift, vShift, w, h, color) Superclasses handle Properties Property Description elem img rect term src w h x y c active tag Methods Method Description Icon ndi.gui.Icon/Icon is a constructor. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. upload ndi.gui.Icon/upload is a function. Methods help Icon - ndi.gui.Icon/Icon is a constructor. obj = Icon(src, len, elem, hShift, vShift, w, h, color) Documentation for ndi.gui.Icon/Icon doc ndi.gui.Icon addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.icon, matlab.metadata.Property, events Help for ndi.gui.Icon/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.GUI.ICON, NDI.GUI.ICON/ISVALID, CLEAR Help for ndi.gui.Icon/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.ICON, NDI.GUI.ICON/GE, NDI.GUI.ICON/GT, NDI.GUI.ICON/LE, NDI.GUI.ICON/LT, NDI.GUI.ICON/NE Help for ndi.gui.Icon/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.ICON Help for ndi.gui.Icon/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.icon, ndi.gui.icon/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.Icon/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.ICON, NDI.GUI.ICON/EQ, NDI.GUI.ICON/GT, NDI.GUI.ICON/LE, NDI.GUI.ICON/LT, NDI.GUI.ICON/NE Help for ndi.gui.Icon/ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.ICON, NDI.GUI.ICON/EQ, NDI.GUI.ICON/GE, NDI.GUI.ICON/LE, NDI.GUI.ICON/LT, NDI.GUI.ICON/NE Help for ndi.gui.Icon/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.ICON, NDI.GUI.ICON/DELETE Help for ndi.gui.Icon/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.ICON, NDI.GUI.ICON/EQ, NDI.GUI.ICON/GE, NDI.GUI.ICON/GT, NDI.GUI.ICON/LT, NDI.GUI.ICON/NE Help for ndi.gui.Icon/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.icon, matlab.metadata.Property, events Help for ndi.gui.Icon/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.ICON, NDI.GUI.ICON/EQ, NDI.GUI.ICON/GE, NDI.GUI.ICON/GT, NDI.GUI.ICON/LE, NDI.GUI.ICON/NE Help for ndi.gui.Icon/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.ICON, NDI.GUI.ICON/EQ, NDI.GUI.ICON/GE, NDI.GUI.ICON/GT, NDI.GUI.ICON/LE, NDI.GUI.ICON/LT Help for ndi.gui.Icon/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.ICON, NDI.GUI.ICON/ADDLISTENER, NDI.GUI.ICON/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.Icon/notify is inherited from superclass handle upload - ndi.gui.Icon/upload is a function. upload(obj, ~, ~)","title":"ndi.gui.Icon"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Icon.m/#class-ndiguiicon","text":"ndi.gui.Icon is a class. obj = ndi.gui.Icon(src, len, elem, hShift, vShift, w, h, color)","title":"CLASS ndi.gui.Icon"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Icon.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Icon.m/#properties","text":"Property Description elem img rect term src w h x y c active tag","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Icon.m/#methods","text":"Method Description Icon ndi.gui.Icon/Icon is a constructor. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. upload ndi.gui.Icon/upload is a function.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Icon.m/#methods-help","text":"Icon - ndi.gui.Icon/Icon is a constructor. obj = Icon(src, len, elem, hShift, vShift, w, h, color) Documentation for ndi.gui.Icon/Icon doc ndi.gui.Icon addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.icon, matlab.metadata.Property, events Help for ndi.gui.Icon/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.GUI.ICON, NDI.GUI.ICON/ISVALID, CLEAR Help for ndi.gui.Icon/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.ICON, NDI.GUI.ICON/GE, NDI.GUI.ICON/GT, NDI.GUI.ICON/LE, NDI.GUI.ICON/LT, NDI.GUI.ICON/NE Help for ndi.gui.Icon/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.ICON Help for ndi.gui.Icon/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.icon, ndi.gui.icon/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.Icon/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.ICON, NDI.GUI.ICON/EQ, NDI.GUI.ICON/GT, NDI.GUI.ICON/LE, NDI.GUI.ICON/LT, NDI.GUI.ICON/NE Help for ndi.gui.Icon/ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.ICON, NDI.GUI.ICON/EQ, NDI.GUI.ICON/GE, NDI.GUI.ICON/LE, NDI.GUI.ICON/LT, NDI.GUI.ICON/NE Help for ndi.gui.Icon/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.ICON, NDI.GUI.ICON/DELETE Help for ndi.gui.Icon/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.ICON, NDI.GUI.ICON/EQ, NDI.GUI.ICON/GE, NDI.GUI.ICON/GT, NDI.GUI.ICON/LT, NDI.GUI.ICON/NE Help for ndi.gui.Icon/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.icon, matlab.metadata.Property, events Help for ndi.gui.Icon/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.ICON, NDI.GUI.ICON/EQ, NDI.GUI.ICON/GE, NDI.GUI.ICON/GT, NDI.GUI.ICON/LE, NDI.GUI.ICON/NE Help for ndi.gui.Icon/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.ICON, NDI.GUI.ICON/EQ, NDI.GUI.ICON/GE, NDI.GUI.ICON/GT, NDI.GUI.ICON/LE, NDI.GUI.ICON/LT Help for ndi.gui.Icon/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.ICON, NDI.GUI.ICON/ADDLISTENER, NDI.GUI.ICON/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.Icon/notify is inherited from superclass handle upload - ndi.gui.Icon/upload is a function. upload(obj, ~, ~)","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Lab.m/","text":"CLASS ndi.gui.Lab ndi.gui.Lab is a class. obj = ndi.gui.Lab Superclasses handle Properties Property Description editable window panel info panelImage subjects probes DAQs drag dragPt moved back zIn zOut editBox editTxt connects wires row transmitting Methods Method Description Lab ndi.gui.Lab/Lab is a constructor. addDAQ ndi.gui.Lab/addDAQ is a function. addProbe ndi.gui.Lab/addProbe is a function. addSubject ndi.gui.Lab/addSubject is a function. addlistener addlistener Add listener for event. buttons ndi.gui.Lab/buttons is a function. connect Block diagram interconnections of dynamic systems cut ndi.gui.Lab/cut is a function. delete DELETE Delete a handle object. details Display array details editCallback ndi.gui.Lab/editCallback is a function. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. grid Display or hide axes grid lines gt > (GT) Greater than relation for handles. iconCallback ndi.gui.Lab/iconCallback is a function. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. move ndi.gui.Lab/move is a function. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setZoom ndi.gui.Lab/setZoom is a function. symbol ndi.gui.Lab/symbol is a function. updateConnections ndi.gui.Lab/updateConnections is a function. Methods help Lab - ndi.gui.Lab/Lab is a constructor. obj = Lab Documentation for ndi.gui.Lab/Lab doc ndi.gui.Lab addDAQ - ndi.gui.Lab/addDAQ is a function. addDAQ(obj, daq) addProbe - ndi.gui.Lab/addProbe is a function. addProbe(obj, prob) addSubject - ndi.gui.Lab/addSubject is a function. addSubject(obj, subj) addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.lab, matlab.metadata.Property, events Help for ndi.gui.Lab/addlistener is inherited from superclass handle buttons - ndi.gui.Lab/buttons is a function. buttons(obj) connect - Block diagram interconnections of dynamic systems This MATLAB function connects the models and block diagram elements sys1,...sysN based on signal names. Syntax sysc = connect(sys1,...sysN,inputs,outputs) sysc = connect(sys1,...sysN,inputs,outputs,APs) sysc = connect(blksys,connections,inputs,outputs) sysc = connect(___,opts) Input Arguments sys - Dynamic system model or other element to interconnect LTI model object | control design block | AnalysisPoint block | identified model | sparse model object | time-varying model object | parameter-varying model object | time-varying model object inputs - Inputs of combined model character vector | cell array of character vectors | string | string vector | positive integer | vector of positive integers outputs - Outputs of combined model character vector | cell array of character vectors | string | string vector | positive integer | vector of positive integers APs - Locations of interest in the combined model character vector | cell array of character vectors | string | string vector blksys - Unconnected aggregate model dynamic system model connections - Connections and summing junctions matrix opts - Additional options for interconnection connectOptions options set Output Arguments sysc - Interconnected system state-space model | frequency-response data model Examples openExample('control/SISOControlSystemExample') openExample('control/MIMOControlSystemExample') openExample('control/FeedbackLoopWithAnalysisPointExample') openExample('control/IndexBasedInterconnectionExample') openExample('control/CombineTwoInterconnectedModelsWithAnalysisPointsExample') See also sumblk, AnalysisPoint, append, feedback, parallel, series, lft, connectOptions Introduced in Control System Toolbox before R2006a Documentation for connect doc connect cut - ndi.gui.Lab/cut is a function. cut(obj, src, ~) delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.GUI.LAB, NDI.GUI.LAB/ISVALID, CLEAR Help for ndi.gui.Lab/delete is inherited from superclass handle details - Display array details This MATLAB function displays detailed information about the array, A. Syntax details(A) Input Arguments A - Input array scalar or nonscalar array of any type Examples web /Applications/MATLAB_R2024b.app/help/matlab/ref/details.html#bt8wlxq-2 See also classdef, disp Introduced in MATLAB in R2013b Documentation for details doc details editCallback - ndi.gui.Lab/editCallback is a function. editCallback(obj, ~, ~) eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.LAB, NDI.GUI.LAB/GE, NDI.GUI.LAB/GT, NDI.GUI.LAB/LE, NDI.GUI.LAB/LT, NDI.GUI.LAB/NE Help for ndi.gui.Lab/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.LAB Help for ndi.gui.Lab/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.lab, ndi.gui.lab/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.Lab/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.LAB, NDI.GUI.LAB/EQ, NDI.GUI.LAB/GT, NDI.GUI.LAB/LE, NDI.GUI.LAB/LT, NDI.GUI.LAB/NE Help for ndi.gui.Lab/ge is inherited from superclass handle grid - Display or hide axes grid lines This MATLAB function displays the major grid lines for the current axes returned by the gca command. Syntax grid on grid off grid grid minor grid(visibility) grid(target,___) Input Arguments visibility - Grid visibility \"on\" | \"off\" | true or 1 | false or 0 | OnOffSwitchState value target - Target object axes | standalone visualization | array of axes or standalone visualizations Examples openExample('graphics/DisplayGridLines1Example') openExample('graphics/RemoveGridLinesExample') openExample('graphics/DisplayMajorMinorGridLinesExample') openExample('graphics/GridSpecificAxesExample') See also axis, box, title, xlabel, ylabel, legend, Axes Properties, PolarAxes Properties, GeographicAxes Properties, matlab.lang.OnOffSwitchState Introduced in MATLAB before R2006a Documentation for grid doc grid gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.LAB, NDI.GUI.LAB/EQ, NDI.GUI.LAB/GE, NDI.GUI.LAB/LE, NDI.GUI.LAB/LT, NDI.GUI.LAB/NE Help for ndi.gui.Lab/gt is inherited from superclass handle iconCallback - ndi.gui.Lab/iconCallback is a function. iconCallback(obj, ~, ~, src) isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.LAB, NDI.GUI.LAB/DELETE Help for ndi.gui.Lab/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.LAB, NDI.GUI.LAB/EQ, NDI.GUI.LAB/GE, NDI.GUI.LAB/GT, NDI.GUI.LAB/LT, NDI.GUI.LAB/NE Help for ndi.gui.Lab/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.lab, matlab.metadata.Property, events Help for ndi.gui.Lab/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.LAB, NDI.GUI.LAB/EQ, NDI.GUI.LAB/GE, NDI.GUI.LAB/GT, NDI.GUI.LAB/LE, NDI.GUI.LAB/NE Help for ndi.gui.Lab/lt is inherited from superclass handle move - ndi.gui.Lab/move is a function. move(obj, ~, ~) ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.LAB, NDI.GUI.LAB/EQ, NDI.GUI.LAB/GE, NDI.GUI.LAB/GT, NDI.GUI.LAB/LE, NDI.GUI.LAB/LT Help for ndi.gui.Lab/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.LAB, NDI.GUI.LAB/ADDLISTENER, NDI.GUI.LAB/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.Lab/notify is inherited from superclass handle setZoom - ndi.gui.Lab/setZoom is a function. setZoom(obj, ~, ~, z) symbol - ndi.gui.Lab/symbol is a function. symbol(obj, src) updateConnections - ndi.gui.Lab/updateConnections is a function. updateConnections(obj)","title":"ndi.gui.Lab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Lab.m/#class-ndiguilab","text":"ndi.gui.Lab is a class. obj = ndi.gui.Lab","title":"CLASS ndi.gui.Lab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Lab.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Lab.m/#properties","text":"Property Description editable window panel info panelImage subjects probes DAQs drag dragPt moved back zIn zOut editBox editTxt connects wires row transmitting","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Lab.m/#methods","text":"Method Description Lab ndi.gui.Lab/Lab is a constructor. addDAQ ndi.gui.Lab/addDAQ is a function. addProbe ndi.gui.Lab/addProbe is a function. addSubject ndi.gui.Lab/addSubject is a function. addlistener addlistener Add listener for event. buttons ndi.gui.Lab/buttons is a function. connect Block diagram interconnections of dynamic systems cut ndi.gui.Lab/cut is a function. delete DELETE Delete a handle object. details Display array details editCallback ndi.gui.Lab/editCallback is a function. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. grid Display or hide axes grid lines gt > (GT) Greater than relation for handles. iconCallback ndi.gui.Lab/iconCallback is a function. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. move ndi.gui.Lab/move is a function. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setZoom ndi.gui.Lab/setZoom is a function. symbol ndi.gui.Lab/symbol is a function. updateConnections ndi.gui.Lab/updateConnections is a function.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Lab.m/#methods-help","text":"Lab - ndi.gui.Lab/Lab is a constructor. obj = Lab Documentation for ndi.gui.Lab/Lab doc ndi.gui.Lab addDAQ - ndi.gui.Lab/addDAQ is a function. addDAQ(obj, daq) addProbe - ndi.gui.Lab/addProbe is a function. addProbe(obj, prob) addSubject - ndi.gui.Lab/addSubject is a function. addSubject(obj, subj) addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.lab, matlab.metadata.Property, events Help for ndi.gui.Lab/addlistener is inherited from superclass handle buttons - ndi.gui.Lab/buttons is a function. buttons(obj) connect - Block diagram interconnections of dynamic systems This MATLAB function connects the models and block diagram elements sys1,...sysN based on signal names. Syntax sysc = connect(sys1,...sysN,inputs,outputs) sysc = connect(sys1,...sysN,inputs,outputs,APs) sysc = connect(blksys,connections,inputs,outputs) sysc = connect(___,opts) Input Arguments sys - Dynamic system model or other element to interconnect LTI model object | control design block | AnalysisPoint block | identified model | sparse model object | time-varying model object | parameter-varying model object | time-varying model object inputs - Inputs of combined model character vector | cell array of character vectors | string | string vector | positive integer | vector of positive integers outputs - Outputs of combined model character vector | cell array of character vectors | string | string vector | positive integer | vector of positive integers APs - Locations of interest in the combined model character vector | cell array of character vectors | string | string vector blksys - Unconnected aggregate model dynamic system model connections - Connections and summing junctions matrix opts - Additional options for interconnection connectOptions options set Output Arguments sysc - Interconnected system state-space model | frequency-response data model Examples openExample('control/SISOControlSystemExample') openExample('control/MIMOControlSystemExample') openExample('control/FeedbackLoopWithAnalysisPointExample') openExample('control/IndexBasedInterconnectionExample') openExample('control/CombineTwoInterconnectedModelsWithAnalysisPointsExample') See also sumblk, AnalysisPoint, append, feedback, parallel, series, lft, connectOptions Introduced in Control System Toolbox before R2006a Documentation for connect doc connect cut - ndi.gui.Lab/cut is a function. cut(obj, src, ~) delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.GUI.LAB, NDI.GUI.LAB/ISVALID, CLEAR Help for ndi.gui.Lab/delete is inherited from superclass handle details - Display array details This MATLAB function displays detailed information about the array, A. Syntax details(A) Input Arguments A - Input array scalar or nonscalar array of any type Examples web /Applications/MATLAB_R2024b.app/help/matlab/ref/details.html#bt8wlxq-2 See also classdef, disp Introduced in MATLAB in R2013b Documentation for details doc details editCallback - ndi.gui.Lab/editCallback is a function. editCallback(obj, ~, ~) eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.LAB, NDI.GUI.LAB/GE, NDI.GUI.LAB/GT, NDI.GUI.LAB/LE, NDI.GUI.LAB/LT, NDI.GUI.LAB/NE Help for ndi.gui.Lab/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.LAB Help for ndi.gui.Lab/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.lab, ndi.gui.lab/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.Lab/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.LAB, NDI.GUI.LAB/EQ, NDI.GUI.LAB/GT, NDI.GUI.LAB/LE, NDI.GUI.LAB/LT, NDI.GUI.LAB/NE Help for ndi.gui.Lab/ge is inherited from superclass handle grid - Display or hide axes grid lines This MATLAB function displays the major grid lines for the current axes returned by the gca command. Syntax grid on grid off grid grid minor grid(visibility) grid(target,___) Input Arguments visibility - Grid visibility \"on\" | \"off\" | true or 1 | false or 0 | OnOffSwitchState value target - Target object axes | standalone visualization | array of axes or standalone visualizations Examples openExample('graphics/DisplayGridLines1Example') openExample('graphics/RemoveGridLinesExample') openExample('graphics/DisplayMajorMinorGridLinesExample') openExample('graphics/GridSpecificAxesExample') See also axis, box, title, xlabel, ylabel, legend, Axes Properties, PolarAxes Properties, GeographicAxes Properties, matlab.lang.OnOffSwitchState Introduced in MATLAB before R2006a Documentation for grid doc grid gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.LAB, NDI.GUI.LAB/EQ, NDI.GUI.LAB/GE, NDI.GUI.LAB/LE, NDI.GUI.LAB/LT, NDI.GUI.LAB/NE Help for ndi.gui.Lab/gt is inherited from superclass handle iconCallback - ndi.gui.Lab/iconCallback is a function. iconCallback(obj, ~, ~, src) isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.LAB, NDI.GUI.LAB/DELETE Help for ndi.gui.Lab/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.LAB, NDI.GUI.LAB/EQ, NDI.GUI.LAB/GE, NDI.GUI.LAB/GT, NDI.GUI.LAB/LT, NDI.GUI.LAB/NE Help for ndi.gui.Lab/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.lab, matlab.metadata.Property, events Help for ndi.gui.Lab/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.LAB, NDI.GUI.LAB/EQ, NDI.GUI.LAB/GE, NDI.GUI.LAB/GT, NDI.GUI.LAB/LE, NDI.GUI.LAB/NE Help for ndi.gui.Lab/lt is inherited from superclass handle move - ndi.gui.Lab/move is a function. move(obj, ~, ~) ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.LAB, NDI.GUI.LAB/EQ, NDI.GUI.LAB/GE, NDI.GUI.LAB/GT, NDI.GUI.LAB/LE, NDI.GUI.LAB/LT Help for ndi.gui.Lab/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.LAB, NDI.GUI.LAB/ADDLISTENER, NDI.GUI.LAB/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.Lab/notify is inherited from superclass handle setZoom - ndi.gui.Lab/setZoom is a function. setZoom(obj, ~, ~, z) symbol - ndi.gui.Lab/symbol is a function. symbol(obj, src) updateConnections - ndi.gui.Lab/updateConnections is a function. updateConnections(obj)","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/docViewer.m/","text":"CLASS ndi.gui.docViewer table2list Superclasses handle Properties Property Description fullDocuments fullTable tempDocuments tempTable search table panel info docs fig Methods Method Description addDoc Todo: needs documentation addlistener addlistener Add listener for event. clearView ndi.gui.docViewer/clearView is a function. contentSearch ndi.gui.docViewer/contentSearch is a function. delete DELETE Delete a handle object. details Display array details docViewer table2list eq == (EQ) Test handle equality. filter 1-D digital filter filterHelper ndi.gui.docViewer/filterHelper is a function. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. graph Graph with undirected edges gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. restore Todo: needs documentation; are we restoring the view or the underlying data? searchFieldName ndi.gui.docViewer/searchFieldName is a function. searchID ndi.gui.docViewer/searchID is a function. subgraph ndi.gui.docViewer/subgraph is a function. Methods help addDoc - Todo: needs documentation addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.docviewer, matlab.metadata.Property, events Help for ndi.gui.docViewer/addlistener is inherited from superclass handle clearView - ndi.gui.docViewer/clearView is a function. clearView(obj, ~, ~) contentSearch - ndi.gui.docViewer/contentSearch is a function. contentSearch(obj, fieldValue, data) delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/ISVALID, CLEAR Help for ndi.gui.docViewer/delete is inherited from superclass handle details - Display array details This MATLAB function displays detailed information about the array, A. Syntax details(A) Input Arguments A - Input array scalar or nonscalar array of any type Examples web /Applications/MATLAB_R2024b.app/help/matlab/ref/details.html#bt8wlxq-2 See also classdef, disp Introduced in MATLAB in R2013b Documentation for details doc details docViewer - table2list Documentation for ndi.gui.docViewer/docViewer doc ndi.gui.docViewer eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/GE, NDI.GUI.DOCVIEWER/GT, NDI.GUI.DOCVIEWER/LE, NDI.GUI.DOCVIEWER/LT, NDI.GUI.DOCVIEWER/NE Help for ndi.gui.docViewer/eq is inherited from superclass handle filter - 1-D digital filter This MATLAB function filters the input data x using a rational transfer function defined by the numerator and denominator coefficients b and a. Syntax y = filter(b,a,x) y = filter(b,a,x,zi) y = filter(b,a,x,zi,dim) [y,zf] = filter(___) Input Arguments b - Numerator coefficients of rational transfer function vector a - Denominator coefficients of rational transfer function vector x - Input data vector | matrix | multidimensional array zi - Initial conditions for filter delays [] (default) | vector | matrix | multidimensional array dim - Dimension to operate along positive integer scalar Output Arguments y - Filtered data vector | matrix | multidimensional array zf - Final conditions for filter delays vector | matrix | multidimensional array Examples openExample('matlab/MovingAverageFilterOfVectorDataExample') openExample('matlab/FilterMatrixRowsExample') openExample('matlab/SpecifyInitialConditionsExample') openExample('matlab/FilterDataInSectionsExample') See also conv, filter2 Introduced in MATLAB before R2006a Documentation for filter doc filter filterHelper - ndi.gui.docViewer/filterHelper is a function. filterHelper(obj, search1, search2, searchStr) findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.DOCVIEWER Help for ndi.gui.docViewer/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.docviewer, ndi.gui.docviewer/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.docViewer/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/EQ, NDI.GUI.DOCVIEWER/GT, NDI.GUI.DOCVIEWER/LE, NDI.GUI.DOCVIEWER/LT, NDI.GUI.DOCVIEWER/NE Help for ndi.gui.docViewer/ge is inherited from superclass handle graph - Graph with undirected edges graph objects represent undirected graphs, which have direction-less edges connecting the nodes. Creation Syntax G = graph G = graph(A) G = graph(A,nodenames) G = graph(A,NodeTable) G = graph(A,___,type) G = graph(A,___,'omitselfloops') G = graph(s,t) G = graph(s,t,weights) G = graph(s,t,weights,nodenames) G = graph(s,t,weights,NodeTable) G = graph(s,t,weights,num) G = graph(s,t,___,'omitselfloops') G = graph(s,t,EdgeTable,___) G = graph(EdgeTable) G = graph(EdgeTable,NodeTable) G = graph(EdgeTable,___,'omitselfloops') Input Arguments A - Adjacency matrix matrix nodenames - Node names cell array of character vectors | string array type - Type of adjacency matrix 'upper' | 'lower' s,t - Node pairs (as separate arguments) node indices | node names weights - Edge weights scalar | vector | matrix | multidimensional array | [] num - Number of graph nodes positive scalar integer EdgeTable - Table of edge information table NodeTable - Table of node information table Properties Edges - Edges of graph table Nodes - Nodes of graph table Object Functions layoutcoords - Graph node and edge layout coordinates simplify - Reduce multigraph to simple graph ismultigraph - Determine whether graph has multiple edges edgecount - Number of edges between two nodes isisomorphic - Determine whether two graphs are isomorphic isomorphism - Compute isomorphism between two graphs nearest - Nearest neighbors within radius centrality - Measure node importance minspantree - Minimum spanning tree of graph maxflow - Maximum flow in graph dfsearch - Depth-first graph search bfsearch - Breadth-first graph search bctree - Block-cut tree graph biconncomp - Biconnected graph components conncomp - Connected graph components subgraph - Extract subgraph reordernodes - Reorder graph nodes shortestpathtree - Shortest path tree from node shortestpath - Shortest path between two single nodes distances - Shortest path distances of all node pairs laplacian - Graph Laplacian matrix incidence - Graph incidence matrix adjacency - Graph adjacency matrix rmedge - Remove edge from graph addedge - Add new edge to graph findedge - Locate edge in graph numedges - Number of edges in graph outedges - Outgoing edges from node neighbors - Neighbors of graph node degree - Degree of graph nodes rmnode - Remove node from graph addnode - Add new node to graph findnode - Locate node in graph numnodes - Number of nodes in graph allcycles - Find all cycles in graph allpaths - Find all paths between two graph nodes cyclebasis - Fundamental cycle basis of graph hascycles - Determine whether graph contains cycles plot - Plot graph nodes and edges Examples openExample('matlab/CreateAndModifyGraphObjectExample') openExample('matlab/AdjacencyMatrixGraphConstructionExample') openExample('matlab/AdjacencyMatrixConstructionWithNodeNamesExample') openExample('matlab/EdgeListGraphConstructionExample') openExample('matlab/EdgeListGraphConstructionWithNodeNamesAndEdgeWeightsExample') openExample('matlab/EdgeListConstructionWithExtraNodesExample') openExample('matlab/AddNodesAndEdgesToEmptyGraphExample') openExample('matlab/GraphConstructionWithTablesExample') See also digraph, subgraph Introduced in MATLAB in R2015b Documentation for graph doc graph gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/EQ, NDI.GUI.DOCVIEWER/GE, NDI.GUI.DOCVIEWER/LE, NDI.GUI.DOCVIEWER/LT, NDI.GUI.DOCVIEWER/NE Help for ndi.gui.docViewer/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/DELETE Help for ndi.gui.docViewer/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/EQ, NDI.GUI.DOCVIEWER/GE, NDI.GUI.DOCVIEWER/GT, NDI.GUI.DOCVIEWER/LT, NDI.GUI.DOCVIEWER/NE Help for ndi.gui.docViewer/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.docviewer, matlab.metadata.Property, events Help for ndi.gui.docViewer/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/EQ, NDI.GUI.DOCVIEWER/GE, NDI.GUI.DOCVIEWER/GT, NDI.GUI.DOCVIEWER/LE, NDI.GUI.DOCVIEWER/NE Help for ndi.gui.docViewer/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/EQ, NDI.GUI.DOCVIEWER/GE, NDI.GUI.DOCVIEWER/GT, NDI.GUI.DOCVIEWER/LE, NDI.GUI.DOCVIEWER/LT Help for ndi.gui.docViewer/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/ADDLISTENER, NDI.GUI.DOCVIEWER/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.docViewer/notify is inherited from superclass handle restore - Todo: needs documentation; are we restoring the view or the underlying data? searchFieldName - ndi.gui.docViewer/searchFieldName is a function. searchFieldName(obj, ~, ~, fieldName) searchID - ndi.gui.docViewer/searchID is a function. searchID(obj, list_ID) subgraph - ndi.gui.docViewer/subgraph is a function. subgraph(obj, ~, ~, ind)","title":"ndi.gui.docViewer"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/docViewer.m/#class-ndiguidocviewer","text":"table2list","title":"CLASS ndi.gui.docViewer"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/docViewer.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/docViewer.m/#properties","text":"Property Description fullDocuments fullTable tempDocuments tempTable search table panel info docs fig","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/docViewer.m/#methods","text":"Method Description addDoc Todo: needs documentation addlistener addlistener Add listener for event. clearView ndi.gui.docViewer/clearView is a function. contentSearch ndi.gui.docViewer/contentSearch is a function. delete DELETE Delete a handle object. details Display array details docViewer table2list eq == (EQ) Test handle equality. filter 1-D digital filter filterHelper ndi.gui.docViewer/filterHelper is a function. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. graph Graph with undirected edges gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. restore Todo: needs documentation; are we restoring the view or the underlying data? searchFieldName ndi.gui.docViewer/searchFieldName is a function. searchID ndi.gui.docViewer/searchID is a function. subgraph ndi.gui.docViewer/subgraph is a function.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/docViewer.m/#methods-help","text":"addDoc - Todo: needs documentation addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.docviewer, matlab.metadata.Property, events Help for ndi.gui.docViewer/addlistener is inherited from superclass handle clearView - ndi.gui.docViewer/clearView is a function. clearView(obj, ~, ~) contentSearch - ndi.gui.docViewer/contentSearch is a function. contentSearch(obj, fieldValue, data) delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/ISVALID, CLEAR Help for ndi.gui.docViewer/delete is inherited from superclass handle details - Display array details This MATLAB function displays detailed information about the array, A. Syntax details(A) Input Arguments A - Input array scalar or nonscalar array of any type Examples web /Applications/MATLAB_R2024b.app/help/matlab/ref/details.html#bt8wlxq-2 See also classdef, disp Introduced in MATLAB in R2013b Documentation for details doc details docViewer - table2list Documentation for ndi.gui.docViewer/docViewer doc ndi.gui.docViewer eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/GE, NDI.GUI.DOCVIEWER/GT, NDI.GUI.DOCVIEWER/LE, NDI.GUI.DOCVIEWER/LT, NDI.GUI.DOCVIEWER/NE Help for ndi.gui.docViewer/eq is inherited from superclass handle filter - 1-D digital filter This MATLAB function filters the input data x using a rational transfer function defined by the numerator and denominator coefficients b and a. Syntax y = filter(b,a,x) y = filter(b,a,x,zi) y = filter(b,a,x,zi,dim) [y,zf] = filter(___) Input Arguments b - Numerator coefficients of rational transfer function vector a - Denominator coefficients of rational transfer function vector x - Input data vector | matrix | multidimensional array zi - Initial conditions for filter delays [] (default) | vector | matrix | multidimensional array dim - Dimension to operate along positive integer scalar Output Arguments y - Filtered data vector | matrix | multidimensional array zf - Final conditions for filter delays vector | matrix | multidimensional array Examples openExample('matlab/MovingAverageFilterOfVectorDataExample') openExample('matlab/FilterMatrixRowsExample') openExample('matlab/SpecifyInitialConditionsExample') openExample('matlab/FilterDataInSectionsExample') See also conv, filter2 Introduced in MATLAB before R2006a Documentation for filter doc filter filterHelper - ndi.gui.docViewer/filterHelper is a function. filterHelper(obj, search1, search2, searchStr) findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.DOCVIEWER Help for ndi.gui.docViewer/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.docviewer, ndi.gui.docviewer/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.docViewer/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/EQ, NDI.GUI.DOCVIEWER/GT, NDI.GUI.DOCVIEWER/LE, NDI.GUI.DOCVIEWER/LT, NDI.GUI.DOCVIEWER/NE Help for ndi.gui.docViewer/ge is inherited from superclass handle graph - Graph with undirected edges graph objects represent undirected graphs, which have direction-less edges connecting the nodes. Creation Syntax G = graph G = graph(A) G = graph(A,nodenames) G = graph(A,NodeTable) G = graph(A,___,type) G = graph(A,___,'omitselfloops') G = graph(s,t) G = graph(s,t,weights) G = graph(s,t,weights,nodenames) G = graph(s,t,weights,NodeTable) G = graph(s,t,weights,num) G = graph(s,t,___,'omitselfloops') G = graph(s,t,EdgeTable,___) G = graph(EdgeTable) G = graph(EdgeTable,NodeTable) G = graph(EdgeTable,___,'omitselfloops') Input Arguments A - Adjacency matrix matrix nodenames - Node names cell array of character vectors | string array type - Type of adjacency matrix 'upper' | 'lower' s,t - Node pairs (as separate arguments) node indices | node names weights - Edge weights scalar | vector | matrix | multidimensional array | [] num - Number of graph nodes positive scalar integer EdgeTable - Table of edge information table NodeTable - Table of node information table Properties Edges - Edges of graph table Nodes - Nodes of graph table Object Functions layoutcoords - Graph node and edge layout coordinates simplify - Reduce multigraph to simple graph ismultigraph - Determine whether graph has multiple edges edgecount - Number of edges between two nodes isisomorphic - Determine whether two graphs are isomorphic isomorphism - Compute isomorphism between two graphs nearest - Nearest neighbors within radius centrality - Measure node importance minspantree - Minimum spanning tree of graph maxflow - Maximum flow in graph dfsearch - Depth-first graph search bfsearch - Breadth-first graph search bctree - Block-cut tree graph biconncomp - Biconnected graph components conncomp - Connected graph components subgraph - Extract subgraph reordernodes - Reorder graph nodes shortestpathtree - Shortest path tree from node shortestpath - Shortest path between two single nodes distances - Shortest path distances of all node pairs laplacian - Graph Laplacian matrix incidence - Graph incidence matrix adjacency - Graph adjacency matrix rmedge - Remove edge from graph addedge - Add new edge to graph findedge - Locate edge in graph numedges - Number of edges in graph outedges - Outgoing edges from node neighbors - Neighbors of graph node degree - Degree of graph nodes rmnode - Remove node from graph addnode - Add new node to graph findnode - Locate node in graph numnodes - Number of nodes in graph allcycles - Find all cycles in graph allpaths - Find all paths between two graph nodes cyclebasis - Fundamental cycle basis of graph hascycles - Determine whether graph contains cycles plot - Plot graph nodes and edges Examples openExample('matlab/CreateAndModifyGraphObjectExample') openExample('matlab/AdjacencyMatrixGraphConstructionExample') openExample('matlab/AdjacencyMatrixConstructionWithNodeNamesExample') openExample('matlab/EdgeListGraphConstructionExample') openExample('matlab/EdgeListGraphConstructionWithNodeNamesAndEdgeWeightsExample') openExample('matlab/EdgeListConstructionWithExtraNodesExample') openExample('matlab/AddNodesAndEdgesToEmptyGraphExample') openExample('matlab/GraphConstructionWithTablesExample') See also digraph, subgraph Introduced in MATLAB in R2015b Documentation for graph doc graph gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/EQ, NDI.GUI.DOCVIEWER/GE, NDI.GUI.DOCVIEWER/LE, NDI.GUI.DOCVIEWER/LT, NDI.GUI.DOCVIEWER/NE Help for ndi.gui.docViewer/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/DELETE Help for ndi.gui.docViewer/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/EQ, NDI.GUI.DOCVIEWER/GE, NDI.GUI.DOCVIEWER/GT, NDI.GUI.DOCVIEWER/LT, NDI.GUI.DOCVIEWER/NE Help for ndi.gui.docViewer/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.docviewer, matlab.metadata.Property, events Help for ndi.gui.docViewer/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/EQ, NDI.GUI.DOCVIEWER/GE, NDI.GUI.DOCVIEWER/GT, NDI.GUI.DOCVIEWER/LE, NDI.GUI.DOCVIEWER/NE Help for ndi.gui.docViewer/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/EQ, NDI.GUI.DOCVIEWER/GE, NDI.GUI.DOCVIEWER/GT, NDI.GUI.DOCVIEWER/LE, NDI.GUI.DOCVIEWER/LT Help for ndi.gui.docViewer/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/ADDLISTENER, NDI.GUI.DOCVIEWER/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.docViewer/notify is inherited from superclass handle restore - Todo: needs documentation; are we restoring the view or the underlying data? searchFieldName - ndi.gui.docViewer/searchFieldName is a function. searchFieldName(obj, ~, ~, fieldName) searchID - ndi.gui.docViewer/searchID is a function. searchID(obj, list_ID) subgraph - ndi.gui.docViewer/subgraph is a function. subgraph(obj, ~, ~, ind)","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/gui.m/","text":"ndi.gui.gui GUI - A gui to display the contents of an NDI_SESSION ndi.gui.gui(NDI_SESSION_OBJ) Brings up a graphical user interface to view the ndi.session NDI_SESSION_OBJ See also: ndi.session","title":"ndi.gui.gui"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/gui.m/#ndiguigui","text":"GUI - A gui to display the contents of an NDI_SESSION ndi.gui.gui(NDI_SESSION_OBJ) Brings up a graphical user interface to view the ndi.session NDI_SESSION_OBJ See also: ndi.session","title":"ndi.gui.gui"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/gui_v2.m/","text":"ndi.gui.gui_v2 ndi.gui.gui_v2 is a function.","title":"ndi.gui.gui_v2"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/gui_v2.m/#ndiguigui_v2","text":"ndi.gui.gui_v2 is a function.","title":"ndi.gui.gui_v2"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/CommandWindowProgressMonitor.m/","text":"CLASS ndi.gui.component.CommandWindowProgressMonitor ndi.gui.component.CommandWindowProgressMonitor is a class. obj = ndi.gui.component.CommandWindowProgressMonitor Superclasses ndi.gui.component.abstract.ProgressMonitor , handle Properties Property Description IndentSize ShowTimeStamp TimeStampFormat UpdateInplace Title UpdateInterval ProgressTracker DisplayElapsedTime DisplayRemainingTime RemainingTimeFormat Methods Method Description CommandWindowProgressMonitor ndi.gui.component.CommandWindowProgressMonitor/CommandWindowProgressMonitor is a constructor. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. markComplete Note: Using markComplete method to trigger event to run ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. reset Reset graphics object properties Methods help CommandWindowProgressMonitor - ndi.gui.component.CommandWindowProgressMonitor/CommandWindowProgressMonitor is a constructor. obj = ndi.gui.component.CommandWindowProgressMonitor Documentation for ndi.gui.component.CommandWindowProgressMonitor/CommandWindowProgressMonitor doc ndi.gui.component.CommandWindowProgressMonitor addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.component.commandwindowprogressmonitor, matlab.metadata.Property, events Help for ndi.gui.component.CommandWindowProgressMonitor/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/ISVALID, CLEAR Help for ndi.gui.component.CommandWindowProgressMonitor/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/NE Help for ndi.gui.component.CommandWindowProgressMonitor/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR Help for ndi.gui.component.CommandWindowProgressMonitor/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.component.commandwindowprogressmonitor, ndi.gui.component.commandwindowprogressmonitor/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.component.CommandWindowProgressMonitor/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/NE Help for ndi.gui.component.CommandWindowProgressMonitor/ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/NE Help for ndi.gui.component.CommandWindowProgressMonitor/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/DELETE Help for ndi.gui.component.CommandWindowProgressMonitor/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/NE Help for ndi.gui.component.CommandWindowProgressMonitor/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.component.commandwindowprogressmonitor, matlab.metadata.Property, events Help for ndi.gui.component.CommandWindowProgressMonitor/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/NE Help for ndi.gui.component.CommandWindowProgressMonitor/lt is inherited from superclass handle markComplete - Note: Using markComplete method to trigger event to run methods of this class. Todo: Can it be simplified? Help for ndi.gui.component.CommandWindowProgressMonitor/markComplete is inherited from superclass ndi.gui.component.abstract.ProgressMonitor ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LT Help for ndi.gui.component.CommandWindowProgressMonitor/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/ADDLISTENER, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.component.CommandWindowProgressMonitor/notify is inherited from superclass handle reset - Reset graphics object properties This MATLAB function resets all of the properties of the specified graphics object to their default values. Syntax reset(h) Input Arguments h - Graphics objects single object | vector of objects Examples openExample('graphics/ResetAxesAndFigurePropertiesExample') See also get, set, cla, clf, gca, gcf, hold Introduced in MATLAB before R2006a Documentation for reset doc reset","title":"ndi.gui.component.CommandWindowProgressMonitor"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/CommandWindowProgressMonitor.m/#class-ndiguicomponentcommandwindowprogressmonitor","text":"ndi.gui.component.CommandWindowProgressMonitor is a class. obj = ndi.gui.component.CommandWindowProgressMonitor","title":"CLASS ndi.gui.component.CommandWindowProgressMonitor"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/CommandWindowProgressMonitor.m/#superclasses","text":"ndi.gui.component.abstract.ProgressMonitor , handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/CommandWindowProgressMonitor.m/#properties","text":"Property Description IndentSize ShowTimeStamp TimeStampFormat UpdateInplace Title UpdateInterval ProgressTracker DisplayElapsedTime DisplayRemainingTime RemainingTimeFormat","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/CommandWindowProgressMonitor.m/#methods","text":"Method Description CommandWindowProgressMonitor ndi.gui.component.CommandWindowProgressMonitor/CommandWindowProgressMonitor is a constructor. addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. markComplete Note: Using markComplete method to trigger event to run ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. reset Reset graphics object properties","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/CommandWindowProgressMonitor.m/#methods-help","text":"CommandWindowProgressMonitor - ndi.gui.component.CommandWindowProgressMonitor/CommandWindowProgressMonitor is a constructor. obj = ndi.gui.component.CommandWindowProgressMonitor Documentation for ndi.gui.component.CommandWindowProgressMonitor/CommandWindowProgressMonitor doc ndi.gui.component.CommandWindowProgressMonitor addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.component.commandwindowprogressmonitor, matlab.metadata.Property, events Help for ndi.gui.component.CommandWindowProgressMonitor/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/ISVALID, CLEAR Help for ndi.gui.component.CommandWindowProgressMonitor/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/NE Help for ndi.gui.component.CommandWindowProgressMonitor/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR Help for ndi.gui.component.CommandWindowProgressMonitor/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.component.commandwindowprogressmonitor, ndi.gui.component.commandwindowprogressmonitor/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.component.CommandWindowProgressMonitor/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/NE Help for ndi.gui.component.CommandWindowProgressMonitor/ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/NE Help for ndi.gui.component.CommandWindowProgressMonitor/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/DELETE Help for ndi.gui.component.CommandWindowProgressMonitor/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/NE Help for ndi.gui.component.CommandWindowProgressMonitor/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.component.commandwindowprogressmonitor, matlab.metadata.Property, events Help for ndi.gui.component.CommandWindowProgressMonitor/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/NE Help for ndi.gui.component.CommandWindowProgressMonitor/lt is inherited from superclass handle markComplete - Note: Using markComplete method to trigger event to run methods of this class. Todo: Can it be simplified? Help for ndi.gui.component.CommandWindowProgressMonitor/markComplete is inherited from superclass ndi.gui.component.abstract.ProgressMonitor ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LT Help for ndi.gui.component.CommandWindowProgressMonitor/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/ADDLISTENER, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.component.CommandWindowProgressMonitor/notify is inherited from superclass handle reset - Reset graphics object properties This MATLAB function resets all of the properties of the specified graphics object to their default values. Syntax reset(h) Input Arguments h - Graphics objects single object | vector of objects Examples openExample('graphics/ResetAxesAndFigurePropertiesExample') See also get, set, cla, clf, gca, gcf, hold Introduced in MATLAB before R2006a Documentation for reset doc reset","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/NDIProgressBar.m/","text":"CLASS ndi.gui.component.NDIProgressBar NDIProgressBar - Progress monitor with NDI-styled progress bar Superclasses ndi.gui.component.abstract.ProgressMonitor , handle Properties Property Description Value Message Size Location ShowPercent Text BorderWidth Title UpdateInterval ProgressTracker DisplayElapsedTime DisplayRemainingTime RemainingTimeFormat Methods Method Description NDIProgressBar Create an NDI progress bar object addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. markComplete Note: Using markComplete method to trigger event to run ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. reset Reset graphics object properties Methods help NDIProgressBar - Create an NDI progress bar object Documentation for ndi.gui.component.NDIProgressBar/NDIProgressBar doc ndi.gui.component.NDIProgressBar addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.component.ndiprogressbar, matlab.metadata.Property, events Help for ndi.gui.component.NDIProgressBar/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/ISVALID, CLEAR Help for ndi.gui.component.NDIProgressBar/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/NE Help for ndi.gui.component.NDIProgressBar/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.COMPONENT.NDIPROGRESSBAR Help for ndi.gui.component.NDIProgressBar/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.component.ndiprogressbar, ndi.gui.component.ndiprogressbar/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.component.NDIProgressBar/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/EQ, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/NE Help for ndi.gui.component.NDIProgressBar/ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/EQ, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/NE Help for ndi.gui.component.NDIProgressBar/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/DELETE Help for ndi.gui.component.NDIProgressBar/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/EQ, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/NE Help for ndi.gui.component.NDIProgressBar/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.component.ndiprogressbar, matlab.metadata.Property, events Help for ndi.gui.component.NDIProgressBar/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/EQ, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/NE Help for ndi.gui.component.NDIProgressBar/lt is inherited from superclass handle markComplete - Note: Using markComplete method to trigger event to run methods of this class. Todo: Can it be simplified? Help for ndi.gui.component.NDIProgressBar/markComplete is inherited from superclass ndi.gui.component.abstract.ProgressMonitor ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/EQ, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LT Help for ndi.gui.component.NDIProgressBar/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/ADDLISTENER, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.component.NDIProgressBar/notify is inherited from superclass handle reset - Reset graphics object properties This MATLAB function resets all of the properties of the specified graphics object to their default values. Syntax reset(h) Input Arguments h - Graphics objects single object | vector of objects Examples openExample('graphics/ResetAxesAndFigurePropertiesExample') See also get, set, cla, clf, gca, gcf, hold Introduced in MATLAB before R2006a Documentation for reset doc reset","title":"ndi.gui.component.NDIProgressBar"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/NDIProgressBar.m/#class-ndiguicomponentndiprogressbar","text":"NDIProgressBar - Progress monitor with NDI-styled progress bar","title":"CLASS ndi.gui.component.NDIProgressBar"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/NDIProgressBar.m/#superclasses","text":"ndi.gui.component.abstract.ProgressMonitor , handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/NDIProgressBar.m/#properties","text":"Property Description Value Message Size Location ShowPercent Text BorderWidth Title UpdateInterval ProgressTracker DisplayElapsedTime DisplayRemainingTime RemainingTimeFormat","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/NDIProgressBar.m/#methods","text":"Method Description NDIProgressBar Create an NDI progress bar object addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. markComplete Note: Using markComplete method to trigger event to run ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. reset Reset graphics object properties","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/NDIProgressBar.m/#methods-help","text":"NDIProgressBar - Create an NDI progress bar object Documentation for ndi.gui.component.NDIProgressBar/NDIProgressBar doc ndi.gui.component.NDIProgressBar addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.component.ndiprogressbar, matlab.metadata.Property, events Help for ndi.gui.component.NDIProgressBar/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/ISVALID, CLEAR Help for ndi.gui.component.NDIProgressBar/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/NE Help for ndi.gui.component.NDIProgressBar/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.COMPONENT.NDIPROGRESSBAR Help for ndi.gui.component.NDIProgressBar/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.component.ndiprogressbar, ndi.gui.component.ndiprogressbar/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.component.NDIProgressBar/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/EQ, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/NE Help for ndi.gui.component.NDIProgressBar/ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/EQ, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/NE Help for ndi.gui.component.NDIProgressBar/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/DELETE Help for ndi.gui.component.NDIProgressBar/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/EQ, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/NE Help for ndi.gui.component.NDIProgressBar/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.component.ndiprogressbar, matlab.metadata.Property, events Help for ndi.gui.component.NDIProgressBar/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/EQ, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/NE Help for ndi.gui.component.NDIProgressBar/lt is inherited from superclass handle markComplete - Note: Using markComplete method to trigger event to run methods of this class. Todo: Can it be simplified? Help for ndi.gui.component.NDIProgressBar/markComplete is inherited from superclass ndi.gui.component.abstract.ProgressMonitor ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/EQ, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LT Help for ndi.gui.component.NDIProgressBar/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/ADDLISTENER, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.component.NDIProgressBar/notify is inherited from superclass handle reset - Reset graphics object properties This MATLAB function resets all of the properties of the specified graphics object to their default values. Syntax reset(h) Input Arguments h - Graphics objects single object | vector of objects Examples openExample('graphics/ResetAxesAndFigurePropertiesExample') See also get, set, cla, clf, gca, gcf, hold Introduced in MATLAB before R2006a Documentation for reset doc reset","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Babstract/ProgressMonitor.m/","text":"CLASS ndi.gui.component.abstract.ProgressMonitor Set this first... Superclasses handle Properties Property Description Title UpdateInterval ProgressTracker DisplayElapsedTime DisplayRemainingTime RemainingTimeFormat Methods Method Description ProgressMonitor Set this first... addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. markComplete Note: Using markComplete method to trigger event to run ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. reset Reset graphics object properties Methods help ProgressMonitor - Set this first... Documentation for ndi.gui.component.abstract.ProgressMonitor/ProgressMonitor doc ndi.gui.component.abstract.ProgressMonitor addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.component.abstract.progressmonitor, matlab.metadata.Property, events Help for ndi.gui.component.abstract.ProgressMonitor/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/ISVALID, CLEAR Help for ndi.gui.component.abstract.ProgressMonitor/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/NE Help for ndi.gui.component.abstract.ProgressMonitor/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR Help for ndi.gui.component.abstract.ProgressMonitor/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.component.abstract.progressmonitor, ndi.gui.component.abstract.progressmonitor/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.component.abstract.ProgressMonitor/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/NE Help for ndi.gui.component.abstract.ProgressMonitor/ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/NE Help for ndi.gui.component.abstract.ProgressMonitor/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/DELETE Help for ndi.gui.component.abstract.ProgressMonitor/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/NE Help for ndi.gui.component.abstract.ProgressMonitor/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.component.abstract.progressmonitor, matlab.metadata.Property, events Help for ndi.gui.component.abstract.ProgressMonitor/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/NE Help for ndi.gui.component.abstract.ProgressMonitor/lt is inherited from superclass handle markComplete - Note: Using markComplete method to trigger event to run methods of this class. Todo: Can it be simplified? ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LT Help for ndi.gui.component.abstract.ProgressMonitor/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/ADDLISTENER, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.component.abstract.ProgressMonitor/notify is inherited from superclass handle reset - Reset graphics object properties This MATLAB function resets all of the properties of the specified graphics object to their default values. Syntax reset(h) Input Arguments h - Graphics objects single object | vector of objects Examples openExample('graphics/ResetAxesAndFigurePropertiesExample') See also get, set, cla, clf, gca, gcf, hold Introduced in MATLAB before R2006a Documentation for reset doc reset","title":"ndi.gui.component.abstract.ProgressMonitor"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Babstract/ProgressMonitor.m/#class-ndiguicomponentabstractprogressmonitor","text":"Set this first...","title":"CLASS ndi.gui.component.abstract.ProgressMonitor"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Babstract/ProgressMonitor.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Babstract/ProgressMonitor.m/#properties","text":"Property Description Title UpdateInterval ProgressTracker DisplayElapsedTime DisplayRemainingTime RemainingTimeFormat","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Babstract/ProgressMonitor.m/#methods","text":"Method Description ProgressMonitor Set this first... addlistener addlistener Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. markComplete Note: Using markComplete method to trigger event to run ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. reset Reset graphics object properties","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Babstract/ProgressMonitor.m/#methods-help","text":"ProgressMonitor - Set this first... Documentation for ndi.gui.component.abstract.ProgressMonitor/ProgressMonitor doc ndi.gui.component.abstract.ProgressMonitor addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.component.abstract.progressmonitor, matlab.metadata.Property, events Help for ndi.gui.component.abstract.ProgressMonitor/addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/ISVALID, CLEAR Help for ndi.gui.component.abstract.ProgressMonitor/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/NE Help for ndi.gui.component.abstract.ProgressMonitor/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR Help for ndi.gui.component.abstract.ProgressMonitor/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.component.abstract.progressmonitor, ndi.gui.component.abstract.progressmonitor/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.component.abstract.ProgressMonitor/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/NE Help for ndi.gui.component.abstract.ProgressMonitor/ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/NE Help for ndi.gui.component.abstract.ProgressMonitor/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/DELETE Help for ndi.gui.component.abstract.ProgressMonitor/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/NE Help for ndi.gui.component.abstract.ProgressMonitor/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.component.abstract.progressmonitor, matlab.metadata.Property, events Help for ndi.gui.component.abstract.ProgressMonitor/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/NE Help for ndi.gui.component.abstract.ProgressMonitor/lt is inherited from superclass handle markComplete - Note: Using markComplete method to trigger event to run methods of this class. Todo: Can it be simplified? ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LT Help for ndi.gui.component.abstract.ProgressMonitor/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/ADDLISTENER, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.component.abstract.ProgressMonitor/notify is inherited from superclass handle reset - Reset graphics object properties This MATLAB function resets all of the properties of the specified graphics object to their default values. Syntax reset(h) Input Arguments h - Graphics objects single object | vector of objects Examples openExample('graphics/ResetAxesAndFigurePropertiesExample') See also get, set, cla, clf, gca, gcf, hold Introduced in MATLAB before R2006a Documentation for reset doc reset","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/AsynchProgressTracker.m/","text":"CLASS ndi.gui.component.internal.AsynchProgressTracker ndi.gui.component.internal.AsynchProgressTracker is a class. obj = ndi.gui.component.internal.AsynchProgressTracker Superclasses ndi.gui.component.internal.ProgressTracker , handle , matlab.mixin.CustomCompactDisplayProvider Properties Property Description PercentageComplete Message CurrentStep TotalSteps Methods Method Description AsynchProgressTracker ndi.gui.component.internal.AsynchProgressTracker/AsynchProgressTracker is a constructor. addlistener addlistener Add listener for event. compactRepresentationForColumn compactRepresentationForColumn Columnar display representation of delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getAsynchTaskProgress Get a temporary file gt > (GT) Greater than relation for handles. isComplete Check if task is complete isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. reset Reset graphics object properties resetProgress Reset progress to start setCompleted ndi.gui.component.internal.AsynchProgressTracker/setCompleted is a function. setTotalSteps Only allow setting value if TotalSteps is 0. Once TotalSteps updateMessage ndi.gui.component.internal.AsynchProgressTracker/updateMessage is a function. updateProgress Update progress by incrementing the current step Methods help AsynchProgressTracker - ndi.gui.component.internal.AsynchProgressTracker/AsynchProgressTracker is a constructor. obj = ndi.gui.component.internal.AsynchProgressTracker Documentation for ndi.gui.component.internal.AsynchProgressTracker/AsynchProgressTracker doc ndi.gui.component.internal.AsynchProgressTracker addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.component.internal.asynchprogresstracker, matlab.metadata.Property, events Help for ndi.gui.component.internal.AsynchProgressTracker/addlistener is inherited from superclass handle compactRepresentationForColumn - compactRepresentationForColumn Columnar display representation of an object rep = compactRepresentationForColumn(obj, displayConfiguration, width) returns a scalar matlab.display.CompactDisplayRepresentation object describing the compact display representation for the input object obj. This method is called by table to obtain the compact display representation for MATLAB object obj, when the shape constraints require that a column be used. displayConfiguration is a matlab.display.DisplayConfiguration object that describes the current display environment, such as the current numeric display format and whether hyperlinks are enabled. Input argument width is the available width to display the object. The default columnar display representation for an object is dimensions plus class name. Override compactRepresentationForColumn to provide a custom columnar compact display. This function is primarily used when your object is displayed within a MATLAB table. See also ndi.gui.component.internal.AsynchProgressTracker/compactRepresentationForSingleLine Help for ndi.gui.component.internal.AsynchProgressTracker/compactRepresentationForColumn is inherited from superclass matlab.mixin.CustomCompactDisplayProvider delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/ISVALID, CLEAR Help for ndi.gui.component.internal.AsynchProgressTracker/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/NE Help for ndi.gui.component.internal.AsynchProgressTracker/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER Help for ndi.gui.component.internal.AsynchProgressTracker/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.component.internal.asynchprogresstracker, ndi.gui.component.internal.asynchprogresstracker/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.component.internal.AsynchProgressTracker/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/NE Help for ndi.gui.component.internal.AsynchProgressTracker/ge is inherited from superclass handle getAsynchTaskProgress - Get a temporary file Help for ndi.gui.component.internal.AsynchProgressTracker/getAsynchTaskProgress is inherited from superclass ndi.gui.component.internal.ProgressTracker gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/NE Help for ndi.gui.component.internal.AsynchProgressTracker/gt is inherited from superclass handle isComplete - Check if task is complete Help for ndi.gui.component.internal.AsynchProgressTracker/isComplete is inherited from superclass ndi.gui.component.internal.ProgressTracker isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/DELETE Help for ndi.gui.component.internal.AsynchProgressTracker/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/NE Help for ndi.gui.component.internal.AsynchProgressTracker/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.component.internal.asynchprogresstracker, matlab.metadata.Property, events Help for ndi.gui.component.internal.AsynchProgressTracker/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/NE Help for ndi.gui.component.internal.AsynchProgressTracker/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LT Help for ndi.gui.component.internal.AsynchProgressTracker/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/ADDLISTENER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.component.internal.AsynchProgressTracker/notify is inherited from superclass handle reset - Reset graphics object properties This MATLAB function resets all of the properties of the specified graphics object to their default values. Syntax reset(h) Input Arguments h - Graphics objects single object | vector of objects Examples openExample('graphics/ResetAxesAndFigurePropertiesExample') See also get, set, cla, clf, gca, gcf, hold Introduced in MATLAB before R2006a Documentation for reset doc reset resetProgress - Reset progress to start Help for ndi.gui.component.internal.AsynchProgressTracker/resetProgress is inherited from superclass ndi.gui.component.internal.ProgressTracker setCompleted - ndi.gui.component.internal.AsynchProgressTracker/setCompleted is a function. setCompleted(obj, message) setTotalSteps - Only allow setting value if TotalSteps is 0. Once TotalSteps is initialized with a value, it should not be settable. The method \"reset\" can be used if the TotalSteps need to be reinitialized. Help for ndi.gui.component.internal.AsynchProgressTracker/setTotalSteps is inherited from superclass ndi.gui.component.internal.ProgressTracker updateMessage - ndi.gui.component.internal.AsynchProgressTracker/updateMessage is a function. updateMessage(obj, newMessage) updateProgress - Update progress by incrementing the current step","title":"ndi.gui.component.internal.AsynchProgressTracker"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/AsynchProgressTracker.m/#class-ndiguicomponentinternalasynchprogresstracker","text":"ndi.gui.component.internal.AsynchProgressTracker is a class. obj = ndi.gui.component.internal.AsynchProgressTracker","title":"CLASS ndi.gui.component.internal.AsynchProgressTracker"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/AsynchProgressTracker.m/#superclasses","text":"ndi.gui.component.internal.ProgressTracker , handle , matlab.mixin.CustomCompactDisplayProvider","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/AsynchProgressTracker.m/#properties","text":"Property Description PercentageComplete Message CurrentStep TotalSteps","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/AsynchProgressTracker.m/#methods","text":"Method Description AsynchProgressTracker ndi.gui.component.internal.AsynchProgressTracker/AsynchProgressTracker is a constructor. addlistener addlistener Add listener for event. compactRepresentationForColumn compactRepresentationForColumn Columnar display representation of delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getAsynchTaskProgress Get a temporary file gt > (GT) Greater than relation for handles. isComplete Check if task is complete isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. reset Reset graphics object properties resetProgress Reset progress to start setCompleted ndi.gui.component.internal.AsynchProgressTracker/setCompleted is a function. setTotalSteps Only allow setting value if TotalSteps is 0. Once TotalSteps updateMessage ndi.gui.component.internal.AsynchProgressTracker/updateMessage is a function. updateProgress Update progress by incrementing the current step","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/AsynchProgressTracker.m/#methods-help","text":"AsynchProgressTracker - ndi.gui.component.internal.AsynchProgressTracker/AsynchProgressTracker is a constructor. obj = ndi.gui.component.internal.AsynchProgressTracker Documentation for ndi.gui.component.internal.AsynchProgressTracker/AsynchProgressTracker doc ndi.gui.component.internal.AsynchProgressTracker addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.component.internal.asynchprogresstracker, matlab.metadata.Property, events Help for ndi.gui.component.internal.AsynchProgressTracker/addlistener is inherited from superclass handle compactRepresentationForColumn - compactRepresentationForColumn Columnar display representation of an object rep = compactRepresentationForColumn(obj, displayConfiguration, width) returns a scalar matlab.display.CompactDisplayRepresentation object describing the compact display representation for the input object obj. This method is called by table to obtain the compact display representation for MATLAB object obj, when the shape constraints require that a column be used. displayConfiguration is a matlab.display.DisplayConfiguration object that describes the current display environment, such as the current numeric display format and whether hyperlinks are enabled. Input argument width is the available width to display the object. The default columnar display representation for an object is dimensions plus class name. Override compactRepresentationForColumn to provide a custom columnar compact display. This function is primarily used when your object is displayed within a MATLAB table. See also ndi.gui.component.internal.AsynchProgressTracker/compactRepresentationForSingleLine Help for ndi.gui.component.internal.AsynchProgressTracker/compactRepresentationForColumn is inherited from superclass matlab.mixin.CustomCompactDisplayProvider delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/ISVALID, CLEAR Help for ndi.gui.component.internal.AsynchProgressTracker/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/NE Help for ndi.gui.component.internal.AsynchProgressTracker/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER Help for ndi.gui.component.internal.AsynchProgressTracker/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.component.internal.asynchprogresstracker, ndi.gui.component.internal.asynchprogresstracker/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.component.internal.AsynchProgressTracker/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/NE Help for ndi.gui.component.internal.AsynchProgressTracker/ge is inherited from superclass handle getAsynchTaskProgress - Get a temporary file Help for ndi.gui.component.internal.AsynchProgressTracker/getAsynchTaskProgress is inherited from superclass ndi.gui.component.internal.ProgressTracker gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/NE Help for ndi.gui.component.internal.AsynchProgressTracker/gt is inherited from superclass handle isComplete - Check if task is complete Help for ndi.gui.component.internal.AsynchProgressTracker/isComplete is inherited from superclass ndi.gui.component.internal.ProgressTracker isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/DELETE Help for ndi.gui.component.internal.AsynchProgressTracker/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/NE Help for ndi.gui.component.internal.AsynchProgressTracker/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.component.internal.asynchprogresstracker, matlab.metadata.Property, events Help for ndi.gui.component.internal.AsynchProgressTracker/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/NE Help for ndi.gui.component.internal.AsynchProgressTracker/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LT Help for ndi.gui.component.internal.AsynchProgressTracker/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/ADDLISTENER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.component.internal.AsynchProgressTracker/notify is inherited from superclass handle reset - Reset graphics object properties This MATLAB function resets all of the properties of the specified graphics object to their default values. Syntax reset(h) Input Arguments h - Graphics objects single object | vector of objects Examples openExample('graphics/ResetAxesAndFigurePropertiesExample') See also get, set, cla, clf, gca, gcf, hold Introduced in MATLAB before R2006a Documentation for reset doc reset resetProgress - Reset progress to start Help for ndi.gui.component.internal.AsynchProgressTracker/resetProgress is inherited from superclass ndi.gui.component.internal.ProgressTracker setCompleted - ndi.gui.component.internal.AsynchProgressTracker/setCompleted is a function. setCompleted(obj, message) setTotalSteps - Only allow setting value if TotalSteps is 0. Once TotalSteps is initialized with a value, it should not be settable. The method \"reset\" can be used if the TotalSteps need to be reinitialized. Help for ndi.gui.component.internal.AsynchProgressTracker/setTotalSteps is inherited from superclass ndi.gui.component.internal.ProgressTracker updateMessage - ndi.gui.component.internal.AsynchProgressTracker/updateMessage is a function. updateMessage(obj, newMessage) updateProgress - Update progress by incrementing the current step","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/ProgressTracker.m/","text":"CLASS ndi.gui.component.internal.ProgressTracker ProgressTracker - Represent and track progress for a task This class provides properties and methods for representing the progress of a task. Superclasses handle , matlab.mixin.CustomCompactDisplayProvider Properties Property Description PercentageComplete Message CurrentStep Current step TotalSteps Total number of steps in the task Methods Method Description ProgressTracker Construct a task progress object addlistener addlistener Add listener for event. compactRepresentationForColumn compactRepresentationForColumn Columnar display representation of delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getAsynchTaskProgress Get a temporary file gt > (GT) Greater than relation for handles. isComplete Check if task is complete isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. reset Reset graphics object properties resetProgress Reset progress to start setCompleted ndi.gui.component.internal.ProgressTracker/setCompleted is a function. setTotalSteps Only allow setting value if TotalSteps is 0. Once TotalSteps updateMessage ndi.gui.component.internal.ProgressTracker/updateMessage is a function. updateProgress Update progress by incrementing the current step Methods help ProgressTracker - Construct a task progress object Documentation for ndi.gui.component.internal.ProgressTracker/ProgressTracker doc ndi.gui.component.internal.ProgressTracker addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.component.internal.progresstracker, matlab.metadata.Property, events Help for ndi.gui.component.internal.ProgressTracker/addlistener is inherited from superclass handle compactRepresentationForColumn - compactRepresentationForColumn Columnar display representation of an object rep = compactRepresentationForColumn(obj, displayConfiguration, width) returns a scalar matlab.display.CompactDisplayRepresentation object describing the compact display representation for the input object obj. This method is called by table to obtain the compact display representation for MATLAB object obj, when the shape constraints require that a column be used. displayConfiguration is a matlab.display.DisplayConfiguration object that describes the current display environment, such as the current numeric display format and whether hyperlinks are enabled. Input argument width is the available width to display the object. The default columnar display representation for an object is dimensions plus class name. Override compactRepresentationForColumn to provide a custom columnar compact display. This function is primarily used when your object is displayed within a MATLAB table. See also ndi.gui.component.internal.ProgressTracker/compactRepresentationForSingleLine Help for ndi.gui.component.internal.ProgressTracker/compactRepresentationForColumn is inherited from superclass matlab.mixin.CustomCompactDisplayProvider delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/ISVALID, CLEAR Help for ndi.gui.component.internal.ProgressTracker/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/NE Help for ndi.gui.component.internal.ProgressTracker/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER Help for ndi.gui.component.internal.ProgressTracker/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.component.internal.progresstracker, ndi.gui.component.internal.progresstracker/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.component.internal.ProgressTracker/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/NE Help for ndi.gui.component.internal.ProgressTracker/ge is inherited from superclass handle getAsynchTaskProgress - Get a temporary file gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/NE Help for ndi.gui.component.internal.ProgressTracker/gt is inherited from superclass handle isComplete - Check if task is complete isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/DELETE Help for ndi.gui.component.internal.ProgressTracker/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/NE Help for ndi.gui.component.internal.ProgressTracker/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.component.internal.progresstracker, matlab.metadata.Property, events Help for ndi.gui.component.internal.ProgressTracker/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/NE Help for ndi.gui.component.internal.ProgressTracker/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LT Help for ndi.gui.component.internal.ProgressTracker/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/ADDLISTENER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.component.internal.ProgressTracker/notify is inherited from superclass handle reset - Reset graphics object properties This MATLAB function resets all of the properties of the specified graphics object to their default values. Syntax reset(h) Input Arguments h - Graphics objects single object | vector of objects Examples openExample('graphics/ResetAxesAndFigurePropertiesExample') See also get, set, cla, clf, gca, gcf, hold Introduced in MATLAB before R2006a Documentation for reset doc reset resetProgress - Reset progress to start setCompleted - ndi.gui.component.internal.ProgressTracker/setCompleted is a function. setCompleted(obj, message) setTotalSteps - Only allow setting value if TotalSteps is 0. Once TotalSteps is initialized with a value, it should not be settable. The method \"reset\" can be used if the TotalSteps need to be reinitialized. updateMessage - ndi.gui.component.internal.ProgressTracker/updateMessage is a function. updateMessage(obj, newMessage) updateProgress - Update progress by incrementing the current step","title":"ndi.gui.component.internal.ProgressTracker"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/ProgressTracker.m/#class-ndiguicomponentinternalprogresstracker","text":"ProgressTracker - Represent and track progress for a task This class provides properties and methods for representing the progress of a task.","title":"CLASS ndi.gui.component.internal.ProgressTracker"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/ProgressTracker.m/#superclasses","text":"handle , matlab.mixin.CustomCompactDisplayProvider","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/ProgressTracker.m/#properties","text":"Property Description PercentageComplete Message CurrentStep Current step TotalSteps Total number of steps in the task","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/ProgressTracker.m/#methods","text":"Method Description ProgressTracker Construct a task progress object addlistener addlistener Add listener for event. compactRepresentationForColumn compactRepresentationForColumn Columnar display representation of delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getAsynchTaskProgress Get a temporary file gt > (GT) Greater than relation for handles. isComplete Check if task is complete isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. reset Reset graphics object properties resetProgress Reset progress to start setCompleted ndi.gui.component.internal.ProgressTracker/setCompleted is a function. setTotalSteps Only allow setting value if TotalSteps is 0. Once TotalSteps updateMessage ndi.gui.component.internal.ProgressTracker/updateMessage is a function. updateProgress Update progress by incrementing the current step","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/ProgressTracker.m/#methods-help","text":"ProgressTracker - Construct a task progress object Documentation for ndi.gui.component.internal.ProgressTracker/ProgressTracker doc ndi.gui.component.internal.ProgressTracker addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.component.internal.progresstracker, matlab.metadata.Property, events Help for ndi.gui.component.internal.ProgressTracker/addlistener is inherited from superclass handle compactRepresentationForColumn - compactRepresentationForColumn Columnar display representation of an object rep = compactRepresentationForColumn(obj, displayConfiguration, width) returns a scalar matlab.display.CompactDisplayRepresentation object describing the compact display representation for the input object obj. This method is called by table to obtain the compact display representation for MATLAB object obj, when the shape constraints require that a column be used. displayConfiguration is a matlab.display.DisplayConfiguration object that describes the current display environment, such as the current numeric display format and whether hyperlinks are enabled. Input argument width is the available width to display the object. The default columnar display representation for an object is dimensions plus class name. Override compactRepresentationForColumn to provide a custom columnar compact display. This function is primarily used when your object is displayed within a MATLAB table. See also ndi.gui.component.internal.ProgressTracker/compactRepresentationForSingleLine Help for ndi.gui.component.internal.ProgressTracker/compactRepresentationForColumn is inherited from superclass matlab.mixin.CustomCompactDisplayProvider delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/ISVALID, CLEAR Help for ndi.gui.component.internal.ProgressTracker/delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/NE Help for ndi.gui.component.internal.ProgressTracker/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER Help for ndi.gui.component.internal.ProgressTracker/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.component.internal.progresstracker, ndi.gui.component.internal.progresstracker/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.component.internal.ProgressTracker/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/NE Help for ndi.gui.component.internal.ProgressTracker/ge is inherited from superclass handle getAsynchTaskProgress - Get a temporary file gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/NE Help for ndi.gui.component.internal.ProgressTracker/gt is inherited from superclass handle isComplete - Check if task is complete isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/DELETE Help for ndi.gui.component.internal.ProgressTracker/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/NE Help for ndi.gui.component.internal.ProgressTracker/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.component.internal.progresstracker, matlab.metadata.Property, events Help for ndi.gui.component.internal.ProgressTracker/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/NE Help for ndi.gui.component.internal.ProgressTracker/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LT Help for ndi.gui.component.internal.ProgressTracker/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/ADDLISTENER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.component.internal.ProgressTracker/notify is inherited from superclass handle reset - Reset graphics object properties This MATLAB function resets all of the properties of the specified graphics object to their default values. Syntax reset(h) Input Arguments h - Graphics objects single object | vector of objects Examples openExample('graphics/ResetAxesAndFigurePropertiesExample') See also get, set, cla, clf, gca, gcf, hold Introduced in MATLAB before R2006a Documentation for reset doc reset resetProgress - Reset progress to start setCompleted - ndi.gui.component.internal.ProgressTracker/setCompleted is a function. setCompleted(obj, message) setTotalSteps - Only allow setting value if TotalSteps is 0. Once TotalSteps is initialized with a value, it should not be settable. The method \"reset\" can be used if the TotalSteps need to be reinitialized. updateMessage - ndi.gui.component.internal.ProgressTracker/updateMessage is a function. updateMessage(obj, newMessage) updateProgress - Update progress by incrementing the current step","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/MessageUpdatedEventData.m/","text":"CLASS ndi.gui.component.internal.event.MessageUpdatedEventData MessageUpdatedEventData Constructor Superclasses event.EventData , handle Properties Property Description Message Message to display Source EventName Methods Method Description MessageUpdatedEventData MessageUpdatedEventData Constructor addlistener addlistener Add listener for event. delete Delete files or objects eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. Methods help MessageUpdatedEventData - MessageUpdatedEventData Constructor Documentation for ndi.gui.component.internal.event.MessageUpdatedEventData/MessageUpdatedEventData doc ndi.gui.component.internal.event.MessageUpdatedEventData addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.component.internal.event.messageupdatedeventdata, matlab.metadata.Property, events Help for ndi.gui.component.internal.event.MessageUpdatedEventData/addlistener is inherited from superclass handle delete - Delete files or objects This MATLAB function deletes filename from disk, without requesting verification. Syntax delete filename delete filename1 ... filenameN delete(filename,ResolveSymbolicLinks=tf) delete(obj) Input Arguments filename - Name of file to delete character vector | string scalar obj - Object single object | array of objects tf - Remove target of symbolic link false or 0 (default) | true or 1 Examples openExample('matlab/DeleteFilesInFolderExample') openExample('matlab/DeleteGraphicsObjectsExample') See also clear, dir, recycle, rmdir, delete Introduced in MATLAB before R2006a Documentation for delete doc delete eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.MessageUpdatedEventData/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA Help for ndi.gui.component.internal.event.MessageUpdatedEventData/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.component.internal.event.messageupdatedeventdata, ndi.gui.component.internal.event.messageupdatedeventdata/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.component.internal.event.MessageUpdatedEventData/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.MessageUpdatedEventData/ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.MessageUpdatedEventData/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/DELETE Help for ndi.gui.component.internal.event.MessageUpdatedEventData/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.MessageUpdatedEventData/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.component.internal.event.messageupdatedeventdata, matlab.metadata.Property, events Help for ndi.gui.component.internal.event.MessageUpdatedEventData/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.MessageUpdatedEventData/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LT Help for ndi.gui.component.internal.event.MessageUpdatedEventData/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/ADDLISTENER, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.component.internal.event.MessageUpdatedEventData/notify is inherited from superclass handle","title":"ndi.gui.component.internal.event.MessageUpdatedEventData"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/MessageUpdatedEventData.m/#class-ndiguicomponentinternaleventmessageupdatedeventdata","text":"MessageUpdatedEventData Constructor","title":"CLASS ndi.gui.component.internal.event.MessageUpdatedEventData"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/MessageUpdatedEventData.m/#superclasses","text":"event.EventData , handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/MessageUpdatedEventData.m/#properties","text":"Property Description Message Message to display Source EventName","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/MessageUpdatedEventData.m/#methods","text":"Method Description MessageUpdatedEventData MessageUpdatedEventData Constructor addlistener addlistener Add listener for event. delete Delete files or objects eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/MessageUpdatedEventData.m/#methods-help","text":"MessageUpdatedEventData - MessageUpdatedEventData Constructor Documentation for ndi.gui.component.internal.event.MessageUpdatedEventData/MessageUpdatedEventData doc ndi.gui.component.internal.event.MessageUpdatedEventData addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.component.internal.event.messageupdatedeventdata, matlab.metadata.Property, events Help for ndi.gui.component.internal.event.MessageUpdatedEventData/addlistener is inherited from superclass handle delete - Delete files or objects This MATLAB function deletes filename from disk, without requesting verification. Syntax delete filename delete filename1 ... filenameN delete(filename,ResolveSymbolicLinks=tf) delete(obj) Input Arguments filename - Name of file to delete character vector | string scalar obj - Object single object | array of objects tf - Remove target of symbolic link false or 0 (default) | true or 1 Examples openExample('matlab/DeleteFilesInFolderExample') openExample('matlab/DeleteGraphicsObjectsExample') See also clear, dir, recycle, rmdir, delete Introduced in MATLAB before R2006a Documentation for delete doc delete eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.MessageUpdatedEventData/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA Help for ndi.gui.component.internal.event.MessageUpdatedEventData/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.component.internal.event.messageupdatedeventdata, ndi.gui.component.internal.event.messageupdatedeventdata/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.component.internal.event.MessageUpdatedEventData/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.MessageUpdatedEventData/ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.MessageUpdatedEventData/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/DELETE Help for ndi.gui.component.internal.event.MessageUpdatedEventData/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.MessageUpdatedEventData/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.component.internal.event.messageupdatedeventdata, matlab.metadata.Property, events Help for ndi.gui.component.internal.event.MessageUpdatedEventData/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.MessageUpdatedEventData/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LT Help for ndi.gui.component.internal.event.MessageUpdatedEventData/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/ADDLISTENER, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.component.internal.event.MessageUpdatedEventData/notify is inherited from superclass handle","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/ProgressUpdatedEventData.m/","text":"CLASS ndi.gui.component.internal.event.ProgressUpdatedEventData ProgressUpdatedEventData Constructor Superclasses event.EventData , handle Properties Property Description ProgressPercentage Percentage of progress CurrentStep Current step TotalSteps Total steps Source EventName Methods Method Description ProgressUpdatedEventData ProgressUpdatedEventData Constructor addlistener addlistener Add listener for event. delete Delete files or objects eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. Methods help ProgressUpdatedEventData - ProgressUpdatedEventData Constructor Documentation for ndi.gui.component.internal.event.ProgressUpdatedEventData/ProgressUpdatedEventData doc ndi.gui.component.internal.event.ProgressUpdatedEventData addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.component.internal.event.progressupdatedeventdata, matlab.metadata.Property, events Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/addlistener is inherited from superclass handle delete - Delete files or objects This MATLAB function deletes filename from disk, without requesting verification. Syntax delete filename delete filename1 ... filenameN delete(filename,ResolveSymbolicLinks=tf) delete(obj) Input Arguments filename - Name of file to delete character vector | string scalar obj - Object single object | array of objects tf - Remove target of symbolic link false or 0 (default) | true or 1 Examples openExample('matlab/DeleteFilesInFolderExample') openExample('matlab/DeleteGraphicsObjectsExample') See also clear, dir, recycle, rmdir, delete Introduced in MATLAB before R2006a Documentation for delete doc delete eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.component.internal.event.progressupdatedeventdata, ndi.gui.component.internal.event.progressupdatedeventdata/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/DELETE Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.component.internal.event.progressupdatedeventdata, matlab.metadata.Property, events Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LT Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/ADDLISTENER, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/notify is inherited from superclass handle","title":"ndi.gui.component.internal.event.ProgressUpdatedEventData"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/ProgressUpdatedEventData.m/#class-ndiguicomponentinternaleventprogressupdatedeventdata","text":"ProgressUpdatedEventData Constructor","title":"CLASS ndi.gui.component.internal.event.ProgressUpdatedEventData"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/ProgressUpdatedEventData.m/#superclasses","text":"event.EventData , handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/ProgressUpdatedEventData.m/#properties","text":"Property Description ProgressPercentage Percentage of progress CurrentStep Current step TotalSteps Total steps Source EventName","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/ProgressUpdatedEventData.m/#methods","text":"Method Description ProgressUpdatedEventData ProgressUpdatedEventData Constructor addlistener addlistener Add listener for event. delete Delete files or objects eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event.","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/ProgressUpdatedEventData.m/#methods-help","text":"ProgressUpdatedEventData - ProgressUpdatedEventData Constructor Documentation for ndi.gui.component.internal.event.ProgressUpdatedEventData/ProgressUpdatedEventData doc ndi.gui.component.internal.event.ProgressUpdatedEventData addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.gui.component.internal.event.progressupdatedeventdata, matlab.metadata.Property, events Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/addlistener is inherited from superclass handle delete - Delete files or objects This MATLAB function deletes filename from disk, without requesting verification. Syntax delete filename delete filename1 ... filenameN delete(filename,ResolveSymbolicLinks=tf) delete(obj) Input Arguments filename - Name of file to delete character vector | string scalar obj - Object single object | array of objects tf - Remove target of symbolic link false or 0 (default) | true or 1 Examples openExample('matlab/DeleteFilesInFolderExample') openExample('matlab/DeleteGraphicsObjectsExample') See also clear, dir, recycle, rmdir, delete Introduced in MATLAB before R2006a Documentation for delete doc delete eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = EQ(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.gui.component.internal.event.progressupdatedeventdata, ndi.gui.component.internal.event.progressupdatedeventdata/findobj, dynamicprops, matlab.metadata.Property Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/DELETE Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.gui.component.internal.event.progressupdatedeventdata, matlab.metadata.Property, events Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/NE Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LT Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/ADDLISTENER, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.gui.component.internal.event.ProgressUpdatedEventData/notify is inherited from superclass handle","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Butility/centerFigure.m/","text":"ndi.gui.utility.centerFigure centerFigure - Center figure window on a reference position Syntax: centerFigure(figureHandle, referencePosition) Input arguments: figureHandle - Handle object for a figure referencePosition - a reference position. If reference position is not give, the current screen size is used. If reference position can also be anotehr figure handle, in which case the Position property of that figure is used.","title":"ndi.gui.utility.centerFigure"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Butility/centerFigure.m/#ndiguiutilitycenterfigure","text":"centerFigure - Center figure window on a reference position Syntax: centerFigure(figureHandle, referencePosition) Input arguments: figureHandle - Handle object for a figure referencePosition - a reference position. If reference position is not give, the current screen size is used. If reference position can also be anotehr figure handle, in which case the Position property of that figure is used.","title":"ndi.gui.utility.centerFigure"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/ctest.m/","text":"CLASS ndi.mock.ctest ndi.mock.ctest - calculator test class, provides methods for testing ndi.calculator objects Superclasses none Properties Property Description base_scope structure with the base scope information for the class Methods Method Description calc_path CALC_PATH return the path to the ndi.calculator object clean_mock_docs remove mock/test documents compare_mock_docs compare an expected calculation answer with an actual answer ctest object that provides methods for testing ndi.calculator objects default_scope default scope types for ndi.mock.ctest object generate_mock_docs generate tests for ndi.calc.* objects load_mock_expected_output load expected NDI document answer for a calculation mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents plot plot a calculation test document test perform a test of an ndi.calculator object write_mock_expected_output write Methods help calc_path - CALC_PATH return the path to the ndi.calculator object P = CALC_PATH(CTEST_OBJ) Return the path of an ndi.calculator object. clean_mock_docs - remove mock/test documents compare_mock_docs - compare an expected calculation answer with an actual answer [B, ERRORMSG] = COMPARE_MOCK_DOCS(CTEST_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE) Given an NDI document with the expected answer to a calculation (EXPECTED_DOC), the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'), this function computes whether the ACTUAL_DOC is within an allowed tolerance of EXPECTED_DOC. B is 1 if the differences in the documents are within the tolerance of the class. Otherwise, B is 0. If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance. In this abstract class, B is always 1 and ERRORMSG is always an empty string. Developer's note: this method should be overridden in each calculator object. ctest - object that provides methods for testing ndi.calculator objects CTEST_OBJ = ndi.mock.ctest() Create an ndi.mock.ctest object. Documentation for ndi.mock.ctest/ctest doc ndi.mock.ctest default_scope - default scope types for ndi.mock.ctest object BASE_SCOPE = ndi.mock.ctest.default_scope(); Return a default base_scope structure for an ndi.mock.ctest object. generate_mock_docs - generate tests for ndi.calc. objects* [DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(CSTEST_OBJ,... SCOPE, NUMBER_OF_TESTS) SCOPE should be one of 'standard', 'low_noise', or 'high_noise'. 'standard' performs tests on specific hard-coded inputs. 'low_noise' performs tests on specific hard-coded inputs with small amounts of noise added. 'high_noise' performs tests on specific hard-coded inputs with large amounts of noise added. NUMBER_OF_TESTS is the number of tests to generate. load_mock_expected_output - load expected NDI document answer for a calculation DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N) Load the Nth stored ndi.document that contains the expected answer for the Nth standard mock test. mock_expected_filename - file of expected NDI document answer for a calculation FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N) Return the filename for the Nth stored ndi.document that contains the expected answer for the Nth standard mock test. mock_path - return the path to the stored mock example output documents MP = MOCK_PATH(CTEST_OBJ) Returns the path to the mock document example outputs. The returned path ends in a file separator. plot - plot a calculation test document H = PLOT(CTEST_OBJ, DOCUMENT) Plot the ndi.document DOCUMENT in the current axes. In the abstract class, nothing is done. test - perform a test of an ndi.calculator object [B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN) Perform tests of the calculator for a certain SCOPE. B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons of the expected output of test i and actual output of test j are equal. Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should be 0, although results might be close enough for some comparisons to be equal even if there are no errors. If test indices are specified, B becomes a numel(specific_test_inds) x numel(specific_test_inds) array. ERRORMSG{i,j} is any error message given if the comparison between the expected outcome of test i and the actual outcome of test j. B_EXPECTED is the result of the comparisons between the expected outcome of test i and the expected outcome of test j. Some tests might have the same expected outcome, which can be useful for interpreting the results in B. SCOPE should be one of 'standard', 'low_noise', or 'high_noise'. 'standard' performs tests on specific hard-coded inputs. 'low_noise' performs tests on specific hard-coded inputs with small amounts of noise added. 'high_noise' performs tests on specific hard-coded inputs with large amounts of noise added. NUMBER_OF_TESTS indicates the number of tests to perform. PLOT_IT indicates (0/1) whether or not the results should be plotted. This function's behavior can be modified by name/value pairs. -------------------------------------------------------------------------------- | Parameter (default): | Description: | |--------------------------|---------------------------------------------------| | specific_test_inds([]) | Should we specify which tests to run? | |--------------------------|---------------------------------------------------| Step 1: generate_mock_docs write_mock_expected_output - write B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC) Set the expected mock document for mock calculation NUMBER to be the ndi.document DOC. This function will not overwrite an existing expected mock document. It must be deleted manually to ensure programmer really wants to overwrite it.","title":"ndi.mock.ctest"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/ctest.m/#class-ndimockctest","text":"ndi.mock.ctest - calculator test class, provides methods for testing ndi.calculator objects","title":"CLASS ndi.mock.ctest"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/ctest.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/ctest.m/#properties","text":"Property Description base_scope structure with the base scope information for the class","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/ctest.m/#methods","text":"Method Description calc_path CALC_PATH return the path to the ndi.calculator object clean_mock_docs remove mock/test documents compare_mock_docs compare an expected calculation answer with an actual answer ctest object that provides methods for testing ndi.calculator objects default_scope default scope types for ndi.mock.ctest object generate_mock_docs generate tests for ndi.calc.* objects load_mock_expected_output load expected NDI document answer for a calculation mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents plot plot a calculation test document test perform a test of an ndi.calculator object write_mock_expected_output write","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/ctest.m/#methods-help","text":"calc_path - CALC_PATH return the path to the ndi.calculator object P = CALC_PATH(CTEST_OBJ) Return the path of an ndi.calculator object. clean_mock_docs - remove mock/test documents compare_mock_docs - compare an expected calculation answer with an actual answer [B, ERRORMSG] = COMPARE_MOCK_DOCS(CTEST_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE) Given an NDI document with the expected answer to a calculation (EXPECTED_DOC), the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'), this function computes whether the ACTUAL_DOC is within an allowed tolerance of EXPECTED_DOC. B is 1 if the differences in the documents are within the tolerance of the class. Otherwise, B is 0. If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance. In this abstract class, B is always 1 and ERRORMSG is always an empty string. Developer's note: this method should be overridden in each calculator object. ctest - object that provides methods for testing ndi.calculator objects CTEST_OBJ = ndi.mock.ctest() Create an ndi.mock.ctest object. Documentation for ndi.mock.ctest/ctest doc ndi.mock.ctest default_scope - default scope types for ndi.mock.ctest object BASE_SCOPE = ndi.mock.ctest.default_scope(); Return a default base_scope structure for an ndi.mock.ctest object. generate_mock_docs - generate tests for ndi.calc. objects* [DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(CSTEST_OBJ,... SCOPE, NUMBER_OF_TESTS) SCOPE should be one of 'standard', 'low_noise', or 'high_noise'. 'standard' performs tests on specific hard-coded inputs. 'low_noise' performs tests on specific hard-coded inputs with small amounts of noise added. 'high_noise' performs tests on specific hard-coded inputs with large amounts of noise added. NUMBER_OF_TESTS is the number of tests to generate. load_mock_expected_output - load expected NDI document answer for a calculation DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N) Load the Nth stored ndi.document that contains the expected answer for the Nth standard mock test. mock_expected_filename - file of expected NDI document answer for a calculation FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N) Return the filename for the Nth stored ndi.document that contains the expected answer for the Nth standard mock test. mock_path - return the path to the stored mock example output documents MP = MOCK_PATH(CTEST_OBJ) Returns the path to the mock document example outputs. The returned path ends in a file separator. plot - plot a calculation test document H = PLOT(CTEST_OBJ, DOCUMENT) Plot the ndi.document DOCUMENT in the current axes. In the abstract class, nothing is done. test - perform a test of an ndi.calculator object [B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN) Perform tests of the calculator for a certain SCOPE. B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons of the expected output of test i and actual output of test j are equal. Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should be 0, although results might be close enough for some comparisons to be equal even if there are no errors. If test indices are specified, B becomes a numel(specific_test_inds) x numel(specific_test_inds) array. ERRORMSG{i,j} is any error message given if the comparison between the expected outcome of test i and the actual outcome of test j. B_EXPECTED is the result of the comparisons between the expected outcome of test i and the expected outcome of test j. Some tests might have the same expected outcome, which can be useful for interpreting the results in B. SCOPE should be one of 'standard', 'low_noise', or 'high_noise'. 'standard' performs tests on specific hard-coded inputs. 'low_noise' performs tests on specific hard-coded inputs with small amounts of noise added. 'high_noise' performs tests on specific hard-coded inputs with large amounts of noise added. NUMBER_OF_TESTS indicates the number of tests to perform. PLOT_IT indicates (0/1) whether or not the results should be plotted. This function's behavior can be modified by name/value pairs. -------------------------------------------------------------------------------- | Parameter (default): | Description: | |--------------------------|---------------------------------------------------| | specific_test_inds([]) | Should we specify which tests to run? | |--------------------------|---------------------------------------------------| Step 1: generate_mock_docs write_mock_expected_output - write B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC) Set the expected mock document for mock calculation NUMBER to be the ndi.document DOC. This function will not overwrite an existing expected mock document. It must be deleted manually to ensure programmer really wants to overwrite it.","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/%2Bfun/clear.m/","text":"ndi.mock.fun.clear CLEAR - clear mock documents from an ndi.session ndi.mock.fun.clear(S) Removes all mock database documents from an ndi.session. Removes all mock subjects, which should remove all mock probes or elements based on those subjects and analyses of those probes.","title":"ndi.mock.fun.clear"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/%2Bfun/clear.m/#ndimockfunclear","text":"CLEAR - clear mock documents from an ndi.session ndi.mock.fun.clear(S) Removes all mock database documents from an ndi.session. Removes all mock subjects, which should remove all mock probes or elements based on those subjects and analyses of those probes.","title":"ndi.mock.fun.clear"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/%2Bfun/stimulus_presentation.m/","text":"ndi.mock.fun.stimulus_presentation ndi.mock.fun.stimulus_presentation - make a mock stimulus presentation document base [STIM_PRES_DOC,SPIKETIMES] = ndi.mock.fun.stimulus_presentation(S, stimulus_element_id, parameter_struct_array, ... independent_variables, X, R, noise, reps, ...) Create a mock stimulus presentation document and spike times that approximate the responses R as closely as possible (within the stimulus duration bounds). If necessary, the time of each stimulus presentation is adjusted to allow a more accurate representation of the requested firing rate. S is the NDI session that the stimulator is a part of STIMULUS_ELEMENT_ID is the id of a mock stimulator element. PARAMETER_STRUCT should be a structure that has the base parameters that are common to all of the stimuli in the group. INDEPENDENT_VARIABLES is a cell array of strings that are the names of the parameters that vary in the list of stimuli. X is a vector of the values of the INDEPENDENT_VARIABLES. Each column should have the value for each entry in INDEPENDENT_VARIABLES. NaN can be used to indicate control stimuli (aka blank stimuli). R is a vector of the responses to each stimulus. It should have the same number of rows as X. NOISE is a scalar that indicates how much noise with mean 0 and standard deviation equal to the value of R should be added to the stimulus response on each trial. 0 indicates no noise should be added, 1 indicates that the standard deviation of the noise to be added should be 1 * the value of the response, etc. REPS is the number of times to repeat each stimulus. This function takes additional arguments as NAME/VALUE pairs: |------------------------------------|---------------------------------------------------------| | Parameter (default) | Description | |------------------------------------|---------------------------------------------------------| | stim_duration (2) | Duration of each mock stimulus | | stim_duration_min (0.2) | Minimum duration of a mock stimulus presentation | | | (set so that firing rate can be matched) | | interstimulus_interval(3) | Interstimulus interval | | epochid ('mockepoch') | The name of the stimulator epoch that is created. | |------------------------------------|---------------------------------------------------------| Example: stimulator_id = '12345'; % just for the example param_struct = struct('spatial_frequency',0.5); independent_variable = {'contrast'}; X = [ 0 ; 0.5 ; 1]; R = [ 0 ; 2 ; 4]; % spikes/sec noise = 0; reps = 1; stim_pres_doc = ndi.mock.fun.stimulus_presentation(stimulator_id,param_struct,independent_variable,X,R,noise,reps); disp(['Displaying stimulus parameters']); for i=1:size(X,1), stim_pres_doc.document_properties.stimulus_presentation.stimuli(i).parameters, end;","title":"ndi.mock.fun.stimulus_presentation"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/%2Bfun/stimulus_presentation.m/#ndimockfunstimulus_presentation","text":"ndi.mock.fun.stimulus_presentation - make a mock stimulus presentation document base [STIM_PRES_DOC,SPIKETIMES] = ndi.mock.fun.stimulus_presentation(S, stimulus_element_id, parameter_struct_array, ... independent_variables, X, R, noise, reps, ...) Create a mock stimulus presentation document and spike times that approximate the responses R as closely as possible (within the stimulus duration bounds). If necessary, the time of each stimulus presentation is adjusted to allow a more accurate representation of the requested firing rate. S is the NDI session that the stimulator is a part of STIMULUS_ELEMENT_ID is the id of a mock stimulator element. PARAMETER_STRUCT should be a structure that has the base parameters that are common to all of the stimuli in the group. INDEPENDENT_VARIABLES is a cell array of strings that are the names of the parameters that vary in the list of stimuli. X is a vector of the values of the INDEPENDENT_VARIABLES. Each column should have the value for each entry in INDEPENDENT_VARIABLES. NaN can be used to indicate control stimuli (aka blank stimuli). R is a vector of the responses to each stimulus. It should have the same number of rows as X. NOISE is a scalar that indicates how much noise with mean 0 and standard deviation equal to the value of R should be added to the stimulus response on each trial. 0 indicates no noise should be added, 1 indicates that the standard deviation of the noise to be added should be 1 * the value of the response, etc. REPS is the number of times to repeat each stimulus. This function takes additional arguments as NAME/VALUE pairs: |------------------------------------|---------------------------------------------------------| | Parameter (default) | Description | |------------------------------------|---------------------------------------------------------| | stim_duration (2) | Duration of each mock stimulus | | stim_duration_min (0.2) | Minimum duration of a mock stimulus presentation | | | (set so that firing rate can be matched) | | interstimulus_interval(3) | Interstimulus interval | | epochid ('mockepoch') | The name of the stimulator epoch that is created. | |------------------------------------|---------------------------------------------------------| Example: stimulator_id = '12345'; % just for the example param_struct = struct('spatial_frequency',0.5); independent_variable = {'contrast'}; X = [ 0 ; 0.5 ; 1]; R = [ 0 ; 2 ; 4]; % spikes/sec noise = 0; reps = 1; stim_pres_doc = ndi.mock.fun.stimulus_presentation(stimulator_id,param_struct,independent_variable,X,R,noise,reps); disp(['Displaying stimulus parameters']); for i=1:size(X,1), stim_pres_doc.document_properties.stimulus_presentation.stimuli(i).parameters, end;","title":"ndi.mock.fun.stimulus_presentation"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/%2Bfun/stimulus_response.m/","text":"ndi.mock.fun.stimulus_response ndi.mock.fun.stimulus_response- make a set of mock documents to simulate a stimulus and spiking response [DOCS] = ndi.mock.fun.stimulus_presentation(ndi_session_obj, parameter_struct, ... independent_variables, X, R, noise, reps, ...) Create a mock subject, mock stimulator, mock neuron with response, and mock stimulus presentation document that approximates the responses R responses R as closely as possible (within the stimulus duration bounds). If necessary, the time of each stimulus presentation is adjusted to allow a more accurate representation of the requested firing rate. PARAMETER_STRUCT should be a structure that has the base parameters that are common to all of the stimuli in the group. INDEPENDENT_VARIABLES is a cell array of strings that are the names of the parameters that vary in the list of stimuli. X is a vector of the values of the INDEPENDENT_VARIABLES. Each column should have the value for each entry in INDEPENDENT_VARIABLES. NaN can be used to indicate control stimuli (aka blank stimuli). R is a vector of the responses to each stimulus. It should have the same number of rows as X. NOISE is a scalar that indicates how much noise with mean 0 and standard deviation equal to the value of R should be added to the stimulus response on each trial. 0 indicates no noise should be added, 1 indicates that the standard deviation of the noise to be added should be 1 * the value of the response, etc. REPS is the number of times to repeat each stimulus. This function takes additional arguments as NAME/VALUE pairs: |------------------------------------|---------------------------------------------------------| | Parameter (default) | Description | |------------------------------------|---------------------------------------------------------| | stim_duration (2) | Duration of each mock stimulus | | stim_duration_min (0.2) | Minimum duration of a mock stimulus presentation | | | (set so that firing rate can be matched) | | interstimulus_interval(3) | Interstimulus interval | |------------------------------------|---------------------------------------------------------| Example: % if S is an ndi.session object param_struct = struct('spatial_frequency',0.5); independent_variable = {'contrast'}; X = [ 0 ; 0.5 ; 1]; R = [ 0 ; 2 ; 4]; % spikes/sec noise = 0; reps = 1; docs = ndi.mock.fun.stimulus_response(S,param_struct, independent_variable, X, R, noise, reps);","title":"ndi.mock.fun.stimulus_response"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/%2Bfun/stimulus_response.m/#ndimockfunstimulus_response","text":"ndi.mock.fun.stimulus_response- make a set of mock documents to simulate a stimulus and spiking response [DOCS] = ndi.mock.fun.stimulus_presentation(ndi_session_obj, parameter_struct, ... independent_variables, X, R, noise, reps, ...) Create a mock subject, mock stimulator, mock neuron with response, and mock stimulus presentation document that approximates the responses R responses R as closely as possible (within the stimulus duration bounds). If necessary, the time of each stimulus presentation is adjusted to allow a more accurate representation of the requested firing rate. PARAMETER_STRUCT should be a structure that has the base parameters that are common to all of the stimuli in the group. INDEPENDENT_VARIABLES is a cell array of strings that are the names of the parameters that vary in the list of stimuli. X is a vector of the values of the INDEPENDENT_VARIABLES. Each column should have the value for each entry in INDEPENDENT_VARIABLES. NaN can be used to indicate control stimuli (aka blank stimuli). R is a vector of the responses to each stimulus. It should have the same number of rows as X. NOISE is a scalar that indicates how much noise with mean 0 and standard deviation equal to the value of R should be added to the stimulus response on each trial. 0 indicates no noise should be added, 1 indicates that the standard deviation of the noise to be added should be 1 * the value of the response, etc. REPS is the number of times to repeat each stimulus. This function takes additional arguments as NAME/VALUE pairs: |------------------------------------|---------------------------------------------------------| | Parameter (default) | Description | |------------------------------------|---------------------------------------------------------| | stim_duration (2) | Duration of each mock stimulus | | stim_duration_min (0.2) | Minimum duration of a mock stimulus presentation | | | (set so that firing rate can be matched) | | interstimulus_interval(3) | Interstimulus interval | |------------------------------------|---------------------------------------------------------| Example: % if S is an ndi.session object param_struct = struct('spatial_frequency',0.5); independent_variable = {'contrast'}; X = [ 0 ; 0.5 ; 1]; R = [ 0 ; 2 ; 4]; % spikes/sec noise = 0; reps = 1; docs = ndi.mock.fun.stimulus_response(S,param_struct, independent_variable, X, R, noise, reps);","title":"ndi.mock.fun.stimulus_response"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/%2Bfun/subject_stimulator_neuron.m/","text":"ndi.mock.fun.subject_stimulator_neuron ndi.mock.fun.subject_stimulator_neuron - create a mock subject, stimulator, and neuron set OUTPUT = ndi.mock.fun.subject_stimulator_neuron(NDI_SESSION_OBJ) Creates a mock subject, a mock stimulator, a mock stimulus presentation, and mock spiking neuron with responses as specified. OUTPUT is a structure with fields discussed below. OUTPUT.refNum: a random reference number, used in the name and reference of the mock subject and the mock stimulator and mock spike object. OUTPUT.mock_subject: Attempts to find or create a mock subject called 'mockREFNUM@nosuchlab.org'. An NDI_document is returned in field mock_subject. OUTPUT.mock_stimulator: Attempts to find or create a stimulator with name 'mock stimulator' and pseudorandom reference. An NDI_document is returned in field mock_stimulator. OUTPUT.mock_spikes: Mock spiking neuron NDI_document (of type (ndi.element.timeseries with name 'mock spikes', a pseduorandom reference, type 'spikes')","title":"ndi.mock.fun.subject_stimulator_neuron"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/%2Bfun/subject_stimulator_neuron.m/#ndimockfunsubject_stimulator_neuron","text":"ndi.mock.fun.subject_stimulator_neuron - create a mock subject, stimulator, and neuron set OUTPUT = ndi.mock.fun.subject_stimulator_neuron(NDI_SESSION_OBJ) Creates a mock subject, a mock stimulator, a mock stimulus presentation, and mock spiking neuron with responses as specified. OUTPUT is a structure with fields discussed below. OUTPUT.refNum: a random reference number, used in the name and reference of the mock subject and the mock stimulator and mock spike object. OUTPUT.mock_subject: Attempts to find or create a mock subject called 'mockREFNUM@nosuchlab.org'. An NDI_document is returned in field mock_subject. OUTPUT.mock_stimulator: Attempts to find or create a stimulator with name 'mock stimulator' and pseudorandom reference. An NDI_document is returned in field mock_stimulator. OUTPUT.mock_spikes: Mock spiking neuron NDI_document (of type (ndi.element.timeseries with name 'mock spikes', a pseduorandom reference, type 'spikes')","title":"ndi.mock.fun.subject_stimulator_neuron"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/timeseries.m/","text":"CLASS ndi.probe.timeseries ndi.probe.timeseries - Create a new ndi.probe.timeseries class object Superclasses ndi.probe , ndi.element , ndi.ido , did.ido , ndi.epoch.epochset , ndi.documentservice , matlab.mixin.Heterogeneous , ndi.time.timeseries Properties Property Description session name type reference underlying_element direct subject_id dependencies identifier Methods Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version newdocument need docs here numepochs Number of epochs of ndi.epoch.epochset probestring Produce a human-readable probe string readtimeseries read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery need docs here t0_t1 times2samples convert from the timeseries time to sample numbers timeseries create a new ndi.probe.timeseries object underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method) Methods help addepoch - add an epoch to the ndi.element [NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, [ADD_TO_DB]) Registers the data for an epoch with the NDI_ELEMENT_OBJ. Inputs: NDI_ELEMENT_OBJ: The ndi.element object to modify EPOCHID: The name of the epoch to add; should match the name of an epoch from the probe EPOCHCLOCK: The epoch clock; must be a single clock type that matches one of the clock types of the probe T0_T1: The starting time and ending time of the existence of information about the ELEMENT on the probe, in units of the epock clock ADD_TO_DB: 0/1 Should we actually add the epoch document to the database? Default 0. Help for ndi.probe.timeseries/addepoch is inherited from superclass ndi.element buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.probe.timeseries/EPOCHNODES Help for ndi.probe.timeseries/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - build the epoch table for an ndi.probe. * ET = BUILDEPOCHTABLE(NDI_PROBE_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch (may change) 'epoch_id' | The epoch ID code (will never change once established) | This uniquely specifies the epoch. 'epoch_session_id' | The ID of the session 'epochprobemap' | The epochprobemap object from each epoch 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', and 'epoch_id' Help for ndi.probe.timeseries/buildepochtable is inherited from superclass ndi.probe cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.probe.timeseries.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.probe.timeseries/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.probe.timeseries/cached_epochtable is inherited from superclass ndi.epoch.epochset doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then empty is returned. Help for ndi.probe.timeseries/doc_unique_id is inherited from superclass ndi.element elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ) Returns the name as a human-readable string. For ndi.element objects, this is the string 'element: ' followed by its name Help for ndi.probe.timeseries/elementstring is inherited from superclass ndi.element epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.probe.timeseries/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_PROBE_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch. The ndi.probe class always returns the clock type(s) of the device it is based on Help for ndi.probe.timeseries/epochclock is inherited from superclass ndi.probe epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.probe.timeseries/epochgraph is inherited from superclass ndi.epoch.epochset epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string. The abstract class just queries the EPOCHTABLE. Most classes that manage epochs themselves (ndi.file.navigator, ndi.daq.system) will override this method. Help for ndi.probe.timeseries/epochid is inherited from superclass ndi.epoch.epochset epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.probe.timeseries/epochnodes is inherited from superclass ndi.epoch.epochset epochprobemapmatch - does an epochprobemap record match our probe? B = EPOCHPROBEMAPMATCH(NDI_PROBE_OBJ, EPOCHPROBEMAP) Returns 1 if the ndi.epoch.epochprobemap object EPOCHPROBEMAP is a match for the NDI_PROBE_OBJ probe and 0 otherwise. Help for ndi.probe.timeseries/epochprobemapmatch is inherited from superclass ndi.probe epochsetname - the name of the ndi.probe. object, for EPOCHNODES* NAME = EPOCHSETNAME(NDI_PROBE_OBJ) Returns the object name that is used when creating epoch nodes. For ndi.probe objects, this is the string 'probe: ' followed by PROBESTRING(NDI_PROBE_OBJ). Help for ndi.probe.timeseries/epochsetname is inherited from superclass ndi.probe epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.probe.timeseries/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.probe.timeseries/epochtableentry is inherited from superclass ndi.epoch.epochset eq - are 2 ndi.probe objects equal? Returns 1 if the objects share an object class, session, and probe string. Help for ndi.probe.timeseries/eq is inherited from superclass ndi.probe getcache - return the NDI_CACHE and key for ndi.element [CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ) Returns the CACHE and KEY for the ndi.element object. The CACHE is returned from the associated session. The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT. See also: ndi.file.navigator Help for ndi.probe.timeseries/getcache is inherited from superclass ndi.element getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe. * [DEV, DEVNAME, DEVEPOCH, CHANNELTYPE, CHANNELLIST] = GETCHANNELDEVINFO(NDI_PROBE_OBJ, EPOCH_NUMBER_OR_ID) Given an ndi.probe.* object and an EPOCH number, this function returns the corresponding channel and device info. Suppose there are C channels corresponding to a probe. Then the outputs are DEV is a 1xC cell array of ndi.daq.system objects for each channel DEVNAME is a 1xC cell array of the names of each device in DEV DEVEPOCH is a 1xC array with the epoch id of the probe's EPOCH on each device CHANNELTYPE is a cell array of the type of each channel CHANNELLIST is the channel number of each channel. Help for ndi.probe.timeseries/getchanneldevinfo is inherited from superclass ndi.probe getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.probe.timeseries/getepocharray is inherited from superclass ndi.epoch.epochset ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.probe.timeseries.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then an error is returned. Help for ndi.probe.timeseries/id is inherited from superclass ndi.element issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset and ndi.probe.* this returns 0 so that the underlying ndi.daq.system epochs are added. Help for ndi.probe.timeseries/issyncgraphroot is inherited from superclass ndi.probe isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.probe.timeseries.isvalid is inherited from superclass did.ido load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ) Loads the ndi.document that is based on the ndi.element object and any associated epoch documents. Help for ndi.probe.timeseries/load_all_element_docs is inherited from superclass ndi.element load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ) Load an ndi.document that is based on the ndi.element object. Returns empty if there is no such document. Help for ndi.probe.timeseries/load_element_doc is inherited from superclass ndi.element loadaddedepochs - load the added epochs from an ndi.element [ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ) Load the EPOCHTABLE that consists of added/registered epochs that provide information about the ndi.element. Help for ndi.probe.timeseries/loadaddedepochs is inherited from superclass ndi.element matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.probe.timeseries/matchedepochtable is inherited from superclass ndi.epoch.epochset newdocument - need docs here numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.probe.timeseries/numepochs is inherited from superclass ndi.epoch.epochset probestring - Produce a human-readable probe string PROBESTR = PROBESTRING(NDI_PROBE_OBJ) Returns the name and reference of a probe as a human-readable string. This is simply PROBESTR = [NDI_PROBE_OBJ.name ' _ ' in2str(NDI_PROBE_OBJ.reference)] Help for ndi.probe.timeseries/probestring is inherited from superclass ndi.probe readtimeseries - read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch [DATA, T, TIMEREF] = READTIMESERIES(NDI_PROBE_TIMESERIES_OBJ, TIMEREF_OR_EPOCH, T0, T1) Reads timeseries data from an ndi.probe.timeseries object. The DATA and time information T that are returned depend on the the specific subclass of ndi.probe.timeseries that is called (see READTIMESERIESEPOCH). TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the time reference for T0, T1, or it can be a single number, which will indicate the data are to be read from that epoch. DATA is the data for the probe. T is a time structure, in units of TIMEREF if it is an ndi.time.timereference object or in units of the epoch if an epoch is passed. The TIMEREF is returned. resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.probe.timeseries/EPOCHTABLE Help for ndi.probe.timeseries/resetepochtable is inherited from superclass ndi.epoch.epochset samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLERATE(NDI_TIMESERIES_OBJ, EPOCH) Returns the sampling rate of a given ndi.time.timeseries object for the epoch EPOCH. EPOCH can be specified as an index or EPOCH_ID. If NDI_TIMESERIES_OBJ is not regularly sampled, then -1 is returned. Help for ndi.probe.timeseries/samplerate is inherited from superclass ndi.time.timeseries samples2times - convert from the timeseries time to sample numbers SAMPLES = SAMPLES2TIMES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. TODO: convert times to dev_local_clock Help for ndi.probe.timeseries/samples2times is inherited from superclass ndi.time.timeseries searchquery - need docs here t0_t1 - ** T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK TODO: this must be a bug, it's just self-referential Help for ndi.probe.timeseries/t0_t1 is inherited from superclass ndi.element times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. Help for ndi.probe.timeseries/times2samples is inherited from superclass ndi.time.timeseries timeseries - create a new ndi.probe.timeseries object OBJ = ndi.probe.timeseries(SESSION, NAME, REFERENCE, TYPE) Creates an ndi.probe associated with an ndi.session object SESSION and with name NAME (a string that must start with a letter and contain no white space), reference number equal to REFERENCE (a non-negative integer), the TYPE of the probe (a string that must start with a letter and contain no white space). ndi.probe.timeseries is an abstract class, and a specific implementation must be called. Documentation for ndi.probe.timeseries/timeseries doc ndi.probe.timeseries underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.probe.timeseries/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.probe.timeseries.unique_id is inherited from superclass did.ido","title":"ndi.probe.timeseries"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/timeseries.m/#class-ndiprobetimeseries","text":"ndi.probe.timeseries - Create a new ndi.probe.timeseries class object","title":"CLASS ndi.probe.timeseries"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/timeseries.m/#superclasses","text":"ndi.probe , ndi.element , ndi.ido , did.ido , ndi.epoch.epochset , ndi.documentservice , matlab.mixin.Heterogeneous , ndi.time.timeseries","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/timeseries.m/#properties","text":"Property Description session name type reference underlying_element direct subject_id dependencies identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/timeseries.m/#methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version newdocument need docs here numepochs Number of epochs of ndi.epoch.epochset probestring Produce a human-readable probe string readtimeseries read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery need docs here t0_t1 times2samples convert from the timeseries time to sample numbers timeseries create a new ndi.probe.timeseries object underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method)","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/timeseries.m/#methods-help","text":"addepoch - add an epoch to the ndi.element [NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, [ADD_TO_DB]) Registers the data for an epoch with the NDI_ELEMENT_OBJ. Inputs: NDI_ELEMENT_OBJ: The ndi.element object to modify EPOCHID: The name of the epoch to add; should match the name of an epoch from the probe EPOCHCLOCK: The epoch clock; must be a single clock type that matches one of the clock types of the probe T0_T1: The starting time and ending time of the existence of information about the ELEMENT on the probe, in units of the epock clock ADD_TO_DB: 0/1 Should we actually add the epoch document to the database? Default 0. Help for ndi.probe.timeseries/addepoch is inherited from superclass ndi.element buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.probe.timeseries/EPOCHNODES Help for ndi.probe.timeseries/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - build the epoch table for an ndi.probe. * ET = BUILDEPOCHTABLE(NDI_PROBE_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch (may change) 'epoch_id' | The epoch ID code (will never change once established) | This uniquely specifies the epoch. 'epoch_session_id' | The ID of the session 'epochprobemap' | The epochprobemap object from each epoch 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', and 'epoch_id' Help for ndi.probe.timeseries/buildepochtable is inherited from superclass ndi.probe cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.probe.timeseries.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.probe.timeseries/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.probe.timeseries/cached_epochtable is inherited from superclass ndi.epoch.epochset doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then empty is returned. Help for ndi.probe.timeseries/doc_unique_id is inherited from superclass ndi.element elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ) Returns the name as a human-readable string. For ndi.element objects, this is the string 'element: ' followed by its name Help for ndi.probe.timeseries/elementstring is inherited from superclass ndi.element epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.probe.timeseries/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_PROBE_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch. The ndi.probe class always returns the clock type(s) of the device it is based on Help for ndi.probe.timeseries/epochclock is inherited from superclass ndi.probe epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.probe.timeseries/epochgraph is inherited from superclass ndi.epoch.epochset epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string. The abstract class just queries the EPOCHTABLE. Most classes that manage epochs themselves (ndi.file.navigator, ndi.daq.system) will override this method. Help for ndi.probe.timeseries/epochid is inherited from superclass ndi.epoch.epochset epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.probe.timeseries/epochnodes is inherited from superclass ndi.epoch.epochset epochprobemapmatch - does an epochprobemap record match our probe? B = EPOCHPROBEMAPMATCH(NDI_PROBE_OBJ, EPOCHPROBEMAP) Returns 1 if the ndi.epoch.epochprobemap object EPOCHPROBEMAP is a match for the NDI_PROBE_OBJ probe and 0 otherwise. Help for ndi.probe.timeseries/epochprobemapmatch is inherited from superclass ndi.probe epochsetname - the name of the ndi.probe. object, for EPOCHNODES* NAME = EPOCHSETNAME(NDI_PROBE_OBJ) Returns the object name that is used when creating epoch nodes. For ndi.probe objects, this is the string 'probe: ' followed by PROBESTRING(NDI_PROBE_OBJ). Help for ndi.probe.timeseries/epochsetname is inherited from superclass ndi.probe epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.probe.timeseries/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.probe.timeseries/epochtableentry is inherited from superclass ndi.epoch.epochset eq - are 2 ndi.probe objects equal? Returns 1 if the objects share an object class, session, and probe string. Help for ndi.probe.timeseries/eq is inherited from superclass ndi.probe getcache - return the NDI_CACHE and key for ndi.element [CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ) Returns the CACHE and KEY for the ndi.element object. The CACHE is returned from the associated session. The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT. See also: ndi.file.navigator Help for ndi.probe.timeseries/getcache is inherited from superclass ndi.element getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe. * [DEV, DEVNAME, DEVEPOCH, CHANNELTYPE, CHANNELLIST] = GETCHANNELDEVINFO(NDI_PROBE_OBJ, EPOCH_NUMBER_OR_ID) Given an ndi.probe.* object and an EPOCH number, this function returns the corresponding channel and device info. Suppose there are C channels corresponding to a probe. Then the outputs are DEV is a 1xC cell array of ndi.daq.system objects for each channel DEVNAME is a 1xC cell array of the names of each device in DEV DEVEPOCH is a 1xC array with the epoch id of the probe's EPOCH on each device CHANNELTYPE is a cell array of the type of each channel CHANNELLIST is the channel number of each channel. Help for ndi.probe.timeseries/getchanneldevinfo is inherited from superclass ndi.probe getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.probe.timeseries/getepocharray is inherited from superclass ndi.epoch.epochset ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.probe.timeseries.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then an error is returned. Help for ndi.probe.timeseries/id is inherited from superclass ndi.element issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset and ndi.probe.* this returns 0 so that the underlying ndi.daq.system epochs are added. Help for ndi.probe.timeseries/issyncgraphroot is inherited from superclass ndi.probe isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.probe.timeseries.isvalid is inherited from superclass did.ido load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ) Loads the ndi.document that is based on the ndi.element object and any associated epoch documents. Help for ndi.probe.timeseries/load_all_element_docs is inherited from superclass ndi.element load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ) Load an ndi.document that is based on the ndi.element object. Returns empty if there is no such document. Help for ndi.probe.timeseries/load_element_doc is inherited from superclass ndi.element loadaddedepochs - load the added epochs from an ndi.element [ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ) Load the EPOCHTABLE that consists of added/registered epochs that provide information about the ndi.element. Help for ndi.probe.timeseries/loadaddedepochs is inherited from superclass ndi.element matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.probe.timeseries/matchedepochtable is inherited from superclass ndi.epoch.epochset newdocument - need docs here numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.probe.timeseries/numepochs is inherited from superclass ndi.epoch.epochset probestring - Produce a human-readable probe string PROBESTR = PROBESTRING(NDI_PROBE_OBJ) Returns the name and reference of a probe as a human-readable string. This is simply PROBESTR = [NDI_PROBE_OBJ.name ' _ ' in2str(NDI_PROBE_OBJ.reference)] Help for ndi.probe.timeseries/probestring is inherited from superclass ndi.probe readtimeseries - read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch [DATA, T, TIMEREF] = READTIMESERIES(NDI_PROBE_TIMESERIES_OBJ, TIMEREF_OR_EPOCH, T0, T1) Reads timeseries data from an ndi.probe.timeseries object. The DATA and time information T that are returned depend on the the specific subclass of ndi.probe.timeseries that is called (see READTIMESERIESEPOCH). TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the time reference for T0, T1, or it can be a single number, which will indicate the data are to be read from that epoch. DATA is the data for the probe. T is a time structure, in units of TIMEREF if it is an ndi.time.timereference object or in units of the epoch if an epoch is passed. The TIMEREF is returned. resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.probe.timeseries/EPOCHTABLE Help for ndi.probe.timeseries/resetepochtable is inherited from superclass ndi.epoch.epochset samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLERATE(NDI_TIMESERIES_OBJ, EPOCH) Returns the sampling rate of a given ndi.time.timeseries object for the epoch EPOCH. EPOCH can be specified as an index or EPOCH_ID. If NDI_TIMESERIES_OBJ is not regularly sampled, then -1 is returned. Help for ndi.probe.timeseries/samplerate is inherited from superclass ndi.time.timeseries samples2times - convert from the timeseries time to sample numbers SAMPLES = SAMPLES2TIMES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. TODO: convert times to dev_local_clock Help for ndi.probe.timeseries/samples2times is inherited from superclass ndi.time.timeseries searchquery - need docs here t0_t1 - ** T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK TODO: this must be a bug, it's just self-referential Help for ndi.probe.timeseries/t0_t1 is inherited from superclass ndi.element times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. Help for ndi.probe.timeseries/times2samples is inherited from superclass ndi.time.timeseries timeseries - create a new ndi.probe.timeseries object OBJ = ndi.probe.timeseries(SESSION, NAME, REFERENCE, TYPE) Creates an ndi.probe associated with an ndi.session object SESSION and with name NAME (a string that must start with a letter and contain no white space), reference number equal to REFERENCE (a non-negative integer), the TYPE of the probe (a string that must start with a letter and contain no white space). ndi.probe.timeseries is an abstract class, and a specific implementation must be called. Documentation for ndi.probe.timeseries/timeseries doc ndi.probe.timeseries underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.probe.timeseries/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.probe.timeseries.unique_id is inherited from superclass did.ido","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Bfun/getProbeTypeMap.m/","text":"ndi.probe.fun.getProbeTypeMap ndi.probe.fun.getProbeTypeMap is a function. probeTypeMap = ndi.probe.fun.getProbeTypeMap","title":"ndi.probe.fun.getProbeTypeMap"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Bfun/getProbeTypeMap.m/#ndiprobefungetprobetypemap","text":"ndi.probe.fun.getProbeTypeMap is a function. probeTypeMap = ndi.probe.fun.getProbeTypeMap","title":"ndi.probe.fun.getProbeTypeMap"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Bfun/initProbeTypeMap.m/","text":"ndi.probe.fun.initProbeTypeMap ndi.probe.fun.initProbeTypeMap is a function. probeTypeMap = ndi.probe.fun.initProbeTypeMap(legacy)","title":"ndi.probe.fun.initProbeTypeMap"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Bfun/initProbeTypeMap.m/#ndiprobefuninitprobetypemap","text":"ndi.probe.fun.initProbeTypeMap is a function. probeTypeMap = ndi.probe.fun.initProbeTypeMap(legacy)","title":"ndi.probe.fun.initProbeTypeMap"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Bfun/probestruct2probe.m/","text":"ndi.probe.fun.probestruct2probe NDI.PROBE.FUN.PROBESTRUCT2PROBE - Convert probe structures to NDI_PROBE objects NDI_PROBE_OBJ = ndi.probe.fun.probestruct2probe(PROBESTRUCT, EXP) Given an array of structures PROBESTRUCT with field 'name', 'reference', and 'type', and an ndi.session EXP, this function generates the appropriate subclass of ndi.probe for dealing with the PROBE and returns the objects in a cell array NDI_PROBE_OBJ.","title":"ndi.probe.fun.probestruct2probe"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Bfun/probestruct2probe.m/#ndiprobefunprobestruct2probe","text":"NDI.PROBE.FUN.PROBESTRUCT2PROBE - Convert probe structures to NDI_PROBE objects NDI_PROBE_OBJ = ndi.probe.fun.probestruct2probe(PROBESTRUCT, EXP) Given an array of structures PROBESTRUCT with field 'name', 'reference', and 'type', and an ndi.session EXP, this function generates the appropriate subclass of ndi.probe for dealing with the PROBE and returns the objects in a cell array NDI_PROBE_OBJ.","title":"ndi.probe.fun.probestruct2probe"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Bfun/probetype2objectinit.m/","text":"ndi.probe.fun.probetype2objectinit ndi.probe.fun.PROBETYPE2OBJECTINIT - Initializes the NDI_PROBETYPE2OBJECT global variable in NDI package ndi.probe.fun.probetype2objectinit Initializes the NDI_PROBETYPE2OBJECT structure. The structure has two fields, 'type' and 'classname'. Each entry describes the ndi.probe subclass to use to create an ndi.probe object for the given ndi.epoch.epochprobemap_daqsystem type. Use TYPE ndi.probe.fun.probetype2objectinit to see the structure","title":"ndi.probe.fun.probetype2objectinit"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Bfun/probetype2objectinit.m/#ndiprobefunprobetype2objectinit","text":"ndi.probe.fun.PROBETYPE2OBJECTINIT - Initializes the NDI_PROBETYPE2OBJECT global variable in NDI package ndi.probe.fun.probetype2objectinit Initializes the NDI_PROBETYPE2OBJECT structure. The structure has two fields, 'type' and 'classname'. Each entry describes the ndi.probe subclass to use to create an ndi.probe object for the given ndi.epoch.epochprobemap_daqsystem type. Use TYPE ndi.probe.fun.probetype2objectinit to see the structure","title":"ndi.probe.fun.probetype2objectinit"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/mfdaq.m/","text":"CLASS ndi.probe.timeseries.mfdaq NDI_PROBE_TIMESERIES_MFDAQ - Create a new NDI_PROBE_MFAQ class object that handles probes that are associated with NDI_DAQSYSTEM_MFDAQ objects Superclasses ndi.probe.timeseries , ndi.probe , ndi.element , ndi.ido , did.ido , ndi.epoch.epochset , ndi.documentservice , matlab.mixin.Heterogeneous , ndi.time.timeseries Properties Property Description session name type reference underlying_element direct subject_id dependencies identifier Methods Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version mfdaq create a new ndi.probe object newdocument need docs here numepochs Number of epochs of ndi.epoch.epochset probestring Produce a human-readable probe string read_epochsamples read the data from a specified epoch readtimeseries read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch readtimeseriesepoch read the data from a specified epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate GET THE SAMPLE RATE FOR A PROBE IN AN EPOCH samples2times convert from the timeseries time to sample numbers searchquery need docs here t0_t1 times2samples convert from the timeseries time to sample numbers underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method) Methods help addepoch - add an epoch to the ndi.element [NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, [ADD_TO_DB]) Registers the data for an epoch with the NDI_ELEMENT_OBJ. Inputs: NDI_ELEMENT_OBJ: The ndi.element object to modify EPOCHID: The name of the epoch to add; should match the name of an epoch from the probe EPOCHCLOCK: The epoch clock; must be a single clock type that matches one of the clock types of the probe T0_T1: The starting time and ending time of the existence of information about the ELEMENT on the probe, in units of the epock clock ADD_TO_DB: 0/1 Should we actually add the epoch document to the database? Default 0. Help for ndi.probe.timeseries.mfdaq/addepoch is inherited from superclass ndi.element buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.probe.timeseries.mfdaq/EPOCHNODES Help for ndi.probe.timeseries.mfdaq/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - build the epoch table for an ndi.probe. * ET = BUILDEPOCHTABLE(NDI_PROBE_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch (may change) 'epoch_id' | The epoch ID code (will never change once established) | This uniquely specifies the epoch. 'epoch_session_id' | The ID of the session 'epochprobemap' | The epochprobemap object from each epoch 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', and 'epoch_id' Help for ndi.probe.timeseries.mfdaq/buildepochtable is inherited from superclass ndi.probe cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.probe.timeseries.mfdaq.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.probe.timeseries.mfdaq/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.probe.timeseries.mfdaq/cached_epochtable is inherited from superclass ndi.epoch.epochset doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then empty is returned. Help for ndi.probe.timeseries.mfdaq/doc_unique_id is inherited from superclass ndi.element elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ) Returns the name as a human-readable string. For ndi.element objects, this is the string 'element: ' followed by its name Help for ndi.probe.timeseries.mfdaq/elementstring is inherited from superclass ndi.element epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.probe.timeseries.mfdaq/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_PROBE_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch. The ndi.probe class always returns the clock type(s) of the device it is based on Help for ndi.probe.timeseries.mfdaq/epochclock is inherited from superclass ndi.probe epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.probe.timeseries.mfdaq/epochgraph is inherited from superclass ndi.epoch.epochset epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string. The abstract class just queries the EPOCHTABLE. Most classes that manage epochs themselves (ndi.file.navigator, ndi.daq.system) will override this method. Help for ndi.probe.timeseries.mfdaq/epochid is inherited from superclass ndi.epoch.epochset epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.probe.timeseries.mfdaq/epochnodes is inherited from superclass ndi.epoch.epochset epochprobemapmatch - does an epochprobemap record match our probe? B = EPOCHPROBEMAPMATCH(NDI_PROBE_OBJ, EPOCHPROBEMAP) Returns 1 if the ndi.epoch.epochprobemap object EPOCHPROBEMAP is a match for the NDI_PROBE_OBJ probe and 0 otherwise. Help for ndi.probe.timeseries.mfdaq/epochprobemapmatch is inherited from superclass ndi.probe epochsetname - the name of the ndi.probe. object, for EPOCHNODES* NAME = EPOCHSETNAME(NDI_PROBE_OBJ) Returns the object name that is used when creating epoch nodes. For ndi.probe objects, this is the string 'probe: ' followed by PROBESTRING(NDI_PROBE_OBJ). Help for ndi.probe.timeseries.mfdaq/epochsetname is inherited from superclass ndi.probe epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.probe.timeseries.mfdaq/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.probe.timeseries.mfdaq/epochtableentry is inherited from superclass ndi.epoch.epochset eq - are 2 ndi.probe objects equal? Returns 1 if the objects share an object class, session, and probe string. Help for ndi.probe.timeseries.mfdaq/eq is inherited from superclass ndi.probe getcache - return the NDI_CACHE and key for ndi.element [CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ) Returns the CACHE and KEY for the ndi.element object. The CACHE is returned from the associated session. The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT. See also: ndi.file.navigator Help for ndi.probe.timeseries.mfdaq/getcache is inherited from superclass ndi.element getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe. * [DEV, DEVNAME, DEVEPOCH, CHANNELTYPE, CHANNELLIST] = GETCHANNELDEVINFO(NDI_PROBE_OBJ, EPOCH_NUMBER_OR_ID) Given an ndi.probe.* object and an EPOCH number, this function returns the corresponding channel and device info. Suppose there are C channels corresponding to a probe. Then the outputs are DEV is a 1xC cell array of ndi.daq.system objects for each channel DEVNAME is a 1xC cell array of the names of each device in DEV DEVEPOCH is a 1xC array with the epoch id of the probe's EPOCH on each device CHANNELTYPE is a cell array of the type of each channel CHANNELLIST is the channel number of each channel. Help for ndi.probe.timeseries.mfdaq/getchanneldevinfo is inherited from superclass ndi.probe getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.probe.timeseries.mfdaq/getepocharray is inherited from superclass ndi.epoch.epochset ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.probe.timeseries.mfdaq.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then an error is returned. Help for ndi.probe.timeseries.mfdaq/id is inherited from superclass ndi.element issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset and ndi.probe.* this returns 0 so that the underlying ndi.daq.system epochs are added. Help for ndi.probe.timeseries.mfdaq/issyncgraphroot is inherited from superclass ndi.probe isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.probe.timeseries.mfdaq.isvalid is inherited from superclass did.ido load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ) Loads the ndi.document that is based on the ndi.element object and any associated epoch documents. Help for ndi.probe.timeseries.mfdaq/load_all_element_docs is inherited from superclass ndi.element load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ) Load an ndi.document that is based on the ndi.element object. Returns empty if there is no such document. Help for ndi.probe.timeseries.mfdaq/load_element_doc is inherited from superclass ndi.element loadaddedepochs - load the added epochs from an ndi.element [ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ) Load the EPOCHTABLE that consists of added/registered epochs that provide information about the ndi.element. Help for ndi.probe.timeseries.mfdaq/loadaddedepochs is inherited from superclass ndi.element matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.probe.timeseries.mfdaq/matchedepochtable is inherited from superclass ndi.epoch.epochset mfdaq - create a new ndi.probe object OBJ = ndi.probe.timeseries.mfdaq(SESSION, NAME, REFERENCE, TYPE) Creates an ndi.probe associated with an ndi.session object SESSION and with name NAME (a string that must start with a letter and contain no white space), reference number equal to REFERENCE (a non-negative integer), the TYPE of the probe (a string that must start with a letter and contain no white space). ndi.probe is an abstract class, and a specific implementation must be called. Documentation for ndi.probe.timeseries.mfdaq/mfdaq doc ndi.probe.timeseries.mfdaq newdocument - need docs here Help for ndi.probe.timeseries.mfdaq/newdocument is inherited from superclass ndi.probe.timeseries numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.probe.timeseries.mfdaq/numepochs is inherited from superclass ndi.epoch.epochset probestring - Produce a human-readable probe string PROBESTR = PROBESTRING(NDI_PROBE_OBJ) Returns the name and reference of a probe as a human-readable string. This is simply PROBESTR = [NDI_PROBE_OBJ.name ' _ ' in2str(NDI_PROBE_OBJ.reference)] Help for ndi.probe.timeseries.mfdaq/probestring is inherited from superclass ndi.probe read_epochsamples - read the data from a specified epoch [DATA, T, TIMEREF_OUT] = READ_EPOCHSAMPLES(NDI_PROBE_TIMESERIES_MFDAQ_OBJ, EPOCH ,S0, S1) EPOCH is the epoch number to read from. DATA will have one column per channel. T is the time of each sample, relative to the beginning of the epoch. TIMEREF_OUT is an ndi.time.timereference object that describes the epoch. readtimeseries - read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch [DATA, T, TIMEREF] = READTIMESERIES(NDI_PROBE_TIMESERIES_OBJ, TIMEREF_OR_EPOCH, T0, T1) Reads timeseries data from an ndi.probe.timeseries object. The DATA and time information T that are returned depend on the the specific subclass of ndi.probe.timeseries that is called (see READTIMESERIESEPOCH). TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the time reference for T0, T1, or it can be a single number, which will indicate the data are to be read from that epoch. DATA is the data for the probe. T is a time structure, in units of TIMEREF if it is an ndi.time.timereference object or in units of the epoch if an epoch is passed. The TIMEREF is returned. Help for ndi.probe.timeseries.mfdaq/readtimeseries is inherited from superclass ndi.probe.timeseries readtimeseriesepoch - read the data from a specified epoch [DATA, T, TIMEREF_OUT] = READTIMESERIESEPOCH(NDI_PROBE_TIMESERIES_MFDAQ_OBJ, EPOCH ,T0, T1) EPOCH is the epoch number to read from. DATA will have one column per channel. T is the time of each sample, relative to the beginning of the epoch. TIMEREF_OUT is an ndi.time.timereference object that describes the epoch. resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.probe.timeseries.mfdaq/EPOCHTABLE Help for ndi.probe.timeseries.mfdaq/resetepochtable is inherited from superclass ndi.epoch.epochset samplerate - GET THE SAMPLE RATE FOR A PROBE IN AN EPOCH SR = SAMPLERATE(NDI_PROBE_TIMESERIES_MFDAQ_OBJ, EPOCH) SR is an array of sample rates for the probe NDI_PROBE_TIMESERIES_MFDAQ_OBJ from epoch number EPOCH. samples2times - convert from the timeseries time to sample numbers SAMPLES = SAMPLES2TIMES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. TODO: convert times to dev_local_clock Help for ndi.probe.timeseries.mfdaq/samples2times is inherited from superclass ndi.time.timeseries searchquery - need docs here Help for ndi.probe.timeseries.mfdaq/searchquery is inherited from superclass ndi.probe.timeseries t0_t1 - ** T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK TODO: this must be a bug, it's just self-referential Help for ndi.probe.timeseries.mfdaq/t0_t1 is inherited from superclass ndi.element times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. Help for ndi.probe.timeseries.mfdaq/times2samples is inherited from superclass ndi.time.timeseries underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.probe.timeseries.mfdaq/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.probe.timeseries.mfdaq.unique_id is inherited from superclass did.ido","title":"ndi.probe.timeseries.mfdaq"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/mfdaq.m/#class-ndiprobetimeseriesmfdaq","text":"NDI_PROBE_TIMESERIES_MFDAQ - Create a new NDI_PROBE_MFAQ class object that handles probes that are associated with NDI_DAQSYSTEM_MFDAQ objects","title":"CLASS ndi.probe.timeseries.mfdaq"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/mfdaq.m/#superclasses","text":"ndi.probe.timeseries , ndi.probe , ndi.element , ndi.ido , did.ido , ndi.epoch.epochset , ndi.documentservice , matlab.mixin.Heterogeneous , ndi.time.timeseries","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/mfdaq.m/#properties","text":"Property Description session name type reference underlying_element direct subject_id dependencies identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/mfdaq.m/#methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version mfdaq create a new ndi.probe object newdocument need docs here numepochs Number of epochs of ndi.epoch.epochset probestring Produce a human-readable probe string read_epochsamples read the data from a specified epoch readtimeseries read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch readtimeseriesepoch read the data from a specified epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate GET THE SAMPLE RATE FOR A PROBE IN AN EPOCH samples2times convert from the timeseries time to sample numbers searchquery need docs here t0_t1 times2samples convert from the timeseries time to sample numbers underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method)","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/mfdaq.m/#methods-help","text":"addepoch - add an epoch to the ndi.element [NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, [ADD_TO_DB]) Registers the data for an epoch with the NDI_ELEMENT_OBJ. Inputs: NDI_ELEMENT_OBJ: The ndi.element object to modify EPOCHID: The name of the epoch to add; should match the name of an epoch from the probe EPOCHCLOCK: The epoch clock; must be a single clock type that matches one of the clock types of the probe T0_T1: The starting time and ending time of the existence of information about the ELEMENT on the probe, in units of the epock clock ADD_TO_DB: 0/1 Should we actually add the epoch document to the database? Default 0. Help for ndi.probe.timeseries.mfdaq/addepoch is inherited from superclass ndi.element buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.probe.timeseries.mfdaq/EPOCHNODES Help for ndi.probe.timeseries.mfdaq/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - build the epoch table for an ndi.probe. * ET = BUILDEPOCHTABLE(NDI_PROBE_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch (may change) 'epoch_id' | The epoch ID code (will never change once established) | This uniquely specifies the epoch. 'epoch_session_id' | The ID of the session 'epochprobemap' | The epochprobemap object from each epoch 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', and 'epoch_id' Help for ndi.probe.timeseries.mfdaq/buildepochtable is inherited from superclass ndi.probe cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.probe.timeseries.mfdaq.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.probe.timeseries.mfdaq/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.probe.timeseries.mfdaq/cached_epochtable is inherited from superclass ndi.epoch.epochset doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then empty is returned. Help for ndi.probe.timeseries.mfdaq/doc_unique_id is inherited from superclass ndi.element elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ) Returns the name as a human-readable string. For ndi.element objects, this is the string 'element: ' followed by its name Help for ndi.probe.timeseries.mfdaq/elementstring is inherited from superclass ndi.element epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.probe.timeseries.mfdaq/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_PROBE_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch. The ndi.probe class always returns the clock type(s) of the device it is based on Help for ndi.probe.timeseries.mfdaq/epochclock is inherited from superclass ndi.probe epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.probe.timeseries.mfdaq/epochgraph is inherited from superclass ndi.epoch.epochset epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string. The abstract class just queries the EPOCHTABLE. Most classes that manage epochs themselves (ndi.file.navigator, ndi.daq.system) will override this method. Help for ndi.probe.timeseries.mfdaq/epochid is inherited from superclass ndi.epoch.epochset epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.probe.timeseries.mfdaq/epochnodes is inherited from superclass ndi.epoch.epochset epochprobemapmatch - does an epochprobemap record match our probe? B = EPOCHPROBEMAPMATCH(NDI_PROBE_OBJ, EPOCHPROBEMAP) Returns 1 if the ndi.epoch.epochprobemap object EPOCHPROBEMAP is a match for the NDI_PROBE_OBJ probe and 0 otherwise. Help for ndi.probe.timeseries.mfdaq/epochprobemapmatch is inherited from superclass ndi.probe epochsetname - the name of the ndi.probe. object, for EPOCHNODES* NAME = EPOCHSETNAME(NDI_PROBE_OBJ) Returns the object name that is used when creating epoch nodes. For ndi.probe objects, this is the string 'probe: ' followed by PROBESTRING(NDI_PROBE_OBJ). Help for ndi.probe.timeseries.mfdaq/epochsetname is inherited from superclass ndi.probe epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.probe.timeseries.mfdaq/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.probe.timeseries.mfdaq/epochtableentry is inherited from superclass ndi.epoch.epochset eq - are 2 ndi.probe objects equal? Returns 1 if the objects share an object class, session, and probe string. Help for ndi.probe.timeseries.mfdaq/eq is inherited from superclass ndi.probe getcache - return the NDI_CACHE and key for ndi.element [CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ) Returns the CACHE and KEY for the ndi.element object. The CACHE is returned from the associated session. The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT. See also: ndi.file.navigator Help for ndi.probe.timeseries.mfdaq/getcache is inherited from superclass ndi.element getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe. * [DEV, DEVNAME, DEVEPOCH, CHANNELTYPE, CHANNELLIST] = GETCHANNELDEVINFO(NDI_PROBE_OBJ, EPOCH_NUMBER_OR_ID) Given an ndi.probe.* object and an EPOCH number, this function returns the corresponding channel and device info. Suppose there are C channels corresponding to a probe. Then the outputs are DEV is a 1xC cell array of ndi.daq.system objects for each channel DEVNAME is a 1xC cell array of the names of each device in DEV DEVEPOCH is a 1xC array with the epoch id of the probe's EPOCH on each device CHANNELTYPE is a cell array of the type of each channel CHANNELLIST is the channel number of each channel. Help for ndi.probe.timeseries.mfdaq/getchanneldevinfo is inherited from superclass ndi.probe getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.probe.timeseries.mfdaq/getepocharray is inherited from superclass ndi.epoch.epochset ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.probe.timeseries.mfdaq.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then an error is returned. Help for ndi.probe.timeseries.mfdaq/id is inherited from superclass ndi.element issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset and ndi.probe.* this returns 0 so that the underlying ndi.daq.system epochs are added. Help for ndi.probe.timeseries.mfdaq/issyncgraphroot is inherited from superclass ndi.probe isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.probe.timeseries.mfdaq.isvalid is inherited from superclass did.ido load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ) Loads the ndi.document that is based on the ndi.element object and any associated epoch documents. Help for ndi.probe.timeseries.mfdaq/load_all_element_docs is inherited from superclass ndi.element load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ) Load an ndi.document that is based on the ndi.element object. Returns empty if there is no such document. Help for ndi.probe.timeseries.mfdaq/load_element_doc is inherited from superclass ndi.element loadaddedepochs - load the added epochs from an ndi.element [ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ) Load the EPOCHTABLE that consists of added/registered epochs that provide information about the ndi.element. Help for ndi.probe.timeseries.mfdaq/loadaddedepochs is inherited from superclass ndi.element matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.probe.timeseries.mfdaq/matchedepochtable is inherited from superclass ndi.epoch.epochset mfdaq - create a new ndi.probe object OBJ = ndi.probe.timeseries.mfdaq(SESSION, NAME, REFERENCE, TYPE) Creates an ndi.probe associated with an ndi.session object SESSION and with name NAME (a string that must start with a letter and contain no white space), reference number equal to REFERENCE (a non-negative integer), the TYPE of the probe (a string that must start with a letter and contain no white space). ndi.probe is an abstract class, and a specific implementation must be called. Documentation for ndi.probe.timeseries.mfdaq/mfdaq doc ndi.probe.timeseries.mfdaq newdocument - need docs here Help for ndi.probe.timeseries.mfdaq/newdocument is inherited from superclass ndi.probe.timeseries numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.probe.timeseries.mfdaq/numepochs is inherited from superclass ndi.epoch.epochset probestring - Produce a human-readable probe string PROBESTR = PROBESTRING(NDI_PROBE_OBJ) Returns the name and reference of a probe as a human-readable string. This is simply PROBESTR = [NDI_PROBE_OBJ.name ' _ ' in2str(NDI_PROBE_OBJ.reference)] Help for ndi.probe.timeseries.mfdaq/probestring is inherited from superclass ndi.probe read_epochsamples - read the data from a specified epoch [DATA, T, TIMEREF_OUT] = READ_EPOCHSAMPLES(NDI_PROBE_TIMESERIES_MFDAQ_OBJ, EPOCH ,S0, S1) EPOCH is the epoch number to read from. DATA will have one column per channel. T is the time of each sample, relative to the beginning of the epoch. TIMEREF_OUT is an ndi.time.timereference object that describes the epoch. readtimeseries - read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch [DATA, T, TIMEREF] = READTIMESERIES(NDI_PROBE_TIMESERIES_OBJ, TIMEREF_OR_EPOCH, T0, T1) Reads timeseries data from an ndi.probe.timeseries object. The DATA and time information T that are returned depend on the the specific subclass of ndi.probe.timeseries that is called (see READTIMESERIESEPOCH). TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the time reference for T0, T1, or it can be a single number, which will indicate the data are to be read from that epoch. DATA is the data for the probe. T is a time structure, in units of TIMEREF if it is an ndi.time.timereference object or in units of the epoch if an epoch is passed. The TIMEREF is returned. Help for ndi.probe.timeseries.mfdaq/readtimeseries is inherited from superclass ndi.probe.timeseries readtimeseriesepoch - read the data from a specified epoch [DATA, T, TIMEREF_OUT] = READTIMESERIESEPOCH(NDI_PROBE_TIMESERIES_MFDAQ_OBJ, EPOCH ,T0, T1) EPOCH is the epoch number to read from. DATA will have one column per channel. T is the time of each sample, relative to the beginning of the epoch. TIMEREF_OUT is an ndi.time.timereference object that describes the epoch. resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.probe.timeseries.mfdaq/EPOCHTABLE Help for ndi.probe.timeseries.mfdaq/resetepochtable is inherited from superclass ndi.epoch.epochset samplerate - GET THE SAMPLE RATE FOR A PROBE IN AN EPOCH SR = SAMPLERATE(NDI_PROBE_TIMESERIES_MFDAQ_OBJ, EPOCH) SR is an array of sample rates for the probe NDI_PROBE_TIMESERIES_MFDAQ_OBJ from epoch number EPOCH. samples2times - convert from the timeseries time to sample numbers SAMPLES = SAMPLES2TIMES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. TODO: convert times to dev_local_clock Help for ndi.probe.timeseries.mfdaq/samples2times is inherited from superclass ndi.time.timeseries searchquery - need docs here Help for ndi.probe.timeseries.mfdaq/searchquery is inherited from superclass ndi.probe.timeseries t0_t1 - ** T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK TODO: this must be a bug, it's just self-referential Help for ndi.probe.timeseries.mfdaq/t0_t1 is inherited from superclass ndi.element times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. Help for ndi.probe.timeseries.mfdaq/times2samples is inherited from superclass ndi.time.timeseries underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.probe.timeseries.mfdaq/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.probe.timeseries.mfdaq.unique_id is inherited from superclass did.ido","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/stimulator.m/","text":"CLASS ndi.probe.timeseries.stimulator ndi.probe.timeseries.stimulator - Create a new NDI_PROBE_TIMESERIES_STIMULATOR class object that handles probes that are associated with NDI_DAQSYSTEM_STIMULUS objects Superclasses ndi.probe.timeseries , ndi.probe , ndi.element , ndi.ido , did.ido , ndi.epoch.epochset , ndi.documentservice , matlab.mixin.Heterogeneous , ndi.time.timeseries Properties Property Description session name type reference underlying_element direct subject_id dependencies identifier Methods Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version newdocument need docs here numepochs Number of epochs of ndi.epoch.epochset probestring Produce a human-readable probe string readtimeseries read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch readtimeseriesepoch Read stimulus data from an ndi.probe.timeseries.stimulator object resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery need docs here stimulator create a new ndi.probe.timeseries.stimulator object t0_t1 times2samples convert from the timeseries time to sample numbers underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method) Methods help addepoch - add an epoch to the ndi.element [NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, [ADD_TO_DB]) Registers the data for an epoch with the NDI_ELEMENT_OBJ. Inputs: NDI_ELEMENT_OBJ: The ndi.element object to modify EPOCHID: The name of the epoch to add; should match the name of an epoch from the probe EPOCHCLOCK: The epoch clock; must be a single clock type that matches one of the clock types of the probe T0_T1: The starting time and ending time of the existence of information about the ELEMENT on the probe, in units of the epock clock ADD_TO_DB: 0/1 Should we actually add the epoch document to the database? Default 0. Help for ndi.probe.timeseries.stimulator/addepoch is inherited from superclass ndi.element buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.probe.timeseries.stimulator/EPOCHNODES Help for ndi.probe.timeseries.stimulator/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - build the epoch table for an ndi.probe. * ET = BUILDEPOCHTABLE(NDI_PROBE_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch (may change) 'epoch_id' | The epoch ID code (will never change once established) | This uniquely specifies the epoch. 'epoch_session_id' | The ID of the session 'epochprobemap' | The epochprobemap object from each epoch 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', and 'epoch_id' Help for ndi.probe.timeseries.stimulator/buildepochtable is inherited from superclass ndi.probe cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.probe.timeseries.stimulator.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.probe.timeseries.stimulator/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.probe.timeseries.stimulator/cached_epochtable is inherited from superclass ndi.epoch.epochset doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then empty is returned. Help for ndi.probe.timeseries.stimulator/doc_unique_id is inherited from superclass ndi.element elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ) Returns the name as a human-readable string. For ndi.element objects, this is the string 'element: ' followed by its name Help for ndi.probe.timeseries.stimulator/elementstring is inherited from superclass ndi.element epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.probe.timeseries.stimulator/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_PROBE_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch. The ndi.probe class always returns the clock type(s) of the device it is based on Help for ndi.probe.timeseries.stimulator/epochclock is inherited from superclass ndi.probe epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.probe.timeseries.stimulator/epochgraph is inherited from superclass ndi.epoch.epochset epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string. The abstract class just queries the EPOCHTABLE. Most classes that manage epochs themselves (ndi.file.navigator, ndi.daq.system) will override this method. Help for ndi.probe.timeseries.stimulator/epochid is inherited from superclass ndi.epoch.epochset epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.probe.timeseries.stimulator/epochnodes is inherited from superclass ndi.epoch.epochset epochprobemapmatch - does an epochprobemap record match our probe? B = EPOCHPROBEMAPMATCH(NDI_PROBE_OBJ, EPOCHPROBEMAP) Returns 1 if the ndi.epoch.epochprobemap object EPOCHPROBEMAP is a match for the NDI_PROBE_OBJ probe and 0 otherwise. Help for ndi.probe.timeseries.stimulator/epochprobemapmatch is inherited from superclass ndi.probe epochsetname - the name of the ndi.probe. object, for EPOCHNODES* NAME = EPOCHSETNAME(NDI_PROBE_OBJ) Returns the object name that is used when creating epoch nodes. For ndi.probe objects, this is the string 'probe: ' followed by PROBESTRING(NDI_PROBE_OBJ). Help for ndi.probe.timeseries.stimulator/epochsetname is inherited from superclass ndi.probe epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.probe.timeseries.stimulator/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.probe.timeseries.stimulator/epochtableentry is inherited from superclass ndi.epoch.epochset eq - are 2 ndi.probe objects equal? Returns 1 if the objects share an object class, session, and probe string. Help for ndi.probe.timeseries.stimulator/eq is inherited from superclass ndi.probe getcache - return the NDI_CACHE and key for ndi.element [CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ) Returns the CACHE and KEY for the ndi.element object. The CACHE is returned from the associated session. The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT. See also: ndi.file.navigator Help for ndi.probe.timeseries.stimulator/getcache is inherited from superclass ndi.element getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe. * [DEV, DEVNAME, DEVEPOCH, CHANNELTYPE, CHANNELLIST] = GETCHANNELDEVINFO(NDI_PROBE_OBJ, EPOCH_NUMBER_OR_ID) Given an ndi.probe.* object and an EPOCH number, this function returns the corresponding channel and device info. Suppose there are C channels corresponding to a probe. Then the outputs are DEV is a 1xC cell array of ndi.daq.system objects for each channel DEVNAME is a 1xC cell array of the names of each device in DEV DEVEPOCH is a 1xC array with the epoch id of the probe's EPOCH on each device CHANNELTYPE is a cell array of the type of each channel CHANNELLIST is the channel number of each channel. Help for ndi.probe.timeseries.stimulator/getchanneldevinfo is inherited from superclass ndi.probe getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.probe.timeseries.stimulator/getepocharray is inherited from superclass ndi.epoch.epochset ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.probe.timeseries.stimulator.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then an error is returned. Help for ndi.probe.timeseries.stimulator/id is inherited from superclass ndi.element issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset and ndi.probe.* this returns 0 so that the underlying ndi.daq.system epochs are added. Help for ndi.probe.timeseries.stimulator/issyncgraphroot is inherited from superclass ndi.probe isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.probe.timeseries.stimulator.isvalid is inherited from superclass did.ido load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ) Loads the ndi.document that is based on the ndi.element object and any associated epoch documents. Help for ndi.probe.timeseries.stimulator/load_all_element_docs is inherited from superclass ndi.element load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ) Load an ndi.document that is based on the ndi.element object. Returns empty if there is no such document. Help for ndi.probe.timeseries.stimulator/load_element_doc is inherited from superclass ndi.element loadaddedepochs - load the added epochs from an ndi.element [ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ) Load the EPOCHTABLE that consists of added/registered epochs that provide information about the ndi.element. Help for ndi.probe.timeseries.stimulator/loadaddedepochs is inherited from superclass ndi.element matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.probe.timeseries.stimulator/matchedepochtable is inherited from superclass ndi.epoch.epochset newdocument - need docs here Help for ndi.probe.timeseries.stimulator/newdocument is inherited from superclass ndi.probe.timeseries numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.probe.timeseries.stimulator/numepochs is inherited from superclass ndi.epoch.epochset probestring - Produce a human-readable probe string PROBESTR = PROBESTRING(NDI_PROBE_OBJ) Returns the name and reference of a probe as a human-readable string. This is simply PROBESTR = [NDI_PROBE_OBJ.name ' _ ' in2str(NDI_PROBE_OBJ.reference)] Help for ndi.probe.timeseries.stimulator/probestring is inherited from superclass ndi.probe readtimeseries - read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch [DATA, T, TIMEREF] = READTIMESERIES(NDI_PROBE_TIMESERIES_OBJ, TIMEREF_OR_EPOCH, T0, T1) Reads timeseries data from an ndi.probe.timeseries object. The DATA and time information T that are returned depend on the the specific subclass of ndi.probe.timeseries that is called (see READTIMESERIESEPOCH). TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the time reference for T0, T1, or it can be a single number, which will indicate the data are to be read from that epoch. DATA is the data for the probe. T is a time structure, in units of TIMEREF if it is an ndi.time.timereference object or in units of the epoch if an epoch is passed. The TIMEREF is returned. Help for ndi.probe.timeseries.stimulator/readtimeseries is inherited from superclass ndi.probe.timeseries readtimeseriesepoch - Read stimulus data from an ndi.probe.timeseries.stimulator object [DATA, T, TIMEREF] = READTIMESERIESEPOCH(NDI_PROBE_TIMESERIES_STIMULATOR_OBJ, EPOCH, T0, T1) STIMON, STIMOFF, STIMID, PARAMETERS, STIMOPENCLOSE] = ... READSTIMULUSEPOCH(NDI_PROBE_STIMULTOR_OBJ, EPOCH, T0, T1) Reads stimulus delivery information from an ndi.probe.timeseries.stimulator object for a given EPOCH. T0 and T1 are in epoch time. T.STIMON is an Nx1 vector with the ON times of each stimulus delivery in the time units of the epoch or the clock. If marker channels 'mk' are present, then STIMON is taken to be occurrences where the first marker channel registers a value greater than 0. Alternatively, if 'dim*' channels are present, then STIMON is taken to be times whenever ANY of the dim channels registers an event onset. T.STIMOFF is an Nx1 vector with the OFF times of each stimulus delivery in the time units of the epoch or the clock. If STIMOFF data is not provided, these values will be NaN. If marker channels 'mk' are present, then STIMOFF is taken to be occurrences where the first marker channels registers a value less than 0. Alternatively, if 'dim*' channels are present, then STIMOFF is taken to be the times when *any* of the 'dim*' channels go off. DATA.STIMID is an Nx1 vector with the STIMID values. If STIMID values are not provided, these values will be NaN. If there are marker channels, the STIMID is taken to be the marker code of the second marker channel in the group. If 'dim*' channels are present, then the stimid will be 1..number of dim channels, depending upon which 'dim*' channel turned on. For example, if the second one turned on, then the stimid is 2. DATA.PARAMETERS is an Nx1 cell array of stimulus parameters. If the device provides no parameters, then this will be an empty cell array of size Nx1. This is read from the first metadata channel. DATA.ANALOG is an Nx1 vector with any analog data produced by the stimulator T.STIMOPENCLOSE is an Nx2 vector of stimulus 'setup' and 'shutdown' times, if applicable. For example, a visual stimulus might begin or end with the presentation of a 'background' image. These times will be encoded here. If there is no information about stimulus setup or shutdown, then T.STIMOPENCLOSE == [T.STIMON T.STIMOFF]. If there is a third marker channel present, then STIMOPENCLOSE will be defined by +1 and -1 marks on the third marker channel. T.STIMEVENTS is a cell array of stimulus event triggers that occur while the stimuli are running. These channels are optional and may not be present. If the NDI_PROBE_TIMESERIES_STIMULATOR_OBJ has no events, this will be an empty cell array. There will be one entry per event channel. In a visual stimulus system, the first event channel should be data frame events (when the video monitor updates). The second event channel can be the monitor's refresh rate, if it has one. T.ANALOG is the time of each analog sample TIMEREF is an ndi.time.timereference object that refers to this EPOCH. See also: ndi.probe.timeseries/READTIMESERIES resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.probe.timeseries.stimulator/EPOCHTABLE Help for ndi.probe.timeseries.stimulator/resetepochtable is inherited from superclass ndi.epoch.epochset samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLERATE(NDI_TIMESERIES_OBJ, EPOCH) Returns the sampling rate of a given ndi.time.timeseries object for the epoch EPOCH. EPOCH can be specified as an index or EPOCH_ID. If NDI_TIMESERIES_OBJ is not regularly sampled, then -1 is returned. Help for ndi.probe.timeseries.stimulator/samplerate is inherited from superclass ndi.time.timeseries samples2times - convert from the timeseries time to sample numbers SAMPLES = SAMPLES2TIMES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. TODO: convert times to dev_local_clock Help for ndi.probe.timeseries.stimulator/samples2times is inherited from superclass ndi.time.timeseries searchquery - need docs here Help for ndi.probe.timeseries.stimulator/searchquery is inherited from superclass ndi.probe.timeseries stimulator - create a new ndi.probe.timeseries.stimulator object OBJ = ndi.probe.timeseries.stimulator(SESSION, NAME, REFERENCE, TYPE) Creates an ndi.probe.timeseries.stimulator associated with an ndi.session object SESSION and with name NAME (a string that must start with a letter and contain no white space), reference number equal to REFERENCE (a non-negative integer), the TYPE of the probe (a string that must start with a letter and contain no white space). Documentation for ndi.probe.timeseries.stimulator/stimulator doc ndi.probe.timeseries.stimulator t0_t1 - ** T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK TODO: this must be a bug, it's just self-referential Help for ndi.probe.timeseries.stimulator/t0_t1 is inherited from superclass ndi.element times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. Help for ndi.probe.timeseries.stimulator/times2samples is inherited from superclass ndi.time.timeseries underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.probe.timeseries.stimulator/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.probe.timeseries.stimulator.unique_id is inherited from superclass did.ido","title":"ndi.probe.timeseries.stimulator"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/stimulator.m/#class-ndiprobetimeseriesstimulator","text":"ndi.probe.timeseries.stimulator - Create a new NDI_PROBE_TIMESERIES_STIMULATOR class object that handles probes that are associated with NDI_DAQSYSTEM_STIMULUS objects","title":"CLASS ndi.probe.timeseries.stimulator"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/stimulator.m/#superclasses","text":"ndi.probe.timeseries , ndi.probe , ndi.element , ndi.ido , did.ido , ndi.epoch.epochset , ndi.documentservice , matlab.mixin.Heterogeneous , ndi.time.timeseries","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/stimulator.m/#properties","text":"Property Description session name type reference underlying_element direct subject_id dependencies identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/stimulator.m/#methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version newdocument need docs here numepochs Number of epochs of ndi.epoch.epochset probestring Produce a human-readable probe string readtimeseries read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch readtimeseriesepoch Read stimulus data from an ndi.probe.timeseries.stimulator object resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery need docs here stimulator create a new ndi.probe.timeseries.stimulator object t0_t1 times2samples convert from the timeseries time to sample numbers underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method)","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/stimulator.m/#methods-help","text":"addepoch - add an epoch to the ndi.element [NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, [ADD_TO_DB]) Registers the data for an epoch with the NDI_ELEMENT_OBJ. Inputs: NDI_ELEMENT_OBJ: The ndi.element object to modify EPOCHID: The name of the epoch to add; should match the name of an epoch from the probe EPOCHCLOCK: The epoch clock; must be a single clock type that matches one of the clock types of the probe T0_T1: The starting time and ending time of the existence of information about the ELEMENT on the probe, in units of the epock clock ADD_TO_DB: 0/1 Should we actually add the epoch document to the database? Default 0. Help for ndi.probe.timeseries.stimulator/addepoch is inherited from superclass ndi.element buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of EPOCHNODES. For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping, ndi.probe.timeseries.stimulator/EPOCHNODES Help for ndi.probe.timeseries.stimulator/buildepochgraph is inherited from superclass ndi.epoch.epochset buildepochtable - build the epoch table for an ndi.probe. * ET = BUILDEPOCHTABLE(NDI_PROBE_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch (may change) 'epoch_id' | The epoch ID code (will never change once established) | This uniquely specifies the epoch. 'epoch_session_id' | The ID of the session 'epochprobemap' | The epochprobemap object from each epoch 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', and 'epoch_id' Help for ndi.probe.timeseries.stimulator/buildepochtable is inherited from superclass ndi.probe cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) Help for ndi.probe.timeseries.stimulator.cache2ginfo is inherited from superclass ndi.epoch.epochset cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ) Return the cached version of the epoch graph, if it exists and is up-to-date (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed). If there is no cached version, or if it is not up-to-date, COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date, it is deleted. See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH Help for ndi.probe.timeseries.stimulator/cached_epochgraph is inherited from superclass ndi.epoch.epochset cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ) Return the cached version of the epochtable, if it exists, along with its HASHVALUE (a hash number generated from the table). If there is no cached version, ET and HASHVALUE will be empty. Help for ndi.probe.timeseries.stimulator/cached_epochtable is inherited from superclass ndi.epoch.epochset doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then empty is returned. Help for ndi.probe.timeseries.stimulator/doc_unique_id is inherited from superclass ndi.element elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ) Returns the name as a human-readable string. For ndi.element objects, this is the string 'element: ' followed by its name Help for ndi.probe.timeseries.stimulator/elementstring is inherited from superclass ndi.element epoch2str - convert an epoch number or id to a string S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER) Returns the epoch NUMBER in the form of a string. If it is a simple integer, then INT2STR is used to produce a string. If it is an epoch identifier string, then it is returned. Help for ndi.probe.timeseries.stimulator/epoch2str is inherited from superclass ndi.epoch.epochset epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_PROBE_OBJ, EPOCH_NUMBER) Return the clock types available for this epoch. The ndi.probe class always returns the clock type(s) of the device it is based on Help for ndi.probe.timeseries.stimulator/epochclock is inherited from superclass ndi.probe epochgraph - graph of the mapping and cost of converting time among epochs [COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes). For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2. Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j. The cost of each transformation is normally 1 operation. MAPPING is the ndi.time.timemapping object that describes the mapping. Help for ndi.probe.timeseries.stimulator/epochgraph is inherited from superclass ndi.epoch.epochset epochid - Get the epoch identifier for a particular epoch ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Returns the epoch identifier string for the epoch EPOCH_NUMBER. If it doesn't exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string. The abstract class just queries the EPOCHTABLE. Most classes that manage epochs themselves (ndi.file.navigator, ndi.daq.system) will override this method. Help for ndi.probe.timeseries.stimulator/epochid is inherited from superclass ndi.epoch.epochset epochnodes - return all epoch nodes from an ndi.epoch.epochset object [NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ) Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch within the session. 'epoch_session_id' | The ID of the session that contains the epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A SINGLE ndi.time.clocktype entry that describes the clock type of this node. 't0_t1' | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock' 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_id', and 'epochprobemap' 'objectname' | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no | 'name' field, then 'unknown' is used. 'objectclass' | The object class name of the NDI_EPOCHSET_OBJ. EPOCHNODES are related to EPOCHTABLE entries, except a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another. b) EPOCHNODES contain identifying information (objectname and objectclass) to help in identifying the epoch nodes across ndi.epoch.epochset objects. UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs. Help for ndi.probe.timeseries.stimulator/epochnodes is inherited from superclass ndi.epoch.epochset epochprobemapmatch - does an epochprobemap record match our probe? B = EPOCHPROBEMAPMATCH(NDI_PROBE_OBJ, EPOCHPROBEMAP) Returns 1 if the ndi.epoch.epochprobemap object EPOCHPROBEMAP is a match for the NDI_PROBE_OBJ probe and 0 otherwise. Help for ndi.probe.timeseries.stimulator/epochprobemapmatch is inherited from superclass ndi.probe epochsetname - the name of the ndi.probe. object, for EPOCHNODES* NAME = EPOCHSETNAME(NDI_PROBE_OBJ) Returns the object name that is used when creating epoch nodes. For ndi.probe objects, this is the string 'probe: ' followed by PROBESTRING(NDI_PROBE_OBJ). Help for ndi.probe.timeseries.stimulator/epochsetname is inherited from superclass ndi.probe epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ) ET is a structure array with the following fields: Fieldname: | Description ------------------------------------------------------------------------ 'epoch_number' | The number of the epoch. The number may change as epochs are added and subtracted. 'epoch_id' | The epoch ID code (will never change once established, though it may be deleted.) | This epoch ID uniquely specifies the epoch. 'epoch_session_id' | The session ID that contains this epoch 'epochprobemap' | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty. 'epoch_clock' | A cell array of ndi.time.clocktype objects that describe the type of clocks available 't0_t1' | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop | time of this epoch. The time units of t0_t1{i} match epoch_clock{i}. 'underlying_epochs' | A structure array of the ndi.epoch.epochset objects that comprise these epochs. | It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap' HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE. After it is read from disk once, the ET is stored in memory and is not re-read from disk unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE. Help for ndi.probe.timeseries.stimulator/epochtable is inherited from superclass ndi.epoch.epochset epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. Help for ndi.probe.timeseries.stimulator/epochtableentry is inherited from superclass ndi.epoch.epochset eq - are 2 ndi.probe objects equal? Returns 1 if the objects share an object class, session, and probe string. Help for ndi.probe.timeseries.stimulator/eq is inherited from superclass ndi.probe getcache - return the NDI_CACHE and key for ndi.element [CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ) Returns the CACHE and KEY for the ndi.element object. The CACHE is returned from the associated session. The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT. See also: ndi.file.navigator Help for ndi.probe.timeseries.stimulator/getcache is inherited from superclass ndi.element getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe. * [DEV, DEVNAME, DEVEPOCH, CHANNELTYPE, CHANNELLIST] = GETCHANNELDEVINFO(NDI_PROBE_OBJ, EPOCH_NUMBER_OR_ID) Given an ndi.probe.* object and an EPOCH number, this function returns the corresponding channel and device info. Suppose there are C channels corresponding to a probe. Then the outputs are DEV is a 1xC cell array of ndi.daq.system objects for each channel DEVNAME is a 1xC cell array of the names of each device in DEV DEVEPOCH is a 1xC array with the epoch id of the probe's EPOCH on each device CHANNELTYPE is a cell array of the type of each channel CHANNELLIST is the channel number of each channel. Help for ndi.probe.timeseries.stimulator/getchanneldevinfo is inherited from superclass ndi.probe getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ) Produce an array of ndi.epoch objects from the epoch table of this ndi.epoch.epochset object (NDI_EPOCHSET_OBJ). Help for ndi.probe.timeseries.stimulator/getepocharray is inherited from superclass ndi.epoch.epochset ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) Help for ndi.probe.timeseries.stimulator.ginfo2cache is inherited from superclass ndi.epoch.epochset id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID(NDI_ELEMENT_OBJ) Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated document for the element, then an error is returned. Help for ndi.probe.timeseries.stimulator/id is inherited from superclass ndi.element issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ) This function tells an ndi.time.syncgraph object whether it should continue adding the 'underlying' epochs to the graph, or whether it should stop at this level. For ndi.epoch.epochset and ndi.probe.* this returns 0 so that the underlying ndi.daq.system epochs are added. Help for ndi.probe.timeseries.stimulator/issyncgraphroot is inherited from superclass ndi.probe isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.probe.timeseries.stimulator.isvalid is inherited from superclass did.ido load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ) Loads the ndi.document that is based on the ndi.element object and any associated epoch documents. Help for ndi.probe.timeseries.stimulator/load_all_element_docs is inherited from superclass ndi.element load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ) Load an ndi.document that is based on the ndi.element object. Returns empty if there is no such document. Help for ndi.probe.timeseries.stimulator/load_element_doc is inherited from superclass ndi.element loadaddedepochs - load the added epochs from an ndi.element [ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ) Load the EPOCHTABLE that consists of added/registered epochs that provide information about the ndi.element. Help for ndi.probe.timeseries.stimulator/loadaddedepochs is inherited from superclass ndi.element matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE. Otherwise, it returns 0. Help for ndi.probe.timeseries.stimulator/matchedepochtable is inherited from superclass ndi.epoch.epochset newdocument - need docs here Help for ndi.probe.timeseries.stimulator/newdocument is inherited from superclass ndi.probe.timeseries numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE Help for ndi.probe.timeseries.stimulator/numepochs is inherited from superclass ndi.epoch.epochset probestring - Produce a human-readable probe string PROBESTR = PROBESTRING(NDI_PROBE_OBJ) Returns the name and reference of a probe as a human-readable string. This is simply PROBESTR = [NDI_PROBE_OBJ.name ' _ ' in2str(NDI_PROBE_OBJ.reference)] Help for ndi.probe.timeseries.stimulator/probestring is inherited from superclass ndi.probe readtimeseries - read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch [DATA, T, TIMEREF] = READTIMESERIES(NDI_PROBE_TIMESERIES_OBJ, TIMEREF_OR_EPOCH, T0, T1) Reads timeseries data from an ndi.probe.timeseries object. The DATA and time information T that are returned depend on the the specific subclass of ndi.probe.timeseries that is called (see READTIMESERIESEPOCH). TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the time reference for T0, T1, or it can be a single number, which will indicate the data are to be read from that epoch. DATA is the data for the probe. T is a time structure, in units of TIMEREF if it is an ndi.time.timereference object or in units of the epoch if an epoch is passed. The TIMEREF is returned. Help for ndi.probe.timeseries.stimulator/readtimeseries is inherited from superclass ndi.probe.timeseries readtimeseriesepoch - Read stimulus data from an ndi.probe.timeseries.stimulator object [DATA, T, TIMEREF] = READTIMESERIESEPOCH(NDI_PROBE_TIMESERIES_STIMULATOR_OBJ, EPOCH, T0, T1) STIMON, STIMOFF, STIMID, PARAMETERS, STIMOPENCLOSE] = ... READSTIMULUSEPOCH(NDI_PROBE_STIMULTOR_OBJ, EPOCH, T0, T1) Reads stimulus delivery information from an ndi.probe.timeseries.stimulator object for a given EPOCH. T0 and T1 are in epoch time. T.STIMON is an Nx1 vector with the ON times of each stimulus delivery in the time units of the epoch or the clock. If marker channels 'mk' are present, then STIMON is taken to be occurrences where the first marker channel registers a value greater than 0. Alternatively, if 'dim*' channels are present, then STIMON is taken to be times whenever ANY of the dim channels registers an event onset. T.STIMOFF is an Nx1 vector with the OFF times of each stimulus delivery in the time units of the epoch or the clock. If STIMOFF data is not provided, these values will be NaN. If marker channels 'mk' are present, then STIMOFF is taken to be occurrences where the first marker channels registers a value less than 0. Alternatively, if 'dim*' channels are present, then STIMOFF is taken to be the times when *any* of the 'dim*' channels go off. DATA.STIMID is an Nx1 vector with the STIMID values. If STIMID values are not provided, these values will be NaN. If there are marker channels, the STIMID is taken to be the marker code of the second marker channel in the group. If 'dim*' channels are present, then the stimid will be 1..number of dim channels, depending upon which 'dim*' channel turned on. For example, if the second one turned on, then the stimid is 2. DATA.PARAMETERS is an Nx1 cell array of stimulus parameters. If the device provides no parameters, then this will be an empty cell array of size Nx1. This is read from the first metadata channel. DATA.ANALOG is an Nx1 vector with any analog data produced by the stimulator T.STIMOPENCLOSE is an Nx2 vector of stimulus 'setup' and 'shutdown' times, if applicable. For example, a visual stimulus might begin or end with the presentation of a 'background' image. These times will be encoded here. If there is no information about stimulus setup or shutdown, then T.STIMOPENCLOSE == [T.STIMON T.STIMOFF]. If there is a third marker channel present, then STIMOPENCLOSE will be defined by +1 and -1 marks on the third marker channel. T.STIMEVENTS is a cell array of stimulus event triggers that occur while the stimuli are running. These channels are optional and may not be present. If the NDI_PROBE_TIMESERIES_STIMULATOR_OBJ has no events, this will be an empty cell array. There will be one entry per event channel. In a visual stimulus system, the first event channel should be data frame events (when the video monitor updates). The second event channel can be the monitor's refresh rate, if it has one. T.ANALOG is the time of each analog sample TIMEREF is an ndi.time.timereference object that refers to this EPOCH. See also: ndi.probe.timeseries/READTIMESERIES resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ) This function clears the internal cached memory of the epochtable, forcing it to be re-read from disk at the next request. See also: ndi.probe.timeseries.stimulator/EPOCHTABLE Help for ndi.probe.timeseries.stimulator/resetepochtable is inherited from superclass ndi.epoch.epochset samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLERATE(NDI_TIMESERIES_OBJ, EPOCH) Returns the sampling rate of a given ndi.time.timeseries object for the epoch EPOCH. EPOCH can be specified as an index or EPOCH_ID. If NDI_TIMESERIES_OBJ is not regularly sampled, then -1 is returned. Help for ndi.probe.timeseries.stimulator/samplerate is inherited from superclass ndi.time.timeseries samples2times - convert from the timeseries time to sample numbers SAMPLES = SAMPLES2TIMES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. TODO: convert times to dev_local_clock Help for ndi.probe.timeseries.stimulator/samples2times is inherited from superclass ndi.time.timeseries searchquery - need docs here Help for ndi.probe.timeseries.stimulator/searchquery is inherited from superclass ndi.probe.timeseries stimulator - create a new ndi.probe.timeseries.stimulator object OBJ = ndi.probe.timeseries.stimulator(SESSION, NAME, REFERENCE, TYPE) Creates an ndi.probe.timeseries.stimulator associated with an ndi.session object SESSION and with name NAME (a string that must start with a letter and contain no white space), reference number equal to REFERENCE (a non-negative integer), the TYPE of the probe (a string that must start with a letter and contain no white space). Documentation for ndi.probe.timeseries.stimulator/stimulator doc ndi.probe.timeseries.stimulator t0_t1 - ** T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK TODO: this must be a bug, it's just self-referential Help for ndi.probe.timeseries.stimulator/t0_t1 is inherited from superclass ndi.element times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. Help for ndi.probe.timeseries.stimulator/times2samples is inherited from superclass ndi.time.timeseries underlyingepochnodes - find all the underlying epochnodes of a given epochnode [UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1). Note that the EPOCHNODE itself is returned as the first 'underlying' node. See also: ISSYNCGRAPHROOT Help for ndi.probe.timeseries.stimulator/underlyingepochnodes is inherited from superclass ndi.epoch.epochset unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.probe.timeseries.stimulator.unique_id is inherited from superclass did.ido","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/dir.m/","text":"CLASS ndi.session.dir NDI_SESSION_DIR - NDI_SESSION_DIR object class - an session with an associated file directory Superclasses ndi.session , handle Properties Property Description path the file path of the session reference identifier syncgraph cache Methods Method Description addlistener addlistener Add listener for event. all_docs_in_session determines if a set of ndi documents are in a session creator_args return the arguments needed to build an ndi.session object daqsystem_add Add a sampling device to a ndi.session object daqsystem_clear remove all DAQSYSTEM objects from an ndi.session daqsystem_load Load daqsystem objects from an ndi.session daqsystem_rm Remove a sampling device from an ndi.session object database_add Add an ndi.document to an ndi.session object database_clear deletes/removes all entries from the database associated with an session database_closebinarydoc close an ndi.database.binarydoc database_existbinarydoc checks if an ndi.database.binarydoc exists for an ndi.document database_openbinarydoc open the ndi.database.binarydoc channel of an ndi.document database_rm Remove an ndi.document with a given document ID from an ndi.session object database_search Search for an ndi.document in a database of an ndi.session object delete DELETE Delete a handle object. dir Create a new ndi.session.dir ndi_session_dir_object docinput2docs convert an array of ndi.documents or doc_ids to documents eq Are two ndi.session.dir objects equivalent? findexpobj search an ndi.session for a specific object given name and classname findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. get_ingested_docs get all ndi.documents related to ingested data getelements Return all ndi.element objects that are found in session database getpath Return the path of the session getprobes Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries gt > (GT) Greater than relation for handles. id return the identifier of an ndi.session object ingest ingest the raw data and synchronization information into the database is_fully_ingested is an ndi.session object fully ingested? isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ndipathname Return the path of the NDI files within the session ne ~= (NE) Not equal relation for handles. newdocument create a new ndi.database document of type ndi.document notify NOTIFY Notify listeners of event. searchquery return a search query for database objects in this session syncgraph_addrule add an ndi.time.syncrule to the syncgraph syncgraph_rmrule remove an ndi.time.syncrule from the syncgraph unique_reference_string return the unique reference string for this session validate_documents validate whether documents belong to a session Methods help addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.session.dir, matlab.metadata.Property, events Help for ndi.session.dir/addlistener is inherited from superclass handle all_docs_in_session - determines if a set of ndi documents are in a session [B,ERRMSG] = ALL_DOCS_IN_SESSION(DOCS, SESSION_ID) B is 1 if the base.session_id field of all ndi.document objects in the cell array DOCS match session_id. If so, ERRMSG is empty. Otherwise, ERRMSG lists the documents that are not in the session. Help for ndi.session.dir.all_docs_in_session is inherited from superclass ndi.session creator_args - return the arguments needed to build an ndi.session object INPUTS = CREATOR_ARGS(NDI_SESSION_OBJ) Return the inputs necessary to create an ndi.session object. Each input argument is returned as an entry in the cell array INPUTS. Example: INPUTS = ndi_session_obj.creator_args(); ndi_session_copy = ndi.session(INPUTS{:}); daqsystem_add - Add a sampling device to a ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_ADD(NDI_SESSION_OBJ, DEV) Adds the device DEV to the ndi.session NDI_SESSION_OBJ The devices can be accessed by referencing NDI_SESSION_OBJ.device See also: DAQSYSTEM_RM, ndi.session.dir Help for ndi.session.dir/daqsystem_add is inherited from superclass ndi.session daqsystem_clear - remove all DAQSYSTEM objects from an ndi.session NDI_SESSION_OBJ = DAQSYSTEM_CLEAR(NDI_SESSION_OBJ) Permanently removes all ndi.daq.system objects from an ndi.session. Be sure you mean it! Help for ndi.session.dir/daqsystem_clear is inherited from superclass ndi.session daqsystem_load - Load daqsystem objects from an ndi.session DEV = DAQSYSTEM_LOAD(NDI_SESSION_OBJ, PARAM1, VALUE1, PARAM2, VALUE2, ...) or DEV = DAQSYSTEM_LOAD(NDI_SESSION_OBJ) Returns the ndi.daq.system objects in the ndi.session with metadata parameters PARAMS1 that matches VALUE1, PARAMS2 that matches VALUE2, etc. One can also search for 'name' as a parameter; this will be automatically changed to search for database documents with fields 'base.name' equal to the corresponding value. If more than one object is requested, then DEV will be a cell list of matching objects. Otherwise, the object will be a single element. If there are no matches, empty ([]) is returned. Help for ndi.session.dir/daqsystem_load is inherited from superclass ndi.session daqsystem_rm - Remove a sampling device from an ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_RM(NDI_SESSION_OBJ, DEV) Removes the device DEV from the device list. See also: DAQSYSTEM_ADD, ndi.session.dir Help for ndi.session.dir/daqsystem_rm is inherited from superclass ndi.session database_add - Add an ndi.document to an ndi.session object NDI_SESSION_OBJ = DATABASE_ADD(NDI_SESSION_OBJ, NDI_DOCUMENT_OBJ) Adds the ndi.document NDI_DOCUMENT_OBJ to the ndi.session NDI_SESSION_OBJ. NDI_DOCUMENT_OBJ can also be a cell array of ndi.document objects, which will all be added in turn. The database can be queried by calling NDI_SESSION_OBJ/SEARCH See also: DATABASE_RM, ndi.session.dir, ndi.database, ndi.session.dir/SEARCH Help for ndi.session.dir/database_add is inherited from superclass ndi.session database_clear - deletes/removes all entries from the database associated with an session DATABASE_CLEAR(NDI_SESSION_OBJ, AREYOUSURE) Removes all documents from the NDI_SESSION_OBJ object. Use with care. If AREYOUSURE is 'yes' then the function will proceed. Otherwise, it will not. Help for ndi.session.dir/database_clear is inherited from superclass ndi.session database_closebinarydoc - close an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = DATABASE_CLOSEBINARYDOC(NDI_SESSION_OBJ, NDI_BINARYDOC_OBJ) Close an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be closed in the database, which is why it is necessary to call this function through the session object. Help for ndi.session.dir/database_closebinarydoc is inherited from superclass ndi.session database_existbinarydoc - checks if an ndi.database.binarydoc exists for an ndi.document [TF, FILE_PATH] = DATABASE_EXISTBINARYDOC(NDI_SESSION_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. Help for ndi.session.dir/database_existbinarydoc is inherited from superclass ndi.session database_openbinarydoc - open the ndi.database.binarydoc channel of an ndi.document NDI_BINARYDOC_OBJ = DATABASE_OPENBINARYDOC(NDI_SESSION_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return the open ndi.database.binarydoc object that corresponds to an ndi.document and NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself. The document is opened for reading only. Document binary streams may not be edited once the document is added to the database. Note that this NDI_BINARYDOC_OBJ must be closed with ndi.session/CLOSEBINARYDOC. Help for ndi.session.dir/database_openbinarydoc is inherited from superclass ndi.session database_rm - Remove an ndi.document with a given document ID from an ndi.session object NDI_SESSION_OBJ = DATABASE_RM(NDI_SESSION_OBJ, DOC_UNIQUE_ID) or NDI_SESSION_OBJ = DATABASE_RM(NDI_SESSION_OBJ, DOC) Removes an ndi.document with document id DOC_UNIQUE_ID from the NDI_SESSION_OBJ.database. In the second form, if an ndi.document or cell array of NDI_DOCUMENTS is passed for DOC, then the document unique ids are retrieved and they are removed in turn. If DOC/DOC_UNIQUE_ID is empty, no action is taken. This function also takes parameters as name/value pairs that modify its behavior: Parameter (default) | Description -------------------------------------------------------------------------------- ErrIfNotFound (0) | Produce an error if an ID to be deleted is not found. See also: DATABASE_ADD, ndi.session.dir Help for ndi.session.dir/database_rm is inherited from superclass ndi.session database_search - Search for an ndi.document in a database of an ndi.session object NDI_DOCUMENT_OBJ = DATABASE_SEARCH(NDI_SESSION_OBJ, SEARCHPARAMETERS) Given search parameters, which are a cell list {'PARAM1', VALUE1, 'PARAM2, VALUE2, ...}, the database associated with the ndi.session object is searched. Matches are returned in a cell list NDI_DOCUMENT_OBJ. Help for ndi.session.dir/database_search is inherited from superclass ndi.session delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.SESSION.DIR, NDI.SESSION.DIR/ISVALID, CLEAR Help for ndi.session.dir/delete is inherited from superclass handle dir - Create a new ndi.session.dir ndi_session_dir_object E = ndi.session.dir(REFERENCE, PATHNAME) Creates an ndi.session.dir ndi_session_dir_object, or an session with an associated directory. REFERENCE should be a unique reference for the session and directory PATHNAME. One can also open an existing session by using E = ndi.session.dir(PATHNAME) See also: ndi.session, ndi.session.dir/GETPATH Documentation for ndi.session.dir/dir doc ndi.session.dir docinput2docs - convert an array of ndi.documents or doc_ids to documents [DOC_LIST,B,ERRMSG] = DOCINPUT2DOCS(NDI_SESSION_OBJ, DOC_INPUT) Given an input DOC_INPUT that specifies ndi.document objects, return the list of ndi.document objects. DOC_INPUT can be a single document id (character array), or a single ndi.document, or a cell array of document ids or a cell array of ndi.documents, or a mixed cell array of ndi.document objects and ids. If all documents are found, then B is 1 and ERRMSG is ''. If a document ID does not exist in the database, then one occurrence is noted in ERRMSG and B is 0. Help for ndi.session.dir.docinput2docs is inherited from superclass ndi.session eq - Are two ndi.session.dir objects equivalent? B = EQ(NDI_SESSION_DIR_OBJ_A, NDI_SESSION_DIR_OBJ_B) Returns 1 if the two ndi.session.dir objects have the same path and reference fields. They do not have to be the same handles (that is, have the same location in memory). findexpobj - search an ndi.session for a specific object given name and classname OBJ = FINDEXPOBJ(NDI_EXPERIMNENT_OBJ, OBJ_NAME, OBJ_CLASSNAME) Examines the DAQSYSTEM list, DATABASE, and PROBELIST for an object with name OBJ_NAME and classname OBJ_CLASSNAME. If no object is found, OBJ will be empty ([]). Help for ndi.session.dir/findexpobj is inherited from superclass ndi.session findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.SESSION.DIR Help for ndi.session.dir/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.session.dir, ndi.session.dir/findobj, dynamicprops, matlab.metadata.Property Help for ndi.session.dir/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.DIR, NDI.SESSION.DIR/EQ, NDI.SESSION.DIR/GT, NDI.SESSION.DIR/LE, NDI.SESSION.DIR/LT, NDI.SESSION.DIR/NE Help for ndi.session.dir/ge is inherited from superclass handle get_ingested_docs - get all ndi.documents related to ingested data D = GET_INGESTED_DOCS(NDI_SESSION_OBJ) Return all documents related to ingested data. Be careful; if the raw data is not available on the path, then the ingested data is the only record of it. Help for ndi.session.dir/get_ingested_docs is inherited from superclass ndi.session getelements - Return all ndi.element objects that are found in session database ELEMENTS = GETELEMENTS(NDI_SESSION_OBJ, ...) Examines all the database of NDI_SESSION_OBJ and returns all ndi.element entries. ELEMENTS is a cell array of ndi.element.* objects. ELEMENTS = GETELEMENTS(NDI_SESSION_OBJ, 'PROP1', VALUE1, 'PROP2', VALUE2...) returns only those probes for which 'PROP1' has a value of VALUE1, 'PROP2' has a value of VALUE2, etc. Properties of elements are 'element.name', 'element.type', 'element.direct', and 'probe.name', 'probe.type', and 'probe.reference'. Help for ndi.session.dir/getelements is inherited from superclass ndi.session getpath - Return the path of the session P = GETPATH(NDI_SESSION_DIR_OBJ) Returns the path of an ndi.session.dir object. The path is some sort of reference to the storage location of the session. This might be a URL, or a file directory. getprobes - Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries PROBES = GETPROBES(NDI_SESSION_OBJ, ...) Examines all ndi.daq.system entries in the NDI_SESSION_OBJ's device array and returns all ndi.probe.* entries that can be constructed from each device's ndi.epoch.epochprobemap entries. PROBES is a cell array of ndi.probe.* objects. One can pass additional arguments that specify the classnames of the probes that are returned: PROBES = GETPROBES(NDI_SESSION_OBJ, CLASSMATCH ) only probes that are members of the classes CLASSMATCH etc., are returned. PROBES = GETPROBES(NDI_SESSION_OBJ, 'PROP1', VALUE1, 'PROP2', VALUE2...) returns only those probes for which 'PROP1' has a value of VALUE1, 'PROP2' has a value of VALUE2, etc. Properties of probes are 'name', 'reference', and 'type', and 'subject_ID'. Help for ndi.session.dir/getprobes is inherited from superclass ndi.session gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.DIR, NDI.SESSION.DIR/EQ, NDI.SESSION.DIR/GE, NDI.SESSION.DIR/LE, NDI.SESSION.DIR/LT, NDI.SESSION.DIR/NE Help for ndi.session.dir/gt is inherited from superclass handle id - return the identifier of an ndi.session object IDENTIFIER = ID(NDI_SESSION_OBJ) Returns the unique identifier of an ndi.session object. Help for ndi.session.dir/id is inherited from superclass ndi.session ingest - ingest the raw data and synchronization information into the database [B,ERRMSG] = INGEST(NDI_SESSION_OBJ) Ingest all raw data and synchronization information into the database. Help for ndi.session.dir/ingest is inherited from superclass ndi.session is_fully_ingested - is an ndi.session object fully ingested? B = IS_FULLY_INGESTED(NDI_SESSION_OBJ) Returns 1 if the ndi.session object NDI_SESSION_OBJ is fully ingested and 0 if there are still elements on disk that would need to be ingested by NDI_SESSION_OBJ.ingest() in order to be fully ingested. Help for ndi.session.dir/is_fully_ingested is inherited from superclass ndi.session isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.SESSION.DIR, NDI.SESSION.DIR/DELETE Help for ndi.session.dir/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.DIR, NDI.SESSION.DIR/EQ, NDI.SESSION.DIR/GE, NDI.SESSION.DIR/GT, NDI.SESSION.DIR/LT, NDI.SESSION.DIR/NE Help for ndi.session.dir/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.session.dir, matlab.metadata.Property, events Help for ndi.session.dir/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.DIR, NDI.SESSION.DIR/EQ, NDI.SESSION.DIR/GE, NDI.SESSION.DIR/GT, NDI.SESSION.DIR/LE, NDI.SESSION.DIR/NE Help for ndi.session.dir/lt is inherited from superclass handle ndipathname - Return the path of the NDI files within the session P = NDIPATHNAME(NDI_SESSION_DIR_OBJ) Returns the pathname to the NDI files in the ndi.session.dir object. It is the ndi.session.dir object's path plus [filesep '.ndi' ] ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.DIR, NDI.SESSION.DIR/EQ, NDI.SESSION.DIR/GE, NDI.SESSION.DIR/GT, NDI.SESSION.DIR/LE, NDI.SESSION.DIR/LT Help for ndi.session.dir/ne is inherited from superclass handle newdocument - create a new ndi.database document of type ndi.document NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_SESSION_OBJ, [DOCUMENT_TYPE], 'PROPERTY1', VALUE1, ...) Creates an empty database document NDI_DOCUMENT_OBJ. DOCUMENT_TYPE is an optional argument and can be any type that confirms to the .json files in $NDI_COMMON/database_documents/*, a URL to such a file, or a full path filename. If DOCUMENT_TYPE is not specified, it is taken to be 'base'. If additional PROPERTY values are specified, they are set to the VALUES indicated. Example: mydoc = ndi_session_obj.newdocument('base','base.name','myname'); Help for ndi.session.dir/newdocument is inherited from superclass ndi.session notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.SESSION.DIR, NDI.SESSION.DIR/ADDLISTENER, NDI.SESSION.DIR/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.session.dir/notify is inherited from superclass handle searchquery - return a search query for database objects in this session SQ = SEARCHQUERY(NDI_SESSION_OBJ) Returns a search query that will match all ndi.document objects that were generated by this session. SQ = {'base.session_id', ndi_session_obj.id()}; Example: mydoc = ndi_session_obj.newdocument('base','base.name','myname'); Help for ndi.session.dir/searchquery is inherited from superclass ndi.session syncgraph_addrule - add an ndi.time.syncrule to the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_ADDRULE(NDI_SESSION_OBJ, RULE) Adds the ndi.time.syncrule RULE to the ndi.time.syncgraph of the ndi.session object NDI_SESSION_OBJ. Help for ndi.session.dir/syncgraph_addrule is inherited from superclass ndi.session syncgraph_rmrule - remove an ndi.time.syncrule from the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_RMRULE(NDI_SESSION_OBJ, INDEX) Removes the INDEXth ndi.time.syncrule from the ndi.time.syncgraph of the ndi.session object NDI_SESSION_OBJ. Help for ndi.session.dir/syncgraph_rmrule is inherited from superclass ndi.session unique_reference_string - return the unique reference string for this session REFSTR = UNIQUE_REFERENCE_STRING(NDI_SESSION_OBJ) Returns the unique reference string for the ndi.session. REFSTR is a combination of the REFERENCE property of NDI_SESSION_OBJ and the UNIQUE_REFERENCE property of NDI_SESSION_OBJ, joined with a '_'. If you just want the reference (not unique) just access the reference property (NDI_SESSION_OBJ.reference). Help for ndi.session.dir/unique_reference_string is inherited from superclass ndi.session validate_documents - validate whether documents belong to a session [B, ERRMSG] = VALIDATE_DOCUMENTS(NDI_SESSION_OBJ, DOCUMENT) Given an ndi.document DOCUMENT or a cell array of ndi.documents DOCUMENT, determines whether all document session_ids match the sessions's id. An 'empty' session_id (all 0s, ndi.session.empty_id() ) also matches. Help for ndi.session.dir/validate_documents is inherited from superclass ndi.session","title":"ndi.session.dir"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/dir.m/#class-ndisessiondir","text":"NDI_SESSION_DIR - NDI_SESSION_DIR object class - an session with an associated file directory","title":"CLASS ndi.session.dir"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/dir.m/#superclasses","text":"ndi.session , handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/dir.m/#properties","text":"Property Description path the file path of the session reference identifier syncgraph cache","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/dir.m/#methods","text":"Method Description addlistener addlistener Add listener for event. all_docs_in_session determines if a set of ndi documents are in a session creator_args return the arguments needed to build an ndi.session object daqsystem_add Add a sampling device to a ndi.session object daqsystem_clear remove all DAQSYSTEM objects from an ndi.session daqsystem_load Load daqsystem objects from an ndi.session daqsystem_rm Remove a sampling device from an ndi.session object database_add Add an ndi.document to an ndi.session object database_clear deletes/removes all entries from the database associated with an session database_closebinarydoc close an ndi.database.binarydoc database_existbinarydoc checks if an ndi.database.binarydoc exists for an ndi.document database_openbinarydoc open the ndi.database.binarydoc channel of an ndi.document database_rm Remove an ndi.document with a given document ID from an ndi.session object database_search Search for an ndi.document in a database of an ndi.session object delete DELETE Delete a handle object. dir Create a new ndi.session.dir ndi_session_dir_object docinput2docs convert an array of ndi.documents or doc_ids to documents eq Are two ndi.session.dir objects equivalent? findexpobj search an ndi.session for a specific object given name and classname findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. get_ingested_docs get all ndi.documents related to ingested data getelements Return all ndi.element objects that are found in session database getpath Return the path of the session getprobes Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries gt > (GT) Greater than relation for handles. id return the identifier of an ndi.session object ingest ingest the raw data and synchronization information into the database is_fully_ingested is an ndi.session object fully ingested? isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ndipathname Return the path of the NDI files within the session ne ~= (NE) Not equal relation for handles. newdocument create a new ndi.database document of type ndi.document notify NOTIFY Notify listeners of event. searchquery return a search query for database objects in this session syncgraph_addrule add an ndi.time.syncrule to the syncgraph syncgraph_rmrule remove an ndi.time.syncrule from the syncgraph unique_reference_string return the unique reference string for this session validate_documents validate whether documents belong to a session","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/dir.m/#methods-help","text":"addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.session.dir, matlab.metadata.Property, events Help for ndi.session.dir/addlistener is inherited from superclass handle all_docs_in_session - determines if a set of ndi documents are in a session [B,ERRMSG] = ALL_DOCS_IN_SESSION(DOCS, SESSION_ID) B is 1 if the base.session_id field of all ndi.document objects in the cell array DOCS match session_id. If so, ERRMSG is empty. Otherwise, ERRMSG lists the documents that are not in the session. Help for ndi.session.dir.all_docs_in_session is inherited from superclass ndi.session creator_args - return the arguments needed to build an ndi.session object INPUTS = CREATOR_ARGS(NDI_SESSION_OBJ) Return the inputs necessary to create an ndi.session object. Each input argument is returned as an entry in the cell array INPUTS. Example: INPUTS = ndi_session_obj.creator_args(); ndi_session_copy = ndi.session(INPUTS{:}); daqsystem_add - Add a sampling device to a ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_ADD(NDI_SESSION_OBJ, DEV) Adds the device DEV to the ndi.session NDI_SESSION_OBJ The devices can be accessed by referencing NDI_SESSION_OBJ.device See also: DAQSYSTEM_RM, ndi.session.dir Help for ndi.session.dir/daqsystem_add is inherited from superclass ndi.session daqsystem_clear - remove all DAQSYSTEM objects from an ndi.session NDI_SESSION_OBJ = DAQSYSTEM_CLEAR(NDI_SESSION_OBJ) Permanently removes all ndi.daq.system objects from an ndi.session. Be sure you mean it! Help for ndi.session.dir/daqsystem_clear is inherited from superclass ndi.session daqsystem_load - Load daqsystem objects from an ndi.session DEV = DAQSYSTEM_LOAD(NDI_SESSION_OBJ, PARAM1, VALUE1, PARAM2, VALUE2, ...) or DEV = DAQSYSTEM_LOAD(NDI_SESSION_OBJ) Returns the ndi.daq.system objects in the ndi.session with metadata parameters PARAMS1 that matches VALUE1, PARAMS2 that matches VALUE2, etc. One can also search for 'name' as a parameter; this will be automatically changed to search for database documents with fields 'base.name' equal to the corresponding value. If more than one object is requested, then DEV will be a cell list of matching objects. Otherwise, the object will be a single element. If there are no matches, empty ([]) is returned. Help for ndi.session.dir/daqsystem_load is inherited from superclass ndi.session daqsystem_rm - Remove a sampling device from an ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_RM(NDI_SESSION_OBJ, DEV) Removes the device DEV from the device list. See also: DAQSYSTEM_ADD, ndi.session.dir Help for ndi.session.dir/daqsystem_rm is inherited from superclass ndi.session database_add - Add an ndi.document to an ndi.session object NDI_SESSION_OBJ = DATABASE_ADD(NDI_SESSION_OBJ, NDI_DOCUMENT_OBJ) Adds the ndi.document NDI_DOCUMENT_OBJ to the ndi.session NDI_SESSION_OBJ. NDI_DOCUMENT_OBJ can also be a cell array of ndi.document objects, which will all be added in turn. The database can be queried by calling NDI_SESSION_OBJ/SEARCH See also: DATABASE_RM, ndi.session.dir, ndi.database, ndi.session.dir/SEARCH Help for ndi.session.dir/database_add is inherited from superclass ndi.session database_clear - deletes/removes all entries from the database associated with an session DATABASE_CLEAR(NDI_SESSION_OBJ, AREYOUSURE) Removes all documents from the NDI_SESSION_OBJ object. Use with care. If AREYOUSURE is 'yes' then the function will proceed. Otherwise, it will not. Help for ndi.session.dir/database_clear is inherited from superclass ndi.session database_closebinarydoc - close an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = DATABASE_CLOSEBINARYDOC(NDI_SESSION_OBJ, NDI_BINARYDOC_OBJ) Close an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be closed in the database, which is why it is necessary to call this function through the session object. Help for ndi.session.dir/database_closebinarydoc is inherited from superclass ndi.session database_existbinarydoc - checks if an ndi.database.binarydoc exists for an ndi.document [TF, FILE_PATH] = DATABASE_EXISTBINARYDOC(NDI_SESSION_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. Help for ndi.session.dir/database_existbinarydoc is inherited from superclass ndi.session database_openbinarydoc - open the ndi.database.binarydoc channel of an ndi.document NDI_BINARYDOC_OBJ = DATABASE_OPENBINARYDOC(NDI_SESSION_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return the open ndi.database.binarydoc object that corresponds to an ndi.document and NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself. The document is opened for reading only. Document binary streams may not be edited once the document is added to the database. Note that this NDI_BINARYDOC_OBJ must be closed with ndi.session/CLOSEBINARYDOC. Help for ndi.session.dir/database_openbinarydoc is inherited from superclass ndi.session database_rm - Remove an ndi.document with a given document ID from an ndi.session object NDI_SESSION_OBJ = DATABASE_RM(NDI_SESSION_OBJ, DOC_UNIQUE_ID) or NDI_SESSION_OBJ = DATABASE_RM(NDI_SESSION_OBJ, DOC) Removes an ndi.document with document id DOC_UNIQUE_ID from the NDI_SESSION_OBJ.database. In the second form, if an ndi.document or cell array of NDI_DOCUMENTS is passed for DOC, then the document unique ids are retrieved and they are removed in turn. If DOC/DOC_UNIQUE_ID is empty, no action is taken. This function also takes parameters as name/value pairs that modify its behavior: Parameter (default) | Description -------------------------------------------------------------------------------- ErrIfNotFound (0) | Produce an error if an ID to be deleted is not found. See also: DATABASE_ADD, ndi.session.dir Help for ndi.session.dir/database_rm is inherited from superclass ndi.session database_search - Search for an ndi.document in a database of an ndi.session object NDI_DOCUMENT_OBJ = DATABASE_SEARCH(NDI_SESSION_OBJ, SEARCHPARAMETERS) Given search parameters, which are a cell list {'PARAM1', VALUE1, 'PARAM2, VALUE2, ...}, the database associated with the ndi.session object is searched. Matches are returned in a cell list NDI_DOCUMENT_OBJ. Help for ndi.session.dir/database_search is inherited from superclass ndi.session delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.SESSION.DIR, NDI.SESSION.DIR/ISVALID, CLEAR Help for ndi.session.dir/delete is inherited from superclass handle dir - Create a new ndi.session.dir ndi_session_dir_object E = ndi.session.dir(REFERENCE, PATHNAME) Creates an ndi.session.dir ndi_session_dir_object, or an session with an associated directory. REFERENCE should be a unique reference for the session and directory PATHNAME. One can also open an existing session by using E = ndi.session.dir(PATHNAME) See also: ndi.session, ndi.session.dir/GETPATH Documentation for ndi.session.dir/dir doc ndi.session.dir docinput2docs - convert an array of ndi.documents or doc_ids to documents [DOC_LIST,B,ERRMSG] = DOCINPUT2DOCS(NDI_SESSION_OBJ, DOC_INPUT) Given an input DOC_INPUT that specifies ndi.document objects, return the list of ndi.document objects. DOC_INPUT can be a single document id (character array), or a single ndi.document, or a cell array of document ids or a cell array of ndi.documents, or a mixed cell array of ndi.document objects and ids. If all documents are found, then B is 1 and ERRMSG is ''. If a document ID does not exist in the database, then one occurrence is noted in ERRMSG and B is 0. Help for ndi.session.dir.docinput2docs is inherited from superclass ndi.session eq - Are two ndi.session.dir objects equivalent? B = EQ(NDI_SESSION_DIR_OBJ_A, NDI_SESSION_DIR_OBJ_B) Returns 1 if the two ndi.session.dir objects have the same path and reference fields. They do not have to be the same handles (that is, have the same location in memory). findexpobj - search an ndi.session for a specific object given name and classname OBJ = FINDEXPOBJ(NDI_EXPERIMNENT_OBJ, OBJ_NAME, OBJ_CLASSNAME) Examines the DAQSYSTEM list, DATABASE, and PROBELIST for an object with name OBJ_NAME and classname OBJ_CLASSNAME. If no object is found, OBJ will be empty ([]). Help for ndi.session.dir/findexpobj is inherited from superclass ndi.session findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.SESSION.DIR Help for ndi.session.dir/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.session.dir, ndi.session.dir/findobj, dynamicprops, matlab.metadata.Property Help for ndi.session.dir/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.DIR, NDI.SESSION.DIR/EQ, NDI.SESSION.DIR/GT, NDI.SESSION.DIR/LE, NDI.SESSION.DIR/LT, NDI.SESSION.DIR/NE Help for ndi.session.dir/ge is inherited from superclass handle get_ingested_docs - get all ndi.documents related to ingested data D = GET_INGESTED_DOCS(NDI_SESSION_OBJ) Return all documents related to ingested data. Be careful; if the raw data is not available on the path, then the ingested data is the only record of it. Help for ndi.session.dir/get_ingested_docs is inherited from superclass ndi.session getelements - Return all ndi.element objects that are found in session database ELEMENTS = GETELEMENTS(NDI_SESSION_OBJ, ...) Examines all the database of NDI_SESSION_OBJ and returns all ndi.element entries. ELEMENTS is a cell array of ndi.element.* objects. ELEMENTS = GETELEMENTS(NDI_SESSION_OBJ, 'PROP1', VALUE1, 'PROP2', VALUE2...) returns only those probes for which 'PROP1' has a value of VALUE1, 'PROP2' has a value of VALUE2, etc. Properties of elements are 'element.name', 'element.type', 'element.direct', and 'probe.name', 'probe.type', and 'probe.reference'. Help for ndi.session.dir/getelements is inherited from superclass ndi.session getpath - Return the path of the session P = GETPATH(NDI_SESSION_DIR_OBJ) Returns the path of an ndi.session.dir object. The path is some sort of reference to the storage location of the session. This might be a URL, or a file directory. getprobes - Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries PROBES = GETPROBES(NDI_SESSION_OBJ, ...) Examines all ndi.daq.system entries in the NDI_SESSION_OBJ's device array and returns all ndi.probe.* entries that can be constructed from each device's ndi.epoch.epochprobemap entries. PROBES is a cell array of ndi.probe.* objects. One can pass additional arguments that specify the classnames of the probes that are returned: PROBES = GETPROBES(NDI_SESSION_OBJ, CLASSMATCH ) only probes that are members of the classes CLASSMATCH etc., are returned. PROBES = GETPROBES(NDI_SESSION_OBJ, 'PROP1', VALUE1, 'PROP2', VALUE2...) returns only those probes for which 'PROP1' has a value of VALUE1, 'PROP2' has a value of VALUE2, etc. Properties of probes are 'name', 'reference', and 'type', and 'subject_ID'. Help for ndi.session.dir/getprobes is inherited from superclass ndi.session gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.DIR, NDI.SESSION.DIR/EQ, NDI.SESSION.DIR/GE, NDI.SESSION.DIR/LE, NDI.SESSION.DIR/LT, NDI.SESSION.DIR/NE Help for ndi.session.dir/gt is inherited from superclass handle id - return the identifier of an ndi.session object IDENTIFIER = ID(NDI_SESSION_OBJ) Returns the unique identifier of an ndi.session object. Help for ndi.session.dir/id is inherited from superclass ndi.session ingest - ingest the raw data and synchronization information into the database [B,ERRMSG] = INGEST(NDI_SESSION_OBJ) Ingest all raw data and synchronization information into the database. Help for ndi.session.dir/ingest is inherited from superclass ndi.session is_fully_ingested - is an ndi.session object fully ingested? B = IS_FULLY_INGESTED(NDI_SESSION_OBJ) Returns 1 if the ndi.session object NDI_SESSION_OBJ is fully ingested and 0 if there are still elements on disk that would need to be ingested by NDI_SESSION_OBJ.ingest() in order to be fully ingested. Help for ndi.session.dir/is_fully_ingested is inherited from superclass ndi.session isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.SESSION.DIR, NDI.SESSION.DIR/DELETE Help for ndi.session.dir/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.DIR, NDI.SESSION.DIR/EQ, NDI.SESSION.DIR/GE, NDI.SESSION.DIR/GT, NDI.SESSION.DIR/LT, NDI.SESSION.DIR/NE Help for ndi.session.dir/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.session.dir, matlab.metadata.Property, events Help for ndi.session.dir/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.DIR, NDI.SESSION.DIR/EQ, NDI.SESSION.DIR/GE, NDI.SESSION.DIR/GT, NDI.SESSION.DIR/LE, NDI.SESSION.DIR/NE Help for ndi.session.dir/lt is inherited from superclass handle ndipathname - Return the path of the NDI files within the session P = NDIPATHNAME(NDI_SESSION_DIR_OBJ) Returns the pathname to the NDI files in the ndi.session.dir object. It is the ndi.session.dir object's path plus [filesep '.ndi' ] ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.DIR, NDI.SESSION.DIR/EQ, NDI.SESSION.DIR/GE, NDI.SESSION.DIR/GT, NDI.SESSION.DIR/LE, NDI.SESSION.DIR/LT Help for ndi.session.dir/ne is inherited from superclass handle newdocument - create a new ndi.database document of type ndi.document NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_SESSION_OBJ, [DOCUMENT_TYPE], 'PROPERTY1', VALUE1, ...) Creates an empty database document NDI_DOCUMENT_OBJ. DOCUMENT_TYPE is an optional argument and can be any type that confirms to the .json files in $NDI_COMMON/database_documents/*, a URL to such a file, or a full path filename. If DOCUMENT_TYPE is not specified, it is taken to be 'base'. If additional PROPERTY values are specified, they are set to the VALUES indicated. Example: mydoc = ndi_session_obj.newdocument('base','base.name','myname'); Help for ndi.session.dir/newdocument is inherited from superclass ndi.session notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.SESSION.DIR, NDI.SESSION.DIR/ADDLISTENER, NDI.SESSION.DIR/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.session.dir/notify is inherited from superclass handle searchquery - return a search query for database objects in this session SQ = SEARCHQUERY(NDI_SESSION_OBJ) Returns a search query that will match all ndi.document objects that were generated by this session. SQ = {'base.session_id', ndi_session_obj.id()}; Example: mydoc = ndi_session_obj.newdocument('base','base.name','myname'); Help for ndi.session.dir/searchquery is inherited from superclass ndi.session syncgraph_addrule - add an ndi.time.syncrule to the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_ADDRULE(NDI_SESSION_OBJ, RULE) Adds the ndi.time.syncrule RULE to the ndi.time.syncgraph of the ndi.session object NDI_SESSION_OBJ. Help for ndi.session.dir/syncgraph_addrule is inherited from superclass ndi.session syncgraph_rmrule - remove an ndi.time.syncrule from the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_RMRULE(NDI_SESSION_OBJ, INDEX) Removes the INDEXth ndi.time.syncrule from the ndi.time.syncgraph of the ndi.session object NDI_SESSION_OBJ. Help for ndi.session.dir/syncgraph_rmrule is inherited from superclass ndi.session unique_reference_string - return the unique reference string for this session REFSTR = UNIQUE_REFERENCE_STRING(NDI_SESSION_OBJ) Returns the unique reference string for the ndi.session. REFSTR is a combination of the REFERENCE property of NDI_SESSION_OBJ and the UNIQUE_REFERENCE property of NDI_SESSION_OBJ, joined with a '_'. If you just want the reference (not unique) just access the reference property (NDI_SESSION_OBJ.reference). Help for ndi.session.dir/unique_reference_string is inherited from superclass ndi.session validate_documents - validate whether documents belong to a session [B, ERRMSG] = VALIDATE_DOCUMENTS(NDI_SESSION_OBJ, DOCUMENT) Given an ndi.document DOCUMENT or a cell array of ndi.documents DOCUMENT, determines whether all document session_ids match the sessions's id. An 'empty' session_id (all 0s, ndi.session.empty_id() ) also matches. Help for ndi.session.dir/validate_documents is inherited from superclass ndi.session","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/empty_id.m/","text":"ndi.session.empty_id EMPTY_ID - produce the empty session id ID = ndi.session.empty_id() Produce a string that indicates \"no specific session\" or \"applies in any session\". The string is '0000000000000000_0000000000000000'","title":"ndi.session.empty_id"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/empty_id.m/#ndisessionempty_id","text":"EMPTY_ID - produce the empty session id ID = ndi.session.empty_id() Produce a string that indicates \"no specific session\" or \"applies in any session\". The string is '0000000000000000_0000000000000000'","title":"ndi.session.empty_id"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/mock.m/","text":"CLASS ndi.session.mock ndi.session.mock - a mock session class for testing Superclasses ndi.session.dir , ndi.session , handle Properties Property Description path reference identifier syncgraph cache Methods Method Description addlistener addlistener Add listener for event. all_docs_in_session determines if a set of ndi documents are in a session creator_args return the arguments needed to build an ndi.session object daqsystem_add Add a sampling device to a ndi.session object daqsystem_clear remove all DAQSYSTEM objects from an ndi.session daqsystem_load Load daqsystem objects from an ndi.session daqsystem_rm Remove a sampling device from an ndi.session object database_add Add an ndi.document to an ndi.session object database_clear deletes/removes all entries from the database associated with an session database_closebinarydoc close an ndi.database.binarydoc database_existbinarydoc checks if an ndi.database.binarydoc exists for an ndi.document database_openbinarydoc open the ndi.database.binarydoc channel of an ndi.document database_rm Remove an ndi.document with a given document ID from an ndi.session object database_search Search for an ndi.document in a database of an ndi.session object delete DELETE Delete a handle object. docinput2docs convert an array of ndi.documents or doc_ids to documents eq Are two ndi.session.dir objects equivalent? findexpobj search an ndi.session for a specific object given name and classname findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. get_ingested_docs get all ndi.documents related to ingested data getelements Return all ndi.element objects that are found in session database getpath Return the path of the session getprobes Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries gt > (GT) Greater than relation for handles. id return the identifier of an ndi.session object ingest ingest the raw data and synchronization information into the database is_fully_ingested is an ndi.session object fully ingested? isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. mock Create a new ndi.session.mock object ndipathname Return the path of the NDI files within the session ne ~= (NE) Not equal relation for handles. newdocument create a new ndi.database document of type ndi.document notify NOTIFY Notify listeners of event. searchquery return a search query for database objects in this session syncgraph_addrule add an ndi.time.syncrule to the syncgraph syncgraph_rmrule remove an ndi.time.syncrule from the syncgraph unique_reference_string return the unique reference string for this session validate_documents validate whether documents belong to a session Methods help addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.session.mock, matlab.metadata.Property, events Help for ndi.session.mock/addlistener is inherited from superclass handle all_docs_in_session - determines if a set of ndi documents are in a session [B,ERRMSG] = ALL_DOCS_IN_SESSION(DOCS, SESSION_ID) B is 1 if the base.session_id field of all ndi.document objects in the cell array DOCS match session_id. If so, ERRMSG is empty. Otherwise, ERRMSG lists the documents that are not in the session. Help for ndi.session.mock.all_docs_in_session is inherited from superclass ndi.session creator_args - return the arguments needed to build an ndi.session object INPUTS = CREATOR_ARGS(NDI_SESSION_OBJ) Return the inputs necessary to create an ndi.session object. Each input argument is returned as an entry in the cell array INPUTS. Example: INPUTS = ndi_session_obj.creator_args(); ndi_session_copy = ndi.session(INPUTS{:}); Help for ndi.session.mock/creator_args is inherited from superclass ndi.session.dir daqsystem_add - Add a sampling device to a ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_ADD(NDI_SESSION_OBJ, DEV) Adds the device DEV to the ndi.session NDI_SESSION_OBJ The devices can be accessed by referencing NDI_SESSION_OBJ.device See also: DAQSYSTEM_RM, ndi.session.mock Help for ndi.session.mock/daqsystem_add is inherited from superclass ndi.session daqsystem_clear - remove all DAQSYSTEM objects from an ndi.session NDI_SESSION_OBJ = DAQSYSTEM_CLEAR(NDI_SESSION_OBJ) Permanently removes all ndi.daq.system objects from an ndi.session. Be sure you mean it! Help for ndi.session.mock/daqsystem_clear is inherited from superclass ndi.session daqsystem_load - Load daqsystem objects from an ndi.session DEV = DAQSYSTEM_LOAD(NDI_SESSION_OBJ, PARAM1, VALUE1, PARAM2, VALUE2, ...) or DEV = DAQSYSTEM_LOAD(NDI_SESSION_OBJ) Returns the ndi.daq.system objects in the ndi.session with metadata parameters PARAMS1 that matches VALUE1, PARAMS2 that matches VALUE2, etc. One can also search for 'name' as a parameter; this will be automatically changed to search for database documents with fields 'base.name' equal to the corresponding value. If more than one object is requested, then DEV will be a cell list of matching objects. Otherwise, the object will be a single element. If there are no matches, empty ([]) is returned. Help for ndi.session.mock/daqsystem_load is inherited from superclass ndi.session daqsystem_rm - Remove a sampling device from an ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_RM(NDI_SESSION_OBJ, DEV) Removes the device DEV from the device list. See also: DAQSYSTEM_ADD, ndi.session.mock Help for ndi.session.mock/daqsystem_rm is inherited from superclass ndi.session database_add - Add an ndi.document to an ndi.session object NDI_SESSION_OBJ = DATABASE_ADD(NDI_SESSION_OBJ, NDI_DOCUMENT_OBJ) Adds the ndi.document NDI_DOCUMENT_OBJ to the ndi.session NDI_SESSION_OBJ. NDI_DOCUMENT_OBJ can also be a cell array of ndi.document objects, which will all be added in turn. The database can be queried by calling NDI_SESSION_OBJ/SEARCH See also: DATABASE_RM, ndi.session.mock, ndi.database, ndi.session.mock/SEARCH Help for ndi.session.mock/database_add is inherited from superclass ndi.session database_clear - deletes/removes all entries from the database associated with an session DATABASE_CLEAR(NDI_SESSION_OBJ, AREYOUSURE) Removes all documents from the NDI_SESSION_OBJ object. Use with care. If AREYOUSURE is 'yes' then the function will proceed. Otherwise, it will not. Help for ndi.session.mock/database_clear is inherited from superclass ndi.session database_closebinarydoc - close an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = DATABASE_CLOSEBINARYDOC(NDI_SESSION_OBJ, NDI_BINARYDOC_OBJ) Close an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be closed in the database, which is why it is necessary to call this function through the session object. Help for ndi.session.mock/database_closebinarydoc is inherited from superclass ndi.session database_existbinarydoc - checks if an ndi.database.binarydoc exists for an ndi.document [TF, FILE_PATH] = DATABASE_EXISTBINARYDOC(NDI_SESSION_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. Help for ndi.session.mock/database_existbinarydoc is inherited from superclass ndi.session database_openbinarydoc - open the ndi.database.binarydoc channel of an ndi.document NDI_BINARYDOC_OBJ = DATABASE_OPENBINARYDOC(NDI_SESSION_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return the open ndi.database.binarydoc object that corresponds to an ndi.document and NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself. The document is opened for reading only. Document binary streams may not be edited once the document is added to the database. Note that this NDI_BINARYDOC_OBJ must be closed with ndi.session/CLOSEBINARYDOC. Help for ndi.session.mock/database_openbinarydoc is inherited from superclass ndi.session database_rm - Remove an ndi.document with a given document ID from an ndi.session object NDI_SESSION_OBJ = DATABASE_RM(NDI_SESSION_OBJ, DOC_UNIQUE_ID) or NDI_SESSION_OBJ = DATABASE_RM(NDI_SESSION_OBJ, DOC) Removes an ndi.document with document id DOC_UNIQUE_ID from the NDI_SESSION_OBJ.database. In the second form, if an ndi.document or cell array of NDI_DOCUMENTS is passed for DOC, then the document unique ids are retrieved and they are removed in turn. If DOC/DOC_UNIQUE_ID is empty, no action is taken. This function also takes parameters as name/value pairs that modify its behavior: Parameter (default) | Description -------------------------------------------------------------------------------- ErrIfNotFound (0) | Produce an error if an ID to be deleted is not found. See also: DATABASE_ADD, ndi.session.mock Help for ndi.session.mock/database_rm is inherited from superclass ndi.session database_search - Search for an ndi.document in a database of an ndi.session object NDI_DOCUMENT_OBJ = DATABASE_SEARCH(NDI_SESSION_OBJ, SEARCHPARAMETERS) Given search parameters, which are a cell list {'PARAM1', VALUE1, 'PARAM2, VALUE2, ...}, the database associated with the ndi.session object is searched. Matches are returned in a cell list NDI_DOCUMENT_OBJ. Help for ndi.session.mock/database_search is inherited from superclass ndi.session delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/ISVALID, CLEAR Help for ndi.session.mock/delete is inherited from superclass handle docinput2docs - convert an array of ndi.documents or doc_ids to documents [DOC_LIST,B,ERRMSG] = DOCINPUT2DOCS(NDI_SESSION_OBJ, DOC_INPUT) Given an input DOC_INPUT that specifies ndi.document objects, return the list of ndi.document objects. DOC_INPUT can be a single document id (character array), or a single ndi.document, or a cell array of document ids or a cell array of ndi.documents, or a mixed cell array of ndi.document objects and ids. If all documents are found, then B is 1 and ERRMSG is ''. If a document ID does not exist in the database, then one occurrence is noted in ERRMSG and B is 0. Help for ndi.session.mock.docinput2docs is inherited from superclass ndi.session eq - Are two ndi.session.dir objects equivalent? B = EQ(NDI_SESSION_DIR_OBJ_A, NDI_SESSION_DIR_OBJ_B) Returns 1 if the two ndi.session.dir objects have the same path and reference fields. They do not have to be the same handles (that is, have the same location in memory). Help for ndi.session.mock/eq is inherited from superclass ndi.session.dir findexpobj - search an ndi.session for a specific object given name and classname OBJ = FINDEXPOBJ(NDI_EXPERIMNENT_OBJ, OBJ_NAME, OBJ_CLASSNAME) Examines the DAQSYSTEM list, DATABASE, and PROBELIST for an object with name OBJ_NAME and classname OBJ_CLASSNAME. If no object is found, OBJ will be empty ([]). Help for ndi.session.mock/findexpobj is inherited from superclass ndi.session findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.SESSION.MOCK Help for ndi.session.mock/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.session.mock, ndi.session.mock/findobj, dynamicprops, matlab.metadata.Property Help for ndi.session.mock/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/EQ, NDI.SESSION.MOCK/GT, NDI.SESSION.MOCK/LE, NDI.SESSION.MOCK/LT, NDI.SESSION.MOCK/NE Help for ndi.session.mock/ge is inherited from superclass handle get_ingested_docs - get all ndi.documents related to ingested data D = GET_INGESTED_DOCS(NDI_SESSION_OBJ) Return all documents related to ingested data. Be careful; if the raw data is not available on the path, then the ingested data is the only record of it. Help for ndi.session.mock/get_ingested_docs is inherited from superclass ndi.session getelements - Return all ndi.element objects that are found in session database ELEMENTS = GETELEMENTS(NDI_SESSION_OBJ, ...) Examines all the database of NDI_SESSION_OBJ and returns all ndi.element entries. ELEMENTS is a cell array of ndi.element.* objects. ELEMENTS = GETELEMENTS(NDI_SESSION_OBJ, 'PROP1', VALUE1, 'PROP2', VALUE2...) returns only those probes for which 'PROP1' has a value of VALUE1, 'PROP2' has a value of VALUE2, etc. Properties of elements are 'element.name', 'element.type', 'element.direct', and 'probe.name', 'probe.type', and 'probe.reference'. Help for ndi.session.mock/getelements is inherited from superclass ndi.session getpath - Return the path of the session P = GETPATH(NDI_SESSION_DIR_OBJ) Returns the path of an ndi.session.dir object. The path is some sort of reference to the storage location of the session. This might be a URL, or a file directory. Help for ndi.session.mock/getpath is inherited from superclass ndi.session.dir getprobes - Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries PROBES = GETPROBES(NDI_SESSION_OBJ, ...) Examines all ndi.daq.system entries in the NDI_SESSION_OBJ's device array and returns all ndi.probe.* entries that can be constructed from each device's ndi.epoch.epochprobemap entries. PROBES is a cell array of ndi.probe.* objects. One can pass additional arguments that specify the classnames of the probes that are returned: PROBES = GETPROBES(NDI_SESSION_OBJ, CLASSMATCH ) only probes that are members of the classes CLASSMATCH etc., are returned. PROBES = GETPROBES(NDI_SESSION_OBJ, 'PROP1', VALUE1, 'PROP2', VALUE2...) returns only those probes for which 'PROP1' has a value of VALUE1, 'PROP2' has a value of VALUE2, etc. Properties of probes are 'name', 'reference', and 'type', and 'subject_ID'. Help for ndi.session.mock/getprobes is inherited from superclass ndi.session gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/EQ, NDI.SESSION.MOCK/GE, NDI.SESSION.MOCK/LE, NDI.SESSION.MOCK/LT, NDI.SESSION.MOCK/NE Help for ndi.session.mock/gt is inherited from superclass handle id - return the identifier of an ndi.session object IDENTIFIER = ID(NDI_SESSION_OBJ) Returns the unique identifier of an ndi.session object. Help for ndi.session.mock/id is inherited from superclass ndi.session ingest - ingest the raw data and synchronization information into the database [B,ERRMSG] = INGEST(NDI_SESSION_OBJ) Ingest all raw data and synchronization information into the database. Help for ndi.session.mock/ingest is inherited from superclass ndi.session is_fully_ingested - is an ndi.session object fully ingested? B = IS_FULLY_INGESTED(NDI_SESSION_OBJ) Returns 1 if the ndi.session object NDI_SESSION_OBJ is fully ingested and 0 if there are still elements on disk that would need to be ingested by NDI_SESSION_OBJ.ingest() in order to be fully ingested. Help for ndi.session.mock/is_fully_ingested is inherited from superclass ndi.session isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/DELETE Help for ndi.session.mock/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/EQ, NDI.SESSION.MOCK/GE, NDI.SESSION.MOCK/GT, NDI.SESSION.MOCK/LT, NDI.SESSION.MOCK/NE Help for ndi.session.mock/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.session.mock, matlab.metadata.Property, events Help for ndi.session.mock/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/EQ, NDI.SESSION.MOCK/GE, NDI.SESSION.MOCK/GT, NDI.SESSION.MOCK/LE, NDI.SESSION.MOCK/NE Help for ndi.session.mock/lt is inherited from superclass handle mock - Create a new ndi.session.mock object S = ndi.session.mock(); Creates an ndi.session.mock object with the following: a) a temporary path, b) a fake subject ('anteater27@nosuchlab.org'), c) a device 'fakedevice', and d) a single epoch. Documentation for ndi.session.mock/mock doc ndi.session.mock ndipathname - Return the path of the NDI files within the session P = NDIPATHNAME(NDI_SESSION_DIR_OBJ) Returns the pathname to the NDI files in the ndi.session.dir object. It is the ndi.session.dir object's path plus [filesep '.ndi' ] Help for ndi.session.mock/ndipathname is inherited from superclass ndi.session.dir ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/EQ, NDI.SESSION.MOCK/GE, NDI.SESSION.MOCK/GT, NDI.SESSION.MOCK/LE, NDI.SESSION.MOCK/LT Help for ndi.session.mock/ne is inherited from superclass handle newdocument - create a new ndi.database document of type ndi.document NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_SESSION_OBJ, [DOCUMENT_TYPE], 'PROPERTY1', VALUE1, ...) Creates an empty database document NDI_DOCUMENT_OBJ. DOCUMENT_TYPE is an optional argument and can be any type that confirms to the .json files in $NDI_COMMON/database_documents/*, a URL to such a file, or a full path filename. If DOCUMENT_TYPE is not specified, it is taken to be 'base'. If additional PROPERTY values are specified, they are set to the VALUES indicated. Example: mydoc = ndi_session_obj.newdocument('base','base.name','myname'); Help for ndi.session.mock/newdocument is inherited from superclass ndi.session notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/ADDLISTENER, NDI.SESSION.MOCK/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.session.mock/notify is inherited from superclass handle searchquery - return a search query for database objects in this session SQ = SEARCHQUERY(NDI_SESSION_OBJ) Returns a search query that will match all ndi.document objects that were generated by this session. SQ = {'base.session_id', ndi_session_obj.id()}; Example: mydoc = ndi_session_obj.newdocument('base','base.name','myname'); Help for ndi.session.mock/searchquery is inherited from superclass ndi.session syncgraph_addrule - add an ndi.time.syncrule to the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_ADDRULE(NDI_SESSION_OBJ, RULE) Adds the ndi.time.syncrule RULE to the ndi.time.syncgraph of the ndi.session object NDI_SESSION_OBJ. Help for ndi.session.mock/syncgraph_addrule is inherited from superclass ndi.session syncgraph_rmrule - remove an ndi.time.syncrule from the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_RMRULE(NDI_SESSION_OBJ, INDEX) Removes the INDEXth ndi.time.syncrule from the ndi.time.syncgraph of the ndi.session object NDI_SESSION_OBJ. Help for ndi.session.mock/syncgraph_rmrule is inherited from superclass ndi.session unique_reference_string - return the unique reference string for this session REFSTR = UNIQUE_REFERENCE_STRING(NDI_SESSION_OBJ) Returns the unique reference string for the ndi.session. REFSTR is a combination of the REFERENCE property of NDI_SESSION_OBJ and the UNIQUE_REFERENCE property of NDI_SESSION_OBJ, joined with a '_'. If you just want the reference (not unique) just access the reference property (NDI_SESSION_OBJ.reference). Help for ndi.session.mock/unique_reference_string is inherited from superclass ndi.session validate_documents - validate whether documents belong to a session [B, ERRMSG] = VALIDATE_DOCUMENTS(NDI_SESSION_OBJ, DOCUMENT) Given an ndi.document DOCUMENT or a cell array of ndi.documents DOCUMENT, determines whether all document session_ids match the sessions's id. An 'empty' session_id (all 0s, ndi.session.empty_id() ) also matches. Help for ndi.session.mock/validate_documents is inherited from superclass ndi.session","title":"ndi.session.mock"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/mock.m/#class-ndisessionmock","text":"ndi.session.mock - a mock session class for testing","title":"CLASS ndi.session.mock"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/mock.m/#superclasses","text":"ndi.session.dir , ndi.session , handle","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/mock.m/#properties","text":"Property Description path reference identifier syncgraph cache","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/mock.m/#methods","text":"Method Description addlistener addlistener Add listener for event. all_docs_in_session determines if a set of ndi documents are in a session creator_args return the arguments needed to build an ndi.session object daqsystem_add Add a sampling device to a ndi.session object daqsystem_clear remove all DAQSYSTEM objects from an ndi.session daqsystem_load Load daqsystem objects from an ndi.session daqsystem_rm Remove a sampling device from an ndi.session object database_add Add an ndi.document to an ndi.session object database_clear deletes/removes all entries from the database associated with an session database_closebinarydoc close an ndi.database.binarydoc database_existbinarydoc checks if an ndi.database.binarydoc exists for an ndi.document database_openbinarydoc open the ndi.database.binarydoc channel of an ndi.document database_rm Remove an ndi.document with a given document ID from an ndi.session object database_search Search for an ndi.document in a database of an ndi.session object delete DELETE Delete a handle object. docinput2docs convert an array of ndi.documents or doc_ids to documents eq Are two ndi.session.dir objects equivalent? findexpobj search an ndi.session for a specific object given name and classname findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. get_ingested_docs get all ndi.documents related to ingested data getelements Return all ndi.element objects that are found in session database getpath Return the path of the session getprobes Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries gt > (GT) Greater than relation for handles. id return the identifier of an ndi.session object ingest ingest the raw data and synchronization information into the database is_fully_ingested is an ndi.session object fully ingested? isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. mock Create a new ndi.session.mock object ndipathname Return the path of the NDI files within the session ne ~= (NE) Not equal relation for handles. newdocument create a new ndi.database document of type ndi.document notify NOTIFY Notify listeners of event. searchquery return a search query for database objects in this session syncgraph_addrule add an ndi.time.syncrule to the syncgraph syncgraph_rmrule remove an ndi.time.syncrule from the syncgraph unique_reference_string return the unique reference string for this session validate_documents validate whether documents belong to a session","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/mock.m/#methods-help","text":"addlistener - addlistener Add listener for event. el = addlistener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = addlistener(hSource, PropName, Eventname, Callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string scalar or character vector. PropName must be a single property name specified as string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one or more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, addlistener returns an event.listener. To remove a listener, delete the object returned by addlistener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. addlistener binds the listener's lifecycle to the object that is the source of the event. Unless you explicitly delete the listener, it is destroyed only when the source object is destroyed. To control the lifecycle of the listener independently from the event source object, use listener or the event.listener constructor to create the listener. See also listener, event.listener, ndi.session.mock, matlab.metadata.Property, events Help for ndi.session.mock/addlistener is inherited from superclass handle all_docs_in_session - determines if a set of ndi documents are in a session [B,ERRMSG] = ALL_DOCS_IN_SESSION(DOCS, SESSION_ID) B is 1 if the base.session_id field of all ndi.document objects in the cell array DOCS match session_id. If so, ERRMSG is empty. Otherwise, ERRMSG lists the documents that are not in the session. Help for ndi.session.mock.all_docs_in_session is inherited from superclass ndi.session creator_args - return the arguments needed to build an ndi.session object INPUTS = CREATOR_ARGS(NDI_SESSION_OBJ) Return the inputs necessary to create an ndi.session object. Each input argument is returned as an entry in the cell array INPUTS. Example: INPUTS = ndi_session_obj.creator_args(); ndi_session_copy = ndi.session(INPUTS{:}); Help for ndi.session.mock/creator_args is inherited from superclass ndi.session.dir daqsystem_add - Add a sampling device to a ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_ADD(NDI_SESSION_OBJ, DEV) Adds the device DEV to the ndi.session NDI_SESSION_OBJ The devices can be accessed by referencing NDI_SESSION_OBJ.device See also: DAQSYSTEM_RM, ndi.session.mock Help for ndi.session.mock/daqsystem_add is inherited from superclass ndi.session daqsystem_clear - remove all DAQSYSTEM objects from an ndi.session NDI_SESSION_OBJ = DAQSYSTEM_CLEAR(NDI_SESSION_OBJ) Permanently removes all ndi.daq.system objects from an ndi.session. Be sure you mean it! Help for ndi.session.mock/daqsystem_clear is inherited from superclass ndi.session daqsystem_load - Load daqsystem objects from an ndi.session DEV = DAQSYSTEM_LOAD(NDI_SESSION_OBJ, PARAM1, VALUE1, PARAM2, VALUE2, ...) or DEV = DAQSYSTEM_LOAD(NDI_SESSION_OBJ) Returns the ndi.daq.system objects in the ndi.session with metadata parameters PARAMS1 that matches VALUE1, PARAMS2 that matches VALUE2, etc. One can also search for 'name' as a parameter; this will be automatically changed to search for database documents with fields 'base.name' equal to the corresponding value. If more than one object is requested, then DEV will be a cell list of matching objects. Otherwise, the object will be a single element. If there are no matches, empty ([]) is returned. Help for ndi.session.mock/daqsystem_load is inherited from superclass ndi.session daqsystem_rm - Remove a sampling device from an ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_RM(NDI_SESSION_OBJ, DEV) Removes the device DEV from the device list. See also: DAQSYSTEM_ADD, ndi.session.mock Help for ndi.session.mock/daqsystem_rm is inherited from superclass ndi.session database_add - Add an ndi.document to an ndi.session object NDI_SESSION_OBJ = DATABASE_ADD(NDI_SESSION_OBJ, NDI_DOCUMENT_OBJ) Adds the ndi.document NDI_DOCUMENT_OBJ to the ndi.session NDI_SESSION_OBJ. NDI_DOCUMENT_OBJ can also be a cell array of ndi.document objects, which will all be added in turn. The database can be queried by calling NDI_SESSION_OBJ/SEARCH See also: DATABASE_RM, ndi.session.mock, ndi.database, ndi.session.mock/SEARCH Help for ndi.session.mock/database_add is inherited from superclass ndi.session database_clear - deletes/removes all entries from the database associated with an session DATABASE_CLEAR(NDI_SESSION_OBJ, AREYOUSURE) Removes all documents from the NDI_SESSION_OBJ object. Use with care. If AREYOUSURE is 'yes' then the function will proceed. Otherwise, it will not. Help for ndi.session.mock/database_clear is inherited from superclass ndi.session database_closebinarydoc - close an ndi.database.binarydoc [NDI_BINARYDOC_OBJ] = DATABASE_CLOSEBINARYDOC(NDI_SESSION_OBJ, NDI_BINARYDOC_OBJ) Close an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be closed in the database, which is why it is necessary to call this function through the session object. Help for ndi.session.mock/database_closebinarydoc is inherited from superclass ndi.session database_existbinarydoc - checks if an ndi.database.binarydoc exists for an ndi.document [TF, FILE_PATH] = DATABASE_EXISTBINARYDOC(NDI_SESSION_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return a boolean flag (TF) indicating if a binary document exists for an ndi.document and, if it exists, the full file path (FILE_PATH) to the file where the binary data is stored. Help for ndi.session.mock/database_existbinarydoc is inherited from superclass ndi.session database_openbinarydoc - open the ndi.database.binarydoc channel of an ndi.document NDI_BINARYDOC_OBJ = DATABASE_OPENBINARYDOC(NDI_SESSION_OBJ, NDI_DOCUMENT_OR_ID, FILENAME) Return the open ndi.database.binarydoc object that corresponds to an ndi.document and NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself. The document is opened for reading only. Document binary streams may not be edited once the document is added to the database. Note that this NDI_BINARYDOC_OBJ must be closed with ndi.session/CLOSEBINARYDOC. Help for ndi.session.mock/database_openbinarydoc is inherited from superclass ndi.session database_rm - Remove an ndi.document with a given document ID from an ndi.session object NDI_SESSION_OBJ = DATABASE_RM(NDI_SESSION_OBJ, DOC_UNIQUE_ID) or NDI_SESSION_OBJ = DATABASE_RM(NDI_SESSION_OBJ, DOC) Removes an ndi.document with document id DOC_UNIQUE_ID from the NDI_SESSION_OBJ.database. In the second form, if an ndi.document or cell array of NDI_DOCUMENTS is passed for DOC, then the document unique ids are retrieved and they are removed in turn. If DOC/DOC_UNIQUE_ID is empty, no action is taken. This function also takes parameters as name/value pairs that modify its behavior: Parameter (default) | Description -------------------------------------------------------------------------------- ErrIfNotFound (0) | Produce an error if an ID to be deleted is not found. See also: DATABASE_ADD, ndi.session.mock Help for ndi.session.mock/database_rm is inherited from superclass ndi.session database_search - Search for an ndi.document in a database of an ndi.session object NDI_DOCUMENT_OBJ = DATABASE_SEARCH(NDI_SESSION_OBJ, SEARCHPARAMETERS) Given search parameters, which are a cell list {'PARAM1', VALUE1, 'PARAM2, VALUE2, ...}, the database associated with the ndi.session object is searched. Matches are returned in a cell list NDI_DOCUMENT_OBJ. Help for ndi.session.mock/database_search is inherited from superclass ndi.session delete - DELETE Delete a handle object. DELETE(H) deletes all handle objects in array H. After the delete function call, H is an array of invalid objects. See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/ISVALID, CLEAR Help for ndi.session.mock/delete is inherited from superclass handle docinput2docs - convert an array of ndi.documents or doc_ids to documents [DOC_LIST,B,ERRMSG] = DOCINPUT2DOCS(NDI_SESSION_OBJ, DOC_INPUT) Given an input DOC_INPUT that specifies ndi.document objects, return the list of ndi.document objects. DOC_INPUT can be a single document id (character array), or a single ndi.document, or a cell array of document ids or a cell array of ndi.documents, or a mixed cell array of ndi.document objects and ids. If all documents are found, then B is 1 and ERRMSG is ''. If a document ID does not exist in the database, then one occurrence is noted in ERRMSG and B is 0. Help for ndi.session.mock.docinput2docs is inherited from superclass ndi.session eq - Are two ndi.session.dir objects equivalent? B = EQ(NDI_SESSION_DIR_OBJ_A, NDI_SESSION_DIR_OBJ_B) Returns 1 if the two ndi.session.dir objects have the same path and reference fields. They do not have to be the same handles (that is, have the same location in memory). Help for ndi.session.mock/eq is inherited from superclass ndi.session.dir findexpobj - search an ndi.session for a specific object given name and classname OBJ = FINDEXPOBJ(NDI_EXPERIMNENT_OBJ, OBJ_NAME, OBJ_CLASSNAME) Examines the DAQSYSTEM list, DATABASE, and PROBELIST for an object with name OBJ_NAME and classname OBJ_CLASSNAME. If no object is found, OBJ will be empty ([]). Help for ndi.session.mock/findexpobj is inherited from superclass ndi.session findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDI.SESSION.MOCK Help for ndi.session.mock/findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop(H,PropName) finds and returns the matlab.metadata.Property object associated with property name PropName of scalar handle object H. PropName can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PropName exists for object H, an empty matlab.metadata.Property array is returned. See also ndi.session.mock, ndi.session.mock/findobj, dynamicprops, matlab.metadata.Property Help for ndi.session.mock/findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/EQ, NDI.SESSION.MOCK/GT, NDI.SESSION.MOCK/LE, NDI.SESSION.MOCK/LT, NDI.SESSION.MOCK/NE Help for ndi.session.mock/ge is inherited from superclass handle get_ingested_docs - get all ndi.documents related to ingested data D = GET_INGESTED_DOCS(NDI_SESSION_OBJ) Return all documents related to ingested data. Be careful; if the raw data is not available on the path, then the ingested data is the only record of it. Help for ndi.session.mock/get_ingested_docs is inherited from superclass ndi.session getelements - Return all ndi.element objects that are found in session database ELEMENTS = GETELEMENTS(NDI_SESSION_OBJ, ...) Examines all the database of NDI_SESSION_OBJ and returns all ndi.element entries. ELEMENTS is a cell array of ndi.element.* objects. ELEMENTS = GETELEMENTS(NDI_SESSION_OBJ, 'PROP1', VALUE1, 'PROP2', VALUE2...) returns only those probes for which 'PROP1' has a value of VALUE1, 'PROP2' has a value of VALUE2, etc. Properties of elements are 'element.name', 'element.type', 'element.direct', and 'probe.name', 'probe.type', and 'probe.reference'. Help for ndi.session.mock/getelements is inherited from superclass ndi.session getpath - Return the path of the session P = GETPATH(NDI_SESSION_DIR_OBJ) Returns the path of an ndi.session.dir object. The path is some sort of reference to the storage location of the session. This might be a URL, or a file directory. Help for ndi.session.mock/getpath is inherited from superclass ndi.session.dir getprobes - Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries PROBES = GETPROBES(NDI_SESSION_OBJ, ...) Examines all ndi.daq.system entries in the NDI_SESSION_OBJ's device array and returns all ndi.probe.* entries that can be constructed from each device's ndi.epoch.epochprobemap entries. PROBES is a cell array of ndi.probe.* objects. One can pass additional arguments that specify the classnames of the probes that are returned: PROBES = GETPROBES(NDI_SESSION_OBJ, CLASSMATCH ) only probes that are members of the classes CLASSMATCH etc., are returned. PROBES = GETPROBES(NDI_SESSION_OBJ, 'PROP1', VALUE1, 'PROP2', VALUE2...) returns only those probes for which 'PROP1' has a value of VALUE1, 'PROP2' has a value of VALUE2, etc. Properties of probes are 'name', 'reference', and 'type', and 'subject_ID'. Help for ndi.session.mock/getprobes is inherited from superclass ndi.session gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = GT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/EQ, NDI.SESSION.MOCK/GE, NDI.SESSION.MOCK/LE, NDI.SESSION.MOCK/LT, NDI.SESSION.MOCK/NE Help for ndi.session.mock/gt is inherited from superclass handle id - return the identifier of an ndi.session object IDENTIFIER = ID(NDI_SESSION_OBJ) Returns the unique identifier of an ndi.session object. Help for ndi.session.mock/id is inherited from superclass ndi.session ingest - ingest the raw data and synchronization information into the database [B,ERRMSG] = INGEST(NDI_SESSION_OBJ) Ingest all raw data and synchronization information into the database. Help for ndi.session.mock/ingest is inherited from superclass ndi.session is_fully_ingested - is an ndi.session object fully ingested? B = IS_FULLY_INGESTED(NDI_SESSION_OBJ) Returns 1 if the ndi.session object NDI_SESSION_OBJ is fully ingested and 0 if there are still elements on disk that would need to be ingested by NDI_SESSION_OBJ.ingest() in order to be fully ingested. Help for ndi.session.mock/is_fully_ingested is inherited from superclass ndi.session isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized. See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/DELETE Help for ndi.session.mock/isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/EQ, NDI.SESSION.MOCK/GE, NDI.SESSION.MOCK/GT, NDI.SESSION.MOCK/LT, NDI.SESSION.MOCK/NE Help for ndi.session.mock/le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = listener(hSource, PropName, Eventname, callback) adds a listener for a property event. Eventname must be one of 'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a string sclar or character vector. PropName must be either a single property name specified as a string scalar or character vector, or a collection of property names specified as a cell array of character vectors or a string array, or as an array of one ore more matlab.metadata.Property objects. The properties must belong to the class of hSource. If hSource is scalar, PropName can include dynamic properties. For all forms, listener returns an event.listener. To remove a listener, delete the object returned by listener. For example, delete(el) calls the handle class delete method to remove the listener and delete it from the workspace. Calling delete(el) on the listener object deletes the listener, which means the event no longer causes the callback function to execute. listener does not bind the listener's lifecycle to the object that is the source of the event. Destroying the source object does not impact the lifecycle of the listener object. A listener created with listener must be destroyed independently of the source object. Calling delete(el) explicitly destroys the listener. Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist. To tie the lifecycle of the listener to the lifecycle of the source object, use addlistener. See also addlistener, event.listener, ndi.session.mock, matlab.metadata.Property, events Help for ndi.session.mock/listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = LT(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/EQ, NDI.SESSION.MOCK/GE, NDI.SESSION.MOCK/GT, NDI.SESSION.MOCK/LE, NDI.SESSION.MOCK/NE Help for ndi.session.mock/lt is inherited from superclass handle mock - Create a new ndi.session.mock object S = ndi.session.mock(); Creates an ndi.session.mock object with the following: a) a temporary path, b) a fake subject ('anteater27@nosuchlab.org'), c) a device 'fakedevice', and d) a single epoch. Documentation for ndi.session.mock/mock doc ndi.session.mock ndipathname - Return the path of the NDI files within the session P = NDIPATHNAME(NDI_SESSION_DIR_OBJ) Returns the pathname to the NDI files in the ndi.session.dir object. It is the ndi.session.dir object's path plus [filesep '.ndi' ] Help for ndi.session.mock/ndipathname is inherited from superclass ndi.session.dir ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise equality result. If one of H1 or H2 is scalar, scalar expansion is performed and the result will match the dimensions of the array that is not scalar. TF = NE(H1, H2) stores the result in a logical array of the same dimensions. See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/EQ, NDI.SESSION.MOCK/GE, NDI.SESSION.MOCK/GT, NDI.SESSION.MOCK/LE, NDI.SESSION.MOCK/LT Help for ndi.session.mock/ne is inherited from superclass handle newdocument - create a new ndi.database document of type ndi.document NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_SESSION_OBJ, [DOCUMENT_TYPE], 'PROPERTY1', VALUE1, ...) Creates an empty database document NDI_DOCUMENT_OBJ. DOCUMENT_TYPE is an optional argument and can be any type that confirms to the .json files in $NDI_COMMON/database_documents/*, a URL to such a file, or a full path filename. If DOCUMENT_TYPE is not specified, it is taken to be 'base'. If additional PROPERTY values are specified, they are set to the VALUES indicated. Example: mydoc = ndi_session_obj.newdocument('base','base.name','myname'); Help for ndi.session.mock/newdocument is inherited from superclass ndi.session notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY(H,eventname,ed) provides a way of encapsulating information about an event which can then be accessed by each registered listener. ed must belong to the EVENT.EVENTDATA class. See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/ADDLISTENER, NDI.SESSION.MOCK/LISTENER, EVENT.EVENTDATA, EVENTS Help for ndi.session.mock/notify is inherited from superclass handle searchquery - return a search query for database objects in this session SQ = SEARCHQUERY(NDI_SESSION_OBJ) Returns a search query that will match all ndi.document objects that were generated by this session. SQ = {'base.session_id', ndi_session_obj.id()}; Example: mydoc = ndi_session_obj.newdocument('base','base.name','myname'); Help for ndi.session.mock/searchquery is inherited from superclass ndi.session syncgraph_addrule - add an ndi.time.syncrule to the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_ADDRULE(NDI_SESSION_OBJ, RULE) Adds the ndi.time.syncrule RULE to the ndi.time.syncgraph of the ndi.session object NDI_SESSION_OBJ. Help for ndi.session.mock/syncgraph_addrule is inherited from superclass ndi.session syncgraph_rmrule - remove an ndi.time.syncrule from the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_RMRULE(NDI_SESSION_OBJ, INDEX) Removes the INDEXth ndi.time.syncrule from the ndi.time.syncgraph of the ndi.session object NDI_SESSION_OBJ. Help for ndi.session.mock/syncgraph_rmrule is inherited from superclass ndi.session unique_reference_string - return the unique reference string for this session REFSTR = UNIQUE_REFERENCE_STRING(NDI_SESSION_OBJ) Returns the unique reference string for the ndi.session. REFSTR is a combination of the REFERENCE property of NDI_SESSION_OBJ and the UNIQUE_REFERENCE property of NDI_SESSION_OBJ, joined with a '_'. If you just want the reference (not unique) just access the reference property (NDI_SESSION_OBJ.reference). Help for ndi.session.mock/unique_reference_string is inherited from superclass ndi.session validate_documents - validate whether documents belong to a session [B, ERRMSG] = VALIDATE_DOCUMENTS(NDI_SESSION_OBJ, DOCUMENT) Given an ndi.document DOCUMENT or a cell array of ndi.documents DOCUMENT, determines whether all document session_ids match the sessions's id. An 'empty' session_id (all 0s, ndi.session.empty_id() ) also matches. Help for ndi.session.mock/validate_documents is inherited from superclass ndi.session","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/sessiontable.m/","text":"CLASS ndi.session.sessiontable NDI_SESSIONTABLE - a table for managing the file paths of NDI sessions Superclasses none Properties none Methods Method Description addtableentry add an entry to an ndi.session.sessiontable backupfilelist a list of backup files that are present on disk backupsessiontable create a backup file for an ndi.session.sessiontable checktable check the session table for proper form, accessibility clearsessiontable clear an ndi.session.sessiontable object's data getsessionpath look up the path of an ndi.session by its ID getsessiontable return the session table isvalidtable Does the session table have the correct fields? localtablefilename return the session table filename removetableentry remove an entry of an ndi.session.sessiontable sessiontable a table for managing the file paths of NDI sessions Methods help addtableentry - add an entry to an ndi.session.sessiontable ADDTABLEENTRY(NDI_SESSIONTABLE_OBJ, SESSION_ID, PATH) Adds SESSION_ID and PATH as an entry to the session table. If SESSION_ID is already in the table, then the entry is replaced. backupfilelist - a list of backup files that are present on disk F = BACKUPFILELIST(NDI_SESSIONTABLE_OBJ) Returns a list of backup files that are available. Backup files have the name [USERPATH]/Preferences/NDI/local_sessiontable_bkupNNN.txt. backupsessiontable - create a backup file for an ndi.session.sessiontable BACKUPSESSIONTABLE(NDI_SESSIONTABLE_OBJ) Perform a backup of the session table file. The session table file is backed up in the [USERPATH]/Preferences/NDI directory and be named 'local_sessiontableNNN.txt', where NNN is a number. checktable - check the session table for proper form, accessibility [B, RESULTS] = CHECKTABLE(NDI_SESSIONTABLE_OBJ) Check the ndi.session.sessiontable object's session table to see if it has the right form (B is 1 if it does, B is 0 otherwise). (It has the right form if it is a structure with fieldnames 'path' and 'sesion_id'. If the table has the right form RESULTS is a structure array with one entry per entry in the table. It has a field 'exists' which is 1 if the path currently exists on the user's machine. If the table does not have the right form, then RESULTS is empty. clearsessiontable - clear an ndi.session.sessiontable object's data CLEARSESSIONTABLE(NDI_SESSIONTABLE_OBJ, [MAKEBACKUP]) Removes all entries from the ndi.session.sessiontable's file. If MAKEBACKUP is present and is 1, then the session table file is backed up first (in the Preferences/NDI directory). getsessionpath - look up the path of an ndi.session by its ID THEPATH = GETSESIONPATH(SESSION_ID) Examines the ndi.session.sessiontable object to see if a path is known for a session with an ID of SESSION_ID. Otherwise, empty ([]) is returned; getsessiontable - return the session table T = GETSESSIONTABLE(NDI_SESSIONTABLE_OBJ) Returns the session table, a structure with fields 'SESSION_ID' and 'PATH'. Each entry in the table corresponds to a recently-opened or added path of ndi.session.dir. isvalidtable - Does the session table have the correct fields? [B,MSG] = ISVALIDTABLE(NDI_SESSIONTABLE_OBJ, [T]) B is 1 if the NDI SESSION TABLE is a structure array with fields 'path' and 'session_id', all text fields. B is 0 otherwise. If T is not provided, then the session table is read. If B is 0, then an error description is provided in MSG. MSG is '' otherwise. localtablefilename - return the session table filename F = LOCALTABLEFILENAME() removetableentry - remove an entry of an ndi.session.sessiontable REMOVETABLEENTRY(NDI_SESSIONTABLE_OBJ, SESSION_ID) Removes the entry of an ndi.session.sessiontable with the given SESSION_ID. sessiontable - a table for managing the file paths of NDI sessions Documentation for ndi.session.sessiontable/sessiontable doc ndi.session.sessiontable","title":"ndi.session.sessiontable"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/sessiontable.m/#class-ndisessionsessiontable","text":"NDI_SESSIONTABLE - a table for managing the file paths of NDI sessions","title":"CLASS ndi.session.sessiontable"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/sessiontable.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/sessiontable.m/#properties","text":"none","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/sessiontable.m/#methods","text":"Method Description addtableentry add an entry to an ndi.session.sessiontable backupfilelist a list of backup files that are present on disk backupsessiontable create a backup file for an ndi.session.sessiontable checktable check the session table for proper form, accessibility clearsessiontable clear an ndi.session.sessiontable object's data getsessionpath look up the path of an ndi.session by its ID getsessiontable return the session table isvalidtable Does the session table have the correct fields? localtablefilename return the session table filename removetableentry remove an entry of an ndi.session.sessiontable sessiontable a table for managing the file paths of NDI sessions","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/sessiontable.m/#methods-help","text":"addtableentry - add an entry to an ndi.session.sessiontable ADDTABLEENTRY(NDI_SESSIONTABLE_OBJ, SESSION_ID, PATH) Adds SESSION_ID and PATH as an entry to the session table. If SESSION_ID is already in the table, then the entry is replaced. backupfilelist - a list of backup files that are present on disk F = BACKUPFILELIST(NDI_SESSIONTABLE_OBJ) Returns a list of backup files that are available. Backup files have the name [USERPATH]/Preferences/NDI/local_sessiontable_bkupNNN.txt. backupsessiontable - create a backup file for an ndi.session.sessiontable BACKUPSESSIONTABLE(NDI_SESSIONTABLE_OBJ) Perform a backup of the session table file. The session table file is backed up in the [USERPATH]/Preferences/NDI directory and be named 'local_sessiontableNNN.txt', where NNN is a number. checktable - check the session table for proper form, accessibility [B, RESULTS] = CHECKTABLE(NDI_SESSIONTABLE_OBJ) Check the ndi.session.sessiontable object's session table to see if it has the right form (B is 1 if it does, B is 0 otherwise). (It has the right form if it is a structure with fieldnames 'path' and 'sesion_id'. If the table has the right form RESULTS is a structure array with one entry per entry in the table. It has a field 'exists' which is 1 if the path currently exists on the user's machine. If the table does not have the right form, then RESULTS is empty. clearsessiontable - clear an ndi.session.sessiontable object's data CLEARSESSIONTABLE(NDI_SESSIONTABLE_OBJ, [MAKEBACKUP]) Removes all entries from the ndi.session.sessiontable's file. If MAKEBACKUP is present and is 1, then the session table file is backed up first (in the Preferences/NDI directory). getsessionpath - look up the path of an ndi.session by its ID THEPATH = GETSESIONPATH(SESSION_ID) Examines the ndi.session.sessiontable object to see if a path is known for a session with an ID of SESSION_ID. Otherwise, empty ([]) is returned; getsessiontable - return the session table T = GETSESSIONTABLE(NDI_SESSIONTABLE_OBJ) Returns the session table, a structure with fields 'SESSION_ID' and 'PATH'. Each entry in the table corresponds to a recently-opened or added path of ndi.session.dir. isvalidtable - Does the session table have the correct fields? [B,MSG] = ISVALIDTABLE(NDI_SESSIONTABLE_OBJ, [T]) B is 1 if the NDI SESSION TABLE is a structure array with fields 'path' and 'session_id', all text fields. B is 0 otherwise. If T is not provided, then the session table is read. If B is 0, then an error description is provided in MSG. MSG is '' otherwise. localtablefilename - return the session table filename F = LOCALTABLEFILENAME() removetableentry - remove an entry of an ndi.session.sessiontable REMOVETABLEENTRY(NDI_SESSIONTABLE_OBJ, SESSION_ID) Removes the entry of an ndi.session.sessiontable with the given SESSION_ID. sessiontable - a table for managing the file paths of NDI sessions Documentation for ndi.session.sessiontable/sessiontable doc ndi.session.sessiontable","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/angeluccilab.m/","text":"ndi.setup.angeluccilab ndi.setup.angeluccilab - initialize an NDI_SESSION_DIR with ANGELUCCILAB devices S = ndi.setup.angeluccilab(REF, DIRNAME) Initializes an ndi.session.dir object for the directory DIRNAME with the standard compliment of ANGELUCCILAB devices, as found in \"ndi_common/daq_systems/angeluccilab\". If the devices are already added, they are not re-created.","title":"ndi.setup.angeluccilab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/angeluccilab.m/#ndisetupangeluccilab","text":"ndi.setup.angeluccilab - initialize an NDI_SESSION_DIR with ANGELUCCILAB devices S = ndi.setup.angeluccilab(REF, DIRNAME) Initializes an ndi.session.dir object for the directory DIRNAME with the standard compliment of ANGELUCCILAB devices, as found in \"ndi_common/daq_systems/angeluccilab\". If the devices are already added, they are not re-created.","title":"ndi.setup.angeluccilab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/dbkatzlab.m/","text":"ndi.setup.dbkatzlab ndi.setup.dbkatzlab - initialize an NDI_SESSION_DIR with KATZLAB devices S = ndi.setup.dbkatzlab(REF, DIRNAME) Initializes an ndi.session.dir object for the directory DIRNAME with the standard compliment of KATZLAB devices, as found in \"ndi_common/daq_systems/dbkatzlab\". If the devices are already added, they are not re-created.","title":"ndi.setup.dbkatzlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/dbkatzlab.m/#ndisetupdbkatzlab","text":"ndi.setup.dbkatzlab - initialize an NDI_SESSION_DIR with KATZLAB devices S = ndi.setup.dbkatzlab(REF, DIRNAME) Initializes an ndi.session.dir object for the directory DIRNAME with the standard compliment of KATZLAB devices, as found in \"ndi_common/daq_systems/dbkatzlab\". If the devices are already added, they are not re-created.","title":"ndi.setup.dbkatzlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/lab.m/","text":"ndi.setup.lab NDI.SETUP.LAB Initialize an NDI session directory with lab-specific devices S = NDI.SETUP.LAB(LABNAME, REF, DIRNAME) Initializes an NDI session directory object (ndi.session.dir) for the specified directory DIRNAME. It associates the session with a reference identifier REF and adds the standard set of data acquisition (DAQ) system devices defined for a particular lab, specified by LABNAME. The function looks for the DAQ system definitions within the 'ndi_common/daq_systems/<labName>' directory, located under the NDI common path (typically found via `ndi.path.commonpath`). If DAQ system devices corresponding to LABNAME already exist in the session directory, they are not added again. Inputs: labName - The name of the lab setup configuration. This determines which set of DAQ system devices are added. Must be a character vector or string scalar (e.g., 'marderlab', \"vhlab\"). ref - A reference identifier for the session (e.g., an experiment number or unique code). Must be a character vector or string scalar (e.g., '745', \"exp001\"). dirname - The full path to the directory where the NDI session data will be stored. This directory must exist. Must be a character vector or string scalar representing a valid folder path. Outputs: S - An ndi.session.dir object representing the initialized session directory, now including the DAQ system devices associated with labName. Example: % Define session parameters labId = 'JaneDoeLab'; % Use the specific lab identifier sessionRef = 'exp101_run03'; sessionPath = '/path/to/my/data/exp101_run03'; % Create the directory if it doesn't exist if ~exist(sessionPath, 'dir'), mkdir(sessionPath); end % Initialize the session with lab-specific devices mySession = ndi.setup.lab(labId, sessionRef, sessionPath); See also: ndi.session.dir, ndi.setup.daq.addDaqSystems, ndi.path.commonpath","title":"ndi.setup.lab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/lab.m/#ndisetuplab","text":"NDI.SETUP.LAB Initialize an NDI session directory with lab-specific devices S = NDI.SETUP.LAB(LABNAME, REF, DIRNAME) Initializes an NDI session directory object (ndi.session.dir) for the specified directory DIRNAME. It associates the session with a reference identifier REF and adds the standard set of data acquisition (DAQ) system devices defined for a particular lab, specified by LABNAME. The function looks for the DAQ system definitions within the 'ndi_common/daq_systems/<labName>' directory, located under the NDI common path (typically found via `ndi.path.commonpath`). If DAQ system devices corresponding to LABNAME already exist in the session directory, they are not added again. Inputs: labName - The name of the lab setup configuration. This determines which set of DAQ system devices are added. Must be a character vector or string scalar (e.g., 'marderlab', \"vhlab\"). ref - A reference identifier for the session (e.g., an experiment number or unique code). Must be a character vector or string scalar (e.g., '745', \"exp001\"). dirname - The full path to the directory where the NDI session data will be stored. This directory must exist. Must be a character vector or string scalar representing a valid folder path. Outputs: S - An ndi.session.dir object representing the initialized session directory, now including the DAQ system devices associated with labName. Example: % Define session parameters labId = 'JaneDoeLab'; % Use the specific lab identifier sessionRef = 'exp101_run03'; sessionPath = '/path/to/my/data/exp101_run03'; % Create the directory if it doesn't exist if ~exist(sessionPath, 'dir'), mkdir(sessionPath); end % Initialize the session with lab-specific devices mySession = ndi.setup.lab(labId, sessionRef, sessionPath); See also: ndi.session.dir, ndi.setup.daq.addDaqSystems, ndi.path.commonpath","title":"ndi.setup.lab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/marderlab.m/","text":"ndi.setup.marderlab ndi.setup.marderlab - initialize an NDI_SESSION_DIR with MARDERLAB devices S = ndi.setup.marderlab(REF, DIRNAME) Initializes an ndi.session.dir object for the directory DIRNAME with the standard compliment of MARDERLAB devices, as found in \"ndi_common/daq_systems/marderlab\". If the devices are already added, they are not re-created.","title":"ndi.setup.marderlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/marderlab.m/#ndisetupmarderlab","text":"ndi.setup.marderlab - initialize an NDI_SESSION_DIR with MARDERLAB devices S = ndi.setup.marderlab(REF, DIRNAME) Initializes an ndi.session.dir object for the directory DIRNAME with the standard compliment of MARDERLAB devices, as found in \"ndi_common/daq_systems/marderlab\". If the devices are already added, they are not re-created.","title":"ndi.setup.marderlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/vhlab.m/","text":"ndi.setup.vhlab ndi.setup.vhlab - initialize an ndi.session.dir with VHLAB devices S = ndi.setup.vhlab(REF, DIRNAME, [FORCE]) Initializes an ndi.session.dir object for the directory DIRNAME with the standard compliment of VHLAB devices, as found in \"ndi_common/daq_systems/vhlab\". If the devices are already added, they are not re-created unless FORCE is provided and is 1.","title":"ndi.setup.vhlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/vhlab.m/#ndisetupvhlab","text":"ndi.setup.vhlab - initialize an ndi.session.dir with VHLAB devices S = ndi.setup.vhlab(REF, DIRNAME, [FORCE]) Initializes an ndi.session.dir object for the directory DIRNAME with the standard compliment of VHLAB devices, as found in \"ndi_common/daq_systems/vhlab\". If the devices are already added, they are not re-created unless FORCE is provided and is 1.","title":"ndi.setup.vhlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/yangyangwang.m/","text":"ndi.setup.yangyangwang ndi.setup.yangyangwang - initialize an ndi.session.dir with YANGYANGWANG devices S = ndi.setup.yangyangwang(REF, DIRNAME, [FORCE]) Initializes an ndi.session.dir object for the directory DIRNAME with the standard compliment of YANGYANGWANG devices, as found in \"ndi_common/daq_systems/yangyangwang\" If the devices are already added, they are not re-created unless FORCE is provided and is 1.","title":"ndi.setup.yangyangwang"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/yangyangwang.m/#ndisetupyangyangwang","text":"ndi.setup.yangyangwang - initialize an ndi.session.dir with YANGYANGWANG devices S = ndi.setup.yangyangwang(REF, DIRNAME, [FORCE]) Initializes an ndi.session.dir object for the directory DIRNAME with the standard compliment of YANGYANGWANG devices, as found in \"ndi_common/daq_systems/yangyangwang\" If the devices are already added, they are not re-created unless FORCE is provided and is 1.","title":"ndi.setup.yangyangwang"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bgluckman/binepochprobemap.m/","text":"ndi.setup.conv.gluckman.binepochprobemap BINEPOCHPROBEMAP - Create epochprobemap files for a Gluckman BIN directory BINEPOCHPROBEMAP(DIRNAME) Reads all BIN files in DIRNAME and creates corresponding epochprobemap files.","title":"ndi.setup.conv.gluckman.binepochprobemap"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bgluckman/binepochprobemap.m/#ndisetupconvgluckmanbinepochprobemap","text":"BINEPOCHPROBEMAP - Create epochprobemap files for a Gluckman BIN directory BINEPOCHPROBEMAP(DIRNAME) Reads all BIN files in DIRNAME and creates corresponding epochprobemap files.","title":"ndi.setup.conv.gluckman.binepochprobemap"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bgluckman/channelname2probename.m/","text":"ndi.setup.conv.gluckman.channelname2probename CHANNELNAME2PROBENAME - convert a Marder channel name to a probe name [PROBENAME, PROBEREF, SUBJECTNAME, PROBETYPE] = CHANNELNAME2PROBENAME(CHNAME, SUBJECTS) Given a channel name (e.g., 'A5','B4'), returns a probe name and subject name. PROBEREF is always 1. If there is more than one subject (usually a maximum of 1), then the program looks for a '1' or '2' in CHNAME. If none is found, then it is assumed there is only 1 subject and 1 is the end of the string. If a 2 is found and there is no second subject, a warning is produced.","title":"ndi.setup.conv.gluckman.channelname2probename"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bgluckman/channelname2probename.m/#ndisetupconvgluckmanchannelname2probename","text":"CHANNELNAME2PROBENAME - convert a Marder channel name to a probe name [PROBENAME, PROBEREF, SUBJECTNAME, PROBETYPE] = CHANNELNAME2PROBENAME(CHNAME, SUBJECTS) Given a channel name (e.g., 'A5','B4'), returns a probe name and subject name. PROBEREF is always 1. If there is more than one subject (usually a maximum of 1), then the program looks for a '1' or '2' in CHNAME. If none is found, then it is assumed there is only 1 subject and 1 is the end of the string. If a 2 is found and there is no second subject, a warning is produced.","title":"ndi.setup.conv.gluckman.channelname2probename"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bgluckman/channelnames2daqsystemstrings.m/","text":"ndi.setup.conv.gluckman.channelnames2daqsystemstrings DAQSYSSTR = CHANNELNAMES2DAQSYSTEMSTRINGS(CHNAMES, DAQNAME, SUBJECTS)","title":"ndi.setup.conv.gluckman.channelnames2daqsystemstrings"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bgluckman/channelnames2daqsystemstrings.m/#ndisetupconvgluckmanchannelnames2daqsystemstrings","text":"DAQSYSSTR = CHANNELNAMES2DAQSYSTEMSTRINGS(CHNAMES, DAQNAME, SUBJECTS)","title":"ndi.setup.conv.gluckman.channelnames2daqsystemstrings"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/abf2probetable.m/","text":"ndi.setup.conv.marder.abf2probetable ABF2PROBETABLE - Populate a probetable table for a Marder ndi session ABF2PROBETABLE(S) Reads all ABF files in the NDI session S and creates a putative probetable file. To create a new Marder lab session from a directory, use S = ndi.setup.lab('marderlab',REF,DIRNAME) It is necessary to first create a subject1.txt file with the subject identifier of the first crab. If there are two crabs being recorded, then it is necessary to create a subject2.txt file. And so on. The usual naming convention: 745_003_01@marderlab.brandeis.edu where 745 is the lab notebook, 003 is the experiment number in the lab notebook, and 01 indicates that there is only one prep in this experiment.","title":"ndi.setup.conv.marder.abf2probetable"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/abf2probetable.m/#ndisetupconvmarderabf2probetable","text":"ABF2PROBETABLE - Populate a probetable table for a Marder ndi session ABF2PROBETABLE(S) Reads all ABF files in the NDI session S and creates a putative probetable file. To create a new Marder lab session from a directory, use S = ndi.setup.lab('marderlab',REF,DIRNAME) It is necessary to first create a subject1.txt file with the subject identifier of the first crab. If there are two crabs being recorded, then it is necessary to create a subject2.txt file. And so on. The usual naming convention: 745_003_01@marderlab.brandeis.edu where 745 is the lab notebook, 003 is the experiment number in the lab notebook, and 01 indicates that there is only one prep in this experiment.","title":"ndi.setup.conv.marder.abf2probetable"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/abfepochprobemap.m/","text":"ndi.setup.conv.marder.abfepochprobemap ABFEPOCHPROBEMAP - Create epochprobemap files for a Marder ndi session ABFEPOCHPROBEMAP(S) Reads all ABF files in the NDI session S and creates corresponding epochprobemap files. To create a new Marder lab session from a directory, use S = ndi.setup.lab ABFEPOCHPROBEMAP(S,'forceIgnore2',true) does not interpret a 2 in the channel name as a second prep. It is necessary to first create a subject1.txt file with the subject identifier of the first crab. If there are two crabs being recorded, then it is necessary to create a subject2.txt file. And so on. The usual naming convention: 745_003_01@marderlab.brandeis.edu where 745 is the lab notebook, 003 is the experiment number in the lab notebook, and 01 indicates that there is only one prep in this experiment.","title":"ndi.setup.conv.marder.abfepochprobemap"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/abfepochprobemap.m/#ndisetupconvmarderabfepochprobemap","text":"ABFEPOCHPROBEMAP - Create epochprobemap files for a Marder ndi session ABFEPOCHPROBEMAP(S) Reads all ABF files in the NDI session S and creates corresponding epochprobemap files. To create a new Marder lab session from a directory, use S = ndi.setup.lab ABFEPOCHPROBEMAP(S,'forceIgnore2',true) does not interpret a 2 in the channel name as a second prep. It is necessary to first create a subject1.txt file with the subject identifier of the first crab. If there are two crabs being recorded, then it is necessary to create a subject2.txt file. And so on. The usual naming convention: 745_003_01@marderlab.brandeis.edu where 745 is the lab notebook, 003 is the experiment number in the lab notebook, and 01 indicates that there is only one prep in this experiment.","title":"ndi.setup.conv.marder.abfepochprobemap"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/abfprobetable2probemap.m/","text":"ndi.setup.conv.marder.abfprobetable2probemap ABFPROBETABLE2PROBEMAP - Create epochprobemap files for a Marder ndi session ABFPROBETABLE2PROBEMAP(S) Reads all ABF files in the NDI session S and creates corresponding epochprobemap files using the 'probetable.csv' file in the main directory.","title":"ndi.setup.conv.marder.abfprobetable2probemap"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/abfprobetable2probemap.m/#ndisetupconvmarderabfprobetable2probemap","text":"ABFPROBETABLE2PROBEMAP - Create epochprobemap files for a Marder ndi session ABFPROBETABLE2PROBEMAP(S) Reads all ABF files in the NDI session S and creates corresponding epochprobemap files using the 'probetable.csv' file in the main directory.","title":"ndi.setup.conv.marder.abfprobetable2probemap"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/channelname2probename.m/","text":"ndi.setup.conv.marder.channelname2probename CHANNELNAME2PROBENAME - convert a Marder channel name to a probe name [PROBENAME, PROBEREF, SUBJECTNAME] = CHANNELNAME2PROBENAME(CHNAME, SUBJECTS) Given a channel name (e.g., 'DGN1_A','lvn','lvn2'), returns a probe name and subject name. PROBEREF is always 1. If there is more than one subject (usually a maximum of 2), then the program looks for a '1' or '2' in CHNAME. If none is found, then it is assumed there is only 1 subject and 1 is the end of the string. If a 2 is found and there is no second subject, a warning is produced.","title":"ndi.setup.conv.marder.channelname2probename"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/channelname2probename.m/#ndisetupconvmarderchannelname2probename","text":"CHANNELNAME2PROBENAME - convert a Marder channel name to a probe name [PROBENAME, PROBEREF, SUBJECTNAME] = CHANNELNAME2PROBENAME(CHNAME, SUBJECTS) Given a channel name (e.g., 'DGN1_A','lvn','lvn2'), returns a probe name and subject name. PROBEREF is always 1. If there is more than one subject (usually a maximum of 2), then the program looks for a '1' or '2' in CHNAME. If none is found, then it is assumed there is only 1 subject and 1 is the end of the string. If a 2 is found and there is no second subject, a warning is produced.","title":"ndi.setup.conv.marder.channelname2probename"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/channelnames2daqsystemstrings.m/","text":"ndi.setup.conv.marder.channelnames2daqsystemstrings DAQSYSSTR = CHANNELNAMES2DAQSYSTEMSTRINGS(CHNAMES, DAQNAME, SUBJECTS)","title":"ndi.setup.conv.marder.channelnames2daqsystemstrings"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/channelnames2daqsystemstrings.m/#ndisetupconvmarderchannelnames2daqsystemstrings","text":"DAQSYSSTR = CHANNELNAMES2DAQSYSTEMSTRINGS(CHNAMES, DAQNAME, SUBJECTS)","title":"ndi.setup.conv.marder.channelnames2daqsystemstrings"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/channelnametable2probename.m/","text":"ndi.setup.conv.marder.channelnametable2probename CHANNELNAMETABLE2PROBENAME - convert a Marder channel name to a probe name [PROBENAME, PROBEREF, PROBETYPE, SUBJECTNAME] = CHANNELNAMETABLE2PROBENAME(CHNAME, PROBETABLE) Given a channel name (e.g., 'DGN1_A','lvn','lvn2'), returns a probe name and subject name. PROBEREF is always 1. The probe information is assigned according to information in PROBETABLE, a table with columns \"channelName\", \"probeName\", \"probeRef\", \"probeType\", \"subjectName\".","title":"ndi.setup.conv.marder.channelnametable2probename"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/channelnametable2probename.m/#ndisetupconvmarderchannelnametable2probename","text":"CHANNELNAMETABLE2PROBENAME - convert a Marder channel name to a probe name [PROBENAME, PROBEREF, PROBETYPE, SUBJECTNAME] = CHANNELNAMETABLE2PROBENAME(CHNAME, PROBETABLE) Given a channel name (e.g., 'DGN1_A','lvn','lvn2'), returns a probe name and subject name. PROBEREF is always 1. The probe information is assigned according to information in PROBETABLE, a table with columns \"channelName\", \"probeName\", \"probeRef\", \"probeType\", \"subjectName\".","title":"ndi.setup.conv.marder.channelnametable2probename"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/demo.m/","text":"ndi.setup.conv.marder.demo The problem: Find all recording sessions that exhibit variation in a stimulus_parameter called 'Command temperature constant'. Sessions should be from the marderlab (from subjects that have '@marderlab.brandeis.edu' in the 'local_identifier' field). Then, for each subject, plot epochs from probe that is located in the 'lateral ventricular nerve' as a function of command temperature.","title":"ndi.setup.conv.marder.demo"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/demo.m/#ndisetupconvmarderdemo","text":"The problem: Find all recording sessions that exhibit variation in a stimulus_parameter called 'Command temperature constant'. Sessions should be from the marderlab (from subjects that have '@marderlab.brandeis.edu' in the 'local_identifier' field). Then, for each subject, plot epochs from probe that is located in the 'lateral ventricular nerve' as a function of command temperature.","title":"ndi.setup.conv.marder.demo"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/makeVoltageOffsets.m/","text":"ndi.setup.conv.marder.makeVoltageOffsets MAKEVOLTAGEOFFSETS - Make documents from a table of voltage offset values DOCLIST = MAKEVOLTAGEOFFSETS(S) Read in a table called \"MEoffset.txt\" that is comma separated value and has columns \"probeName\", \"offsetV\", and \"T\" (for temperature). The function then checks to see if the offset data has been added to the database, and, if not adds it. If there is no file, then no action is taken and a warning is given. Any newly created documents are returned in DOCLIST. They will already be added to the database of session S.","title":"ndi.setup.conv.marder.makeVoltageOffsets"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/makeVoltageOffsets.m/#ndisetupconvmardermakevoltageoffsets","text":"MAKEVOLTAGEOFFSETS - Make documents from a table of voltage offset values DOCLIST = MAKEVOLTAGEOFFSETS(S) Read in a table called \"MEoffset.txt\" that is comma separated value and has columns \"probeName\", \"offsetV\", and \"T\" (for temperature). The function then checks to see if the offset data has been added to the database, and, if not adds it. If there is no file, then no action is taken and a warning is given. Any newly created documents are returned in DOCLIST. They will already be added to the database of session S.","title":"ndi.setup.conv.marder.makeVoltageOffsets"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/makesubjects.m/","text":"ndi.setup.conv.marder.makesubjects MAKESUBJECTS - make text files for subjects MAKESUBJECTS(S, N) Make subject*.txt files for N subjects.","title":"ndi.setup.conv.marder.makesubjects"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/makesubjects.m/#ndisetupconvmardermakesubjects","text":"MAKESUBJECTS - make text files for subjects MAKESUBJECTS(S, N) Make subject*.txt files for N subjects.","title":"ndi.setup.conv.marder.makesubjects"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/marderbath.m/","text":"ndi.setup.conv.marder.marderbath MARDERBATH - add bath information to a Marder session D = MARDERBATH(S) Create NDI documents of type 'stimulus_bath' based on the mixture table at location [S.path filesep 'bath_table.csv']","title":"ndi.setup.conv.marder.marderbath"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/marderbath.m/#ndisetupconvmardermarderbath","text":"MARDERBATH - add bath information to a Marder session D = MARDERBATH(S) Create NDI documents of type 'stimulus_bath' based on the mixture table at location [S.path filesep 'bath_table.csv']","title":"ndi.setup.conv.marder.marderbath"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/marderprobe2uberon.m/","text":"ndi.setup.conv.marder.marderprobe2uberon D = MARDERPROBE2UBERON(S) Add probe_location information based on Marder probe data.","title":"ndi.setup.conv.marder.marderprobe2uberon"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/marderprobe2uberon.m/#ndisetupconvmardermarderprobe2uberon","text":"D = MARDERPROBE2UBERON(S) Add probe_location information based on Marder probe data.","title":"ndi.setup.conv.marder.marderprobe2uberon"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/mixtureStr2mixtureTable.m/","text":"ndi.setup.conv.marder.mixtureStr2mixtureTable MIXTURESTRING2MIXTURETABLE - convert a mixture string to a mixture table T = MIXTURESTRING2MIXTURETABLE(STR, MIXTURESTRUCT) Converts a mixture string STR to a table of mixtures. STR is a string of the form \"v1,v2,N*v3\", etc. It indicates what mixtures, which are fields of the MIXTURESTRUCT, are present here. MIXTURESTRUCT is a structure with fields equal to the possibly mixture type values V. The entries of MIXTURESTRUCT.V are a structure array with the following values: ontologyName : Node name of the compound in an ontology name : The name of the compound (official name in the ontology) value : The value of the concentration of the mixture ontologyUnit : The unit of measure, usually 'OM:MolarVolumeUnit' unitName : The name of the unit, usually 'Molar' Example: str = 'normal_saline,10e-4 ptx'; marderFolder = fullfile(ndi.common.PathConstants.RootFolder,'+ndi','+setup','+conv','+marder'); mixtureStruct = jsondecode(fileread(fullfile(marderFolder,\"marder_mixtures.json\"))); t = ndi.setup.conv.marder.mixtureString2mixtureTable((str,mixtureStruct) % a table of entries","title":"ndi.setup.conv.marder.mixtureStr2mixtureTable"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/mixtureStr2mixtureTable.m/#ndisetupconvmardermixturestr2mixturetable","text":"MIXTURESTRING2MIXTURETABLE - convert a mixture string to a mixture table T = MIXTURESTRING2MIXTURETABLE(STR, MIXTURESTRUCT) Converts a mixture string STR to a table of mixtures. STR is a string of the form \"v1,v2,N*v3\", etc. It indicates what mixtures, which are fields of the MIXTURESTRUCT, are present here. MIXTURESTRUCT is a structure with fields equal to the possibly mixture type values V. The entries of MIXTURESTRUCT.V are a structure array with the following values: ontologyName : Node name of the compound in an ontology name : The name of the compound (official name in the ontology) value : The value of the concentration of the mixture ontologyUnit : The unit of measure, usually 'OM:MolarVolumeUnit' unitName : The name of the unit, usually 'Molar' Example: str = 'normal_saline,10e-4 ptx'; marderFolder = fullfile(ndi.common.PathConstants.RootFolder,'+ndi','+setup','+conv','+marder'); mixtureStruct = jsondecode(fileread(fullfile(marderFolder,\"marder_mixtures.json\"))); t = ndi.setup.conv.marder.mixtureString2mixtureTable((str,mixtureStruct) % a table of entries","title":"ndi.setup.conv.marder.mixtureStr2mixtureTable"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/plot_epoch.m/","text":"ndi.setup.conv.marder.plot_epoch PLOT_EPOCH - plot an epoch","title":"ndi.setup.conv.marder.plot_epoch"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/plot_epoch.m/#ndisetupconvmarderplot_epoch","text":"PLOT_EPOCH - plot an epoch","title":"ndi.setup.conv.marder.plot_epoch"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/postsetup.m/","text":"ndi.setup.conv.marder.postsetup POSTSETUP - does all post-setup operations for Marder lab data POSTSETUP(S) 1) Generates epochprobemaps for ABF data 2) Checks that the probes are available in S 3) Generates the metadata with ndi.setup.conv.marder.pretemptable(S)","title":"ndi.setup.conv.marder.postsetup"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/postsetup.m/#ndisetupconvmarderpostsetup","text":"POSTSETUP - does all post-setup operations for Marder lab data POSTSETUP(S) 1) Generates epochprobemaps for ABF data 2) Checks that the probes are available in S 3) Generates the metadata with ndi.setup.conv.marder.pretemptable(S)","title":"ndi.setup.conv.marder.postsetup"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/preptemp.m/","text":"ndi.setup.conv.marder.preptemp PREPTEMP - identify temperature parameters for a temperature record OUT = PREPTEMP(T, D, TEMP_TABLE, ...) Identify the temperature of a Marder lab record. The timestamps of the record are provided in T, and the data in degrees C are provided in D. The program attempts to identify which of several command temperatures in TEMP_TABLE are employed in the record. The record is categorized as 'constant' or 'change' if the record exhibits a change greater than 'change_threshold'. OUT is a structure with fields: 'type': takes the value 'constant or 'change' 'temp': that contains the values in TEMP_TABLE that most closely match the record. In the case of a 'constant' record, 'temp' will have one value; in the case of a 'change' record, it will have two values (the beginning and end values). 'raw': the raw temperature values before they are translated to table entries. 'range': the observed temperature range The function takes name/value pairs that modify its default behavior: |----------------------------|--------------------------------------| | Parameter (default) | Description | |----------------------------|--------------------------------------| | change_threshold (3) | Threshold at which to describe the | | | record as a 'change'. | | beginning_time (2) | Time in seconds that constitutes the | | | beginning of the record. | | ending_time (2) | Time in seconds from the end of the | | | record that constitutes the ending | | | time to be averaged. | | filter ( ones(5,1)/5 ) | A convolution filter to smooth data | | interactive (false) | Should we ask the user for input? | |----------------------------|--------------------------------------|","title":"ndi.setup.conv.marder.preptemp"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/preptemp.m/#ndisetupconvmarderpreptemp","text":"PREPTEMP - identify temperature parameters for a temperature record OUT = PREPTEMP(T, D, TEMP_TABLE, ...) Identify the temperature of a Marder lab record. The timestamps of the record are provided in T, and the data in degrees C are provided in D. The program attempts to identify which of several command temperatures in TEMP_TABLE are employed in the record. The record is categorized as 'constant' or 'change' if the record exhibits a change greater than 'change_threshold'. OUT is a structure with fields: 'type': takes the value 'constant or 'change' 'temp': that contains the values in TEMP_TABLE that most closely match the record. In the case of a 'constant' record, 'temp' will have one value; in the case of a 'change' record, it will have two values (the beginning and end values). 'raw': the raw temperature values before they are translated to table entries. 'range': the observed temperature range The function takes name/value pairs that modify its default behavior: |----------------------------|--------------------------------------| | Parameter (default) | Description | |----------------------------|--------------------------------------| | change_threshold (3) | Threshold at which to describe the | | | record as a 'change'. | | beginning_time (2) | Time in seconds that constitutes the | | | beginning of the record. | | ending_time (2) | Time in seconds from the end of the | | | record that constitutes the ending | | | time to be averaged. | | filter ( ones(5,1)/5 ) | A convolution filter to smooth data | | interactive (false) | Should we ask the user for input? | |----------------------------|--------------------------------------|","title":"ndi.setup.conv.marder.preptemp"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/preptemptable.m/","text":"ndi.setup.conv.marder.preptemptable PREPTEMPTABLE - write a prep temperature table to the session directory PREPTEMPTABLE(S) Write a temperature table to the session directory.","title":"ndi.setup.conv.marder.preptemptable"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/preptemptable.m/#ndisetupconvmarderpreptemptable","text":"PREPTEMPTABLE - write a prep temperature table to the session directory PREPTEMPTABLE(S) Write a temperature table to the session directory.","title":"ndi.setup.conv.marder.preptemptable"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/presetup.m/","text":"ndi.setup.conv.marder.presetup PRESETUP - set up the Marder lab directory based on the directory name S = PRESETUP(DIRNAME, N) Sets up a Marderlab directory for import","title":"ndi.setup.conv.marder.presetup"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/presetup.m/#ndisetupconvmarderpresetup","text":"PRESETUP - set up the Marder lab directory based on the directory name S = PRESETUP(DIRNAME, N) Sets up a Marderlab directory for import","title":"ndi.setup.conv.marder.presetup"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/smrepochprobemap.m/","text":"ndi.setup.conv.marder.smrepochprobemap SMREPOCHPROBEMAP - Create epochprobemap files for a Marder SMR directory SMREPOCHPROBEMAP(DIRNAME) Reads all SMR files in DIRNAME and creates corresponding epochprobemap files.","title":"ndi.setup.conv.marder.smrepochprobemap"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/smrepochprobemap.m/#ndisetupconvmardersmrepochprobemap","text":"SMREPOCHPROBEMAP - Create epochprobemap files for a Marder SMR directory SMREPOCHPROBEMAP(DIRNAME) Reads all SMR files in DIRNAME and creates corresponding epochprobemap files.","title":"ndi.setup.conv.marder.smrepochprobemap"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/temptable2stimulusparameters.m/","text":"ndi.setup.conv.marder.temptable2stimulusparameters TEMPTABLE2STIMULUSPARAMETERS - Create stimulusparameter documents for temperature for a Marder ndi session TEMPTABLE2STIMULUSPARAMETERS(S)","title":"ndi.setup.conv.marder.temptable2stimulusparameters"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/temptable2stimulusparameters.m/#ndisetupconvmardertemptable2stimulusparameters","text":"TEMPTABLE2STIMULUSPARAMETERS - Create stimulusparameter documents for temperature for a Marder ndi session TEMPTABLE2STIMULUSPARAMETERS(S)","title":"ndi.setup.conv.marder.temptable2stimulusparameters"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bvhlab/fix_empty_records.m/","text":"ndi.setup.conv.vhlab.fix_empty_records FIX_EMPTY_RECORDS FIX_EMPTY_RECORDS(DIRNAME, N) Neuter reference.txt files in directories that have fewer than N files.","title":"ndi.setup.conv.vhlab.fix_empty_records"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bvhlab/fix_empty_records.m/#ndisetupconvvhlabfix_empty_records","text":"FIX_EMPTY_RECORDS FIX_EMPTY_RECORDS(DIRNAME, N) Neuter reference.txt files in directories that have fewer than N files.","title":"ndi.setup.conv.vhlab.fix_empty_records"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/addDaqSystems.m/","text":"ndi.setup.daq.addDaqSystems addDaqSystems - Add DAQ systems for a specified lab to an ndi session. S = ndi.setup.daq.addDaqSystems(S, LABNAME) Inputs: S - An NDI session object labName - The name of a lab with preconfigured DAQ systems (char) force - A boolean flag indicating if DAQ systems should be re-created if they already exists. When true, if a DAQ system with a given name already exists, it is removed from the session before it is re-created and added again. Outputs: S - An NDI session object Note: Assumes the lab is present in the ndi_common/daq_systems folder.","title":"ndi.setup.daq.addDaqSystems"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/addDaqSystems.m/#ndisetupdaqadddaqsystems","text":"addDaqSystems - Add DAQ systems for a specified lab to an ndi session. S = ndi.setup.daq.addDaqSystems(S, LABNAME) Inputs: S - An NDI session object labName - The name of a lab with preconfigured DAQ systems (char) force - A boolean flag indicating if DAQ systems should be re-created if they already exists. When true, if a DAQ system with a given name already exists, it is removed from the session before it is re-created and added again. Outputs: S - An NDI session object Note: Assumes the lab is present in the ndi_common/daq_systems folder.","title":"ndi.setup.daq.addDaqSystems"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/AngelucciStims.m/","text":"CLASS ndi.setup.daq.metadatareader.AngelucciStims ANGELUCCISTIMS - a class for reading stims from Angelucci lab example data Superclasses ndi.daq.metadatareader , ndi.ido , did.ido , ndi.documentservice Properties Property Description tab_separated_file_parameter identifier Methods Method Description AngelucciStims Create a new multifunction DAQ object eq are 2 ndi.daq.metadatareader objects equal? get_ingested_document get an ingested document for a set of epochfiles id return the identifier of an DID.IDO object ingest_epochfiles create an ndi.document that describes the data that is read by an ndi.daq.metadatareader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata Read metadata parameters readmetadata_ingested Read metadata parameters from a session database readmetadatafromfile read in metadata from the file that is identified searchquery create a search for this ndi.daq.reader object unique_id Generate a unique ID number for DID databases (Static method) Methods help AngelucciStims - Create a new multifunction DAQ object D = NDI.SETUP.DAQ.METADATAREADER.ANGELUCCISTIMS() or D = NDI.SETUP.DAQ.METADATAREADER.ANGELUCCISTIMS(STIMDATA_MAT_FILE) Creates a new ndi.daq.metadatareader object. If TSVFILE_REGEXPRESSION is given, it indicates a regular expression to use to search EPOCHFILES for a tab-separated-value text file that describes stimulus parameters. Documentation for ndi.setup.daq.metadatareader.AngelucciStims/AngelucciStims doc ndi.setup.daq.metadatareader.AngelucciStims eq - are 2 ndi.daq.metadatareader objects equal? TF = EQ(NDI_DAQMETADATAREADER_OBJ_A, NDI_DAQMETADATAREADER_OBJ_B) TF is 1 if the two objects are of the same class and have the same properties. TF is 0 otherwise. Help for ndi.setup.daq.metadatareader.AngelucciStims/eq is inherited from superclass ndi.daq.metadatareader get_ingested_document - get an ingested document for a set of epochfiles D = GET_INGESTED_DOCUMENT(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES, S) Returns empty if there is no such document or the single document if there is such a document. Help for ndi.setup.daq.metadatareader.AngelucciStims/get_ingested_document is inherited from superclass ndi.daq.metadatareader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.setup.daq.metadatareader.AngelucciStims/id is inherited from superclass did.ido ingest_epochfiles - create an ndi.document that describes the data that is read by an ndi.daq.metadatareader D = INGEST_EPOCHFILES(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES) Creates an ndi.document of type 'daqmetadatareader_epochdata_ingested' that contains the data for an ndi.daq.metadatareaderobject. The document D is not added to any database. Help for ndi.setup.daq.metadatareader.AngelucciStims/ingest_epochfiles is inherited from superclass ndi.daq.metadatareader isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.setup.daq.metadatareader.AngelucciStims.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.metadatareader object DOC = NEWDOCUMENT(ndi.daq.metadatareader OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.setup.daq.metadatareader.AngelucciStims/newdocument is inherited from superclass ndi.daq.metadatareader readmetadata - Read metadata parameters PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. If the property 'tab_separated_file_parameter' is not empty, then EPOCHFILES will be searched for files that match the regular expression in 'tab_separated_file_parameter'. The tab-separated-value file should have the form: STIMID<tab>PARAMETER1<tab>PARAMETER2<tab>PARAMETER3 (etc) <newline> 1<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> 2<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> (etc) For example, a stimulus file for an interoral cannula might be: stimid<tab>substance1<tab>substance1_concentration<newline> 1<tab>Sodium chloride<tab>30e-3<newline> 2<tab>Sodium chloride<tab>300e-3<newline> 3<tab>Quinine<tab>30e-6<newline> 4<tab>Quinine<tab>300e-6<newline> This function can be overridden in more specialized stimulus classes. Help for ndi.setup.daq.metadatareader.AngelucciStims/readmetadata is inherited from superclass ndi.daq.metadatareader readmetadata_ingested - Read metadata parameters from a session database PARAMETERS = READMETADATA_INGESTED(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES, S) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. S is the ndi.session object associated with the data. Help for ndi.setup.daq.metadatareader.AngelucciStims/readmetadata_ingested is inherited from superclass ndi.daq.metadatareader readmetadatafromfile - read in metadata from the file that is identified PARAMETERS = READMETADATAFROMFILE(NDI_DAQMETADATAREADER_ANGELUCCI_STIMS_OBJ, FILE) Given a file that matches the metadata search criteria for an NDI_DAQMETADATAREADER_ANGELUCCI_STIMS document, this function loads in the metadata. searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQMETADATAREADER_OBJ) Creates a search query for the ndi.daq.metadatareader object. Help for ndi.setup.daq.metadatareader.AngelucciStims/searchquery is inherited from superclass ndi.daq.metadatareader unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.setup.daq.metadatareader.AngelucciStims.unique_id is inherited from superclass did.ido","title":"ndi.setup.daq.metadatareader.AngelucciStims"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/AngelucciStims.m/#class-ndisetupdaqmetadatareaderangeluccistims","text":"ANGELUCCISTIMS - a class for reading stims from Angelucci lab example data","title":"CLASS ndi.setup.daq.metadatareader.AngelucciStims"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/AngelucciStims.m/#superclasses","text":"ndi.daq.metadatareader , ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/AngelucciStims.m/#properties","text":"Property Description tab_separated_file_parameter identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/AngelucciStims.m/#methods","text":"Method Description AngelucciStims Create a new multifunction DAQ object eq are 2 ndi.daq.metadatareader objects equal? get_ingested_document get an ingested document for a set of epochfiles id return the identifier of an DID.IDO object ingest_epochfiles create an ndi.document that describes the data that is read by an ndi.daq.metadatareader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata Read metadata parameters readmetadata_ingested Read metadata parameters from a session database readmetadatafromfile read in metadata from the file that is identified searchquery create a search for this ndi.daq.reader object unique_id Generate a unique ID number for DID databases (Static method)","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/AngelucciStims.m/#methods-help","text":"AngelucciStims - Create a new multifunction DAQ object D = NDI.SETUP.DAQ.METADATAREADER.ANGELUCCISTIMS() or D = NDI.SETUP.DAQ.METADATAREADER.ANGELUCCISTIMS(STIMDATA_MAT_FILE) Creates a new ndi.daq.metadatareader object. If TSVFILE_REGEXPRESSION is given, it indicates a regular expression to use to search EPOCHFILES for a tab-separated-value text file that describes stimulus parameters. Documentation for ndi.setup.daq.metadatareader.AngelucciStims/AngelucciStims doc ndi.setup.daq.metadatareader.AngelucciStims eq - are 2 ndi.daq.metadatareader objects equal? TF = EQ(NDI_DAQMETADATAREADER_OBJ_A, NDI_DAQMETADATAREADER_OBJ_B) TF is 1 if the two objects are of the same class and have the same properties. TF is 0 otherwise. Help for ndi.setup.daq.metadatareader.AngelucciStims/eq is inherited from superclass ndi.daq.metadatareader get_ingested_document - get an ingested document for a set of epochfiles D = GET_INGESTED_DOCUMENT(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES, S) Returns empty if there is no such document or the single document if there is such a document. Help for ndi.setup.daq.metadatareader.AngelucciStims/get_ingested_document is inherited from superclass ndi.daq.metadatareader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.setup.daq.metadatareader.AngelucciStims/id is inherited from superclass did.ido ingest_epochfiles - create an ndi.document that describes the data that is read by an ndi.daq.metadatareader D = INGEST_EPOCHFILES(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES) Creates an ndi.document of type 'daqmetadatareader_epochdata_ingested' that contains the data for an ndi.daq.metadatareaderobject. The document D is not added to any database. Help for ndi.setup.daq.metadatareader.AngelucciStims/ingest_epochfiles is inherited from superclass ndi.daq.metadatareader isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.setup.daq.metadatareader.AngelucciStims.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.metadatareader object DOC = NEWDOCUMENT(ndi.daq.metadatareader OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.setup.daq.metadatareader.AngelucciStims/newdocument is inherited from superclass ndi.daq.metadatareader readmetadata - Read metadata parameters PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. If the property 'tab_separated_file_parameter' is not empty, then EPOCHFILES will be searched for files that match the regular expression in 'tab_separated_file_parameter'. The tab-separated-value file should have the form: STIMID<tab>PARAMETER1<tab>PARAMETER2<tab>PARAMETER3 (etc) <newline> 1<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> 2<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> (etc) For example, a stimulus file for an interoral cannula might be: stimid<tab>substance1<tab>substance1_concentration<newline> 1<tab>Sodium chloride<tab>30e-3<newline> 2<tab>Sodium chloride<tab>300e-3<newline> 3<tab>Quinine<tab>30e-6<newline> 4<tab>Quinine<tab>300e-6<newline> This function can be overridden in more specialized stimulus classes. Help for ndi.setup.daq.metadatareader.AngelucciStims/readmetadata is inherited from superclass ndi.daq.metadatareader readmetadata_ingested - Read metadata parameters from a session database PARAMETERS = READMETADATA_INGESTED(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES, S) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. S is the ndi.session object associated with the data. Help for ndi.setup.daq.metadatareader.AngelucciStims/readmetadata_ingested is inherited from superclass ndi.daq.metadatareader readmetadatafromfile - read in metadata from the file that is identified PARAMETERS = READMETADATAFROMFILE(NDI_DAQMETADATAREADER_ANGELUCCI_STIMS_OBJ, FILE) Given a file that matches the metadata search criteria for an NDI_DAQMETADATAREADER_ANGELUCCI_STIMS document, this function loads in the metadata. searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQMETADATAREADER_OBJ) Creates a search query for the ndi.daq.metadatareader object. Help for ndi.setup.daq.metadatareader.AngelucciStims/searchquery is inherited from superclass ndi.daq.metadatareader unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.setup.daq.metadatareader.AngelucciStims.unique_id is inherited from superclass did.ido","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/BriggsStims.m/","text":"CLASS ndi.setup.daq.metadatareader.BriggsStims NDI_DAQMETADATAREADER_BRIGGSSTIMS - a class for reading stims from Briggs lab Superclasses ndi.daq.metadatareader , ndi.ido , did.ido , ndi.documentservice Properties Property Description tab_separated_file_parameter identifier Methods Method Description BriggsStims Create a new multifunction DAQ object briggsStruct2stimulusStruct create a standardized stimulus from a Briggs structure briggsStruct2stimulusTiming extract stimulus timing information from Briggs stimulus structure eq are 2 ndi.daq.metadatareader objects equal? get_ingested_document get an ingested document for a set of epochfiles id return the identifier of an DID.IDO object ingest_epochfiles create an ndi.document that describes the data that is read by an ndi.daq.metadatareader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata Read metadata parameters readmetadata_ingested Read metadata parameters from a session database readmetadatafromfile read in metadata from the file that is identified searchquery create a search for this ndi.daq.reader object unique_id Generate a unique ID number for DID databases (Static method) Methods help BriggsStims - Create a new multifunction DAQ object D = NDI.SETUP.DAQ.METADATAREADER.BRIGGSSTIMS() or D = NDI.SETUP.DAQ.METADATAREADER.BRIGGSSTIMS(STIMDATA_MAT_FILE) Creates a new ndi.daq.metadatareader object. If TSVFILE_REGEXPRESSION is given, it indicates a regular expression to use to search EPOCHFILES for a tab-separated-value text file that describes stimulus parameters. Documentation for ndi.setup.daq.metadatareader.BriggsStims/BriggsStims doc ndi.setup.daq.metadatareader.BriggsStims briggsStruct2stimulusStruct - create a standardized stimulus from a Briggs structure stimStructArray = ndi.daq.metadatareader.BriggsStims.briggsStruct2strimulusStruct(BRIGGSSTRUCT) Create a cell array of stimulus parameters from a Briggs stimulus parameters. briggsStruct2stimulusTiming - extract stimulus timing information from Briggs stimulus structure [stimOn,stimOff,stimGratCycle] = ndi.daq.metadatareader.BriggsStims.briggsStruct2strimulusTiming(BRIGGSSTRUCT) Returns the following: stimOn : stim onset times for each stimulus stimOff : stim offset times for each stimulus stimGratCycle : a cell array of grating cycle times that belong to each stimulus eq - are 2 ndi.daq.metadatareader objects equal? TF = EQ(NDI_DAQMETADATAREADER_OBJ_A, NDI_DAQMETADATAREADER_OBJ_B) TF is 1 if the two objects are of the same class and have the same properties. TF is 0 otherwise. Help for ndi.setup.daq.metadatareader.BriggsStims/eq is inherited from superclass ndi.daq.metadatareader get_ingested_document - get an ingested document for a set of epochfiles D = GET_INGESTED_DOCUMENT(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES, S) Returns empty if there is no such document or the single document if there is such a document. Help for ndi.setup.daq.metadatareader.BriggsStims/get_ingested_document is inherited from superclass ndi.daq.metadatareader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.setup.daq.metadatareader.BriggsStims/id is inherited from superclass did.ido ingest_epochfiles - create an ndi.document that describes the data that is read by an ndi.daq.metadatareader D = INGEST_EPOCHFILES(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES) Creates an ndi.document of type 'daqmetadatareader_epochdata_ingested' that contains the data for an ndi.daq.metadatareaderobject. The document D is not added to any database. Help for ndi.setup.daq.metadatareader.BriggsStims/ingest_epochfiles is inherited from superclass ndi.daq.metadatareader isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.setup.daq.metadatareader.BriggsStims.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.metadatareader object DOC = NEWDOCUMENT(ndi.daq.metadatareader OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.setup.daq.metadatareader.BriggsStims/newdocument is inherited from superclass ndi.daq.metadatareader readmetadata - Read metadata parameters PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. If the property 'tab_separated_file_parameter' is not empty, then EPOCHFILES will be searched for files that match the regular expression in 'tab_separated_file_parameter'. The tab-separated-value file should have the form: STIMID<tab>PARAMETER1<tab>PARAMETER2<tab>PARAMETER3 (etc) <newline> 1<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> 2<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> (etc) For example, a stimulus file for an interoral cannula might be: stimid<tab>substance1<tab>substance1_concentration<newline> 1<tab>Sodium chloride<tab>30e-3<newline> 2<tab>Sodium chloride<tab>300e-3<newline> 3<tab>Quinine<tab>30e-6<newline> 4<tab>Quinine<tab>300e-6<newline> This function can be overridden in more specialized stimulus classes. Help for ndi.setup.daq.metadatareader.BriggsStims/readmetadata is inherited from superclass ndi.daq.metadatareader readmetadata_ingested - Read metadata parameters from a session database PARAMETERS = READMETADATA_INGESTED(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES, S) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. S is the ndi.session object associated with the data. Help for ndi.setup.daq.metadatareader.BriggsStims/readmetadata_ingested is inherited from superclass ndi.daq.metadatareader readmetadatafromfile - read in metadata from the file that is identified PARAMETERS = READMETADATAFROMFILE(NDI_DAQMETADATAREADER_BRIGGS_STIMS_OBJ, FILE) Given a file that matches the metadata search criteria for an NDI_DAQMETADATAREADER_BRIGGS_STIMS document, this function loads in the metadata. searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQMETADATAREADER_OBJ) Creates a search query for the ndi.daq.metadatareader object. Help for ndi.setup.daq.metadatareader.BriggsStims/searchquery is inherited from superclass ndi.daq.metadatareader unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.setup.daq.metadatareader.BriggsStims.unique_id is inherited from superclass did.ido","title":"ndi.setup.daq.metadatareader.BriggsStims"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/BriggsStims.m/#class-ndisetupdaqmetadatareaderbriggsstims","text":"NDI_DAQMETADATAREADER_BRIGGSSTIMS - a class for reading stims from Briggs lab","title":"CLASS ndi.setup.daq.metadatareader.BriggsStims"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/BriggsStims.m/#superclasses","text":"ndi.daq.metadatareader , ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/BriggsStims.m/#properties","text":"Property Description tab_separated_file_parameter identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/BriggsStims.m/#methods","text":"Method Description BriggsStims Create a new multifunction DAQ object briggsStruct2stimulusStruct create a standardized stimulus from a Briggs structure briggsStruct2stimulusTiming extract stimulus timing information from Briggs stimulus structure eq are 2 ndi.daq.metadatareader objects equal? get_ingested_document get an ingested document for a set of epochfiles id return the identifier of an DID.IDO object ingest_epochfiles create an ndi.document that describes the data that is read by an ndi.daq.metadatareader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata Read metadata parameters readmetadata_ingested Read metadata parameters from a session database readmetadatafromfile read in metadata from the file that is identified searchquery create a search for this ndi.daq.reader object unique_id Generate a unique ID number for DID databases (Static method)","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/BriggsStims.m/#methods-help","text":"BriggsStims - Create a new multifunction DAQ object D = NDI.SETUP.DAQ.METADATAREADER.BRIGGSSTIMS() or D = NDI.SETUP.DAQ.METADATAREADER.BRIGGSSTIMS(STIMDATA_MAT_FILE) Creates a new ndi.daq.metadatareader object. If TSVFILE_REGEXPRESSION is given, it indicates a regular expression to use to search EPOCHFILES for a tab-separated-value text file that describes stimulus parameters. Documentation for ndi.setup.daq.metadatareader.BriggsStims/BriggsStims doc ndi.setup.daq.metadatareader.BriggsStims briggsStruct2stimulusStruct - create a standardized stimulus from a Briggs structure stimStructArray = ndi.daq.metadatareader.BriggsStims.briggsStruct2strimulusStruct(BRIGGSSTRUCT) Create a cell array of stimulus parameters from a Briggs stimulus parameters. briggsStruct2stimulusTiming - extract stimulus timing information from Briggs stimulus structure [stimOn,stimOff,stimGratCycle] = ndi.daq.metadatareader.BriggsStims.briggsStruct2strimulusTiming(BRIGGSSTRUCT) Returns the following: stimOn : stim onset times for each stimulus stimOff : stim offset times for each stimulus stimGratCycle : a cell array of grating cycle times that belong to each stimulus eq - are 2 ndi.daq.metadatareader objects equal? TF = EQ(NDI_DAQMETADATAREADER_OBJ_A, NDI_DAQMETADATAREADER_OBJ_B) TF is 1 if the two objects are of the same class and have the same properties. TF is 0 otherwise. Help for ndi.setup.daq.metadatareader.BriggsStims/eq is inherited from superclass ndi.daq.metadatareader get_ingested_document - get an ingested document for a set of epochfiles D = GET_INGESTED_DOCUMENT(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES, S) Returns empty if there is no such document or the single document if there is such a document. Help for ndi.setup.daq.metadatareader.BriggsStims/get_ingested_document is inherited from superclass ndi.daq.metadatareader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.setup.daq.metadatareader.BriggsStims/id is inherited from superclass did.ido ingest_epochfiles - create an ndi.document that describes the data that is read by an ndi.daq.metadatareader D = INGEST_EPOCHFILES(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES) Creates an ndi.document of type 'daqmetadatareader_epochdata_ingested' that contains the data for an ndi.daq.metadatareaderobject. The document D is not added to any database. Help for ndi.setup.daq.metadatareader.BriggsStims/ingest_epochfiles is inherited from superclass ndi.daq.metadatareader isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.setup.daq.metadatareader.BriggsStims.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.metadatareader object DOC = NEWDOCUMENT(ndi.daq.metadatareader OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.setup.daq.metadatareader.BriggsStims/newdocument is inherited from superclass ndi.daq.metadatareader readmetadata - Read metadata parameters PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. If the property 'tab_separated_file_parameter' is not empty, then EPOCHFILES will be searched for files that match the regular expression in 'tab_separated_file_parameter'. The tab-separated-value file should have the form: STIMID<tab>PARAMETER1<tab>PARAMETER2<tab>PARAMETER3 (etc) <newline> 1<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> 2<tab>VALUE1<tab>VALUE2<tab>VALUE3 (etc) <newline> (etc) For example, a stimulus file for an interoral cannula might be: stimid<tab>substance1<tab>substance1_concentration<newline> 1<tab>Sodium chloride<tab>30e-3<newline> 2<tab>Sodium chloride<tab>300e-3<newline> 3<tab>Quinine<tab>30e-6<newline> 4<tab>Quinine<tab>300e-6<newline> This function can be overridden in more specialized stimulus classes. Help for ndi.setup.daq.metadatareader.BriggsStims/readmetadata is inherited from superclass ndi.daq.metadatareader readmetadata_ingested - Read metadata parameters from a session database PARAMETERS = READMETADATA_INGESTED(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES, S) Returns the parameters (cell array of structures) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES. S is the ndi.session object associated with the data. Help for ndi.setup.daq.metadatareader.BriggsStims/readmetadata_ingested is inherited from superclass ndi.daq.metadatareader readmetadatafromfile - read in metadata from the file that is identified PARAMETERS = READMETADATAFROMFILE(NDI_DAQMETADATAREADER_BRIGGS_STIMS_OBJ, FILE) Given a file that matches the metadata search criteria for an NDI_DAQMETADATAREADER_BRIGGS_STIMS document, this function loads in the metadata. searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQMETADATAREADER_OBJ) Creates a search query for the ndi.daq.metadatareader object. Help for ndi.setup.daq.metadatareader.BriggsStims/searchquery is inherited from superclass ndi.daq.metadatareader unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.setup.daq.metadatareader.BriggsStims.unique_id is inherited from superclass did.ido","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/angelucci_visstim.m/","text":"CLASS ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim NDI_DAQREADER_MFDAQ_STIMULUS_ANGELUCCI_VISSTIM - Device object for Angelucci lab visual stimulus system This device reads the 'stimData.mat' to obtain stimulus parameters and a *.ns4 file (digital events on ai1). Channel name: | Signal description: ----------------|------------------------------------------ m1 | stimulus on/off m2 | stimid Superclasses ndi.daq.reader.mfdaq.blackrock , ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , did.ido , ndi.documentservice Properties Property Description identifier Methods Method Description angelucci_visstim Create a new multifunction DAQ object channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles return the file name that corresponds to the NEV/NSV files getchannelsepoch List the channels that are available on this device getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.reader object read_blackrock_headers read information from Blackrock Micro header files readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events or markers of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk Methods help angelucci_visstim - Create a new multifunction DAQ object D = NDI.SETUP.DAQ.READER.MFDAQ.STIMULUS.ANGELUCCI_VISSTIM(NAME, THEFILENAVIGATOR, DAQREADER) Creates a new ndi.daq.system.mfdaq object with NAME, and FILENAVIGATOR. This is an abstract class that is overridden by specific devices. Documentation for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/angelucci_visstim doc ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ? [TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types() Returns a cell array of possible channel types in TYPES, and a corresponding short abbreviation in the cell array ABBREV. ---------------------------------------------------------------------------- | CHANNEL TYPE | ABBREV | Description | |--------------------|---------|-------------------------------------------| | 'analog_in' | 'ai' | Analog input | | 'analog_out' | 'ao' | Analog output | | 'auxiliary_in' | 'ax' | Auxiliary channels | | 'digital_in' | 'di' | Digital input | | 'digital_out' | 'do' | Digital output | | 'event' | 'e' | Event trigger (returns times, codes of | | | | event trigger activation) | | 'marker' | 'mk' | Mark channel (contains value at specified | | | | times) | | 'text' | 'tx' | Text channel (contains text at specified | | | | times) | 'time' | 't' | Time samples | |--------------------|---------|-------------------------------------------| Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim.channel_types is inherited from superclass ndi.daq.reader.mfdaq channelsepoch2timechannelinfo - look up time channel info TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER) Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time channel number that corresponds to the channel specified by CHANNELTYPE and CHANNELNUMBER. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). For the generic ndi.daq.reader.mfdaq, this returns a single clock type 'dev_local'time'; See also: ndi.time.clocktype Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/epochclock is inherited from superclass ndi.daq.reader.mfdaq epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/epochclock_ingested is inherited from superclass ndi.daq.reader eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/eq is inherited from superclass ndi.daq.reader filenamefromepochfiles - return the file name that corresponds to the NEV/NSV files [NEVFILES, NSVFILES] = FILENAMEFROMEPOCHFILES(FILENAME_ARRAY) Examines the list of filenames in FILENAME_ARRAY (cell array of full path file strings) and determines which ones have the extension '.nev' (neuro event file) and which have the extension '.ns#', where # is a number, or the source data files. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim.filenamefromepochfiles is inherited from superclass ndi.daq.reader.mfdaq.blackrock getchannelsepoch - List the channels that are available on this device CHANNELS = GETCHANNELSEPOCH(THEDEV, EPOCHFILES) This device produces the following channels in each epoch: Channel name: | Signal description: ----------------|------------------------------------------ mk1 | stimulus on/off mk2 | stimid getchannelsepoch_ingested - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/getingesteddocument is inherited from superclass ndi.daq.reader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/id is inherited from superclass did.ido ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id); Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/newdocument is inherited from superclass ndi.daq.reader read_blackrock_headers - read information from Blackrock Micro header files [NS_H, NEV_H, HEADERS] = READ_BLACKROCK_HEADERS(NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ, EPOCHFILES, [CHANNELTYPE, CHANNELS]) Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/read_blackrock_headers is inherited from superclass ndi.daq.reader.mfdaq.blackrock readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1) CHANNELTYPE is the type of channel to read (cell array of strings, one per channel) CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is set of epoch files DATA is the channel data (each column contains data from an individual channel) Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/readchannels_epochsamples is inherited from superclass ndi.daq.reader.mfdaq.blackrock readchannels_epochsamples_ingested - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, S0, S1, S) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples - read events or markers of specified channels for a specified epoch [TIMESTAMPS,DATA] = READEVENTS_EPOCHSAMPLES(SELF, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) SELF is the NDI_DAQSYSTEM_MFDAQ_STIMULUS_ANGELUCCI_VISSTIM object. CHANNELTYPE is a cell array of strings describing the the type(s) of channel(s) to read ('event','marker', etc) CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the cell array of file names associated with an epoch DATA is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(MYDEV, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc). It must be a string (not a cell array of strings). CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the epoch number or epochID T is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to epoch N at time 0 as the reference. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/readevents_epochsamples_native is inherited from superclass ndi.daq.reader.mfdaq samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. SR is the list of sample rate from specified channels Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/samplerate is inherited from superclass ndi.daq.reader.mfdaq.blackrock samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/searchquery is inherited from superclass ndi.daq.reader standardize_channel_types - return standard channel type names STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES) Given a cell array of strings of CHANNELTYPES, replace any abbreviations with with the standard channel type name in ndi.daq.reader.mfdaq.channel_types() Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/t0_t1 is inherited from superclass ndi.daq.reader.mfdaq.blackrock t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/t0_t1_ingested is inherited from superclass ndi.daq.reader underlying_datatype - get the underlying data type for a channel in an epoch [DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) Return the underlying datatype for the requested channel. DATATYPE is a type that is suitable for passing to FREAD or FWRITE (e.g., 'float64', 'uint16', etc. See help fread.) P is a ,atrix of polynomials that converts between the double data that is returned by READCHANNEL. RETURNED_DATA = (RAW_DATA+P(i,1))*P(i,2)+(RAW_DATA+P(i,1))*P(i,3) ... There is one row of P for each entry of CHANNEL. DATASIZE is the sample size in bits. CHANNELTYPE must be a string. It is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/underlying_datatype is inherited from superclass ndi.daq.reader.mfdaq unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ, EPOCHPROBEMAP, EPOCHFILES) Examines the NDI_EPOCHPROBEMAP_DAQREADER EPOCHPROBEMAP and determines if it is valid for the given device with epoch files EPOCHFILES. See also: ndi.daq.reader, NDI_EPOCHPROBEMAP_DAQREADER Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/verifyepochprobemap is inherited from superclass ndi.daq.reader.mfdaq.blackrock","title":"ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/angelucci_visstim.m/#class-ndisetupdaqreadermfdaqstimulusangelucci_visstim","text":"NDI_DAQREADER_MFDAQ_STIMULUS_ANGELUCCI_VISSTIM - Device object for Angelucci lab visual stimulus system This device reads the 'stimData.mat' to obtain stimulus parameters and a *.ns4 file (digital events on ai1). Channel name: | Signal description: ----------------|------------------------------------------ m1 | stimulus on/off m2 | stimid","title":"CLASS ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/angelucci_visstim.m/#superclasses","text":"ndi.daq.reader.mfdaq.blackrock , ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/angelucci_visstim.m/#properties","text":"Property Description identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/angelucci_visstim.m/#methods","text":"Method Description angelucci_visstim Create a new multifunction DAQ object channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles return the file name that corresponds to the NEV/NSV files getchannelsepoch List the channels that are available on this device getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.reader object read_blackrock_headers read information from Blackrock Micro header files readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events or markers of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/angelucci_visstim.m/#methods-help","text":"angelucci_visstim - Create a new multifunction DAQ object D = NDI.SETUP.DAQ.READER.MFDAQ.STIMULUS.ANGELUCCI_VISSTIM(NAME, THEFILENAVIGATOR, DAQREADER) Creates a new ndi.daq.system.mfdaq object with NAME, and FILENAVIGATOR. This is an abstract class that is overridden by specific devices. Documentation for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/angelucci_visstim doc ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ? [TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types() Returns a cell array of possible channel types in TYPES, and a corresponding short abbreviation in the cell array ABBREV. ---------------------------------------------------------------------------- | CHANNEL TYPE | ABBREV | Description | |--------------------|---------|-------------------------------------------| | 'analog_in' | 'ai' | Analog input | | 'analog_out' | 'ao' | Analog output | | 'auxiliary_in' | 'ax' | Auxiliary channels | | 'digital_in' | 'di' | Digital input | | 'digital_out' | 'do' | Digital output | | 'event' | 'e' | Event trigger (returns times, codes of | | | | event trigger activation) | | 'marker' | 'mk' | Mark channel (contains value at specified | | | | times) | | 'text' | 'tx' | Text channel (contains text at specified | | | | times) | 'time' | 't' | Time samples | |--------------------|---------|-------------------------------------------| Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim.channel_types is inherited from superclass ndi.daq.reader.mfdaq channelsepoch2timechannelinfo - look up time channel info TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER) Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time channel number that corresponds to the channel specified by CHANNELTYPE and CHANNELNUMBER. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). For the generic ndi.daq.reader.mfdaq, this returns a single clock type 'dev_local'time'; See also: ndi.time.clocktype Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/epochclock is inherited from superclass ndi.daq.reader.mfdaq epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/epochclock_ingested is inherited from superclass ndi.daq.reader eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/eq is inherited from superclass ndi.daq.reader filenamefromepochfiles - return the file name that corresponds to the NEV/NSV files [NEVFILES, NSVFILES] = FILENAMEFROMEPOCHFILES(FILENAME_ARRAY) Examines the list of filenames in FILENAME_ARRAY (cell array of full path file strings) and determines which ones have the extension '.nev' (neuro event file) and which have the extension '.ns#', where # is a number, or the source data files. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim.filenamefromepochfiles is inherited from superclass ndi.daq.reader.mfdaq.blackrock getchannelsepoch - List the channels that are available on this device CHANNELS = GETCHANNELSEPOCH(THEDEV, EPOCHFILES) This device produces the following channels in each epoch: Channel name: | Signal description: ----------------|------------------------------------------ mk1 | stimulus on/off mk2 | stimid getchannelsepoch_ingested - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/getingesteddocument is inherited from superclass ndi.daq.reader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/id is inherited from superclass did.ido ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id); Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/newdocument is inherited from superclass ndi.daq.reader read_blackrock_headers - read information from Blackrock Micro header files [NS_H, NEV_H, HEADERS] = READ_BLACKROCK_HEADERS(NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ, EPOCHFILES, [CHANNELTYPE, CHANNELS]) Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/read_blackrock_headers is inherited from superclass ndi.daq.reader.mfdaq.blackrock readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1) CHANNELTYPE is the type of channel to read (cell array of strings, one per channel) CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is set of epoch files DATA is the channel data (each column contains data from an individual channel) Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/readchannels_epochsamples is inherited from superclass ndi.daq.reader.mfdaq.blackrock readchannels_epochsamples_ingested - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, S0, S1, S) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples - read events or markers of specified channels for a specified epoch [TIMESTAMPS,DATA] = READEVENTS_EPOCHSAMPLES(SELF, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) SELF is the NDI_DAQSYSTEM_MFDAQ_STIMULUS_ANGELUCCI_VISSTIM object. CHANNELTYPE is a cell array of strings describing the the type(s) of channel(s) to read ('event','marker', etc) CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the cell array of file names associated with an epoch DATA is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(MYDEV, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc). It must be a string (not a cell array of strings). CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the epoch number or epochID T is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to epoch N at time 0 as the reference. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/readevents_epochsamples_native is inherited from superclass ndi.daq.reader.mfdaq samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. SR is the list of sample rate from specified channels Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/samplerate is inherited from superclass ndi.daq.reader.mfdaq.blackrock samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/searchquery is inherited from superclass ndi.daq.reader standardize_channel_types - return standard channel type names STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES) Given a cell array of strings of CHANNELTYPES, replace any abbreviations with with the standard channel type name in ndi.daq.reader.mfdaq.channel_types() Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/t0_t1 is inherited from superclass ndi.daq.reader.mfdaq.blackrock t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/t0_t1_ingested is inherited from superclass ndi.daq.reader underlying_datatype - get the underlying data type for a channel in an epoch [DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) Return the underlying datatype for the requested channel. DATATYPE is a type that is suitable for passing to FREAD or FWRITE (e.g., 'float64', 'uint16', etc. See help fread.) P is a ,atrix of polynomials that converts between the double data that is returned by READCHANNEL. RETURNED_DATA = (RAW_DATA+P(i,1))*P(i,2)+(RAW_DATA+P(i,1))*P(i,3) ... There is one row of P for each entry of CHANNEL. DATASIZE is the sample size in bits. CHANNELTYPE must be a string. It is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/underlying_datatype is inherited from superclass ndi.daq.reader.mfdaq unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ, EPOCHPROBEMAP, EPOCHFILES) Examines the NDI_EPOCHPROBEMAP_DAQREADER EPOCHPROBEMAP and determines if it is valid for the given device with epoch files EPOCHFILES. See also: ndi.daq.reader, NDI_EPOCHPROBEMAP_DAQREADER Help for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/verifyepochprobemap is inherited from superclass ndi.daq.reader.mfdaq.blackrock","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/nielsenvisintan.m/","text":"CLASS ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan NDI_DAQREADER_MFDAQ_STIMULUS_NIELSENVISINTAN - Device object for vhlab visual stimulus computer This device reads the 'stimtimes.txt', 'verticalblanking.txt', 'stims.mat', and 'spike2data.smr' files that are present in directories where a VHLAB stimulus computer (running NewStim/RunExperiment) has produced triggers that have been acquired on a CED Spike2 system running the VHLAB Spike2 script. This device produces the following event channels in each epoch. They are not read from the CED SMR file but instead are read from the .txt files that are generated by the vhlab scripts. Channel name: | Signal description: ----------------|------------------------------------------ mk1 | stimulus on/off mk2 | stimid mk3 | stimulus open/close (begin background/end background) Superclasses ndi.daq.reader.mfdaq.intan , ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , did.ido , ndi.documentservice Properties Property Description identifier Methods Method Description channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles return the file name that corresponds to the RHD file, or directory in case of directory getchannelsepoch List the channels that are available on this device getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader intanheadertype2mfdaqchanneltype Convert between Intan headers and the ndi.daq.reader.mfdaq channel types intanname2mfdaqname Converts a channel name from Intan native format to ndi.daq.reader.mfdaq format. isvalid is a unique ID number valid? mfdaqchanneltype2intanchanneltype convert the channel type from generic format of multifuncdaqchannel mfdaqchanneltype2intanfreqheader Return header name with frequency information for channel type mfdaqchanneltype2intanheadertype Convert between the ndi.daq.reader.mfdaq channel types and Intan headers newdocument create a new ndi.document for an ndi.daq.reader object nielsenvisintan Create a new multifunction DAQ object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk Methods help channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ? [TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types() Returns a cell array of possible channel types in TYPES, and a corresponding short abbreviation in the cell array ABBREV. ---------------------------------------------------------------------------- | CHANNEL TYPE | ABBREV | Description | |--------------------|---------|-------------------------------------------| | 'analog_in' | 'ai' | Analog input | | 'analog_out' | 'ao' | Analog output | | 'auxiliary_in' | 'ax' | Auxiliary channels | | 'digital_in' | 'di' | Digital input | | 'digital_out' | 'do' | Digital output | | 'event' | 'e' | Event trigger (returns times, codes of | | | | event trigger activation) | | 'marker' | 'mk' | Mark channel (contains value at specified | | | | times) | | 'text' | 'tx' | Text channel (contains text at specified | | | | times) | 'time' | 't' | Time samples | |--------------------|---------|-------------------------------------------| Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.channel_types is inherited from superclass ndi.daq.reader.mfdaq channelsepoch2timechannelinfo - look up time channel info TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER) Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time channel number that corresponds to the channel specified by CHANNELTYPE and CHANNELNUMBER. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_STIMULUS_NIELSENVISINTAN_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). This returns a single clock type 'dev_local'time'; See also: ndi.time.clocktype epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/epochclock_ingested is inherited from superclass ndi.daq.reader eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/eq is inherited from superclass ndi.daq.reader filenamefromepochfiles - return the file name that corresponds to the RHD file, or directory in case of directory [FILENAME, PARENTDIR, ISDIRECTORY] = FILENAMEFROMEPOCHFILES(NDI_DAQREADER_MFDAQ_INTAN_OBJ, FILENAME_ARRAY) Examines the list of filenames in FILENAME_ARRAY (cell array of full path file strings) and determines which one is an RHD data file. If the 1-file-per-channel mode is used, then PARENTDIR is the name of the directory that holds the data files and ISDIRECTORY is 1. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/filenamefromepochfiles is inherited from superclass ndi.daq.reader.mfdaq.intan getchannelsepoch - List the channels that are available on this device CHANNELS = GETCHANNELSEPOCH(THEDEV, EPOCHFILES) This device produces the following channels in each epoch: Channel name: | Signal description: ----------------|------------------------------------------ mk1 | stimulus on/off mk2 | stimid mk3 | stimulus open/close getchannelsepoch_ingested - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/getingesteddocument is inherited from superclass ndi.daq.reader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/id is inherited from superclass did.ido ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id); Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq intanheadertype2mfdaqchanneltype - Convert between Intan headers and the ndi.daq.reader.mfdaq channel types CHANNELTYPE = INTANHEADERTYPE2MFDAQCHANNELTYPE(INTANCHANNELTYPE) Given an Intan header file type, returns the standard ndi.daq.reader.mfdaq channel type Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.intanheadertype2mfdaqchanneltype is inherited from superclass ndi.daq.reader.mfdaq.intan intanname2mfdaqname - Converts a channel name from Intan native format to ndi.daq.reader.mfdaq format. MFDAQNAME = INTANNAME2MFDAQNAME(ndi.daq.reader.mfdaq.intan, MFDAQTYPE, NAME) Given an Intan native channel name (e.g., 'A-000') in NAME and a ndi.daq.reader.mfdaq channel type string (see NDI_DEVICE_MFDAQ), this function produces an ndi.daq.reader.mfdaq channel name (e.g., 'ai1'). Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.intanname2mfdaqname is inherited from superclass ndi.daq.reader.mfdaq.intan isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.isvalid is inherited from superclass did.ido mfdaqchanneltype2intanchanneltype - convert the channel type from generic format of multifuncdaqchannel to the specific intan channel type INTANCHANNELTYPE = MFDAQCHANNELTYPE2INTANCHANNELTYPE(CHANNELTYPE) the intanchanneltype is a string of the specific channel type for intan Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.mfdaqchanneltype2intanchanneltype is inherited from superclass ndi.daq.reader.mfdaq.intan mfdaqchanneltype2intanfreqheader - Return header name with frequency information for channel type HEADERNAME = MFDAQCHANNELTYPE2INTANFREQHEADER(CHANNELTYPE) Given an NDI_DEV_MFDAQ channel type string, this function returns the associated fieldname Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.mfdaqchanneltype2intanfreqheader is inherited from superclass ndi.daq.reader.mfdaq.intan mfdaqchanneltype2intanheadertype - Convert between the ndi.daq.reader.mfdaq channel types and Intan headers INTANCHANHEADERTYPE = MFDAQCHANNELTYPE2INTANHEADERTYPE(CHANNELTYPE) Given a standard ndi.daq.reader.mfdaq channel type, returns the name of the type as indicated in Intan header files. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.mfdaqchanneltype2intanheadertype is inherited from superclass ndi.daq.reader.mfdaq.intan newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/newdocument is inherited from superclass ndi.daq.reader nielsenvisintan - Create a new multifunction DAQ object D = ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan(NAME, THEFILENAVIGATOR, DAQREADER) Creates a new ndi.daq.system.mfdaq object with NAME, and FILENAVIGATOR. This is an abstract class that is overridden by specific devices. Documentation for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/nielsenvisintan doc ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1) CHANNELTYPE is the type of channel to read (cell array of strings, one per channel, or single string for all channels) CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is set of epoch files DATA is the channel data (each column contains data from an individual channel) Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/readchannels_epochsamples is inherited from superclass ndi.daq.reader.mfdaq.intan readchannels_epochsamples_ingested - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, S0, S1, S) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(SELF, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) SELF is the NDI_DAQSYSTEM_MFDAQ_STIMULUS_NIELSENVISINTAN object. CHANNELTYPE is a cell array of strings describing the the type(s) of channel(s) to read ('event','marker', etc). If CHANNELTYPE is a string, it is assumed to apply to all channels. CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the cell array of file names associated with an epoch DATA is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. samplerate - ** SAMPLERATE - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is an array of sample rates from the specified channels so, these are all events, and it doesn't much matter, so let's make a guess that should apply well in all cases samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/searchquery is inherited from superclass ndi.daq.reader standardize_channel_types - return standard channel type names STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES) Given a cell array of strings of CHANNELTYPES, replace any abbreviations with with the standard channel type name in ndi.daq.reader.mfdaq.channel_types() Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/t0_t1 is inherited from superclass ndi.daq.reader.mfdaq.intan t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/t0_t1_ingested is inherited from superclass ndi.daq.reader underlying_datatype - get the underlying data type for a channel in an epoch [DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) Return the underlying datatype for the requested channel. DATATYPE is a type that is suitable for passing to FREAD or FWRITE (e.g., 'float64', 'uint16', etc. See help fread.) P is a polynomial that converts between the double data that is returned by READCHANNEL. RETURNED_DATA = (RAW_DATA+P(1))*P(2)+(RAW_DATA+P(1))*P(3) ... DATASIZE is the sample size in bits. CHANNELTYPE must be a string. It is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/underlying_datatype is inherited from superclass ndi.daq.reader.mfdaq.intan unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_MFDAQ_INTAN_OBJ, EPOCHPROBEMAP, EPOCHFILES) Examines the NDI_EPOCHPROBEMAP_DAQREADER EPOCHPROBEMAP and determines if it is valid for the given device with epoch files EPOCHFILES. See also: ndi.daq.reader, NDI_EPOCHPROBEMAP_DAQREADER Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/verifyepochprobemap is inherited from superclass ndi.daq.reader.mfdaq.intan","title":"ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/nielsenvisintan.m/#class-ndisetupdaqreadermfdaqstimulusnielsenvisintan","text":"NDI_DAQREADER_MFDAQ_STIMULUS_NIELSENVISINTAN - Device object for vhlab visual stimulus computer This device reads the 'stimtimes.txt', 'verticalblanking.txt', 'stims.mat', and 'spike2data.smr' files that are present in directories where a VHLAB stimulus computer (running NewStim/RunExperiment) has produced triggers that have been acquired on a CED Spike2 system running the VHLAB Spike2 script. This device produces the following event channels in each epoch. They are not read from the CED SMR file but instead are read from the .txt files that are generated by the vhlab scripts. Channel name: | Signal description: ----------------|------------------------------------------ mk1 | stimulus on/off mk2 | stimid mk3 | stimulus open/close (begin background/end background)","title":"CLASS ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/nielsenvisintan.m/#superclasses","text":"ndi.daq.reader.mfdaq.intan , ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/nielsenvisintan.m/#properties","text":"Property Description identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/nielsenvisintan.m/#methods","text":"Method Description channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles return the file name that corresponds to the RHD file, or directory in case of directory getchannelsepoch List the channels that are available on this device getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader intanheadertype2mfdaqchanneltype Convert between Intan headers and the ndi.daq.reader.mfdaq channel types intanname2mfdaqname Converts a channel name from Intan native format to ndi.daq.reader.mfdaq format. isvalid is a unique ID number valid? mfdaqchanneltype2intanchanneltype convert the channel type from generic format of multifuncdaqchannel mfdaqchanneltype2intanfreqheader Return header name with frequency information for channel type mfdaqchanneltype2intanheadertype Convert between the ndi.daq.reader.mfdaq channel types and Intan headers newdocument create a new ndi.document for an ndi.daq.reader object nielsenvisintan Create a new multifunction DAQ object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/nielsenvisintan.m/#methods-help","text":"channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ? [TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types() Returns a cell array of possible channel types in TYPES, and a corresponding short abbreviation in the cell array ABBREV. ---------------------------------------------------------------------------- | CHANNEL TYPE | ABBREV | Description | |--------------------|---------|-------------------------------------------| | 'analog_in' | 'ai' | Analog input | | 'analog_out' | 'ao' | Analog output | | 'auxiliary_in' | 'ax' | Auxiliary channels | | 'digital_in' | 'di' | Digital input | | 'digital_out' | 'do' | Digital output | | 'event' | 'e' | Event trigger (returns times, codes of | | | | event trigger activation) | | 'marker' | 'mk' | Mark channel (contains value at specified | | | | times) | | 'text' | 'tx' | Text channel (contains text at specified | | | | times) | 'time' | 't' | Time samples | |--------------------|---------|-------------------------------------------| Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.channel_types is inherited from superclass ndi.daq.reader.mfdaq channelsepoch2timechannelinfo - look up time channel info TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER) Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time channel number that corresponds to the channel specified by CHANNELTYPE and CHANNELNUMBER. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_STIMULUS_NIELSENVISINTAN_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). This returns a single clock type 'dev_local'time'; See also: ndi.time.clocktype epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/epochclock_ingested is inherited from superclass ndi.daq.reader eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/eq is inherited from superclass ndi.daq.reader filenamefromepochfiles - return the file name that corresponds to the RHD file, or directory in case of directory [FILENAME, PARENTDIR, ISDIRECTORY] = FILENAMEFROMEPOCHFILES(NDI_DAQREADER_MFDAQ_INTAN_OBJ, FILENAME_ARRAY) Examines the list of filenames in FILENAME_ARRAY (cell array of full path file strings) and determines which one is an RHD data file. If the 1-file-per-channel mode is used, then PARENTDIR is the name of the directory that holds the data files and ISDIRECTORY is 1. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/filenamefromepochfiles is inherited from superclass ndi.daq.reader.mfdaq.intan getchannelsepoch - List the channels that are available on this device CHANNELS = GETCHANNELSEPOCH(THEDEV, EPOCHFILES) This device produces the following channels in each epoch: Channel name: | Signal description: ----------------|------------------------------------------ mk1 | stimulus on/off mk2 | stimid mk3 | stimulus open/close getchannelsepoch_ingested - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/getingesteddocument is inherited from superclass ndi.daq.reader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/id is inherited from superclass did.ido ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id); Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq intanheadertype2mfdaqchanneltype - Convert between Intan headers and the ndi.daq.reader.mfdaq channel types CHANNELTYPE = INTANHEADERTYPE2MFDAQCHANNELTYPE(INTANCHANNELTYPE) Given an Intan header file type, returns the standard ndi.daq.reader.mfdaq channel type Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.intanheadertype2mfdaqchanneltype is inherited from superclass ndi.daq.reader.mfdaq.intan intanname2mfdaqname - Converts a channel name from Intan native format to ndi.daq.reader.mfdaq format. MFDAQNAME = INTANNAME2MFDAQNAME(ndi.daq.reader.mfdaq.intan, MFDAQTYPE, NAME) Given an Intan native channel name (e.g., 'A-000') in NAME and a ndi.daq.reader.mfdaq channel type string (see NDI_DEVICE_MFDAQ), this function produces an ndi.daq.reader.mfdaq channel name (e.g., 'ai1'). Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.intanname2mfdaqname is inherited from superclass ndi.daq.reader.mfdaq.intan isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.isvalid is inherited from superclass did.ido mfdaqchanneltype2intanchanneltype - convert the channel type from generic format of multifuncdaqchannel to the specific intan channel type INTANCHANNELTYPE = MFDAQCHANNELTYPE2INTANCHANNELTYPE(CHANNELTYPE) the intanchanneltype is a string of the specific channel type for intan Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.mfdaqchanneltype2intanchanneltype is inherited from superclass ndi.daq.reader.mfdaq.intan mfdaqchanneltype2intanfreqheader - Return header name with frequency information for channel type HEADERNAME = MFDAQCHANNELTYPE2INTANFREQHEADER(CHANNELTYPE) Given an NDI_DEV_MFDAQ channel type string, this function returns the associated fieldname Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.mfdaqchanneltype2intanfreqheader is inherited from superclass ndi.daq.reader.mfdaq.intan mfdaqchanneltype2intanheadertype - Convert between the ndi.daq.reader.mfdaq channel types and Intan headers INTANCHANHEADERTYPE = MFDAQCHANNELTYPE2INTANHEADERTYPE(CHANNELTYPE) Given a standard ndi.daq.reader.mfdaq channel type, returns the name of the type as indicated in Intan header files. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.mfdaqchanneltype2intanheadertype is inherited from superclass ndi.daq.reader.mfdaq.intan newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/newdocument is inherited from superclass ndi.daq.reader nielsenvisintan - Create a new multifunction DAQ object D = ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan(NAME, THEFILENAVIGATOR, DAQREADER) Creates a new ndi.daq.system.mfdaq object with NAME, and FILENAVIGATOR. This is an abstract class that is overridden by specific devices. Documentation for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/nielsenvisintan doc ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1) CHANNELTYPE is the type of channel to read (cell array of strings, one per channel, or single string for all channels) CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is set of epoch files DATA is the channel data (each column contains data from an individual channel) Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/readchannels_epochsamples is inherited from superclass ndi.daq.reader.mfdaq.intan readchannels_epochsamples_ingested - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, S0, S1, S) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(SELF, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) SELF is the NDI_DAQSYSTEM_MFDAQ_STIMULUS_NIELSENVISINTAN object. CHANNELTYPE is a cell array of strings describing the the type(s) of channel(s) to read ('event','marker', etc). If CHANNELTYPE is a string, it is assumed to apply to all channels. CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the cell array of file names associated with an epoch DATA is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. samplerate - ** SAMPLERATE - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is an array of sample rates from the specified channels so, these are all events, and it doesn't much matter, so let's make a guess that should apply well in all cases samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/searchquery is inherited from superclass ndi.daq.reader standardize_channel_types - return standard channel type names STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES) Given a cell array of strings of CHANNELTYPES, replace any abbreviations with with the standard channel type name in ndi.daq.reader.mfdaq.channel_types() Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/t0_t1 is inherited from superclass ndi.daq.reader.mfdaq.intan t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/t0_t1_ingested is inherited from superclass ndi.daq.reader underlying_datatype - get the underlying data type for a channel in an epoch [DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) Return the underlying datatype for the requested channel. DATATYPE is a type that is suitable for passing to FREAD or FWRITE (e.g., 'float64', 'uint16', etc. See help fread.) P is a polynomial that converts between the double data that is returned by READCHANNEL. RETURNED_DATA = (RAW_DATA+P(1))*P(2)+(RAW_DATA+P(1))*P(3) ... DATASIZE is the sample size in bits. CHANNELTYPE must be a string. It is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/underlying_datatype is inherited from superclass ndi.daq.reader.mfdaq.intan unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_MFDAQ_INTAN_OBJ, EPOCHPROBEMAP, EPOCHFILES) Examines the NDI_EPOCHPROBEMAP_DAQREADER EPOCHPROBEMAP and determines if it is valid for the given device with epoch files EPOCHFILES. See also: ndi.daq.reader, NDI_EPOCHPROBEMAP_DAQREADER Help for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/verifyepochprobemap is inherited from superclass ndi.daq.reader.mfdaq.intan","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/vhlabvisspike2.m/","text":"CLASS ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2 NDI_DAQREADER_MFDAQ_STIMULUS_VHLABVISSPIKE2 - Device object for vhlab visual stimulus computer This device reads the 'stimtimes.txt', 'verticalblanking.txt', 'stims.mat', and 'spike2data.smr' files that are present in directories where a VHLAB stimulus computer (running NewStim/RunExperiment) has produced triggers that have been acquired on a CED Spike2 system running the VHLAB Spike2 script. This device produces the following event channels in each epoch. They are not read from the CED SMR file but instead are read from the .txt files that are generated by the vhlab scripts. Channel name: | Signal description: ----------------|------------------------------------------ mk1 | stimulus on/off mk2 | stimid e1 | frame trigger e2 | vertical refresh trigger e3 | pretime trigger Superclasses ndi.daq.reader.mfdaq.cedspike2 , ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , did.ido , ndi.documentservice Properties Property Description identifier Methods Method Description cedspike2filelist2smrfile Identify the .SMR file out of a file list cedspike2headertype2mfdaqchanneltype Convert between Intan headers and the ndi.daq.system.mfdaq channel types channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal getchannelsepoch List the channels that are available on this device getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk vhlabvisspike2 Create a new multifunction DAQ object Methods help cedspike2filelist2smrfile - Identify the .SMR file out of a file list FILENAME = CEDSPIKE2FILELIST2SMRFILE(FILELIST) Given a cell array of strings FILELIST with full-path file names, this function identifies the first file with an extension '.smr' (case insensitive) and returns the result in FILENAME (full-path file name). Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.cedspike2filelist2smrfile is inherited from superclass ndi.daq.reader.mfdaq.cedspike2 cedspike2headertype2mfdaqchanneltype - Convert between Intan headers and the ndi.daq.system.mfdaq channel types CHANNELTYPE = CEDSPIKE2HEADERTYPE2MFDAQCHANNELTYPE(CEDSPIKE2CHANNELTYPE) Given an Intan header file type, returns the standard ndi.daq.system.mfdaq channel type Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.cedspike2headertype2mfdaqchanneltype is inherited from superclass ndi.daq.reader.mfdaq.cedspike2 channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ? [TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types() Returns a cell array of possible channel types in TYPES, and a corresponding short abbreviation in the cell array ABBREV. ---------------------------------------------------------------------------- | CHANNEL TYPE | ABBREV | Description | |--------------------|---------|-------------------------------------------| | 'analog_in' | 'ai' | Analog input | | 'analog_out' | 'ao' | Analog output | | 'auxiliary_in' | 'ax' | Auxiliary channels | | 'digital_in' | 'di' | Digital input | | 'digital_out' | 'do' | Digital output | | 'event' | 'e' | Event trigger (returns times, codes of | | | | event trigger activation) | | 'marker' | 'mk' | Mark channel (contains value at specified | | | | times) | | 'text' | 'tx' | Text channel (contains text at specified | | | | times) | 'time' | 't' | Time samples | |--------------------|---------|-------------------------------------------| Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.channel_types is inherited from superclass ndi.daq.reader.mfdaq channelsepoch2timechannelinfo - look up time channel info TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER) Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time channel number that corresponds to the channel specified by CHANNELTYPE and CHANNELNUMBER. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_STIMULUS_VHLABVISSPIKE2_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). This returns a single clock type 'dev_local'time'; See also: ndi.time.clocktype epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/epochclock_ingested is inherited from superclass ndi.daq.reader eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/eq is inherited from superclass ndi.daq.reader getchannelsepoch - List the channels that are available on this device CHANNELS = GETCHANNELSEPOCH(THEDEV, EPOCHFILES) This device produces the following channels in each epoch: Channel name: | Signal description: ----------------|------------------------------------------ mk1 | stimulus on/off mk2 | stimid mk3 | stimulus open/close e1 | frame trigger e2 | vertical refresh trigger e3 | pretime trigger getchannelsepoch_ingested - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/getingesteddocument is inherited from superclass ndi.daq.reader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/id is inherited from superclass did.ido ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id); Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/newdocument is inherited from superclass ndi.daq.reader readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES, S0, S1) CHANNELTYPE is the type of channel to read (cell array of strings, one per channel, or single string for all channels) CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the cell array of full path filenames for this epoch DATA is the channel data (each column contains data from an individual channel) Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/readchannels_epochsamples is inherited from superclass ndi.daq.reader.mfdaq.cedspike2 readchannels_epochsamples_ingested - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, S0, S1, S) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(SELF, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) SELF is the NDI_DAQSYSTEM_MFDAQ_STIMULUS_VHVISSPIKE2 object. CHANNELTYPE is a cell array of strings describing the the type(s) of channel(s) to read ('event','marker', etc). If CHANNELTYPE is a string, it is assumed to apply to all channels. CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the cell array of file names associated with an epoch DATA is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. samplerate - ** SAMPLERATE - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is an array of sample rates from the specified channels so, these are all events, and it doesn't much matter, so let's make a guess that should apply well in all cases samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/searchquery is inherited from superclass ndi.daq.reader standardize_channel_types - return standard channel type names STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES) Given a cell array of strings of CHANNELTYPES, replace any abbreviations with with the standard channel type name in ndi.daq.reader.mfdaq.channel_types() Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ, EPOCHFILES) Return the beginning (t0) and end (t1) times of the EPOCHFILES that define this epoch in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/t0_t1 is inherited from superclass ndi.daq.reader.mfdaq.cedspike2 t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/t0_t1_ingested is inherited from superclass ndi.daq.reader underlying_datatype - get the underlying data type for a channel in an epoch [DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) Return the underlying datatype for the requested channel. DATATYPE is a type that is suitable for passing to FREAD or FWRITE (e.g., 'float64', 'uint16', etc. See help fread.) P is a polynomial that converts between the double data that is returned by READCHANNEL. RETURNED_DATA = (RAW_DATA+P(1))*P(2)+(RAW_DATA+P(1))*P(3) ... DATASIZE is the sample size in bits. CHANNELTYPE must be a string. It is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/underlying_datatype is inherited from superclass ndi.daq.reader.mfdaq.cedspike2 unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ, EPOCHPROBEMAP, EPOCHFILES) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER. For the abstract class ndi.daq.system, EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/verifyepochprobemap is inherited from superclass ndi.daq.reader.mfdaq.cedspike2 vhlabvisspike2 - Create a new multifunction DAQ object D = ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2(NAME, THEFILENAVIGATOR, DAQREADER) Creates a new ndi.daq.system.mfdaq object with NAME, and FILENAVIGATOR. This is an abstract class that is overridden by specific devices. Documentation for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/vhlabvisspike2 doc ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2","title":"ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/vhlabvisspike2.m/#class-ndisetupdaqreadermfdaqstimulusvhlabvisspike2","text":"NDI_DAQREADER_MFDAQ_STIMULUS_VHLABVISSPIKE2 - Device object for vhlab visual stimulus computer This device reads the 'stimtimes.txt', 'verticalblanking.txt', 'stims.mat', and 'spike2data.smr' files that are present in directories where a VHLAB stimulus computer (running NewStim/RunExperiment) has produced triggers that have been acquired on a CED Spike2 system running the VHLAB Spike2 script. This device produces the following event channels in each epoch. They are not read from the CED SMR file but instead are read from the .txt files that are generated by the vhlab scripts. Channel name: | Signal description: ----------------|------------------------------------------ mk1 | stimulus on/off mk2 | stimid e1 | frame trigger e2 | vertical refresh trigger e3 | pretime trigger","title":"CLASS ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/vhlabvisspike2.m/#superclasses","text":"ndi.daq.reader.mfdaq.cedspike2 , ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/vhlabvisspike2.m/#properties","text":"Property Description identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/vhlabvisspike2.m/#methods","text":"Method Description cedspike2filelist2smrfile Identify the .SMR file out of a file list cedspike2headertype2mfdaqchanneltype Convert between Intan headers and the ndi.daq.system.mfdaq channel types channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal getchannelsepoch List the channels that are available on this device getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk vhlabvisspike2 Create a new multifunction DAQ object","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/vhlabvisspike2.m/#methods-help","text":"cedspike2filelist2smrfile - Identify the .SMR file out of a file list FILENAME = CEDSPIKE2FILELIST2SMRFILE(FILELIST) Given a cell array of strings FILELIST with full-path file names, this function identifies the first file with an extension '.smr' (case insensitive) and returns the result in FILENAME (full-path file name). Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.cedspike2filelist2smrfile is inherited from superclass ndi.daq.reader.mfdaq.cedspike2 cedspike2headertype2mfdaqchanneltype - Convert between Intan headers and the ndi.daq.system.mfdaq channel types CHANNELTYPE = CEDSPIKE2HEADERTYPE2MFDAQCHANNELTYPE(CEDSPIKE2CHANNELTYPE) Given an Intan header file type, returns the standard ndi.daq.system.mfdaq channel type Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.cedspike2headertype2mfdaqchanneltype is inherited from superclass ndi.daq.reader.mfdaq.cedspike2 channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ? [TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types() Returns a cell array of possible channel types in TYPES, and a corresponding short abbreviation in the cell array ABBREV. ---------------------------------------------------------------------------- | CHANNEL TYPE | ABBREV | Description | |--------------------|---------|-------------------------------------------| | 'analog_in' | 'ai' | Analog input | | 'analog_out' | 'ao' | Analog output | | 'auxiliary_in' | 'ax' | Auxiliary channels | | 'digital_in' | 'di' | Digital input | | 'digital_out' | 'do' | Digital output | | 'event' | 'e' | Event trigger (returns times, codes of | | | | event trigger activation) | | 'marker' | 'mk' | Mark channel (contains value at specified | | | | times) | | 'text' | 'tx' | Text channel (contains text at specified | | | | times) | 'time' | 't' | Time samples | |--------------------|---------|-------------------------------------------| Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.channel_types is inherited from superclass ndi.daq.reader.mfdaq channelsepoch2timechannelinfo - look up time channel info TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER) Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time channel number that corresponds to the channel specified by CHANNELTYPE and CHANNELNUMBER. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_STIMULUS_VHLABVISSPIKE2_OBJ, EPOCHFILES) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). This returns a single clock type 'dev_local'time'; See also: ndi.time.clocktype epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S) Return the clock types available for this epoch as a cell array of ndi.time.clocktype objects (or sub-class members). See also: ndi.time.clocktype Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/epochclock_ingested is inherited from superclass ndi.daq.reader eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/eq is inherited from superclass ndi.daq.reader getchannelsepoch - List the channels that are available on this device CHANNELS = GETCHANNELSEPOCH(THEDEV, EPOCHFILES) This device produces the following channels in each epoch: Channel name: | Signal description: ----------------|------------------------------------------ mk1 | stimulus on/off mk2 | stimid mk3 | stimulus open/close e1 | frame trigger e2 | vertical refresh trigger e3 | pretime trigger getchannelsepoch_ingested - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxiliary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') 'time_channel' | The number of the time channel that contains the time information | for the channel. Can be NaN when not applicable. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq getingesteddocument - return the ndi.document with the data for an ingested epoch D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S) Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch. S is the ndi.session for the dataset. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/getingesteddocument is inherited from superclass ndi.daq.reader id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/id is inherited from superclass did.ido ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID) Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data for an ndi.daq.reader object. The document D is not added to any database. Example: D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id); Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.isvalid is inherited from superclass did.ido newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/newdocument is inherited from superclass ndi.daq.reader readchannels_epochsamples - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES, S0, S1) CHANNELTYPE is the type of channel to read (cell array of strings, one per channel, or single string for all channels) CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the cell array of full path filenames for this epoch DATA is the channel data (each column contains data from an individual channel) Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/readchannels_epochsamples is inherited from superclass ndi.daq.reader.mfdaq.cedspike2 readchannels_epochsamples_ingested - read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, S0, S1, S) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the set of epochfiles to read from S0 is the sample where reading should start, and S1 is sample where reading should end. DATA will have one column per channel. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ... EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ... CHANNEL, EPOCHFILES, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read: 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries are -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSFILES is a cell array of full path file names Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(SELF, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) SELF is the NDI_DAQSYSTEM_MFDAQ_STIMULUS_VHVISSPIKE2 object. CHANNELTYPE is a cell array of strings describing the the type(s) of channel(s) to read ('event','marker', etc). If CHANNELTYPE is a string, it is assumed to apply to all channels. CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the cell array of file names associated with an epoch DATA is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. samplerate - ** SAMPLERATE - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is an array of sample rates from the specified channels so, these are all events, and it doesn't much matter, so let's make a guess that should apply well in all cases samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY(NDI_DAQREADER_OBJ) Creates a search query for the ndi.daq.reader object. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/searchquery is inherited from superclass ndi.daq.reader standardize_channel_types - return standard channel type names STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES) Given a cell array of strings of CHANNELTYPES, replace any abbreviations with with the standard channel type name in ndi.daq.reader.mfdaq.channel_types() Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ, EPOCHFILES) Return the beginning (t0) and end (t1) times of the EPOCHFILES that define this epoch in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/t0_t1 is inherited from superclass ndi.daq.reader.mfdaq.cedspike2 t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/t0_t1_ingested is inherited from superclass ndi.daq.reader underlying_datatype - get the underlying data type for a channel in an epoch [DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) Return the underlying datatype for the requested channel. DATATYPE is a type that is suitable for passing to FREAD or FWRITE (e.g., 'float64', 'uint16', etc. See help fread.) P is a polynomial that converts between the double data that is returned by READCHANNEL. RETURNED_DATA = (RAW_DATA+P(1))*P(2)+(RAW_DATA+P(1))*P(3) ... DATASIZE is the sample size in bits. CHANNELTYPE must be a string. It is assumed that that CHANNELTYPE applies to every entry of CHANNEL. Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/underlying_datatype is inherited from superclass ndi.daq.reader.mfdaq.cedspike2 unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.unique_id is inherited from superclass did.ido verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP(NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ, EPOCHPROBEMAP, EPOCHFILES) Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER. For the abstract class ndi.daq.system, EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object. See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem Help for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/verifyepochprobemap is inherited from superclass ndi.daq.reader.mfdaq.cedspike2 vhlabvisspike2 - Create a new multifunction DAQ object D = ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2(NAME, THEFILENAVIGATOR, DAQREADER) Creates a new ndi.daq.system.mfdaq object with NAME, and FILENAVIGATOR. This is an abstract class that is overridden by specific devices. Documentation for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/vhlabvisspike2 doc ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/angeluccilab.m/","text":"ndi.setup.daq.system.angeluccilab ANGELUCCILAB - initialize devices used by ANGELUCCILAB EXP = ndi.setup.daq.system.angeluccilab(EXP, DEVNAME) Creates devices that look for files in the ANGELUCCILAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a device in the table below. These devices are added to the ndi.session object EXP. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence of a 'reference.txt' file, as well as specific files that are needed by each device as described below. Devices created | Description ---------------------------------------------------------------- angelucci_blackrock5 | ndi.daq.system.mfdaq that looks for | files '#.nev', '#.ns5', and 'stimData.mat' angelucci_visstim | ndi.daq.system.mfdaq that looks for | files '#.nev', '#.ns4', and 'stimData.mat' See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system.angeluccilab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/angeluccilab.m/#ndisetupdaqsystemangeluccilab","text":"ANGELUCCILAB - initialize devices used by ANGELUCCILAB EXP = ndi.setup.daq.system.angeluccilab(EXP, DEVNAME) Creates devices that look for files in the ANGELUCCILAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a device in the table below. These devices are added to the ndi.session object EXP. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence of a 'reference.txt' file, as well as specific files that are needed by each device as described below. Devices created | Description ---------------------------------------------------------------- angelucci_blackrock5 | ndi.daq.system.mfdaq that looks for | files '#.nev', '#.ns5', and 'stimData.mat' angelucci_visstim | ndi.daq.system.mfdaq that looks for | files '#.nev', '#.ns4', and 'stimData.mat' See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system.angeluccilab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/dbkatzlab.m/","text":"ndi.setup.daq.system.dbkatzlab KATZLAB_MAKEDEV - initialize devices used by KATZLAB EXP = ndi.setups.katzlab_makedev(EXP, DEVNAME) Creates devices that look for files in the KATZLAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a device in the table below. These devices are added to the ndi.session object EXP. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence specific files that are needed by each device as described below. Devices created | Description ---------------------------------------------------------------- narendra_intan | ndi_daqsystem_multichannel_mfdaq that looks for | files 'time.dat, 'info.rhd', and 'epochprobemap.txt' See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system.dbkatzlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/dbkatzlab.m/#ndisetupdaqsystemdbkatzlab","text":"KATZLAB_MAKEDEV - initialize devices used by KATZLAB EXP = ndi.setups.katzlab_makedev(EXP, DEVNAME) Creates devices that look for files in the KATZLAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a device in the table below. These devices are added to the ndi.session object EXP. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence specific files that are needed by each device as described below. Devices created | Description ---------------------------------------------------------------- narendra_intan | ndi_daqsystem_multichannel_mfdaq that looks for | files 'time.dat, 'info.rhd', and 'epochprobemap.txt' See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system.dbkatzlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/export_angeluccilab_daq_systems.m/","text":"ndi.setup.daq.system.export_angeluccilab_daq_systems ndi.setup.daq.system.export_angeluccilab_daq_systems is a script.","title":"ndi.setup.daq.system.export_angeluccilab_daq_systems"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/export_angeluccilab_daq_systems.m/#ndisetupdaqsystemexport_angeluccilab_daq_systems","text":"ndi.setup.daq.system.export_angeluccilab_daq_systems is a script.","title":"ndi.setup.daq.system.export_angeluccilab_daq_systems"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/export_dbkatzlab_daq_systems.m/","text":"ndi.setup.daq.system.export_dbkatzlab_daq_systems ndi.setup.daq.system.export_dbkatzlab_daq_systems is a script.","title":"ndi.setup.daq.system.export_dbkatzlab_daq_systems"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/export_dbkatzlab_daq_systems.m/#ndisetupdaqsystemexport_dbkatzlab_daq_systems","text":"ndi.setup.daq.system.export_dbkatzlab_daq_systems is a script.","title":"ndi.setup.daq.system.export_dbkatzlab_daq_systems"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/export_marderlab_daq_systems.m/","text":"ndi.setup.daq.system.export_marderlab_daq_systems ndi.setup.daq.system.export_marderlab_daq_systems is a script.","title":"ndi.setup.daq.system.export_marderlab_daq_systems"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/export_marderlab_daq_systems.m/#ndisetupdaqsystemexport_marderlab_daq_systems","text":"ndi.setup.daq.system.export_marderlab_daq_systems is a script.","title":"ndi.setup.daq.system.export_marderlab_daq_systems"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/export_vhlab_daq_systems.m/","text":"ndi.setup.daq.system.export_vhlab_daq_systems ndi.setup.daq.system.export_vhlab_daq_systems is a script.","title":"ndi.setup.daq.system.export_vhlab_daq_systems"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/export_vhlab_daq_systems.m/#ndisetupdaqsystemexport_vhlab_daq_systems","text":"ndi.setup.daq.system.export_vhlab_daq_systems is a script.","title":"ndi.setup.daq.system.export_vhlab_daq_systems"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/export_yangyangwang_daq_systems.m/","text":"ndi.setup.daq.system.export_yangyangwang_daq_systems ndi.setup.daq.system.export_yangyangwang_daq_systems is a script.","title":"ndi.setup.daq.system.export_yangyangwang_daq_systems"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/export_yangyangwang_daq_systems.m/#ndisetupdaqsystemexport_yangyangwang_daq_systems","text":"ndi.setup.daq.system.export_yangyangwang_daq_systems is a script.","title":"ndi.setup.daq.system.export_yangyangwang_daq_systems"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/listDaqSystemNames.m/","text":"ndi.setup.daq.system.listDaqSystemNames listDaqSystemNames - List names of pre-configured DAQ systems for a lab","title":"ndi.setup.daq.system.listDaqSystemNames"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/listDaqSystemNames.m/#ndisetupdaqsystemlistdaqsystemnames","text":"listDaqSystemNames - List names of pre-configured DAQ systems for a lab","title":"ndi.setup.daq.system.listDaqSystemNames"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/marderlab.m/","text":"ndi.setup.daq.system.marderlab NDI_MARDERLAB_MAKEDEV - initialize devices used by MARDERLAB EXP = ndi.setups.marderlab.makedev(EXP, DEVNAME) Creates devices that look for files in the MARDERLAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a device in the table below. These devices are added to the ndi.session object EXP. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence specific files that are needed by each device as described below. Devices created | Description ---------------------------------------------------------------- marder_ced | ndi_daqsystem_multichannel_mfdaq that looks for | files '[something].smr' and | '[something].epochprobemap.txt' See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system.marderlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/marderlab.m/#ndisetupdaqsystemmarderlab","text":"NDI_MARDERLAB_MAKEDEV - initialize devices used by MARDERLAB EXP = ndi.setups.marderlab.makedev(EXP, DEVNAME) Creates devices that look for files in the MARDERLAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a device in the table below. These devices are added to the ndi.session object EXP. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence specific files that are needed by each device as described below. Devices created | Description ---------------------------------------------------------------- marder_ced | ndi_daqsystem_multichannel_mfdaq that looks for | files '[something].smr' and | '[something].epochprobemap.txt' See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system.marderlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/vhlab.m/","text":"ndi.setup.daq.system.vhlab ndi.setup.daq.system.vhlab - initialize daq systems used by VHLAB S = ndi.setup.daq.system.vhlab(S, DEVNAME) Creates daq systems that look for files in the VHLAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a daq systems in the table below. These daq systems are added to the ndi.session object S. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence of a 'reference.txt' file, as well as specific files that are needed by each device as described below. Devices created | Description |------------------|--------------------------------------------------| | vhintan | ndi.daq.system.mfdaq that looks for files | | | 'vhintan_channelgrouping.txt' and '*.rhd' | | vhspike2 | ndi.daq.system.mfdaq that looks for files | | | 'vhspike2_channelgrouping.txt' and '*.smr' | | vhvis_spike2 | ndi.daq.system.mfdaq.stimulus that looks for | | | files 'stimtimes.txt', 'verticalblanking.txt',| | | 'stims.mat', and 'spike2data.smr'. | ----------------------------------------------------------------------- See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system.vhlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/vhlab.m/#ndisetupdaqsystemvhlab","text":"ndi.setup.daq.system.vhlab - initialize daq systems used by VHLAB S = ndi.setup.daq.system.vhlab(S, DEVNAME) Creates daq systems that look for files in the VHLAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a daq systems in the table below. These daq systems are added to the ndi.session object S. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence of a 'reference.txt' file, as well as specific files that are needed by each device as described below. Devices created | Description |------------------|--------------------------------------------------| | vhintan | ndi.daq.system.mfdaq that looks for files | | | 'vhintan_channelgrouping.txt' and '*.rhd' | | vhspike2 | ndi.daq.system.mfdaq that looks for files | | | 'vhspike2_channelgrouping.txt' and '*.smr' | | vhvis_spike2 | ndi.daq.system.mfdaq.stimulus that looks for | | | files 'stimtimes.txt', 'verticalblanking.txt',| | | 'stims.mat', and 'spike2data.smr'. | ----------------------------------------------------------------------- See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system.vhlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/yangyangwang.m/","text":"ndi.setup.daq.system.yangyangwang ndi.setup.daq.system.vhlab - initialize daq systems used by VHLAB S = ndi.setup.daq.system.vhlab(S, DEVNAME) Creates daq systems that look for files in the VHLAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a daq systems in the table below. These daq systems are added to the ndi.session object S. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence of a 'reference.txt' file, as well as specific files that are needed by each device as described below. Devices created | Description |------------------|--------------------------------------------------| | yangyang_tdt_sev | ndi.daq.system.mfdaq that looks for files | | | '*_Ch1.sev' | ----------------------------------------------------------------------- See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system.yangyangwang"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/yangyangwang.m/#ndisetupdaqsystemyangyangwang","text":"ndi.setup.daq.system.vhlab - initialize daq systems used by VHLAB S = ndi.setup.daq.system.vhlab(S, DEVNAME) Creates daq systems that look for files in the VHLAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a daq systems in the table below. These daq systems are added to the ndi.session object S. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence of a 'reference.txt' file, as well as specific files that are needed by each device as described below. Devices created | Description |------------------|--------------------------------------------------| | yangyang_tdt_sev | ndi.daq.system.mfdaq that looks for files | | | '*_Ch1.sev' | ----------------------------------------------------------------------- See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system.yangyangwang"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/deprecating/angeluccilab.m/","text":"ndi.setup.daq.system/deprecating.angeluccilab ANGELUCCILAB - initialize devices used by ANGELUCCILAB EXP = ndi.setup.daq.system.angeluccilab(EXP, DEVNAME) Creates devices that look for files in the ANGELUCCILAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a device in the table below. These devices are added to the ndi.session object EXP. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence of a 'reference.txt' file, as well as specific files that are needed by each device as described below. Devices created | Description ---------------------------------------------------------------- angelucci_blackrock5 | ndi.daq.system.mfdaq that looks for | files '#.nev', '#.ns5', and 'stimData.mat' angelucci_visstim | ndi.daq.system.mfdaq that looks for | files '#.nev', '#.ns4', and 'stimData.mat' See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system/deprecating.angeluccilab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/deprecating/angeluccilab.m/#ndisetupdaqsystemdeprecatingangeluccilab","text":"ANGELUCCILAB - initialize devices used by ANGELUCCILAB EXP = ndi.setup.daq.system.angeluccilab(EXP, DEVNAME) Creates devices that look for files in the ANGELUCCILAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a device in the table below. These devices are added to the ndi.session object EXP. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence of a 'reference.txt' file, as well as specific files that are needed by each device as described below. Devices created | Description ---------------------------------------------------------------- angelucci_blackrock5 | ndi.daq.system.mfdaq that looks for | files '#.nev', '#.ns5', and 'stimData.mat' angelucci_visstim | ndi.daq.system.mfdaq that looks for | files '#.nev', '#.ns4', and 'stimData.mat' See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system/deprecating.angeluccilab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/deprecating/dbkatzlab.m/","text":"ndi.setup.daq.system/deprecating.dbkatzlab KATZLAB_MAKEDEV - initialize devices used by KATZLAB EXP = ndi.setups.katzlab_makedev(EXP, DEVNAME) Creates devices that look for files in the KATZLAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a device in the table below. These devices are added to the ndi.session object EXP. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence specific files that are needed by each device as described below. Devices created | Description ---------------------------------------------------------------- narendra_intan | ndi_daqsystem_multichannel_mfdaq that looks for | files 'time.dat, 'info.rhd', and 'epochprobemap.txt' See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system/deprecating.dbkatzlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/deprecating/dbkatzlab.m/#ndisetupdaqsystemdeprecatingdbkatzlab","text":"KATZLAB_MAKEDEV - initialize devices used by KATZLAB EXP = ndi.setups.katzlab_makedev(EXP, DEVNAME) Creates devices that look for files in the KATZLAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a device in the table below. These devices are added to the ndi.session object EXP. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence specific files that are needed by each device as described below. Devices created | Description ---------------------------------------------------------------- narendra_intan | ndi_daqsystem_multichannel_mfdaq that looks for | files 'time.dat, 'info.rhd', and 'epochprobemap.txt' See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system/deprecating.dbkatzlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/deprecating/marderlab.m/","text":"ndi.setup.daq.system/deprecating.marderlab MARDERLAB - initialize devices used by MARDERLAB EXP = ndi.setups.marderlab.makedev(EXP, DEVNAME) Creates devices that look for files in the MARDERLAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a device in the table below. These devices are added to the ndi.session object EXP. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence specific files that are needed by each device as described below. Devices created | Description ---------------------------------------------------------------- marder_ced | ndi_daqsystem_multichannel_mfdaq that looks for | files '[something].smr' and | '[something].epochprobemap.txt' See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system/deprecating.marderlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/deprecating/marderlab.m/#ndisetupdaqsystemdeprecatingmarderlab","text":"MARDERLAB - initialize devices used by MARDERLAB EXP = ndi.setups.marderlab.makedev(EXP, DEVNAME) Creates devices that look for files in the MARDERLAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a device in the table below. These devices are added to the ndi.session object EXP. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence specific files that are needed by each device as described below. Devices created | Description ---------------------------------------------------------------- marder_ced | ndi_daqsystem_multichannel_mfdaq that looks for | files '[something].smr' and | '[something].epochprobemap.txt' See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system/deprecating.marderlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/deprecating/vhlab.m/","text":"ndi.setup.daq.system/deprecating.vhlab ndi.setup.daq.system.vhlab - initialize daq systems used by VHLAB S = ndi.setup.daq.system.vhlab(S, DEVNAME) Creates daq systems that look for files in the VHLAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a daq systems in the table below. These daq systems are added to the ndi.session object S. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence of a 'reference.txt' file, as well as specific files that are needed by each device as described below. Devices created | Description |------------------|--------------------------------------------------| | vhintan | ndi.daq.system.mfdaq that looks for files | | | 'vhintan_channelgrouping.txt' and '*.rhd' | | vhspike2 | ndi.daq.system.mfdaq that looks for files | | | 'vhspike2_channelgrouping.txt' and '*.smr' | | vhvis_spike2 | ndi.daq.system.mfdaq.stimulus that looks for | | | files 'stimtimes.txt', 'verticalblanking.txt',| | | 'stims.mat', and 'spike2data.smr'. | ----------------------------------------------------------------------- See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system/deprecating.vhlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/deprecating/vhlab.m/#ndisetupdaqsystemdeprecatingvhlab","text":"ndi.setup.daq.system.vhlab - initialize daq systems used by VHLAB S = ndi.setup.daq.system.vhlab(S, DEVNAME) Creates daq systems that look for files in the VHLAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a daq systems in the table below. These daq systems are added to the ndi.session object S. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence of a 'reference.txt' file, as well as specific files that are needed by each device as described below. Devices created | Description |------------------|--------------------------------------------------| | vhintan | ndi.daq.system.mfdaq that looks for files | | | 'vhintan_channelgrouping.txt' and '*.rhd' | | vhspike2 | ndi.daq.system.mfdaq that looks for files | | | 'vhspike2_channelgrouping.txt' and '*.smr' | | vhvis_spike2 | ndi.daq.system.mfdaq.stimulus that looks for | | | files 'stimtimes.txt', 'verticalblanking.txt',| | | 'stims.mat', and 'spike2data.smr'. | ----------------------------------------------------------------------- See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system/deprecating.vhlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/deprecating/yangyangwang.m/","text":"ndi.setup.daq.system/deprecating.yangyangwang ndi.setup.daq.system.yangyangwang - initialize daq systems used by VHLAB S = ndi.setup.daq.system.yangyangwang(S, DEVNAME) Creates daq systems that look for files in the VHLAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a daq systems in the table below. These daq systems are added to the ndi.session object S. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence of a 'reference.txt' file, as well as specific files that are needed by each device as described below. Devices created | Description |------------------|--------------------------------------------------| | yangyang_tdt_sev | ndi.daq.system.mfdaq that looks for files | | | '*_Ch1.sev' | ----------------------------------------------------------------------- See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system/deprecating.yangyangwang"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/deprecating/yangyangwang.m/#ndisetupdaqsystemdeprecatingyangyangwang","text":"ndi.setup.daq.system.yangyangwang - initialize daq systems used by VHLAB S = ndi.setup.daq.system.yangyangwang(S, DEVNAME) Creates daq systems that look for files in the VHLAB standard recording scheme, where data from different epochs are organized into subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the name a daq systems in the table below. These daq systems are added to the ndi.session object S. If DEVNAME is a cell list of strings, then multiple items are added. If the function is called with no input arguments, then it returns a list of all valid device names. Each epoch is defined by the presence of a 'reference.txt' file, as well as specific files that are needed by each device as described below. Devices created | Description |------------------|--------------------------------------------------| | yangyang_tdt_sev | ndi.daq.system.mfdaq that looks for files | | | '*_Ch1.sev' | ----------------------------------------------------------------------- See also: ndi.file.navigator.epochdir","title":"ndi.setup.daq.system/deprecating.yangyangwang"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bepoch/epochprobemap_daqsystem_vhlab.m/","text":"CLASS ndi.setup.epoch.epochprobemap_daqsystem_vhlab ndi.setup.epoch.epochprobemap_daqsystem_vhlab - Create a new ndi.epoch.epochprobemap_daqsystem object derived from the vhlab device implementation MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI.SETUP.EPOCH.EPOCHPROBEMAP_DAQSYSTEM_VHLAB(NAME, REFERENCE, TYPE, DEVICESTRING, SUBJECTSTRING) Creates a new ndi.setup.epoch.epochprobemap_daqsystem_vhlab with name NAME, reference REFERENCE, type TYPE, and devicestring DEVICESTRING. NAME can be any string that begins with a letter and contains no whitespace. It is CASE SENSITIVE. REFERENCE must be a non-negative scalar integer. TYPE is the type of recording. DEVICESTRING is a string that indicates the channels that were used to acquire this record. MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI_EPOCHPROBEMAP_VHLAB(FILENAME) Here, FILENAME is assumed to be a (full path) tab-delimitted text file in the style of 'vhintan_channelgrouping.txt' (see HELP VHINTAN_CHANNELGROUPING) that has entries 'name<tab>ref<tab>channel_list<tab>'. The device type of each channel is assumed to be 'n-trode', where n is set to be the number of channels in the channel_list for each name/ref pair. The NDI device name for this device must be 'vhintan' (VH Intan RHD device), 'vhlv' (VH Lab Labview custom acquisition code), 'vhspike2', or 'vhwillow'. The device name will be taken from the filename, following [VHDEVICENAME '_channelgrouping.txt'] Superclasses ndi.epoch.epochprobemap_daqsystem , ndi.epoch.epochprobemap Properties Property Description name reference type devicestring subjectstring Methods Method Description decode decode table information for an ndi.epoch.epochprobemap object from a serialized string epochprobemap_daqsystem_vhlab Create a new ndi.epoch.epochprobemap_daqsystem object derived from the vhlab device implementation savetofile Write ndi.epoch.epochprobemap_daqsystem object array to disk serialization_struct create a Matlab structure for serialization serialize Turn the ndi.epoch.epochprobemap object into a string Methods help decode - decode table information for an ndi.epoch.epochprobemap object from a serialized string ST = DECODE(S) Return a structure ST that contains decoded information to build an ndi.epoch.epochprobemap object from a string Help for ndi.setup.epoch.epochprobemap_daqsystem_vhlab.decode is inherited from superclass ndi.epoch.epochprobemap_daqsystem epochprobemap_daqsystem_vhlab - Create a new ndi.epoch.epochprobemap_daqsystem object derived from the vhlab device implementation MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI.SETUP.EPOCH.EPOCHPROBEMAP_DAQSYSTEM_VHLAB(NAME, REFERENCE, TYPE, DEVICESTRING, SUBJECTSTRING) Creates a new ndi.setup.epoch.epochprobemap_daqsystem_vhlab with name NAME, reference REFERENCE, type TYPE, and devicestring DEVICESTRING. NAME can be any string that begins with a letter and contains no whitespace. It is CASE SENSITIVE. REFERENCE must be a non-negative scalar integer. TYPE is the type of recording. DEVICESTRING is a string that indicates the channels that were used to acquire this record. MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI_EPOCHPROBEMAP_VHLAB(FILENAME) Here, FILENAME is assumed to be a (full path) tab-delimitted text file in the style of 'vhintan_channelgrouping.txt' (see HELP VHINTAN_CHANNELGROUPING) that has entries 'name<tab>ref<tab>channel_list<tab>'. The device type of each channel is assumed to be 'n-trode', where n is set to be the number of channels in the channel_list for each name/ref pair. The NDI device name for this device must be 'vhintan' (VH Intan RHD device), 'vhlv' (VH Lab Labview custom acquisition code), 'vhspike2', or 'vhwillow'. The device name will be taken from the filename, following [VHDEVICENAME '_channelgrouping.txt'] Documentation for ndi.setup.epoch.epochprobemap_daqsystem_vhlab/epochprobemap_daqsystem_vhlab doc ndi.setup.epoch.epochprobemap_daqsystem_vhlab savetofile - Write ndi.epoch.epochprobemap_daqsystem object array to disk SAVETOFILE(OBJ, FILENAME) Writes the ndi.epoch.epochprobemap_daqsystem_vhlab object to disk in filename FILENAME (full path). serialization_struct - create a Matlab structure for serialization ST = SERIALIZATION_STRUCT(NDI_EPOCHPROBEMAP_DAQSYSTEM_OBJ) Returns a structure of the parameters of an ndi.epoch.epochprobemap_daqsystem object. Help for ndi.setup.epoch.epochprobemap_daqsystem_vhlab/serialization_struct is inherited from superclass ndi.epoch.epochprobemap_daqsystem serialize - Turn the ndi.epoch.epochprobemap object into a string S = SERIALIZE(NDI_EPOCHPROBEMAP_OBJ) Create a character array representation of an ndi.epoch.epochprobemap_daqsystem object Help for ndi.setup.epoch.epochprobemap_daqsystem_vhlab/serialize is inherited from superclass ndi.epoch.epochprobemap_daqsystem","title":"ndi.setup.epoch.epochprobemap_daqsystem_vhlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bepoch/epochprobemap_daqsystem_vhlab.m/#class-ndisetupepochepochprobemap_daqsystem_vhlab","text":"ndi.setup.epoch.epochprobemap_daqsystem_vhlab - Create a new ndi.epoch.epochprobemap_daqsystem object derived from the vhlab device implementation MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI.SETUP.EPOCH.EPOCHPROBEMAP_DAQSYSTEM_VHLAB(NAME, REFERENCE, TYPE, DEVICESTRING, SUBJECTSTRING) Creates a new ndi.setup.epoch.epochprobemap_daqsystem_vhlab with name NAME, reference REFERENCE, type TYPE, and devicestring DEVICESTRING. NAME can be any string that begins with a letter and contains no whitespace. It is CASE SENSITIVE. REFERENCE must be a non-negative scalar integer. TYPE is the type of recording. DEVICESTRING is a string that indicates the channels that were used to acquire this record. MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI_EPOCHPROBEMAP_VHLAB(FILENAME) Here, FILENAME is assumed to be a (full path) tab-delimitted text file in the style of 'vhintan_channelgrouping.txt' (see HELP VHINTAN_CHANNELGROUPING) that has entries 'name<tab>ref<tab>channel_list<tab>'. The device type of each channel is assumed to be 'n-trode', where n is set to be the number of channels in the channel_list for each name/ref pair. The NDI device name for this device must be 'vhintan' (VH Intan RHD device), 'vhlv' (VH Lab Labview custom acquisition code), 'vhspike2', or 'vhwillow'. The device name will be taken from the filename, following [VHDEVICENAME '_channelgrouping.txt']","title":"CLASS ndi.setup.epoch.epochprobemap_daqsystem_vhlab"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bepoch/epochprobemap_daqsystem_vhlab.m/#superclasses","text":"ndi.epoch.epochprobemap_daqsystem , ndi.epoch.epochprobemap","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bepoch/epochprobemap_daqsystem_vhlab.m/#properties","text":"Property Description name reference type devicestring subjectstring","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bepoch/epochprobemap_daqsystem_vhlab.m/#methods","text":"Method Description decode decode table information for an ndi.epoch.epochprobemap object from a serialized string epochprobemap_daqsystem_vhlab Create a new ndi.epoch.epochprobemap_daqsystem object derived from the vhlab device implementation savetofile Write ndi.epoch.epochprobemap_daqsystem object array to disk serialization_struct create a Matlab structure for serialization serialize Turn the ndi.epoch.epochprobemap object into a string","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bepoch/epochprobemap_daqsystem_vhlab.m/#methods-help","text":"decode - decode table information for an ndi.epoch.epochprobemap object from a serialized string ST = DECODE(S) Return a structure ST that contains decoded information to build an ndi.epoch.epochprobemap object from a string Help for ndi.setup.epoch.epochprobemap_daqsystem_vhlab.decode is inherited from superclass ndi.epoch.epochprobemap_daqsystem epochprobemap_daqsystem_vhlab - Create a new ndi.epoch.epochprobemap_daqsystem object derived from the vhlab device implementation MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI.SETUP.EPOCH.EPOCHPROBEMAP_DAQSYSTEM_VHLAB(NAME, REFERENCE, TYPE, DEVICESTRING, SUBJECTSTRING) Creates a new ndi.setup.epoch.epochprobemap_daqsystem_vhlab with name NAME, reference REFERENCE, type TYPE, and devicestring DEVICESTRING. NAME can be any string that begins with a letter and contains no whitespace. It is CASE SENSITIVE. REFERENCE must be a non-negative scalar integer. TYPE is the type of recording. DEVICESTRING is a string that indicates the channels that were used to acquire this record. MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI_EPOCHPROBEMAP_VHLAB(FILENAME) Here, FILENAME is assumed to be a (full path) tab-delimitted text file in the style of 'vhintan_channelgrouping.txt' (see HELP VHINTAN_CHANNELGROUPING) that has entries 'name<tab>ref<tab>channel_list<tab>'. The device type of each channel is assumed to be 'n-trode', where n is set to be the number of channels in the channel_list for each name/ref pair. The NDI device name for this device must be 'vhintan' (VH Intan RHD device), 'vhlv' (VH Lab Labview custom acquisition code), 'vhspike2', or 'vhwillow'. The device name will be taken from the filename, following [VHDEVICENAME '_channelgrouping.txt'] Documentation for ndi.setup.epoch.epochprobemap_daqsystem_vhlab/epochprobemap_daqsystem_vhlab doc ndi.setup.epoch.epochprobemap_daqsystem_vhlab savetofile - Write ndi.epoch.epochprobemap_daqsystem object array to disk SAVETOFILE(OBJ, FILENAME) Writes the ndi.epoch.epochprobemap_daqsystem_vhlab object to disk in filename FILENAME (full path). serialization_struct - create a Matlab structure for serialization ST = SERIALIZATION_STRUCT(NDI_EPOCHPROBEMAP_DAQSYSTEM_OBJ) Returns a structure of the parameters of an ndi.epoch.epochprobemap_daqsystem object. Help for ndi.setup.epoch.epochprobemap_daqsystem_vhlab/serialization_struct is inherited from superclass ndi.epoch.epochprobemap_daqsystem serialize - Turn the ndi.epoch.epochprobemap object into a string S = SERIALIZE(NDI_EPOCHPROBEMAP_OBJ) Create a character array representation of an ndi.epoch.epochprobemap_daqsystem object Help for ndi.setup.epoch.epochprobemap_daqsystem_vhlab/serialize is inherited from superclass ndi.epoch.epochprobemap_daqsystem","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bstimulus/%2Bkjnielsenlab/extractStimulusParameters.m/","text":"ndi.setup.stimulus.kjnielsenlab.extractStimulusParameters extractStimulusParameters Extracts stimulus parameters and display order from an analyzer structure. SYNTAX: [parameters, displayOrder] = extractStimulusParameters(analyzer) DESCRIPTION: Processes a MATLAB 'analyzer' structure storing experimental stimulus information. Extracts parameters for each unique stimulus condition and the trial-by-trial display sequence. Consolidates parameters from analyzer.M (global), analyzer.P.param (primary), and analyzer.loops.conds{i} (condition-specific). Throws errors for data inconsistencies previously handled by warnings. Handles zero-trial experiments gracefully by returning an empty displayOrder. INPUTS: analyzer (struct): MATLAB structure with experiment details. Must contain appropriately structured fields 'M', 'P', and 'loops'. - M: (Expected) Struct with common parameters. - P: (Expected) Struct with 'param' cell array. `P.param{k}` typically contains {'Name', 'Type', Value, ...}. The Value (3rd element) is extracted directly. - loops: (Expected) Struct with 'conds' cell array. `loops.conds{i}` defines condition 'i' with 'symbol', 'val', 'repeats' fields. `loops.conds{i}.val{j}` is the direct value for `loops.conds{i}.symbol{j}`. `loops.conds{i}.repeats{j}` has 'trialno' field. OUTPUTS: parameters (cell array): 1xN cell array (N=conditions). parameters{i} is a struct with combined parameters for condition i. displayOrder (numeric vector): 1xT vector (T=trials). displayOrder(k)=i means trial k used condition i. Empty ([]) if no trials are found. EXAMPLE (based on provided structure snippets): [params, order] = extractStimulusParameters(analyzer); % params{1} has fields from M, P, and loops.conds{1} (e.g., ori=0, t_period=15) % order(52) == 1 (if analyzer.loops.conds{1}.repeats{4}.trialno == 52)","title":"ndi.setup.stimulus.kjnielsenlab.extractStimulusParameters"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bstimulus/%2Bkjnielsenlab/extractStimulusParameters.m/#ndisetupstimuluskjnielsenlabextractstimulusparameters","text":"extractStimulusParameters Extracts stimulus parameters and display order from an analyzer structure. SYNTAX: [parameters, displayOrder] = extractStimulusParameters(analyzer) DESCRIPTION: Processes a MATLAB 'analyzer' structure storing experimental stimulus information. Extracts parameters for each unique stimulus condition and the trial-by-trial display sequence. Consolidates parameters from analyzer.M (global), analyzer.P.param (primary), and analyzer.loops.conds{i} (condition-specific). Throws errors for data inconsistencies previously handled by warnings. Handles zero-trial experiments gracefully by returning an empty displayOrder. INPUTS: analyzer (struct): MATLAB structure with experiment details. Must contain appropriately structured fields 'M', 'P', and 'loops'. - M: (Expected) Struct with common parameters. - P: (Expected) Struct with 'param' cell array. `P.param{k}` typically contains {'Name', 'Type', Value, ...}. The Value (3rd element) is extracted directly. - loops: (Expected) Struct with 'conds' cell array. `loops.conds{i}` defines condition 'i' with 'symbol', 'val', 'repeats' fields. `loops.conds{i}.val{j}` is the direct value for `loops.conds{i}.symbol{j}`. `loops.conds{i}.repeats{j}` has 'trialno' field. OUTPUTS: parameters (cell array): 1xN cell array (N=conditions). parameters{i} is a struct with combined parameters for condition i. displayOrder (numeric vector): 1xT vector (T=trials). displayOrder(k)=i means trial k used condition i. Empty ([]) if no trials are found. EXAMPLE (based on provided structure snippets): [params, order] = extractStimulusParameters(analyzer); % params{1} has fields from M, P, and loops.conds{1} (e.g., ori=0, t_period=15) % order(52) == 1 (if analyzer.loops.conds{1}.repeats{4}.trialno == 52)","title":"ndi.setup.stimulus.kjnielsenlab.extractStimulusParameters"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bstimulus/%2Bvhlab/add_stimulus_approach.m/","text":"ndi.setup.stimulus.vhlab.add_stimulus_approach ADD_STIMULUS_APPROACH add stimulus approaches to an ndi.session from a text file DNEW = ADD_STIMULUS_APPROACH(S, [FILENAME]) Examines a text file, either named 'stimulus_approaches.txt' in the root directory of the ndi.session object S or FILENAME if provided. The text file should be a tab-delimited table with first entries 'Epoch' and 'Approach'. Each subsequent row should have entries of approach names in the NDI Cloud Ontology. Example: Epoch<tab>Approach t00001<tab>Purpose: Assessing spatial frequency tuning t00002<tab>Purpose: Assessing temporal frequency tuning The function for epochs in the device 'vhvis_spike2'. If the entries are already added, then they are not re-added.","title":"ndi.setup.stimulus.vhlab.add_stimulus_approach"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bstimulus/%2Bvhlab/add_stimulus_approach.m/#ndisetupstimulusvhlabadd_stimulus_approach","text":"ADD_STIMULUS_APPROACH add stimulus approaches to an ndi.session from a text file DNEW = ADD_STIMULUS_APPROACH(S, [FILENAME]) Examines a text file, either named 'stimulus_approaches.txt' in the root directory of the ndi.session object S or FILENAME if provided. The text file should be a tab-delimited table with first entries 'Epoch' and 'Approach'. Each subsequent row should have entries of approach names in the NDI Cloud Ontology. Example: Epoch<tab>Approach t00001<tab>Purpose: Assessing spatial frequency tuning t00002<tab>Purpose: Assessing temporal frequency tuning The function for epochs in the device 'vhvis_spike2'. If the entries are already added, then they are not re-added.","title":"ndi.setup.stimulus.vhlab.add_stimulus_approach"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%40DaqSystemConfiguration/DaqSystemConfiguration.m/","text":"CLASS ndi.setup/@DaqSystemConfiguration.DaqSystemConfiguration DaqSystemConfiguration Parameters for configuring a DAQ System. Superclasses none Properties none Methods none","title":"CLASS ndi.setup/@DaqSystemConfiguration.DaqSystemConfiguration"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%40DaqSystemConfiguration/DaqSystemConfiguration.m/#class-ndisetupdaqsystemconfigurationdaqsystemconfiguration","text":"DaqSystemConfiguration Parameters for configuring a DAQ System.","title":"CLASS ndi.setup/@DaqSystemConfiguration.DaqSystemConfiguration"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%40DaqSystemConfiguration/DaqSystemConfiguration.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%40DaqSystemConfiguration/DaqSystemConfiguration.m/#properties","text":"none","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%40DaqSystemConfiguration/DaqSystemConfiguration.m/#methods","text":"none","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/cache.m/","text":"ndi.test.cache ndi.test.cache - test the ndi.cache object Adds several entries to ndi.cache objects to test the functions.","title":"ndi.test.cache"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/cache.m/#nditestcache","text":"ndi.test.cache - test the ndi.cache object Adds several entries to ndi.cache objects to test the functions.","title":"ndi.test.cache"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bapp/markgarbage.m/","text":"ndi.test.app.markgarbage ndi.test.app.markgarbage - Test the functionality of the app 'ndi.app.markgarbage' ndi.test.app.markgarbage Tests the ndi.app.markgarbage on example data in [NDICOMMONPATH]/example_app_sessions/markgarbage_ex","title":"ndi.test.app.markgarbage"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bapp/markgarbage.m/#nditestappmarkgarbage","text":"ndi.test.app.markgarbage - Test the functionality of the app 'ndi.app.markgarbage' ndi.test.app.markgarbage Tests the ndi.app.markgarbage on example data in [NDICOMMONPATH]/example_app_sessions/markgarbage_ex","title":"ndi.test.app.markgarbage"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bapp/spikeextractor.m/","text":"ndi.test.app.spikeextractor ndi.test.app.spikeextractor - Test the functionality of the apps 'ndi.app.spikeextractor' and 'ndi.app.spikesort' with example data Tests the ndi.app.spikeextractor on example data in [NDICOMMONPATH]/example_app_sessions/exp_sg","title":"ndi.test.app.spikeextractor"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bapp/spikeextractor.m/#nditestappspikeextractor","text":"ndi.test.app.spikeextractor - Test the functionality of the apps 'ndi.app.spikeextractor' and 'ndi.app.spikesort' with example data Tests the ndi.app.spikeextractor on example data in [NDICOMMONPATH]/example_app_sessions/exp_sg","title":"ndi.test.app.spikeextractor"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/openminds_to_metadata.m/","text":"ndi.test.cloud.openminds_to_metadata OPENMINDS_TO_METADATA Summary of this function goes here Detailed explanation goes here","title":"ndi.test.cloud.openminds_to_metadata"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/openminds_to_metadata.m/#nditestcloudopenminds_to_metadata","text":"OPENMINDS_TO_METADATA Summary of this function goes here Detailed explanation goes here","title":"ndi.test.cloud.openminds_to_metadata"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/upload_download.m/","text":"ndi.test.cloud.upload_download UPLOAD_DOWNLOAD - test uploading and downloading an example dataset [B,MSG] = UPLOAD_DOWNLOAD([D,metadatafile]) Test uploading and then downloading an example ndi.dataset D.","title":"ndi.test.cloud.upload_download"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/upload_download.m/#nditestcloudupload_download","text":"UPLOAD_DOWNLOAD - test uploading and downloading an example dataset [B,MSG] = UPLOAD_DOWNLOAD([D,metadatafile]) Test uploading and then downloading an example ndi.dataset D.","title":"ndi.test.cloud.upload_download"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/add_document_test.m/","text":"ndi.test.cloud.api.add_document_test ADD_DOCUMENT_TEST - tests the api commands used to post documents ADD_DOCUMENT_TEST(dataset_id) Tests the following api commands: datasets/add_document documents/get_document documents/update_document files/get_file_upload_url files/put_files files/get_file_details","title":"ndi.test.cloud.api.add_document_test"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/add_document_test.m/#nditestcloudapiadd_document_test","text":"ADD_DOCUMENT_TEST - tests the api commands used to post documents ADD_DOCUMENT_TEST(dataset_id) Tests the following api commands: datasets/add_document documents/get_document documents/update_document files/get_file_upload_url files/put_files files/get_file_details","title":"ndi.test.cloud.api.add_document_test"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/dataset_branch_test.m/","text":"ndi.test.cloud.api.dataset_branch_test DATASET_BRANCH_TEST - test the functions related to dataset branches DATASET_BRANCH_TEST() Test the following api commands: datasets/create_dataset_branch datasets/get_branches","title":"ndi.test.cloud.api.dataset_branch_test"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/dataset_branch_test.m/#nditestcloudapidataset_branch_test","text":"DATASET_BRANCH_TEST - test the functions related to dataset branches DATASET_BRANCH_TEST() Test the following api commands: datasets/create_dataset_branch datasets/get_branches","title":"ndi.test.cloud.api.dataset_branch_test"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/delete_documents_test.m/","text":"ndi.test.cloud.api.delete_documents_test DELETE_DOCUMENTS_TEST - test the delete_document and bulk_delete function DELETE_DOCUMENTS_TEST(DATASET_ID) Test the following api commands: documents/delete_document documents/bulk_delete_documents documents/list_dataset_documents","title":"ndi.test.cloud.api.delete_documents_test"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/delete_documents_test.m/#nditestcloudapidelete_documents_test","text":"DELETE_DOCUMENTS_TEST - test the delete_document and bulk_delete function DELETE_DOCUMENTS_TEST(DATASET_ID) Test the following api commands: documents/delete_document documents/bulk_delete_documents documents/list_dataset_documents","title":"ndi.test.cloud.api.delete_documents_test"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/pipeline.m/","text":"ndi.test.cloud.api.pipeline PIPELINE - Pipeline for testing the cloud API","title":"ndi.test.cloud.api.pipeline"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/pipeline.m/#nditestcloudapipipeline","text":"PIPELINE - Pipeline for testing the cloud API","title":"ndi.test.cloud.api.pipeline"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/post_documents_test.m/","text":"ndi.test.cloud.api.post_documents_test POST_DOCUMENTS_TEST - tests the api commands used to post documents POST_DOCUMENTS_TEST(dataset_id) Tests the following api commands: datasets/post_documents documents/get_documents documents/post_documents_update files/get_files files/put_files files/get_files_detail","title":"ndi.test.cloud.api.post_documents_test"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/post_documents_test.m/#nditestcloudapipost_documents_test","text":"POST_DOCUMENTS_TEST - tests the api commands used to post documents POST_DOCUMENTS_TEST(dataset_id) Tests the following api commands: datasets/post_documents documents/get_documents documents/post_documents_update files/get_files files/put_files files/get_files_detail","title":"ndi.test.cloud.api.post_documents_test"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/submit_publish_dataset.m/","text":"ndi.test.cloud.api.submit_publish_dataset SUBMIT_PUBLISH_DATASET - test the functions related to submit and publishing a dataset SUBMIT_PUBLISH_DATASET(DATASET_ID) Test the following api commands: datasets/submit_dataset datasets/publish_dataset datasets/unpublish_dataset datasets/get_published datasets/get_unpublished","title":"ndi.test.cloud.api.submit_publish_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/submit_publish_dataset.m/#nditestcloudapisubmit_publish_dataset","text":"SUBMIT_PUBLISH_DATASET - test the functions related to submit and publishing a dataset SUBMIT_PUBLISH_DATASET(DATASET_ID) Test the following api commands: datasets/submit_dataset datasets/publish_dataset datasets/unpublish_dataset datasets/get_published datasets/get_unpublished","title":"ndi.test.cloud.api.submit_publish_dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/upload_sample_test.m/","text":"ndi.test.cloud.api.upload_sample_test UPLOAD_SAMPLE_TEST - tests the api commands used to upload a sample dataset UPLOAD_SAMPLE_TEST() Tests the following api commands: datasets/get_datasetid datasets/create_dataset documents/list_dataset_documents datasets/list_datasets datasets/update_dataset Tests the following functions: ndi.cloud.upload.upload_to_NDI_cloud ndi.database.metadata_app.fun.metadata_to_json","title":"ndi.test.cloud.api.upload_sample_test"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/upload_sample_test.m/#nditestcloudapiupload_sample_test","text":"UPLOAD_SAMPLE_TEST - tests the api commands used to upload a sample dataset UPLOAD_SAMPLE_TEST() Tests the following api commands: datasets/get_datasetid datasets/create_dataset documents/list_dataset_documents datasets/list_datasets datasets/update_dataset Tests the following functions: ndi.cloud.upload.upload_to_NDI_cloud ndi.database.metadata_app.fun.metadata_to_json","title":"ndi.test.cloud.api.upload_sample_test"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/blackrock.m/","text":"ndi.test.daq.blackrock ndi.test.daq.blackrock - Test the functionality of the Blackrock driver and a file tree with a flat organization ndi.test.daq.blackrock([DIRNAME]) Given a directory with Blackrock data inside, this function loads the channel information and then plots some data from channel 1, as an example of the Intan driver. If DIRNAME is not provided, the default directory [NDIPATH]/example_sessions/exp_blackrock is used.","title":"ndi.test.daq.blackrock"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/blackrock.m/#nditestdaqblackrock","text":"ndi.test.daq.blackrock - Test the functionality of the Blackrock driver and a file tree with a flat organization ndi.test.daq.blackrock([DIRNAME]) Given a directory with Blackrock data inside, this function loads the channel information and then plots some data from channel 1, as an example of the Intan driver. If DIRNAME is not provided, the default directory [NDIPATH]/example_sessions/exp_blackrock is used.","title":"ndi.test.daq.blackrock"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/build_intan_flat_exp.m/","text":"ndi.test.daq.build_intan_flat_exp BUILD_INTAN_FLAT_EXP - Create an Intan driver and save it to an session ndi.test.daq.build_intan_flat_exp([DIRNAME]) Given a directory with RHD data inside, this function loads the channel information and then plots some data from channel 1, as an example of the Intan driver. It also leaves the driver saved in the session record. If DIRNAME is not provided, the default directory [NDIPATH]/example_sessions/exp1_eg_saved is used.","title":"ndi.test.daq.build_intan_flat_exp"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/build_intan_flat_exp.m/#nditestdaqbuild_intan_flat_exp","text":"BUILD_INTAN_FLAT_EXP - Create an Intan driver and save it to an session ndi.test.daq.build_intan_flat_exp([DIRNAME]) Given a directory with RHD data inside, this function loads the channel information and then plots some data from channel 1, as an example of the Intan driver. It also leaves the driver saved in the session record. If DIRNAME is not provided, the default directory [NDIPATH]/example_sessions/exp1_eg_saved is used.","title":"ndi.test.daq.build_intan_flat_exp"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/intan_flat.m/","text":"ndi.test.daq.intan_flat ndi.test.daq.intan_flat - Test the functionality of the Intan driver and a file tree with a flat organization ndi.test.daq.intan_flat([DIRNAME]) Given a directory with RHD data inside, this function loads the channel information and then plots some data from channel 1, as an example of the Intan driver. If DIRNAME is not provided, the default directory [NDIPATH]/example_sessions/exp1_eg is used.","title":"ndi.test.daq.intan_flat"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/intan_flat.m/#nditestdaqintan_flat","text":"ndi.test.daq.intan_flat - Test the functionality of the Intan driver and a file tree with a flat organization ndi.test.daq.intan_flat([DIRNAME]) Given a directory with RHD data inside, this function loads the channel information and then plots some data from channel 1, as an example of the Intan driver. If DIRNAME is not provided, the default directory [NDIPATH]/example_sessions/exp1_eg is used.","title":"ndi.test.daq.intan_flat"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/intan_flat_metadata.m/","text":"ndi.test.daq.intan_flat_metadata intan_flat_metadata - Test the functionality of the Intan driver and a file tree with a flat organization ndi.test.daq.test_intan_flat_metadata([DIRNAME]) Given a directory with RHD data inside, this function loads the channel information and then plots some data from channel 1, as an example of the Intan driver. If DIRNAME is not provided, the default directory [NDIPATH]/example_sessions/exp1_eg is used.","title":"ndi.test.daq.intan_flat_metadata"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/intan_flat_metadata.m/#nditestdaqintan_flat_metadata","text":"intan_flat_metadata - Test the functionality of the Intan driver and a file tree with a flat organization ndi.test.daq.test_intan_flat_metadata([DIRNAME]) Given a directory with RHD data inside, this function loads the channel information and then plots some data from channel 1, as an example of the Intan driver. If DIRNAME is not provided, the default directory [NDIPATH]/example_sessions/exp1_eg is used.","title":"ndi.test.daq.intan_flat_metadata"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/intan_flat_saved.m/","text":"ndi.test.daq.intan_flat_saved NDI.TEST.DAQ.INTAN_FLAT_SAVED - Test the functionality of the Intan driver and a file tree with a flat organization ndi.test.daq.intan_flat_saved([DIRNAME]) Given an session directory with an associated Intan driver, this function loads the channel information and then plots some data from channel 1, as an example of the Intan driver. If DIRNAME is not provided, the default directory [NDIPATH]/example_sessions/exp1_eg_saved is used.","title":"ndi.test.daq.intan_flat_saved"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/intan_flat_saved.m/#nditestdaqintan_flat_saved","text":"NDI.TEST.DAQ.INTAN_FLAT_SAVED - Test the functionality of the Intan driver and a file tree with a flat organization ndi.test.daq.intan_flat_saved([DIRNAME]) Given an session directory with an associated Intan driver, this function loads the channel information and then plots some data from channel 1, as an example of the Intan driver. If DIRNAME is not provided, the default directory [NDIPATH]/example_sessions/exp1_eg_saved is used.","title":"ndi.test.daq.intan_flat_saved"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/sg_flat.m/","text":"ndi.test.daq.sg_flat ndi.test.daq.sg_flat - Test the functionality of the SpikeGadgets driver and a filenavigator with a flat organization ndi.test.daq.sg_flat([DIRNAME]) Given a directory with .rec data inside, this function loads the first tetrode and plots the first second of data in all four channels. If DIRNAME is not provided, the default directory [NDIPATH]/example_sessions/exp1_eg is used. Developer note: function can be expanded to take in a specific tetrode to plot from specific epoch n, along with sample0 and sample1.","title":"ndi.test.daq.sg_flat"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/sg_flat.m/#nditestdaqsg_flat","text":"ndi.test.daq.sg_flat - Test the functionality of the SpikeGadgets driver and a filenavigator with a flat organization ndi.test.daq.sg_flat([DIRNAME]) Given a directory with .rec data inside, this function loads the first tetrode and plots the first second of data in all four channels. If DIRNAME is not provided, the default directory [NDIPATH]/example_sessions/exp1_eg is used. Developer note: function can be expanded to take in a specific tetrode to plot from specific epoch n, along with sample0 and sample1.","title":"ndi.test.daq.sg_flat"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/test_ndi_device_image_tiffstack.m/","text":"ndi.test.daq.test_ndi_device_image_tiffstack UNTITLED5 Summary of this function goes here Detailed explanation goes here","title":"ndi.test.daq.test_ndi_device_image_tiffstack"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/test_ndi_device_image_tiffstack.m/#nditestdaqtest_ndi_device_image_tiffstack","text":"UNTITLED5 Summary of this function goes here Detailed explanation goes here","title":"ndi.test.daq.test_ndi_device_image_tiffstack"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/test_ndi_image_tiffstack_multipleepoch.m/","text":"ndi.test.daq.test_ndi_image_tiffstack_multipleepoch UNTITLED5 Summary of this function goes here Detailed explanation goes here","title":"ndi.test.daq.test_ndi_image_tiffstack_multipleepoch"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/test_ndi_image_tiffstack_multipleepoch.m/#nditestdaqtest_ndi_image_tiffstack_multipleepoch","text":"UNTITLED5 Summary of this function goes here Detailed explanation goes here","title":"ndi.test.daq.test_ndi_image_tiffstack_multipleepoch"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/all_doc_fields.m/","text":"ndi.test.database.all_doc_fields [FN] = ndi.test.database.all_doc_fields() Returns the field names (full form) of all document types.","title":"ndi.test.database.all_doc_fields"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/all_doc_fields.m/#nditestdatabaseall_doc_fields","text":"[FN] = ndi.test.database.all_doc_fields() Returns the field names (full form) of all document types.","title":"ndi.test.database.all_doc_fields"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/load_all_docs.m/","text":"ndi.test.database.load_all_docs [JSON_FILENAMES] = ndi.test.database.load_all_docs() Searches for all JSON blank document definition files. The full paths of these files are returned as a cell array of strings.","title":"ndi.test.database.load_all_docs"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/load_all_docs.m/#nditestdatabaseload_all_docs","text":"[JSON_FILENAMES] = ndi.test.database.load_all_docs() Searches for all JSON blank document definition files. The full paths of these files are returned as a cell array of strings.","title":"ndi.test.database.load_all_docs"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/test_ndi_document.m/","text":"ndi.test.database.test_ndi_document TEST_NDI_DOCUMENT - Test the functionality of the NDI_DOCUMENT object and the NDI_SESSION database ndi.test.document([DIRNAME]) Given a directory, this function tries to create some NDI_VARIABLE objects in the session DATABASE. The test function removes them on completion. If DIRNAME is not provided, the default directory [NDIEXAMPLEEXPERPATH/exp1_eg] is used.","title":"ndi.test.database.test_ndi_document"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/test_ndi_document.m/#nditestdatabasetest_ndi_document","text":"TEST_NDI_DOCUMENT - Test the functionality of the NDI_DOCUMENT object and the NDI_SESSION database ndi.test.document([DIRNAME]) Given a directory, this function tries to create some NDI_VARIABLE objects in the session DATABASE. The test function removes them on completion. If DIRNAME is not provided, the default directory [NDIEXAMPLEEXPERPATH/exp1_eg] is used.","title":"ndi.test.database.test_ndi_document"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/test_ndi_document_jsons.m/","text":"ndi.test.database.test_ndi_document_jsons TEST_NDI_DOCUMENT_JSONS - test validity of all NDI_DOCUMENT json definitions [B, SUCCESSES, FAILURES] = ndi.test.document_jsons(GENERATE_ERROR) Tries to make a blank ndi.document from all ndi.document JSON definitions. Returns a cell array of all JSON file names that were successfully created in SUCCESSES, and a cell array of JSON file names there unsuccessfully created in FAILURES. B is 1 if all ndi documents were created successfully. If GENERATE_ERROR is present and is 1, then an error is generated if B is 0.","title":"ndi.test.database.test_ndi_document_jsons"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/test_ndi_document_jsons.m/#nditestdatabasetest_ndi_document_jsons","text":"TEST_NDI_DOCUMENT_JSONS - test validity of all NDI_DOCUMENT json definitions [B, SUCCESSES, FAILURES] = ndi.test.document_jsons(GENERATE_ERROR) Tries to make a blank ndi.document from all ndi.document JSON definitions. Returns a cell array of all JSON file names that were successfully created in SUCCESSES, and a cell array of JSON file names there unsuccessfully created in FAILURES. B is 1 if all ndi documents were created successfully. If GENERATE_ERROR is present and is 1, then an error is generated if B is 0.","title":"ndi.test.database.test_ndi_document_jsons"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_daq_documents.m/","text":"ndi.test.database.core.test_ndi_daq_documents TEST_NDI_DAQ_DOCUMENTS - Test the functionality of the storage of DAQ objects using NDI_DOCUMENT and the NDI_SESSION database ndi.test.daq.documents([DIRNAME]) Given a directory, this function tries to create and test the following objects and subclasses: 1) ndi.file.navigator (by calling test_ndi_filenavigator_document) 2) ndi.daq.reader (by calling test_ndi_daqreader_document) 3) ndi.daq.system (by calling test_ndi_daqsystem_document) 4) ndi.time.syncrule (by calling test_ndi_syncrule_document) 5) ndi.time.syncgraph (by calling test_ndi_syncgraph_document) If DIRNAME is not provided, the default directory [NDIEXAMPLEEXPERPATH/exp1_eg] is used.","title":"ndi.test.database.core.test_ndi_daq_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_daq_documents.m/#nditestdatabasecoretest_ndi_daq_documents","text":"TEST_NDI_DAQ_DOCUMENTS - Test the functionality of the storage of DAQ objects using NDI_DOCUMENT and the NDI_SESSION database ndi.test.daq.documents([DIRNAME]) Given a directory, this function tries to create and test the following objects and subclasses: 1) ndi.file.navigator (by calling test_ndi_filenavigator_document) 2) ndi.daq.reader (by calling test_ndi_daqreader_document) 3) ndi.daq.system (by calling test_ndi_daqsystem_document) 4) ndi.time.syncrule (by calling test_ndi_syncrule_document) 5) ndi.time.syncgraph (by calling test_ndi_syncgraph_document) If DIRNAME is not provided, the default directory [NDIEXAMPLEEXPERPATH/exp1_eg] is used.","title":"ndi.test.database.core.test_ndi_daq_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_daqreader_documents.m/","text":"ndi.test.database.core.test_ndi_daqreader_documents TEST_NDI_DAQREADER_DOCUMENTS - test creating database entries, searching, and building from documents ndi.test.daq.reader.documents(DIRNAME) Given a directory that corresponds to an session, this function tries to create the following objects : 1) ndi.daq.reader 2) ndi.daq.reader.mfdaq 3) ndi.daq.reader.mfdaq.cedspike2 4) ndi.daq.reader.mfdaq.intan 5) ndi.daq.reader.mfdaq.spikegadgets 6) ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2 Then, the following tests actions are conducted for each document type: a) Create a new database document b) Add the database document to the database c) Search for the database document d) Create a new object based on the database entry, and test that it matches the original","title":"ndi.test.database.core.test_ndi_daqreader_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_daqreader_documents.m/#nditestdatabasecoretest_ndi_daqreader_documents","text":"TEST_NDI_DAQREADER_DOCUMENTS - test creating database entries, searching, and building from documents ndi.test.daq.reader.documents(DIRNAME) Given a directory that corresponds to an session, this function tries to create the following objects : 1) ndi.daq.reader 2) ndi.daq.reader.mfdaq 3) ndi.daq.reader.mfdaq.cedspike2 4) ndi.daq.reader.mfdaq.intan 5) ndi.daq.reader.mfdaq.spikegadgets 6) ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2 Then, the following tests actions are conducted for each document type: a) Create a new database document b) Add the database document to the database c) Search for the database document d) Create a new object based on the database entry, and test that it matches the original","title":"ndi.test.database.core.test_ndi_daqreader_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_daqsystem_documents.m/","text":"ndi.test.database.core.test_ndi_daqsystem_documents TEST_NDI_DAQSYSTEM_DOCUMENTS - test creating database entries, searching, and building from documents ndi.test.daq.system.documents(DIRNAME) Given a directory that corresponds to an session, this function tries to create the following objects : 1) ndi.daq.system.mfdaq 2) ndi_daqsystem_mfdaq_stimulus Then, the following tests actions are conducted for each document type: a) Create a new database document b) Add the database document to the database c) Search for the database document d) Create a new object based on the database entry, and test that it matches the original","title":"ndi.test.database.core.test_ndi_daqsystem_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_daqsystem_documents.m/#nditestdatabasecoretest_ndi_daqsystem_documents","text":"TEST_NDI_DAQSYSTEM_DOCUMENTS - test creating database entries, searching, and building from documents ndi.test.daq.system.documents(DIRNAME) Given a directory that corresponds to an session, this function tries to create the following objects : 1) ndi.daq.system.mfdaq 2) ndi_daqsystem_mfdaq_stimulus Then, the following tests actions are conducted for each document type: a) Create a new database document b) Add the database document to the database c) Search for the database document d) Create a new object based on the database entry, and test that it matches the original","title":"ndi.test.database.core.test_ndi_daqsystem_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_filenavigator_documents.m/","text":"ndi.test.database.core.test_ndi_filenavigator_documents TEST_NDI_FILENAVIGATOR_DOCUMENTS - test creating database entries, searching, and building from documents ndi.test.daq.filenavigator.documents(DIRNAME) Given a directory that corresponds to an session, this function tries to create an ndi.file.navigator object and an ndi.file.navigator.epochdir object and do the following: a) Create a new database document b) Add the database document to the database c) Search for the database document d) Create a new object based on the database entry, and test that it matches the original","title":"ndi.test.database.core.test_ndi_filenavigator_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_filenavigator_documents.m/#nditestdatabasecoretest_ndi_filenavigator_documents","text":"TEST_NDI_FILENAVIGATOR_DOCUMENTS - test creating database entries, searching, and building from documents ndi.test.daq.filenavigator.documents(DIRNAME) Given a directory that corresponds to an session, this function tries to create an ndi.file.navigator object and an ndi.file.navigator.epochdir object and do the following: a) Create a new database document b) Add the database document to the database c) Search for the database document d) Create a new object based on the database entry, and test that it matches the original","title":"ndi.test.database.core.test_ndi_filenavigator_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_syncgraph_documents.m/","text":"ndi.test.database.core.test_ndi_syncgraph_documents TEST_NDI_SYNCGRAPH_DOCUMENTS - test creating database entries, searching, and building from documents ndi.test.syncgraph.documents(DIRNAME) Given a directory that corresponds to an session, this function tries to create the following objects : 1) ndi.time.syncgraph Then, the following tests actions are conducted for each document type: a) Create a new database document b) Add the database document to the database c) Search for the database document d) Create a new object based on the database entry, and test that it matches the original","title":"ndi.test.database.core.test_ndi_syncgraph_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_syncgraph_documents.m/#nditestdatabasecoretest_ndi_syncgraph_documents","text":"TEST_NDI_SYNCGRAPH_DOCUMENTS - test creating database entries, searching, and building from documents ndi.test.syncgraph.documents(DIRNAME) Given a directory that corresponds to an session, this function tries to create the following objects : 1) ndi.time.syncgraph Then, the following tests actions are conducted for each document type: a) Create a new database document b) Add the database document to the database c) Search for the database document d) Create a new object based on the database entry, and test that it matches the original","title":"ndi.test.database.core.test_ndi_syncgraph_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_syncrule_documents.m/","text":"ndi.test.database.core.test_ndi_syncrule_documents TEST_NDI_SYNCRULE_DOCUMENTS - test creating database entries, searching, and building from documents ndi.test.syncrule.documents(DIRNAME) Given a directory that corresponds to an session, this function tries to create the following objects : 1) ndi.time.syncrule.filematch Then, the following tests actions are conducted for each document type: a) Create a new database document b) Add the database document to the database c) Search for the database document d) Create a new object based on the database entry, and test that it matches the original","title":"ndi.test.database.core.test_ndi_syncrule_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_syncrule_documents.m/#nditestdatabasecoretest_ndi_syncrule_documents","text":"TEST_NDI_SYNCRULE_DOCUMENTS - test creating database entries, searching, and building from documents ndi.test.syncrule.documents(DIRNAME) Given a directory that corresponds to an session, this function tries to create the following objects : 1) ndi.time.syncrule.filematch Then, the following tests actions are conducted for each document type: a) Create a new database document b) Add the database document to the database c) Search for the database document d) Create a new object based on the database entry, and test that it matches the original","title":"ndi.test.database.core.test_ndi_syncrule_documents"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdataset/compare.m/","text":"ndi.test.dataset.compare COMPARE datasets for equality [B,MSG] = COMPARE(D1, D2) Compare two datasets for equality. If the datasets have the same documents and files, then B is 1 and MSG is ''. Otherwise, B is 0 and MSG contains a description of the first difference encountered.","title":"ndi.test.dataset.compare"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdataset/compare.m/#nditestdatasetcompare","text":"COMPARE datasets for equality [B,MSG] = COMPARE(D1, D2) Compare two datasets for equality. If the datasets have the same documents and files, then B is 1 and MSG is ''. Otherwise, B is 0 and MSG contains a description of the first difference encountered.","title":"ndi.test.dataset.compare"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdataset/manual.m/","text":"ndi.test.dataset.manual ndi.test.dataset.manual is a script.","title":"ndi.test.dataset.manual"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdataset/manual.m/#nditestdatasetmanual","text":"ndi.test.dataset.manual is a script.","title":"ndi.test.dataset.manual"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdebug/ndi_debug_database_stats.m/","text":"ndi.test.debug.ndi_debug_database_stats NDI_DEBUG_DATABASE_STATS - examine an NDI database to check for inconsistencies OUT = ndi.test.database.debug_stats(E) Return a bunch of documents from an NDI session E","title":"ndi.test.debug.ndi_debug_database_stats"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdebug/ndi_debug_database_stats.m/#nditestdebugndi_debug_database_stats","text":"NDI_DEBUG_DATABASE_STATS - examine an NDI database to check for inconsistencies OUT = ndi.test.database.debug_stats(E) Return a bunch of documents from an NDI session E","title":"ndi.test.debug.ndi_debug_database_stats"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Belement/test_ndi_element.m/","text":"ndi.test.element.test_ndi_element TEST_NDI_ELEMENT - Test the functionality of the NDI_ELEMENT object and the NDI_SESSION database ndi.test.element([DIRNAME]) Given a directory, this function tries to create some NDI_VARIABLE objects in the session DATABASE. The test function removes them on completion. If DIRNAME is not provided, the default directory [NDIEXAMPLEEXPERPATH/exp1_eg_saved] is used.","title":"ndi.test.element.test_ndi_element"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Belement/test_ndi_element.m/#nditestelementtest_ndi_element","text":"TEST_NDI_ELEMENT - Test the functionality of the NDI_ELEMENT object and the NDI_SESSION database ndi.test.element([DIRNAME]) Given a directory, this function tries to create some NDI_VARIABLE objects in the session DATABASE. The test function removes them on completion. If DIRNAME is not provided, the default directory [NDIEXAMPLEEXPERPATH/exp1_eg_saved] is used.","title":"ndi.test.element.test_ndi_element"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bfile/compare_fileobj.m/","text":"ndi.test.file.compare_fileobj COMPARE_FILEOBJ compare the binary contents of fileobj elements B = COMPARE_FILEOBJ(F1,F2) Does a binary comparison of the contents of FILEOBJ F1 and F2.","title":"ndi.test.file.compare_fileobj"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bfile/compare_fileobj.m/#nditestfilecompare_fileobj","text":"COMPARE_FILEOBJ compare the binary contents of fileobj elements B = COMPARE_FILEOBJ(F1,F2) Does a binary comparison of the contents of FILEOBJ F1 and F2.","title":"ndi.test.file.compare_fileobj"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bfilenavigator/test_ndi_filenavigator.m/","text":"ndi.test.filenavigator.test_ndi_filenavigator TEST_NDI_FILENAVIGATOR - A test function for the ndi_filenavigator class Creates an session based on a test directory in vhtools_mltbx_toolsbox. Then it finds the number of epochs and returns the files associated with epoch N=2.","title":"ndi.test.filenavigator.test_ndi_filenavigator"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bfilenavigator/test_ndi_filenavigator.m/#nditestfilenavigatortest_ndi_filenavigator","text":"TEST_NDI_FILENAVIGATOR - A test function for the ndi_filenavigator class Creates an session based on a test directory in vhtools_mltbx_toolsbox. Then it finds the number of epochs and returns the files associated with epoch N=2.","title":"ndi.test.filenavigator.test_ndi_filenavigator"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bfilenavigator/test_ndi_filenavigator_fileIDfunction.m/","text":"ndi.test.filenavigator.test_ndi_filenavigator_fileIDfunction function: Short description Extended description","title":"ndi.test.filenavigator.test_ndi_filenavigator_fileIDfunction"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bfilenavigator/test_ndi_filenavigator_fileIDfunction.m/#nditestfilenavigatortest_ndi_filenavigator_fileidfunction","text":"function: Short description Extended description","title":"ndi.test.filenavigator.test_ndi_filenavigator_fileIDfunction"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bgui/displayDocViewer.m/","text":"ndi.test.gui.displayDocViewer ndi.test.gui.displayDocViewer is a function.","title":"ndi.test.gui.displayDocViewer"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bgui/displayDocViewer.m/#nditestguidisplaydocviewer","text":"ndi.test.gui.displayDocViewer is a function.","title":"ndi.test.gui.displayDocViewer"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bingest/compare.m/","text":"ndi.test.ingest.compare COMPARE - compare sessions that are obtaining data from ingested or non-ingested sources B = COMPARE(DIRNAME1, DIRNAME2) Compare data from ndi sessions (from VH Lab) where one dataset (DIRNAME1) is not ingested and the other (DIRNAME2) is. If DIRNAME1 and DIRNAME2 are not provided, then DIRNAME1 = '/Users/vanhoosr/test/2019-11-19' and DIRNAME2 = '/Users/vanhoosr/test/3019-11-19'","title":"ndi.test.ingest.compare"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bingest/compare.m/#nditestingestcompare","text":"COMPARE - compare sessions that are obtaining data from ingested or non-ingested sources B = COMPARE(DIRNAME1, DIRNAME2) Compare data from ndi sessions (from VH Lab) where one dataset (DIRNAME1) is not ingested and the other (DIRNAME2) is. If DIRNAME1 and DIRNAME2 are not provided, then DIRNAME1 = '/Users/vanhoosr/test/2019-11-19' and DIRNAME2 = '/Users/vanhoosr/test/3019-11-19'","title":"ndi.test.ingest.compare"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bingest/mfdaq.m/","text":"ndi.test.ingest.mfdaq this is a manual, script-based test","title":"ndi.test.ingest.mfdaq"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bingest/mfdaq.m/#nditestingestmfdaq","text":"this is a manual, script-based test","title":"ndi.test.ingest.mfdaq"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bingest/mfdaq_compare.m/","text":"ndi.test.ingest.mfdaq_compare MFDAQ_COMPARE - compare data from two ndi.daq.system.mfdaq objects [B,ERRMSG] = MFDAQ_COMPARE(DAQ1, DAQ2) Compare output from two MFDAQ objects. DAQ1 is a non-ingested daq system and DAQ2 should be an ingested daq system.","title":"ndi.test.ingest.mfdaq_compare"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bingest/mfdaq_compare.m/#nditestingestmfdaq_compare","text":"MFDAQ_COMPARE - compare data from two ndi.daq.system.mfdaq objects [B,ERRMSG] = MFDAQ_COMPARE(DAQ1, DAQ2) Compare output from two MFDAQ objects. DAQ1 is a non-ingested daq system and DAQ2 should be an ingested daq system.","title":"ndi.test.ingest.mfdaq_compare"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bingest/syncgraph.m/","text":"ndi.test.ingest.syncgraph this is a manual test","title":"ndi.test.ingest.syncgraph"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bingest/syncgraph.m/#nditestingestsyncgraph","text":"this is a manual test","title":"ndi.test.ingest.syncgraph"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bmisc/bytestream_save.m/","text":"ndi.test.misc.bytestream_save ndi.test.misc.bytestream_save - prepare a bytestream file for testing on multiple platforms ndi.test.misc.bytestream_save() Creates a file called 'bytestream.mat' in the current directory. The file contains a variable 'bytestream' that is the bytestream conversion of a structure 'bytestream_structure' that consists of a few Matlab variables, including a custom object (an ndi.document). Upon loading the file, one can test that it works on that platform by running ndi.test.misc.bytesream_test See also: ndi.test.misc.bytestream_test","title":"ndi.test.misc.bytestream_save"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bmisc/bytestream_save.m/#nditestmiscbytestream_save","text":"ndi.test.misc.bytestream_save - prepare a bytestream file for testing on multiple platforms ndi.test.misc.bytestream_save() Creates a file called 'bytestream.mat' in the current directory. The file contains a variable 'bytestream' that is the bytestream conversion of a structure 'bytestream_structure' that consists of a few Matlab variables, including a custom object (an ndi.document). Upon loading the file, one can test that it works on that platform by running ndi.test.misc.bytesream_test See also: ndi.test.misc.bytestream_test","title":"ndi.test.misc.bytestream_save"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bmisc/bytestream_test.m/","text":"ndi.test.misc.bytestream_test ndi.test.misc.bytestream_test - prepare a bytestream file for testing on multiple platforms b = ndi.test.misc.bytestream_test() Loads a file called 'bytestream.mat' in the current directory, and tests if the reconstruction of the variables from the bytestream variable 'bytestream' exactly match the structure in the variable 'bytestream_structure'. If the test passes, b is 1. See also: ndi.test.misc.bytestream_save","title":"ndi.test.misc.bytestream_test"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bmisc/bytestream_test.m/#nditestmiscbytestream_test","text":"ndi.test.misc.bytestream_test - prepare a bytestream file for testing on multiple platforms b = ndi.test.misc.bytestream_test() Loads a file called 'bytestream.mat' in the current directory, and tests if the reconstruction of the variables from the bytestream variable 'bytestream' exactly match the structure in the variable 'bytestream_structure'. If the test passes, b is 1. See also: ndi.test.misc.bytestream_save","title":"ndi.test.misc.bytestream_test"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bpipeline/edit.m/","text":"ndi.test.pipeline.edit ndi.test.pipeline.edit - test the pipeline editor GUI Calls ndi.pipeline.edit('command','new','pipelinePath',... fullfile(userpath,'tools','NDI-matlab','+ndi','+test','+pipeline',... 'test_pipeline')) to test the pipeline graphical editor.","title":"ndi.test.pipeline.edit"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bpipeline/edit.m/#nditestpipelineedit","text":"ndi.test.pipeline.edit - test the pipeline editor GUI Calls ndi.pipeline.edit('command','new','pipelinePath',... fullfile(userpath,'tools','NDI-matlab','+ndi','+test','+pipeline',... 'test_pipeline')) to test the pipeline graphical editor.","title":"ndi.test.pipeline.edit"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bprobe/test_ndi_probe.m/","text":"ndi.test.probe.test_ndi_probe TEST_NDI_PROBE - Test the functionality of NDI_PROBE ndi.test.probe([DIRNAME]) Given an session directory with probes, this function plots some data from the first probe channel 1. If DIRNAME is not provided, the default directory [NDIPATH/example_sessions/exp1_eg_saved] is used.","title":"ndi.test.probe.test_ndi_probe"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bprobe/test_ndi_probe.m/#nditestprobetest_ndi_probe","text":"TEST_NDI_PROBE - Test the functionality of NDI_PROBE ndi.test.probe([DIRNAME]) Given an session directory with probes, this function plots some data from the first probe channel 1. If DIRNAME is not provided, the default directory [NDIPATH/example_sessions/exp1_eg_saved] is used.","title":"ndi.test.probe.test_ndi_probe"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bsession/ndi_test_sessiontable.m/","text":"ndi.test.session.ndi_test_sessiontable NDI_TEST_SESSIONTABLE Test the ndi.session.sessiontable object","title":"ndi.test.session.ndi_test_sessiontable"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bsession/ndi_test_sessiontable.m/#nditestsessionndi_test_sessiontable","text":"NDI_TEST_SESSIONTABLE Test the ndi.session.sessiontable object","title":"ndi.test.session.ndi_test_sessiontable"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bsetup/angeluccilab.m/","text":"ndi.test.setup.angeluccilab ndi.test.setup.angeluccilab - test reading from Angelucci lab data E = ndi.test.setup.angeluccilab(REF, DIRNAME) Open a directory from test data provided by Angelucci lab Example: E = ndi.test.setup.angeluccilab('2017-09-11','/Volumes/van-hooser-lab/Projects/NDI/Datasets_to_Convert/Angelucci/2017-09-11');","title":"ndi.test.setup.angeluccilab"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bsetup/angeluccilab.m/#nditestsetupangeluccilab","text":"ndi.test.setup.angeluccilab - test reading from Angelucci lab data E = ndi.test.setup.angeluccilab(REF, DIRNAME) Open a directory from test data provided by Angelucci lab Example: E = ndi.test.setup.angeluccilab('2017-09-11','/Volumes/van-hooser-lab/Projects/NDI/Datasets_to_Convert/Angelucci/2017-09-11');","title":"ndi.test.setup.angeluccilab"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bsetup/dbkatzlab_narendra.m/","text":"ndi.test.setup.dbkatzlab_narendra NDI_KATZLAB_NARENDRA_TEST - test reading from Murkherjee et al. 2019 E = ndi.test.setups.katzlab.narendra_test(REF, DIRNAME) Open a directory from Murkherjee et al. (2019, Don Katz lab) Example: E = ndi.test.setup.dbkatzlab_narendra('/Volumes/van-hooser-lab/Projects/NDI/Datasets_to_Convert/Katz/NM43_Raw');","title":"ndi.test.setup.dbkatzlab_narendra"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bsetup/dbkatzlab_narendra.m/#nditestsetupdbkatzlab_narendra","text":"NDI_KATZLAB_NARENDRA_TEST - test reading from Murkherjee et al. 2019 E = ndi.test.setups.katzlab.narendra_test(REF, DIRNAME) Open a directory from Murkherjee et al. (2019, Don Katz lab) Example: E = ndi.test.setup.dbkatzlab_narendra('/Volumes/van-hooser-lab/Projects/NDI/Datasets_to_Convert/Katz/NM43_Raw');","title":"ndi.test.setup.dbkatzlab_narendra"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bsetup/marderlab_hamood.m/","text":"ndi.test.setup.marderlab_hamood ndi.test.setup.marderlab_hamood - test reading from Murkherjee et al. 2019 E = ndi.test.setup.marderlab_hamood(REF, DIRNAME) Open a directory from Hamood et al. (2015, Eve Marder lab) Example: E = ndi.test.setups.marderlab_hamood('811_05','/Volumes/van-hooser-lab/Projects/NDI/Datasets_to_Convert/Marder/Data/811/811_05');","title":"ndi.test.setup.marderlab_hamood"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bsetup/marderlab_hamood.m/#nditestsetupmarderlab_hamood","text":"ndi.test.setup.marderlab_hamood - test reading from Murkherjee et al. 2019 E = ndi.test.setup.marderlab_hamood(REF, DIRNAME) Open a directory from Hamood et al. (2015, Eve Marder lab) Example: E = ndi.test.setups.marderlab_hamood('811_05','/Volumes/van-hooser-lab/Projects/NDI/Datasets_to_Convert/Marder/Data/811/811_05');","title":"ndi.test.setup.marderlab_hamood"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Btestsuite/ndi_testsuite.m/","text":"ndi.test.testsuite.ndi_testsuite NDI_TESTSUITE - run a suite of tests OUTPUT = ndi.test.testsuite Loads a set of test suite instructions in the file 'ndi_testsuite_list.txt'. This file is a tab-delimited table that can be loaded with vlt.file.loadStructArray with fields Field name | Description -------------------------------------------------------------------------- code | The code to be run (as a Matlab evaluation) runit | Should we run it? 0/1 comment | A comment string describing the test OUTPUT is a structure of outcomes. It includes the following fields: Field name | Descriptopn -------------------------------------------------------------------------- outcome | Success is 1, failure is 0. -1 means it was not run. errormsg | Any error message","title":"ndi.test.testsuite.ndi_testsuite"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Btestsuite/ndi_testsuite.m/#nditesttestsuitendi_testsuite","text":"NDI_TESTSUITE - run a suite of tests OUTPUT = ndi.test.testsuite Loads a set of test suite instructions in the file 'ndi_testsuite_list.txt'. This file is a tab-delimited table that can be loaded with vlt.file.loadStructArray with fields Field name | Description -------------------------------------------------------------------------- code | The code to be run (as a Matlab evaluation) runit | Should we run it? 0/1 comment | A comment string describing the test OUTPUT is a structure of outcomes. It includes the following fields: Field name | Descriptopn -------------------------------------------------------------------------- outcome | Success is 1, failure is 0. -1 means it was not run. errormsg | Any error message","title":"ndi.test.testsuite.ndi_testsuite"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Btime/filefind.m/","text":"ndi.test.time.filefind at present, this is not a user-accessible test function","title":"ndi.test.time.filefind"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Btime/filefind.m/#nditesttimefilefind","text":"at present, this is not a user-accessible test function","title":"ndi.test.time.filefind"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Btutorial/tutorial_02_set.m/","text":"ndi.test.tutorial.tutorial_02_set ndi.test.tutorial.tutorial_02_set - run the Tutorial 2.* test set ndi.test.tutorial.tutorial_02_set Runs the code for Tutorial 2.1, 2.2, 2.3, 2.4, and 2.5. This function requires that a clean copy of the test data 'ts_exper1' and and 'ts_exper2' be installed at [userpath filesep 'Documents' filesep 'NDI filesep 'Test'] Note that one must make the directory 'Test' manually. The files must be unzipped. 'ts_exper1' is available at https://drive.google.com/file/d/1j7IAeMSrH64-qIDLB5EJYUofJSdinwuU/view?usp=sharing and 'ts_exper2' is available at https://drive.google.com/file/d/1otNMkVgZ6KBIn2Y-W2oYVj2DgSOgV-xE/view?usp=sharing 'ts_exper2' updated for the new database (2023-04) is here: https://drive.google.com/file/d/1D756b6_n6f0wrBqN4cJOuHOs_46YN_xy/view?usp=sharing Note that this function requires some user intervention. For the purpose of the test, one can simply choose Kmeans clustering with 1 cluster, press the cluster button, and mark the cluster as \"Excellent\" quality.","title":"ndi.test.tutorial.tutorial_02_set"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Btutorial/tutorial_02_set.m/#nditesttutorialtutorial_02_set","text":"ndi.test.tutorial.tutorial_02_set - run the Tutorial 2.* test set ndi.test.tutorial.tutorial_02_set Runs the code for Tutorial 2.1, 2.2, 2.3, 2.4, and 2.5. This function requires that a clean copy of the test data 'ts_exper1' and and 'ts_exper2' be installed at [userpath filesep 'Documents' filesep 'NDI filesep 'Test'] Note that one must make the directory 'Test' manually. The files must be unzipped. 'ts_exper1' is available at https://drive.google.com/file/d/1j7IAeMSrH64-qIDLB5EJYUofJSdinwuU/view?usp=sharing and 'ts_exper2' is available at https://drive.google.com/file/d/1otNMkVgZ6KBIn2Y-W2oYVj2DgSOgV-xE/view?usp=sharing 'ts_exper2' updated for the new database (2023-04) is here: https://drive.google.com/file/d/1D756b6_n6f0wrBqN4cJOuHOs_46YN_xy/view?usp=sharing Note that this function requires some user intervention. For the purpose of the test, one can simply choose Kmeans clustering with 1 cluster, press the cluster button, and mark the cluster as \"Excellent\" quality.","title":"ndi.test.tutorial.tutorial_02_set"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/clocktype.m/","text":"CLASS ndi.time.clocktype NDI_CLOCKTYPE - a class for specifying a clock type in the NDI framework Superclasses matlab.mixin.Heterogeneous Properties Property Description type the ndi_clock type; in this class, acceptable values are 'UTC', 'exp_global_time', and 'no_time' Methods Method Description assertGlobal produce an error if the clocktype is not a global type clocktype Creates a new ndi.time.clocktype object epochgraph_edge provide epochgraph edge based purely on clock type eq are two ndi.time.clocktype objects equal? isGlobal check if is a global type ndi_clocktype2char produce the NDI_CLOCKTOP's type as a string ne are two ndi.time.clocktype objects not equal? needsepoch does this clocktype need an epoch for full description? setclocktype Set the type of an ndi.time.clocktype Methods help assertGlobal - produce an error if the clocktype is not a global type assertGlobal(ndi_clocktype_obj) Example: ndi.time.clocktype.assertGlobal(myClocktype); clocktype - Creates a new ndi.time.clocktype object OBJ = ndi.time.clocktype(TYPE) Creates a new ndi.time.clocktype object. TYPE can be any of the following strings (with description): TYPE string | Description ------------------------------------------------------------------------------ 'utc' | Universal coordinated time (within 0.1ms) 'approx_utc' | Universal coordinated time (within 5 seconds) 'exp_global_time' | Experiment global time (within 0.1ms) 'approx_exp_global_time' | Experiment global time (within 5s) 'dev_global_time' | A device keeps its own global time (within 0.1ms) | (that is, it knows its own clock across recording epochs) 'approx_dev_global_time' | A device keeps its own global time (within 5 s) | (that is, it knows its own clock across recording epochs) 'dev_local_time' | A device keeps its own local time only within epochs 'no_time' | No timing information 'inherited' | The timing information is inherited from another device. Documentation for ndi.time.clocktype/clocktype doc ndi.time.clocktype epochgraph_edge - provide epochgraph edge based purely on clock type [COST, MAPPING] = EPOCHGRAPH_EDGE(NDI_CLOCKTYPE_A, NDI_CLOCKTYPE_B) Returns the COST and ndi.time.timemapping object MAPPING that describes the automatic mapping between epochs that have clock types NDI_CLOCKTYPE_A and NDI_CLOCKTYPE_B. The following NDI_CLOCKTYPES, if they exist, are linked across epochs with a cost of 100 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' Otherwise, COST is Inf and MAPPING is empty. eq - are two ndi.time.clocktype objects equal? B = EQ(NDS_CLOCK_OBJ_A, NDI_CLOCKTYPE_OBJ_B) Compares two NDI_CLOCKTYPE_objects and returns 1 if they refer to the same clock type. isGlobal - check if is a global type b = ISGLOBAL(ndi_clocktype_obj) Example: b=ndi.time.clocktype.isGlobal(myClocktype); ndi_clocktype2char - produce the NDI_CLOCKTOP's type as a string STR = NDI_CLOCKTYPE2CHAR(NDI_CLOCKTYPE_OBJ) Return a string STR equal to the ndi.time.clocktype object's type parameter. ne - are two ndi.time.clocktype objects not equal? B = EQ(NDS_CLOCK_OBJ_A, NDI_CLOCKTYPE_OBJ_B) Compares two NDI_CLOCKTYPE_objects and returns 0 if they refer to the same clock type. needsepoch - does this clocktype need an epoch for full description? B = NEEDSEPOCH(NDI_CLOCKTYPE_OBJ) Does this ndi.time.clocktype object need an epoch in order to specify time? Returns 1 for 'dev_local_time', 0 otherwise. setclocktype - Set the type of an ndi.time.clocktype NDI_CLOCKTYPE_OBJ = SETCLOCKTYPE(NDI_CLOCKTYPE_OBJ, TYPE) Sets the TYPE property of an ndi.time.clocktype object NDI_CLOCKTYPE_OBJ. Valid values for the TYPE string are as follows: TYPE string | Description ------------------------------------------------------------------------------ 'utc' | Universal coordinated time (within 0.1ms) 'approx_utc' | Universal coordinated time (within 5 seconds) 'exp_global_time' | Experiment global time (within 0.1ms) 'approx_exp_global_time' | Experiment global time (within 5s) 'dev_global_time' | A device keeps its own global time (within 0.1ms) | (that is, it knows its own clock across recording epochs) 'approx_dev_global_time' | A device keeps its own global time (within 5 s) | (that is, it knows its own clock across recording epochs) 'dev_local_time' | A device keeps its own local time only within epochs 'no_time' | No timing information 'inherited' | The timing information is inherited from another device.","title":"ndi.time.clocktype"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/clocktype.m/#class-nditimeclocktype","text":"NDI_CLOCKTYPE - a class for specifying a clock type in the NDI framework","title":"CLASS ndi.time.clocktype"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/clocktype.m/#superclasses","text":"matlab.mixin.Heterogeneous","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/clocktype.m/#properties","text":"Property Description type the ndi_clock type; in this class, acceptable values are 'UTC', 'exp_global_time', and 'no_time'","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/clocktype.m/#methods","text":"Method Description assertGlobal produce an error if the clocktype is not a global type clocktype Creates a new ndi.time.clocktype object epochgraph_edge provide epochgraph edge based purely on clock type eq are two ndi.time.clocktype objects equal? isGlobal check if is a global type ndi_clocktype2char produce the NDI_CLOCKTOP's type as a string ne are two ndi.time.clocktype objects not equal? needsepoch does this clocktype need an epoch for full description? setclocktype Set the type of an ndi.time.clocktype","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/clocktype.m/#methods-help","text":"assertGlobal - produce an error if the clocktype is not a global type assertGlobal(ndi_clocktype_obj) Example: ndi.time.clocktype.assertGlobal(myClocktype); clocktype - Creates a new ndi.time.clocktype object OBJ = ndi.time.clocktype(TYPE) Creates a new ndi.time.clocktype object. TYPE can be any of the following strings (with description): TYPE string | Description ------------------------------------------------------------------------------ 'utc' | Universal coordinated time (within 0.1ms) 'approx_utc' | Universal coordinated time (within 5 seconds) 'exp_global_time' | Experiment global time (within 0.1ms) 'approx_exp_global_time' | Experiment global time (within 5s) 'dev_global_time' | A device keeps its own global time (within 0.1ms) | (that is, it knows its own clock across recording epochs) 'approx_dev_global_time' | A device keeps its own global time (within 5 s) | (that is, it knows its own clock across recording epochs) 'dev_local_time' | A device keeps its own local time only within epochs 'no_time' | No timing information 'inherited' | The timing information is inherited from another device. Documentation for ndi.time.clocktype/clocktype doc ndi.time.clocktype epochgraph_edge - provide epochgraph edge based purely on clock type [COST, MAPPING] = EPOCHGRAPH_EDGE(NDI_CLOCKTYPE_A, NDI_CLOCKTYPE_B) Returns the COST and ndi.time.timemapping object MAPPING that describes the automatic mapping between epochs that have clock types NDI_CLOCKTYPE_A and NDI_CLOCKTYPE_B. The following NDI_CLOCKTYPES, if they exist, are linked across epochs with a cost of 100 and a linear mapping rule with shift 1 and offset 0: 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' Otherwise, COST is Inf and MAPPING is empty. eq - are two ndi.time.clocktype objects equal? B = EQ(NDS_CLOCK_OBJ_A, NDI_CLOCKTYPE_OBJ_B) Compares two NDI_CLOCKTYPE_objects and returns 1 if they refer to the same clock type. isGlobal - check if is a global type b = ISGLOBAL(ndi_clocktype_obj) Example: b=ndi.time.clocktype.isGlobal(myClocktype); ndi_clocktype2char - produce the NDI_CLOCKTOP's type as a string STR = NDI_CLOCKTYPE2CHAR(NDI_CLOCKTYPE_OBJ) Return a string STR equal to the ndi.time.clocktype object's type parameter. ne - are two ndi.time.clocktype objects not equal? B = EQ(NDS_CLOCK_OBJ_A, NDI_CLOCKTYPE_OBJ_B) Compares two NDI_CLOCKTYPE_objects and returns 0 if they refer to the same clock type. needsepoch - does this clocktype need an epoch for full description? B = NEEDSEPOCH(NDI_CLOCKTYPE_OBJ) Does this ndi.time.clocktype object need an epoch in order to specify time? Returns 1 for 'dev_local_time', 0 otherwise. setclocktype - Set the type of an ndi.time.clocktype NDI_CLOCKTYPE_OBJ = SETCLOCKTYPE(NDI_CLOCKTYPE_OBJ, TYPE) Sets the TYPE property of an ndi.time.clocktype object NDI_CLOCKTYPE_OBJ. Valid values for the TYPE string are as follows: TYPE string | Description ------------------------------------------------------------------------------ 'utc' | Universal coordinated time (within 0.1ms) 'approx_utc' | Universal coordinated time (within 5 seconds) 'exp_global_time' | Experiment global time (within 0.1ms) 'approx_exp_global_time' | Experiment global time (within 5s) 'dev_global_time' | A device keeps its own global time (within 0.1ms) | (that is, it knows its own clock across recording epochs) 'approx_dev_global_time' | A device keeps its own global time (within 5 s) | (that is, it knows its own clock across recording epochs) 'dev_local_time' | A device keeps its own local time only within epochs 'no_time' | No timing information 'inherited' | The timing information is inherited from another device.","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncgraph.m/","text":"CLASS ndi.time.syncgraph ndi.time.syncgraph - create a new ndi.time.syncgraph object NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION) Builds a new ndi.time.syncgraph object and sets its SESSION property to SESSION, which should be an ndi.session object. This function can be called in another form: NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION, NDI_DOCUMENT_OBJ) where NDI_DOCUMENT_OBJ is an ndi.document of class syncgraph. Superclasses ndi.ido , did.ido Properties Property Description session ndi.session object rules cell array of ndi.time.syncrule objects to apply identifier Methods Method Description addepoch add an ndi.epoch.epochset to the graph addrule add an ndi.time.syncrule to an ndi.time.syncgraph object addunderlyingepochs add an ndi.epoch.epochset to the graph buildgraphinfo build graph info for an ndi.time.syncgraph object cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_graphinfo return the cached graph info of an ndi.time.syncgraph object checkingestedrules check for a mapping between two nodes in the ingested syncrules eq are 2 ndi.time.syncgraph objects equal? get_ingested get ingested documents for an ndi.syncgraph object getcache return the NDI_CACHE and key for ndi.time.syncgraph ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache graphinfo return the graph information id return the identifier of an DID.IDO object ingest create objects to be ingested to store the latest syncgraph isvalid is a unique ID number valid? load_all_syncgraph_docs load a syncgraph document and all of its syncrules newdocument create a new ndi.document for an ndi.time.syncgraph object remove_cached_graphinfo REMOVE_CACHED_GRAPHINFO removeepoch remove an ndi.epoch.epochset from the graph removerule remove a given ndi.time.syncrule from an ndi.time.syncgraph object searchquery create a search for this ndi.time.syncgraph object set_cached_graphinfo SET_CACHED_GRAPHINFO syncgraph create a new ndi.time.syncgraph object time_convert convert time from one ndi.time.timereference to another unique_id Generate a unique ID number for DID databases (Static method) Methods help addepoch - add an ndi.epoch.epochset to the graph NEW_GINFO = ADDEPOCH(NDI_SYNCGRAPH_OBJ, NDI_DAQSYSTEM_OBJ, GINFO) Adds an ndi.epoch.epochset to the ndi.time.syncgraph Note: this does not update the cache addrule - add an ndi.time.syncrule to an ndi.time.syncgraph object NDI_SYNCGRAPH_OBJ = ADDRULE(NDI_SYNCGRAPH_OBJ, NDI_SYNCRULE_OBJ) Adds the ndi.time.syncrule object indicated as a rule for the ndi.time.syncgraph NDI_SYNCGRAPH_OBJ. If the ndi.time.syncrule is already there, then See also: ndi.time.syncgraph/REMOVERULE addunderlyingepochs - add an ndi.epoch.epochset to the graph NEW_GINFO = ADDUNDERLYINGEPOCHS(NDI_SYNCGRAPH_OBJ, NDI_EPOCHSET_OBJ, GINFO) Adds an ndi.epoch.epochset to the ndi.time.syncgraph Note: this DOES update the cache Step 1: make sure we have the right kind of input object buildgraphinfo - build graph info for an ndi.time.syncgraph object [GINFO] = BUILDGRAPHINFO(NDI_SYNCGRAPH_OBJ) Builds from scratch the syncgraph structure GINFO from all of the devices in the NDI_SYNCGRAPH_OBJ's associated 'session' property. The graph information GINFO is a structure with the following fields: Fieldname | Description --------------------------------------------------------------------- nodes | The epochnodes (see ndi.epoch.epochset/EPOCHNODE) G | The epoch node graph adjacency matrix. G(i,j) is the cost of | converting between node i and j. mapping | A cell matrix with ndi.time.timemapping objects that describes the | time mapping among nodes. mapping{i,j} is the mapping between node i and j. diG | The graph data structure in Matlab for G (a 'digraph') syncRule_IDs | The document IDs of the syncrules syncRule_G | The syncRule graph matrix; if syncRule_G(i,j)==k, then syncRule_IDs{k} | was used to determine G(i,j) and mapping{i,j} cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) cached_graphinfo - return the cached graph info of an ndi.time.syncgraph object [GINFO, HASHVALUE] = CACHED_EPOCHTABLE(NDI_SYNCGRAPH_OBJ) Return the cached version of the graph info, if it exists, along with its HASHVALUE (a hash number generated from the graph info). If there is no cached version, GINFO and HASHVALUE will be empty. checkingestedrules - check for a mapping between two nodes in the ingested syncrules [C,M] = CHECKINGESTEDRULES(INGESTED_SYNCRULE_DOCS, NDI_SYNCRULE_OBJ, GNODE_I, GNODE_J) Check a set of ingested syncrule documents to see if there is any information about a mapping between graphnodes GNODE_I and GNODE_J. If there is, the mapping M with the lowest cost C is returned. Otherwise, C is Inf and M is empty. eq - are 2 ndi.time.syncgraph objects equal? B = EQ(NDI_SYNCGRAPH_OBJ1, NDI_SYNCHGRAPH_OBJ2) B is 1 if the ndi.time.syncgraph objects have equal sessions and if all syncrules are equal. get_ingested - get ingested documents for an ndi.syncgraph object D = GET_INGESTED(NDI_SYNCGRAPH_OBJ) Get current ingested sync mappings. getcache - return the NDI_CACHE and key for ndi.time.syncgraph [CACHE,KEY] = GETCACHE(NDI_SYNCGRAPH_OBJ) Returns the CACHE and KEY for the ndi.time.syncgraph object. The CACHE is returned from the associated session. The KEY is the string 'syncgraph_' followed by the object's id. See also: ndi.time.syncgraph, NDI_BASE ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) graphinfo - return the graph information The graph information GINFO is a structure with the following fields: Fieldname | Description --------------------------------------------------------------------- nodes | The epochnodes (see ndi.epoch.epochset/EPOCHNODE) G | The epoch node graph adjacency matrix. G(i,j) is the cost of | converting between node i and j. mapping | A cell matrix with ndi.time.timemapping objects that describes the | time mapping among nodes. mapping{i,j} is the mapping between node i and j. id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.time.syncgraph/id is inherited from superclass did.ido ingest - create objects to be ingested to store the latest syncgraph D = INGEST(NDI_SYNCGRAPH_OBJ) Create ingestion documents from the current syncrules, devices, and epochs. First, this function removes the existing syncgraph and rebuilds it, in case any epochs have been added since the last run. Existing sync mappings will not be overwritten. isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.time.syncgraph.isvalid is inherited from superclass did.ido load_all_syncgraph_docs - load a syncgraph document and all of its syncrules [SYNCGRAPH_DOC, SYNCRULE_DOCS] = LOAD_ALL_SYNCGRAPH_DOCS(NDI_SESSION_OBJ,... SYNCGRAPH_DOC_ID) Given an ndi.session object and the document identifier of an ndi.time.syncgraph object, this function loads the ndi.document associated with the SYNCGRAPH (SYNCGRAPH_DOC) and all of the documents of its SYNCRULES (cell array of NDI_DOCUMENTS in SYNCRULES_DOC). newdocument - create a new ndi.document for an ndi.time.syncgraph object NDI_DOCUMENT_OBJ_SET = NEWDOCUMENT(NDI_SYNCGRAPH_OBJ) Creates an ndi.document object DOC that represents the ndi.time.syncrule object. remove_cached_graphinfo - REMOVE_CACHED_GRAPHINFO REMOVE_CACHED_GRAPHINFO(NDI_SYNCGRAPH_OBJ) Remove the cached graph info. See also: CACHE_GRAPHINFO, SET_CACHE_GRAPHINFO removeepoch - remove an ndi.epoch.epochset from the graph GINFO = REMOVEEPOCH(NDI_SYNCGRAPH_OBJ, NDI_DAQSYSTEM_OBJ, GINFO) Remove all epoch nodes from the graph that are contributed by NDI_DAQSYSTEM_OBJ Note: this does not update the cache removerule - remove a given ndi.time.syncrule from an ndi.time.syncgraph object NDI_SYNCGRAPH_OBJ = REMOVERULE(NDI_SYNCGRAPH_OBJ, INDEX) Removes the NDI_SYNCGRAPH_OBJ.rules entry at the INDEX (or indexes) indicated. searchquery - create a search for this ndi.time.syncgraph object SQ = SEARCHQUERY(NDI_SYNCGRAPH_OBJ) Creates a search query for the ndi.time.syncgraph object. set_cached_graphinfo - SET_CACHED_GRAPHINFO SET_CACHED_GRAPHINFO(NDI_SYNCGRAPH_OBJ, GINFO) Set the cached graph info. Opposite of CACHE_GRAPHINFO. See also: CACHE_GRAPHINFO syncgraph - create a new ndi.time.syncgraph object NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION) Builds a new ndi.time.syncgraph object and sets its SESSION property to SESSION, which should be an ndi.session object. This function can be called in another form: NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION, NDI_DOCUMENT_OBJ) where NDI_DOCUMENT_OBJ is an ndi.document of class syncgraph. Documentation for ndi.time.syncgraph/syncgraph doc ndi.time.syncgraph time_convert - convert time from one ndi.time.timereference to another [T_OUT, TIMEREF_OUT, MSG] = TIME_CONVERT(NDI_SYNCGRAPH_OBJ, TIMEREF_IN, T_IN, REFERENT_OUT, CLOCKTYPE_OUT) Attempts to convert a time T_IN that is referred to by ndi.time.timereference object TIMEREF_IN to T_OUT that is referred to by the requested REFERENT_OUT object (must be type ndi.epoch.epochset and NDI_BASE) with the requested ndi.time.clocktype CLOCKTYPE_OUT. T_OUT is the output time with respect to the ndi.time.timereference TIMEREF_OUT that incorporates REFERENT_OUT and CLOCKTYPE_OUT with the appropriate epoch and time reference. If the conversion cannot be made, T_OUT is empty and MSG contains a text message describing why the conversion could not be made. unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.time.syncgraph.unique_id is inherited from superclass did.ido","title":"ndi.time.syncgraph"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncgraph.m/#class-nditimesyncgraph","text":"ndi.time.syncgraph - create a new ndi.time.syncgraph object NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION) Builds a new ndi.time.syncgraph object and sets its SESSION property to SESSION, which should be an ndi.session object. This function can be called in another form: NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION, NDI_DOCUMENT_OBJ) where NDI_DOCUMENT_OBJ is an ndi.document of class syncgraph.","title":"CLASS ndi.time.syncgraph"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncgraph.m/#superclasses","text":"ndi.ido , did.ido","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncgraph.m/#properties","text":"Property Description session ndi.session object rules cell array of ndi.time.syncrule objects to apply identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncgraph.m/#methods","text":"Method Description addepoch add an ndi.epoch.epochset to the graph addrule add an ndi.time.syncrule to an ndi.time.syncgraph object addunderlyingepochs add an ndi.epoch.epochset to the graph buildgraphinfo build graph info for an ndi.time.syncgraph object cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_graphinfo return the cached graph info of an ndi.time.syncgraph object checkingestedrules check for a mapping between two nodes in the ingested syncrules eq are 2 ndi.time.syncgraph objects equal? get_ingested get ingested documents for an ndi.syncgraph object getcache return the NDI_CACHE and key for ndi.time.syncgraph ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache graphinfo return the graph information id return the identifier of an DID.IDO object ingest create objects to be ingested to store the latest syncgraph isvalid is a unique ID number valid? load_all_syncgraph_docs load a syncgraph document and all of its syncrules newdocument create a new ndi.document for an ndi.time.syncgraph object remove_cached_graphinfo REMOVE_CACHED_GRAPHINFO removeepoch remove an ndi.epoch.epochset from the graph removerule remove a given ndi.time.syncrule from an ndi.time.syncgraph object searchquery create a search for this ndi.time.syncgraph object set_cached_graphinfo SET_CACHED_GRAPHINFO syncgraph create a new ndi.time.syncgraph object time_convert convert time from one ndi.time.timereference to another unique_id Generate a unique ID number for DID databases (Static method)","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncgraph.m/#methods-help","text":"addepoch - add an ndi.epoch.epochset to the graph NEW_GINFO = ADDEPOCH(NDI_SYNCGRAPH_OBJ, NDI_DAQSYSTEM_OBJ, GINFO) Adds an ndi.epoch.epochset to the ndi.time.syncgraph Note: this does not update the cache addrule - add an ndi.time.syncrule to an ndi.time.syncgraph object NDI_SYNCGRAPH_OBJ = ADDRULE(NDI_SYNCGRAPH_OBJ, NDI_SYNCRULE_OBJ) Adds the ndi.time.syncrule object indicated as a rule for the ndi.time.syncgraph NDI_SYNCGRAPH_OBJ. If the ndi.time.syncrule is already there, then See also: ndi.time.syncgraph/REMOVERULE addunderlyingepochs - add an ndi.epoch.epochset to the graph NEW_GINFO = ADDUNDERLYINGEPOCHS(NDI_SYNCGRAPH_OBJ, NDI_EPOCHSET_OBJ, GINFO) Adds an ndi.epoch.epochset to the ndi.time.syncgraph Note: this DOES update the cache Step 1: make sure we have the right kind of input object buildgraphinfo - build graph info for an ndi.time.syncgraph object [GINFO] = BUILDGRAPHINFO(NDI_SYNCGRAPH_OBJ) Builds from scratch the syncgraph structure GINFO from all of the devices in the NDI_SYNCGRAPH_OBJ's associated 'session' property. The graph information GINFO is a structure with the following fields: Fieldname | Description --------------------------------------------------------------------- nodes | The epochnodes (see ndi.epoch.epochset/EPOCHNODE) G | The epoch node graph adjacency matrix. G(i,j) is the cost of | converting between node i and j. mapping | A cell matrix with ndi.time.timemapping objects that describes the | time mapping among nodes. mapping{i,j} is the mapping between node i and j. diG | The graph data structure in Matlab for G (a 'digraph') syncRule_IDs | The document IDs of the syncrules syncRule_G | The syncRule graph matrix; if syncRule_G(i,j)==k, then syncRule_IDs{k} | was used to determine G(i,j) and mapping{i,j} cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache GINFO_BIG = GINFO2CACHE(GINFO_SMALL) cached_graphinfo - return the cached graph info of an ndi.time.syncgraph object [GINFO, HASHVALUE] = CACHED_EPOCHTABLE(NDI_SYNCGRAPH_OBJ) Return the cached version of the graph info, if it exists, along with its HASHVALUE (a hash number generated from the graph info). If there is no cached version, GINFO and HASHVALUE will be empty. checkingestedrules - check for a mapping between two nodes in the ingested syncrules [C,M] = CHECKINGESTEDRULES(INGESTED_SYNCRULE_DOCS, NDI_SYNCRULE_OBJ, GNODE_I, GNODE_J) Check a set of ingested syncrule documents to see if there is any information about a mapping between graphnodes GNODE_I and GNODE_J. If there is, the mapping M with the lowest cost C is returned. Otherwise, C is Inf and M is empty. eq - are 2 ndi.time.syncgraph objects equal? B = EQ(NDI_SYNCGRAPH_OBJ1, NDI_SYNCHGRAPH_OBJ2) B is 1 if the ndi.time.syncgraph objects have equal sessions and if all syncrules are equal. get_ingested - get ingested documents for an ndi.syncgraph object D = GET_INGESTED(NDI_SYNCGRAPH_OBJ) Get current ingested sync mappings. getcache - return the NDI_CACHE and key for ndi.time.syncgraph [CACHE,KEY] = GETCACHE(NDI_SYNCGRAPH_OBJ) Returns the CACHE and KEY for the ndi.time.syncgraph object. The CACHE is returned from the associated session. The KEY is the string 'syncgraph_' followed by the object's id. See also: ndi.time.syncgraph, NDI_BASE ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache GINFO_SMALL = GINFO2CACHE(GINFO) graphinfo - return the graph information The graph information GINFO is a structure with the following fields: Fieldname | Description --------------------------------------------------------------------- nodes | The epochnodes (see ndi.epoch.epochset/EPOCHNODE) G | The epoch node graph adjacency matrix. G(i,j) is the cost of | converting between node i and j. mapping | A cell matrix with ndi.time.timemapping objects that describes the | time mapping among nodes. mapping{i,j} is the mapping between node i and j. id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.time.syncgraph/id is inherited from superclass did.ido ingest - create objects to be ingested to store the latest syncgraph D = INGEST(NDI_SYNCGRAPH_OBJ) Create ingestion documents from the current syncrules, devices, and epochs. First, this function removes the existing syncgraph and rebuilds it, in case any epochs have been added since the last run. Existing sync mappings will not be overwritten. isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.time.syncgraph.isvalid is inherited from superclass did.ido load_all_syncgraph_docs - load a syncgraph document and all of its syncrules [SYNCGRAPH_DOC, SYNCRULE_DOCS] = LOAD_ALL_SYNCGRAPH_DOCS(NDI_SESSION_OBJ,... SYNCGRAPH_DOC_ID) Given an ndi.session object and the document identifier of an ndi.time.syncgraph object, this function loads the ndi.document associated with the SYNCGRAPH (SYNCGRAPH_DOC) and all of the documents of its SYNCRULES (cell array of NDI_DOCUMENTS in SYNCRULES_DOC). newdocument - create a new ndi.document for an ndi.time.syncgraph object NDI_DOCUMENT_OBJ_SET = NEWDOCUMENT(NDI_SYNCGRAPH_OBJ) Creates an ndi.document object DOC that represents the ndi.time.syncrule object. remove_cached_graphinfo - REMOVE_CACHED_GRAPHINFO REMOVE_CACHED_GRAPHINFO(NDI_SYNCGRAPH_OBJ) Remove the cached graph info. See also: CACHE_GRAPHINFO, SET_CACHE_GRAPHINFO removeepoch - remove an ndi.epoch.epochset from the graph GINFO = REMOVEEPOCH(NDI_SYNCGRAPH_OBJ, NDI_DAQSYSTEM_OBJ, GINFO) Remove all epoch nodes from the graph that are contributed by NDI_DAQSYSTEM_OBJ Note: this does not update the cache removerule - remove a given ndi.time.syncrule from an ndi.time.syncgraph object NDI_SYNCGRAPH_OBJ = REMOVERULE(NDI_SYNCGRAPH_OBJ, INDEX) Removes the NDI_SYNCGRAPH_OBJ.rules entry at the INDEX (or indexes) indicated. searchquery - create a search for this ndi.time.syncgraph object SQ = SEARCHQUERY(NDI_SYNCGRAPH_OBJ) Creates a search query for the ndi.time.syncgraph object. set_cached_graphinfo - SET_CACHED_GRAPHINFO SET_CACHED_GRAPHINFO(NDI_SYNCGRAPH_OBJ, GINFO) Set the cached graph info. Opposite of CACHE_GRAPHINFO. See also: CACHE_GRAPHINFO syncgraph - create a new ndi.time.syncgraph object NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION) Builds a new ndi.time.syncgraph object and sets its SESSION property to SESSION, which should be an ndi.session object. This function can be called in another form: NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION, NDI_DOCUMENT_OBJ) where NDI_DOCUMENT_OBJ is an ndi.document of class syncgraph. Documentation for ndi.time.syncgraph/syncgraph doc ndi.time.syncgraph time_convert - convert time from one ndi.time.timereference to another [T_OUT, TIMEREF_OUT, MSG] = TIME_CONVERT(NDI_SYNCGRAPH_OBJ, TIMEREF_IN, T_IN, REFERENT_OUT, CLOCKTYPE_OUT) Attempts to convert a time T_IN that is referred to by ndi.time.timereference object TIMEREF_IN to T_OUT that is referred to by the requested REFERENT_OUT object (must be type ndi.epoch.epochset and NDI_BASE) with the requested ndi.time.clocktype CLOCKTYPE_OUT. T_OUT is the output time with respect to the ndi.time.timereference TIMEREF_OUT that incorporates REFERENT_OUT and CLOCKTYPE_OUT with the appropriate epoch and time reference. If the conversion cannot be made, T_OUT is empty and MSG contains a text message describing why the conversion could not be made. unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.time.syncgraph.unique_id is inherited from superclass did.ido","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncrule.m/","text":"CLASS ndi.time.syncrule SYNCRULE - create a new NDI_SYNCRULE for managing synchronization NDI_SYNCRULE_OBJ = ndi.time.syncrule(...) or NDI_SYNCRULE_OBJ = ndi.time.syncrule(PARAMETERS) Creates a new ndi.time.syncrule object with the given PARAMETERS (a structure). This is an abstract class, so PARAMETERS must be empty. Superclasses ndi.ido , did.ido , ndi.documentservice Properties Property Description parameters identifier Methods Method Description apply apply an ndi.time.syncrule to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule eq are two ndi.time.syncrule objects equal? id return the identifier of an DID.IDO object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule isvalid is a unique ID number valid? isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form syncrule create a new NDI_SYNCRULE for managing synchronization unique_id Generate a unique ID number for DID databases (Static method) Methods help apply - apply an ndi.time.syncrule to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects [COST, MAPPING] = APPLY(NDI_SYNCRULE_OBJ, EPOCHNODE_A, EPOCHNODE_B) Given an ndi.time.syncrule object and two epochnodes returned from ndi.epoch.epochset/EPOCHNODES this function attempts to identify whether a time synchronization can be made across these epoch nodes. If so, a cost COST and an ndi.time.timemapping object MAPPING is returned. Otherwise, COST and MAPPING are empty. In the abstract class, COST and MAPPING are always empty. See also: ndi.epoch.epochset/EPOCHNODES eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule EC = ELIGIBLECLOCKS(NDI_SYNCRULE_OBJ) Returns a cell array of ndi.time.clocktype objects with types that can be processed by the ndi.time.syncrule. If EC is empty, then no information is conveyed about which ndi.time.clocktype objects is valid (that is, it is not the case that the ndi.time.syncrule processes no types; instead, it has no specific limits). In the abstract class, EC is empty ({}). See also: ndi.time.syncrule/INELIGIBLECLOCKS eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule EES = ELIGIBLEEPOCHSETS(NDI_SYNCRULE_OBJ) Returns a cell array of valid ndi.epoch.epochset subclasses that the rule can process. If EES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes can be processed by the ndi.time.syncrule. (That is, it is not the case that the NDI_SYNCTABLE cannot use any classes.) NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here. The abstract class ndi.time.syncrule always returns empty. See also: ndi.time.syncrule/INELIGIBLEEPOCHSETS eq - are two ndi.time.syncrule objects equal? B = EQ(NDI_SYNCRULE_OBJ_A, NDI_SYNCRULE_OBJ_B) Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal. Otherwise, 0 is returned. id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.time.syncrule/id is inherited from superclass did.ido ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule IC = INELIGIBLECLOCKS(NDI_SYNCRULE_OBJ) Returns a cell array of ndi.time.clocktype objects with types that cannot be processed by the ndi.time.syncrule. If IC is empty, then no information is conveyed about which ndi.time.clocktype objects is valid (that is, it is not the case that the ndi.time.syncrule cannot be used on any types; instead, it has no specific limits). In the abstract class, IC is {ndi.time.clocktype('no_time')} . See also: ndi.time.syncrule/ELIGIBLECLOCKS ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule IES = INELIGIBLEEPOCHSETS(NDI_SYNCRULE_OBJ) Returns a cell array of ndi.epoch.epochset subclasses that the rule cannot process. If IES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes cannot be processed by the ndi.time.syncrule. (That is, it is not the case that the NDI_SYNCTABLE can use any class.) NDI_EPOCHSETS that use the rule must not be members of the classes returned here, but may be descendents of those classes. The abstract class ndi.time.syncrule always returns empty. See also: ndi.time.syncrule/ELIGIBLEEPOCHSETS isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.time.syncrule.isvalid is inherited from superclass did.ido isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule [B,MSG] = ISVALIDPARAMETERS(NDI_SYNCRULE_OBJ, PARAMETERS) Returns 1 if PARAMETERS is a valid parameter structure for ndi.time.syncrule. Returns 0 otherwise. If there is an error, MSG describes the error. See also: ndi.time.syncrule/SETPARAMETERS newdocument - create a new ndi.document for an ndi.time.syncrule object DOC = NEWDOCUMENT(NDI_SYNCRULE_OBJ) Creates an ndi.document object DOC that represents the ndi.time.syncrule object. searchquery - create a search for this ndi.time.syncrule object SQ = SEARCHQUERY(NDI_SYNCRULE_OBJ) Creates a search query for the ndi.time.syncgraph object. setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form NDI_SYNCRULE_OBJ = SETPARAMETERS(NDI_SYNCRULE_OBJ, PARAMETERS) Sets the 'parameters' field of an ndi.time.syncrule object, while also checking that the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS. See also: ndi.time.syncrule/ISVALIDPARAMETERS syncrule - create a new NDI_SYNCRULE for managing synchronization NDI_SYNCRULE_OBJ = ndi.time.syncrule(...) or NDI_SYNCRULE_OBJ = ndi.time.syncrule(PARAMETERS) Creates a new ndi.time.syncrule object with the given PARAMETERS (a structure). This is an abstract class, so PARAMETERS must be empty. Documentation for ndi.time.syncrule/syncrule doc ndi.time.syncrule unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.time.syncrule.unique_id is inherited from superclass did.ido","title":"ndi.time.syncrule"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncrule.m/#class-nditimesyncrule","text":"SYNCRULE - create a new NDI_SYNCRULE for managing synchronization NDI_SYNCRULE_OBJ = ndi.time.syncrule(...) or NDI_SYNCRULE_OBJ = ndi.time.syncrule(PARAMETERS) Creates a new ndi.time.syncrule object with the given PARAMETERS (a structure). This is an abstract class, so PARAMETERS must be empty.","title":"CLASS ndi.time.syncrule"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncrule.m/#superclasses","text":"ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncrule.m/#properties","text":"Property Description parameters identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncrule.m/#methods","text":"Method Description apply apply an ndi.time.syncrule to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule eq are two ndi.time.syncrule objects equal? id return the identifier of an DID.IDO object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule isvalid is a unique ID number valid? isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form syncrule create a new NDI_SYNCRULE for managing synchronization unique_id Generate a unique ID number for DID databases (Static method)","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncrule.m/#methods-help","text":"apply - apply an ndi.time.syncrule to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects [COST, MAPPING] = APPLY(NDI_SYNCRULE_OBJ, EPOCHNODE_A, EPOCHNODE_B) Given an ndi.time.syncrule object and two epochnodes returned from ndi.epoch.epochset/EPOCHNODES this function attempts to identify whether a time synchronization can be made across these epoch nodes. If so, a cost COST and an ndi.time.timemapping object MAPPING is returned. Otherwise, COST and MAPPING are empty. In the abstract class, COST and MAPPING are always empty. See also: ndi.epoch.epochset/EPOCHNODES eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule EC = ELIGIBLECLOCKS(NDI_SYNCRULE_OBJ) Returns a cell array of ndi.time.clocktype objects with types that can be processed by the ndi.time.syncrule. If EC is empty, then no information is conveyed about which ndi.time.clocktype objects is valid (that is, it is not the case that the ndi.time.syncrule processes no types; instead, it has no specific limits). In the abstract class, EC is empty ({}). See also: ndi.time.syncrule/INELIGIBLECLOCKS eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule EES = ELIGIBLEEPOCHSETS(NDI_SYNCRULE_OBJ) Returns a cell array of valid ndi.epoch.epochset subclasses that the rule can process. If EES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes can be processed by the ndi.time.syncrule. (That is, it is not the case that the NDI_SYNCTABLE cannot use any classes.) NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here. The abstract class ndi.time.syncrule always returns empty. See also: ndi.time.syncrule/INELIGIBLEEPOCHSETS eq - are two ndi.time.syncrule objects equal? B = EQ(NDI_SYNCRULE_OBJ_A, NDI_SYNCRULE_OBJ_B) Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal. Otherwise, 0 is returned. id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.time.syncrule/id is inherited from superclass did.ido ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule IC = INELIGIBLECLOCKS(NDI_SYNCRULE_OBJ) Returns a cell array of ndi.time.clocktype objects with types that cannot be processed by the ndi.time.syncrule. If IC is empty, then no information is conveyed about which ndi.time.clocktype objects is valid (that is, it is not the case that the ndi.time.syncrule cannot be used on any types; instead, it has no specific limits). In the abstract class, IC is {ndi.time.clocktype('no_time')} . See also: ndi.time.syncrule/ELIGIBLECLOCKS ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule IES = INELIGIBLEEPOCHSETS(NDI_SYNCRULE_OBJ) Returns a cell array of ndi.epoch.epochset subclasses that the rule cannot process. If IES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes cannot be processed by the ndi.time.syncrule. (That is, it is not the case that the NDI_SYNCTABLE can use any class.) NDI_EPOCHSETS that use the rule must not be members of the classes returned here, but may be descendents of those classes. The abstract class ndi.time.syncrule always returns empty. See also: ndi.time.syncrule/ELIGIBLEEPOCHSETS isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.time.syncrule.isvalid is inherited from superclass did.ido isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule [B,MSG] = ISVALIDPARAMETERS(NDI_SYNCRULE_OBJ, PARAMETERS) Returns 1 if PARAMETERS is a valid parameter structure for ndi.time.syncrule. Returns 0 otherwise. If there is an error, MSG describes the error. See also: ndi.time.syncrule/SETPARAMETERS newdocument - create a new ndi.document for an ndi.time.syncrule object DOC = NEWDOCUMENT(NDI_SYNCRULE_OBJ) Creates an ndi.document object DOC that represents the ndi.time.syncrule object. searchquery - create a search for this ndi.time.syncrule object SQ = SEARCHQUERY(NDI_SYNCRULE_OBJ) Creates a search query for the ndi.time.syncgraph object. setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form NDI_SYNCRULE_OBJ = SETPARAMETERS(NDI_SYNCRULE_OBJ, PARAMETERS) Sets the 'parameters' field of an ndi.time.syncrule object, while also checking that the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS. See also: ndi.time.syncrule/ISVALIDPARAMETERS syncrule - create a new NDI_SYNCRULE for managing synchronization NDI_SYNCRULE_OBJ = ndi.time.syncrule(...) or NDI_SYNCRULE_OBJ = ndi.time.syncrule(PARAMETERS) Creates a new ndi.time.syncrule object with the given PARAMETERS (a structure). This is an abstract class, so PARAMETERS must be empty. Documentation for ndi.time.syncrule/syncrule doc ndi.time.syncrule unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.time.syncrule.unique_id is inherited from superclass did.ido","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timemapping.m/","text":"CLASS ndi.time.timemapping NDI.TIME.TIMEMAPPING - class for managing mapping of time across epochs and devices Describes mapping from one time base to another. The base class, ndi.time.timemapping, provides polynomial mapping, although usually only linear mapping is used. The property MAPPING is a vector of length N+1 that describes the coefficients of a polynomial such that: t_out = mapping(1)*t_in^N + mapping(2)*t_in^(N-1) + ... mapping(N)*t_in + mapping(N+1) Usually, one specifies a linear relationship only, with MAPPING = [scale shift] so that t_out = scale * t_in + shift Superclasses none Properties Property Description mapping mapping parameters; in the ndi.time.timemapping base class, this is a polynomial (see help POLYVAL) Methods Method Description map perform a mapping from one time base to another timemapping ndi.time.timemapping Methods help map - perform a mapping from one time base to another T_OUT = MAP(NDI_TIMEMAPPING_OBJ, T_IN) Perform the mapping described by NDI_TIMEMAPPING_OBJ from one time base to another. In the base class ndi.time.timemapping, the mapping is a polynomial. timemapping - ndi.time.timemapping NDI_TIMEMAPPING_OBJ = ndi.time.timemapping() or NDI_TIMEMAPPING_OBJ = ndi.time.timemapping(MAPPING) Creates a new ndi.time.timemapping object. In this base class, the ndi.time.timemapping object specifies a polynomial mapping from one time base to another. If the function is called with no input arguments, then the trivial mapping MAPPING = [ 1 0 ] is used; this corresponds to the polynomial t_out = 1*t_in + 0. Typically, the mapping is linear, so that MAPPING = [scale shift]. See also: POLYVAL Documentation for ndi.time.timemapping/timemapping doc ndi.time.timemapping","title":"ndi.time.timemapping"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timemapping.m/#class-nditimetimemapping","text":"NDI.TIME.TIMEMAPPING - class for managing mapping of time across epochs and devices Describes mapping from one time base to another. The base class, ndi.time.timemapping, provides polynomial mapping, although usually only linear mapping is used. The property MAPPING is a vector of length N+1 that describes the coefficients of a polynomial such that: t_out = mapping(1)*t_in^N + mapping(2)*t_in^(N-1) + ... mapping(N)*t_in + mapping(N+1) Usually, one specifies a linear relationship only, with MAPPING = [scale shift] so that t_out = scale * t_in + shift","title":"CLASS ndi.time.timemapping"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timemapping.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timemapping.m/#properties","text":"Property Description mapping mapping parameters; in the ndi.time.timemapping base class, this is a polynomial (see help POLYVAL)","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timemapping.m/#methods","text":"Method Description map perform a mapping from one time base to another timemapping ndi.time.timemapping","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timemapping.m/#methods-help","text":"map - perform a mapping from one time base to another T_OUT = MAP(NDI_TIMEMAPPING_OBJ, T_IN) Perform the mapping described by NDI_TIMEMAPPING_OBJ from one time base to another. In the base class ndi.time.timemapping, the mapping is a polynomial. timemapping - ndi.time.timemapping NDI_TIMEMAPPING_OBJ = ndi.time.timemapping() or NDI_TIMEMAPPING_OBJ = ndi.time.timemapping(MAPPING) Creates a new ndi.time.timemapping object. In this base class, the ndi.time.timemapping object specifies a polynomial mapping from one time base to another. If the function is called with no input arguments, then the trivial mapping MAPPING = [ 1 0 ] is used; this corresponds to the polynomial t_out = 1*t_in + 0. Typically, the mapping is linear, so that MAPPING = [scale shift]. See also: POLYVAL Documentation for ndi.time.timemapping/timemapping doc ndi.time.timemapping","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timereference.m/","text":"CLASS ndi.time.timereference NDI.TIME.TIMEREFERENCE - a class for specifying time relative to an NDI_CLOCK Superclasses none Properties Property Description referent the ndi.daq.system, ndi.probe.*,... that is referred to (must be a subclass of ndi.epoch.epochset) clocktype the ndi.time.clocktype: can be 'utc', 'exp_global_time', 'dev_global_time', or 'dev_local_time' epoch the epoch that may be referred to (required if the time type is 'dev_local_time') time the time of the referent that is referred to session_ID the ID of the session that contains the time Methods Method Description ndi_timereference_struct return a structure that describes an ndi.time.timereference object that lacks Matlab objects timereference creates a new time reference object Methods help ndi_timereference_struct - return a structure that describes an ndi.time.timereference object that lacks Matlab objects A = NDI_TIMEREFERENCE_STRUCT(NDI_TIMEREF_OBJ) Returns a structure with the following fields: Fieldname | Description -------------------------------------------------------------------------------- referent_epochsetname | The epochsetname() of the referent referent_classname | The classname of the referent clocktypestring | The value of the clocktype epoch | The epoch (either a string or a number) session_ID | The session ID of the session that contains the epoch time | The time timereference - creates a new time reference object OBJ = NDI.TIME.TIMEREFERENCE(REFERENT, CLOCKTYPE, EPOCH, TIME) Creates a new ndi.time.timereference object. The REFERENT, EPOCH, and TIME must specify a unique time. REFERENT is any subclass of ndi.epoch.epochset object that has a 'session' property (e.g., ndi.daq.system, ndi.element, etc...). TYPE is the time type, can be 'utc', 'exp_global_time', or 'dev_global_time' or 'dev_local_time' If TYPE is 'dev_local_time', then the EPOCH identifier is necessary. Otherwise, it can be empty. If EPOCH is specified, then TIME is taken to be relative to the EPOCH number of the device associated with CLOCK, even if the device keeps universal or time. An alternative creator is available: OBJ = ndi.time.timereference(NDI_SESSION_OBJ, NDI_TIMEREF_STRUCT) where NDI_SESSION_OBJ is an ndi.session and NDI_TIMEREF_STRUCT is a structure returned by ndi.time.timereference/NDI_TIMEREFERENCE_STRUCT. The NDI_SESSION_OBJ fields will be searched to find the live REFERENT to create OBJ. Documentation for ndi.time.timereference/timereference doc ndi.time.timereference","title":"ndi.time.timereference"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timereference.m/#class-nditimetimereference","text":"NDI.TIME.TIMEREFERENCE - a class for specifying time relative to an NDI_CLOCK","title":"CLASS ndi.time.timereference"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timereference.m/#superclasses","text":"none","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timereference.m/#properties","text":"Property Description referent the ndi.daq.system, ndi.probe.*,... that is referred to (must be a subclass of ndi.epoch.epochset) clocktype the ndi.time.clocktype: can be 'utc', 'exp_global_time', 'dev_global_time', or 'dev_local_time' epoch the epoch that may be referred to (required if the time type is 'dev_local_time') time the time of the referent that is referred to session_ID the ID of the session that contains the time","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timereference.m/#methods","text":"Method Description ndi_timereference_struct return a structure that describes an ndi.time.timereference object that lacks Matlab objects timereference creates a new time reference object","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timereference.m/#methods-help","text":"ndi_timereference_struct - return a structure that describes an ndi.time.timereference object that lacks Matlab objects A = NDI_TIMEREFERENCE_STRUCT(NDI_TIMEREF_OBJ) Returns a structure with the following fields: Fieldname | Description -------------------------------------------------------------------------------- referent_epochsetname | The epochsetname() of the referent referent_classname | The classname of the referent clocktypestring | The value of the clocktype epoch | The epoch (either a string or a number) session_ID | The session ID of the session that contains the epoch time | The time timereference - creates a new time reference object OBJ = NDI.TIME.TIMEREFERENCE(REFERENT, CLOCKTYPE, EPOCH, TIME) Creates a new ndi.time.timereference object. The REFERENT, EPOCH, and TIME must specify a unique time. REFERENT is any subclass of ndi.epoch.epochset object that has a 'session' property (e.g., ndi.daq.system, ndi.element, etc...). TYPE is the time type, can be 'utc', 'exp_global_time', or 'dev_global_time' or 'dev_local_time' If TYPE is 'dev_local_time', then the EPOCH identifier is necessary. Otherwise, it can be empty. If EPOCH is specified, then TIME is taken to be relative to the EPOCH number of the device associated with CLOCK, even if the device keeps universal or time. An alternative creator is available: OBJ = ndi.time.timereference(NDI_SESSION_OBJ, NDI_TIMEREF_STRUCT) where NDI_SESSION_OBJ is an ndi.session and NDI_TIMEREF_STRUCT is a structure returned by ndi.time.timereference/NDI_TIMEREFERENCE_STRUCT. The NDI_SESSION_OBJ fields will be searched to find the live REFERENT to create OBJ. Documentation for ndi.time.timereference/timereference doc ndi.time.timereference","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timeseries.m/","text":"CLASS ndi.time.timeseries NDI_TIMESERIES - abstract class for managing time series data Superclasses ndi.documentservice Properties none Methods Method Description newdocument create a new ndi.document based on information in this object readtimeseries read a time series from this parent object (ndi.time.timeseries) samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery create a search query to find this object as an ndi.document times2samples convert from the timeseries time to sample numbers timeseries create an ndi.time.timeseries object Methods help newdocument - create a new ndi.document based on information in this object NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DOCUMENTSERVICE_OBJ) Create a new ndi.document based on information in this class. The base ndi.documentservice class returns empty. Help for ndi.time.timeseries/newdocument is inherited from superclass ndi.documentservice readtimeseries - read a time series from this parent object (ndi.time.timeseries) [DATA, T, TIMEREF] = READTIMESERIES(NDI_TIMESERIES_OBJ, TIMEREF_OR_EPOCH, T0, T1) Reads timeseries data from an ndi.time.timeseries object. The DATA and time information T that are returned depend on the the specific subclass of ndi.time.timeseries that is called (see READTIMESERIESEPOCH). TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the time reference for T0, T1, or it can be a single number, which will indicate the data are to be read from that epoch. DATA is the data for the probe. T is a time structure, in units of TIMEREF if it is an ndi.time.timereference object or in units of the epoch if an epoch is passed. The TIMEREF is returned. samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLERATE(NDI_TIMESERIES_OBJ, EPOCH) Returns the sampling rate of a given ndi.time.timeseries object for the epoch EPOCH. EPOCH can be specified as an index or EPOCH_ID. If NDI_TIMESERIES_OBJ is not regularly sampled, then -1 is returned. samples2times - convert from the timeseries time to sample numbers SAMPLES = SAMPLES2TIMES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. TODO: convert times to dev_local_clock searchquery - create a search query to find this object as an ndi.document SQ = SEARCHQUERY(NDI_DOCUMENTSERVICE_OBJ) Return a search query that can be used to find this object's representation as an ndi.document. The base class ndi.documentservice just returns empty. Help for ndi.time.timeseries/searchquery is inherited from superclass ndi.documentservice times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. timeseries - create an ndi.time.timeseries object NDI_TIMESERIES_OBJ = ndi.time.timeseries() This function creates an ndi.time.timeseries object, which is an abstract class that defines methods for other objects that deal with time series. Documentation for ndi.time.timeseries/timeseries doc ndi.time.timeseries","title":"ndi.time.timeseries"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timeseries.m/#class-nditimetimeseries","text":"NDI_TIMESERIES - abstract class for managing time series data","title":"CLASS ndi.time.timeseries"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timeseries.m/#superclasses","text":"ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timeseries.m/#properties","text":"none","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timeseries.m/#methods","text":"Method Description newdocument create a new ndi.document based on information in this object readtimeseries read a time series from this parent object (ndi.time.timeseries) samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery create a search query to find this object as an ndi.document times2samples convert from the timeseries time to sample numbers timeseries create an ndi.time.timeseries object","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timeseries.m/#methods-help","text":"newdocument - create a new ndi.document based on information in this object NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DOCUMENTSERVICE_OBJ) Create a new ndi.document based on information in this class. The base ndi.documentservice class returns empty. Help for ndi.time.timeseries/newdocument is inherited from superclass ndi.documentservice readtimeseries - read a time series from this parent object (ndi.time.timeseries) [DATA, T, TIMEREF] = READTIMESERIES(NDI_TIMESERIES_OBJ, TIMEREF_OR_EPOCH, T0, T1) Reads timeseries data from an ndi.time.timeseries object. The DATA and time information T that are returned depend on the the specific subclass of ndi.time.timeseries that is called (see READTIMESERIESEPOCH). TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the time reference for T0, T1, or it can be a single number, which will indicate the data are to be read from that epoch. DATA is the data for the probe. T is a time structure, in units of TIMEREF if it is an ndi.time.timereference object or in units of the epoch if an epoch is passed. The TIMEREF is returned. samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLERATE(NDI_TIMESERIES_OBJ, EPOCH) Returns the sampling rate of a given ndi.time.timeseries object for the epoch EPOCH. EPOCH can be specified as an index or EPOCH_ID. If NDI_TIMESERIES_OBJ is not regularly sampled, then -1 is returned. samples2times - convert from the timeseries time to sample numbers SAMPLES = SAMPLES2TIMES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. TODO: convert times to dev_local_clock searchquery - create a search query to find this object as an ndi.document SQ = SEARCHQUERY(NDI_DOCUMENTSERVICE_OBJ) Return a search query that can be used to find this object's representation as an ndi.document. The base class ndi.documentservice just returns empty. Help for ndi.time.timeseries/searchquery is inherited from superclass ndi.documentservice times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES(NDI_TIMESERIES_OBJ, EPOCH, TIMES) For a given ndi.time.timeseries object and a recording epoch EPOCH, return the sample index numbers SAMPLE that corresponds to the times TIMES. The first sample in the epoch is 1. The TIMES requested might be out of bounds of the EPOCH; no checking is performed. timeseries - create an ndi.time.timeseries object NDI_TIMESERIES_OBJ = ndi.time.timeseries() This function creates an ndi.time.timeseries object, which is an abstract class that defines methods for other objects that deal with time series. Documentation for ndi.time.timeseries/timeseries doc ndi.time.timeseries","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bfun/samples2times.m/","text":"ndi.time.fun.samples2times SAMPLES2TIMES - convert sample index numbers/sample numbers to sample times T = SAMPLES2TIMES(S, T0_T1, SR) Given the index numbers of samples in vector S, and a range of times in the recording T0_T1 = [ T0 T1 ], and a fixed sample rate SR, calculate the time of each sample S. S(i) is the sample index number of T(i).","title":"ndi.time.fun.samples2times"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bfun/samples2times.m/#nditimefunsamples2times","text":"SAMPLES2TIMES - convert sample index numbers/sample numbers to sample times T = SAMPLES2TIMES(S, T0_T1, SR) Given the index numbers of samples in vector S, and a range of times in the recording T0_T1 = [ T0 T1 ], and a fixed sample rate SR, calculate the time of each sample S. S(i) is the sample index number of T(i).","title":"ndi.time.fun.samples2times"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bfun/times2samples.m/","text":"ndi.time.fun.times2samples TIMES2SAMPLES - convert sample times to sample index numbers / sample numbers S = TIMES2SAMPLES(T, T0_T1, SR) Given the times of samples in vector T, and a range of times in the recording T0_T1 = [ T0 T1 ], and a fixed sample rate SR, calculate the index number of each sample S. S(i) is the sample index number of T(i).","title":"ndi.time.fun.times2samples"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bfun/times2samples.m/#nditimefuntimes2samples","text":"TIMES2SAMPLES - convert sample times to sample index numbers / sample numbers S = TIMES2SAMPLES(T, T0_T1, SR) Given the times of samples in vector T, and a range of times in the recording T0_T1 = [ T0 T1 ], and a fixed sample rate SR, calculate the index number of each sample S. S(i) is the sample index number of T(i).","title":"ndi.time.fun.times2samples"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/commontriggers.m/","text":"CLASS ndi.time.syncrule.commontriggers COMMONTRIGGERS - create a new ndi.time.syncrule.commontriggers for managing synchronization NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi.time.syncrule.commontriggers() or NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi.time.syncrule.commontriggers(PARAMETERS) Creates a new ndi.time.syncrule.commontriggers object with the given PARAMETERS (a structure, see below). If no inputs are provided, then the default PARAMETERS (see below) is used. PARAMETERS should be a structure with the following entries: Field (default) | Description ------------------------------------------------------------------- daqsystem1 | The name of the first daq system channel_daq1 | The channel on the first daq system daqsystem2 | The name of the second daq system channel_daq2 | The channel on the second daq system number_fullpath_matches | Number fullpath file matches that need to be true to check channels Superclasses ndi.time.syncrule , ndi.ido , did.ido , ndi.documentservice Properties Property Description parameters identifier Methods Method Description apply apply an ndi.time.syncrule.commontriggers to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects commontriggers create a new ndi.time.syncrule.commontriggers for managing synchronization eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers eq are two ndi.time.syncrule objects equal? id return the identifier of an DID.IDO object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers isvalid is a unique ID number valid? isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule.commontriggers newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form unique_id Generate a unique ID number for DID databases (Static method) Methods help apply - apply an ndi.time.syncrule.commontriggers to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects [COST, MAPPING] = APPLY(NDI_SYNCRULE_COMMONTRIGGERS_OBJ, EPOCHNODE_A, EPOCHNODE_B) Given an ndi.time.syncrule.commontriggers object and two EPOCHNODES (see ndi.epoch.epochset/EPOCHNODES), this function attempts to identify whether a time synchronization can be made across these epochs. If so, a cost COST and an ndi.time.timemapping object MAPPING is returned. Otherwise, COST and MAPPING are empty. commontriggers - create a new ndi.time.syncrule.commontriggers for managing synchronization NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi.time.syncrule.commontriggers() or NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi.time.syncrule.commontriggers(PARAMETERS) Creates a new ndi.time.syncrule.commontriggers object with the given PARAMETERS (a structure, see below). If no inputs are provided, then the default PARAMETERS (see below) is used. PARAMETERS should be a structure with the following entries: Field (default) | Description ------------------------------------------------------------------- daqsystem1 | The name of the first daq system channel_daq1 | The channel on the first daq system daqsystem2 | The name of the second daq system channel_daq2 | The channel on the second daq system number_fullpath_matches | Number fullpath file matches that need to be true to check channels Documentation for ndi.time.syncrule.commontriggers/commontriggers doc ndi.time.syncrule.commontriggers eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule EC = ELIGIBLECLOCKS(NDI_SYNCRULE_OBJ) Returns a cell array of ndi.time.clocktype objects with types that can be processed by the ndi.time.syncrule. If EC is empty, then no information is conveyed about which ndi.time.clocktype objects is valid (that is, it is not the case that the ndi.time.syncrule processes no types; instead, it has no specific limits). In the abstract class, EC is empty ({}). See also: ndi.time.syncrule.commontriggers/INELIGIBLECLOCKS Help for ndi.time.syncrule.commontriggers/eligibleclocks is inherited from superclass ndi.time.syncrule eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers EES = ELIGIBLEEPOCHSETS(NDI_SYNCRULE_COMMONTRIGGERS_OBJ) Returns a cell array of valid ndi.epoch.epochset subclasses that the rule can process. If EES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes can be processed by the ndi.time.syncrule.commontriggers. (That is, it is not the case that the NDI_SYNCTABLE cannot use any classes.) ndi.time.syncrule.commontriggers returns {'ndi.daq.system'} (it works with ndi.daq.system objects). NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here. See also: ndi.time.syncrule.commontriggers/INELIGIBLEEPOCHSETS eq - are two ndi.time.syncrule objects equal? B = EQ(NDI_SYNCRULE_OBJ_A, NDI_SYNCRULE_OBJ_B) Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal. Otherwise, 0 is returned. Help for ndi.time.syncrule.commontriggers/eq is inherited from superclass ndi.time.syncrule id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.time.syncrule.commontriggers/id is inherited from superclass did.ido ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule IC = INELIGIBLECLOCKS(NDI_SYNCRULE_OBJ) Returns a cell array of ndi.time.clocktype objects with types that cannot be processed by the ndi.time.syncrule. If IC is empty, then no information is conveyed about which ndi.time.clocktype objects is valid (that is, it is not the case that the ndi.time.syncrule cannot be used on any types; instead, it has no specific limits). In the abstract class, IC is {ndi.time.clocktype('no_time')} . See also: ndi.time.syncrule.commontriggers/ELIGIBLECLOCKS Help for ndi.time.syncrule.commontriggers/ineligibleclocks is inherited from superclass ndi.time.syncrule ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers IES = INELIGIBLEEPOCHSETS(NDI_SYNCRULE_COMMONTRIGGERS_OBJ) Returns a cell array of ndi.epoch.epochset subclasses that the rule cannot process. If IES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes cannot be processed by the ndi.time.syncrule.commontriggers. (That is, it is not the case that the NDI_SYNCTABLE can use any class.) ndi.time.syncrule.commontriggers does not work with ndi.epoch.epochset, NDI_EPOCHSETPARAM, or ndi.file.navigator classes. NDI_EPOCHSETS that use the rule must not be members of the classes returned here, but may be descendents of those classes. See also: ndi.time.syncrule.commontriggers/ELIGIBLEEPOCHSETS isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.time.syncrule.commontriggers.isvalid is inherited from superclass did.ido isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule.commontriggers [B,MSG] = ISVALIDPARAMETERS(NDI_SYNCRULE_COMMONTRIGGERS_OBJ, PARAMETERS) Returns 1 if PARAMETERS is a valid parameter structure for ndi.time.syncrule.commontriggers. Returns 0 otherwise. If there is an error, MSG contains an error message. PARAMETERS should be a structure with the following entries: Field (default) | Description ------------------------------------------------------------------- number_fullpath_matches (2) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match. See also: ndi.time.syncrule/SETPARAMETERS newdocument - create a new ndi.document for an ndi.time.syncrule object DOC = NEWDOCUMENT(NDI_SYNCRULE_OBJ) Creates an ndi.document object DOC that represents the ndi.time.syncrule object. Help for ndi.time.syncrule.commontriggers/newdocument is inherited from superclass ndi.time.syncrule searchquery - create a search for this ndi.time.syncrule object SQ = SEARCHQUERY(NDI_SYNCRULE_OBJ) Creates a search query for the ndi.time.syncgraph object. Help for ndi.time.syncrule.commontriggers/searchquery is inherited from superclass ndi.time.syncrule setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form NDI_SYNCRULE_OBJ = SETPARAMETERS(NDI_SYNCRULE_OBJ, PARAMETERS) Sets the 'parameters' field of an ndi.time.syncrule object, while also checking that the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS. See also: ndi.time.syncrule.commontriggers/ISVALIDPARAMETERS Help for ndi.time.syncrule.commontriggers/setparameters is inherited from superclass ndi.time.syncrule unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.time.syncrule.commontriggers.unique_id is inherited from superclass did.ido","title":"ndi.time.syncrule.commontriggers"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/commontriggers.m/#class-nditimesyncrulecommontriggers","text":"COMMONTRIGGERS - create a new ndi.time.syncrule.commontriggers for managing synchronization NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi.time.syncrule.commontriggers() or NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi.time.syncrule.commontriggers(PARAMETERS) Creates a new ndi.time.syncrule.commontriggers object with the given PARAMETERS (a structure, see below). If no inputs are provided, then the default PARAMETERS (see below) is used. PARAMETERS should be a structure with the following entries: Field (default) | Description ------------------------------------------------------------------- daqsystem1 | The name of the first daq system channel_daq1 | The channel on the first daq system daqsystem2 | The name of the second daq system channel_daq2 | The channel on the second daq system number_fullpath_matches | Number fullpath file matches that need to be true to check channels","title":"CLASS ndi.time.syncrule.commontriggers"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/commontriggers.m/#superclasses","text":"ndi.time.syncrule , ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/commontriggers.m/#properties","text":"Property Description parameters identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/commontriggers.m/#methods","text":"Method Description apply apply an ndi.time.syncrule.commontriggers to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects commontriggers create a new ndi.time.syncrule.commontriggers for managing synchronization eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers eq are two ndi.time.syncrule objects equal? id return the identifier of an DID.IDO object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers isvalid is a unique ID number valid? isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule.commontriggers newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form unique_id Generate a unique ID number for DID databases (Static method)","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/commontriggers.m/#methods-help","text":"apply - apply an ndi.time.syncrule.commontriggers to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects [COST, MAPPING] = APPLY(NDI_SYNCRULE_COMMONTRIGGERS_OBJ, EPOCHNODE_A, EPOCHNODE_B) Given an ndi.time.syncrule.commontriggers object and two EPOCHNODES (see ndi.epoch.epochset/EPOCHNODES), this function attempts to identify whether a time synchronization can be made across these epochs. If so, a cost COST and an ndi.time.timemapping object MAPPING is returned. Otherwise, COST and MAPPING are empty. commontriggers - create a new ndi.time.syncrule.commontriggers for managing synchronization NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi.time.syncrule.commontriggers() or NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi.time.syncrule.commontriggers(PARAMETERS) Creates a new ndi.time.syncrule.commontriggers object with the given PARAMETERS (a structure, see below). If no inputs are provided, then the default PARAMETERS (see below) is used. PARAMETERS should be a structure with the following entries: Field (default) | Description ------------------------------------------------------------------- daqsystem1 | The name of the first daq system channel_daq1 | The channel on the first daq system daqsystem2 | The name of the second daq system channel_daq2 | The channel on the second daq system number_fullpath_matches | Number fullpath file matches that need to be true to check channels Documentation for ndi.time.syncrule.commontriggers/commontriggers doc ndi.time.syncrule.commontriggers eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule EC = ELIGIBLECLOCKS(NDI_SYNCRULE_OBJ) Returns a cell array of ndi.time.clocktype objects with types that can be processed by the ndi.time.syncrule. If EC is empty, then no information is conveyed about which ndi.time.clocktype objects is valid (that is, it is not the case that the ndi.time.syncrule processes no types; instead, it has no specific limits). In the abstract class, EC is empty ({}). See also: ndi.time.syncrule.commontriggers/INELIGIBLECLOCKS Help for ndi.time.syncrule.commontriggers/eligibleclocks is inherited from superclass ndi.time.syncrule eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers EES = ELIGIBLEEPOCHSETS(NDI_SYNCRULE_COMMONTRIGGERS_OBJ) Returns a cell array of valid ndi.epoch.epochset subclasses that the rule can process. If EES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes can be processed by the ndi.time.syncrule.commontriggers. (That is, it is not the case that the NDI_SYNCTABLE cannot use any classes.) ndi.time.syncrule.commontriggers returns {'ndi.daq.system'} (it works with ndi.daq.system objects). NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here. See also: ndi.time.syncrule.commontriggers/INELIGIBLEEPOCHSETS eq - are two ndi.time.syncrule objects equal? B = EQ(NDI_SYNCRULE_OBJ_A, NDI_SYNCRULE_OBJ_B) Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal. Otherwise, 0 is returned. Help for ndi.time.syncrule.commontriggers/eq is inherited from superclass ndi.time.syncrule id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.time.syncrule.commontriggers/id is inherited from superclass did.ido ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule IC = INELIGIBLECLOCKS(NDI_SYNCRULE_OBJ) Returns a cell array of ndi.time.clocktype objects with types that cannot be processed by the ndi.time.syncrule. If IC is empty, then no information is conveyed about which ndi.time.clocktype objects is valid (that is, it is not the case that the ndi.time.syncrule cannot be used on any types; instead, it has no specific limits). In the abstract class, IC is {ndi.time.clocktype('no_time')} . See also: ndi.time.syncrule.commontriggers/ELIGIBLECLOCKS Help for ndi.time.syncrule.commontriggers/ineligibleclocks is inherited from superclass ndi.time.syncrule ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers IES = INELIGIBLEEPOCHSETS(NDI_SYNCRULE_COMMONTRIGGERS_OBJ) Returns a cell array of ndi.epoch.epochset subclasses that the rule cannot process. If IES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes cannot be processed by the ndi.time.syncrule.commontriggers. (That is, it is not the case that the NDI_SYNCTABLE can use any class.) ndi.time.syncrule.commontriggers does not work with ndi.epoch.epochset, NDI_EPOCHSETPARAM, or ndi.file.navigator classes. NDI_EPOCHSETS that use the rule must not be members of the classes returned here, but may be descendents of those classes. See also: ndi.time.syncrule.commontriggers/ELIGIBLEEPOCHSETS isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.time.syncrule.commontriggers.isvalid is inherited from superclass did.ido isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule.commontriggers [B,MSG] = ISVALIDPARAMETERS(NDI_SYNCRULE_COMMONTRIGGERS_OBJ, PARAMETERS) Returns 1 if PARAMETERS is a valid parameter structure for ndi.time.syncrule.commontriggers. Returns 0 otherwise. If there is an error, MSG contains an error message. PARAMETERS should be a structure with the following entries: Field (default) | Description ------------------------------------------------------------------- number_fullpath_matches (2) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match. See also: ndi.time.syncrule/SETPARAMETERS newdocument - create a new ndi.document for an ndi.time.syncrule object DOC = NEWDOCUMENT(NDI_SYNCRULE_OBJ) Creates an ndi.document object DOC that represents the ndi.time.syncrule object. Help for ndi.time.syncrule.commontriggers/newdocument is inherited from superclass ndi.time.syncrule searchquery - create a search for this ndi.time.syncrule object SQ = SEARCHQUERY(NDI_SYNCRULE_OBJ) Creates a search query for the ndi.time.syncgraph object. Help for ndi.time.syncrule.commontriggers/searchquery is inherited from superclass ndi.time.syncrule setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form NDI_SYNCRULE_OBJ = SETPARAMETERS(NDI_SYNCRULE_OBJ, PARAMETERS) Sets the 'parameters' field of an ndi.time.syncrule object, while also checking that the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS. See also: ndi.time.syncrule.commontriggers/ISVALIDPARAMETERS Help for ndi.time.syncrule.commontriggers/setparameters is inherited from superclass ndi.time.syncrule unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.time.syncrule.commontriggers.unique_id is inherited from superclass did.ido","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filefind.m/","text":"CLASS ndi.time.syncrule.filefind NDI.TIME.SYNCRULE.FILEFIND - create a new ndi.time.syncrule.filefind for managing synchronization NDI_SYNCRULE_FILEFIND_OBJ = ndi.time.syncrule.filefind() or NDI_SYNCRULE_FILEFIND_OBJ = ndi.time.syncrule.filefind(PARAMETERS) Creates a new ndi.time.syncrule.filefind object with the given PARAMETERS (a structure, see below). If no inputs are provided, then the default PARAMETERS (see below) is used. PARAMETERS should be a structure with the following entries: Field (default) | Description ------------------------------------------------------------------- number_fullpath_matches (1) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match. syncfilename ('syncfile.txt')| The text synchronization file to find | This file should have 2 numbers in it; a shift and a scale. | TimeOnDaqSystem2 = shift + scale * TimeOnDaqSystem1 | This file should be in the second daq system's epoch files. daqsystem1 ('mydaq1') | The name of the first daq system daqsystem2 ('mydaq2') | The name of the second daq system Superclasses ndi.time.syncrule , ndi.ido , did.ido , ndi.documentservice Properties Property Description parameters identifier Methods Method Description apply apply an ndi.time.syncrule.filefind to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind eq are two ndi.time.syncrule objects equal? filefind create a new ndi.time.syncrule.filefind for managing synchronization id return the identifier of an DID.IDO object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind isvalid is a unique ID number valid? isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule.filefind newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form unique_id Generate a unique ID number for DID databases (Static method) Methods help apply - apply an ndi.time.syncrule.filefind to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects [COST, MAPPING] = APPLY(NDI_SYNCRULE_FILEFIND_OBJ, EPOCHNODE_A, EPOCHNODE_B) Given an ndi.time.syncrule.filefind object and two EPOCHNODES (see ndi.epoch.epochset/EPOCHNODES), this function attempts to identify whether a time synchronization can be made across these epochs. If so, a cost COST and an ndi.time.timemapping object MAPPING is returned. Otherwise, COST and MAPPING are empty. eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule EC = ELIGIBLECLOCKS(NDI_SYNCRULE_OBJ) Returns a cell array of ndi.time.clocktype objects with types that can be processed by the ndi.time.syncrule. If EC is empty, then no information is conveyed about which ndi.time.clocktype objects is valid (that is, it is not the case that the ndi.time.syncrule processes no types; instead, it has no specific limits). In the abstract class, EC is empty ({}). See also: ndi.time.syncrule.filefind/INELIGIBLECLOCKS Help for ndi.time.syncrule.filefind/eligibleclocks is inherited from superclass ndi.time.syncrule eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind EES = ELIGIBLEEPOCHSETS(NDI_SYNCRULE_FILEFIND_OBJ) Returns a cell array of valid ndi.epoch.epochset subclasses that the rule can process. If EES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes can be processed by the ndi.time.syncrule.filefind. (That is, it is not the case that the NDI_SYNCTABLE cannot use any classes.) ndi.time.syncrule.filefind returns {'ndi.daq.system'} (it works with ndi.daq.system objects). NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here. See also: ndi.time.syncrule.filefind/INELIGIBLEEPOCHSETS eq - are two ndi.time.syncrule objects equal? B = EQ(NDI_SYNCRULE_OBJ_A, NDI_SYNCRULE_OBJ_B) Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal. Otherwise, 0 is returned. Help for ndi.time.syncrule.filefind/eq is inherited from superclass ndi.time.syncrule filefind - create a new ndi.time.syncrule.filefind for managing synchronization NDI_SYNCRULE_FILEFIND_OBJ = ndi.time.syncrule.filefind() or NDI_SYNCRULE_FILEFIND_OBJ = ndi.time.syncrule.filefind(PARAMETERS) Creates a new ndi.time.syncrule.filefind object with the given PARAMETERS (a structure, see below). If no inputs are provided, then the default PARAMETERS (see below) is used. PARAMETERS should be a structure with the following entries: Field (default) | Description ------------------------------------------------------------------- number_fullpath_matches (1) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match. syncfilename ('syncfile.txt')| The text synchronization file to find | This file should have 2 numbers in it; a shift and a scale. | TimeOnDaqSystem2 = shift + scale * TimeOnDaqSystem1 | This file should be in the second daq system's epoch files. daqsystem1 ('mydaq1') | The name of the first daq system daqsystem2 ('mydaq2') | The name of the second daq system Documentation for ndi.time.syncrule.filefind/filefind doc ndi.time.syncrule.filefind id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.time.syncrule.filefind/id is inherited from superclass did.ido ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule IC = INELIGIBLECLOCKS(NDI_SYNCRULE_OBJ) Returns a cell array of ndi.time.clocktype objects with types that cannot be processed by the ndi.time.syncrule. If IC is empty, then no information is conveyed about which ndi.time.clocktype objects is valid (that is, it is not the case that the ndi.time.syncrule cannot be used on any types; instead, it has no specific limits). In the abstract class, IC is {ndi.time.clocktype('no_time')} . See also: ndi.time.syncrule.filefind/ELIGIBLECLOCKS Help for ndi.time.syncrule.filefind/ineligibleclocks is inherited from superclass ndi.time.syncrule ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind IES = INELIGIBLEEPOCHSETS(NDI_SYNCRULE_FILEFIND_OBJ) Returns a cell array of ndi.epoch.epochset subclasses that the rule cannot process. If IES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes cannot be processed by the ndi.time.syncrule.filefind. (That is, it is not the case that the NDI_SYNCTABLE can use any class.) ndi.time.syncrule.filefind does not work with ndi.epoch.epochset, NDI_EPOCHSETPARAM, or ndi.file.navigator classes. NDI_EPOCHSETS that use the rule must not be members of the classes returned here, but may be descendents of those classes. See also: ndi.time.syncrule.filefind/ELIGIBLEEPOCHSETS isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.time.syncrule.filefind.isvalid is inherited from superclass did.ido isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule.filefind [B,MSG] = ISVALIDPARAMETERS(NDI_SYNCRULE_FILEFIND_OBJ, PARAMETERS) Returns 1 if PARAMETERS is a valid parameter structure for ndi.time.syncrule.filefind. Returns 0 otherwise. If there is an error, MSG contains an error message. PARAMETERS should be a structure with the following entries: Field (default) | Description ------------------------------------------------------------------- number_fullpath_matches (2) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match. See also: ndi.time.syncrule/SETPARAMETERS newdocument - create a new ndi.document for an ndi.time.syncrule object DOC = NEWDOCUMENT(NDI_SYNCRULE_OBJ) Creates an ndi.document object DOC that represents the ndi.time.syncrule object. Help for ndi.time.syncrule.filefind/newdocument is inherited from superclass ndi.time.syncrule searchquery - create a search for this ndi.time.syncrule object SQ = SEARCHQUERY(NDI_SYNCRULE_OBJ) Creates a search query for the ndi.time.syncgraph object. Help for ndi.time.syncrule.filefind/searchquery is inherited from superclass ndi.time.syncrule setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form NDI_SYNCRULE_OBJ = SETPARAMETERS(NDI_SYNCRULE_OBJ, PARAMETERS) Sets the 'parameters' field of an ndi.time.syncrule object, while also checking that the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS. See also: ndi.time.syncrule.filefind/ISVALIDPARAMETERS Help for ndi.time.syncrule.filefind/setparameters is inherited from superclass ndi.time.syncrule unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.time.syncrule.filefind.unique_id is inherited from superclass did.ido","title":"ndi.time.syncrule.filefind"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filefind.m/#class-nditimesyncrulefilefind","text":"NDI.TIME.SYNCRULE.FILEFIND - create a new ndi.time.syncrule.filefind for managing synchronization NDI_SYNCRULE_FILEFIND_OBJ = ndi.time.syncrule.filefind() or NDI_SYNCRULE_FILEFIND_OBJ = ndi.time.syncrule.filefind(PARAMETERS) Creates a new ndi.time.syncrule.filefind object with the given PARAMETERS (a structure, see below). If no inputs are provided, then the default PARAMETERS (see below) is used. PARAMETERS should be a structure with the following entries: Field (default) | Description ------------------------------------------------------------------- number_fullpath_matches (1) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match. syncfilename ('syncfile.txt')| The text synchronization file to find | This file should have 2 numbers in it; a shift and a scale. | TimeOnDaqSystem2 = shift + scale * TimeOnDaqSystem1 | This file should be in the second daq system's epoch files. daqsystem1 ('mydaq1') | The name of the first daq system daqsystem2 ('mydaq2') | The name of the second daq system","title":"CLASS ndi.time.syncrule.filefind"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filefind.m/#superclasses","text":"ndi.time.syncrule , ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filefind.m/#properties","text":"Property Description parameters identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filefind.m/#methods","text":"Method Description apply apply an ndi.time.syncrule.filefind to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind eq are two ndi.time.syncrule objects equal? filefind create a new ndi.time.syncrule.filefind for managing synchronization id return the identifier of an DID.IDO object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind isvalid is a unique ID number valid? isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule.filefind newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form unique_id Generate a unique ID number for DID databases (Static method)","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filefind.m/#methods-help","text":"apply - apply an ndi.time.syncrule.filefind to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects [COST, MAPPING] = APPLY(NDI_SYNCRULE_FILEFIND_OBJ, EPOCHNODE_A, EPOCHNODE_B) Given an ndi.time.syncrule.filefind object and two EPOCHNODES (see ndi.epoch.epochset/EPOCHNODES), this function attempts to identify whether a time synchronization can be made across these epochs. If so, a cost COST and an ndi.time.timemapping object MAPPING is returned. Otherwise, COST and MAPPING are empty. eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule EC = ELIGIBLECLOCKS(NDI_SYNCRULE_OBJ) Returns a cell array of ndi.time.clocktype objects with types that can be processed by the ndi.time.syncrule. If EC is empty, then no information is conveyed about which ndi.time.clocktype objects is valid (that is, it is not the case that the ndi.time.syncrule processes no types; instead, it has no specific limits). In the abstract class, EC is empty ({}). See also: ndi.time.syncrule.filefind/INELIGIBLECLOCKS Help for ndi.time.syncrule.filefind/eligibleclocks is inherited from superclass ndi.time.syncrule eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind EES = ELIGIBLEEPOCHSETS(NDI_SYNCRULE_FILEFIND_OBJ) Returns a cell array of valid ndi.epoch.epochset subclasses that the rule can process. If EES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes can be processed by the ndi.time.syncrule.filefind. (That is, it is not the case that the NDI_SYNCTABLE cannot use any classes.) ndi.time.syncrule.filefind returns {'ndi.daq.system'} (it works with ndi.daq.system objects). NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here. See also: ndi.time.syncrule.filefind/INELIGIBLEEPOCHSETS eq - are two ndi.time.syncrule objects equal? B = EQ(NDI_SYNCRULE_OBJ_A, NDI_SYNCRULE_OBJ_B) Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal. Otherwise, 0 is returned. Help for ndi.time.syncrule.filefind/eq is inherited from superclass ndi.time.syncrule filefind - create a new ndi.time.syncrule.filefind for managing synchronization NDI_SYNCRULE_FILEFIND_OBJ = ndi.time.syncrule.filefind() or NDI_SYNCRULE_FILEFIND_OBJ = ndi.time.syncrule.filefind(PARAMETERS) Creates a new ndi.time.syncrule.filefind object with the given PARAMETERS (a structure, see below). If no inputs are provided, then the default PARAMETERS (see below) is used. PARAMETERS should be a structure with the following entries: Field (default) | Description ------------------------------------------------------------------- number_fullpath_matches (1) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match. syncfilename ('syncfile.txt')| The text synchronization file to find | This file should have 2 numbers in it; a shift and a scale. | TimeOnDaqSystem2 = shift + scale * TimeOnDaqSystem1 | This file should be in the second daq system's epoch files. daqsystem1 ('mydaq1') | The name of the first daq system daqsystem2 ('mydaq2') | The name of the second daq system Documentation for ndi.time.syncrule.filefind/filefind doc ndi.time.syncrule.filefind id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.time.syncrule.filefind/id is inherited from superclass did.ido ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule IC = INELIGIBLECLOCKS(NDI_SYNCRULE_OBJ) Returns a cell array of ndi.time.clocktype objects with types that cannot be processed by the ndi.time.syncrule. If IC is empty, then no information is conveyed about which ndi.time.clocktype objects is valid (that is, it is not the case that the ndi.time.syncrule cannot be used on any types; instead, it has no specific limits). In the abstract class, IC is {ndi.time.clocktype('no_time')} . See also: ndi.time.syncrule.filefind/ELIGIBLECLOCKS Help for ndi.time.syncrule.filefind/ineligibleclocks is inherited from superclass ndi.time.syncrule ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind IES = INELIGIBLEEPOCHSETS(NDI_SYNCRULE_FILEFIND_OBJ) Returns a cell array of ndi.epoch.epochset subclasses that the rule cannot process. If IES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes cannot be processed by the ndi.time.syncrule.filefind. (That is, it is not the case that the NDI_SYNCTABLE can use any class.) ndi.time.syncrule.filefind does not work with ndi.epoch.epochset, NDI_EPOCHSETPARAM, or ndi.file.navigator classes. NDI_EPOCHSETS that use the rule must not be members of the classes returned here, but may be descendents of those classes. See also: ndi.time.syncrule.filefind/ELIGIBLEEPOCHSETS isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.time.syncrule.filefind.isvalid is inherited from superclass did.ido isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule.filefind [B,MSG] = ISVALIDPARAMETERS(NDI_SYNCRULE_FILEFIND_OBJ, PARAMETERS) Returns 1 if PARAMETERS is a valid parameter structure for ndi.time.syncrule.filefind. Returns 0 otherwise. If there is an error, MSG contains an error message. PARAMETERS should be a structure with the following entries: Field (default) | Description ------------------------------------------------------------------- number_fullpath_matches (2) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match. See also: ndi.time.syncrule/SETPARAMETERS newdocument - create a new ndi.document for an ndi.time.syncrule object DOC = NEWDOCUMENT(NDI_SYNCRULE_OBJ) Creates an ndi.document object DOC that represents the ndi.time.syncrule object. Help for ndi.time.syncrule.filefind/newdocument is inherited from superclass ndi.time.syncrule searchquery - create a search for this ndi.time.syncrule object SQ = SEARCHQUERY(NDI_SYNCRULE_OBJ) Creates a search query for the ndi.time.syncgraph object. Help for ndi.time.syncrule.filefind/searchquery is inherited from superclass ndi.time.syncrule setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form NDI_SYNCRULE_OBJ = SETPARAMETERS(NDI_SYNCRULE_OBJ, PARAMETERS) Sets the 'parameters' field of an ndi.time.syncrule object, while also checking that the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS. See also: ndi.time.syncrule.filefind/ISVALIDPARAMETERS Help for ndi.time.syncrule.filefind/setparameters is inherited from superclass ndi.time.syncrule unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.time.syncrule.filefind.unique_id is inherited from superclass did.ido","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filematch.m/","text":"CLASS ndi.time.syncrule.filematch FILEMATCH - create a new ndi.time.syncrule.filematch for managing synchronization NDI_SYNCRULE_FILEMATCH_OBJ = ndi.time.syncrule.filematch() or NDI_SYNCRULE_FILEMATCH_OBJ = ndi.time.syncrule.filematch(PARAMETERS) Creates a new ndi.time.syncrule.filematch object with the given PARAMETERS (a structure, see below). If no inputs are provided, then the default PARAMETERS (see below) is used. PARAMETERS should be a structure with the following entries: Field (default) | Description ------------------------------------------------------------------- number_fullpath_matches (2) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match. Superclasses ndi.time.syncrule , ndi.ido , did.ido , ndi.documentservice Properties Property Description parameters identifier Methods Method Description apply apply an ndi.time.syncrule.filematch to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch eq are two ndi.time.syncrule objects equal? filematch create a new ndi.time.syncrule.filematch for managing synchronization id return the identifier of an DID.IDO object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch isvalid is a unique ID number valid? isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule.filematch newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form unique_id Generate a unique ID number for DID databases (Static method) Methods help apply - apply an ndi.time.syncrule.filematch to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects [COST, MAPPING] = APPLY(NDI_SYNCRULE_FILEMATCH_OBJ, EPOCHNODE_A, EPOCHNODE_B) Given an ndi.time.syncrule.filematch object and two EPOCHNODES (see ndi.epoch.epochset/EPOCHNODES), this function attempts to identify whether a time synchronization can be made across these epochs. If so, a cost COST and an ndi.time.timemapping object MAPPING is returned. Otherwise, COST and MAPPING are empty. eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule EC = ELIGIBLECLOCKS(NDI_SYNCRULE_OBJ) Returns a cell array of ndi.time.clocktype objects with types that can be processed by the ndi.time.syncrule. If EC is empty, then no information is conveyed about which ndi.time.clocktype objects is valid (that is, it is not the case that the ndi.time.syncrule processes no types; instead, it has no specific limits). In the abstract class, EC is empty ({}). See also: ndi.time.syncrule.filematch/INELIGIBLECLOCKS Help for ndi.time.syncrule.filematch/eligibleclocks is inherited from superclass ndi.time.syncrule eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch EES = ELIGIBLEEPOCHSETS(NDI_SYNCRULE_FILEMATCH_OBJ) Returns a cell array of valid ndi.epoch.epochset subclasses that the rule can process. If EES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes can be processed by the ndi.time.syncrule.filematch. (That is, it is not the case that the NDI_SYNCTABLE cannot use any classes.) ndi.time.syncrule.filematch returns {'ndi.daq.system'} (it works with ndi.daq.system objects). NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here. See also: ndi.time.syncrule.filematch/INELIGIBLEEPOCHSETS eq - are two ndi.time.syncrule objects equal? B = EQ(NDI_SYNCRULE_OBJ_A, NDI_SYNCRULE_OBJ_B) Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal. Otherwise, 0 is returned. Help for ndi.time.syncrule.filematch/eq is inherited from superclass ndi.time.syncrule filematch - create a new ndi.time.syncrule.filematch for managing synchronization NDI_SYNCRULE_FILEMATCH_OBJ = ndi.time.syncrule.filematch() or NDI_SYNCRULE_FILEMATCH_OBJ = ndi.time.syncrule.filematch(PARAMETERS) Creates a new ndi.time.syncrule.filematch object with the given PARAMETERS (a structure, see below). If no inputs are provided, then the default PARAMETERS (see below) is used. PARAMETERS should be a structure with the following entries: Field (default) | Description ------------------------------------------------------------------- number_fullpath_matches (2) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match. Documentation for ndi.time.syncrule.filematch/filematch doc ndi.time.syncrule.filematch id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.time.syncrule.filematch/id is inherited from superclass did.ido ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule IC = INELIGIBLECLOCKS(NDI_SYNCRULE_OBJ) Returns a cell array of ndi.time.clocktype objects with types that cannot be processed by the ndi.time.syncrule. If IC is empty, then no information is conveyed about which ndi.time.clocktype objects is valid (that is, it is not the case that the ndi.time.syncrule cannot be used on any types; instead, it has no specific limits). In the abstract class, IC is {ndi.time.clocktype('no_time')} . See also: ndi.time.syncrule.filematch/ELIGIBLECLOCKS Help for ndi.time.syncrule.filematch/ineligibleclocks is inherited from superclass ndi.time.syncrule ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch IES = INELIGIBLEEPOCHSETS(NDI_SYNCRULE_FILEMATCH_OBJ) Returns a cell array of ndi.epoch.epochset subclasses that the rule cannot process. If IES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes cannot be processed by the ndi.time.syncrule.filematch. (That is, it is not the case that the NDI_SYNCTABLE can use any class.) ndi.time.syncrule.filematch does not work with ndi.epoch.epochset, NDI_EPOCHSETPARAM, or ndi.file.navigator classes. NDI_EPOCHSETS that use the rule must not be members of the classes returned here, but may be descendents of those classes. See also: ndi.time.syncrule.filematch/ELIGIBLEEPOCHSETS isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.time.syncrule.filematch.isvalid is inherited from superclass did.ido isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule.filematch [B,MSG] = ISVALIDPARAMETERS(NDI_SYNCRULE_FILEMATCH_OBJ, PARAMETERS) Returns 1 if PARAMETERS is a valid parameter structure for ndi.time.syncrule.filematch. Returns 0 otherwise. If there is an error, MSG contains an error message. PARAMETERS should be a structure with the following entries: Field (default) | Description ------------------------------------------------------------------- number_fullpath_matches (2) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match. See also: ndi.time.syncrule/SETPARAMETERS newdocument - create a new ndi.document for an ndi.time.syncrule object DOC = NEWDOCUMENT(NDI_SYNCRULE_OBJ) Creates an ndi.document object DOC that represents the ndi.time.syncrule object. Help for ndi.time.syncrule.filematch/newdocument is inherited from superclass ndi.time.syncrule searchquery - create a search for this ndi.time.syncrule object SQ = SEARCHQUERY(NDI_SYNCRULE_OBJ) Creates a search query for the ndi.time.syncgraph object. Help for ndi.time.syncrule.filematch/searchquery is inherited from superclass ndi.time.syncrule setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form NDI_SYNCRULE_OBJ = SETPARAMETERS(NDI_SYNCRULE_OBJ, PARAMETERS) Sets the 'parameters' field of an ndi.time.syncrule object, while also checking that the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS. See also: ndi.time.syncrule.filematch/ISVALIDPARAMETERS Help for ndi.time.syncrule.filematch/setparameters is inherited from superclass ndi.time.syncrule unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.time.syncrule.filematch.unique_id is inherited from superclass did.ido","title":"ndi.time.syncrule.filematch"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filematch.m/#class-nditimesyncrulefilematch","text":"FILEMATCH - create a new ndi.time.syncrule.filematch for managing synchronization NDI_SYNCRULE_FILEMATCH_OBJ = ndi.time.syncrule.filematch() or NDI_SYNCRULE_FILEMATCH_OBJ = ndi.time.syncrule.filematch(PARAMETERS) Creates a new ndi.time.syncrule.filematch object with the given PARAMETERS (a structure, see below). If no inputs are provided, then the default PARAMETERS (see below) is used. PARAMETERS should be a structure with the following entries: Field (default) | Description ------------------------------------------------------------------- number_fullpath_matches (2) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match.","title":"CLASS ndi.time.syncrule.filematch"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filematch.m/#superclasses","text":"ndi.time.syncrule , ndi.ido , did.ido , ndi.documentservice","title":"Superclasses"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filematch.m/#properties","text":"Property Description parameters identifier","title":"Properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filematch.m/#methods","text":"Method Description apply apply an ndi.time.syncrule.filematch to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch eq are two ndi.time.syncrule objects equal? filematch create a new ndi.time.syncrule.filematch for managing synchronization id return the identifier of an DID.IDO object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch isvalid is a unique ID number valid? isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule.filematch newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form unique_id Generate a unique ID number for DID databases (Static method)","title":"Methods"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filematch.m/#methods-help","text":"apply - apply an ndi.time.syncrule.filematch to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects [COST, MAPPING] = APPLY(NDI_SYNCRULE_FILEMATCH_OBJ, EPOCHNODE_A, EPOCHNODE_B) Given an ndi.time.syncrule.filematch object and two EPOCHNODES (see ndi.epoch.epochset/EPOCHNODES), this function attempts to identify whether a time synchronization can be made across these epochs. If so, a cost COST and an ndi.time.timemapping object MAPPING is returned. Otherwise, COST and MAPPING are empty. eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule EC = ELIGIBLECLOCKS(NDI_SYNCRULE_OBJ) Returns a cell array of ndi.time.clocktype objects with types that can be processed by the ndi.time.syncrule. If EC is empty, then no information is conveyed about which ndi.time.clocktype objects is valid (that is, it is not the case that the ndi.time.syncrule processes no types; instead, it has no specific limits). In the abstract class, EC is empty ({}). See also: ndi.time.syncrule.filematch/INELIGIBLECLOCKS Help for ndi.time.syncrule.filematch/eligibleclocks is inherited from superclass ndi.time.syncrule eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch EES = ELIGIBLEEPOCHSETS(NDI_SYNCRULE_FILEMATCH_OBJ) Returns a cell array of valid ndi.epoch.epochset subclasses that the rule can process. If EES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes can be processed by the ndi.time.syncrule.filematch. (That is, it is not the case that the NDI_SYNCTABLE cannot use any classes.) ndi.time.syncrule.filematch returns {'ndi.daq.system'} (it works with ndi.daq.system objects). NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here. See also: ndi.time.syncrule.filematch/INELIGIBLEEPOCHSETS eq - are two ndi.time.syncrule objects equal? B = EQ(NDI_SYNCRULE_OBJ_A, NDI_SYNCRULE_OBJ_B) Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal. Otherwise, 0 is returned. Help for ndi.time.syncrule.filematch/eq is inherited from superclass ndi.time.syncrule filematch - create a new ndi.time.syncrule.filematch for managing synchronization NDI_SYNCRULE_FILEMATCH_OBJ = ndi.time.syncrule.filematch() or NDI_SYNCRULE_FILEMATCH_OBJ = ndi.time.syncrule.filematch(PARAMETERS) Creates a new ndi.time.syncrule.filematch object with the given PARAMETERS (a structure, see below). If no inputs are provided, then the default PARAMETERS (see below) is used. PARAMETERS should be a structure with the following entries: Field (default) | Description ------------------------------------------------------------------- number_fullpath_matches (2) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match. Documentation for ndi.time.syncrule.filematch/filematch doc ndi.time.syncrule.filematch id - return the identifier of an DID.IDO object IDENTIFIER = ID(DID.IDO_OBJ) Returns the unique identifier of an DID.IDO object. Help for ndi.time.syncrule.filematch/id is inherited from superclass did.ido ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule IC = INELIGIBLECLOCKS(NDI_SYNCRULE_OBJ) Returns a cell array of ndi.time.clocktype objects with types that cannot be processed by the ndi.time.syncrule. If IC is empty, then no information is conveyed about which ndi.time.clocktype objects is valid (that is, it is not the case that the ndi.time.syncrule cannot be used on any types; instead, it has no specific limits). In the abstract class, IC is {ndi.time.clocktype('no_time')} . See also: ndi.time.syncrule.filematch/ELIGIBLECLOCKS Help for ndi.time.syncrule.filematch/ineligibleclocks is inherited from superclass ndi.time.syncrule ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch IES = INELIGIBLEEPOCHSETS(NDI_SYNCRULE_FILEMATCH_OBJ) Returns a cell array of ndi.epoch.epochset subclasses that the rule cannot process. If IES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes cannot be processed by the ndi.time.syncrule.filematch. (That is, it is not the case that the NDI_SYNCTABLE can use any class.) ndi.time.syncrule.filematch does not work with ndi.epoch.epochset, NDI_EPOCHSETPARAM, or ndi.file.navigator classes. NDI_EPOCHSETS that use the rule must not be members of the classes returned here, but may be descendents of those classes. See also: ndi.time.syncrule.filematch/ELIGIBLEEPOCHSETS isvalid - is a unique ID number valid? B = isvalid(ID) Returns true if ID matches the structure of a did.ido identifier and false otherwise. A valid ID must have 16 hexidecimal digits in 0-9 or a-f, an underscore, and then 16 more hexidecimal digits. Help for ndi.time.syncrule.filematch.isvalid is inherited from superclass did.ido isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule.filematch [B,MSG] = ISVALIDPARAMETERS(NDI_SYNCRULE_FILEMATCH_OBJ, PARAMETERS) Returns 1 if PARAMETERS is a valid parameter structure for ndi.time.syncrule.filematch. Returns 0 otherwise. If there is an error, MSG contains an error message. PARAMETERS should be a structure with the following entries: Field (default) | Description ------------------------------------------------------------------- number_fullpath_matches (2) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match. See also: ndi.time.syncrule/SETPARAMETERS newdocument - create a new ndi.document for an ndi.time.syncrule object DOC = NEWDOCUMENT(NDI_SYNCRULE_OBJ) Creates an ndi.document object DOC that represents the ndi.time.syncrule object. Help for ndi.time.syncrule.filematch/newdocument is inherited from superclass ndi.time.syncrule searchquery - create a search for this ndi.time.syncrule object SQ = SEARCHQUERY(NDI_SYNCRULE_OBJ) Creates a search query for the ndi.time.syncgraph object. Help for ndi.time.syncrule.filematch/searchquery is inherited from superclass ndi.time.syncrule setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form NDI_SYNCRULE_OBJ = SETPARAMETERS(NDI_SYNCRULE_OBJ, PARAMETERS) Sets the 'parameters' field of an ndi.time.syncrule object, while also checking that the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS. See also: ndi.time.syncrule.filematch/ISVALIDPARAMETERS Help for ndi.time.syncrule.filematch/setparameters is inherited from superclass ndi.time.syncrule unique_id - Generate a unique ID number for DID databases (Static method) ID = DID.IDO.UNIQUE_ID() Generates a unique ID character array based on the current time and a random number. It is a hexadecimal representation of the serial date number in UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00. The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days. ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)] See also: NUM2HEX, NOW, RAND Help for ndi.time.syncrule.filematch.unique_id is inherited from superclass did.ido","title":"Methods help"},{"location":"NDI-matlab/reference/%2Bndi/%2Butil/choosefile.m/","text":"ndi.util.choosefile ndi.util.choosefile - ask user to choose a file graphically [SUCCESS, FILENAME, REPLACES] = ndi.util.choosefile(PROMPT, DEFAULTFILENAME, DLGTITLE, EXTENSION_LIST)","title":"ndi.util.choosefile"},{"location":"NDI-matlab/reference/%2Bndi/%2Butil/choosefile.m/#ndiutilchoosefile","text":"ndi.util.choosefile - ask user to choose a file graphically [SUCCESS, FILENAME, REPLACES] = ndi.util.choosefile(PROMPT, DEFAULTFILENAME, DLGTITLE, EXTENSION_LIST)","title":"ndi.util.choosefile"},{"location":"NDI-matlab/reference/%2Bndi/%2Butil/choosefileordir.m/","text":"ndi.util.choosefileordir CHOOSEFILEORDIR - ask user to choose a file graphically [SUCCESS, FILENAME, REPLACES] = ndi.util.choosefileordir(PROMPT, DEFAULTFILENAME, DLGTITLE, EXTENSION_LIST)","title":"ndi.util.choosefileordir"},{"location":"NDI-matlab/reference/%2Bndi/%2Butil/choosefileordir.m/#ndiutilchoosefileordir","text":"CHOOSEFILEORDIR - ask user to choose a file graphically [SUCCESS, FILENAME, REPLACES] = ndi.util.choosefileordir(PROMPT, DEFAULTFILENAME, DLGTITLE, EXTENSION_LIST)","title":"ndi.util.choosefileordir"},{"location":"NDI-matlab/reference/%2Bndi/%2Butil/downsampleTimeseries.m/","text":"ndi.util.downsampleTimeseries DOWNSAMPLETIMESERIES Downsamples a time series matrix after applying a low-pass filter. [t_out, d_out] = DOWNSAMPLETIMESERIES(t_in, d_in, LP) downsamples the input time series data d_in, after applying a Chebyshev Type I low-pass filter to prevent aliasing, *if necessary*. Inputs: t_in - A vector representing the time values. This can be a double vector (with units of seconds) or a MATLAB datetime object. It is assumed samples are equally spaced in time. d_in - A matrix where each column represents a different channel of data. The number of rows in d_in must match the length of t_in. LP - The low-pass frequency (in Hz). Frequencies above this value will be attenuated by the filter *if downsampling is required*. Outputs: t_out - The downsampled time vector. d_out - The downsampled and filtered data matrix. If no downsampling is performed, the output data will be identical to the input data. Details: The function first determines the sampling frequency of the input data. If the sampling frequency is greater than twice the specified low-pass frequency (LP), a downsampling operation is performed. A 4th order Chebyshev Type I filter with 0.8 dB of passband ripple is used as an anti-aliasing filter prior to downsampling. The data is then downsampled to a sampling frequency of 2*LP. If the original sampling frequency is not greater than 2*LP, the original data is returned *without filtering*. Example: % Generate a sample signal with two sine waves. t = 0:0.001:1; % 1 kHz sampling rate d = sin(2*pi*5*t)' + 0.5*cos(2*pi*50*t)'; % 5 Hz and 50 Hz components % Downsample to 20 Hz (LP = 10 Hz) [t_down, d_down] = mlt.downsampleTimeseries(t, d, 10); % Plot the original and downsampled signals. figure; subplot(2,1,1); plot(t, d); title('Original Signal'); xlabel('Time (s)'); ylabel('Amplitude'); subplot(2,1,2); plot(t_down, d_down); title('Downsampled Signal (LP = 10 Hz)'); xlabel('Time (s)'); ylabel('Amplitude'); % Example with no downsampling: [t_no_down, d_no_down] = mlt.downsampleTimeseries(t, d, 600); % LP > fs/2 % t_no_down and d_no_down will be the same as t and d. See also CHEBY1, FILTFILT, RESAMPLE.","title":"ndi.util.downsampleTimeseries"},{"location":"NDI-matlab/reference/%2Bndi/%2Butil/downsampleTimeseries.m/#ndiutildownsampletimeseries","text":"DOWNSAMPLETIMESERIES Downsamples a time series matrix after applying a low-pass filter. [t_out, d_out] = DOWNSAMPLETIMESERIES(t_in, d_in, LP) downsamples the input time series data d_in, after applying a Chebyshev Type I low-pass filter to prevent aliasing, *if necessary*. Inputs: t_in - A vector representing the time values. This can be a double vector (with units of seconds) or a MATLAB datetime object. It is assumed samples are equally spaced in time. d_in - A matrix where each column represents a different channel of data. The number of rows in d_in must match the length of t_in. LP - The low-pass frequency (in Hz). Frequencies above this value will be attenuated by the filter *if downsampling is required*. Outputs: t_out - The downsampled time vector. d_out - The downsampled and filtered data matrix. If no downsampling is performed, the output data will be identical to the input data. Details: The function first determines the sampling frequency of the input data. If the sampling frequency is greater than twice the specified low-pass frequency (LP), a downsampling operation is performed. A 4th order Chebyshev Type I filter with 0.8 dB of passband ripple is used as an anti-aliasing filter prior to downsampling. The data is then downsampled to a sampling frequency of 2*LP. If the original sampling frequency is not greater than 2*LP, the original data is returned *without filtering*. Example: % Generate a sample signal with two sine waves. t = 0:0.001:1; % 1 kHz sampling rate d = sin(2*pi*5*t)' + 0.5*cos(2*pi*50*t)'; % 5 Hz and 50 Hz components % Downsample to 20 Hz (LP = 10 Hz) [t_down, d_down] = mlt.downsampleTimeseries(t, d, 10); % Plot the original and downsampled signals. figure; subplot(2,1,1); plot(t, d); title('Original Signal'); xlabel('Time (s)'); ylabel('Amplitude'); subplot(2,1,2); plot(t_down, d_down); title('Downsampled Signal (LP = 10 Hz)'); xlabel('Time (s)'); ylabel('Amplitude'); % Example with no downsampling: [t_no_down, d_no_down] = mlt.downsampleTimeseries(t, d, 600); % LP > fs/2 % t_no_down and d_no_down will be the same as t and d. See also CHEBY1, FILTFILT, RESAMPLE.","title":"ndi.util.downsampleTimeseries"},{"location":"NDI-matlab/reference/%2Bndi/%2Butil/toolboxdir.m/","text":"ndi.util.toolboxdir ndi.util.toolboxdir is a function. directoryPath = ndi.util.toolboxdir","title":"ndi.util.toolboxdir"},{"location":"NDI-matlab/reference/%2Bndi/%2Butil/toolboxdir.m/#ndiutiltoolboxdir","text":"ndi.util.toolboxdir is a function. directoryPath = ndi.util.toolboxdir","title":"ndi.util.toolboxdir"},{"location":"NDI-matlab/reference/%2Bndi/%2Butil/%2Bopenminds/find_instance_name.m/","text":"ndi.util.openminds.find_instance_name FIND_INSTANCE_NAME Summary of this function goes here Detailed explanation goes here","title":"ndi.util.openminds.find_instance_name"},{"location":"NDI-matlab/reference/%2Bndi/%2Butil/%2Bopenminds/find_instance_name.m/#ndiutilopenmindsfind_instance_name","text":"FIND_INSTANCE_NAME Summary of this function goes here Detailed explanation goes here","title":"ndi.util.openminds.find_instance_name"},{"location":"NDI-matlab/reference/%2Bndi/%2Butil/%2Bopenminds/find_techniques_names.m/","text":"ndi.util.openminds.find_techniques_names FIND_TECHNIQUES_NAMES Summary of this function goes here Detailed explanation goes here","title":"ndi.util.openminds.find_techniques_names"},{"location":"NDI-matlab/reference/%2Bndi/%2Butil/%2Bopenminds/find_techniques_names.m/#ndiutilopenmindsfind_techniques_names","text":"FIND_TECHNIQUES_NAMES Summary of this function goes here Detailed explanation goes here","title":"ndi.util.openminds.find_techniques_names"},{"location":"NDI-matlab/reference/%2Bndi/%2Bvalidators/mustBeEpochInput.m/","text":"ndi.validators.mustBeEpochInput mustBeEpochInput - determines whether an input can describe an epoch mustBeEpochInput(V) Validates if V is a character array, string, or double of size 1x1. Otherwise returns an error. Note that this function does not determine if the input actually corresponds to a valid epoch. Instead, it merely tests whether the input CAN be a valid epoch according to its formatting. See also: ndi.epoch.epochset.epochtable Example: ndi.validators.mustBeEpochInput(1) % no error ndi.validators.mustBeEpochInput('t00001') % no error ndi.validators.mustBeEpochInput(\"t00001\") % no error ndi.validators.mustBeEpochInput([1 2 3]) % error","title":"ndi.validators.mustBeEpochInput"},{"location":"NDI-matlab/reference/%2Bndi/%2Bvalidators/mustBeEpochInput.m/#ndivalidatorsmustbeepochinput","text":"mustBeEpochInput - determines whether an input can describe an epoch mustBeEpochInput(V) Validates if V is a character array, string, or double of size 1x1. Otherwise returns an error. Note that this function does not determine if the input actually corresponds to a valid epoch. Instead, it merely tests whether the input CAN be a valid epoch according to its formatting. See also: ndi.epoch.epochset.epochtable Example: ndi.validators.mustBeEpochInput(1) % no error ndi.validators.mustBeEpochInput('t00001') % no error ndi.validators.mustBeEpochInput(\"t00001\") % no error ndi.validators.mustBeEpochInput([1 2 3]) % error","title":"ndi.validators.mustBeEpochInput"},{"location":"NDI-matlab/tutorials/analysis_app/","text":"Making your own analysis app that uses NDI This is planned tutorial. We will design a simple application that analyzes responses of taste stimuli, and take the user/developer through the process of design, creating database document types, writing, and testing. This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.","title":"6. Making your own analysis app that uses NDI"},{"location":"NDI-matlab/tutorials/analysis_app/#making-your-own-analysis-app-that-uses-ndi","text":"This is planned tutorial. We will design a simple application that analyzes responses of taste stimuli, and take the user/developer through the process of design, creating database document types, writing, and testing. This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.","title":"Making your own analysis app that uses NDI"},{"location":"NDI-matlab/tutorials/archive/","text":"Saving your data to an archive Planned: Save a set of experimental sessions to DANDI , after NWB reading/writing capability is added. Planned as part of R01MH126791 (if funded). Planned: Save a set of experimental sessions to DABI . Soon.","title":"7. Submitting your data to an archive"},{"location":"NDI-matlab/tutorials/archive/#saving-your-data-to-an-archive","text":"Planned: Save a set of experimental sessions to DANDI , after NWB reading/writing capability is added. Planned as part of R01MH126791 (if funded). Planned: Save a set of experimental sessions to DABI . Soon.","title":"Saving your data to an archive"},{"location":"NDI-matlab/tutorials/case_studies_reading_data/","text":"Case studies in reading your own data in NDI This is planned tutorial that will show examples of how to specify ndi.daq.system and ndi.file.navigator objects for 4 systems neuroscience labs that use different data acquisition systems and different file organizations (Van Hooser; Marder; Katz; Jadhav); This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.","title":"4. Case studies in reading data in NDI"},{"location":"NDI-matlab/tutorials/case_studies_reading_data/#case-studies-in-reading-your-own-data-in-ndi","text":"This is planned tutorial that will show examples of how to specify ndi.daq.system and ndi.file.navigator objects for 4 systems neuroscience labs that use different data acquisition systems and different file organizations (Van Hooser; Marder; Katz; Jadhav); This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.","title":"Case studies in reading your own data in NDI"},{"location":"NDI-matlab/tutorials/data_pipeline/","text":"Creating a data pipeline in NDI This is planned tutorial that will cover an example of making a data pipeline in NDI; we will show how to analyze several aspects of visual responses and to calculate place-cell locations in recordings of hippocampus. This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.","title":"5. Making your own data pipeline in NDI"},{"location":"NDI-matlab/tutorials/data_pipeline/#creating-a-data-pipeline-in-ndi","text":"This is planned tutorial that will cover an example of making a data pipeline in NDI; we will show how to analyze several aspects of visual responses and to calculate place-cell locations in recordings of hippocampus. This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.","title":"Creating a data pipeline in NDI"},{"location":"NDI-matlab/tutorials/reading_own_data_ndi/","text":"Reading your own data in NDI This is planned tutorial that will cover identifying your data's file format and organization specifying your data's file format and organization in an ndi.daq.system and ndi.file.navigator specifying subjects and mapping between probes and daq systems checking your work This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.","title":"Reading your own data in NDI"},{"location":"NDI-matlab/tutorials/reading_own_data_ndi/#reading-your-own-data-in-ndi","text":"This is planned tutorial that will cover identifying your data's file format and organization specifying your data's file format and organization in an ndi.daq.system and ndi.file.navigator specifying subjects and mapping between probes and daq systems checking your work This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.","title":"Reading your own data in NDI"},{"location":"NDI-matlab/tutorials/search_ndi_databases/","text":"Search and analyze NDI databases on the web Planned: Search the web for NDI databases When: After adding databases to DANDI This work is planned as part of application R01MH126791 (if funded)","title":"8. Search and analyze NDI databases on the web"},{"location":"NDI-matlab/tutorials/search_ndi_databases/#search-and-analyze-ndi-databases-on-the-web","text":"Planned: Search the web for NDI databases When: After adding databases to DANDI This work is planned as part of application R01MH126791 (if funded)","title":"Search and analyze NDI databases on the web"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/","text":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI This is a beginner's tutorial for NDI. This tutorial is designed for users who have some basic familiarity with coding or Matlab. If you're a Matlab and coding newbie, please use Tutorial 3.1, the detailed version . 2.1: Reading an example dataset We will start with learning to read an example dataset into NDI. We assume you have already installed NDI and taken the introductory tutorial of the NDI model . These data are available in a compressed folder here . You can put the folder anywhere, but we will assume that you put them in your MATLAB/Documents/NDI folder, where MATLAB is your normal user path in Matlab (usually /Users/username/Documents/MATLAB on a Mac). Normally, we'd use some helper functions to open our data to make this process even easier, but this tutorial takes the user through the full manual process for training purposes. 2.1.1 Introduction to the experiment These data are single neuron recordings made with electrodes in the anesthetized tree shrew visual as a part of Van Hooser et al. 2013 . This example data is a very small subset of the original data for the purposes of illustration. In this experiment, a single unit recording electrode was inserted into either lateral geniculate nucleus or V1. The electrode was connected to an amplifier, and the output signal was recorded by a Cambridge Electronic Design (CED) micro1401 digital acquisition board. A CED Spike2 software script was used that stored 1 recording epoch per folder. In software, the voltage from the electrode was assigned to channel 11. A visual stimulus monitor was set up in front of the animal, and visual stimuli were generated by custom software running on a separate computer. A record of the stimulus parameters was stored in the epoch folder in a file called stims.mat , and stimulus timing information was delivered to the digital inputs of the micro1401 in the form of a stimulus onset trigger and an 8-bit stimulus code signal that were generated by the stimulus computer. 2.1.2 Introduction to the data The data are in a folder called ts_exper1 . It contains recordings of two neurons, an LGN neuron and a V1 neuron, to presentation of sinusoidal gratings that either vary in orientation or in spatial frequency. The data, as provided by the host lab, are organized into subfolders, named t00001 , t00002 , t00003 , and t00004 . The first two folders are recordings of the LGN neuron, and the second two folders are recordings of the V1 neuron. Each t0000N folder has 3 files: probemap.txt - a file that we made for NDI that describe what probes are recorded in this folder spike2data.smr - a CED Spike2 file that has the raw electrophysiology data and the stimulus timing information stims.mat - A Matlab file that has detailed parameters of the stimuli that were run First, let's list these files using the ls command (that's the letter l followed by the letter s , short for list ) and take a quick look at what is in them. Set up the \"prefix\" path to your data as necessary. (Here, we assume you put the ts_exper1 folder into your Matlab userpath folder but you can put it anywhere. Code block 2.1.2.1. Type this in to Matlab: prefix = [userpath filesep 'Documents' filesep 'NDI']; % or '/Users/yourusername/Desktop/' if you put it on the desktop perhaps ls([prefix filesep 'ts_exper1' filesep 't*']); % list all the files in the t0000N folders We wrote a short function so that you can see the raw voltage recording and the stimulus timing information. Each stimulus appears as a number and its duration is indicated by the black bar. You can pan with the mouse to scroll through the recording. Code block 2.1.2.2. Type this in to Matlab: my_smr_file = fullfile(prefix,'ts_exper1','t00001','spike2data.smr') ndi.example.tutorial.plottreeshrewdata(my_smr_file); You should see a Matlab window that looks like this, and when you hover your mouse over the image, it should turn into a \"hand\" that allows you to drag and pan around. 2.1.3 Specifying the metadata that NDI needs to read the experiment In this example, we have already prepared the metadata files that are necessary for NDI to read the data. Let's look at them in turn. First, we need to tell NDI what probes we have in our experiment. A probe is anything that measures or stimulates; one end of a probe is connected to a subject , and the other end of a probe is connected to a data acquisition device. We tell NDI how the probe is connected by creating an ndi.epoch.epochprobemap . Usually, we do this with a little code that instructs NDI how to read this information directly from the laboratory's own file information, but in this example, we will use the generic ndi.epoch.epochprobemap_daqsystem object, which reads in a simple tab-delimited text file. Let's print the probemap.txt file for directory t00001 : Code block 2.1.3.1. Type this in to Matlab: type (fullfile(prefix,'ts_exper1','t00001','probemap.txt')) You will see a tab-delimited text table that looks like the following. In the Matlab command window, the tabs may not line up, so don't be concerned if it doesn't look like a nice formatted table. name reference type devicestring subjectstring ctx 1 n-trode ced_daqsystem:ai11 treeshrew_12345@mylab.org vis_stim 1 stimulator vis_daqsystem:mk30;text30;md1 treeshrew_12345@mylab.org This text file has all of the information to specify the probe and its connections. It has a name for the probe that is meaningful to the user, and the reference specifies an identifier that groups the recordings of the probe. Typically, when the probe is in one physical position, the reference number is kept the same, but when the probe is moved (such as when an electrode is advanced), the reference number is incremented. This tells NDI to try to combine information from recordings that have the same name and reference. type tells NDI what type of probe it is. There are a variety of pre-determined types, and this type instructs NDI (via this file ) which probe object type to create in software. Second, we need to specify the stimulus parameters metadata. Typically, one would create a metadata reader for ones own lab so that the native data can be read directly, but here we have made another tab-delimited text file with the parameters. You can read this for yourself by typing the following: Code block 2.1.3.2. Type this in to Matlab: type (fullfile(prefix,'ts_exper1','t00001','stims.tsv')) 2.1.4 Gaining access to the data in NDI: ndi.session and ndi.daq.system objects Now all that remains is to open the data directory as an ndi.session object, and make ndi.daq.system objects to read your data. We will use an ndi.session.dir object, which allows us to read information from a directory (folder) on disk. We will create a new ndi.system object by calling the constructor with the reference name we wish to give to the session and the pathname to our data: Code block 2.1.4.1. Type this in to Matlab: S = ndi.session.dir('ts_exper1',[prefix filesep 'ts_exper1']) Now you have made a new NDI session. The session is brand new and doesn't know about any of the devices we used in our experiment. So, if we try to see if there are any probes, we will see that it doesn't know of any: Code block 2.1.4.2. Type this in to Matlab: S.getprobes() Unless you ran this demo before, you won't see any probes here (it will return an empty cell array). We need to make new ndi.daq.system objects for our data acquisition system and our stimulator. Our devices are multifunction data acquisition systems, so we use the ndi.daq.system.mfdaq subtype. An ndi.daq.system object consists of three components: an ndi.file.navigator object whose job it is to find the files or streams associated with each epoch of data, an ndi.daq.reader object whose job it is to read the raw data from the files, and an ndi.daq.metadatareader (optionally) whose job it is to read any metadata associated with the epoch (such as stimulus parameter information). First, we will build an ndi.daq.system.mfdaq object that we will call 'ced_daqsystem' to read the electrode data from our CED SMR files. Code block 2.1.4.3. Type this in to Matlab: ced_filenav = ndi.file.navigator(S, {'.*\\.smr\\>', 'probemap.txt'}, ... 'ndi.epoch.epochprobemap_daqsystem','probemap.txt'); ced_rdr = ndi.daq.reader.mfdaq.cedspike2(); ced_system = ndi.daq.system.mfdaq('ced_daqsystem', ced_filenav, ced_rdr); % if you haven't already added the daq system, you can add it here: S.daqsystem_add(ced_system); Note: If you ran the tutorial before, you may have added ced_system to your session S already. That's fine, you'll get an error if you try to do it again. If you want to remove all your daq systems, you can call ndi.session.daqsystem_clear() by typing S.daqsystem_clear() , and then you can add them again. Let's look at the epochs that ced_system can find, in order to understand how it searches for epochs: Code block 2.1.4.4 Type this into Matlab % let's look at the epochs the daq.system can find et = ced_system.epochtable() % should see a 4 element answer f = ced_system.filenavigator.getepochfiles(1) % you should see the files from epoch 1, t00001 Second, we will build an ndi.daq.system.mfdaq for our visual stimulus system. Code block 2.1.4.5. Type this in to Matlab: vis_filenav = ndi.file.navigator(S, {'.*\\.smr\\>', 'probemap.txt', 'stims.tsv'},... 'ndi.epoch.epochprobemap_daqsystem','probemap.txt'); vis_rdr = ndi.daq.reader.mfdaq.cedspike2(); vis_mdrdr = ndi.daq.metadatareader('stims.tsv'); vis_system = ndi.daq.system.mfdaq('vis_daqsystem', vis_filenav, vis_rdr, {vis_mdrdr}); % if you haven't already added the daq system, you can add it here: S.daqsystem_add(vis_system); Last, we will tell NDI how these devices are synchronized with each other. These two daq systems have a file in common ( spike2data.smr ), which means that they have a common time base, but NDI doesn't yet know that the two daq systems can be synchronized. Here we add a \"syncrule\" that tells NDI that any daq systems that share at least 2 files per epoch also share a common time clock for that epoch. Code block 2.1.4.6. Type this in to Matlab: nsf = ndi.time.syncrule.filematch(struct('number_fullpath_matches',2)); S.syncgraph_addrule(nsf); 2.1.5 Opening the data in NDI: accessing probes via from ndi.daq.system.mfdaq Now we can use NDI to see the probes that these daq systems can find and to access the data from those probes. Let's look at the electrode probe data first. Code block 2.1.5.1. Type this in to Matlab: p = S.getprobes() % get all of the probes that are in the ndi.session S for i=1:numel(p), p{i}, end; % display the probe information for each probe % look at the number of epochs recorded for probe 1 p_ctx1_list = S.getprobes('name','ctx','reference',1) % returns a cell array of matches p_ctx1 = p_ctx1_list{1}; % take the first one, should be the only one et = p_ctx1.epochtable() for i=1:numel(et), et(i), end; % display the epoch table entries epoch_to_read = 1; You can see that probe 1 has a name of ctx , a reference of 1 , and it is of type n-trode , or an n-channel electrode. It has a software object type of ndi.probe.timeseries.mfdaq , which simply means it is associated with multifunction DAQ systems and returns timeseries observations. Now let's read data from our probe p_ctx1 and plot the data: Code block 2.1.5.2. Type this into Matlab [data,t,timeref_p_ctx1]=p_ctx1.readtimeseries(epoch_to_read,-Inf,Inf); % read all data from epoch 1 figure(100); plot(t,data); xlabel('Time(s)'); ylabel('Voltage (V)'); set(gca,'xlim',[t(1) t(end)]); box off; This code calls an important function for reading data from probes: ndi.timeseries.readtimeseries : This code is documentation; do not type into Matlab [D, T, TIMEREF] = ndi.timeseries.readtimeseries(EPOCH_OR_TIMEREF, T0, T1) % Reads data and timestamps from an ndi.timeseries.readtimeseries object with respect % to a specific epoch or an ndi.time.timereference object, from time T0 to T1. When analyzing data or writing apps to analyze data, ndi.timeseries.readtimeseries is one of the most commonly called functions. Now let's also look at our stimulator probe vis_stim . First, let's examine the epochs that are known to vis_stim : Code block 2.1.5.3. Type this in to Matlab: p_visstim_list = S.getprobes('name','vis_stim','reference',1) % returns a cell array of matches p_visstim = p_visstim_list{1}; % take the first one, should be the only one et = p_visstim.epochtable() for i=1:numel(et), et(i), end; % display the epoch table entries Now let's read the data from our stimulator. To do this, we are going to ask NDI to read the stimulus timing information in the time units of our electrode probe p_ctx . You'll notice that when we read data from p_ctx1 , readtimeseries returned an ndi.time.timereference object timeref_p_ctx1 . Let's examine this quickly: Code block 2.1.5.4. Type this in to Matlab: timeref_p_ctx1 You'll see a structure with the following fields: timeref_p_ctx1 timereference with properties referent [1x1 ndi.probe.timeseries.mfdaq] clocktype [1x1 ndi.time.clocktype] epoch 1 time 0 session_ID '412687ba08e28694_c0d9c07d0b8726cf' In NDI, one can refer to time with respect to a variety of different clocks, which is helpful because daq systems typically do not have access to a global clock. We can now ask for the time of the stimulus presentations with respect to our electrode's clock, and add the onset times to the graph. Code block 2.1.5.5. Type this in to Matlab: [data,t,timeref_stim]=p_visstim.readtimeseries(timeref_p_ctx1,-Inf,Inf); % read all data from epoch 1 of p_ctx1 ! figure(100); hold on; vlt.neuro.stimulus.plot_stimulus_timeseries(7,t.stimon,t.stimon+2,'stimid',data.stimid); Let's look at what readtimeseries returned in the case of a stimulator. It is a little different than when being used with regularly-sampled data. Code block 2.1.5.6. Type this in to Matlab: t, % show timestamps t.stimon, data, % show data data.stimid, data.parameters{1} Here we examined several fields of the variables data and t returned from readtimeseries from our ndi.probe.timeseries.stimulator . You can see that t is a structure with 2 fields, stimon and stimoff . Our system kept track of when each stimulus began, but in these recordings, we did not have our data acquisition system keep track of when our stimulus turned off. (For later analysis, we will need to read this from the stimulus parameters.) You can also see that data has some metadata about the stimuli. It has the ID number of each stimulus that was shown ( data.stimid(1) is the stimulus that turned on at t.stimon(1) ), and it has the parameters of each stimulus. data.parameters{1} is the parameters of the stimulus with ID number 1. 2.1.6 Discussion/Feedback This concludes our tutorial on the fully manual way of reading data through NDI. In the next tutorial, we'll explore how to create a couple of code objects that read our data directly from a lab's internal structure. Post comments, bugs, questions, or discuss .","title":"2.1 Reading an example dataset"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#tutorial-2-analyzing-your-first-electrophysiology-experiment-with-ndi","text":"This is a beginner's tutorial for NDI. This tutorial is designed for users who have some basic familiarity with coding or Matlab. If you're a Matlab and coding newbie, please use Tutorial 3.1, the detailed version .","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#21-reading-an-example-dataset","text":"We will start with learning to read an example dataset into NDI. We assume you have already installed NDI and taken the introductory tutorial of the NDI model . These data are available in a compressed folder here . You can put the folder anywhere, but we will assume that you put them in your MATLAB/Documents/NDI folder, where MATLAB is your normal user path in Matlab (usually /Users/username/Documents/MATLAB on a Mac). Normally, we'd use some helper functions to open our data to make this process even easier, but this tutorial takes the user through the full manual process for training purposes.","title":"2.1: Reading an example dataset"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#211-introduction-to-the-experiment","text":"These data are single neuron recordings made with electrodes in the anesthetized tree shrew visual as a part of Van Hooser et al. 2013 . This example data is a very small subset of the original data for the purposes of illustration. In this experiment, a single unit recording electrode was inserted into either lateral geniculate nucleus or V1. The electrode was connected to an amplifier, and the output signal was recorded by a Cambridge Electronic Design (CED) micro1401 digital acquisition board. A CED Spike2 software script was used that stored 1 recording epoch per folder. In software, the voltage from the electrode was assigned to channel 11. A visual stimulus monitor was set up in front of the animal, and visual stimuli were generated by custom software running on a separate computer. A record of the stimulus parameters was stored in the epoch folder in a file called stims.mat , and stimulus timing information was delivered to the digital inputs of the micro1401 in the form of a stimulus onset trigger and an 8-bit stimulus code signal that were generated by the stimulus computer.","title":"2.1.1 Introduction to the experiment"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#212-introduction-to-the-data","text":"The data are in a folder called ts_exper1 . It contains recordings of two neurons, an LGN neuron and a V1 neuron, to presentation of sinusoidal gratings that either vary in orientation or in spatial frequency. The data, as provided by the host lab, are organized into subfolders, named t00001 , t00002 , t00003 , and t00004 . The first two folders are recordings of the LGN neuron, and the second two folders are recordings of the V1 neuron. Each t0000N folder has 3 files: probemap.txt - a file that we made for NDI that describe what probes are recorded in this folder spike2data.smr - a CED Spike2 file that has the raw electrophysiology data and the stimulus timing information stims.mat - A Matlab file that has detailed parameters of the stimuli that were run First, let's list these files using the ls command (that's the letter l followed by the letter s , short for list ) and take a quick look at what is in them. Set up the \"prefix\" path to your data as necessary. (Here, we assume you put the ts_exper1 folder into your Matlab userpath folder but you can put it anywhere.","title":"2.1.2 Introduction to the data"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2121-type-this-in-to-matlab","text":"prefix = [userpath filesep 'Documents' filesep 'NDI']; % or '/Users/yourusername/Desktop/' if you put it on the desktop perhaps ls([prefix filesep 'ts_exper1' filesep 't*']); % list all the files in the t0000N folders We wrote a short function so that you can see the raw voltage recording and the stimulus timing information. Each stimulus appears as a number and its duration is indicated by the black bar. You can pan with the mouse to scroll through the recording.","title":"Code block 2.1.2.1. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2122-type-this-in-to-matlab","text":"my_smr_file = fullfile(prefix,'ts_exper1','t00001','spike2data.smr') ndi.example.tutorial.plottreeshrewdata(my_smr_file); You should see a Matlab window that looks like this, and when you hover your mouse over the image, it should turn into a \"hand\" that allows you to drag and pan around.","title":"Code block 2.1.2.2. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#213-specifying-the-metadata-that-ndi-needs-to-read-the-experiment","text":"In this example, we have already prepared the metadata files that are necessary for NDI to read the data. Let's look at them in turn. First, we need to tell NDI what probes we have in our experiment. A probe is anything that measures or stimulates; one end of a probe is connected to a subject , and the other end of a probe is connected to a data acquisition device. We tell NDI how the probe is connected by creating an ndi.epoch.epochprobemap . Usually, we do this with a little code that instructs NDI how to read this information directly from the laboratory's own file information, but in this example, we will use the generic ndi.epoch.epochprobemap_daqsystem object, which reads in a simple tab-delimited text file. Let's print the probemap.txt file for directory t00001 :","title":"2.1.3 Specifying the metadata that NDI needs to read the experiment"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2131-type-this-in-to-matlab","text":"type (fullfile(prefix,'ts_exper1','t00001','probemap.txt')) You will see a tab-delimited text table that looks like the following. In the Matlab command window, the tabs may not line up, so don't be concerned if it doesn't look like a nice formatted table. name reference type devicestring subjectstring ctx 1 n-trode ced_daqsystem:ai11 treeshrew_12345@mylab.org vis_stim 1 stimulator vis_daqsystem:mk30;text30;md1 treeshrew_12345@mylab.org This text file has all of the information to specify the probe and its connections. It has a name for the probe that is meaningful to the user, and the reference specifies an identifier that groups the recordings of the probe. Typically, when the probe is in one physical position, the reference number is kept the same, but when the probe is moved (such as when an electrode is advanced), the reference number is incremented. This tells NDI to try to combine information from recordings that have the same name and reference. type tells NDI what type of probe it is. There are a variety of pre-determined types, and this type instructs NDI (via this file ) which probe object type to create in software. Second, we need to specify the stimulus parameters metadata. Typically, one would create a metadata reader for ones own lab so that the native data can be read directly, but here we have made another tab-delimited text file with the parameters. You can read this for yourself by typing the following:","title":"Code block 2.1.3.1. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2132-type-this-in-to-matlab","text":"type (fullfile(prefix,'ts_exper1','t00001','stims.tsv'))","title":"Code block 2.1.3.2. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#214-gaining-access-to-the-data-in-ndi-ndisession-and-ndidaqsystem-objects","text":"Now all that remains is to open the data directory as an ndi.session object, and make ndi.daq.system objects to read your data. We will use an ndi.session.dir object, which allows us to read information from a directory (folder) on disk. We will create a new ndi.system object by calling the constructor with the reference name we wish to give to the session and the pathname to our data:","title":"2.1.4 Gaining access to the data in NDI: ndi.session and ndi.daq.system objects"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2141-type-this-in-to-matlab","text":"S = ndi.session.dir('ts_exper1',[prefix filesep 'ts_exper1']) Now you have made a new NDI session. The session is brand new and doesn't know about any of the devices we used in our experiment. So, if we try to see if there are any probes, we will see that it doesn't know of any:","title":"Code block 2.1.4.1. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2142-type-this-in-to-matlab","text":"S.getprobes() Unless you ran this demo before, you won't see any probes here (it will return an empty cell array). We need to make new ndi.daq.system objects for our data acquisition system and our stimulator. Our devices are multifunction data acquisition systems, so we use the ndi.daq.system.mfdaq subtype. An ndi.daq.system object consists of three components: an ndi.file.navigator object whose job it is to find the files or streams associated with each epoch of data, an ndi.daq.reader object whose job it is to read the raw data from the files, and an ndi.daq.metadatareader (optionally) whose job it is to read any metadata associated with the epoch (such as stimulus parameter information). First, we will build an ndi.daq.system.mfdaq object that we will call 'ced_daqsystem' to read the electrode data from our CED SMR files.","title":"Code block 2.1.4.2. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2143-type-this-in-to-matlab","text":"ced_filenav = ndi.file.navigator(S, {'.*\\.smr\\>', 'probemap.txt'}, ... 'ndi.epoch.epochprobemap_daqsystem','probemap.txt'); ced_rdr = ndi.daq.reader.mfdaq.cedspike2(); ced_system = ndi.daq.system.mfdaq('ced_daqsystem', ced_filenav, ced_rdr); % if you haven't already added the daq system, you can add it here: S.daqsystem_add(ced_system); Note: If you ran the tutorial before, you may have added ced_system to your session S already. That's fine, you'll get an error if you try to do it again. If you want to remove all your daq systems, you can call ndi.session.daqsystem_clear() by typing S.daqsystem_clear() , and then you can add them again. Let's look at the epochs that ced_system can find, in order to understand how it searches for epochs:","title":"Code block 2.1.4.3. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2144-type-this-into-matlab","text":"% let's look at the epochs the daq.system can find et = ced_system.epochtable() % should see a 4 element answer f = ced_system.filenavigator.getepochfiles(1) % you should see the files from epoch 1, t00001 Second, we will build an ndi.daq.system.mfdaq for our visual stimulus system.","title":"Code block 2.1.4.4 Type this into Matlab"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2145-type-this-in-to-matlab","text":"vis_filenav = ndi.file.navigator(S, {'.*\\.smr\\>', 'probemap.txt', 'stims.tsv'},... 'ndi.epoch.epochprobemap_daqsystem','probemap.txt'); vis_rdr = ndi.daq.reader.mfdaq.cedspike2(); vis_mdrdr = ndi.daq.metadatareader('stims.tsv'); vis_system = ndi.daq.system.mfdaq('vis_daqsystem', vis_filenav, vis_rdr, {vis_mdrdr}); % if you haven't already added the daq system, you can add it here: S.daqsystem_add(vis_system); Last, we will tell NDI how these devices are synchronized with each other. These two daq systems have a file in common ( spike2data.smr ), which means that they have a common time base, but NDI doesn't yet know that the two daq systems can be synchronized. Here we add a \"syncrule\" that tells NDI that any daq systems that share at least 2 files per epoch also share a common time clock for that epoch.","title":"Code block 2.1.4.5. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2146-type-this-in-to-matlab","text":"nsf = ndi.time.syncrule.filematch(struct('number_fullpath_matches',2)); S.syncgraph_addrule(nsf);","title":"Code block 2.1.4.6. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#215-opening-the-data-in-ndi-accessing-probes-via-from-ndidaqsystemmfdaq","text":"Now we can use NDI to see the probes that these daq systems can find and to access the data from those probes. Let's look at the electrode probe data first.","title":"2.1.5 Opening the data in NDI: accessing probes via from ndi.daq.system.mfdaq"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2151-type-this-in-to-matlab","text":"p = S.getprobes() % get all of the probes that are in the ndi.session S for i=1:numel(p), p{i}, end; % display the probe information for each probe % look at the number of epochs recorded for probe 1 p_ctx1_list = S.getprobes('name','ctx','reference',1) % returns a cell array of matches p_ctx1 = p_ctx1_list{1}; % take the first one, should be the only one et = p_ctx1.epochtable() for i=1:numel(et), et(i), end; % display the epoch table entries epoch_to_read = 1; You can see that probe 1 has a name of ctx , a reference of 1 , and it is of type n-trode , or an n-channel electrode. It has a software object type of ndi.probe.timeseries.mfdaq , which simply means it is associated with multifunction DAQ systems and returns timeseries observations. Now let's read data from our probe p_ctx1 and plot the data:","title":"Code block 2.1.5.1. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2152-type-this-into-matlab","text":"[data,t,timeref_p_ctx1]=p_ctx1.readtimeseries(epoch_to_read,-Inf,Inf); % read all data from epoch 1 figure(100); plot(t,data); xlabel('Time(s)'); ylabel('Voltage (V)'); set(gca,'xlim',[t(1) t(end)]); box off; This code calls an important function for reading data from probes: ndi.timeseries.readtimeseries :","title":"Code block 2.1.5.2. Type this into Matlab"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#this-code-is-documentation-do-not-type-into-matlab","text":"[D, T, TIMEREF] = ndi.timeseries.readtimeseries(EPOCH_OR_TIMEREF, T0, T1) % Reads data and timestamps from an ndi.timeseries.readtimeseries object with respect % to a specific epoch or an ndi.time.timereference object, from time T0 to T1. When analyzing data or writing apps to analyze data, ndi.timeseries.readtimeseries is one of the most commonly called functions. Now let's also look at our stimulator probe vis_stim . First, let's examine the epochs that are known to vis_stim :","title":"This code is documentation; do not type into Matlab"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2153-type-this-in-to-matlab","text":"p_visstim_list = S.getprobes('name','vis_stim','reference',1) % returns a cell array of matches p_visstim = p_visstim_list{1}; % take the first one, should be the only one et = p_visstim.epochtable() for i=1:numel(et), et(i), end; % display the epoch table entries Now let's read the data from our stimulator. To do this, we are going to ask NDI to read the stimulus timing information in the time units of our electrode probe p_ctx . You'll notice that when we read data from p_ctx1 , readtimeseries returned an ndi.time.timereference object timeref_p_ctx1 . Let's examine this quickly:","title":"Code block 2.1.5.3. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2154-type-this-in-to-matlab","text":"timeref_p_ctx1 You'll see a structure with the following fields: timeref_p_ctx1 timereference with properties referent [1x1 ndi.probe.timeseries.mfdaq] clocktype [1x1 ndi.time.clocktype] epoch 1 time 0 session_ID '412687ba08e28694_c0d9c07d0b8726cf' In NDI, one can refer to time with respect to a variety of different clocks, which is helpful because daq systems typically do not have access to a global clock. We can now ask for the time of the stimulus presentations with respect to our electrode's clock, and add the onset times to the graph.","title":"Code block 2.1.5.4. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2155-type-this-in-to-matlab","text":"[data,t,timeref_stim]=p_visstim.readtimeseries(timeref_p_ctx1,-Inf,Inf); % read all data from epoch 1 of p_ctx1 ! figure(100); hold on; vlt.neuro.stimulus.plot_stimulus_timeseries(7,t.stimon,t.stimon+2,'stimid',data.stimid); Let's look at what readtimeseries returned in the case of a stimulator. It is a little different than when being used with regularly-sampled data.","title":"Code block 2.1.5.5. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2156-type-this-in-to-matlab","text":"t, % show timestamps t.stimon, data, % show data data.stimid, data.parameters{1} Here we examined several fields of the variables data and t returned from readtimeseries from our ndi.probe.timeseries.stimulator . You can see that t is a structure with 2 fields, stimon and stimoff . Our system kept track of when each stimulus began, but in these recordings, we did not have our data acquisition system keep track of when our stimulus turned off. (For later analysis, we will need to read this from the stimulus parameters.) You can also see that data has some metadata about the stimuli. It has the ID number of each stimulus that was shown ( data.stimid(1) is the stimulus that turned on at t.stimon(1) ), and it has the parameters of each stimulus. data.parameters{1} is the parameters of the stimulus with ID number 1.","title":"Code block 2.1.5.6. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#216-discussionfeedback","text":"This concludes our tutorial on the fully manual way of reading data through NDI. In the next tutorial, we'll explore how to create a couple of code objects that read our data directly from a lab's internal structure. Post comments, bugs, questions, or discuss .","title":"2.1.6 Discussion/Feedback"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/","text":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI 2.2 Automating the reading of data from your rig or lab or collaborator In the previous tutorial, we reviewed the steps necessary to create ndi.daq.system objects to read in a dataset, and to add the metadata that is necessary to tell NDI about the contents of each epoch. Most labs use the same data acquisition devices and file organization schemes over and over again, and many labs also store the necessary metadata that describes the probes and subjects that are acquired. NDI allows you to create small software objects that read this metadata directly from the laboratory files. Then, opening an experimental session becomes as simple as a one line command such as S = ndi.setup.vhlab([reference],[foldername]); Once this command has been run once, the directory can be opened with the standard ndi.session.dir command thereafter (though there is no harm to re-issuing the ndi.setup.* command). It's our guess that many labs have at least one person handy with code, and this task might fall to them. This tutorial is written for people who already have some familiarity with coding. If you'd like help creating these functions for your lab, use the issue tracker to post a question. Creating these automatic readers is the biggest stress point in using NDI. The system is relatively easy to use once you are able to read your data! While there are many ways to organize code for custom setups, we have created a motif that is easy to follow. The ndi package in Matlab has a subpackage called setup . Here, we have placed m-files that create an ndi.session with the default settings for various labs or users. The setup package also has a subpackage structure that mimics the subpackage structure of ndi . In Matlab, packages are denoted by putting a + in the folder name: +ndi/+setup/ +daq/ +metadata/ +metadatareader/ +reader/ +system/ 2.2.1 Download an experiment with all vhlab metadata left intact Please download an example data directory called ts_exper2 . Be sure to unzip the files, and we recommend placing them in your Matlab userpath under 'MATLAB/Documents/NDI/' as before. This directory contains the files that were generated at the time of acquisition on Steve's rig in the Fitzpatrick lab at Duke, which is nearly identical to the format that we use in the vhlab now. You'll see that these directories have a few more files. It's not necessary to follow the identities of the files in detail, but let's look at what is in t00001 as an example: t00001/ filetime.txt - The time of the acquisition beginning in seconds from midnight reference.txt = A file describing the probes that are present in this directory spike2data.S2R - This is an irrelevant file! But it's there every time. spike2data.smr - The raw data file acquired by CED's program Spike2 (data acquired via Micro1401) spike2datalog.txt - A text log file (not relevant) stims.mat - The record of stimulation as produced by the stimulus computer. It uses NewStim stimuli and is written by VH lab's RunExperiment program. stimtimes.txt - A text file where each line contains a) the stimulus onset trigger, b) the stimulus ID number between 1-255, and c) an array of video frame trigger times (when the video frame was changed) twophotontimes.txt - A record of triggers of all 2-photon frames. None in this experiment. verticalblanking.txt - A record of each refresh of the monitor. This was not yet used in these experiments but is now part of the VH lab's suite. vhspike2_channelgrouping.txt - A text file that indicates which acquisition channels of our vhspike2 DAQ system are connected to each probe. 2.2.2 Example NDI-matlab files for vhlab To import data from our lab, we created 4 Matlab files: +ndi/+setup/vhlab.m - A function that builds an ndi.session object with daq systems that read from our lab's major devices. +ndi/+setup/+daq/+metadata/epochprobemap_daqsystem_vhlab.m - A class that examines our lab's metadata files that describe the mapping between probes and data acquisition systems and returns an epochprobemap that NDI can interpret. Overrides the default ndi.epoch.epochprobemap_daqsystem.m class that reads the probemap.txt text files we saw in Tutorial 2.1 . +ndi/+setup/+daq/+reader/+mfdaq/+stimulus/vhlabvisspike2.m - A class that reads stimulus event data from our custom acquisition files. +ndi/+daq/+metadatareader/NewStimStims.m - A class that imports stimulus metadata from our lab's open source NewStim package. (We put it in NDI proper because it is an open source program, not intended solely for our lab.) 2.2.3 Creating a setup file. The setup file accomplishes, in an automated fashion, exactly what we did in Tutorial 2.1 : it opens an ndi.session with a particular reference name and directory path, and adds the daq systems that are necessary to read the probe data. It normally lives in +ndi/+setup/LABORINVESTIGATORNAME.m . We include the code here: Code block 2.2.3.1: Content of +ndi/+setup/vhlab.m . (Do not type into Matlab command line.) function S = vhlab(ref, dirname) % ndi.setup.vhlab - initialize an ndi.session.dir with VHLAB devices % % S = ndi.setup.vhlab(REF, DIRNAME) % % Initializes an ndi.session.dir object for the directory % DIRNAME with the standard compliment of VHLAB devices, as % found in ndi.setup.daq.system.vhlab. % % If the devices are already added, they are not re-created. % S = ndi.session.dir(ref, dirname); vhlabdevnames = ndi.setup.daq.system.vhlab(); % returns list of daq system names for i=1:numel(vhlabdevnames), dev = S.daqsystem_load('name',vhlabdevnames{i}); if isempty(dev), S = ndi.setup.daq.system.vhlab(S, vhlabdevnames{i}); end end % update SYNCGRAPH nsf = ndi.time.syncrule.filematch(struct('number_fullpath_matches',2)); n_intan2spike2 = ndi.time.syncrule.filefind(struct('number_fullpath_matches',1, ... 'syncfilename','vhintan_intan2spike2time.txt',... 'daqsystem1','vhintan','daqsystem2','vhvis_spike2')); S.syncgraph_addrule(nsf); S.syncgraph_addrule(n_intan2spike2); This function calls another function that we will see in a minute ( ndi.setup.daq.system.vhlab ) that actually builds the daq system objects that we use in our lab. At the end of this function, 2 ndi.time.syncrules are added that describe how synchronization is performed across our devices. If 2 or more of the same files are present in an epoch, then it is assumed that files are from the same underlying device and they are assumed to have the same time clock. Our custom acquisition code also produces a file vhintan_intan2spike2time.txt that has the time shift and scaling between our Intan acquisition system and our CED Spike2 acquisition system, and we instruct NDI to use that file to synchronize the 2 devices using shift and scale in that file. 2.2.4 Creating a function that creates the daq systems for a lab We also write a function that builds the daq systems that we use in our lab. This process involves 1) naming the daq system, 2) specifying the ndi.daq.reader that is used, 3) specifying any ndi.daq.metadatareader if necessary, and 4) specifying the ndi.file.navigator to find the files that comprise each epoch. If this function here is called with 0 input arguments, then it returns a list of all known daq systems objects for our lab ( 'vhintan', 'vhspike2', 'vhvis_spike2' ). Otherwise, if it is called with the name of a daq system that this function knows how to build, it builds it. It adds the appropriate ndi.daq.reader , ndi.daq.metadatareader , and ndi.file.navigator . Code block 2.2.4.1: Content of +ndi/+setup/+daq/+system/vhlab.m . (Do not type into Matlab command line.) function S = vhlab(S, daqsystemname) % ndi.setup.daq.system.vhlab - initialize daq systems used by VHLAB % % S = ndi.setup.daq.system.vhlab(S, DEVNAME) % % Creates daq systems that look for files in the VHLAB standard recording % scheme, where data from different epochs are organized into % subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the % name a daq systems in the table below. These daq systems are added to the ndi.session % object S. If DEVNAME is a cell list of strings, then multiple items are added. % % If the function is called with no input arguments, then it returns a list % of all valid device names. % % Each epoch is defined by the presence of a 'reference.txt' file, as well % as specific files that are needed by each device as described below. % % Devices created | Description % |------------------|--------------------------------------------------| % | vhintan | ndi.daq.system.mfdaq that looks for files | % | | 'vhintan_channelgrouping.txt' and '*.rhd' | % | vhspike2 | ndi.daq.system.mfdaq that looks for files | % | | 'vhspike2_channelgrouping.txt' and '*.smr' | % | vhvis_spike2 | ndi.daq.system.mfdaq.stimulus that looks for | % | | files 'stimtimes.txt', 'verticalblanking.txt',| % | | 'stims.mat', and 'spike2data.smr'. | % ----------------------------------------------------------------------- % % See also: ndi.file.navigator.epochdir if nargin == 0, S = {'vhintan', 'vhspike2', 'vhvis_spike2'}; return; end; if iscell(daqsystemname), for i=1:length(daqsystemname), S = ndi.setup.daq.system.vhlab(S, daqsystemname{i}); end return; end % all of our daq systems use this custom epochprobemap class epochprobemapclass = 'ndi.setup.daq.metadata.epochprobemap_daqsystem_vhlab'; switch daqsystemname, case 'vhintan', fileparameters = {'reference.txt','.*\\.rhd\\>','vhintan_channelgrouping.txt'}; readerobjectclass = ['ndi.daq.reader.mfdaq.intan']; epochprobemapfileparameters = {'vhintan_channelgrouping.txt'}; mdr = {}; case 'vhspike2', fileparameters = {'reference.txt', '.*\\.smr\\>', 'vhspike2_channelgrouping.txt'}; readerobjectclass = ['ndi.daq.reader.mfdaq.cedspike2']; epochprobemapfileparameters = {'vhspike2_channelgrouping.txt'}; mdr = {}; case 'vhvis_spike2' fileparameters = {'reference.txt', 'stimtimes.txt', 'verticalblanking.txt',... 'stims.mat', 'spike2data.smr'}; readerobjectclass = ['ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2']; epochprobemapfileparameters = {'stimtimes.txt'}; mdr = {ndi.daq.metadatareader.NewStimStims('stims.mat')}; otherwise, error(['Unknown device requested ' daqsystemname '.']); end ft = ndi.file.navigator.epochdir(S, fileparameters, epochprobemapclass, epochprobemapfileparameters); eval(['dr = ' readerobjectclass '();']); mydev = ndi.daq.system.mfdaq(daqsystemname, ft, dr, mdr); % create the daq system object S = S.daqsystem_add(mydev); % add the daq system object to our ndi.session Let's look at the creation of these daq system objects in detail. vhintan - This daq system looks for groups of files with one file named reference.txt , a file that ends in .rhd , and another file called vhintan_channelgrouping.txt . These files are produced by the computer that runs our main acquisition on our rigs, when an Intan acquisition device is used. Together, reference.txt and vhintan_channelgrouping.txt have information about the probes that were used in that recording and the channel mapping of those probes. We will look at these in more detail later. We use the reader ndi.daq.reader.mfdaq.intan , which knows how to read channel data from Intan .rhd files. We tell our daq.system object that 'vhintan_channelgrouping.txt' is the file to use to read epochprobemap information (we will instruct it how to interpret the data in a later function), and there is no metadata reader mdr . We also tell ndi.file.navigator that all of these files will appear in subfolders within our main folder by using the ndi.file.navigator.epochdir class. vhspike2 - This daq system is very similar to vhintan , except that it looks for files that end in .smr and looks for a different epochmap metadata file ( vhspike2_channelgrouping.txt ). vhvis_spike2 - This system is more custom. It relies on text files that are generated by our scripts that run on our CED Micro1401 acquisition system: stimtimes.txt , verticalblanking.txt , spike2data.smr , and a file generated by our visual stimulation system called stims.mat . We add a metadatareader ndi.daq.metadatareader.NewStimStims that knows how to interpret the stims.mat file. We will cover this custom ndi.daq.reader next. 2.2.5 Creating a custom ndi.daq.reader.mfdaq.stimulus object: Our visual stimulation system produces a variety of event data, including information about stimulus onset and offset, the vertical refresh signal from the monitor, an 8-bit code for each stimulus ID, a video frame trigger (every time we update the image on the screen), and a signal we call the \"pretime\" trigger that is generally issued 0.5 seconds before a stimulus is begun (used for baseline subtracting in intrinsic signal imaging experiments among other applications). Our acquisition system running on a CED Micro1401 generates text files related to these events, and we propagate them through as a set of event channels. We define 5 fixed channels for our daq system: mk1 : a marker channel that indicates stim ON (+1) or stim OFF (-1) mk2 : a marker channel that indicates the 8-bit stimulus identifier (stimid) mk3 : a marker channel that indicates when the stimulus period opens (+1) and closes (-1); this includes interstimulus \"background\" time e1 : an event channel that indicates each frame trigger / video frame update e2 : an event channel that indicates the vertical refresh times of the stimulus monitor e3 : an event channel that indicates the pre-stimulus trigger (indicates stimulus is upcoming, usually 0.5s away) Rather than copying the entire code here, we will include a link to the file: ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.m . It should be relatively self-explanitory for someone with a coding background to read and mimic this file. 2.2.6 Creating a custom epochprobemap class In Tutorial 2.1 , we saw that each epoch of data had an associated epochprobemap that contained the following fields of information: name reference type devicestring subjectstring ctx 1 n-trode ced_daqsystem:ai11 treeshrew_12345@mylab.org vis_stim 1 stimulator vis_daqsystem:mk30;text30;md1 treeshrew_12345@mylab.org We need to write a substitute class that is a subclass of ndi.epoch.epochprobemap that reads the epoch information and returns all of this same information. In our vhlab session directories, we always have a single subject whose unique identifier is specified in a text file called subject.txt in the top directory. This file is read, and this text is used as the subjectstring for all probes. In each vhlab epoch directory, we have a file called reference.txt that includes the name, reference, and type of recording present in each epoch. Our class's creator reads this file, and uses it to pull out the name and reference number for all electrode (or imaging) probes. If our reference.txt file indicates that our vhlab \"type\" is singleEC (single extracellular) or 'ntrode', then it looks for other text files that contain a mapping between the name and reference of each probe and the channels that were used on a recording device to acquire it. In this experiment, we have vhspike2_channelgrouping.txt that indicates that our probe 'ctx | 1' was acquired on channel 11 of our CED Micro1401/Spike2 system. Finally, if a file named stimtimes.txt exists in the epoch directory, then we add in an epochprobemap entry for our visual stimulator: name reference type devicestring subjectstring vis_stim 1 stimulator vhvis_spike2:mk1-3;e1-3;md1 treeshrew_12345@mylab.org We will not reproduce the code here but refer the reader to the link for the source code of the class ndi.setup.epoch.epochprobemap_daqsystem_vhlab that is a subclass of ndi.epoch.epochprobemap_daqsystem . 2.2.7 Putting it all together Now that we have these pieces together, we can read our example data that we call ts_exper2 . We will pull up the same plots that we pulled up in Tutorial 2.1 . Code block 2.2.7.1 Type this into Matlab prefix = [userpath filesep 'Documents' filesep 'NDI']; % if you put the folder somewhere else, edit this S = ndi.setup.vhlab('ts_exper2',[prefix filesep 'ts_exper2']); p_ctx1_list = S.getprobes('name','ctx','reference',1) % returns a cell array of matches p_ctx1 = p_ctx1_list{1}; % take the first one, should be the only one epoch_to_read = 1; [data,t,timeref_p_ctx1]=p_ctx1.readtimeseries(epoch_to_read,-Inf,Inf); % read all data from epoch 1 figure(100); plot(t,data); xlabel('Time(s)'); ylabel('Voltage (V)'); set(gca,'xlim',[t(1) t(end)]); box off; p_visstim_list = S.getprobes('type','stimulator') % returns a cell array of matches p_visstim = p_visstim_list{1}; % take the first one, should be the only one [data,t,timeref_stim]=p_visstim.readtimeseries(timeref_p_ctx1,-Inf,Inf); % read all data from epoch 1 of p_ctx1 ! figure(100); hold on; vlt.neuro.stimulus.plot_stimulus_timeseries(7,t.stimon,t.stimoff,'stimid',data.stimid); If you are paying close attention, you'll notice we got a little more information out of the readtimeseries command here. t.stimoff exists (it's extracted from our stimulus metadata), so we don't have to know the stimulus duration from elsewhere. That information is not directly accessible in the event record of the smr file, so there is an advantage to reading all the metadata that is available from all sources with a custom object. 2.2.8 Discussion/Feedback This concludes our tutorial on setting up code files to read one's own data and metadata into NDI. To help make this process clearer, we also include 3 other case studies in reading data (tutorials currently under construction): Alessandra Angelluci lab (reads unpublished recording) Don Katz lab (reads Mukherjee et al., 2019 ) Eve Marder lab (reads Hamood et al., 2015 ) Post comments, bugs, questions, or discuss .","title":"2.2 Automating data reading with NDI"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#tutorial-2-analyzing-your-first-electrophysiology-experiment-with-ndi","text":"","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#22-automating-the-reading-of-data-from-your-rig-or-lab-or-collaborator","text":"In the previous tutorial, we reviewed the steps necessary to create ndi.daq.system objects to read in a dataset, and to add the metadata that is necessary to tell NDI about the contents of each epoch. Most labs use the same data acquisition devices and file organization schemes over and over again, and many labs also store the necessary metadata that describes the probes and subjects that are acquired. NDI allows you to create small software objects that read this metadata directly from the laboratory files. Then, opening an experimental session becomes as simple as a one line command such as S = ndi.setup.vhlab([reference],[foldername]); Once this command has been run once, the directory can be opened with the standard ndi.session.dir command thereafter (though there is no harm to re-issuing the ndi.setup.* command). It's our guess that many labs have at least one person handy with code, and this task might fall to them. This tutorial is written for people who already have some familiarity with coding. If you'd like help creating these functions for your lab, use the issue tracker to post a question. Creating these automatic readers is the biggest stress point in using NDI. The system is relatively easy to use once you are able to read your data! While there are many ways to organize code for custom setups, we have created a motif that is easy to follow. The ndi package in Matlab has a subpackage called setup . Here, we have placed m-files that create an ndi.session with the default settings for various labs or users. The setup package also has a subpackage structure that mimics the subpackage structure of ndi . In Matlab, packages are denoted by putting a + in the folder name: +ndi/+setup/ +daq/ +metadata/ +metadatareader/ +reader/ +system/","title":"2.2 Automating the reading of data from your rig or lab or collaborator"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#221-download-an-experiment-with-all-vhlab-metadata-left-intact","text":"Please download an example data directory called ts_exper2 . Be sure to unzip the files, and we recommend placing them in your Matlab userpath under 'MATLAB/Documents/NDI/' as before. This directory contains the files that were generated at the time of acquisition on Steve's rig in the Fitzpatrick lab at Duke, which is nearly identical to the format that we use in the vhlab now. You'll see that these directories have a few more files. It's not necessary to follow the identities of the files in detail, but let's look at what is in t00001 as an example: t00001/ filetime.txt - The time of the acquisition beginning in seconds from midnight reference.txt = A file describing the probes that are present in this directory spike2data.S2R - This is an irrelevant file! But it's there every time. spike2data.smr - The raw data file acquired by CED's program Spike2 (data acquired via Micro1401) spike2datalog.txt - A text log file (not relevant) stims.mat - The record of stimulation as produced by the stimulus computer. It uses NewStim stimuli and is written by VH lab's RunExperiment program. stimtimes.txt - A text file where each line contains a) the stimulus onset trigger, b) the stimulus ID number between 1-255, and c) an array of video frame trigger times (when the video frame was changed) twophotontimes.txt - A record of triggers of all 2-photon frames. None in this experiment. verticalblanking.txt - A record of each refresh of the monitor. This was not yet used in these experiments but is now part of the VH lab's suite. vhspike2_channelgrouping.txt - A text file that indicates which acquisition channels of our vhspike2 DAQ system are connected to each probe.","title":"2.2.1 Download an experiment with all vhlab metadata left intact"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#222-example-ndi-matlab-files-for-vhlab","text":"To import data from our lab, we created 4 Matlab files: +ndi/+setup/vhlab.m - A function that builds an ndi.session object with daq systems that read from our lab's major devices. +ndi/+setup/+daq/+metadata/epochprobemap_daqsystem_vhlab.m - A class that examines our lab's metadata files that describe the mapping between probes and data acquisition systems and returns an epochprobemap that NDI can interpret. Overrides the default ndi.epoch.epochprobemap_daqsystem.m class that reads the probemap.txt text files we saw in Tutorial 2.1 . +ndi/+setup/+daq/+reader/+mfdaq/+stimulus/vhlabvisspike2.m - A class that reads stimulus event data from our custom acquisition files. +ndi/+daq/+metadatareader/NewStimStims.m - A class that imports stimulus metadata from our lab's open source NewStim package. (We put it in NDI proper because it is an open source program, not intended solely for our lab.)","title":"2.2.2 Example NDI-matlab files for vhlab"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#223-creating-a-setup-file","text":"The setup file accomplishes, in an automated fashion, exactly what we did in Tutorial 2.1 : it opens an ndi.session with a particular reference name and directory path, and adds the daq systems that are necessary to read the probe data. It normally lives in +ndi/+setup/LABORINVESTIGATORNAME.m . We include the code here:","title":"2.2.3 Creating a setup file."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#code-block-2231-content-of-ndisetupvhlabm-do-not-type-into-matlab-command-line","text":"function S = vhlab(ref, dirname) % ndi.setup.vhlab - initialize an ndi.session.dir with VHLAB devices % % S = ndi.setup.vhlab(REF, DIRNAME) % % Initializes an ndi.session.dir object for the directory % DIRNAME with the standard compliment of VHLAB devices, as % found in ndi.setup.daq.system.vhlab. % % If the devices are already added, they are not re-created. % S = ndi.session.dir(ref, dirname); vhlabdevnames = ndi.setup.daq.system.vhlab(); % returns list of daq system names for i=1:numel(vhlabdevnames), dev = S.daqsystem_load('name',vhlabdevnames{i}); if isempty(dev), S = ndi.setup.daq.system.vhlab(S, vhlabdevnames{i}); end end % update SYNCGRAPH nsf = ndi.time.syncrule.filematch(struct('number_fullpath_matches',2)); n_intan2spike2 = ndi.time.syncrule.filefind(struct('number_fullpath_matches',1, ... 'syncfilename','vhintan_intan2spike2time.txt',... 'daqsystem1','vhintan','daqsystem2','vhvis_spike2')); S.syncgraph_addrule(nsf); S.syncgraph_addrule(n_intan2spike2); This function calls another function that we will see in a minute ( ndi.setup.daq.system.vhlab ) that actually builds the daq system objects that we use in our lab. At the end of this function, 2 ndi.time.syncrules are added that describe how synchronization is performed across our devices. If 2 or more of the same files are present in an epoch, then it is assumed that files are from the same underlying device and they are assumed to have the same time clock. Our custom acquisition code also produces a file vhintan_intan2spike2time.txt that has the time shift and scaling between our Intan acquisition system and our CED Spike2 acquisition system, and we instruct NDI to use that file to synchronize the 2 devices using shift and scale in that file.","title":"Code block 2.2.3.1: Content of +ndi/+setup/vhlab.m. (Do not type into Matlab command line.)"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#224-creating-a-function-that-creates-the-daq-systems-for-a-lab","text":"We also write a function that builds the daq systems that we use in our lab. This process involves 1) naming the daq system, 2) specifying the ndi.daq.reader that is used, 3) specifying any ndi.daq.metadatareader if necessary, and 4) specifying the ndi.file.navigator to find the files that comprise each epoch. If this function here is called with 0 input arguments, then it returns a list of all known daq systems objects for our lab ( 'vhintan', 'vhspike2', 'vhvis_spike2' ). Otherwise, if it is called with the name of a daq system that this function knows how to build, it builds it. It adds the appropriate ndi.daq.reader , ndi.daq.metadatareader , and ndi.file.navigator .","title":"2.2.4 Creating a function that creates the daq systems for a lab"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#code-block-2241-content-of-ndisetupdaqsystemvhlabm-do-not-type-into-matlab-command-line","text":"function S = vhlab(S, daqsystemname) % ndi.setup.daq.system.vhlab - initialize daq systems used by VHLAB % % S = ndi.setup.daq.system.vhlab(S, DEVNAME) % % Creates daq systems that look for files in the VHLAB standard recording % scheme, where data from different epochs are organized into % subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the % name a daq systems in the table below. These daq systems are added to the ndi.session % object S. If DEVNAME is a cell list of strings, then multiple items are added. % % If the function is called with no input arguments, then it returns a list % of all valid device names. % % Each epoch is defined by the presence of a 'reference.txt' file, as well % as specific files that are needed by each device as described below. % % Devices created | Description % |------------------|--------------------------------------------------| % | vhintan | ndi.daq.system.mfdaq that looks for files | % | | 'vhintan_channelgrouping.txt' and '*.rhd' | % | vhspike2 | ndi.daq.system.mfdaq that looks for files | % | | 'vhspike2_channelgrouping.txt' and '*.smr' | % | vhvis_spike2 | ndi.daq.system.mfdaq.stimulus that looks for | % | | files 'stimtimes.txt', 'verticalblanking.txt',| % | | 'stims.mat', and 'spike2data.smr'. | % ----------------------------------------------------------------------- % % See also: ndi.file.navigator.epochdir if nargin == 0, S = {'vhintan', 'vhspike2', 'vhvis_spike2'}; return; end; if iscell(daqsystemname), for i=1:length(daqsystemname), S = ndi.setup.daq.system.vhlab(S, daqsystemname{i}); end return; end % all of our daq systems use this custom epochprobemap class epochprobemapclass = 'ndi.setup.daq.metadata.epochprobemap_daqsystem_vhlab'; switch daqsystemname, case 'vhintan', fileparameters = {'reference.txt','.*\\.rhd\\>','vhintan_channelgrouping.txt'}; readerobjectclass = ['ndi.daq.reader.mfdaq.intan']; epochprobemapfileparameters = {'vhintan_channelgrouping.txt'}; mdr = {}; case 'vhspike2', fileparameters = {'reference.txt', '.*\\.smr\\>', 'vhspike2_channelgrouping.txt'}; readerobjectclass = ['ndi.daq.reader.mfdaq.cedspike2']; epochprobemapfileparameters = {'vhspike2_channelgrouping.txt'}; mdr = {}; case 'vhvis_spike2' fileparameters = {'reference.txt', 'stimtimes.txt', 'verticalblanking.txt',... 'stims.mat', 'spike2data.smr'}; readerobjectclass = ['ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2']; epochprobemapfileparameters = {'stimtimes.txt'}; mdr = {ndi.daq.metadatareader.NewStimStims('stims.mat')}; otherwise, error(['Unknown device requested ' daqsystemname '.']); end ft = ndi.file.navigator.epochdir(S, fileparameters, epochprobemapclass, epochprobemapfileparameters); eval(['dr = ' readerobjectclass '();']); mydev = ndi.daq.system.mfdaq(daqsystemname, ft, dr, mdr); % create the daq system object S = S.daqsystem_add(mydev); % add the daq system object to our ndi.session Let's look at the creation of these daq system objects in detail. vhintan - This daq system looks for groups of files with one file named reference.txt , a file that ends in .rhd , and another file called vhintan_channelgrouping.txt . These files are produced by the computer that runs our main acquisition on our rigs, when an Intan acquisition device is used. Together, reference.txt and vhintan_channelgrouping.txt have information about the probes that were used in that recording and the channel mapping of those probes. We will look at these in more detail later. We use the reader ndi.daq.reader.mfdaq.intan , which knows how to read channel data from Intan .rhd files. We tell our daq.system object that 'vhintan_channelgrouping.txt' is the file to use to read epochprobemap information (we will instruct it how to interpret the data in a later function), and there is no metadata reader mdr . We also tell ndi.file.navigator that all of these files will appear in subfolders within our main folder by using the ndi.file.navigator.epochdir class. vhspike2 - This daq system is very similar to vhintan , except that it looks for files that end in .smr and looks for a different epochmap metadata file ( vhspike2_channelgrouping.txt ). vhvis_spike2 - This system is more custom. It relies on text files that are generated by our scripts that run on our CED Micro1401 acquisition system: stimtimes.txt , verticalblanking.txt , spike2data.smr , and a file generated by our visual stimulation system called stims.mat . We add a metadatareader ndi.daq.metadatareader.NewStimStims that knows how to interpret the stims.mat file. We will cover this custom ndi.daq.reader next.","title":"Code block 2.2.4.1: Content of +ndi/+setup/+daq/+system/vhlab.m. (Do not type into Matlab command line.)"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#225-creating-a-custom-ndidaqreadermfdaqstimulus-object","text":"Our visual stimulation system produces a variety of event data, including information about stimulus onset and offset, the vertical refresh signal from the monitor, an 8-bit code for each stimulus ID, a video frame trigger (every time we update the image on the screen), and a signal we call the \"pretime\" trigger that is generally issued 0.5 seconds before a stimulus is begun (used for baseline subtracting in intrinsic signal imaging experiments among other applications). Our acquisition system running on a CED Micro1401 generates text files related to these events, and we propagate them through as a set of event channels. We define 5 fixed channels for our daq system: mk1 : a marker channel that indicates stim ON (+1) or stim OFF (-1) mk2 : a marker channel that indicates the 8-bit stimulus identifier (stimid) mk3 : a marker channel that indicates when the stimulus period opens (+1) and closes (-1); this includes interstimulus \"background\" time e1 : an event channel that indicates each frame trigger / video frame update e2 : an event channel that indicates the vertical refresh times of the stimulus monitor e3 : an event channel that indicates the pre-stimulus trigger (indicates stimulus is upcoming, usually 0.5s away) Rather than copying the entire code here, we will include a link to the file: ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.m . It should be relatively self-explanitory for someone with a coding background to read and mimic this file.","title":"2.2.5 Creating a custom ndi.daq.reader.mfdaq.stimulus object:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#226-creating-a-custom-epochprobemap-class","text":"In Tutorial 2.1 , we saw that each epoch of data had an associated epochprobemap that contained the following fields of information: name reference type devicestring subjectstring ctx 1 n-trode ced_daqsystem:ai11 treeshrew_12345@mylab.org vis_stim 1 stimulator vis_daqsystem:mk30;text30;md1 treeshrew_12345@mylab.org We need to write a substitute class that is a subclass of ndi.epoch.epochprobemap that reads the epoch information and returns all of this same information. In our vhlab session directories, we always have a single subject whose unique identifier is specified in a text file called subject.txt in the top directory. This file is read, and this text is used as the subjectstring for all probes. In each vhlab epoch directory, we have a file called reference.txt that includes the name, reference, and type of recording present in each epoch. Our class's creator reads this file, and uses it to pull out the name and reference number for all electrode (or imaging) probes. If our reference.txt file indicates that our vhlab \"type\" is singleEC (single extracellular) or 'ntrode', then it looks for other text files that contain a mapping between the name and reference of each probe and the channels that were used on a recording device to acquire it. In this experiment, we have vhspike2_channelgrouping.txt that indicates that our probe 'ctx | 1' was acquired on channel 11 of our CED Micro1401/Spike2 system. Finally, if a file named stimtimes.txt exists in the epoch directory, then we add in an epochprobemap entry for our visual stimulator: name reference type devicestring subjectstring vis_stim 1 stimulator vhvis_spike2:mk1-3;e1-3;md1 treeshrew_12345@mylab.org We will not reproduce the code here but refer the reader to the link for the source code of the class ndi.setup.epoch.epochprobemap_daqsystem_vhlab that is a subclass of ndi.epoch.epochprobemap_daqsystem .","title":"2.2.6 Creating a custom epochprobemap class"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#227-putting-it-all-together","text":"Now that we have these pieces together, we can read our example data that we call ts_exper2 . We will pull up the same plots that we pulled up in Tutorial 2.1 .","title":"2.2.7 Putting it all together"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#code-block-2271-type-this-into-matlab","text":"prefix = [userpath filesep 'Documents' filesep 'NDI']; % if you put the folder somewhere else, edit this S = ndi.setup.vhlab('ts_exper2',[prefix filesep 'ts_exper2']); p_ctx1_list = S.getprobes('name','ctx','reference',1) % returns a cell array of matches p_ctx1 = p_ctx1_list{1}; % take the first one, should be the only one epoch_to_read = 1; [data,t,timeref_p_ctx1]=p_ctx1.readtimeseries(epoch_to_read,-Inf,Inf); % read all data from epoch 1 figure(100); plot(t,data); xlabel('Time(s)'); ylabel('Voltage (V)'); set(gca,'xlim',[t(1) t(end)]); box off; p_visstim_list = S.getprobes('type','stimulator') % returns a cell array of matches p_visstim = p_visstim_list{1}; % take the first one, should be the only one [data,t,timeref_stim]=p_visstim.readtimeseries(timeref_p_ctx1,-Inf,Inf); % read all data from epoch 1 of p_ctx1 ! figure(100); hold on; vlt.neuro.stimulus.plot_stimulus_timeseries(7,t.stimon,t.stimoff,'stimid',data.stimid); If you are paying close attention, you'll notice we got a little more information out of the readtimeseries command here. t.stimoff exists (it's extracted from our stimulus metadata), so we don't have to know the stimulus duration from elsewhere. That information is not directly accessible in the event record of the smr file, so there is an advantage to reading all the metadata that is available from all sources with a custom object.","title":"Code block 2.2.7.1 Type this into Matlab"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#228-discussionfeedback","text":"This concludes our tutorial on setting up code files to read one's own data and metadata into NDI. To help make this process clearer, we also include 3 other case studies in reading data (tutorials currently under construction): Alessandra Angelluci lab (reads unpublished recording) Don Katz lab (reads Mukherjee et al., 2019 ) Eve Marder lab (reads Hamood et al., 2015 ) Post comments, bugs, questions, or discuss .","title":"2.2.8 Discussion/Feedback"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/","text":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI Tutorial 2.3: Using apps to analyze data (spike sorting) You've seen how to read data from probes in NDI. Now suppose we want to do some analysis of this data? How would we do it? Clearly, one could write functions in Matlab that read the data and perform some sort of analysis. But it would be great to share (or borrow) those functions across the open source community, and to develop \"apps\" that excel at performing specific tasks. NDI allows both approaches. Tutorial 2.3.1: What is an 'app' in NDI? ndi.app objects An app for our purposes is any application program that can read data from NDI and perform some analysis or computation on this data. Some apps exist outside of NDI, and know how to read data from NDI experiments and write results back to NDI experimental sessions. One example of such an app is the spike sorting program JRClust. There is another set of apps that are developed specifically for NDI that are members of a special parent class called ndi.app . This parent class performs some services to help app developers maintain a consistant approach to make it easier for users and programmers that want to use the app to easily figure out what it does and how to use it. Here, we will examine one of these apps that we made for spike extraction. Just like Windows computers come with NotePad and Mac computers come with TextEdit, our ndi.app.spikeextractor is a plain-but-usable program for extracting spike waveforms from voltage records. It is suitable for spike extraction situations where the channel count for each electrode is low, such as single electrodes or tetrodes. It is not suitable for dense, multichannel electrodes like NeuroPixels or dense NeuroNexus probes. We will use the program first as though we knew how to use it by magic, and then we will go through how one could figure out how to use the program if one didn't know. Tutorial 2.3.2: Extracting spikes using ndi.app.spikeextractor Code block 2.3.2.1. Type this into Matlab. dirname = [userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2']; % change this if you put the example somewhere else ref = 'ts_exper2'; S = ndi.setup.vhlab(ref,dirname); % let's find our probes that correspond to extracellular electrodes p = S.getprobes('type','n-trode'); % make a new app instance se = ndi.app.spikeextractor(S); % find out what the spike extraction parameters are extraction_param_struct = se.defaultstruct_appdoc('extraction_parameters'); % if we wanted to modify these parameters, we could extraction_param_struct.threshold_parameter = 4; extraction_param_struct.threshold_sign = 1; my_extraction_name{1} = 'my_positive_extraction_params'; extraction_param_doc = se.add_appdoc('extraction_parameters',extraction_param_struct,'Replace',my_extraction_name{1}); my_extraction_name{2} = 'my_negative_extraction_params'; extraction_param_struct.threshold_parameter = -4; extraction_param_struct.threshold_sign = -1; extraction_param_doc_2 = se.add_appdoc('extraction_parameters',extraction_param_struct,'Replace',my_extraction_name{2}); % we will add a parameter document to our database that our extractor will use % now let's perform the extraction over all epochs redo = 1; % redo it if we already did it % we know there are two probes, so do it for both se.extract(p{1},[],my_extraction_name{1},redo); se.extract(p{2},[],my_extraction_name{2},redo); Now, let's take a look at what we extracted: Code block 2.3.2.2 Type this into Matlab. % now let's take a look at what we got for the first probe, first epoch epoch_id = 't00001'; [spikes,waveparameters,spikewaves_doc] = se.loaddata_appdoc('spikewaves',p{1},epoch_id,my_extraction_name{1}); % let's plot these waveforms t_spike = [waveparameters.S0:waveparameters.S1] * 1/waveparameters.samplerate; % create a time vector % spikes is a 3-d matrix. % The first dimension has the number of samples per spike. % The second dimension has data from each channel. Because this is a single electrode, there is only one channel. If it were a tetrode, this would be 4. % The third dimension is the number of spikes detected. size(spikes) figure(101); plot(t_spike,squeeze(spikes)); xlabel('Time (s)'); ylabel('Voltage'); box off; % We can see how we did by plotting the spike times back with the raw data: [spiketimes,spiketimes_doc] = se.loaddata_appdoc('spiketimes',p{1},epoch_id,my_extraction_name{1}); [d,t] = readtimeseries(p{1},epoch_id,-Inf,Inf); figure(102); plot(t,d); hold on; samples = round(vlt.signal.value2sample(spiketimes, 1/(t(2)-t(1)), 0)); plot(t(samples),d(samples),'ko'); % mark each spike peak location with a circle 2.3.3 Spike sorting using ndi.app.spikesorter Now we will feed our results to our plain spikesorting application, which relies on either Kmeans clustering the KlustaKwik clustering tool (Harris KD, J. Neurophys. , 2000). As a first step, we will create a sorting parameters document to specify how we will perform the sorting. This program includes a small graphical user interface to help in choosing the clusters (called in the line that has ssa.spike_sort ). For a quick video demo of how to use this graphical user interface in the context of this tutorial, click here . Code block 2.3.3.1 Type this into Matlab. ssa = ndi.app.spikesorter(S); sorting_params_struct = ssa.defaultstruct_appdoc('sorting_parameters'); my_sorting_name = 'my_sorting_params'; sorting_param_doc = ssa.add_appdoc('sorting_parameters',sorting_params_struct,'Replace',my_sorting_name); spike_cluster_doc = ssa.spike_sort(p{1},my_extraction_name{1},my_sorting_name,redo) ssa.clusters2neurons(p{1},my_sorting_name,my_extraction_name{1},redo) spike_cluster_doc = ssa.spike_sort(p{2},my_extraction_name{2},my_sorting_name,redo) ssa.clusters2neurons(p{2},my_sorting_name,my_extraction_name{2}) Now let's check the spike times of the the first neuron Code block 2.3.3.2 Type this into Matlab. e = S.getelements('element.type','spikes','element.name','ctx_1') [D,T] = e{1}.readtimeseries('t00001',-Inf,Inf); figure(102); hold on; samples2 = round(vlt.signal.value2sample(T, 1/(t(2)-t(1)), 0)); plot(T,d(samples2), 'gs'); % now spike times from neuron 1 are plotted as green squares You can observe that most of the spiketimes that were detected on the first probe are part of neuron 1, but there are some lower amplitude peaks that are not. 2.3.4 How can we learn about the functionality of ndi.app objects? In section 2.2, we used ndi.app.spikeextractor as though we were born knowning what to do. How could we learn how to use a new app if there isn't a tutorial available? There are three great ways to learn about what apps do and how to use them. Read the main documentation for the app by typing help *appclass* or doc *appclass* into the Matlab command line. For example, try help ndi.app.spikeextractor . Many apps follow what we call the appdoc convention for creating the documents that they create and loading the documents and data that they have generated. This is a convention that have developed relatively recently, and we are in the process of converting all of our included ndi.app objects to use this form. If an app follows ndi.app.appdoc (which means it is a member of the ndi.app.appdoc class), then they will have a set of methods called: Method Description appdoc_description The help information should have a full description of all database documents that are produced by the application. Type help *appname*/appdoc_description . For example, help ndi.app.spikeextractor/appdoc_description add_appdoc Add a new document of a given type to the database, using the app clear_appdoc Delete a document of a given type from the database, using the app find_appdoc Find the NDI document for a given type, using the app loaddata_appdoc Load binary data associated with an NDI document, using the app Let's look at the document types that are written and needed by ndi.app.spikeextractor : Code block 2.3.4.1. Type this into Matlab help ndi.app.spikeextractor/appdoc_description You see a long bit of text that describes all of the document types that are generated and calculated by ndi.app.spikeextractor . Here's a table of the document types and their \"about\" info for ndi.app.spikeextractor: Appdoc Type Description EXTRACTION_PARAMETERS EXTRACTION_PARAMETERS documents hold the parameters that are to be used to guide the extraction of spikewaves EXTRACTION_PARAMETERS_MODIFICATION EXTRACTION_PARAMETERS_MODIFICATION documents allow the user to modify the spike extraction parameters for a specific epoch SPIKEWAVES SPIKEWAVES documents store the spike waveforms that are read during a spike extraction. It DEPENDS ON the ndi.time.timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that descibed the extraction SPIKETIMES SPIKETIMES documents store the times spike waveforms that are read during a spike extraction. It DEPENDS ON the ndi.time.timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that descibed the extraction. The times are in the local epoch time units. If the app writer really loves his/her/their users, then he/she/they will create a tutorial. Look for a tutorial, that should be referenced in the Matlab help. We are working on adding tutorials for all of our included applications, but we are not there yet. Discussion/Feedback 2.3.5 Post comments, bugs, questions, or discuss .","title":"2.3 Using apps to analyze data (example - spike sorting)"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#tutorial-2-analyzing-your-first-electrophysiology-experiment-with-ndi","text":"","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#tutorial-23-using-apps-to-analyze-data-spike-sorting","text":"You've seen how to read data from probes in NDI. Now suppose we want to do some analysis of this data? How would we do it? Clearly, one could write functions in Matlab that read the data and perform some sort of analysis. But it would be great to share (or borrow) those functions across the open source community, and to develop \"apps\" that excel at performing specific tasks. NDI allows both approaches.","title":"Tutorial 2.3: Using apps to analyze data (spike sorting)"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#tutorial-231-what-is-an-app-in-ndi-ndiapp-objects","text":"An app for our purposes is any application program that can read data from NDI and perform some analysis or computation on this data. Some apps exist outside of NDI, and know how to read data from NDI experiments and write results back to NDI experimental sessions. One example of such an app is the spike sorting program JRClust. There is another set of apps that are developed specifically for NDI that are members of a special parent class called ndi.app . This parent class performs some services to help app developers maintain a consistant approach to make it easier for users and programmers that want to use the app to easily figure out what it does and how to use it. Here, we will examine one of these apps that we made for spike extraction. Just like Windows computers come with NotePad and Mac computers come with TextEdit, our ndi.app.spikeextractor is a plain-but-usable program for extracting spike waveforms from voltage records. It is suitable for spike extraction situations where the channel count for each electrode is low, such as single electrodes or tetrodes. It is not suitable for dense, multichannel electrodes like NeuroPixels or dense NeuroNexus probes. We will use the program first as though we knew how to use it by magic, and then we will go through how one could figure out how to use the program if one didn't know.","title":"Tutorial 2.3.1: What is an 'app' in NDI? ndi.app objects"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#tutorial-232-extracting-spikes-using-ndiappspikeextractor","text":"","title":"Tutorial 2.3.2: Extracting spikes using ndi.app.spikeextractor"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#code-block-2321-type-this-into-matlab","text":"dirname = [userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2']; % change this if you put the example somewhere else ref = 'ts_exper2'; S = ndi.setup.vhlab(ref,dirname); % let's find our probes that correspond to extracellular electrodes p = S.getprobes('type','n-trode'); % make a new app instance se = ndi.app.spikeextractor(S); % find out what the spike extraction parameters are extraction_param_struct = se.defaultstruct_appdoc('extraction_parameters'); % if we wanted to modify these parameters, we could extraction_param_struct.threshold_parameter = 4; extraction_param_struct.threshold_sign = 1; my_extraction_name{1} = 'my_positive_extraction_params'; extraction_param_doc = se.add_appdoc('extraction_parameters',extraction_param_struct,'Replace',my_extraction_name{1}); my_extraction_name{2} = 'my_negative_extraction_params'; extraction_param_struct.threshold_parameter = -4; extraction_param_struct.threshold_sign = -1; extraction_param_doc_2 = se.add_appdoc('extraction_parameters',extraction_param_struct,'Replace',my_extraction_name{2}); % we will add a parameter document to our database that our extractor will use % now let's perform the extraction over all epochs redo = 1; % redo it if we already did it % we know there are two probes, so do it for both se.extract(p{1},[],my_extraction_name{1},redo); se.extract(p{2},[],my_extraction_name{2},redo); Now, let's take a look at what we extracted:","title":"Code block 2.3.2.1. Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#code-block-2322-type-this-into-matlab","text":"% now let's take a look at what we got for the first probe, first epoch epoch_id = 't00001'; [spikes,waveparameters,spikewaves_doc] = se.loaddata_appdoc('spikewaves',p{1},epoch_id,my_extraction_name{1}); % let's plot these waveforms t_spike = [waveparameters.S0:waveparameters.S1] * 1/waveparameters.samplerate; % create a time vector % spikes is a 3-d matrix. % The first dimension has the number of samples per spike. % The second dimension has data from each channel. Because this is a single electrode, there is only one channel. If it were a tetrode, this would be 4. % The third dimension is the number of spikes detected. size(spikes) figure(101); plot(t_spike,squeeze(spikes)); xlabel('Time (s)'); ylabel('Voltage'); box off; % We can see how we did by plotting the spike times back with the raw data: [spiketimes,spiketimes_doc] = se.loaddata_appdoc('spiketimes',p{1},epoch_id,my_extraction_name{1}); [d,t] = readtimeseries(p{1},epoch_id,-Inf,Inf); figure(102); plot(t,d); hold on; samples = round(vlt.signal.value2sample(spiketimes, 1/(t(2)-t(1)), 0)); plot(t(samples),d(samples),'ko'); % mark each spike peak location with a circle","title":"Code block 2.3.2.2 Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#233-spike-sorting-using-ndiappspikesorter","text":"Now we will feed our results to our plain spikesorting application, which relies on either Kmeans clustering the KlustaKwik clustering tool (Harris KD, J. Neurophys. , 2000). As a first step, we will create a sorting parameters document to specify how we will perform the sorting. This program includes a small graphical user interface to help in choosing the clusters (called in the line that has ssa.spike_sort ). For a quick video demo of how to use this graphical user interface in the context of this tutorial, click here .","title":"2.3.3 Spike sorting using ndi.app.spikesorter"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#code-block-2331-type-this-into-matlab","text":"ssa = ndi.app.spikesorter(S); sorting_params_struct = ssa.defaultstruct_appdoc('sorting_parameters'); my_sorting_name = 'my_sorting_params'; sorting_param_doc = ssa.add_appdoc('sorting_parameters',sorting_params_struct,'Replace',my_sorting_name); spike_cluster_doc = ssa.spike_sort(p{1},my_extraction_name{1},my_sorting_name,redo) ssa.clusters2neurons(p{1},my_sorting_name,my_extraction_name{1},redo) spike_cluster_doc = ssa.spike_sort(p{2},my_extraction_name{2},my_sorting_name,redo) ssa.clusters2neurons(p{2},my_sorting_name,my_extraction_name{2}) Now let's check the spike times of the the first neuron","title":"Code block 2.3.3.1 Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#code-block-2332-type-this-into-matlab","text":"e = S.getelements('element.type','spikes','element.name','ctx_1') [D,T] = e{1}.readtimeseries('t00001',-Inf,Inf); figure(102); hold on; samples2 = round(vlt.signal.value2sample(T, 1/(t(2)-t(1)), 0)); plot(T,d(samples2), 'gs'); % now spike times from neuron 1 are plotted as green squares You can observe that most of the spiketimes that were detected on the first probe are part of neuron 1, but there are some lower amplitude peaks that are not.","title":"Code block 2.3.3.2 Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#234-how-can-we-learn-about-the-functionality-of-ndiapp-objects","text":"In section 2.2, we used ndi.app.spikeextractor as though we were born knowning what to do. How could we learn how to use a new app if there isn't a tutorial available? There are three great ways to learn about what apps do and how to use them. Read the main documentation for the app by typing help *appclass* or doc *appclass* into the Matlab command line. For example, try help ndi.app.spikeextractor . Many apps follow what we call the appdoc convention for creating the documents that they create and loading the documents and data that they have generated. This is a convention that have developed relatively recently, and we are in the process of converting all of our included ndi.app objects to use this form. If an app follows ndi.app.appdoc (which means it is a member of the ndi.app.appdoc class), then they will have a set of methods called: Method Description appdoc_description The help information should have a full description of all database documents that are produced by the application. Type help *appname*/appdoc_description . For example, help ndi.app.spikeextractor/appdoc_description add_appdoc Add a new document of a given type to the database, using the app clear_appdoc Delete a document of a given type from the database, using the app find_appdoc Find the NDI document for a given type, using the app loaddata_appdoc Load binary data associated with an NDI document, using the app Let's look at the document types that are written and needed by ndi.app.spikeextractor :","title":"2.3.4 How can we learn about the functionality of ndi.app objects?"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#code-block-2341-type-this-into-matlab","text":"help ndi.app.spikeextractor/appdoc_description You see a long bit of text that describes all of the document types that are generated and calculated by ndi.app.spikeextractor . Here's a table of the document types and their \"about\" info for ndi.app.spikeextractor: Appdoc Type Description EXTRACTION_PARAMETERS EXTRACTION_PARAMETERS documents hold the parameters that are to be used to guide the extraction of spikewaves EXTRACTION_PARAMETERS_MODIFICATION EXTRACTION_PARAMETERS_MODIFICATION documents allow the user to modify the spike extraction parameters for a specific epoch SPIKEWAVES SPIKEWAVES documents store the spike waveforms that are read during a spike extraction. It DEPENDS ON the ndi.time.timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that descibed the extraction SPIKETIMES SPIKETIMES documents store the times spike waveforms that are read during a spike extraction. It DEPENDS ON the ndi.time.timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that descibed the extraction. The times are in the local epoch time units. If the app writer really loves his/her/their users, then he/she/they will create a tutorial. Look for a tutorial, that should be referenced in the Matlab help. We are working on adding tutorials for all of our included applications, but we are not there yet.","title":"Code block 2.3.4.1. Type this into Matlab"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#discussionfeedback-235","text":"Post comments, bugs, questions, or discuss .","title":"Discussion/Feedback 2.3.5"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/","text":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI 2.4 Analyzing stimulus responses In the last tutorial, we saw how to use applications to identify spikes from electrophysiology recordings. Now we will employ another plain app for calculating responses to stimulation. Note that this tutorial requires that you have completed Tutorial 2.3 (the analysis here depends on the spike sorted results of Tutorial 2.3). 2.4.1 Sinusoidal gratings to assess direction and orientation preferences and spatial frequency preferences In this experiment ( Van Hooser et al. 2013 ), we assessed tuning for stimulus direction and spatial frequency with sinusoidal gratings. A series of sinusoidal gratings drifting in different directions are shown here . In the actual experiments, we assessed orientation/direction preferences coarsely, and then found the optimal spatial and temporal frequency for the cell before assessing orientation/direction in a fine manner at the optimal spatial and temporal frequency for the cell. The fine orientation/direction assessment is what is included in this demo. So let's open our demo experiment and get started! We are also going to identify our stimulator (visual stimulus system) so that we can tell NDI to analyze stimuli from this device. Code Block 2.4.1.1. Type this into Matlab. dirname = [userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2']; % change this if you put the example somewhere else ref = 'ts_exper2'; S = ndi.session.dir(ref,dirname); % find out stimulus probe stimprobe = S.getprobes('type','stimulator'); stimprobe = stimprobe{1}; % grab the first one, should be our stimulus monitor 2.4.2 Gathering stimulus information The first step in analyzing stimuli is to gather information about the stimulus presentations that were performed in the experiment. We use a small dedicated app for this purpose called ndi.app.stimulus.decoder . Code Block 2.4.2.1. Type this into Matlab. sapp = ndi.app.stimulus.decoder(S); redo = 1; [stim_pres_docs] = sapp.parse_stimuli(stimprobe,redo); Now let's take a look at what has been decoded: Code Block 2.4.2.2. Type this into Matlab. stim_pres_docs{1}.document_properties.stimulus_presentation % these are the fields that were decoded by ndi.app.stimulus.decoder % let's take a look % here is information about the presentation time of the first stimulus stim_pres_docs{1}.document_properties.stimulus_presentation.presentation_time(1) % here is information about the presentation order of the first 10 stimuli shown: stim_pres_docs{1}.document_properties.stimulus_presentation.presentation_order(1:10) % We see that the first stimulus that was presented was stimulus number 4. Let's take a look at its properties: stim_pres_docs{1}.document_properties.stimulus_presentation.stimuli(4).parameters % We can also take a look at the control or blank stimulus properties: stim_pres_docs{1}.document_properties.stimulus_presentation.stimuli(17).parameters % you can see that there are 4 such documents, one for each stimulus presentation in the experiment stim_pres_docs, 2.4.3 Labeling control stimuli For most turning curve data, we want to compare the response during the time of stimulation to the response of the system during some background time, or some \"control\" stimulus. For visual stimuli, this is often a period where a gray screen is shown that has the same duration as the visual stimuli that may be shown. For an auditory stimulus, it may be a period of time when no specific auditory stimulus is playing and the animal hears the noise of the background environment. Often, stimuli have in their parameters a field that declares that a stimulus is a control or blank stimulus. Our stimuli have such a code as shown above (stimulus 17). Code Block 2.4.3.1. Type this into Matlab. rapp = ndi.app.stimulus.tuning_response(S); cs_doc = rapp.label_control_stimuli(stimprobe,redo); Let's examine what it did. We see that the ndi.app.stimuli.tuning_response app each of the 85 stimuli with the \"blank\" stimulus that was presented closest in time: Code Block 2.4.3.2. Type this into Matlab. % see the control stimulus identifier for all the stimuli cs_doc{1}.document_properties.control_stimulus_ids.control_stimulus_ids % see the method used to identify the control stimulus for each stimulus: cs_doc{1}.document_properties.control_stimulus_ids.control_stimulus_id_method % see the help for the label_control_stimuli function: help ndi.app.stimulus.tuning_response.label_control_stimuli 2.4.4 Calculating stimulus responses Once the control stimuli have been labeled (if desired; it is optional), then one can proceed to calcuate the stimulus responses. To do this, we can employ the [ndi.app.stimuli.tuning_response]((https://vh-lab.github.io/NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/) app. This program will calculate the mean response to each stimulus. Because gratings are a periodic stimulus, this function will also calculate the response at the fundamental stimulus temporal frequency (F1 component) and at twice this temporal frequency (F2 component). Code block 2.4.4.1. Type this into Matlab. e = S.getelements('element.type','spikes'); rdocs{1} = rapp.stimulus_responses(stimprobe, e{1}, redo); rdocs{2} = rapp.stimulus_responses(stimprobe, e{2}, redo); Now we can examine the sets of documents that are produced. We see that there are two sets of 3 documents each: Code block 2.4.4.2. Type this into Matlab. % look at rdocs{1}: rdocs{1} % it is a 1x2 cell array, and each of these cell entries is in turn a 1x3 cell array rdocs{1}{1} % this reflects the two epochs ('t00001' and 't00002'), and, for each epoch, the analysis of the mean response, the F1 component, and the F2 component % to see this, let's look at the first document rdocs{1}{1}{1}.document_properties rdocs{1}{1}{1}.document_properties.stimulus_response rdocs{1}{1}{1}.document_properties.stimulus_response_scalar % we see that this is the 'mean' response. We can see the responses contained within: rdocs{1}{1}{1}.document_properties.stimulus_response_scalar.responses % we can see that each of the 85 presentations includes a response that can possibly have a real and imaginary component, as well as a control response rdocs{1}{1}{1}.document_properties.stimulus_response_scalar.responses.response_real(1) rdocs{1}{1}{1}.document_properties.stimulus_response_scalar.responses.control_response_real(1) 2.4.5 Computing an orientation/direction tuning curve and calculating orientation/direction index values Now that we have all of the responses to the individual stimuli, we can create a tuning curve, which examines how the response of the neuron depends on a particular stimulus parameter. In this case, the stimulus is 'angle', which corresponds to the direction of the sinusoidal grating stimulus. We have built a specific application ndi.app.oridirtuning to process tuning curves in response to oriented stimuli, or stimuli moving in particular directions. After generating the tuning curve, we can calculate many, many index values that characterize the tuning of each cell. The function that calculates the orientation and direction index values pulls up a plot. If you look at the plot that examines the mean response for ctx_1 , you can see that the cell responds strongly to gratings drifting at 120 degrees and 300 degrees (0 degrees is up; 90 degrees is to the right). Code block 2.4.5.1. Type this into Matlab. oapp = ndi.app.oridirtuning(S); for i=1:2, tdoc{i} = oapp.calculate_all_tuning_curves(e{i},'Replace'); % replace any existing oriprops{i} = oapp.calculate_all_oridir_indexes(e{i},'Replace'); % this takes a few minutes end; The program should pop up 6 figures that look like this when they are adjusted to have the same axes: The tuning curves show that cell Ctx 1 has a strong orientation-tuned mean response to bars drifting at an angle of about 90 degrees (vertical bars moving rightward) or 270 degrees (vertical bars moving leftward). The cell LGN 1 does not exhibit strong tuning for orientation or direction, but instead exhibits a strong modulated response (F1) to most directions. Now let's take a look at these index values for the first cell. These index values are described in Mazurek et al. (2014) . Code block 2.4.5.2. Type this into Matlab. % see all the categories oriprops{1}{1}{1}.document_properties.orientation_direction_tuning % see the property information oriprops{1}{1}{1}.document_properties.orientation_direction_tuning.properties % see significance. Responses across orientation are very significant: oriprops{1}{1}{1}.document_properties.orientation_direction_tuning.significance % fit parameters: oriprops{1}{1}{1}.document_properties.orientation_direction_tuning.fit % vector tuning parameters: oriprops{1}{1}{1}.document_properties.orientation_direction_tuning.vector Now we have seen how we can analyze stimulus responses and use applications to calculate tuning curves and index values. If you had your own stimulus responses of a different type, you could write functions or apps that analyze the results and calculate the appropriate index values. 2.4.5 Discussion/Feedback Post comments, bugs, questions, or discuss .","title":"2.4 Analyzing spiking responses and tuning curve properties"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#tutorial-2-analyzing-your-first-electrophysiology-experiment-with-ndi","text":"","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#24-analyzing-stimulus-responses","text":"In the last tutorial, we saw how to use applications to identify spikes from electrophysiology recordings. Now we will employ another plain app for calculating responses to stimulation. Note that this tutorial requires that you have completed Tutorial 2.3 (the analysis here depends on the spike sorted results of Tutorial 2.3).","title":"2.4 Analyzing stimulus responses"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#241-sinusoidal-gratings-to-assess-direction-and-orientation-preferences-and-spatial-frequency-preferences","text":"In this experiment ( Van Hooser et al. 2013 ), we assessed tuning for stimulus direction and spatial frequency with sinusoidal gratings. A series of sinusoidal gratings drifting in different directions are shown here . In the actual experiments, we assessed orientation/direction preferences coarsely, and then found the optimal spatial and temporal frequency for the cell before assessing orientation/direction in a fine manner at the optimal spatial and temporal frequency for the cell. The fine orientation/direction assessment is what is included in this demo. So let's open our demo experiment and get started! We are also going to identify our stimulator (visual stimulus system) so that we can tell NDI to analyze stimuli from this device.","title":"2.4.1 Sinusoidal gratings to assess direction and orientation preferences and spatial frequency preferences"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2411-type-this-into-matlab","text":"dirname = [userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2']; % change this if you put the example somewhere else ref = 'ts_exper2'; S = ndi.session.dir(ref,dirname); % find out stimulus probe stimprobe = S.getprobes('type','stimulator'); stimprobe = stimprobe{1}; % grab the first one, should be our stimulus monitor","title":"Code Block 2.4.1.1. Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#242-gathering-stimulus-information","text":"The first step in analyzing stimuli is to gather information about the stimulus presentations that were performed in the experiment. We use a small dedicated app for this purpose called ndi.app.stimulus.decoder .","title":"2.4.2 Gathering stimulus information"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2421-type-this-into-matlab","text":"sapp = ndi.app.stimulus.decoder(S); redo = 1; [stim_pres_docs] = sapp.parse_stimuli(stimprobe,redo); Now let's take a look at what has been decoded:","title":"Code Block 2.4.2.1. Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2422-type-this-into-matlab","text":"stim_pres_docs{1}.document_properties.stimulus_presentation % these are the fields that were decoded by ndi.app.stimulus.decoder % let's take a look % here is information about the presentation time of the first stimulus stim_pres_docs{1}.document_properties.stimulus_presentation.presentation_time(1) % here is information about the presentation order of the first 10 stimuli shown: stim_pres_docs{1}.document_properties.stimulus_presentation.presentation_order(1:10) % We see that the first stimulus that was presented was stimulus number 4. Let's take a look at its properties: stim_pres_docs{1}.document_properties.stimulus_presentation.stimuli(4).parameters % We can also take a look at the control or blank stimulus properties: stim_pres_docs{1}.document_properties.stimulus_presentation.stimuli(17).parameters % you can see that there are 4 such documents, one for each stimulus presentation in the experiment stim_pres_docs,","title":"Code Block 2.4.2.2. Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#243-labeling-control-stimuli","text":"For most turning curve data, we want to compare the response during the time of stimulation to the response of the system during some background time, or some \"control\" stimulus. For visual stimuli, this is often a period where a gray screen is shown that has the same duration as the visual stimuli that may be shown. For an auditory stimulus, it may be a period of time when no specific auditory stimulus is playing and the animal hears the noise of the background environment. Often, stimuli have in their parameters a field that declares that a stimulus is a control or blank stimulus. Our stimuli have such a code as shown above (stimulus 17).","title":"2.4.3 Labeling control stimuli"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2431-type-this-into-matlab","text":"rapp = ndi.app.stimulus.tuning_response(S); cs_doc = rapp.label_control_stimuli(stimprobe,redo); Let's examine what it did. We see that the ndi.app.stimuli.tuning_response app each of the 85 stimuli with the \"blank\" stimulus that was presented closest in time:","title":"Code Block 2.4.3.1. Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2432-type-this-into-matlab","text":"% see the control stimulus identifier for all the stimuli cs_doc{1}.document_properties.control_stimulus_ids.control_stimulus_ids % see the method used to identify the control stimulus for each stimulus: cs_doc{1}.document_properties.control_stimulus_ids.control_stimulus_id_method % see the help for the label_control_stimuli function: help ndi.app.stimulus.tuning_response.label_control_stimuli","title":"Code Block 2.4.3.2. Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#244-calculating-stimulus-responses","text":"Once the control stimuli have been labeled (if desired; it is optional), then one can proceed to calcuate the stimulus responses. To do this, we can employ the [ndi.app.stimuli.tuning_response]((https://vh-lab.github.io/NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/) app. This program will calculate the mean response to each stimulus. Because gratings are a periodic stimulus, this function will also calculate the response at the fundamental stimulus temporal frequency (F1 component) and at twice this temporal frequency (F2 component).","title":"2.4.4 Calculating stimulus responses"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2441-type-this-into-matlab","text":"e = S.getelements('element.type','spikes'); rdocs{1} = rapp.stimulus_responses(stimprobe, e{1}, redo); rdocs{2} = rapp.stimulus_responses(stimprobe, e{2}, redo); Now we can examine the sets of documents that are produced. We see that there are two sets of 3 documents each:","title":"Code block 2.4.4.1. Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2442-type-this-into-matlab","text":"% look at rdocs{1}: rdocs{1} % it is a 1x2 cell array, and each of these cell entries is in turn a 1x3 cell array rdocs{1}{1} % this reflects the two epochs ('t00001' and 't00002'), and, for each epoch, the analysis of the mean response, the F1 component, and the F2 component % to see this, let's look at the first document rdocs{1}{1}{1}.document_properties rdocs{1}{1}{1}.document_properties.stimulus_response rdocs{1}{1}{1}.document_properties.stimulus_response_scalar % we see that this is the 'mean' response. We can see the responses contained within: rdocs{1}{1}{1}.document_properties.stimulus_response_scalar.responses % we can see that each of the 85 presentations includes a response that can possibly have a real and imaginary component, as well as a control response rdocs{1}{1}{1}.document_properties.stimulus_response_scalar.responses.response_real(1) rdocs{1}{1}{1}.document_properties.stimulus_response_scalar.responses.control_response_real(1)","title":"Code block 2.4.4.2. Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#245-computing-an-orientationdirection-tuning-curve-and-calculating-orientationdirection-index-values","text":"Now that we have all of the responses to the individual stimuli, we can create a tuning curve, which examines how the response of the neuron depends on a particular stimulus parameter. In this case, the stimulus is 'angle', which corresponds to the direction of the sinusoidal grating stimulus. We have built a specific application ndi.app.oridirtuning to process tuning curves in response to oriented stimuli, or stimuli moving in particular directions. After generating the tuning curve, we can calculate many, many index values that characterize the tuning of each cell. The function that calculates the orientation and direction index values pulls up a plot. If you look at the plot that examines the mean response for ctx_1 , you can see that the cell responds strongly to gratings drifting at 120 degrees and 300 degrees (0 degrees is up; 90 degrees is to the right).","title":"2.4.5 Computing an orientation/direction tuning curve and calculating orientation/direction index values"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2451-type-this-into-matlab","text":"oapp = ndi.app.oridirtuning(S); for i=1:2, tdoc{i} = oapp.calculate_all_tuning_curves(e{i},'Replace'); % replace any existing oriprops{i} = oapp.calculate_all_oridir_indexes(e{i},'Replace'); % this takes a few minutes end; The program should pop up 6 figures that look like this when they are adjusted to have the same axes: The tuning curves show that cell Ctx 1 has a strong orientation-tuned mean response to bars drifting at an angle of about 90 degrees (vertical bars moving rightward) or 270 degrees (vertical bars moving leftward). The cell LGN 1 does not exhibit strong tuning for orientation or direction, but instead exhibits a strong modulated response (F1) to most directions. Now let's take a look at these index values for the first cell. These index values are described in Mazurek et al. (2014) .","title":"Code block 2.4.5.1. Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2452-type-this-into-matlab","text":"% see all the categories oriprops{1}{1}{1}.document_properties.orientation_direction_tuning % see the property information oriprops{1}{1}{1}.document_properties.orientation_direction_tuning.properties % see significance. Responses across orientation are very significant: oriprops{1}{1}{1}.document_properties.orientation_direction_tuning.significance % fit parameters: oriprops{1}{1}{1}.document_properties.orientation_direction_tuning.fit % vector tuning parameters: oriprops{1}{1}{1}.document_properties.orientation_direction_tuning.vector Now we have seen how we can analyze stimulus responses and use applications to calculate tuning curves and index values. If you had your own stimulus responses of a different type, you could write functions or apps that analyze the results and calculate the appropriate index values.","title":"Code block 2.4.5.2. Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#245-discussionfeedback","text":"Post comments, bugs, questions, or discuss .","title":"2.4.5 Discussion/Feedback"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/","text":"2 Analyzing your first electrophysiology experiment with NDI 2.5 Understanding and searching the NDI database 2.5.1 The ndi.database and ndi.document objects Each ndi.session object has an ndi.database object as one of its properties. This database holds the ndi.document objects that contain the metadata and data results of calculations that apps and programs have performed on the original data. First, let's open the ndi.session that we've been working with. Code block 2.5.1.1. Type this into Matlab. dirname = [userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2']; % change this if you put the example somewhere else ref = 'ts_exper2'; S = ndi.session.dir(ref,dirname); We find documents by searching for them with the ndi.session method database_search() . For example, we can examine all documents that contain stimulus presentation data: Code block 2.5.1.2. Type this into Matlab. stim_pres_doc = S.database_search(ndi.query('','isa','stimulus_presentation','')) % should see: % stim_pres_doc = % 1x4 cell array % {1x1 ndi.document} {1x1 ndi.document} {1x1 ndi.document} {1x1 ndi.document} stim_pres_doc{1} % should see: % ans = % document with properties: % document_properties: [1x1 struct] stim_pres_doc{1}.document_properties % should see: % ans = % struct with fields: % app: [1x1 struct] % depends_on: [1x1 struct] % document_class: [1x1 struct] % epochid: 't00001' % epochid_fix: [1x1 struct] % ndi_document: [1x1 struct] % stimulus_presentation: [1x1 struct] We have used an ndi.query object to conduct our search, and we will describe those objects a little later. Here we see that ndi.document objects have a property called document_properties that contains all of the text information that is stored in the document. We will look through all of these properties here, and we also direct you to the documentation page for the ndi.document class stimulus_presentation . 2.5.2 All ndi.document objects have the fields document_class and ndi_document . The document_class fields contain critical information about the class, such as the file that contains its definition, its full class name and its short class name. In addition, document types can be composed of multiple document types. The stimulus presentation class has two superclasses: ndi.document and ndi.document_epochid . This means that a stimulus_presentation document has its own fields, plus all of the fields from ndi.document documents and and ndi.document_epochid documents. Let's look at the data that specifies the superclasses: Code block 2.5.2.1. Type this into Matlab. stim_pres_doc{1}.document_properties.document_class % % ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/stimulus/stimulus_presentation.json' % validation: '$NDISCHEMAPATH/stimulus/stimulus_presentation_schema.json' % class_name: 'ndi_document_stimulus_stimulus_presentation' % property_list_name: 'stimulus_presentation' % class_version: 1 % superclasses: [3x1 struct] stim_pres_doc{1}.document_properties.document_class.superclasses(1) % ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/ndi_document.json' stim_pres_doc{1}.document_properties.document_class.superclasses(2) % ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/ndi_document_epochid.json' stim_pres_doc{1}.document_properties.document_class.superclasses(3) %ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/ndi_document.json' All documents have ndi_document as a superclass. Note that ndi.document is the name of the software object in Matlab (and Python), whereas ndi_document is the name of the database object type that has the following fields: field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database The most useful item in each ndi.document is its unique identifier id . This is a globally unique identifier, which means that no other ndi.document or corresponding ndi_document anywhere in the universe has the same identifier. It is constructed of two hexidecimal strings: the first is based on the time of creation in Universal Controlled Time (UTC), and the second is created by a random number generator. This constructions means that ndi.document ids are not only unique, but also that sorting them alphabetically will give you the creation order of the documents. This can come in handy from time to time. 2.5.3 Searching for ndi_documents with ndi.query Performing analyses or analyses of analyses in NDI involves searching for previous entries in the database, building upon them, and writing the results back to the database. The object ndi.query allows one to express database searches. Let's learn about ndi.query with a few examples. Code block 2.5.3.1. Type this into Matlab. % search for document classes that contain the string 'stim' q_stim = ndi.query('document_class.class_name','contains_string','stim',''); stim_docs = S.database_search(q_stim) % returns 35 matches for me % now suppose we also want to search for documents that were made by % our app ndi_app_stimulus_decoder: q_stim_decoder = ndi.query('app.name','exact_string','ndi_app_stimulus_decoder',''); % we can find based on this criteria alone... stim_decoder_docs = S.database_search(q_stim_decoder) % returns 4 matches for me % ...or we can put the search terms together in an AND to demand both queries are satisfied q_stim_and_stim_decoder_docs = S.database_search(q_stim_decoder & q_stim); % returns 4 matches for me, because all q_stim_decoder docs have 'stimulus' in the class_name % we can also put queries together into a single variable: q_or = q_stim_decoder | q_stim; q_and = q_stim_decoder & q_stim; q_stim_and_stim_decoder_docs = S.database_search(q_and) % produces the same as above % now we can inspect these documents: q_stim_and_stim_decoder_docs{1}.document_properties % ans = % struct with fields: % app: [1x1 struct] % depends_on: [1x1 struct] % document_class: [1x1 struct] % epochid: 't00001' % epochid_fix: [1x1 struct] % ndi_document: [1x1 struct] % stimulus_presentation: [1x1 struct] q_stim_and_stim_decoder_docs{1}.document_properties.app % for me: % ans = % struct with fields: % name: 'ndi_app_stimulus_decoder' % version: 'fa1fa7818b215975c43f68ece523b065852ef891' % url: 'https://github.com/VH-Lab/NDI-matlab' % os: 'MACI64' % os_version: '10.14.6' % interpreter: 'MATLAB' % interpreter_version: '9.8' q_stim_and_stim_decoder_docs{1}.document_properties.stimulus_presentation % ans = % struct with fields: % presentation_order: [85x1 double] % presentation_time: [85x1 struct] % stimuli: [17x1 struct] The different possible search terms for ndi.query objects is shown below: NDI_QUERY_OBJ = ndi.query(FIELD, OPERATION, PARAM1, PARAM2) Operation Description 'regexp' are there any regular expression matches between the field value and 'param1' ? 'exact_string' is the field value an exact string match for 'param1' ? 'contains_string' is the field value a char array that contains 'param1' ? 'exact_number' is the field value exactly 'param1' (same size and values)? 'lessthan' is the field value less than 'param1' (and comparable size) 'lessthaneq' is the field value less than or equal to 'param1' (and comparable size) 'greaterthan' is the field value greater than 'param1' (and comparable size) 'greaterthaneq' is the field value greater than or equal to 'param1' (and comparable size) 'hasfield' is the field present? (no role for 'param1' or 'param2' ) 'hasanysubfield_contains_string' Is the field value an array of structs or cell array of structs such that any has a field named 'param1' with a string that contains the string in 'param2' ? 'or' are any of the searchstruct elements specified in ' param1 ' true? 'isa' is 'param1' either a superclass or the document class itself of the ndi_document? 'depends_on' does the document depend on an item with name 'param1' and value 'param2' ? 2.5.4 The depends_on field and database structure Many analysis procedures or creation procedures are dependent on the results from previous calculations. These dependencies are denoted in a field called depends_on . Let's look at the dependencies for our example stimulus presentation: Code block 2.5.4.1. Type this into Matlab. stim_pres_doc{1}.document_properties.depends_on % should see: % ans = % struct with fields: % name: 'stimulus_element_id' % value: '412687d3ae63489a_40d1d65fa08bb81a' % what is this node at 412687d3ae63489a_40d1d65fa08bb81a ? mydoc = S.database_search(ndi.query('ndi_document.id','exact_string', ... stim_pres_doc{1}.document_properties.depends_on(1).value,'')); mydoc{1}.document_properties % ans = % struct with fields: % depends_on: [2x1 struct] % document_class: [1x1 struct] % element: [1x1 struct] % ndi_document: [1x1 struct] mydoc{1}.document_properties.element % ans = % struct with fields: % ndi_element_class: 'ndi.probe.timeseries.stimulator' % name: 'vhvis_spike2' % reference: 1 % type: 'stimulator' % direct: 1 % We see it is our visual stimulation system Some documents have a lot of depends_on items. Let's examine our ctx_1 neuron that we created in Tutorial 2.3 . Code block 2.5.4.2. Type this into Matlab. e = S.getelements('element.type','spikes'); spikes_doc = S.database_search(ndi.query('ndi_document.id','exact_string',e{1}.id(),'')) spikes_doc = spikes_doc{1} for i=1:numel(spikes_doc.document_properties.depends_on), disp(['Depends on ' spikes_doc.document_properties.depends_on(i).name ': ' spikes_doc.document_properties.depends_on(i).value]); end; % Should see 3 entries, with your own unique IDs: % Depends on underlying_element_id: 412687d3ad57c851_40860c116cfc64c2 % Depends on subject_id: 412687d3ad571d87_c0dac60e10c0f2a5 % Depends on spike_clusters_id: 412687f62d1057b8_40c28348e09e5e9b 2.5.5 Structure of an ndi.database NDI databases (and any analysis project) has a beautiful underlying structure that one can visualize, to get a sense of how the calculations and inferred objects (like neurons that spike) are derived from one another. Code block 2.5.5.1. Type this into Matlab. interactive = 1; % set it to zero if you have Matlab 2020a or later for DataTip navigation! Try it! docs=S.database_search(ndi.query('ndi_document.id','regexp','(.*)','')); % this finds ALL documents [g,nodes,mdigraph] = ndi.database.fun.docs2graph(docs); ndi.database.fun.plotinteractivedocgraph(docs,g,mdigraph,nodes,'layered',interactive); For this session, the graph should look something like this: You can explore the nodes by clicking next to them. On the command line, a summary of the document will appear. Here is a short video demonstration . If you turn on zooming (either by selecting it from the Tools menu in the figure, typing zoom on on the command line, or by hovering over the figure and then clicking on the magnifying glass that appears in the upper right), you can zoom around the graph. You'll need to turn zoom off to be able to get a summary by clicking near the nodes. You can turn zoom off either by selecting Zoom In again from the Tools menu in the figure to de-select the tool, or by typing zoom off on the command line, or by hovering over the figure and clicking the magnifying glass again. 2.5.6 Discussion/Feedback Post comments, bugs, questions, or discuss . You may find it odd that we haven't told you how to add items to the database here in this tutorial. Instead, we've only told you how to inspect the database. The process of creating and testing a document schema and adding and removing documents are described in a Planned Tutorial. The link will be here when it is created.","title":"2.5 Searching NDI databases"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#2-analyzing-your-first-electrophysiology-experiment-with-ndi","text":"","title":"2 Analyzing your first electrophysiology experiment with NDI"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#25-understanding-and-searching-the-ndi-database","text":"","title":"2.5 Understanding and searching the NDI database"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#251-the-ndidatabase-and-ndidocument-objects","text":"Each ndi.session object has an ndi.database object as one of its properties. This database holds the ndi.document objects that contain the metadata and data results of calculations that apps and programs have performed on the original data. First, let's open the ndi.session that we've been working with.","title":"2.5.1 The ndi.database and ndi.document objects"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2511-type-this-into-matlab","text":"dirname = [userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2']; % change this if you put the example somewhere else ref = 'ts_exper2'; S = ndi.session.dir(ref,dirname); We find documents by searching for them with the ndi.session method database_search() . For example, we can examine all documents that contain stimulus presentation data:","title":"Code block 2.5.1.1. Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2512-type-this-into-matlab","text":"stim_pres_doc = S.database_search(ndi.query('','isa','stimulus_presentation','')) % should see: % stim_pres_doc = % 1x4 cell array % {1x1 ndi.document} {1x1 ndi.document} {1x1 ndi.document} {1x1 ndi.document} stim_pres_doc{1} % should see: % ans = % document with properties: % document_properties: [1x1 struct] stim_pres_doc{1}.document_properties % should see: % ans = % struct with fields: % app: [1x1 struct] % depends_on: [1x1 struct] % document_class: [1x1 struct] % epochid: 't00001' % epochid_fix: [1x1 struct] % ndi_document: [1x1 struct] % stimulus_presentation: [1x1 struct] We have used an ndi.query object to conduct our search, and we will describe those objects a little later. Here we see that ndi.document objects have a property called document_properties that contains all of the text information that is stored in the document. We will look through all of these properties here, and we also direct you to the documentation page for the ndi.document class stimulus_presentation .","title":"Code block 2.5.1.2. Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#252-all-ndidocument-objects-have-the-fields-document_class-and-ndi_document","text":"The document_class fields contain critical information about the class, such as the file that contains its definition, its full class name and its short class name. In addition, document types can be composed of multiple document types. The stimulus presentation class has two superclasses: ndi.document and ndi.document_epochid . This means that a stimulus_presentation document has its own fields, plus all of the fields from ndi.document documents and and ndi.document_epochid documents. Let's look at the data that specifies the superclasses:","title":"2.5.2 All ndi.document objects have the fields document_class and ndi_document."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2521-type-this-into-matlab","text":"stim_pres_doc{1}.document_properties.document_class % % ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/stimulus/stimulus_presentation.json' % validation: '$NDISCHEMAPATH/stimulus/stimulus_presentation_schema.json' % class_name: 'ndi_document_stimulus_stimulus_presentation' % property_list_name: 'stimulus_presentation' % class_version: 1 % superclasses: [3x1 struct] stim_pres_doc{1}.document_properties.document_class.superclasses(1) % ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/ndi_document.json' stim_pres_doc{1}.document_properties.document_class.superclasses(2) % ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/ndi_document_epochid.json' stim_pres_doc{1}.document_properties.document_class.superclasses(3) %ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/ndi_document.json' All documents have ndi_document as a superclass. Note that ndi.document is the name of the software object in Matlab (and Python), whereas ndi_document is the name of the database object type that has the following fields: field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database The most useful item in each ndi.document is its unique identifier id . This is a globally unique identifier, which means that no other ndi.document or corresponding ndi_document anywhere in the universe has the same identifier. It is constructed of two hexidecimal strings: the first is based on the time of creation in Universal Controlled Time (UTC), and the second is created by a random number generator. This constructions means that ndi.document ids are not only unique, but also that sorting them alphabetically will give you the creation order of the documents. This can come in handy from time to time.","title":"Code block 2.5.2.1. Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#253-searching-for-ndi_documents-with-ndiquery","text":"Performing analyses or analyses of analyses in NDI involves searching for previous entries in the database, building upon them, and writing the results back to the database. The object ndi.query allows one to express database searches. Let's learn about ndi.query with a few examples.","title":"2.5.3 Searching for ndi_documents with ndi.query"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2531-type-this-into-matlab","text":"% search for document classes that contain the string 'stim' q_stim = ndi.query('document_class.class_name','contains_string','stim',''); stim_docs = S.database_search(q_stim) % returns 35 matches for me % now suppose we also want to search for documents that were made by % our app ndi_app_stimulus_decoder: q_stim_decoder = ndi.query('app.name','exact_string','ndi_app_stimulus_decoder',''); % we can find based on this criteria alone... stim_decoder_docs = S.database_search(q_stim_decoder) % returns 4 matches for me % ...or we can put the search terms together in an AND to demand both queries are satisfied q_stim_and_stim_decoder_docs = S.database_search(q_stim_decoder & q_stim); % returns 4 matches for me, because all q_stim_decoder docs have 'stimulus' in the class_name % we can also put queries together into a single variable: q_or = q_stim_decoder | q_stim; q_and = q_stim_decoder & q_stim; q_stim_and_stim_decoder_docs = S.database_search(q_and) % produces the same as above % now we can inspect these documents: q_stim_and_stim_decoder_docs{1}.document_properties % ans = % struct with fields: % app: [1x1 struct] % depends_on: [1x1 struct] % document_class: [1x1 struct] % epochid: 't00001' % epochid_fix: [1x1 struct] % ndi_document: [1x1 struct] % stimulus_presentation: [1x1 struct] q_stim_and_stim_decoder_docs{1}.document_properties.app % for me: % ans = % struct with fields: % name: 'ndi_app_stimulus_decoder' % version: 'fa1fa7818b215975c43f68ece523b065852ef891' % url: 'https://github.com/VH-Lab/NDI-matlab' % os: 'MACI64' % os_version: '10.14.6' % interpreter: 'MATLAB' % interpreter_version: '9.8' q_stim_and_stim_decoder_docs{1}.document_properties.stimulus_presentation % ans = % struct with fields: % presentation_order: [85x1 double] % presentation_time: [85x1 struct] % stimuli: [17x1 struct] The different possible search terms for ndi.query objects is shown below: NDI_QUERY_OBJ = ndi.query(FIELD, OPERATION, PARAM1, PARAM2) Operation Description 'regexp' are there any regular expression matches between the field value and 'param1' ? 'exact_string' is the field value an exact string match for 'param1' ? 'contains_string' is the field value a char array that contains 'param1' ? 'exact_number' is the field value exactly 'param1' (same size and values)? 'lessthan' is the field value less than 'param1' (and comparable size) 'lessthaneq' is the field value less than or equal to 'param1' (and comparable size) 'greaterthan' is the field value greater than 'param1' (and comparable size) 'greaterthaneq' is the field value greater than or equal to 'param1' (and comparable size) 'hasfield' is the field present? (no role for 'param1' or 'param2' ) 'hasanysubfield_contains_string' Is the field value an array of structs or cell array of structs such that any has a field named 'param1' with a string that contains the string in 'param2' ? 'or' are any of the searchstruct elements specified in ' param1 ' true? 'isa' is 'param1' either a superclass or the document class itself of the ndi_document? 'depends_on' does the document depend on an item with name 'param1' and value 'param2' ?","title":"Code block 2.5.3.1. Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#254-the-depends_on-field-and-database-structure","text":"Many analysis procedures or creation procedures are dependent on the results from previous calculations. These dependencies are denoted in a field called depends_on . Let's look at the dependencies for our example stimulus presentation:","title":"2.5.4 The depends_on field and database structure"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2541-type-this-into-matlab","text":"stim_pres_doc{1}.document_properties.depends_on % should see: % ans = % struct with fields: % name: 'stimulus_element_id' % value: '412687d3ae63489a_40d1d65fa08bb81a' % what is this node at 412687d3ae63489a_40d1d65fa08bb81a ? mydoc = S.database_search(ndi.query('ndi_document.id','exact_string', ... stim_pres_doc{1}.document_properties.depends_on(1).value,'')); mydoc{1}.document_properties % ans = % struct with fields: % depends_on: [2x1 struct] % document_class: [1x1 struct] % element: [1x1 struct] % ndi_document: [1x1 struct] mydoc{1}.document_properties.element % ans = % struct with fields: % ndi_element_class: 'ndi.probe.timeseries.stimulator' % name: 'vhvis_spike2' % reference: 1 % type: 'stimulator' % direct: 1 % We see it is our visual stimulation system Some documents have a lot of depends_on items. Let's examine our ctx_1 neuron that we created in Tutorial 2.3 .","title":"Code block 2.5.4.1. Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2542-type-this-into-matlab","text":"e = S.getelements('element.type','spikes'); spikes_doc = S.database_search(ndi.query('ndi_document.id','exact_string',e{1}.id(),'')) spikes_doc = spikes_doc{1} for i=1:numel(spikes_doc.document_properties.depends_on), disp(['Depends on ' spikes_doc.document_properties.depends_on(i).name ': ' spikes_doc.document_properties.depends_on(i).value]); end; % Should see 3 entries, with your own unique IDs: % Depends on underlying_element_id: 412687d3ad57c851_40860c116cfc64c2 % Depends on subject_id: 412687d3ad571d87_c0dac60e10c0f2a5 % Depends on spike_clusters_id: 412687f62d1057b8_40c28348e09e5e9b","title":"Code block 2.5.4.2. Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#255-structure-of-an-ndidatabase","text":"NDI databases (and any analysis project) has a beautiful underlying structure that one can visualize, to get a sense of how the calculations and inferred objects (like neurons that spike) are derived from one another.","title":"2.5.5 Structure of an ndi.database"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2551-type-this-into-matlab","text":"interactive = 1; % set it to zero if you have Matlab 2020a or later for DataTip navigation! Try it! docs=S.database_search(ndi.query('ndi_document.id','regexp','(.*)','')); % this finds ALL documents [g,nodes,mdigraph] = ndi.database.fun.docs2graph(docs); ndi.database.fun.plotinteractivedocgraph(docs,g,mdigraph,nodes,'layered',interactive); For this session, the graph should look something like this: You can explore the nodes by clicking next to them. On the command line, a summary of the document will appear. Here is a short video demonstration . If you turn on zooming (either by selecting it from the Tools menu in the figure, typing zoom on on the command line, or by hovering over the figure and then clicking on the magnifying glass that appears in the upper right), you can zoom around the graph. You'll need to turn zoom off to be able to get a summary by clicking near the nodes. You can turn zoom off either by selecting Zoom In again from the Tools menu in the figure to de-select the tool, or by typing zoom off on the command line, or by hovering over the figure and clicking the magnifying glass again.","title":"Code block 2.5.5.1. Type this into Matlab."},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#256-discussionfeedback","text":"Post comments, bugs, questions, or discuss . You may find it odd that we haven't told you how to add items to the database here in this tutorial. Instead, we've only told you how to inspect the database. The process of creating and testing a document schema and adding and removing documents are described in a Planned Tutorial. The link will be here when it is created.","title":"2.5.6 Discussion/Feedback"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/","text":"Tutorial 3.1 Getting started with NDI This tutorial is an alternative to Tutorial 2.1 that is designed for users who are less familiar with programming. It will provide a brief overview of Matlab and object-oriented programming, more in-depth information about the methods and syntax used, and a guide on how to navigate the website and its documentation. Basics of Matlab Matlab is a language specifically designed for calculations, data visualization, and pattern recognition. It is less flexible in some areas than traditional programming languages, but it excels when working with matrices and arrays , which are data structures that contain multiple elements. It includes many built-in tools and additional libraries for a large variety of tasks. Matlab allows for object-oriented programming, a programming paradigm where data and methods that modify that data are bundled together into objects. Classes can provide a template for objects, including class variables, methods, and constructors, which are methods that are used to create an object of a class with specific input parameters. Classes define the states and behaviors of its objects, and constructors determine the initial values of a given object's attributes, called variables. Variables are used within programs to store all kinds of information, including numbers, individual characters, strings of characters, or arrays, which include a larger number of any given type of variable. Unlike many other programming languages, we do not have to specifically state a variable's type when declaring it. We will start with learning to read an example dataset into NDI. We assume you have already installed NDI and taken the introductory tutorial of the NDI model . These data are available in a compressed folder here . To learn more about Matlab, take a look at . Prior to starting the code, put the \"ts_exper1\" folder into your NDI folder. The NDI folder should be listed under MATLAB\\Documents\\NDI, which is created during the installation of NDI. The MATLAB folder itself is found in the default Documents folder in the Finder. Normally, we'd use some helper functions to open our data to make this process even easier, but this tutorial takes the user through the full manual process for training purposes. Throughout this tutorial, we will first go through the code in detail as necessary, then describe the general function of the block. 3.1.1 Introduction to the experiment These data are single neuron recordings made with electrodes in the anesthetized tree shrew visual as a part of Van Hooser et al. 2013 . This example data is a very small subset of the original data for the purposes of illustration. In this experiment, a single unit recording electrode was inserted into either lateral geniculate nucleus or V1. The electrode was connected to an amplifier, and the output signal was recorded by a Cambridge Electronic Design (CED) micro1401 digital acquisition board. A CED Spike2 software script was used that stored 1 recording epoch per folder. In software, the voltage from the electrode was assigned to channel 11. A visual stimulus monitor was set up in front of the animal, and visual stimuli were generated by custom software running on a separate computer. A record of the stimulus parameters was stored in the epoch folder in a file called stims.mat , and stimulus timing information was delivered to the digital inputs of the micro1401 in the form of a stimulus onset trigger and an 8-bit stimulus code signal that were generated by the stimulus computer. 3.1.2 Introduction to the data The data are in a folder called ts_exper1 . It contains recordings of two neurons, an LGN neuron and a V1 neuron, to presentation of sinusoidal gratings that either vary in orientation or in spatial frequency. The data, as provided by the host lab, are organized into subfolders, named t00001 , t00002 , t00003 , and t00004 . The first two folders are recordings of the LGN neuron, and the second two folders are recordings of the V1 neuron. Each t0000N folder has 3 files: probemap.txt - a file that we made for NDI that describe what probes are recorded in this folder spike2data.smr - a CED Spike2 file that has the raw electrophysiology data and the stimulus timing information stims.mat - A Matlab file that has detailed parameters of the stimuli that were run Again, we recommend that you put ts_exper1 into the NDI folder within the MATLAB folder. It will make it much easier for Matlab to access it, and allow for the following code blocks to work properly. First, let's list these files using the ls command (that's the letter l followed by the letter s , short for list ) and take a quick look at what is in them. Set up the \"prefix\" path to your data as necessary. (Here, we assume you put the ts_exper1 folder into your Matlab userpath folder but you can put it anywhere.) Code block 3.1.2.1: Setting a Path (Type this into Matlab) prefix = [userpath filesep 'Documents' filesep 'NDI']; % or '/Users/yourusername/Desktop/' if you put it on the desktop perhaps ls([prefix filesep 'ts_exper1' filesep 't*']); % list all the files in the t0000N folders In the first line, we declare and initialize a variable called \"prefix.\" Declaring a variable means assigning it a name and allocating memory for data to be stored, and initializing it means to assign it a value. In this case, this variable \"prefix\" has been assigned a text string that corresponds to a folder path, or an ordered list of folders. In order to make this path, we start by using the function \"userpath,\" which returns the name of the default MATLAB folder that we previously put the ts_exper1 folder into. Each new folder name afterwards represents going to a subfolder within the starting folder, and \"filesep\" acts as the separator characters between subfolders. We use filesep to make sure that every type of device can properly read the path, as different operating systems have different file separation characters. In Windows, this path would be represented as MATLAB\\Documents\\NDI, while in macOS, this path is MATLAB/Documents/NDI. Rather than writing out the entire path every time we access a file, we will want to go through the process of assigning a path to a variable for quicker access. The ls command (short for list ), lists all the files in a designated folder. In this case, we start from the folder described by \"prefix,\" which we initialized earlier as MATLAB\\Documents\\NDI, then we go further down and select the t* folder inside ts_exper1. Code block 3.1.2.2: Examining the Data (Type this in to Matlab) my_smr_file = fullfile(prefix,'ts_exper1','t00001','spike2data.smr') ndi.example.tutorial.plottreeshrewdata(my_smr_file); In this block, we again assign a path to a variable. In this case, we use the fullfile function, which builds a path to a single file instead of an entire folder. This particular function uses commas rather than filesep between each subfolder/file; this is used whenever separating arguments in a method or function. Note that we reuse prefix, the variable that we defined earlier, in order to create our path more simply. The next line introduces the concept of packages and their functions. Packages are folders that are used primarily to organize related classes and functions; they can also contain other subpackages. The syntax of our class tells us how the packages are structured: the main package is named \"ndi,\" our subpackage is named \"example,\" and the next subpackage is called \"tutorial.\" Functions are files that contain multiple lines of code that receive inputs. As opposed to a script, which is a program that performs exactly the same way every time, functions are more like mathematical equations, having varied outputs or effects depending on their inputs. Our function is called plottreeshrewdata, which naturally plots the tree shrew neural data that our electrode gathered. This particular function requires an input parameter. In this case, this function requires a path to a specific file, which it will plot based on the file's data. Functions are useful when you have a specific piece of code that must be repeated several times and also requires many unique inputs. Information about NDI packages and classes can be found in the documentation on the sidebar. The sidebar shows the hierarchy of packages and classes under the document reference and the syntax, descriptions of each parameter, and overall function of every method under the code reference. This particular method is found here . Looking at the documentation is one of the best ways to familiarize yourself with the different classes and methods of any program. This function shows the raw voltage recording and the stimulus timing information. Each stimulus appears as a number and its duration is indicated by the black bar. You can pan with the mouse to scroll through the recording. 3.1.3 Specifying the metadata that NDI needs to read the experiment Metadata is \"data about data\"- in this case, metadata is all information about the probes themselves, including their names, types, and unique identification. In this example, we have already prepared the metadata files that are necessary for NDI to read the data. Let's look at them in turn. First, we need to tell NDI what probes we have in our experiment. A probe is anything that measures or stimulates; one end of a probe is connected to a subject , and the other end of a probe is connected to a data acquisition device. We first create an object of class ndi.epoch.epochprobemap . Again, the name of this object tells us that it was created from class epochprobemap, which is a class of the epoch package, which is itself a subpackage of the ndi package. Both classes we have seen are in the epoch package, indicating that they both relate to the function and display of epochs. The organization of packages can help us determine what the packages' contents should generally do; as always, make sure to look at the documentation for more specific information about a particular file. We usually tell NDI how the probe is connected with a little code that instructs NDI how to read this information directly from the laboratory's own file information, but in this example, we will use the generic ndi.epoch.epochprobemap_daqsystem object, which reads in a simple tab-delimited text file. This line introduces the first instance of a class method. Methods are the operations of a class, taking in inputs called parameters and performing an action, often returning an output. This particular method is a constructor, which is a class method that takes in values and instantiates an object of the class with those specific values. If we take a closer look at this class, we see the example constructor MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(NAME, REFERENCE, TYPE, DEVICESTRING, SUBJECTSTRING). This is the general form of a constructor in Matlab: first is the name of the object, which is everything on the left side of the equals sign, then the name of the class that the constructor is part of, which is ndi.epoch.epochprobemap in this case, then each parameter, which is the list of words separated by commas. Note that the name of the object is the name used internally by our program, and is not necessarily the same as the NAME argument that we provide when we make the object. We will describe how to use this constructor more thoroughly after we print the probemap.txt file for directory t00001 : Code block 3.1.3.1. Taking a look at the contents of probemap.txt. Type this in to Matlab: type (fullfile(prefix,'ts_exper1','t00001','probemap.txt')) The type function prints out the contents of probemap.txt. Again, we identified the path that Matlab must follow to reach this file. You will see a tab-delimited text table that looks like the following. In the Matlab command window, the tabs may not line up, so don't be concerned if it doesn't look like a nice formatted table. name reference type devicestring subjectstring ctx 1 n-trode ced_daqsystem:ai11 treeshrew_12345@mylab.org vis_stim 1 stimulator vis_daqsystem:mk30;text30;md1 treeshrew_12345@mylab.org This text file has all of the information needed to specify the probe and its connections. It has a name for the probe that is meaningful to the user, and the reference specifies an identifier that groups the recordings of the probe. Typically, when the probe is in one physical position, the reference number is kept the same, but when the probe is moved (such as when an electrode is advanced), the reference number is incremented. This tells NDI to try to combine information from recordings that have the same name and reference. type tells NDI what type of probe it is: like the \"name\" from earlier, this is not the same as the Matlab function \"type,\" which displays the contents of a file. There are a variety of pre-determined types, and this type instructs NDI (via this file ) which probe object type to create in software. Now that we have seen each argument in more detail, we can understand how exactly we make an object with this information. If we take the first probe in probemap.txt and substitute in its information, we can make an example object: Example 1: Creating an Object. Do not type into Matlab: example = ndi.epoch.epochprobemap(ctx, 1, n-trode, ced_daqsystem:ai11, treeshrew_12345@mylab.org) As we can see, each piece of information from probemap.txt corresponds with a parameter in our object. The name of our object is entirely separate from the name of our probe, but would normally be something related to the actual name. In general, variables and objects can have any name, but it's often good to make names with actual meanings instead of many placeholder names or single characters. Second, we need to specify the stimulus parameters metadata. Typically, one would create a metadata reader for one's own lab so that the native data can be read directly, but here we have made another tab-delimited text file with the parameters. You can read this for yourself by typing the following: Code block 3.1.3.2. Taking a look at the stimulus parameters. Type this in to Matlab: type (fullfile(prefix,'ts_exper1','t00001','stims.tsv')) 3.1.4 Gaining access to the data in NDI: ndi.session and ndi.daq.system objects Now all that remains is to open the data directory (folder) as an ndi.session object, and make ndi.daq.system objects to read your data. We will use an ndi.session.dir object, which allows us to read information from a directory on disk. We will create a new ndi.system object by calling the constructor with the reference name we wish to give to the session and the pathname to our data: Code block 3.1.4.1. Creating an ndi.session object. Type this in to Matlab: S = ndi.session.dir('ts_exper1',[prefix filesep 'ts_exper1']) Now you have made a new object of ndi.session.dir called S. This constructor takes the form: E = ndi.session.dir(REFERENCE, PATHNAME). REFERENCE must be a unique string that will be used to refer to our object, and PATHNAME must be a path leading to a folder. The session S is brand new and doesn't know about any of the devices we used in our experiment. So, if we try to see if there are any probes, we will see that it doesn't know of any: Code block 3.1.4.2. Checking for probes in a session. Type this in to Matlab: S.getprobes() Unless you ran this demo before, you won't see any probes here (it will return an empty cell array). This is the first method we've seen that is not a constructor. Note that we must call this method along with our session object: this is an example of a non-static method, which belongs to a specific object of the class. Much like calling functions, you use a dot between the name of the object and the name of the method. The parentheses after the method are necessary for every method, even if they have no arguments like in this case. We need to make new ndi.daq.system objects for our data acquisition system and our stimulator. Our devices are multifunction data acquisition systems, so we use the ndi.daq.system.mfdaq subtype. An ndi.daq.system object consists of three components: an ndi.file.navigator object whose job it is to find the files or streams associated with each epoch of data, an ndi.daq.reader object whose job it is to read the raw data from the files, and an ndi.daq.metadatareader (optionally) whose job is to read any metadata associated with the epoch (such as stimulus parameter information). First, we will build an ndi.daq.system.mfdaq object that we will call 'ced_daqsystem' to read the electrode data from our CED SMR files. Code block 3.1.4.3. Building an ndi.daq.system.mfdaq object. Type this in to Matlab: ced_filenav = ndi.file.navigator(S, {'.*\\.smr\\>', 'probemap.txt'}, ... 'ndi.epoch.epochprobemap_daqsystem','probemap.txt'); ced_rdr = ndi.daq.reader.mfdaq.cedspike2(); ced_system = ndi.daq.system.mfdaq('ced_daqsystem', ced_filenav, ced_rdr); % if you haven't already added the daq system, you can add it here: S.daqsystem_add(ced_system); Note: If you ran the tutorial before, you may have added ced_system to your session S already. That's fine, you'll get an error if you try to do it again. If you want to remove all your daq systems, you can call ndi.session.daqsystem_clear() by typing S.daqsystem_clear() , and then you can add them again. We first create the file navigator object, ced_filenav, utilizing the ndi.file.navigator constructor. As always, we need to specify the parameters of this navigator object. The properties of this class are listed here , and will also be listed here for convenience. Properties Property Description session The ndi.session to be examined (handle) fileparameters The parameters for finding files epochprobemap_fileparameters The parameters for finding the epochprobemap files identifier epochprobemap_class In this case, the session is our object S. The fileparameters are {'. .smr>', 'probemap.txt'}: The asterisk * acts as a wildcard in '. .smr>', so our file navigator will access any file with extension .smr. The addition of 'probemap.txt' means that our navigator will also access this file. epochprobemap_fileparameters specifies the files that make up an epoch, which is just probemap.txt in this case, and the epochprobemap_class indicates which class of epoch record is used: in this case, it uses the default class ndi.epoch.epochprobemap_daqsystem. Note that the identifier is an optional parameter and is not used in this case. After creating the navigator, we create the reader object that can specifically read CED smr files. We do not input any parameters into the ndi.daq.reader.mfdaq.cedspike2() method when creating the object because the only property it has is a unique identifier. NDI uses the default constructor to create an object with no input parameters. We do not need to create a metadatareader object in this case because there is no metadata. Therefore, we can finally create the ndi.daq.system.mfdaq object. Utilizing the ndi.daq.system.mfdaq method, we create the ced_system object. We specify the name as ced_daqsystem , the filenavigator as ced_filenav, the daqreader as ced_rdr, and the epochprobemap_class as ndi.epoch.epochprobemap_daqsystem . We do not specify the daqmetadatareader because we do not need one here, and we do not specify the identifier because we only make a single object; there's no need for a unique identifier. Let's look at the epochs that ced_system can find in order to understand how it searches for epochs: Code block 3.1.4.4. Taking a look at the epochtable and epochfiles. Type this into Matlab % let's look at the epochs the daq.system can find et = ced_system.epochtable() % should see a 4 element answer f = ced_system.filenavigator.getepochfiles(1) % you should see the files from epoch 1, t00001 The first line uses the method epochtable() to return a structure array and assigns it to the variable \"et\". Structure arrays store data in containers called fields, each field containing data of its own. The Mathworks website has a helpful visual of structure arrays, located here. et has a 1x4 struct array with the fields epoch_id, epoch_session_id, epochprobemap, epoch_clock, t0_t1, and underlying_epochs. In other words, the struct array contains four different epochs, each with seven different fields. We recommend opening the et variable in the Workspace to take a direct look. The method ced_system.filenavigator.getepochfiles(1) assigns all the files in epoch 1 (t00001) to the variable f. When we open f in the Workspace, we can see that there are two file paths. One is to spike2data.smr, while another is to probemap.txt. The two lines of code described above are used to take a look at what epochs and epoch files exist in our session. Second, we will build an ndi.daq.system.mfdaq object for our visual stimulus system. The setup for this DAQ system will be very similar to the prior example. Code block 3.1.4.5. Building another ndi.daq.system.mfdaq object. Type this in to Matlab: vis_filenav = ndi.file.navigator(S, {'.*\\.smr\\>', 'probemap.txt', 'stims.tsv'},... 'ndi.epoch.epochprobemap_daqsystem','probemap.txt'); vis_rdr = ndi.daq.reader.mfdaq.cedspike2(); vis_mdrdr = ndi.daq.metadatareader('stims.tsv'); vis_system = ndi.daq.system.mfdaq('vis_daqsystem', vis_filenav, vis_rdr, {vis_mdrdr}); % if you haven't already added the daq system, you can add it here: S.daqsystem_add(vis_system); The ced_system and the vis_system both have very similar readers ndi.daq.reader.mfdaq.cedspike2() under different object names. The only difference between the two is that the file parameters for the vis_system reader include the stims.tsv file. This means that the vis_rdr will be able to access the stims.tsv file as well. Again, we don't use identifiers when creating our ndi.daq.system.mfdaq object. It might be useful to assign identifiers to each object now that we have more than one, but we won't be doing too much with these particular objects other than making our DAQ system. Aside from differences in file parameters, the key difference between the ced_system and the vis_system is that the vis_system requires a ndi.daq.metadatareader object. Unlike the reader object which only requires an identifier that is assigned by NDI, the metadatareader object requires for us to manually identify the tab_separated_file_parameter property. In this case, we identify the tab_separated_file_parameter as the stims.tsv file. Last, we will tell NDI how these devices are synchronized with each other. These two daq systems have a file in common ( spike2data.smr ), which means that they have a common time base, but NDI doesn't know that the two daq systems can be synchronized yet. Here we add a \"syncrule\" that tells NDI that any daq systems that share at least 2 files per epoch also share a common time clock for that epoch. Our two DAQ systems share the same session and files, meaning that our syncrule will sync their time clocks. Code block 3.1.4.6. Synching the devices. Type this in to Matlab: nsf = ndi.time.syncrule.filematch(struct('number_fullpath_matches',2)); S.syncgraph_addrule(nsf); We create an object nsf of class ndi.time.synchrule.filematch, which dictates the number of files that must match in order for the syncrule to apply. The function \"struct\" creates a structural array with the syntax struct(field, value). In this case, the constructor takes an input of a structural array with field 'number_fullpath_matches.' whose value is 2. This object is added to the session through the syncgraph_addrule() method so that NDI knows which DAQ systems to synchronize in our experiment. We know that the stimulator (vis_system) and the data acquisition system (ced_system) are in sync because they both share spike2data.smr and probemap.txt. 3.1.5 Opening the data in NDI: accessing probes via from ndi.daq.system.mfdaq Now we can use NDI to see the probes that these daq systems can find and to access the data from those probes. Let's look at the electrode probe data first. Code block 3.1.5.1. Examining and accessing the electrode probe data. Type this in to Matlab: p = S.getprobes() % get all of the probes that are in the ndi.session S for i=1:numel(p), p{i}, end; % display the probe information for each probe % look at the number of epochs recorded for probe 1 p_ctx1_list = S.getprobes('name','ctx','reference',1) % returns a cell array of matches p_ctx1 = p_ctx1_list{1}; % take the first one, should be the only one et = p_ctx1.epochtable() for i=1:numel(et), et(i), end; % display the epoch table entries epoch_to_read = 1; Here we first assign all the probes in session S to array p through the getprobes() method. Arrays are data types that contain several elements , each of which has the same data type. The position of each element is a number called the index . Unlike many other programming languages, Matlab's arrays start at 1 instead of 0, so the first element in an array has an index of 1, the second has an index of 2, and so on. When you open p in the workspace, you see that there are 3 probes with unique properties. Each has a session, name, type, reference, underlying_element, direct, subject_id, dependencies, and identifier property assigned to them. To take a look at the properties of each probe in the command window, we utilize this for loop: for i=1:numel(p), p{i}, end; For loops are useful when we need to run a segment of code a specified number of times, such as iterating through each entry of an array. For loops work by creating a variable of a specified value, defining an end point with another value, then incrementing the variable until it equals the end point. Let's break down the for loop above. We first define a variable i that begins at 1 and ends at numel(p). The colon is used to create a range of values that our loop will iterate through, increasing from the first value until it reaches the second value. The range is inclusive in Matlab, so the loop runs once more once it reaches the final value. For loops increment the variable by 1 by default, but a middle argument can be included to increment by a different amount instead. numel() is a function used to return the number of elements inside an array. In our case we use numel(p), which gives a value of 3 for the 3 probes in the array p. Our loop will run 3 times: once initially when i = 1, a second time when i = 2, then a third time when i = 3. Once the variable increments past numel(p), the loop terminates. Finally, the p{i} shows the contents of element i of array p. Since i is our loop variable, the loop will display the 1st, 2nd, and 3rd elements of the array, in this case the information about each probe. Before we take a look at the epoch data for each probe, we need to specify the probe in question. To get access to the probe that we want, we create an array p_ctx1_list utilizing the getprobes method while specifying the name and reference number. In the parenthesis of the method we write the name of the field followed by its value, so the method returns all probes with name 'ctx' and reference number 1. When we run this line of code we see that p_ctx1_list is a 1x1 cell array, so only one probe matches these criteria. You can see that probe 1 has a name of ctx , a reference of 1 , and it is of type n-trode , or an n-channel electrode. It has a software object type of ndi.probe.timeseries.mfdaq , which simply means it is associated with multifunction DAQ systems and returns timeseries observations. We then assign the first element(probe 1) in array p to the variable p_ctx1. p_ctx1 = p_ctx1_list{1}. The line of code above tells Matlab to assign the element with index 1 in the array of p_ctx1_list to the variable p_ctx1. After creating p_ctx1, we create the epochtable for p_ctxt using the epochtable method. Like before, we assign the information to the array et, then use a for loop to display each entry in the epoch table. Inside of et are 2 epochs with a unique epoch_number, epoch_id, epoch_session_id, epochprobemap, epoch_clock, t0_t1, and underlying_epochs. At this point, however, there is no epochprobemap assigned to these epochs. Finally, we create the variable epoch_to_read, which specifies which epoch will be plotted later. We set it equal to the reference number of our epoch, which is 1 in this case. Now let's read data from our probe p_ctx1 and plot the data: Code block 3.1.5.2. Plotting the electrode probe data. Type this into Matlab [data,t,timeref_p_ctx1]=p_ctx1.readtimeseries(epoch_to_read,-Inf,Inf); % read all data from epoch 1 figure(100); plot(t,data); xlabel('Time(s)'); ylabel('Voltage (V)'); set(gca,'xlim',[t(1) t(end)]); box off; This code calls an important function for reading data from probes: ndi.timeseries.readtimeseries : This code is documentation; do not type into Matlab [D, T, TIMEREF] = ndi.timeseries.readtimeseries(EPOCH_OR_TIMEREF, T0, T1) % Reads data and timestamps from an ndi.timeseries.readtimeseries object with respect % to a specific epoch or an ndi.time.timereference object, from time T0 to T1. We identified the epoch_to_read as 1 prior, and we tell the NDI to read the timestamps and data starting from time equals negative infinity to time equals positive infinity. We essentially tell the NDI to read all of the data in epoch 1 and assign them to the arrays data and t, with TIMEREF referring to the units of time of t. Then we create a figure labeled 100 using the figure(100) line of code. This opens up a figure where we can plot data. The number acts as an identifier, not as any property of the graph itself. The plot function is used to plot the variable t with data obtained prior. This will show us the electrode probe data in voltage vs. time. Finally we will use the xlabel and ylabel function to label the axis of our figure. The last 2 lines of code are used to adjust the appearance of the plot. 'set(gca, 'xlim', [t(1) t(end)]' edits the x-values of the current axes to go from the initial time to the final time, and 'box off' simply removes the box around the graph. When analyzing data or writing apps to analyze data, ndi.timeseries.readtimeseries is one of the most commonly called functions. Now let's also look at our stimulator probe vis_stim . First, let's examine the epochs that are known to vis_stim : Code block 3.1.5.3. Examining and accessing the stimulator data. Type this in to Matlab: p_visstim_list = S.getprobes('name','vis_stim','reference',1) % returns a cell array of matches p_visstim = p_visstim_list{1}; % take the first one, should be the only one et = p_visstim.epochtable() for i=1:numel(et), et(i), end; % display the epoch table entries This code is nearly identical to what we used in code block 3.1.5.1. Now let's read the data from our stimulator. To do this, we are going to ask NDI to read the stimulus timing information in the time units of our electrode probe p_ctx . You'll notice that when we read data from p_ctx1 , readtimeseries returned an ndi.time.timereference object timeref_p_ctx1 . Let's examine this quickly: Code block 3.1.5.4. Taking a look at the ndi.time.timereference object. Type this in to Matlab: timeref_p_ctx1 You'll see a structure with the following fields: timeref_p_ctx1 timereference with properties referent [1x1 ndi.probe.timeseries.mfdaq] clocktype [1x1 ndi.time.clocktype] epoch 1 time 0 session_ID '412687ba08e28694_c0d9c07d0b8726cf' In NDI, one can refer to time with respect to a variety of different clocks, which is helpful because daq systems typically do not have access to a global clock. We can now ask for the time of the stimulus presentations with respect to our electrode's clock, and add the onset times to the graph. Code block 3.1.5.5. Plotting the stimulator and electrode probe data. Type this in to Matlab: [data,t,timeref_stim]=p_visstim.readtimeseries(timeref_p_ctx1,-Inf,Inf); % read all data from epoch 1 of p_ctx1 ! figure(100); hold on; vlt.neuro.stimulus.plot_stimulus_timeseries(7,t.stimon,t.stimon+2,'stimid',data.stimid); We use the readtimeseries method to read the p_visstim data. Note that we specify to the function that we are using the timeref_p_ctx1 from the electrode probe data to ask for the time of the stimulus presentations with respect to our electrode's clock. By calling figure(100) once more, we specify to Matlab that we want to use figure 100 to plot our stimulus data. However, the problem that arises is that the electrode probe data is already plotted on figure 100. To solve this problem, we utilize the hold on command. hold on is used to save the plots on the current figure so that new plots added on the figure do not delete the existing plots. This is important for us because we want to see the simulus data in relation to the electrode probe data on the same graph. The function vlt.neuro.stimulus.plot_stimulus_timeseries is then used to represent the stimulus data as black bars on the plot. Let's look at what readtimeseries returned in the case of a stimulator. It is a little different than when being used with regularly-sampled data. Code block 3.1.5.6. The output of the readtimeseries method for the stimulator. Type this in to Matlab: t, % show timestamps t.stimon, data, % show data data.stimid, data.parameters{1} Here we examined several fields of the variables data and t returned from readtimeseries from our ndi.probe.timeseries.stimulator . You can see that t is a structure with 2 fields, stimon and stimoff . Our system kept track of when each stimulus began, but in these recordings, we did not have our data acquisition system keep track of when our stimulus turned off. (For later analysis, we will need to read this from the stimulus parameters.) You can also see that data has some metadata about the stimuli. It has the ID number of each stimulus that was shown ( data.stimid(1) is the stimulus that turned on at t.stimon(1) ), and it has the parameters of each stimulus. data.parameters{1} is the parameters of the stimulus with ID number 1. 3.1.6 Discussion/Feedback This concludes our tutorial on the fully manual way of reading data through NDI. This detailed tutorial is a work in progress, so please provide feedback in the comments. In the next tutorial, we'll explore how to create a couple of code objects that read our data directly from a lab's internal structure. Post comments, bugs, questions, or discuss .","title":"3.1 Newbie version of your first electrophysiology experiment with NDI"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#tutorial-31","text":"","title":"Tutorial 3.1"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#getting-started-with-ndi","text":"This tutorial is an alternative to Tutorial 2.1 that is designed for users who are less familiar with programming. It will provide a brief overview of Matlab and object-oriented programming, more in-depth information about the methods and syntax used, and a guide on how to navigate the website and its documentation.","title":"Getting started with NDI"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#basics-of-matlab","text":"Matlab is a language specifically designed for calculations, data visualization, and pattern recognition. It is less flexible in some areas than traditional programming languages, but it excels when working with matrices and arrays , which are data structures that contain multiple elements. It includes many built-in tools and additional libraries for a large variety of tasks. Matlab allows for object-oriented programming, a programming paradigm where data and methods that modify that data are bundled together into objects. Classes can provide a template for objects, including class variables, methods, and constructors, which are methods that are used to create an object of a class with specific input parameters. Classes define the states and behaviors of its objects, and constructors determine the initial values of a given object's attributes, called variables. Variables are used within programs to store all kinds of information, including numbers, individual characters, strings of characters, or arrays, which include a larger number of any given type of variable. Unlike many other programming languages, we do not have to specifically state a variable's type when declaring it. We will start with learning to read an example dataset into NDI. We assume you have already installed NDI and taken the introductory tutorial of the NDI model . These data are available in a compressed folder here . To learn more about Matlab, take a look at . Prior to starting the code, put the \"ts_exper1\" folder into your NDI folder. The NDI folder should be listed under MATLAB\\Documents\\NDI, which is created during the installation of NDI. The MATLAB folder itself is found in the default Documents folder in the Finder. Normally, we'd use some helper functions to open our data to make this process even easier, but this tutorial takes the user through the full manual process for training purposes. Throughout this tutorial, we will first go through the code in detail as necessary, then describe the general function of the block.","title":"Basics of Matlab"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#311-introduction-to-the-experiment","text":"These data are single neuron recordings made with electrodes in the anesthetized tree shrew visual as a part of Van Hooser et al. 2013 . This example data is a very small subset of the original data for the purposes of illustration. In this experiment, a single unit recording electrode was inserted into either lateral geniculate nucleus or V1. The electrode was connected to an amplifier, and the output signal was recorded by a Cambridge Electronic Design (CED) micro1401 digital acquisition board. A CED Spike2 software script was used that stored 1 recording epoch per folder. In software, the voltage from the electrode was assigned to channel 11. A visual stimulus monitor was set up in front of the animal, and visual stimuli were generated by custom software running on a separate computer. A record of the stimulus parameters was stored in the epoch folder in a file called stims.mat , and stimulus timing information was delivered to the digital inputs of the micro1401 in the form of a stimulus onset trigger and an 8-bit stimulus code signal that were generated by the stimulus computer.","title":"3.1.1 Introduction to the experiment"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#312-introduction-to-the-data","text":"The data are in a folder called ts_exper1 . It contains recordings of two neurons, an LGN neuron and a V1 neuron, to presentation of sinusoidal gratings that either vary in orientation or in spatial frequency. The data, as provided by the host lab, are organized into subfolders, named t00001 , t00002 , t00003 , and t00004 . The first two folders are recordings of the LGN neuron, and the second two folders are recordings of the V1 neuron. Each t0000N folder has 3 files: probemap.txt - a file that we made for NDI that describe what probes are recorded in this folder spike2data.smr - a CED Spike2 file that has the raw electrophysiology data and the stimulus timing information stims.mat - A Matlab file that has detailed parameters of the stimuli that were run Again, we recommend that you put ts_exper1 into the NDI folder within the MATLAB folder. It will make it much easier for Matlab to access it, and allow for the following code blocks to work properly. First, let's list these files using the ls command (that's the letter l followed by the letter s , short for list ) and take a quick look at what is in them. Set up the \"prefix\" path to your data as necessary. (Here, we assume you put the ts_exper1 folder into your Matlab userpath folder but you can put it anywhere.)","title":"3.1.2 Introduction to the data"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3121-setting-a-path-type-this-into-matlab","text":"prefix = [userpath filesep 'Documents' filesep 'NDI']; % or '/Users/yourusername/Desktop/' if you put it on the desktop perhaps ls([prefix filesep 'ts_exper1' filesep 't*']); % list all the files in the t0000N folders In the first line, we declare and initialize a variable called \"prefix.\" Declaring a variable means assigning it a name and allocating memory for data to be stored, and initializing it means to assign it a value. In this case, this variable \"prefix\" has been assigned a text string that corresponds to a folder path, or an ordered list of folders. In order to make this path, we start by using the function \"userpath,\" which returns the name of the default MATLAB folder that we previously put the ts_exper1 folder into. Each new folder name afterwards represents going to a subfolder within the starting folder, and \"filesep\" acts as the separator characters between subfolders. We use filesep to make sure that every type of device can properly read the path, as different operating systems have different file separation characters. In Windows, this path would be represented as MATLAB\\Documents\\NDI, while in macOS, this path is MATLAB/Documents/NDI. Rather than writing out the entire path every time we access a file, we will want to go through the process of assigning a path to a variable for quicker access. The ls command (short for list ), lists all the files in a designated folder. In this case, we start from the folder described by \"prefix,\" which we initialized earlier as MATLAB\\Documents\\NDI, then we go further down and select the t* folder inside ts_exper1.","title":"Code block 3.1.2.1: Setting a Path (Type this into Matlab)"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3122-examining-the-data-type-this-in-to-matlab","text":"my_smr_file = fullfile(prefix,'ts_exper1','t00001','spike2data.smr') ndi.example.tutorial.plottreeshrewdata(my_smr_file); In this block, we again assign a path to a variable. In this case, we use the fullfile function, which builds a path to a single file instead of an entire folder. This particular function uses commas rather than filesep between each subfolder/file; this is used whenever separating arguments in a method or function. Note that we reuse prefix, the variable that we defined earlier, in order to create our path more simply. The next line introduces the concept of packages and their functions. Packages are folders that are used primarily to organize related classes and functions; they can also contain other subpackages. The syntax of our class tells us how the packages are structured: the main package is named \"ndi,\" our subpackage is named \"example,\" and the next subpackage is called \"tutorial.\" Functions are files that contain multiple lines of code that receive inputs. As opposed to a script, which is a program that performs exactly the same way every time, functions are more like mathematical equations, having varied outputs or effects depending on their inputs. Our function is called plottreeshrewdata, which naturally plots the tree shrew neural data that our electrode gathered. This particular function requires an input parameter. In this case, this function requires a path to a specific file, which it will plot based on the file's data. Functions are useful when you have a specific piece of code that must be repeated several times and also requires many unique inputs. Information about NDI packages and classes can be found in the documentation on the sidebar. The sidebar shows the hierarchy of packages and classes under the document reference and the syntax, descriptions of each parameter, and overall function of every method under the code reference. This particular method is found here . Looking at the documentation is one of the best ways to familiarize yourself with the different classes and methods of any program. This function shows the raw voltage recording and the stimulus timing information. Each stimulus appears as a number and its duration is indicated by the black bar. You can pan with the mouse to scroll through the recording.","title":"Code block 3.1.2.2: Examining the Data (Type this in to Matlab)"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#313-specifying-the-metadata-that-ndi-needs-to-read-the-experiment","text":"Metadata is \"data about data\"- in this case, metadata is all information about the probes themselves, including their names, types, and unique identification. In this example, we have already prepared the metadata files that are necessary for NDI to read the data. Let's look at them in turn. First, we need to tell NDI what probes we have in our experiment. A probe is anything that measures or stimulates; one end of a probe is connected to a subject , and the other end of a probe is connected to a data acquisition device. We first create an object of class ndi.epoch.epochprobemap . Again, the name of this object tells us that it was created from class epochprobemap, which is a class of the epoch package, which is itself a subpackage of the ndi package. Both classes we have seen are in the epoch package, indicating that they both relate to the function and display of epochs. The organization of packages can help us determine what the packages' contents should generally do; as always, make sure to look at the documentation for more specific information about a particular file. We usually tell NDI how the probe is connected with a little code that instructs NDI how to read this information directly from the laboratory's own file information, but in this example, we will use the generic ndi.epoch.epochprobemap_daqsystem object, which reads in a simple tab-delimited text file. This line introduces the first instance of a class method. Methods are the operations of a class, taking in inputs called parameters and performing an action, often returning an output. This particular method is a constructor, which is a class method that takes in values and instantiates an object of the class with those specific values. If we take a closer look at this class, we see the example constructor MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(NAME, REFERENCE, TYPE, DEVICESTRING, SUBJECTSTRING). This is the general form of a constructor in Matlab: first is the name of the object, which is everything on the left side of the equals sign, then the name of the class that the constructor is part of, which is ndi.epoch.epochprobemap in this case, then each parameter, which is the list of words separated by commas. Note that the name of the object is the name used internally by our program, and is not necessarily the same as the NAME argument that we provide when we make the object. We will describe how to use this constructor more thoroughly after we print the probemap.txt file for directory t00001 :","title":"3.1.3 Specifying the metadata that NDI needs to read the experiment"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3131-taking-a-look-at-the-contents-of-probemaptxt-type-this-in-to-matlab","text":"type (fullfile(prefix,'ts_exper1','t00001','probemap.txt')) The type function prints out the contents of probemap.txt. Again, we identified the path that Matlab must follow to reach this file. You will see a tab-delimited text table that looks like the following. In the Matlab command window, the tabs may not line up, so don't be concerned if it doesn't look like a nice formatted table. name reference type devicestring subjectstring ctx 1 n-trode ced_daqsystem:ai11 treeshrew_12345@mylab.org vis_stim 1 stimulator vis_daqsystem:mk30;text30;md1 treeshrew_12345@mylab.org This text file has all of the information needed to specify the probe and its connections. It has a name for the probe that is meaningful to the user, and the reference specifies an identifier that groups the recordings of the probe. Typically, when the probe is in one physical position, the reference number is kept the same, but when the probe is moved (such as when an electrode is advanced), the reference number is incremented. This tells NDI to try to combine information from recordings that have the same name and reference. type tells NDI what type of probe it is: like the \"name\" from earlier, this is not the same as the Matlab function \"type,\" which displays the contents of a file. There are a variety of pre-determined types, and this type instructs NDI (via this file ) which probe object type to create in software. Now that we have seen each argument in more detail, we can understand how exactly we make an object with this information. If we take the first probe in probemap.txt and substitute in its information, we can make an example object:","title":"Code block 3.1.3.1. Taking a look at the contents of probemap.txt. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#example-1-creating-an-object-do-not-type-into-matlab","text":"example = ndi.epoch.epochprobemap(ctx, 1, n-trode, ced_daqsystem:ai11, treeshrew_12345@mylab.org) As we can see, each piece of information from probemap.txt corresponds with a parameter in our object. The name of our object is entirely separate from the name of our probe, but would normally be something related to the actual name. In general, variables and objects can have any name, but it's often good to make names with actual meanings instead of many placeholder names or single characters. Second, we need to specify the stimulus parameters metadata. Typically, one would create a metadata reader for one's own lab so that the native data can be read directly, but here we have made another tab-delimited text file with the parameters. You can read this for yourself by typing the following:","title":"Example 1: Creating an Object. Do not type into Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3132-taking-a-look-at-the-stimulus-parameters-type-this-in-to-matlab","text":"type (fullfile(prefix,'ts_exper1','t00001','stims.tsv'))","title":"Code block 3.1.3.2. Taking a look at the stimulus parameters. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#314-gaining-access-to-the-data-in-ndi-ndisession-and-ndidaqsystem-objects","text":"Now all that remains is to open the data directory (folder) as an ndi.session object, and make ndi.daq.system objects to read your data. We will use an ndi.session.dir object, which allows us to read information from a directory on disk. We will create a new ndi.system object by calling the constructor with the reference name we wish to give to the session and the pathname to our data:","title":"3.1.4 Gaining access to the data in NDI: ndi.session and ndi.daq.system objects"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3141-creating-an-ndisession-object-type-this-in-to-matlab","text":"S = ndi.session.dir('ts_exper1',[prefix filesep 'ts_exper1']) Now you have made a new object of ndi.session.dir called S. This constructor takes the form: E = ndi.session.dir(REFERENCE, PATHNAME). REFERENCE must be a unique string that will be used to refer to our object, and PATHNAME must be a path leading to a folder. The session S is brand new and doesn't know about any of the devices we used in our experiment. So, if we try to see if there are any probes, we will see that it doesn't know of any:","title":"Code block 3.1.4.1. Creating an ndi.session object. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3142-checking-for-probes-in-a-session-type-this-in-to-matlab","text":"S.getprobes() Unless you ran this demo before, you won't see any probes here (it will return an empty cell array). This is the first method we've seen that is not a constructor. Note that we must call this method along with our session object: this is an example of a non-static method, which belongs to a specific object of the class. Much like calling functions, you use a dot between the name of the object and the name of the method. The parentheses after the method are necessary for every method, even if they have no arguments like in this case. We need to make new ndi.daq.system objects for our data acquisition system and our stimulator. Our devices are multifunction data acquisition systems, so we use the ndi.daq.system.mfdaq subtype. An ndi.daq.system object consists of three components: an ndi.file.navigator object whose job it is to find the files or streams associated with each epoch of data, an ndi.daq.reader object whose job it is to read the raw data from the files, and an ndi.daq.metadatareader (optionally) whose job is to read any metadata associated with the epoch (such as stimulus parameter information). First, we will build an ndi.daq.system.mfdaq object that we will call 'ced_daqsystem' to read the electrode data from our CED SMR files.","title":"Code block 3.1.4.2. Checking for probes in a session. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3143-building-an-ndidaqsystemmfdaq-object-type-this-in-to-matlab","text":"ced_filenav = ndi.file.navigator(S, {'.*\\.smr\\>', 'probemap.txt'}, ... 'ndi.epoch.epochprobemap_daqsystem','probemap.txt'); ced_rdr = ndi.daq.reader.mfdaq.cedspike2(); ced_system = ndi.daq.system.mfdaq('ced_daqsystem', ced_filenav, ced_rdr); % if you haven't already added the daq system, you can add it here: S.daqsystem_add(ced_system); Note: If you ran the tutorial before, you may have added ced_system to your session S already. That's fine, you'll get an error if you try to do it again. If you want to remove all your daq systems, you can call ndi.session.daqsystem_clear() by typing S.daqsystem_clear() , and then you can add them again. We first create the file navigator object, ced_filenav, utilizing the ndi.file.navigator constructor. As always, we need to specify the parameters of this navigator object. The properties of this class are listed here , and will also be listed here for convenience.","title":"Code block 3.1.4.3. Building an ndi.daq.system.mfdaq object. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#properties","text":"Property Description session The ndi.session to be examined (handle) fileparameters The parameters for finding files epochprobemap_fileparameters The parameters for finding the epochprobemap files identifier epochprobemap_class In this case, the session is our object S. The fileparameters are {'. .smr>', 'probemap.txt'}: The asterisk * acts as a wildcard in '. .smr>', so our file navigator will access any file with extension .smr. The addition of 'probemap.txt' means that our navigator will also access this file. epochprobemap_fileparameters specifies the files that make up an epoch, which is just probemap.txt in this case, and the epochprobemap_class indicates which class of epoch record is used: in this case, it uses the default class ndi.epoch.epochprobemap_daqsystem. Note that the identifier is an optional parameter and is not used in this case. After creating the navigator, we create the reader object that can specifically read CED smr files. We do not input any parameters into the ndi.daq.reader.mfdaq.cedspike2() method when creating the object because the only property it has is a unique identifier. NDI uses the default constructor to create an object with no input parameters. We do not need to create a metadatareader object in this case because there is no metadata. Therefore, we can finally create the ndi.daq.system.mfdaq object. Utilizing the ndi.daq.system.mfdaq method, we create the ced_system object. We specify the name as ced_daqsystem , the filenavigator as ced_filenav, the daqreader as ced_rdr, and the epochprobemap_class as ndi.epoch.epochprobemap_daqsystem . We do not specify the daqmetadatareader because we do not need one here, and we do not specify the identifier because we only make a single object; there's no need for a unique identifier. Let's look at the epochs that ced_system can find in order to understand how it searches for epochs:","title":"Properties"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3144-taking-a-look-at-the-epochtable-and-epochfiles-type-this-into-matlab","text":"% let's look at the epochs the daq.system can find et = ced_system.epochtable() % should see a 4 element answer f = ced_system.filenavigator.getepochfiles(1) % you should see the files from epoch 1, t00001 The first line uses the method epochtable() to return a structure array and assigns it to the variable \"et\". Structure arrays store data in containers called fields, each field containing data of its own. The Mathworks website has a helpful visual of structure arrays, located here. et has a 1x4 struct array with the fields epoch_id, epoch_session_id, epochprobemap, epoch_clock, t0_t1, and underlying_epochs. In other words, the struct array contains four different epochs, each with seven different fields. We recommend opening the et variable in the Workspace to take a direct look. The method ced_system.filenavigator.getepochfiles(1) assigns all the files in epoch 1 (t00001) to the variable f. When we open f in the Workspace, we can see that there are two file paths. One is to spike2data.smr, while another is to probemap.txt. The two lines of code described above are used to take a look at what epochs and epoch files exist in our session. Second, we will build an ndi.daq.system.mfdaq object for our visual stimulus system. The setup for this DAQ system will be very similar to the prior example.","title":"Code block 3.1.4.4. Taking a look at the epochtable and epochfiles. Type this into Matlab"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3145-building-another-ndidaqsystemmfdaq-object-type-this-in-to-matlab","text":"vis_filenav = ndi.file.navigator(S, {'.*\\.smr\\>', 'probemap.txt', 'stims.tsv'},... 'ndi.epoch.epochprobemap_daqsystem','probemap.txt'); vis_rdr = ndi.daq.reader.mfdaq.cedspike2(); vis_mdrdr = ndi.daq.metadatareader('stims.tsv'); vis_system = ndi.daq.system.mfdaq('vis_daqsystem', vis_filenav, vis_rdr, {vis_mdrdr}); % if you haven't already added the daq system, you can add it here: S.daqsystem_add(vis_system); The ced_system and the vis_system both have very similar readers ndi.daq.reader.mfdaq.cedspike2() under different object names. The only difference between the two is that the file parameters for the vis_system reader include the stims.tsv file. This means that the vis_rdr will be able to access the stims.tsv file as well. Again, we don't use identifiers when creating our ndi.daq.system.mfdaq object. It might be useful to assign identifiers to each object now that we have more than one, but we won't be doing too much with these particular objects other than making our DAQ system. Aside from differences in file parameters, the key difference between the ced_system and the vis_system is that the vis_system requires a ndi.daq.metadatareader object. Unlike the reader object which only requires an identifier that is assigned by NDI, the metadatareader object requires for us to manually identify the tab_separated_file_parameter property. In this case, we identify the tab_separated_file_parameter as the stims.tsv file. Last, we will tell NDI how these devices are synchronized with each other. These two daq systems have a file in common ( spike2data.smr ), which means that they have a common time base, but NDI doesn't know that the two daq systems can be synchronized yet. Here we add a \"syncrule\" that tells NDI that any daq systems that share at least 2 files per epoch also share a common time clock for that epoch. Our two DAQ systems share the same session and files, meaning that our syncrule will sync their time clocks.","title":"Code block 3.1.4.5. Building another ndi.daq.system.mfdaq object. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3146-synching-the-devices-type-this-in-to-matlab","text":"nsf = ndi.time.syncrule.filematch(struct('number_fullpath_matches',2)); S.syncgraph_addrule(nsf); We create an object nsf of class ndi.time.synchrule.filematch, which dictates the number of files that must match in order for the syncrule to apply. The function \"struct\" creates a structural array with the syntax struct(field, value). In this case, the constructor takes an input of a structural array with field 'number_fullpath_matches.' whose value is 2. This object is added to the session through the syncgraph_addrule() method so that NDI knows which DAQ systems to synchronize in our experiment. We know that the stimulator (vis_system) and the data acquisition system (ced_system) are in sync because they both share spike2data.smr and probemap.txt.","title":"Code block 3.1.4.6. Synching the devices. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#315-opening-the-data-in-ndi-accessing-probes-via-from-ndidaqsystemmfdaq","text":"Now we can use NDI to see the probes that these daq systems can find and to access the data from those probes. Let's look at the electrode probe data first.","title":"3.1.5 Opening the data in NDI: accessing probes via from ndi.daq.system.mfdaq"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3151-examining-and-accessing-the-electrode-probe-data-type-this-in-to-matlab","text":"p = S.getprobes() % get all of the probes that are in the ndi.session S for i=1:numel(p), p{i}, end; % display the probe information for each probe % look at the number of epochs recorded for probe 1 p_ctx1_list = S.getprobes('name','ctx','reference',1) % returns a cell array of matches p_ctx1 = p_ctx1_list{1}; % take the first one, should be the only one et = p_ctx1.epochtable() for i=1:numel(et), et(i), end; % display the epoch table entries epoch_to_read = 1; Here we first assign all the probes in session S to array p through the getprobes() method. Arrays are data types that contain several elements , each of which has the same data type. The position of each element is a number called the index . Unlike many other programming languages, Matlab's arrays start at 1 instead of 0, so the first element in an array has an index of 1, the second has an index of 2, and so on. When you open p in the workspace, you see that there are 3 probes with unique properties. Each has a session, name, type, reference, underlying_element, direct, subject_id, dependencies, and identifier property assigned to them. To take a look at the properties of each probe in the command window, we utilize this for loop: for i=1:numel(p), p{i}, end; For loops are useful when we need to run a segment of code a specified number of times, such as iterating through each entry of an array. For loops work by creating a variable of a specified value, defining an end point with another value, then incrementing the variable until it equals the end point. Let's break down the for loop above. We first define a variable i that begins at 1 and ends at numel(p). The colon is used to create a range of values that our loop will iterate through, increasing from the first value until it reaches the second value. The range is inclusive in Matlab, so the loop runs once more once it reaches the final value. For loops increment the variable by 1 by default, but a middle argument can be included to increment by a different amount instead. numel() is a function used to return the number of elements inside an array. In our case we use numel(p), which gives a value of 3 for the 3 probes in the array p. Our loop will run 3 times: once initially when i = 1, a second time when i = 2, then a third time when i = 3. Once the variable increments past numel(p), the loop terminates. Finally, the p{i} shows the contents of element i of array p. Since i is our loop variable, the loop will display the 1st, 2nd, and 3rd elements of the array, in this case the information about each probe. Before we take a look at the epoch data for each probe, we need to specify the probe in question. To get access to the probe that we want, we create an array p_ctx1_list utilizing the getprobes method while specifying the name and reference number. In the parenthesis of the method we write the name of the field followed by its value, so the method returns all probes with name 'ctx' and reference number 1. When we run this line of code we see that p_ctx1_list is a 1x1 cell array, so only one probe matches these criteria. You can see that probe 1 has a name of ctx , a reference of 1 , and it is of type n-trode , or an n-channel electrode. It has a software object type of ndi.probe.timeseries.mfdaq , which simply means it is associated with multifunction DAQ systems and returns timeseries observations. We then assign the first element(probe 1) in array p to the variable p_ctx1. p_ctx1 = p_ctx1_list{1}. The line of code above tells Matlab to assign the element with index 1 in the array of p_ctx1_list to the variable p_ctx1. After creating p_ctx1, we create the epochtable for p_ctxt using the epochtable method. Like before, we assign the information to the array et, then use a for loop to display each entry in the epoch table. Inside of et are 2 epochs with a unique epoch_number, epoch_id, epoch_session_id, epochprobemap, epoch_clock, t0_t1, and underlying_epochs. At this point, however, there is no epochprobemap assigned to these epochs. Finally, we create the variable epoch_to_read, which specifies which epoch will be plotted later. We set it equal to the reference number of our epoch, which is 1 in this case. Now let's read data from our probe p_ctx1 and plot the data:","title":"Code block 3.1.5.1. Examining and accessing the electrode probe data. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3152-plotting-the-electrode-probe-data-type-this-into-matlab","text":"[data,t,timeref_p_ctx1]=p_ctx1.readtimeseries(epoch_to_read,-Inf,Inf); % read all data from epoch 1 figure(100); plot(t,data); xlabel('Time(s)'); ylabel('Voltage (V)'); set(gca,'xlim',[t(1) t(end)]); box off; This code calls an important function for reading data from probes: ndi.timeseries.readtimeseries :","title":"Code block 3.1.5.2. Plotting the electrode probe data. Type this into Matlab"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#this-code-is-documentation-do-not-type-into-matlab","text":"[D, T, TIMEREF] = ndi.timeseries.readtimeseries(EPOCH_OR_TIMEREF, T0, T1) % Reads data and timestamps from an ndi.timeseries.readtimeseries object with respect % to a specific epoch or an ndi.time.timereference object, from time T0 to T1. We identified the epoch_to_read as 1 prior, and we tell the NDI to read the timestamps and data starting from time equals negative infinity to time equals positive infinity. We essentially tell the NDI to read all of the data in epoch 1 and assign them to the arrays data and t, with TIMEREF referring to the units of time of t. Then we create a figure labeled 100 using the figure(100) line of code. This opens up a figure where we can plot data. The number acts as an identifier, not as any property of the graph itself. The plot function is used to plot the variable t with data obtained prior. This will show us the electrode probe data in voltage vs. time. Finally we will use the xlabel and ylabel function to label the axis of our figure. The last 2 lines of code are used to adjust the appearance of the plot. 'set(gca, 'xlim', [t(1) t(end)]' edits the x-values of the current axes to go from the initial time to the final time, and 'box off' simply removes the box around the graph. When analyzing data or writing apps to analyze data, ndi.timeseries.readtimeseries is one of the most commonly called functions. Now let's also look at our stimulator probe vis_stim . First, let's examine the epochs that are known to vis_stim :","title":"This code is documentation; do not type into Matlab"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3153-examining-and-accessing-the-stimulator-data-type-this-in-to-matlab","text":"p_visstim_list = S.getprobes('name','vis_stim','reference',1) % returns a cell array of matches p_visstim = p_visstim_list{1}; % take the first one, should be the only one et = p_visstim.epochtable() for i=1:numel(et), et(i), end; % display the epoch table entries This code is nearly identical to what we used in code block 3.1.5.1. Now let's read the data from our stimulator. To do this, we are going to ask NDI to read the stimulus timing information in the time units of our electrode probe p_ctx . You'll notice that when we read data from p_ctx1 , readtimeseries returned an ndi.time.timereference object timeref_p_ctx1 . Let's examine this quickly:","title":"Code block 3.1.5.3. Examining and accessing the stimulator data. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3154-taking-a-look-at-the-nditimetimereference-object-type-this-in-to-matlab","text":"timeref_p_ctx1 You'll see a structure with the following fields: timeref_p_ctx1 timereference with properties referent [1x1 ndi.probe.timeseries.mfdaq] clocktype [1x1 ndi.time.clocktype] epoch 1 time 0 session_ID '412687ba08e28694_c0d9c07d0b8726cf' In NDI, one can refer to time with respect to a variety of different clocks, which is helpful because daq systems typically do not have access to a global clock. We can now ask for the time of the stimulus presentations with respect to our electrode's clock, and add the onset times to the graph.","title":"Code block 3.1.5.4. Taking a look at the ndi.time.timereference object. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3155-plotting-the-stimulator-and-electrode-probe-data-type-this-in-to-matlab","text":"[data,t,timeref_stim]=p_visstim.readtimeseries(timeref_p_ctx1,-Inf,Inf); % read all data from epoch 1 of p_ctx1 ! figure(100); hold on; vlt.neuro.stimulus.plot_stimulus_timeseries(7,t.stimon,t.stimon+2,'stimid',data.stimid); We use the readtimeseries method to read the p_visstim data. Note that we specify to the function that we are using the timeref_p_ctx1 from the electrode probe data to ask for the time of the stimulus presentations with respect to our electrode's clock. By calling figure(100) once more, we specify to Matlab that we want to use figure 100 to plot our stimulus data. However, the problem that arises is that the electrode probe data is already plotted on figure 100. To solve this problem, we utilize the hold on command. hold on is used to save the plots on the current figure so that new plots added on the figure do not delete the existing plots. This is important for us because we want to see the simulus data in relation to the electrode probe data on the same graph. The function vlt.neuro.stimulus.plot_stimulus_timeseries is then used to represent the stimulus data as black bars on the plot. Let's look at what readtimeseries returned in the case of a stimulator. It is a little different than when being used with regularly-sampled data.","title":"Code block 3.1.5.5. Plotting the stimulator and electrode probe data. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3156-the-output-of-the-readtimeseries-method-for-the-stimulator-type-this-in-to-matlab","text":"t, % show timestamps t.stimon, data, % show data data.stimid, data.parameters{1} Here we examined several fields of the variables data and t returned from readtimeseries from our ndi.probe.timeseries.stimulator . You can see that t is a structure with 2 fields, stimon and stimoff . Our system kept track of when each stimulus began, but in these recordings, we did not have our data acquisition system keep track of when our stimulus turned off. (For later analysis, we will need to read this from the stimulus parameters.) You can also see that data has some metadata about the stimuli. It has the ID number of each stimulus that was shown ( data.stimid(1) is the stimulus that turned on at t.stimon(1) ), and it has the parameters of each stimulus. data.parameters{1} is the parameters of the stimulus with ID number 1.","title":"Code block 3.1.5.6. The output of the readtimeseries method for the stimulator. Type this in to Matlab:"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#316-discussionfeedback","text":"This concludes our tutorial on the fully manual way of reading data through NDI. This detailed tutorial is a work in progress, so please provide feedback in the comments. In the next tutorial, we'll explore how to create a couple of code objects that read our data directly from a lab's internal structure. Post comments, bugs, questions, or discuss .","title":"3.1.6 Discussion/Feedback"},{"location":"NDI-matlab/tutorials/making_documents/1_making_documents/","text":"Tutorial 8: Making your own NDI documents 8.1: Making your own NDI documents Creating an NDI document class involves creating two .JSON files. The first is a definition of the document class, and also includes blank fields. The second is a schema, that tells NDI what fields must be present and what form the data entries must have in order for the document to be \"valid\". 8.1.1 Designing the database document The first step in designing a database document is to decide where it goes. If you are designing a document for NDI proper, then it should go in a subdirectory of NDI-matlab/ndi_common/database_documents . Let's look at the design of the database document definition for ndi.calc.example.simple , which we placed in ndi_common/database_documents/apps/calculations/simple_calc.json : Code block 7.2.2.1: Database documentation definition for simple_calc (Do not type into Matlab command line) { \"document_class\": { \"definition\": \"$NDIDOCUMENTPATH\\/apps\\/calculations\\/simple_calc.json\", \"validation\": \"$NDISCHEMAPATH\\/apps\\/calculations\\/simple_calc_schema.json\", \"class_name\": \"ndi_calculation_simple_simple_calc\", \"property_list_name\": \"simple\", \"class_version\": 1, \"superclasses\": [ { \"definition\": \"$NDIDOCUMENTPATH\\/ndi_document.json\" }, { \"definition\": \"$NDIDOCUMENTPATH\\/ndi_document_app.json\" } ] }, \"depends_on\": [ { \"name\": \"probe_id\", \"value\": 0 } ], \"simple\": { \"input_parameters\": { \"answer\": 5 }, \"answer\": 0 } } The first block, document_class , is necessary for any document defined in NDI. It includes the location of the definition file, the location of a file for validation (we will cover later), the class name, the property_list_name which tells NDI what the structure that has the main results (later on in the file), the class version (which is 1), and the superclasses of the document. The line that includes the definition for ndi_document indicates that simple calc documents have all the fields of an ndi.document, which must be true for any NDI document. In this case, this document also is a subclass of ndi_document_app, which allows information about the application that created the calculation to be recorded. In the next block, there is a set of \"depends_on\" fields, which indicate which dependencies are required for this document type. Here, we make the document that describes each probe as a dependency, so that the \"answer\" can be attributed to the probe by any program or user that examines the document. Finally, we have the data that is associated with our calculation in the structure simple . Because it is a document for an NDI calculation, it must contain a structure \"input_parameters\" that describe how the calculator should search for its inputs, if there are such parameters (or the structure can be empty if there are none). Last, we have the entries of the structure that contain the output of our calculation, which in this case is a simple field \"answer\". 8.1.2 Another example: An openminds link to subjects: { \"document_class\": { \"definition\": \"$NDIDOCUMENTPATH\\/metadata\\/openminds_subject.json\", \"validation\": \"$NDISCHEMAPATH\\/metadata\\/openminds_subject.json\", \"class_name\": \"openminds_subject\", \"property_list_name\": \"openminds_subject\", \"class_version\": 1, \"superclasses\": [ { \"definition\": \"$NDIDOCUMENTPATH\\/base.json\", \"definition\": \"$NDIDOCUMENTPATH\\/metadata\\/openminds.json\" } ] }, \"depends_on\": [ { \"name\": \"subject_id\", \"value\": \"\" } ], \"openminds_subject\": { } } This document class needs a schema that says what fields are required: { \"classname\": \"openminds_subject\", \"superclasses\": [ \"base\", \"openminds\" ], \"depends_on\": [ { \"name\": \"subject_id\", \"mustbenotempty\": 1} ], \"file\": [ ], \"openminds_subject\": [ ] } 8.1.3 Discussion/Feedback This concludes our tutorial on writing NDI documents. Post comments, bugs, questions, or discuss .","title":"Tutorial 8: Making your own NDI documents"},{"location":"NDI-matlab/tutorials/making_documents/1_making_documents/#tutorial-8-making-your-own-ndi-documents","text":"","title":"Tutorial 8: Making your own NDI documents"},{"location":"NDI-matlab/tutorials/making_documents/1_making_documents/#81-making-your-own-ndi-documents","text":"Creating an NDI document class involves creating two .JSON files. The first is a definition of the document class, and also includes blank fields. The second is a schema, that tells NDI what fields must be present and what form the data entries must have in order for the document to be \"valid\".","title":"8.1: Making your own NDI documents"},{"location":"NDI-matlab/tutorials/making_documents/1_making_documents/#811-designing-the-database-document","text":"The first step in designing a database document is to decide where it goes. If you are designing a document for NDI proper, then it should go in a subdirectory of NDI-matlab/ndi_common/database_documents . Let's look at the design of the database document definition for ndi.calc.example.simple , which we placed in ndi_common/database_documents/apps/calculations/simple_calc.json :","title":"8.1.1 Designing the database document"},{"location":"NDI-matlab/tutorials/making_documents/1_making_documents/#code-block-7221-database-documentation-definition-for-simple_calc-do-not-type-into-matlab-command-line","text":"{ \"document_class\": { \"definition\": \"$NDIDOCUMENTPATH\\/apps\\/calculations\\/simple_calc.json\", \"validation\": \"$NDISCHEMAPATH\\/apps\\/calculations\\/simple_calc_schema.json\", \"class_name\": \"ndi_calculation_simple_simple_calc\", \"property_list_name\": \"simple\", \"class_version\": 1, \"superclasses\": [ { \"definition\": \"$NDIDOCUMENTPATH\\/ndi_document.json\" }, { \"definition\": \"$NDIDOCUMENTPATH\\/ndi_document_app.json\" } ] }, \"depends_on\": [ { \"name\": \"probe_id\", \"value\": 0 } ], \"simple\": { \"input_parameters\": { \"answer\": 5 }, \"answer\": 0 } } The first block, document_class , is necessary for any document defined in NDI. It includes the location of the definition file, the location of a file for validation (we will cover later), the class name, the property_list_name which tells NDI what the structure that has the main results (later on in the file), the class version (which is 1), and the superclasses of the document. The line that includes the definition for ndi_document indicates that simple calc documents have all the fields of an ndi.document, which must be true for any NDI document. In this case, this document also is a subclass of ndi_document_app, which allows information about the application that created the calculation to be recorded. In the next block, there is a set of \"depends_on\" fields, which indicate which dependencies are required for this document type. Here, we make the document that describes each probe as a dependency, so that the \"answer\" can be attributed to the probe by any program or user that examines the document. Finally, we have the data that is associated with our calculation in the structure simple . Because it is a document for an NDI calculation, it must contain a structure \"input_parameters\" that describe how the calculator should search for its inputs, if there are such parameters (or the structure can be empty if there are none). Last, we have the entries of the structure that contain the output of our calculation, which in this case is a simple field \"answer\".","title":"Code block 7.2.2.1: Database documentation definition for simple_calc (Do not type into Matlab command line)"},{"location":"NDI-matlab/tutorials/making_documents/1_making_documents/#812-another-example","text":"An openminds link to subjects: { \"document_class\": { \"definition\": \"$NDIDOCUMENTPATH\\/metadata\\/openminds_subject.json\", \"validation\": \"$NDISCHEMAPATH\\/metadata\\/openminds_subject.json\", \"class_name\": \"openminds_subject\", \"property_list_name\": \"openminds_subject\", \"class_version\": 1, \"superclasses\": [ { \"definition\": \"$NDIDOCUMENTPATH\\/base.json\", \"definition\": \"$NDIDOCUMENTPATH\\/metadata\\/openminds.json\" } ] }, \"depends_on\": [ { \"name\": \"subject_id\", \"value\": \"\" } ], \"openminds_subject\": { } } This document class needs a schema that says what fields are required: { \"classname\": \"openminds_subject\", \"superclasses\": [ \"base\", \"openminds\" ], \"depends_on\": [ { \"name\": \"subject_id\", \"mustbenotempty\": 1} ], \"file\": [ ], \"openminds_subject\": [ ] }","title":"8.1.2 Another example:"},{"location":"NDI-matlab/tutorials/making_documents/1_making_documents/#813-discussionfeedback","text":"This concludes our tutorial on writing NDI documents. Post comments, bugs, questions, or discuss .","title":"8.1.3 Discussion/Feedback"},{"location":"NDI-matlab/tutorials/ndimodel/1_intro/","text":"Tutorial 1: Introduction Introduction The Neuroscience Data Interface (NDI) is a software tool for reading neuroscience data and storing analyses and analyses of analyses in a database. Rather than requiring data to be stored in a particular way, NDI allows the user to specify the formats of the data to be read and its organization scheme, and the user retrieves parts of the data through the NDI application program interface. The database stores documents with both human-readable and binary components, so that complex data pipelines (analyses, and analyses of analyses) can be stored and searched. NDI allows an application ecosystem where applications can focus on calculations rather than data format or organization. In order to understand NDI and how to use it, it is important to understand 2 concepts: 1.2 NDI concepts and vocabulary 1.3 NDI software objects (to be built)","title":"1.1 Introduction"},{"location":"NDI-matlab/tutorials/ndimodel/1_intro/#tutorial-1-introduction","text":"","title":"Tutorial 1: Introduction"},{"location":"NDI-matlab/tutorials/ndimodel/1_intro/#introduction","text":"The Neuroscience Data Interface (NDI) is a software tool for reading neuroscience data and storing analyses and analyses of analyses in a database. Rather than requiring data to be stored in a particular way, NDI allows the user to specify the formats of the data to be read and its organization scheme, and the user retrieves parts of the data through the NDI application program interface. The database stores documents with both human-readable and binary components, so that complex data pipelines (analyses, and analyses of analyses) can be stored and searched. NDI allows an application ecosystem where applications can focus on calculations rather than data format or organization. In order to understand NDI and how to use it, it is important to understand 2 concepts: 1.2 NDI concepts and vocabulary 1.3 NDI software objects (to be built)","title":"Introduction"},{"location":"NDI-matlab/tutorials/ndimodel/2_ndimodel_vocabulary/","text":"Tutorial 1: Introduction 1.2 NDI Concepts and vocabulary In order to make NDI easy to use, we sought to codify the elements of actual experiments using specific terms, in much the same way that concepts like files, folders, and windows make modern computer operating systems easier to use. Probes, subjects, elements, DAQ systems We define a probe as an instrument that makes a measurement of or produces a stimulus for a subject . In this framework, a variety of experimental apparatus are considered probes . Examples of probes that make measurements include a whole cell pipette, a sharp electrode, a single channel extracellular electrode, multichannel electrodes with either known or unknown geometries, cameras, 2-photon microscopes, fMRI machines, nose-poke detectors, EMG electrodes, and EEG electrodes. Examples of probes that provide stimulation are odor ports, valve-driven interaural cannulae, food reward dispensers, visual stimulus monitors, audio speakers, and stimulating electrodes. A probe requires two important connections. The first connection is with a subject . This subject can be an experimental research animal, a human subject, a set of cells in a dish, a test resistor, the air, a potato, anything, but it must be named and given an identifier in NDI. The second important connection of a probe is to a data acquisition system that stores the measurements or the stimulation history of the probe . We term such a system a DAQ system . Each time a DAQ system is switched into record mode, an epoch of data is recorded. Probes are part of a broader class of experiment items that we term elements , which include not only concrete physical objects like probes but also inferred objects that are not observed directly, such as neurons in an extracellular recording experiment, or abstract quantities, such as simulated data, or a model of the information that an animal has about a stimulus at a given time. Real world vocabulary An example experiment. A probe is any instrument that can make a measurement from or provide stimulation to a subject . In this case, an electrode with an amplifier is monitoring signals in the cerebral cortex of a ferret. The electrode is a probe , and the ferret is a subject . A DAQ system is an instrument that digitally logs the measurements or stimulus history of a probe . In this case, a data acquisition system (DAQ) is logging the voltage values produced by the electrode's amplifier and storing the results in a file on a computer. An epoch is an interval of time during which a DAQ system is switched on and then off to make a recording. In this case, 3 epochs have been sampled. The experiment has additional experiment elements . One of these elements is a filtered version of the electrode data. A second element is a neuron, whose existence and spike times have been inferred by a spike analysis application and recorded in the experiment. Real world vocabulary: elements In NDI, a wide variety of experiment items are called elements , of which probes are a subset. Examples of probes include multi-channel extracellular electrodes, reward wells, 2-photon microscopes, intrinsic signal imaging systems, intracellular or extracellular single electrodes, and visual stimulus monitors. Other elements include items that are directly linked to probes , such as filtered versions of signals, or inferred objects like neurons whose activities are inferred from extracellular recordings or images. Still, other elements have no physical derivation, such as artificial data or purely simulated data; nevertheless, we want to be able to treat these items identically in analysis pipelines. Finally, elements might be the result of complex modeling that depends on many other experiment elements , such as an inferred phenomenological model of the amount of information that an animal has about whether a stimulus is a grating. Real world vocabulary: DAQ systems DAQ systems digitally record probe measurements or histories of stimulator activity. In NDI, DAQ systems are logical entities, which could correspond physically to a single DAQ device made by a particular company (top) or a collection of home-brewed devices that operate together to have the behavior of a single DAQ device (bottom). In the bottom example, information from an electrode probe and digital triggers from a visual stimulation probe are acquired on a single DAQ device, but digital information from both systems (in separate files) is needed to fully describe the activity in each epoch. Discussion/Feedback Post comments, bugs, questions, or discuss .","title":"1.2 Real world vocabulary"},{"location":"NDI-matlab/tutorials/ndimodel/2_ndimodel_vocabulary/#tutorial-1-introduction","text":"","title":"Tutorial 1: Introduction"},{"location":"NDI-matlab/tutorials/ndimodel/2_ndimodel_vocabulary/#12-ndi-concepts-and-vocabulary","text":"In order to make NDI easy to use, we sought to codify the elements of actual experiments using specific terms, in much the same way that concepts like files, folders, and windows make modern computer operating systems easier to use.","title":"1.2 NDI Concepts and vocabulary"},{"location":"NDI-matlab/tutorials/ndimodel/2_ndimodel_vocabulary/#probes-subjects-elements-daq-systems","text":"We define a probe as an instrument that makes a measurement of or produces a stimulus for a subject . In this framework, a variety of experimental apparatus are considered probes . Examples of probes that make measurements include a whole cell pipette, a sharp electrode, a single channel extracellular electrode, multichannel electrodes with either known or unknown geometries, cameras, 2-photon microscopes, fMRI machines, nose-poke detectors, EMG electrodes, and EEG electrodes. Examples of probes that provide stimulation are odor ports, valve-driven interaural cannulae, food reward dispensers, visual stimulus monitors, audio speakers, and stimulating electrodes. A probe requires two important connections. The first connection is with a subject . This subject can be an experimental research animal, a human subject, a set of cells in a dish, a test resistor, the air, a potato, anything, but it must be named and given an identifier in NDI. The second important connection of a probe is to a data acquisition system that stores the measurements or the stimulation history of the probe . We term such a system a DAQ system . Each time a DAQ system is switched into record mode, an epoch of data is recorded. Probes are part of a broader class of experiment items that we term elements , which include not only concrete physical objects like probes but also inferred objects that are not observed directly, such as neurons in an extracellular recording experiment, or abstract quantities, such as simulated data, or a model of the information that an animal has about a stimulus at a given time.","title":"Probes, subjects, elements, DAQ systems"},{"location":"NDI-matlab/tutorials/ndimodel/2_ndimodel_vocabulary/#real-world-vocabulary","text":"An example experiment. A probe is any instrument that can make a measurement from or provide stimulation to a subject . In this case, an electrode with an amplifier is monitoring signals in the cerebral cortex of a ferret. The electrode is a probe , and the ferret is a subject . A DAQ system is an instrument that digitally logs the measurements or stimulus history of a probe . In this case, a data acquisition system (DAQ) is logging the voltage values produced by the electrode's amplifier and storing the results in a file on a computer. An epoch is an interval of time during which a DAQ system is switched on and then off to make a recording. In this case, 3 epochs have been sampled. The experiment has additional experiment elements . One of these elements is a filtered version of the electrode data. A second element is a neuron, whose existence and spike times have been inferred by a spike analysis application and recorded in the experiment.","title":"Real world vocabulary"},{"location":"NDI-matlab/tutorials/ndimodel/2_ndimodel_vocabulary/#real-world-vocabulary-elements","text":"In NDI, a wide variety of experiment items are called elements , of which probes are a subset. Examples of probes include multi-channel extracellular electrodes, reward wells, 2-photon microscopes, intrinsic signal imaging systems, intracellular or extracellular single electrodes, and visual stimulus monitors. Other elements include items that are directly linked to probes , such as filtered versions of signals, or inferred objects like neurons whose activities are inferred from extracellular recordings or images. Still, other elements have no physical derivation, such as artificial data or purely simulated data; nevertheless, we want to be able to treat these items identically in analysis pipelines. Finally, elements might be the result of complex modeling that depends on many other experiment elements , such as an inferred phenomenological model of the amount of information that an animal has about whether a stimulus is a grating.","title":"Real world vocabulary: elements"},{"location":"NDI-matlab/tutorials/ndimodel/2_ndimodel_vocabulary/#real-world-vocabulary-daq-systems","text":"DAQ systems digitally record probe measurements or histories of stimulator activity. In NDI, DAQ systems are logical entities, which could correspond physically to a single DAQ device made by a particular company (top) or a collection of home-brewed devices that operate together to have the behavior of a single DAQ device (bottom). In the bottom example, information from an electrode probe and digital triggers from a visual stimulation probe are acquired on a single DAQ device, but digital information from both systems (in separate files) is needed to fully describe the activity in each epoch.","title":"Real world vocabulary: DAQ systems"},{"location":"NDI-matlab/tutorials/ndimodel/2_ndimodel_vocabulary/#discussionfeedback","text":"Post comments, bugs, questions, or discuss .","title":"Discussion/Feedback"},{"location":"NDI-matlab/tutorials/writing_own_app/1_writing_own_app/","text":"Tutorial 7: Writing your own apps 7.1: Writing a simple ndi app This tutorial covers writing an ndi.app in Matlab for NDI that uses the ndi.app.appdoc framework. The app we will make here, called ndi.app.tagger, is very simple, so it serves as a good example. 7.1.1 Deciding what the app will do The first step in designing an app is to have a clear picture of what the app will do. Tagger was developed because there is a need to be able to specify metadata for ndi documents that is not part of their intrinsic parameters. For example, if you put a drug on your preparation, you might want to label certain epochs as belonging to that condition. The label would ideally conform to an ontology, which is a regulated vocabulary. In developing Tagger, we decided there were 2 types of documents that we would like to store. We would like to be able to put a \"tag\", or a label that also potentially has a value, onto any database document. It has the same properties as a tag, but the name implies that the tag refers to a particular type of information, which is an experimental condition. That is, we want a single document type: A tag document that allows one to specify a name and value of a tag, the ontology that it comes from, and to have it \"depend on\" an NDI document id, so it is associated with a particular document. We want our app to be able to Add a tag to the database Find tags that match certain criteria 7.1.2 Discussing the design of the app to ensure it is a very good way of solving the problem It is important to discuss the design of any new app to make sure that it is, at least, a very good way of solving the problem. I usually write out a few alternatives and a written \"debate\" among them. Alternative idea Discussion Why not add the tags to database documents directly? NDI documents are not editable once created; they are designed to be made once, with a time stamp. Other calculations depend on these documents remaining in their original state. If we made NDI documents editable, then, potentially, all calculations based on that document would need to be updated. Instead, you can only delete documents entirely (which removes all dependent documents). Why not allow multiple tags to be added in a single database document? Won't limiting to 1 tag per document mean that there could be a lot of documents? The argument against is the same as the above. We can't edit NDI documents. If someone wants to modify or delete one of the entries, they would have to delete the whole document. Why not just have the user search for tags using the normal database querying? Why write a function to find the documents? This is not necessary but it is a helpful addition; the user could use normal database querying to discover the same things. We offer the function here in the app as a shortcut. 7.1.3 Now we need to add a new document type. There are 2 steps. First, we have to add a blank document that indicates the structure of the document. Second, we have to add a schema document that describes how the document is to be filled in. Here is the document. Since this is part of NDI, we put it in the ndi_common/database_documents/apps/tagger/ directory: ndi_common/database_documents/apps/tagger/tag.json { \"document_class\": { \"definition\": \"$NDIDOCUMENTPATH\\/apps\\/tagger\\/tag.json\", \"validation\": \"$NDISCHEMAPATH\\/apps\\/tagger\\/tag.json\", \"class_name\": \"ndi_document_apps_tagger_tag\", \"property_list_name\": \"tag\", \"class_version\": 1, \"superclasses\": [ { \"definition\": \"$NDIDOCUMENTPATH\\/ndi_document.json\" } ] }, \"depends_on\": [ { \"name\": \"document_id\", \"value\": \"\" } ], \"tag\": { \"ontology\": \"\", \"ontology_name\": \"\", \"ontology_id\": \"\", \"value\": \"\" } } INSERT DETAIL DESCRIBING DOCUMENT And the schema: ndi_common/schema_documents/apps/tagger/tag.json { \"$schema\": \"http://json-schema.org/draft/2019-09/schema#\", \"id\": \"$NDISCHEMAPATH\\/apps\\/ndi_document_apps_tagger_tag.json\", \"title\": \"tag\", \"type\": \"object\", \"properties\": { \"ontology\": { \"type\": \"string\", \"doc_default_value\": \"none\", \"doc_data_type\": \"character array (ASCII)\", \"doc_description\": \"The name of the ontology to be used. At the present time it is okay to leave this blank and use a term that is outside an ontology.\" }, \"ontology_name\": { \"type\": \"string\", \"doc_default_value\": \"\", \"doc_data_type\": \"character array (ASCII)\", \"doc_description\": \"The name of tag in the ontology. If an ontology is specified, this `ontology_name` must match a word in the ontology.\" }, \"ontology_id\": { \"type\": \"string\", \"doc_default_value\": \"\", \"doc_data_type\": \"character array (ASCII)\", \"doc_description\": \"The ID of the word in the ontology. If an ontology is specified, the ID must match the ID of the word or element `ontology_name` in the ontology.\" }, \"value\": { \"type\": \"string\", \"doc_default_value\": \"\", \"doc_data_type\": \"character array (ASCII)\", \"doc_description\": \"A field that may be associated with the tag. May be blank.\" }, \"depends_on\" : { \"type\" : \"array\", \"items\" : [ { \"type\": \"object\", \"properties\" : { \"name\" : { \"const\" : \"document_id\" }, \"value\" : { \"type\" : \"string\" } } } ] } } } INSERT DETAIL DESCRIBING SCHEMA 7.1.6 Discussion/Feedback This concludes our tutorial on writing a simple app in NDI. Post comments, bugs, questions, or discuss .","title":"Tutorial 7: Writing your own apps"},{"location":"NDI-matlab/tutorials/writing_own_app/1_writing_own_app/#tutorial-7-writing-your-own-apps","text":"","title":"Tutorial 7: Writing your own apps"},{"location":"NDI-matlab/tutorials/writing_own_app/1_writing_own_app/#71-writing-a-simple-ndi-app","text":"This tutorial covers writing an ndi.app in Matlab for NDI that uses the ndi.app.appdoc framework. The app we will make here, called ndi.app.tagger, is very simple, so it serves as a good example.","title":"7.1: Writing a simple ndi app"},{"location":"NDI-matlab/tutorials/writing_own_app/1_writing_own_app/#711-deciding-what-the-app-will-do","text":"The first step in designing an app is to have a clear picture of what the app will do. Tagger was developed because there is a need to be able to specify metadata for ndi documents that is not part of their intrinsic parameters. For example, if you put a drug on your preparation, you might want to label certain epochs as belonging to that condition. The label would ideally conform to an ontology, which is a regulated vocabulary. In developing Tagger, we decided there were 2 types of documents that we would like to store. We would like to be able to put a \"tag\", or a label that also potentially has a value, onto any database document. It has the same properties as a tag, but the name implies that the tag refers to a particular type of information, which is an experimental condition. That is, we want a single document type: A tag document that allows one to specify a name and value of a tag, the ontology that it comes from, and to have it \"depend on\" an NDI document id, so it is associated with a particular document. We want our app to be able to Add a tag to the database Find tags that match certain criteria","title":"7.1.1 Deciding what the app will do"},{"location":"NDI-matlab/tutorials/writing_own_app/1_writing_own_app/#712-discussing-the-design-of-the-app-to-ensure-it-is-a-very-good-way-of-solving-the-problem","text":"It is important to discuss the design of any new app to make sure that it is, at least, a very good way of solving the problem. I usually write out a few alternatives and a written \"debate\" among them. Alternative idea Discussion Why not add the tags to database documents directly? NDI documents are not editable once created; they are designed to be made once, with a time stamp. Other calculations depend on these documents remaining in their original state. If we made NDI documents editable, then, potentially, all calculations based on that document would need to be updated. Instead, you can only delete documents entirely (which removes all dependent documents). Why not allow multiple tags to be added in a single database document? Won't limiting to 1 tag per document mean that there could be a lot of documents? The argument against is the same as the above. We can't edit NDI documents. If someone wants to modify or delete one of the entries, they would have to delete the whole document. Why not just have the user search for tags using the normal database querying? Why write a function to find the documents? This is not necessary but it is a helpful addition; the user could use normal database querying to discover the same things. We offer the function here in the app as a shortcut.","title":"7.1.2 Discussing the design of the app to ensure it is a very good way of solving the problem"},{"location":"NDI-matlab/tutorials/writing_own_app/1_writing_own_app/#713","text":"Now we need to add a new document type. There are 2 steps. First, we have to add a blank document that indicates the structure of the document. Second, we have to add a schema document that describes how the document is to be filled in. Here is the document. Since this is part of NDI, we put it in the ndi_common/database_documents/apps/tagger/ directory:","title":"7.1.3"},{"location":"NDI-matlab/tutorials/writing_own_app/1_writing_own_app/#ndi_commondatabase_documentsappstaggertagjson","text":"{ \"document_class\": { \"definition\": \"$NDIDOCUMENTPATH\\/apps\\/tagger\\/tag.json\", \"validation\": \"$NDISCHEMAPATH\\/apps\\/tagger\\/tag.json\", \"class_name\": \"ndi_document_apps_tagger_tag\", \"property_list_name\": \"tag\", \"class_version\": 1, \"superclasses\": [ { \"definition\": \"$NDIDOCUMENTPATH\\/ndi_document.json\" } ] }, \"depends_on\": [ { \"name\": \"document_id\", \"value\": \"\" } ], \"tag\": { \"ontology\": \"\", \"ontology_name\": \"\", \"ontology_id\": \"\", \"value\": \"\" } } INSERT DETAIL DESCRIBING DOCUMENT And the schema:","title":"ndi_common/database_documents/apps/tagger/tag.json"},{"location":"NDI-matlab/tutorials/writing_own_app/1_writing_own_app/#ndi_commonschema_documentsappstaggertagjson","text":"{ \"$schema\": \"http://json-schema.org/draft/2019-09/schema#\", \"id\": \"$NDISCHEMAPATH\\/apps\\/ndi_document_apps_tagger_tag.json\", \"title\": \"tag\", \"type\": \"object\", \"properties\": { \"ontology\": { \"type\": \"string\", \"doc_default_value\": \"none\", \"doc_data_type\": \"character array (ASCII)\", \"doc_description\": \"The name of the ontology to be used. At the present time it is okay to leave this blank and use a term that is outside an ontology.\" }, \"ontology_name\": { \"type\": \"string\", \"doc_default_value\": \"\", \"doc_data_type\": \"character array (ASCII)\", \"doc_description\": \"The name of tag in the ontology. If an ontology is specified, this `ontology_name` must match a word in the ontology.\" }, \"ontology_id\": { \"type\": \"string\", \"doc_default_value\": \"\", \"doc_data_type\": \"character array (ASCII)\", \"doc_description\": \"The ID of the word in the ontology. If an ontology is specified, the ID must match the ID of the word or element `ontology_name` in the ontology.\" }, \"value\": { \"type\": \"string\", \"doc_default_value\": \"\", \"doc_data_type\": \"character array (ASCII)\", \"doc_description\": \"A field that may be associated with the tag. May be blank.\" }, \"depends_on\" : { \"type\" : \"array\", \"items\" : [ { \"type\": \"object\", \"properties\" : { \"name\" : { \"const\" : \"document_id\" }, \"value\" : { \"type\" : \"string\" } } } ] } } } INSERT DETAIL DESCRIBING SCHEMA","title":"ndi_common/schema_documents/apps/tagger/tag.json"},{"location":"NDI-matlab/tutorials/writing_own_app/1_writing_own_app/#716-discussionfeedback","text":"This concludes our tutorial on writing a simple app in NDI. Post comments, bugs, questions, or discuss .","title":"7.1.6 Discussion/Feedback"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/","text":"Tutorial 7: Writing your own apps 7.2: Writing a simple calculation Usually, end user scientists do not want to develop an app, but instead want to develop a consistent and tested method for performing a calculation. We have developed an NDI mini-app class called ndi.calculation for that purpose. ndi.calculation objects require very little in the way of construction: A single document type that they produce A function that creates the document type from input parameters A function that searches for all possible inputs to the function A short documentation for the document type Once we have these ingredients, we have an ndi.calculation that can be run as simply as Code block 7.2.0.1 (Don't type into the Matlab command line until the end, at the bottom.) c = ndi.calc.example.simple(S); % where S is an ndi.session c.run('NoAction'); % will run but will not replace existing calculations with the same parameters We will cover the develop of a very simple calculation: ndi.calc.example.simple 7.2.1 ndi.calc.example.simple Our simple example will be very simple and silly, but illustrates the process of creating an ndi.calculation . We will create a calculation that creates a document for each 'ndi.probe' object that simply has a field called 'answer' that is equal to 5. It is not useful for anything other than demonstrating the steps necessary to create a calculation, but you can use it to design calculations that perform useful analysis and save the results to the database. Let's design this very simple calculation. 7.2.2 Designing the database document Let's look at the design of the database document definition for ndi.calc.example.simple , which we placed in ndi_common/database_documents/apps/calculations/simple_calc.json : Code block 7.2.2.1: Database documentation definition for simple_calc (Do not type into Matlab command line) { \"document_class\": { \"definition\": \"$NDIDOCUMENTPATH\\/apps\\/calculations\\/simple_calc.json\", \"validation\": \"$NDISCHEMAPATH\\/apps\\/calculations\\/simple_calc_schema.json\", \"class_name\": \"ndi_calculation_simple_simple_calc\", \"property_list_name\": \"simple\", \"class_version\": 1, \"superclasses\": [ { \"definition\": \"$NDIDOCUMENTPATH\\/ndi_document.json\" }, { \"definition\": \"$NDIDOCUMENTPATH\\/ndi_document_app.json\" } ] }, \"depends_on\": [ { \"name\": \"probe_id\", \"value\": 0 } ], \"simple\": { \"input_parameters\": { \"answer\": 5 }, \"answer\": 0 } } The first block, document_class , is necessary for any document defined in NDI. It includes the location of the definition file, the location of a file for validation (we will cover later), the class name, the property_list_name which tells NDI what the structure that has the main results (later on in the file), the class version (which is 1), and the superclasses of the document. The line that includes the definition for ndi_document indicates that simple calc documents have all the fields of an ndi.document, which must be true for any NDI document. In this case, this document also is a subclass of ndi_document_app, which allows information about the application that created the calculation to be recorded. In the next block, there is a set of \"depends_on\" fields, which indicate which dependencies are required for this document type. Here, we make the document that describes each probe as a dependency, so that the \"answer\" can be attributed to the probe by any program or user that examines the document. Finally, we have the data that is associated with our calculation in the structure simple . Because it is a document for an NDI calculation, it must contain a structure \"input_parameters\" that describe how the calculator should search for its inputs, if there are such parameters (or the structure can be empty if there are none). Last, we have the entries of the structure that contain the output of our calculation, which in this case is a simple field \"answer\". 7.2.3 Writing the calculation object code We are now ready to write the calculation code. This is the code that we will call to make our calculation. The code has four functions. The first function that is needed is the creator . This function has the same name as the class and does any building that is necessary to make the calculation function. Because ndi.calculation is a subclass of ndi.app and ndi.appdoc , most of our initialization is handled for us. Our code object simple is a subclass of ndi.calculation , which has a handy routine that can be used to tell the object what document it should make. Here is a snapshot of the creator function. Note that this code snippet can't stand on its own; we will give the full object code at the bottom. Code block 7.2.3.1: Creator for ndi.calc.example.simple (do not type into Matlab command line): function simple_obj = simple(session) % SIMPLE - a simple demonstration of an ndi.calculation object % % SIMPLE_OBJ = SIMPLE(SESSION) % % Creates a SIMPLE ndi.calculation object % ndi.globals; simple_obj = simple_obj@ndi.calculation(session,'simple_calc',... fullfile(ndi_globals.path.documentpath,'apps','calculations','simple_calc.json')); end; % simple() The second function is the calculate function that actually performs the calculation, given inputs. The parameters input to calculate needs to have the same fields as the structure that holds the central data of the document; in this case, it needs to be a structure with the fields of simple in the document above ( input_parameters , depends_on , simple ). Code block 7.2.3.2: calculate function for ndi.calc.example.simple (do not type into Matlab command line): function doc = calculate(ndi_calculation_obj, parameters) % CALCULATE - perform the calculation for ndi.calc.example.simple % % DOC = CALCULATE(NDI_CALCULATION_OBJ, PARAMETERS) % % Creates a simple_calc document given input parameters. % % The document that is created simple has an 'answer' that is given % by the input parameters. % check inputs if ~isfield(parameters,'input_parameters'), error(['parameters structure lacks ''input_parameters.''']); end; if ~isfield(parameters,'depends_on'), error(['parameters structure lacks ''depends_on.''']); end; simple = parameters; simple.answer = parameters.input_parameters.answer; doc = ndi.document(ndi_calculation_obj.doc_document_types{1},'simple',simple); for i=1:numel(parameters.depends_on), doc = doc.set_dependency_value(parameters.depends_on(i).name,parameters.depends_on(i).value); end; end; % calculate The function simply sets the answer field to the answer field of the input_parameters, and then sets the dependency that was input. You'll notice that the calculate function performs the calculation with its inputs fully set up. Some other function has set up the inputs correctly so that the function can perform its calculation. The user can do this manually, but the best practice is to have the ndi.calculation object search for all of the possible inputs on which it can perform the calculation. This allows the calculation to be called simply by the run function. Code block 7.2.3.3: default_search_for_input_parameters function for ndi.calc.example.simple (do not type into Matlab command line): function parameters = default_search_for_input_parameters(ndi_calculation_obj) % DEFAULT_SEARCH_FOR_INPUT_PARAMETERS - default parameters for searching for inputs % % PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATION_OBJ) % % Returns a list of the default search parameters for finding appropriate inputs % to the calculation. % parameters.input_parameters = struct('answer',5); parameters.depends_on = vlt.data.emptystruct('name','value'); parameters.query = struct('name','probe_id','query',ndi.query('element.ndi_element_class','contains_string','ndi.probe','')); end; % default_search_for_input_parameters The last function that we need is a documentation function that simply returns its own help as a text string. This allows other programs to see the documentation for the calculation, and gives programmers/users a consistent place in the help to look for a description of what the calculation does. Code block 7.2.3.4 doc_about for ndi.calc.example.simple (do not type into Matlab command line): function doc_about(ndi_calculation_obj) % ---------------------------------------------------------------------------------------------- % NDI_CALCULATION: SIMPLE_CALC % ---------------------------------------------------------------------------------------------- % % ------------------------ % | SIMPLE_CALC -- ABOUT | % ------------------------ % % SIMPLE_CALC is a demonstration document. It simply produces the 'answer' that % is provided in the input parameters. Each SIMPLE_CALC document 'depends_on' an % NDI daq system. % % Definition: apps/simple_calc.json % eval(['help ndi.calc.example.simple.doc_about']); end; %doc_about() Putting it all together, we can look at the entire calculation: Code block 7.2.3.5: Full object code for ndi.calc.example.simple : classdef simple < ndi.calculation methods function simple_obj = simple(session) % SIMPLE - a simple demonstration of an ndi.calculation object % % SIMPLE_OBJ = SIMPLE(SESSION) % % Creates a SIMPLE ndi.calculation object % ndi.globals; simple_obj = simple_obj@ndi.calculation(session,'simple_calc',... fullfile(ndi_globals.path.documentpath,'apps','calculations','simple_calc.json')); end; % simple() function doc = calculate(ndi_calculation_obj, parameters) % CALCULATE - perform the calculation for ndi.calc.example.simple % % DOC = CALCULATE(NDI_CALCULATION_OBJ, PARAMETERS) % % Creates a simple_calc document given input parameters. % % The document that is created simple has an 'answer' that is given % by the input parameters. % check inputs if ~isfield(parameters,'input_parameters'), error(['parameters structure lacks ''input_parameters.''']); end; if ~isfield(parameters,'depends_on'), error(['parameters structure lacks ''depends_on.''']); end; simple = parameters; simple.answer = parameters.input_parameters.answer; doc = ndi.document(ndi_calculation_obj.doc_document_types{1},'simple',simple); for i=1:numel(parameters.depends_on), doc = doc.set_dependency_value(parameters.depends_on(i).name,parameters.depends_on(i).value); end; end; % calculate function parameters = default_search_for_input_parameters(ndi_calculation_obj) % DEFAULT_SEARCH_FOR_INPUT_PARAMETERS - default parameters for searching for inputs % % PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATION_OBJ) % % Returns a list of the default search parameters for finding appropriate inputs % to the calculation. % parameters.input_parameters = struct('answer',5); parameters.depends_on = vlt.data.emptystruct('name','value'); parameters.query = struct('name','probe_id','query',ndi.query('element.ndi_element_class','contains_string','ndi.probe','')); end; % default_search_for_input_parameters function doc_about(ndi_calculation_obj) % ---------------------------------------------------------------------------------------------- % NDI_CALCULATION: SIMPLE_CALC % ---------------------------------------------------------------------------------------------- % % ------------------------ % | SIMPLE_CALC -- ABOUT | % ------------------------ % % SIMPLE_CALC is a demonstration document. It simply produces the 'answer' that % is provided in the input parameters. Each SIMPLE_CALC document 'depends_on' an % NDI probe. % % Definition: apps/simple_calc.json % eval(['help ndi.calc.example.simple.doc_about']); end; %doc_about() end; % methods() end % simple 7.3.1 Running the calculation Let's open our tree shrew experiment from Tutorials 2.1-2.5 to run the calculation. Code block 7.3.1.1. Opening the tree shrew experiment (type into the Matlab command line). dirname = [userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2']; % change this if you put the example somewhere else ref = 'ts_exper2'; S = ndi.session.dir(ref,dirname); Now we can run the calculation, as in the beginning of the tutorial. We can run the calculation in one of two modes. In the first mode, we can run the calculation on all possible inputs. Code block 7.3.1.2. Running the calculation, asking the program to find all possible inputs (type into the Matlab command line). c = ndi.calc.example.simple(S); d = c.run('NoAction'); % will run but will not replace existing calculations with the same parameters Now let's search for the documents we just created, even though we had them returned in d . We will inspect the output. Code block 7.3.1.3. Searching for the calculations we made (type into Matlab command line). D = S.database_search(ndi.query('','isa','simple_calc','')); D{1}.document_properties.simple, % should be struct with field 'answer' == 5 D{1}.document_properties.depends_on % should have name of 'probe_id' The other way to call a calculation is to use a very targeted set of parameters. If you want to perform your calculation only on specific items, such in the case of ndi.calc.example.simple , a specific probe or probes, then you can do that, too, by specifying the specific inputs that you want to search for. Code block 7.3.1.4 Running the calculation, asking the program to find a specific input to the calculation (type into the Matlab command line). p = S.getprobes('type','n-trode'); disp(['Probe {1} properties are as follows:']); p{1}, % look at the probe properties input_p.input_parameters.answer = 5; input_p.depends_on = struct('name','probe_id','value',p{1}.id()); d2 = c.run('Replace',input_p); % let's replace it disp(['Document properties:']); d2{1}.document_properties.simple, % should be struct with field 'answer' == 5 d2{1}.document_properties.depends_on % should have name of 'probe_id' and p{1}'s probe id One can use some additional queries to find specific or parameterized documents to use as inputs for a calculation. See help ndi.calculation.search_for_input_parameters or look at the ndi.calculation help page. 7.1.6 Discussion/Feedback This concludes our tutorial on writing a simple NDI calculation. Post comments, bugs, questions, or discuss .","title":"Tutorial 7: Writing your own apps"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#tutorial-7-writing-your-own-apps","text":"","title":"Tutorial 7: Writing your own apps"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#72-writing-a-simple-calculation","text":"Usually, end user scientists do not want to develop an app, but instead want to develop a consistent and tested method for performing a calculation. We have developed an NDI mini-app class called ndi.calculation for that purpose. ndi.calculation objects require very little in the way of construction: A single document type that they produce A function that creates the document type from input parameters A function that searches for all possible inputs to the function A short documentation for the document type Once we have these ingredients, we have an ndi.calculation that can be run as simply as","title":"7.2: Writing a simple calculation"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7201-dont-type-into-the-matlab-command-line-until-the-end-at-the-bottom","text":"c = ndi.calc.example.simple(S); % where S is an ndi.session c.run('NoAction'); % will run but will not replace existing calculations with the same parameters We will cover the develop of a very simple calculation: ndi.calc.example.simple","title":"Code block 7.2.0.1 (Don't type into the Matlab command line until the end, at the bottom.)"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#721-ndicalcexamplesimple","text":"Our simple example will be very simple and silly, but illustrates the process of creating an ndi.calculation . We will create a calculation that creates a document for each 'ndi.probe' object that simply has a field called 'answer' that is equal to 5. It is not useful for anything other than demonstrating the steps necessary to create a calculation, but you can use it to design calculations that perform useful analysis and save the results to the database. Let's design this very simple calculation.","title":"7.2.1 ndi.calc.example.simple"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#722-designing-the-database-document","text":"Let's look at the design of the database document definition for ndi.calc.example.simple , which we placed in ndi_common/database_documents/apps/calculations/simple_calc.json :","title":"7.2.2 Designing the database document"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7221-database-documentation-definition-for-simple_calc-do-not-type-into-matlab-command-line","text":"{ \"document_class\": { \"definition\": \"$NDIDOCUMENTPATH\\/apps\\/calculations\\/simple_calc.json\", \"validation\": \"$NDISCHEMAPATH\\/apps\\/calculations\\/simple_calc_schema.json\", \"class_name\": \"ndi_calculation_simple_simple_calc\", \"property_list_name\": \"simple\", \"class_version\": 1, \"superclasses\": [ { \"definition\": \"$NDIDOCUMENTPATH\\/ndi_document.json\" }, { \"definition\": \"$NDIDOCUMENTPATH\\/ndi_document_app.json\" } ] }, \"depends_on\": [ { \"name\": \"probe_id\", \"value\": 0 } ], \"simple\": { \"input_parameters\": { \"answer\": 5 }, \"answer\": 0 } } The first block, document_class , is necessary for any document defined in NDI. It includes the location of the definition file, the location of a file for validation (we will cover later), the class name, the property_list_name which tells NDI what the structure that has the main results (later on in the file), the class version (which is 1), and the superclasses of the document. The line that includes the definition for ndi_document indicates that simple calc documents have all the fields of an ndi.document, which must be true for any NDI document. In this case, this document also is a subclass of ndi_document_app, which allows information about the application that created the calculation to be recorded. In the next block, there is a set of \"depends_on\" fields, which indicate which dependencies are required for this document type. Here, we make the document that describes each probe as a dependency, so that the \"answer\" can be attributed to the probe by any program or user that examines the document. Finally, we have the data that is associated with our calculation in the structure simple . Because it is a document for an NDI calculation, it must contain a structure \"input_parameters\" that describe how the calculator should search for its inputs, if there are such parameters (or the structure can be empty if there are none). Last, we have the entries of the structure that contain the output of our calculation, which in this case is a simple field \"answer\".","title":"Code block 7.2.2.1: Database documentation definition for simple_calc (Do not type into Matlab command line)"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#723-writing-the-calculation-object-code","text":"We are now ready to write the calculation code. This is the code that we will call to make our calculation. The code has four functions. The first function that is needed is the creator . This function has the same name as the class and does any building that is necessary to make the calculation function. Because ndi.calculation is a subclass of ndi.app and ndi.appdoc , most of our initialization is handled for us. Our code object simple is a subclass of ndi.calculation , which has a handy routine that can be used to tell the object what document it should make. Here is a snapshot of the creator function. Note that this code snippet can't stand on its own; we will give the full object code at the bottom.","title":"7.2.3 Writing the calculation object code"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7231-creator-for-ndicalcexamplesimple-do-not-type-into-matlab-command-line","text":"function simple_obj = simple(session) % SIMPLE - a simple demonstration of an ndi.calculation object % % SIMPLE_OBJ = SIMPLE(SESSION) % % Creates a SIMPLE ndi.calculation object % ndi.globals; simple_obj = simple_obj@ndi.calculation(session,'simple_calc',... fullfile(ndi_globals.path.documentpath,'apps','calculations','simple_calc.json')); end; % simple() The second function is the calculate function that actually performs the calculation, given inputs. The parameters input to calculate needs to have the same fields as the structure that holds the central data of the document; in this case, it needs to be a structure with the fields of simple in the document above ( input_parameters , depends_on , simple ).","title":"Code block 7.2.3.1: Creator for ndi.calc.example.simple (do not type into Matlab command line):"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7232-calculate-function-for-ndicalcexamplesimple-do-not-type-into-matlab-command-line","text":"function doc = calculate(ndi_calculation_obj, parameters) % CALCULATE - perform the calculation for ndi.calc.example.simple % % DOC = CALCULATE(NDI_CALCULATION_OBJ, PARAMETERS) % % Creates a simple_calc document given input parameters. % % The document that is created simple has an 'answer' that is given % by the input parameters. % check inputs if ~isfield(parameters,'input_parameters'), error(['parameters structure lacks ''input_parameters.''']); end; if ~isfield(parameters,'depends_on'), error(['parameters structure lacks ''depends_on.''']); end; simple = parameters; simple.answer = parameters.input_parameters.answer; doc = ndi.document(ndi_calculation_obj.doc_document_types{1},'simple',simple); for i=1:numel(parameters.depends_on), doc = doc.set_dependency_value(parameters.depends_on(i).name,parameters.depends_on(i).value); end; end; % calculate The function simply sets the answer field to the answer field of the input_parameters, and then sets the dependency that was input. You'll notice that the calculate function performs the calculation with its inputs fully set up. Some other function has set up the inputs correctly so that the function can perform its calculation. The user can do this manually, but the best practice is to have the ndi.calculation object search for all of the possible inputs on which it can perform the calculation. This allows the calculation to be called simply by the run function.","title":"Code block 7.2.3.2: calculate function for ndi.calc.example.simple (do not type into Matlab command line):"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7233-default_search_for_input_parameters-function-for-ndicalcexamplesimple-do-not-type-into-matlab-command-line","text":"function parameters = default_search_for_input_parameters(ndi_calculation_obj) % DEFAULT_SEARCH_FOR_INPUT_PARAMETERS - default parameters for searching for inputs % % PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATION_OBJ) % % Returns a list of the default search parameters for finding appropriate inputs % to the calculation. % parameters.input_parameters = struct('answer',5); parameters.depends_on = vlt.data.emptystruct('name','value'); parameters.query = struct('name','probe_id','query',ndi.query('element.ndi_element_class','contains_string','ndi.probe','')); end; % default_search_for_input_parameters The last function that we need is a documentation function that simply returns its own help as a text string. This allows other programs to see the documentation for the calculation, and gives programmers/users a consistent place in the help to look for a description of what the calculation does.","title":"Code block 7.2.3.3: default_search_for_input_parameters function for ndi.calc.example.simple (do not type into Matlab command line):"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7234-doc_about-for-ndicalcexamplesimple-do-not-type-into-matlab-command-line","text":"function doc_about(ndi_calculation_obj) % ---------------------------------------------------------------------------------------------- % NDI_CALCULATION: SIMPLE_CALC % ---------------------------------------------------------------------------------------------- % % ------------------------ % | SIMPLE_CALC -- ABOUT | % ------------------------ % % SIMPLE_CALC is a demonstration document. It simply produces the 'answer' that % is provided in the input parameters. Each SIMPLE_CALC document 'depends_on' an % NDI daq system. % % Definition: apps/simple_calc.json % eval(['help ndi.calc.example.simple.doc_about']); end; %doc_about() Putting it all together, we can look at the entire calculation:","title":"Code block 7.2.3.4 doc_about for ndi.calc.example.simple (do not type into Matlab command line):"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7235-full-object-code-for-ndicalcexamplesimple","text":"classdef simple < ndi.calculation methods function simple_obj = simple(session) % SIMPLE - a simple demonstration of an ndi.calculation object % % SIMPLE_OBJ = SIMPLE(SESSION) % % Creates a SIMPLE ndi.calculation object % ndi.globals; simple_obj = simple_obj@ndi.calculation(session,'simple_calc',... fullfile(ndi_globals.path.documentpath,'apps','calculations','simple_calc.json')); end; % simple() function doc = calculate(ndi_calculation_obj, parameters) % CALCULATE - perform the calculation for ndi.calc.example.simple % % DOC = CALCULATE(NDI_CALCULATION_OBJ, PARAMETERS) % % Creates a simple_calc document given input parameters. % % The document that is created simple has an 'answer' that is given % by the input parameters. % check inputs if ~isfield(parameters,'input_parameters'), error(['parameters structure lacks ''input_parameters.''']); end; if ~isfield(parameters,'depends_on'), error(['parameters structure lacks ''depends_on.''']); end; simple = parameters; simple.answer = parameters.input_parameters.answer; doc = ndi.document(ndi_calculation_obj.doc_document_types{1},'simple',simple); for i=1:numel(parameters.depends_on), doc = doc.set_dependency_value(parameters.depends_on(i).name,parameters.depends_on(i).value); end; end; % calculate function parameters = default_search_for_input_parameters(ndi_calculation_obj) % DEFAULT_SEARCH_FOR_INPUT_PARAMETERS - default parameters for searching for inputs % % PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATION_OBJ) % % Returns a list of the default search parameters for finding appropriate inputs % to the calculation. % parameters.input_parameters = struct('answer',5); parameters.depends_on = vlt.data.emptystruct('name','value'); parameters.query = struct('name','probe_id','query',ndi.query('element.ndi_element_class','contains_string','ndi.probe','')); end; % default_search_for_input_parameters function doc_about(ndi_calculation_obj) % ---------------------------------------------------------------------------------------------- % NDI_CALCULATION: SIMPLE_CALC % ---------------------------------------------------------------------------------------------- % % ------------------------ % | SIMPLE_CALC -- ABOUT | % ------------------------ % % SIMPLE_CALC is a demonstration document. It simply produces the 'answer' that % is provided in the input parameters. Each SIMPLE_CALC document 'depends_on' an % NDI probe. % % Definition: apps/simple_calc.json % eval(['help ndi.calc.example.simple.doc_about']); end; %doc_about() end; % methods() end % simple","title":"Code block 7.2.3.5: Full object code for ndi.calc.example.simple:"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#731-running-the-calculation","text":"Let's open our tree shrew experiment from Tutorials 2.1-2.5 to run the calculation.","title":"7.3.1 Running the calculation"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7311-opening-the-tree-shrew-experiment-type-into-the-matlab-command-line","text":"dirname = [userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2']; % change this if you put the example somewhere else ref = 'ts_exper2'; S = ndi.session.dir(ref,dirname); Now we can run the calculation, as in the beginning of the tutorial. We can run the calculation in one of two modes. In the first mode, we can run the calculation on all possible inputs.","title":"Code block 7.3.1.1. Opening the tree shrew experiment (type into the Matlab command line)."},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7312-running-the-calculation-asking-the-program-to-find-all-possible-inputs-type-into-the-matlab-command-line","text":"c = ndi.calc.example.simple(S); d = c.run('NoAction'); % will run but will not replace existing calculations with the same parameters Now let's search for the documents we just created, even though we had them returned in d . We will inspect the output.","title":"Code block 7.3.1.2. Running the calculation, asking the program to find all possible inputs (type into the Matlab command line)."},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7313-searching-for-the-calculations-we-made-type-into-matlab-command-line","text":"D = S.database_search(ndi.query('','isa','simple_calc','')); D{1}.document_properties.simple, % should be struct with field 'answer' == 5 D{1}.document_properties.depends_on % should have name of 'probe_id' The other way to call a calculation is to use a very targeted set of parameters. If you want to perform your calculation only on specific items, such in the case of ndi.calc.example.simple , a specific probe or probes, then you can do that, too, by specifying the specific inputs that you want to search for.","title":"Code block 7.3.1.3. Searching for the calculations we made (type into Matlab command line)."},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7314-running-the-calculation-asking-the-program-to-find-a-specific-input-to-the-calculation-type-into-the-matlab-command-line","text":"p = S.getprobes('type','n-trode'); disp(['Probe {1} properties are as follows:']); p{1}, % look at the probe properties input_p.input_parameters.answer = 5; input_p.depends_on = struct('name','probe_id','value',p{1}.id()); d2 = c.run('Replace',input_p); % let's replace it disp(['Document properties:']); d2{1}.document_properties.simple, % should be struct with field 'answer' == 5 d2{1}.document_properties.depends_on % should have name of 'probe_id' and p{1}'s probe id One can use some additional queries to find specific or parameterized documents to use as inputs for a calculation. See help ndi.calculation.search_for_input_parameters or look at the ndi.calculation help page.","title":"Code block 7.3.1.4 Running the calculation, asking the program to find a specific input to the calculation (type into the Matlab command line)."},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#716-discussionfeedback","text":"This concludes our tutorial on writing a simple NDI calculation. Post comments, bugs, questions, or discuss .","title":"7.1.6 Discussion/Feedback"},{"location":"NDI-matlab/under_construction/EXAMPLE_USES/","text":"5 examples of recording situations 1. Simple: 1 device, 1 probe, 3 things An experimentor records spontaneously generated responses with a single intracellular electrode inserted in visual cortex. The analyst wants to examine the spiking responses of the neuron and the voltage responses of the neuron with the spiking artificially removed. Physical situation : There is a single physical hardware data acquisition system, in this case a system made by Cambridge Electronic Deisgn called the micro1401. A wire connects the electrode to an amplifier, and a wire from the amplifier connects to an input (let's say input 0) on the micro1401. The recording system is turned on to record a bout of spontaneous activity, and then turned off. Each time the recording is turned on, a file (.smr format) is written to disk. The software that manages the recording of the micro1401 is written by CED and is called Spike2. Let's say there are 3 recording epochs. Therefore, we have 3 .smr files (let's say at path epoch1/myfile.smr, epoch2/myotherfile.smr, epoch3/myotherfileagain.smr). NDI configuration : The raw data is managed by a member of the class ndi_daqsystem . There is a subclass, ndi_daqsystem_mfdaq , that implements a generic multi-function data acquisition system, which is a system that has analog inputs, analog outputs (which are records of signals that were output), digital inputs, digital outputs, and a clock. There is an ndi_daqreader_mfdaq class, and a specific subclass ndi_daqreader_mfdaq_cedspike2 that implements the reading of the .smr files. We build an ndi_daqsystem object to add to the ndi_experiment object of this experiment, that we will call vhspike2 (for reading the electrode data). To do so, we need to create the 2 component objects of an ndi_daqsystem : an ndi_daqreader and an ndi_filenavigator . Let's say our experiment is in variable E. fileparams = ; d = ndi_daqsystem_mfdaq(ndi_daqreader_mfdaq_cedspike2(), ndi_filenavigator(fileparams)); Now we can ask the device what epochs it has. et = d.epochtable(); When we do this, the device asks its file_navigator to determine the epochs that it has (calling the file_navigator's epochtable() method), which searches the disk for occurrences of .smr files. If we study the epochtable that is returned, we see that it has 3 entries. et et(1) Each of these entries has a field underlying that allows us to examine the underlying details of the epoch. et(1).underlying The ndi_epochset class defines data structures and methods that manage these interdependent epochs. Each ndi_daqsystem has epochs that depend on the epochs of a file_navigator. ndi_probe objects have epochs that depend on the epochs of the underlying device that recorded the probe. An ndi_thing object is related to the epochs of the probe that provided evidence for it (although in the future we want to be able to define ndi_thing objects that are not necessarily related to a probe). We also create ndi_thing objects that are related to the data that is directly sampled from a probe. In this example, we create a direct thing that is equal to the data sampled from the probe (the raw voltage of the sampled data) and 2 indirect (or not direct ) probes whose epochs are created from data that is derived from the probe. In the first case, we create a list of spike times by detecting the spike events in the waveform, and, in the second, we create filtered version of the data with the spike waveforms clipped out. 2. Typical: 2 devices, 2 probes, 4 things An experimentor records responses to visual stimulation with a single electrode inserted in visual cortex. The analyst wants to examine the responses of single neurons to visual stimulation and the local field potential response to visual stimulation. Physical situation : There is a single physical hardware data acquisition system, in this case a system made by Cambridge Electronic Deisgn called the micro1401. A wire connects the electrode to an amplifier, and a wire from the amplifier connects to an input (let's say input 0) on the micro1401. There is a visual stimulus computer that produces videos on a monitor, and also generates 14 digital timing pulses that are acquired on 14 digital inputs (let's say digital inputs 1..14): Stimulus trigger: trigger generated when a stimulus is shown Prestimulus trigger: trigger generated when system is ready to draw a stimulus (user-specified delay) Frame trigger: trigger generated when system updates the video image on the display Vertical blanking: trigger generated when monitor refreshes 8 digital channels encode the stimulus identity from 0 (no stimulus) to 1..255 The recording system is turned on to record a bout of visual stimulation, and then turned off. Each time the recording is turned on, a file (.smr format) is written to disk, and the visual stimulus computer also writes a detailed stims.mat file to disk that has a big list of parameters for each visual stimulus (how big it was, what its shape was, what its number was, etc). The software that manages the recording of the micro1401 is written by CED and is called Spike2. Let's say there are 3 recording epochs. Therefore, we have 3 .smr files (let's say at path epoch1/myfile.smr, epoch2/myotherfile.smr, epoch3/myotherfileagain.smr), and 3 stims.mat files (let's say at path epoch1/stims.mat, epoch2/stims.mat, epoch3/stims.mat). NDI configuration : We have created 2 ndi_daqsystem classes that assist in processing the data. These abstract classes are ndi_daqsystem_mfdaq , that implements a generic multi-function data acquisition system, and ndi_daqsystem_stimulus that implements a genetic stimulus system. There is an ndi_daqreader_mfdaq class, and a specific subclass ndi_daqreader_mfdaq_cedspike2 that knows how to read the .smr files, and an ndi_daqreader_mfdaq_stimulus_vhlabvisspike2 subclass that reads the timing information from .smr files and the stimulus parameter information from the stims.mat file. We build 2 ndi_daqsystem objects to add to the ndi_experiment object of this experiment, that we will call vhspike2 (for reading the electrode data) and another daq system object vhvis_spike2 that reads the triggers generated from the visual stimulus computer.","title":"EXAMPLE USES"},{"location":"NDI-matlab/under_construction/EXAMPLE_USES/#5-examples-of-recording-situations","text":"","title":"5 examples of recording situations"},{"location":"NDI-matlab/under_construction/EXAMPLE_USES/#1-simple-1-device-1-probe-3-things","text":"An experimentor records spontaneously generated responses with a single intracellular electrode inserted in visual cortex. The analyst wants to examine the spiking responses of the neuron and the voltage responses of the neuron with the spiking artificially removed. Physical situation : There is a single physical hardware data acquisition system, in this case a system made by Cambridge Electronic Deisgn called the micro1401. A wire connects the electrode to an amplifier, and a wire from the amplifier connects to an input (let's say input 0) on the micro1401. The recording system is turned on to record a bout of spontaneous activity, and then turned off. Each time the recording is turned on, a file (.smr format) is written to disk. The software that manages the recording of the micro1401 is written by CED and is called Spike2. Let's say there are 3 recording epochs. Therefore, we have 3 .smr files (let's say at path epoch1/myfile.smr, epoch2/myotherfile.smr, epoch3/myotherfileagain.smr). NDI configuration : The raw data is managed by a member of the class ndi_daqsystem . There is a subclass, ndi_daqsystem_mfdaq , that implements a generic multi-function data acquisition system, which is a system that has analog inputs, analog outputs (which are records of signals that were output), digital inputs, digital outputs, and a clock. There is an ndi_daqreader_mfdaq class, and a specific subclass ndi_daqreader_mfdaq_cedspike2 that implements the reading of the .smr files. We build an ndi_daqsystem object to add to the ndi_experiment object of this experiment, that we will call vhspike2 (for reading the electrode data). To do so, we need to create the 2 component objects of an ndi_daqsystem : an ndi_daqreader and an ndi_filenavigator . Let's say our experiment is in variable E. fileparams = ; d = ndi_daqsystem_mfdaq(ndi_daqreader_mfdaq_cedspike2(), ndi_filenavigator(fileparams)); Now we can ask the device what epochs it has. et = d.epochtable(); When we do this, the device asks its file_navigator to determine the epochs that it has (calling the file_navigator's epochtable() method), which searches the disk for occurrences of .smr files. If we study the epochtable that is returned, we see that it has 3 entries. et et(1) Each of these entries has a field underlying that allows us to examine the underlying details of the epoch. et(1).underlying The ndi_epochset class defines data structures and methods that manage these interdependent epochs. Each ndi_daqsystem has epochs that depend on the epochs of a file_navigator. ndi_probe objects have epochs that depend on the epochs of the underlying device that recorded the probe. An ndi_thing object is related to the epochs of the probe that provided evidence for it (although in the future we want to be able to define ndi_thing objects that are not necessarily related to a probe). We also create ndi_thing objects that are related to the data that is directly sampled from a probe. In this example, we create a direct thing that is equal to the data sampled from the probe (the raw voltage of the sampled data) and 2 indirect (or not direct ) probes whose epochs are created from data that is derived from the probe. In the first case, we create a list of spike times by detecting the spike events in the waveform, and, in the second, we create filtered version of the data with the spike waveforms clipped out.","title":"1. Simple: 1 device, 1 probe, 3 things"},{"location":"NDI-matlab/under_construction/EXAMPLE_USES/#2-typical-2-devices-2-probes-4-things","text":"An experimentor records responses to visual stimulation with a single electrode inserted in visual cortex. The analyst wants to examine the responses of single neurons to visual stimulation and the local field potential response to visual stimulation. Physical situation : There is a single physical hardware data acquisition system, in this case a system made by Cambridge Electronic Deisgn called the micro1401. A wire connects the electrode to an amplifier, and a wire from the amplifier connects to an input (let's say input 0) on the micro1401. There is a visual stimulus computer that produces videos on a monitor, and also generates 14 digital timing pulses that are acquired on 14 digital inputs (let's say digital inputs 1..14): Stimulus trigger: trigger generated when a stimulus is shown Prestimulus trigger: trigger generated when system is ready to draw a stimulus (user-specified delay) Frame trigger: trigger generated when system updates the video image on the display Vertical blanking: trigger generated when monitor refreshes 8 digital channels encode the stimulus identity from 0 (no stimulus) to 1..255 The recording system is turned on to record a bout of visual stimulation, and then turned off. Each time the recording is turned on, a file (.smr format) is written to disk, and the visual stimulus computer also writes a detailed stims.mat file to disk that has a big list of parameters for each visual stimulus (how big it was, what its shape was, what its number was, etc). The software that manages the recording of the micro1401 is written by CED and is called Spike2. Let's say there are 3 recording epochs. Therefore, we have 3 .smr files (let's say at path epoch1/myfile.smr, epoch2/myotherfile.smr, epoch3/myotherfileagain.smr), and 3 stims.mat files (let's say at path epoch1/stims.mat, epoch2/stims.mat, epoch3/stims.mat). NDI configuration : We have created 2 ndi_daqsystem classes that assist in processing the data. These abstract classes are ndi_daqsystem_mfdaq , that implements a generic multi-function data acquisition system, and ndi_daqsystem_stimulus that implements a genetic stimulus system. There is an ndi_daqreader_mfdaq class, and a specific subclass ndi_daqreader_mfdaq_cedspike2 that knows how to read the .smr files, and an ndi_daqreader_mfdaq_stimulus_vhlabvisspike2 subclass that reads the timing information from .smr files and the stimulus parameter information from the stims.mat file. We build 2 ndi_daqsystem objects to add to the ndi_experiment object of this experiment, that we will call vhspike2 (for reading the electrode data) and another daq system object vhvis_spike2 that reads the triggers generated from the visual stimulus computer.","title":"2. Typical: 2 devices, 2 probes, 4 things"},{"location":"NDI-matlab/under_construction/GLOSSARY/","text":"NDI Glossary Terms and conventions Channels, iodevices, etc are labeled from 1 ndi_iodevicestring - A string that specifies the device name, channel type, and channel numbers that correspond to a particular ndi_epochrecord entry","title":"NDI Glossary"},{"location":"NDI-matlab/under_construction/GLOSSARY/#ndi-glossary","text":"Terms and conventions Channels, iodevices, etc are labeled from 1 ndi_iodevicestring - A string that specifies the device name, channel type, and channel numbers that correspond to a particular ndi_epochrecord entry","title":"NDI Glossary"},{"location":"NDI-matlab/under_construction/PROBE-TYPES/","text":"Probe In NDI, a probe is an instrument for observing or manipulating the experimental environment. Types of probes include recording or stimulating electrodes and the display or recording of information (whether visual, auditory, olfactory, gustatory, temperature, etc). Probes are distinct from devices , which are digital input/output devices that perform digital sampling or control of probes. The probes that are acquired or controlled in any device epoch are listed in the ndi_epochcontents object for that epoch. They include the following fields: ndi_epochcontents fields: name : A name for the probe, must start with a letter and contain no whitespace but otherwise unrestricted reference : A reference for the probe; identical reference numbers indicate that NDI should try to combine data; (for example, if you move an electrode, one should change the reference number to indicate that the probe is being used differently); can be any non-negative integer type : The type of probe; must be a string that begins with a letter and has no whitespace; there are standard types (see below) but users can use any valid string for type. devicestring : A string that indicates the device (and channels) that have a digital record of the probe (see ndi_devicestring ) Standard types: Type Description Electrodes 'n-trode' A bundle of N extracellular electrodes that sample overlapping electric fields; the number of channels is calculated from the number of channels specified in the device string 'electrode-SPEC' An electrode of a specification that is contained in a reference SPEC (might contain a means of looking up electrode geometry, impedance / channel quality measurements, etc) 'patch' A whole cell patch electrode (two channels; first is Vm, second is I) 'patch-Vm' A whole cell patch electrode (single channel, specifies voltage recording) 'patch-I' A whole cell patch electrode (single channel, specifies current recording) 'patch-attached' A patch electrode in cell-attached configuration (single channel, specifies voltage recording) 'sharp' A sharp electrode (two channels; first is voltage, second is current) 'sharp-Vm' A sharp electrode (single channel, specifies voltage recording) 'sharp-I' A sharp electrode (single channel, specifies current recording) Imaging 'wide-field-imaging' Wide-field imaging data, as one might acquire with intrinsic signal imaging '2-photon-imaging' 2-photon fluorescent imaging data (laser-scanned or imaged) '1-photon-imaging' 1-photon fluorescent imaging (laser-scanned or imaged) 'brightfield-imaging' Brightfield images Stimulators 'display' An instrument that displays patterns with light 'stim-n-trode' An N-channel extracellular electrode stimulator; the number of channels is calculated from the number of channels specified in the device string 'n-LED' An N-channel LED stimulator; the number of channels is calculated from the number of channels specified in the device string Environment Lick-spout A lick-spout Intraoral-cannula An intraoral cannula Reward-well A reward well","title":"Probe"},{"location":"NDI-matlab/under_construction/PROBE-TYPES/#probe","text":"In NDI, a probe is an instrument for observing or manipulating the experimental environment. Types of probes include recording or stimulating electrodes and the display or recording of information (whether visual, auditory, olfactory, gustatory, temperature, etc). Probes are distinct from devices , which are digital input/output devices that perform digital sampling or control of probes. The probes that are acquired or controlled in any device epoch are listed in the ndi_epochcontents object for that epoch. They include the following fields: ndi_epochcontents fields: name : A name for the probe, must start with a letter and contain no whitespace but otherwise unrestricted reference : A reference for the probe; identical reference numbers indicate that NDI should try to combine data; (for example, if you move an electrode, one should change the reference number to indicate that the probe is being used differently); can be any non-negative integer type : The type of probe; must be a string that begins with a letter and has no whitespace; there are standard types (see below) but users can use any valid string for type. devicestring : A string that indicates the device (and channels) that have a digital record of the probe (see ndi_devicestring ) Standard types: Type Description Electrodes 'n-trode' A bundle of N extracellular electrodes that sample overlapping electric fields; the number of channels is calculated from the number of channels specified in the device string 'electrode-SPEC' An electrode of a specification that is contained in a reference SPEC (might contain a means of looking up electrode geometry, impedance / channel quality measurements, etc) 'patch' A whole cell patch electrode (two channels; first is Vm, second is I) 'patch-Vm' A whole cell patch electrode (single channel, specifies voltage recording) 'patch-I' A whole cell patch electrode (single channel, specifies current recording) 'patch-attached' A patch electrode in cell-attached configuration (single channel, specifies voltage recording) 'sharp' A sharp electrode (two channels; first is voltage, second is current) 'sharp-Vm' A sharp electrode (single channel, specifies voltage recording) 'sharp-I' A sharp electrode (single channel, specifies current recording) Imaging 'wide-field-imaging' Wide-field imaging data, as one might acquire with intrinsic signal imaging '2-photon-imaging' 2-photon fluorescent imaging data (laser-scanned or imaged) '1-photon-imaging' 1-photon fluorescent imaging (laser-scanned or imaged) 'brightfield-imaging' Brightfield images Stimulators 'display' An instrument that displays patterns with light 'stim-n-trode' An N-channel extracellular electrode stimulator; the number of channels is calculated from the number of channels specified in the device string 'n-LED' An N-channel LED stimulator; the number of channels is calculated from the number of channels specified in the device string Environment Lick-spout A lick-spout Intraoral-cannula An intraoral cannula Reward-well A reward well","title":"Probe"},{"location":"developer_notes/developer-journal/","text":"Developer (Steve's) journal This is a journal of developer thoughts. It is not a change log (that is in git) or an issue list. 2019-08-05 Current workflow to change object names: searchreplacefiles_shell('*.txt',upper('epochcontents'),upper('epochprobemap')) (need to change .txt, .m, object* files typically) filenamesearchreplace(pwd,{'epochcontents'},{'epochprobemap'},'deleteOriginals',1,'noOp',1,'recursive',1) (need to set noOp to 0 to make it run) 2019-01-03 We had the kick-off meeting with Squishymedia today. I would like to understand a bit more about JSON databases: what is json hyper schema for example. Is our best database implementation related to open-neuro, MongoDB Stitch, Google Firebase? We wondered if the file reading could somehow be encapsulated in the database rather than as a separate entity? 2019-01-04 I need to keep making progress on our analysis of Arani's intracellular data. I will put development questions aside and just use the system for a few days. I will keep working on the draft paper, but only 30 minutes/day I will only fix small bugs in code and docs needed to propel work on intracellular data","title":"Developer (Steve's) journal"},{"location":"developer_notes/developer-journal/#developer-steves-journal","text":"This is a journal of developer thoughts. It is not a change log (that is in git) or an issue list.","title":"Developer (Steve's) journal"},{"location":"developer_notes/developer-journal/#2019-08-05","text":"Current workflow to change object names: searchreplacefiles_shell('*.txt',upper('epochcontents'),upper('epochprobemap')) (need to change .txt, .m, object* files typically) filenamesearchreplace(pwd,{'epochcontents'},{'epochprobemap'},'deleteOriginals',1,'noOp',1,'recursive',1) (need to set noOp to 0 to make it run)","title":"2019-08-05"},{"location":"developer_notes/developer-journal/#2019-01-03","text":"We had the kick-off meeting with Squishymedia today. I would like to understand a bit more about JSON databases: what is json hyper schema for example. Is our best database implementation related to open-neuro, MongoDB Stitch, Google Firebase? We wondered if the file reading could somehow be encapsulated in the database rather than as a separate entity?","title":"2019-01-03"},{"location":"developer_notes/developer-journal/#2019-01-04","text":"I need to keep making progress on our analysis of Arani's intracellular data. I will put development questions aside and just use the system for a few days. I will keep working on the draft paper, but only 30 minutes/day I will only fix small bugs in code and docs needed to propel work on intracellular data","title":"2019-01-04"},{"location":"developer_notes/demo/app/spikesorting/ndi_spikesorting/tutorial_link/","text":"","title":"Tutorial link"}]}