{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NDI \u00b6 About \u00b6 NDI (Neuroscience Data Interface) is a cross-platform interface standard for reading neuroscience data and storing the results of analyses. Who inspires NDI? As an analyst , I want to quickly open my colleagues' data, regardless of its format and organization, so we can make discoveries. As a researcher , I want my data records and analysis steps to be annotated and both human and machine readable, so I can review my teammates' work and share these annotated results with the world. I want these annotations to occur in situ , not as a separate step that I do later. As a physiologist/imager , I want my analysis routines to have access to my data the instant it is recorded, so I can make choices about how to proceed during my experiment. As an analyst , I want to write one set of analysis routines that do not need to be revised to work with new data formats or new data organizations. As a scientist , I want to search for data or analyses from other researchers. As an amateur , I want to be able to access scientists' raw data to perform my own analyses. Availability \u00b6 A mature prototype of NDI is available in Matlab and a version for Python is well under construction. Installation \u00b6 Check out the Installation Guide . Pre-print \u00b6 Check out the NDI pre-print available on biorxiv . Help and Support \u00b6 Use the issue tracker to submit questions, bugs, and issues. Financial Support \u00b6 Supported by the NIH BRAIN Initiative informatics group , grant MH114678.","title":"Home"},{"location":"#ndi","text":"","title":"NDI"},{"location":"#about","text":"NDI (Neuroscience Data Interface) is a cross-platform interface standard for reading neuroscience data and storing the results of analyses. Who inspires NDI? As an analyst , I want to quickly open my colleagues' data, regardless of its format and organization, so we can make discoveries. As a researcher , I want my data records and analysis steps to be annotated and both human and machine readable, so I can review my teammates' work and share these annotated results with the world. I want these annotations to occur in situ , not as a separate step that I do later. As a physiologist/imager , I want my analysis routines to have access to my data the instant it is recorded, so I can make choices about how to proceed during my experiment. As an analyst , I want to write one set of analysis routines that do not need to be revised to work with new data formats or new data organizations. As a scientist , I want to search for data or analyses from other researchers. As an amateur , I want to be able to access scientists' raw data to perform my own analyses.","title":"About"},{"location":"#availability","text":"A mature prototype of NDI is available in Matlab and a version for Python is well under construction.","title":"Availability"},{"location":"#installation","text":"Check out the Installation Guide .","title":"Installation"},{"location":"#pre-print","text":"Check out the NDI pre-print available on biorxiv .","title":"Pre-print"},{"location":"#help-and-support","text":"Use the issue tracker to submit questions, bugs, and issues.","title":"Help and Support"},{"location":"#financial-support","text":"Supported by the NIH BRAIN Initiative informatics group , grant MH114678.","title":"Financial Support"},{"location":"contributing/","text":"Contributing \u00b6 Anyone with a GitHub account can contribute. Please see the guidelines below! Tasks \u00b6 New file formats \u00b6 If you want to contribute an ndi.daq.reader for a new file format, please see our new project Neuroscience Data Readers NDR-matlab . We have spun off the job of reading raw neuroscience data files into this project to make it easier to contribute file readers and because some users may want to just use the file reading code without installing all of NDI. At the moment, NDI still uses its native ndi.daq.reader objects but soon it will be able to use any ndr.reader object, which will streamline the addition of new file formats. Apps \u00b6 There are 2 ways to contribute applications. ndi.app applications \u00b6 We have plans to shortly create a developer's guide to creating ndi.app applications that are tightly integrated with NDI's core features. Stay tuned! Other applications \u00b6 External applications can use NDI right now. For an example, see our changes to JRClust to make it support NDI: https://github.com/VH-Lab/JRCLUST . Feel free to post an issue to ask questions. How to contribute \u00b6 If you have code that you would like to write, do the following. Press the Fork button in the upper-right corner of the NDI-matlab GitHub repository to make a copy of NDI in your own GitHub space. Make your changes to NDI-matlab. Commit your changes back to your fork. Finally, issue a Pull Request on GitHub from your fork. The request will be received by the NDI development team for integration.","title":"Contributing"},{"location":"contributing/#contributing","text":"Anyone with a GitHub account can contribute. Please see the guidelines below!","title":"Contributing"},{"location":"contributing/#tasks","text":"","title":"Tasks"},{"location":"contributing/#new-file-formats","text":"If you want to contribute an ndi.daq.reader for a new file format, please see our new project Neuroscience Data Readers NDR-matlab . We have spun off the job of reading raw neuroscience data files into this project to make it easier to contribute file readers and because some users may want to just use the file reading code without installing all of NDI. At the moment, NDI still uses its native ndi.daq.reader objects but soon it will be able to use any ndr.reader object, which will streamline the addition of new file formats.","title":"New file formats"},{"location":"contributing/#apps","text":"There are 2 ways to contribute applications.","title":"Apps"},{"location":"contributing/#ndiapp-applications","text":"We have plans to shortly create a developer's guide to creating ndi.app applications that are tightly integrated with NDI's core features. Stay tuned!","title":"ndi.app applications"},{"location":"contributing/#other-applications","text":"External applications can use NDI right now. For an example, see our changes to JRClust to make it support NDI: https://github.com/VH-Lab/JRCLUST . Feel free to post an issue to ask questions.","title":"Other applications"},{"location":"contributing/#how-to-contribute","text":"If you have code that you would like to write, do the following. Press the Fork button in the upper-right corner of the NDI-matlab GitHub repository to make a copy of NDI in your own GitHub space. Make your changes to NDI-matlab. Commit your changes back to your fork. Finally, issue a Pull Request on GitHub from your fork. The request will be received by the NDI development team for integration.","title":"How to contribute"},{"location":"faq/","text":"NDI Frequently Asked Questions \u00b6 Q: Can I use NDI to analyze data recorded in any format? \u00b6 A : Yes. The NDI system includes pieces of code called ndi.daq.reader objects which interpret data recorded with different acquisition devices. Each ndi.daq.reader is specific to a particular device, and ndi.daq.reader objects already exist for devices by several neuroscience software manufacturers. Q: Can I use NDI if my lab builds our own devices and measuring tools? \u00b6 A : Yes. You will need to write one piece of code - an ndi.daq.reader object - for each original DAQ system you use. Possibly, you will also need to create an `ndi.daq.metadatareader to read metadata, such as stimulus information for custom stimuli. Once these are created, your data can be read and analyzed with NDI. Q: Do I need to change the way my lab organizes our data files in order to use NDI? \u00b6 A : No - the NDI system is able to retrieve data files organized in any way. NDI uses pieces of code called ndi.file.navigator objects to locate data from a recording epoch. Each ndi.file.navigator works within a specific organization system, and you can specify the parameters to cause the file navigator to navigate your lab's system. Q: Can I use NDI to pool data from multiple labs? \u00b6 A : Yes. Once each lab has an ndi.daq.system that consists of an ndi.file.navigator that can locate files within its storage system and ndi.daq.reader objects for each their data acquisition systems, NDI can read and analyze datasets from both labs together.","title":"FAQ"},{"location":"faq/#ndi-frequently-asked-questions","text":"","title":"NDI Frequently Asked Questions"},{"location":"faq/#q-can-i-use-ndi-to-analyze-data-recorded-in-any-format","text":"A : Yes. The NDI system includes pieces of code called ndi.daq.reader objects which interpret data recorded with different acquisition devices. Each ndi.daq.reader is specific to a particular device, and ndi.daq.reader objects already exist for devices by several neuroscience software manufacturers.","title":"Q: Can I use NDI to analyze data recorded in any format?"},{"location":"faq/#q-can-i-use-ndi-if-my-lab-builds-our-own-devices-and-measuring-tools","text":"A : Yes. You will need to write one piece of code - an ndi.daq.reader object - for each original DAQ system you use. Possibly, you will also need to create an `ndi.daq.metadatareader to read metadata, such as stimulus information for custom stimuli. Once these are created, your data can be read and analyzed with NDI.","title":"Q: Can I use NDI if my lab builds our own devices and measuring tools?"},{"location":"faq/#q-do-i-need-to-change-the-way-my-lab-organizes-our-data-files-in-order-to-use-ndi","text":"A : No - the NDI system is able to retrieve data files organized in any way. NDI uses pieces of code called ndi.file.navigator objects to locate data from a recording epoch. Each ndi.file.navigator works within a specific organization system, and you can specify the parameters to cause the file navigator to navigate your lab's system.","title":"Q: Do I need to change the way my lab organizes our data files in order to use NDI?"},{"location":"faq/#q-can-i-use-ndi-to-pool-data-from-multiple-labs","text":"A : Yes. Once each lab has an ndi.daq.system that consists of an ndi.file.navigator that can locate files within its storage system and ndi.daq.reader objects for each their data acquisition systems, NDI can read and analyze datasets from both labs together.","title":"Q: Can I use NDI to pool data from multiple labs?"},{"location":"glossary/","text":"NDI Glossary \u00b6 Real-world vocabulary \u00b6 session : a collection of recordings or measurements taken at one sitting element : probe : any instrument that makes a measurement or performs stimulation. One kind of element (all probes are elements ). Requires a subject and a connection to a DAQ system . Examples of probes include single channel microelectrodes, multi-channel microelectrodes, intrinsic signal imaging systems, 2-photon microscopes, microphones, video cameras, reward wells, levers, visual stimulus systems, and speakers. subject : The object that is being sampled. Examples of subjects are an animal, a human, the air, a potato, and a test resistor. \u00b6 Software objects","title":"NDI Glossary"},{"location":"glossary/#ndi-glossary","text":"","title":"NDI Glossary"},{"location":"glossary/#real-world-vocabulary","text":"session : a collection of recordings or measurements taken at one sitting element : probe : any instrument that makes a measurement or performs stimulation. One kind of element (all probes are elements ). Requires a subject and a connection to a DAQ system . Examples of probes include single channel microelectrodes, multi-channel microelectrodes, intrinsic signal imaging systems, 2-photon microscopes, microphones, video cameras, reward wells, levers, visual stimulus systems, and speakers. subject : The object that is being sampled. Examples of subjects are an animal, a human, the air, a potato, and a test resistor.","title":"Real-world vocabulary"},{"location":"glossary/#_1","text":"Software objects","title":""},{"location":"goals_dryversion/","text":"NDI \u00b6 Goals \u00b6 NDI (Neuroscience Data Interface) is a cross-platform interface standard for reading neuroscience data and storing the results of analyses. Its goals include: Providing a means for specifying and accessing neuroscience data regardless of the format of the files or the organization of the files and data on disk or in the cloud. Allowing the creation of analysis code that is invariant to data format and organization, so the analysis process can be independent of the raw format. Providing a database for storing human- and machine-readable documents that describe analyses, analyses of analyses, etc, that is searchable with or without knowing the formal schema of the documents of interest. Allowing the creation of an application ecosystem where individual applications can read raw data and read from the database, and write results back to the database to participate in analysis pipelines. Eliminating the need for different procedures between online and offline analyses. Maintaining a ready-to-share version of the analysis pipeline at all times, so data can be shared with other groups or archives without additional work. Analysts can use NDI to quickly gain access to a collaborator's dataset (by specifying the organization and format of the data in a few parameters) and labs can share their data and results with others in a well-described format.","title":"NDI"},{"location":"goals_dryversion/#ndi","text":"","title":"NDI"},{"location":"goals_dryversion/#goals","text":"NDI (Neuroscience Data Interface) is a cross-platform interface standard for reading neuroscience data and storing the results of analyses. Its goals include: Providing a means for specifying and accessing neuroscience data regardless of the format of the files or the organization of the files and data on disk or in the cloud. Allowing the creation of analysis code that is invariant to data format and organization, so the analysis process can be independent of the raw format. Providing a database for storing human- and machine-readable documents that describe analyses, analyses of analyses, etc, that is searchable with or without knowing the formal schema of the documents of interest. Allowing the creation of an application ecosystem where individual applications can read raw data and read from the database, and write results back to the database to participate in analysis pipelines. Eliminating the need for different procedures between online and offline analyses. Maintaining a ready-to-share version of the analysis pipeline at all times, so data can be shared with other groups or archives without additional work. Analysts can use NDI to quickly gain access to a collaborator's dataset (by specifying the organization and format of the data in a few parameters) and labs can share their data and results with others in a well-described format.","title":"Goals"},{"location":"installation/","text":"Installation: \u00b6 Make sure git is installed on your machine. If it is not, on Windows, go here . On Mac, open a terminal, and type xcode-select --install . Accept the license and wait for install. On Linux, consult your Linux distribution's package manager. Download the file ndi_install.m to your Desktop. Type the following in the Matlab command window: cd ~/Desktop ndi_install Required Matlab toolboxes \u00b6 To use all of the NDI tools, the following Matlab toolboxes are required: Toolbox Toolbox Toolbox MATLAB Simulink Control System Toolbox Curve Fitting Toolbox Image Processing Toolbox Optimization Toolbox Signal Processing Toolbox Simscape Statistics and Machine Learning Toolbox You can use the ver command in Matlab to see which toolboxes you have installed. Notes for newbies \u00b6 To find the program Terminal on a Mac, use the Mac search menu to find it and run it. To download the ndi_install.m file, right click in your browser and choose \"Save as\". Be sure to save the file with a '.m' extension; your browser may try to add '.txt' to the end of the file, but you'll need to remove it for the program to run. If you lack particular Matlab Toolboxes, you can add them by clicking on the Add-On box in Matlab and choose \"Get Add-ons\".","title":"Installation"},{"location":"installation/#installation","text":"Make sure git is installed on your machine. If it is not, on Windows, go here . On Mac, open a terminal, and type xcode-select --install . Accept the license and wait for install. On Linux, consult your Linux distribution's package manager. Download the file ndi_install.m to your Desktop. Type the following in the Matlab command window: cd ~/Desktop ndi_install","title":"Installation:"},{"location":"installation/#required-matlab-toolboxes","text":"To use all of the NDI tools, the following Matlab toolboxes are required: Toolbox Toolbox Toolbox MATLAB Simulink Control System Toolbox Curve Fitting Toolbox Image Processing Toolbox Optimization Toolbox Signal Processing Toolbox Simscape Statistics and Machine Learning Toolbox You can use the ver command in Matlab to see which toolboxes you have installed.","title":"Required Matlab toolboxes"},{"location":"installation/#notes-for-newbies","text":"To find the program Terminal on a Mac, use the Mac search menu to find it and run it. To download the ndi_install.m file, right click in your browser and choose \"Save as\". Be sure to save the file with a '.m' extension; your browser may try to add '.txt' to the end of the file, but you'll need to remove it for the program to run. If you lack particular Matlab Toolboxes, you can add them by clicking on the Add-On box in Matlab and choose \"Get Add-ons\".","title":"Notes for newbies"},{"location":"learning_matlab/","text":"Learning Matlab \u00b6 Currently NDI is available only in Matlab. If you are new to Matlab, there are resources to help you learn. Short tutorials \u00b6 https://www.mathworks.com/help/matlab/getting-started-with-matlab.html A very short tutorial Steve made as a TA for Computational Neuroscience in the early 2000s. MathWorks's own onboarding tutorial . For people with no coding experience \u00b6 Some people want to learn to use NDI but do not have coding experience. These resources were suggested by our new users. Classes and objects \u00b6 Mo writes: Learn what a class and object is. I was completely stuck in terms of conceptually understanding what was going on in the code before I knew what classes and objects were. I recommend this video from CSdojo on YouTube . Mo's newbie notes \u00b6 If you see a function that you don't know, it doesn't hurt to try using the help function in the command window. Just type in the word help followed by whatever you don't understand. For example, suppose I don't understand what gca is. I would type help gca . You can double click the things saved in the workspace to see their contents. You can use the editor to write and save code. I used this a lot for just saving all the code from the tutorial on one page. If you remove the semi-colon at the end of a line, Matlab will print out the properties of the object. Online courses \u00b6 Steve's semester-long course Data Analysis and Statistics Workshop is for new or experienced coders. It has 22 self-paced \"labs\" that are designed to take between 60 - 80 minutes. It is available free to the public .","title":"Learning Matlab"},{"location":"learning_matlab/#learning-matlab","text":"Currently NDI is available only in Matlab. If you are new to Matlab, there are resources to help you learn.","title":"Learning Matlab"},{"location":"learning_matlab/#short-tutorials","text":"https://www.mathworks.com/help/matlab/getting-started-with-matlab.html A very short tutorial Steve made as a TA for Computational Neuroscience in the early 2000s. MathWorks's own onboarding tutorial .","title":"Short tutorials"},{"location":"learning_matlab/#for-people-with-no-coding-experience","text":"Some people want to learn to use NDI but do not have coding experience. These resources were suggested by our new users.","title":"For people with no coding experience"},{"location":"learning_matlab/#classes-and-objects","text":"Mo writes: Learn what a class and object is. I was completely stuck in terms of conceptually understanding what was going on in the code before I knew what classes and objects were. I recommend this video from CSdojo on YouTube .","title":"Classes and objects"},{"location":"learning_matlab/#mos-newbie-notes","text":"If you see a function that you don't know, it doesn't hurt to try using the help function in the command window. Just type in the word help followed by whatever you don't understand. For example, suppose I don't understand what gca is. I would type help gca . You can double click the things saved in the workspace to see their contents. You can use the editor to write and save code. I used this a lot for just saving all the code from the tutorial on one page. If you remove the semi-colon at the end of a line, Matlab will print out the properties of the object.","title":"Mo's newbie notes"},{"location":"learning_matlab/#online-courses","text":"Steve's semester-long course Data Analysis and Statistics Workshop is for new or experienced coders. It has 22 self-paced \"labs\" that are designed to take between 60 - 80 minutes. It is available free to the public .","title":"Online courses"},{"location":"oldREADME/","text":"NDI \u00b6 Neuroscience Data Interface - A means of specifying and accessing neuroscience data Available at https://github.com/VH-Lab/NDI-matlab Installation instructions: https://vh-lab.github.io/NDI-matlab/installation/ Notes for manual installers: NDI depends on functions in vhlab-toolbox-matlab, available at https://github.com/VH-Lab/vhlab-toolbox-matlab Depends on functions in vhlab-thirdparty-matlab, available at https://github.com/VH-Lab/vhlab-thirdparty-matlab It is recommended that the developer also install vhlab_vhtools, available at https://github.com/VH-Lab/vhlab_vhtools It is assumed that the function ndi_Init.m is run at startup. Please add this to your startup.m file. (If you use the http://github.com/VH-Lab/vhlab_vhtools distribution, it will be run automatically.) Documentation is at https://vh-lab.github.io/NDI-matlab/ Still in early development Description of key terms: \u00b6 session : A collection of measurements and analysis that are associated with one experimental session. A \"study\" usually consists of several sessions. probe : An instrument that makes a measurement or provides stimulation. Examples include an electrode, a camera, a 2-photon microscope, a visual stimulus monitor, a nose-poke, a feeder. iodvice : An instrument that digitally acquires and stores measurement values or controls a stimulator. epoch : An episode of time during which data from an iodevice is acquired. Each epoch consists of an interval of time between when a data acquisition device was switched on to acquire data and when it was switched off. An epoch on one device may or may not correspond to epochs from other devices, and synchronization can be managed by NDI_SYNCGRAPH. Description of software objects that impliment the framework: \u00b6 ndi_session : The class that implements the basic structure of an experiment, including an iodevice list, synggraph, cache, reference, and a unique reference string. ndi_session_dir : A session that uses the file system for storage of its parameters and database. This is presently used for all experiments. ndi_iodevice : A software object that reads data from files created by hardware data acquisition devices ndi_filetree : A file organizing class that traverses any file structure to identify the data files associated with each epoch Required device metadata: Classes (consisting of ndi_iodevicestring and ndi_epochcontents ) that describe the probes and channel mappings between the probes and the iodevice objects. Database objects: ndi_database : A (mostly) abstract database object that specifies the API for storing and searching documents ndi_document : An extensible database document object class that has a name, a unique identifier, and fields that are described in .JSON files. ndi_binarydoc : An abstract class that allows binary reading/writing from files associated with ndi_document . Specific implementations can write to a local file system, or a remote file system such as GRID-FS, etc. Implementations: Because ndi_database lacks specific implementation of key methods, one needs to use an implementation. Right now we have the following: ndi_matlabdumbjsondb : A Matlab implementation of a very simple database ( dumbjsondb in https://github.com/VH-Lab/vhlab-toolbox-matlab) ndi_binarydoc_matfid : A Matlab implementation for reading/writing files that are on the machine's filesystem Timing objects ndi_clocktype : Types of clocks (such as UTC, local, global, global experiment) ndi_timemapping : a mapping between epochs and iodevices ndi_syncgraph : an object that finds mappings from one device and epoch to another using all known timing relationships among iodevices ndi_syncrule : A rule for describing the relationship between data collected on different iodevices ndi_syncrule_filematch : A rule that describes a timing relationship as \"equal\" if two epochs contain raw data files in common Tutorials \u00b6 For developers: A tour of ndi_documents and ndi_database: https://github.com/VH-Lab/NDI-matlab/blob/master/demo/documents_database/document_database_demo.ipynb For developers: A tour of epochs, daqsystems, probes, and things: https://github.com/VH-Lab/NDI-matlab/blob/master/demo/epochs_daqsystems_probes_things/epochdemo1.ipynb Conventions \u00b6 Channels, samples, and other quantities are numbered from 1..N Development conventions \u00b6 Documentation of classes should follow the Matlab standard: https://www.mathworks.com/help/matlab/matlab_prog/create-help-for-classes.html In input arguments and documentation, we'll use \"indexes\" instead of \"indices\" and try to keep other English language exceptions to a minimum All error messages should be informative and give specific information about the problem, not just say 'an error occurred.' Most of the time, class names should include the full parentage of the object, starting with the basic classes for NDI: ndi_session, ndi_iodevice, ndi_probe. For example, a class implementing device drivers for a multifunction data aquisition board from mycompany should be called ndi_iodevice_mfdaq_mycompany to indicate that the object is descended from the ndi_iodevice and ndi_iodevice_mfdaq objects. Let's make exceptions if putting the full parentage gets cumbersome without adding clarity. Most users and programmers don't need to think about those classes (but will need to think about the basic classes ndi_session , ndi_database , and ndi_iodevice ). Test code \u00b6 There is a set of test code that one can run all at once using the function ndi_testsuite.m . The directory test contains a number of subdirectories with test code. The file ndi_testsuite_list.txt has an up-to-date list of the test functions that are current.","title":"NDI"},{"location":"oldREADME/#ndi","text":"Neuroscience Data Interface - A means of specifying and accessing neuroscience data Available at https://github.com/VH-Lab/NDI-matlab Installation instructions: https://vh-lab.github.io/NDI-matlab/installation/ Notes for manual installers: NDI depends on functions in vhlab-toolbox-matlab, available at https://github.com/VH-Lab/vhlab-toolbox-matlab Depends on functions in vhlab-thirdparty-matlab, available at https://github.com/VH-Lab/vhlab-thirdparty-matlab It is recommended that the developer also install vhlab_vhtools, available at https://github.com/VH-Lab/vhlab_vhtools It is assumed that the function ndi_Init.m is run at startup. Please add this to your startup.m file. (If you use the http://github.com/VH-Lab/vhlab_vhtools distribution, it will be run automatically.) Documentation is at https://vh-lab.github.io/NDI-matlab/ Still in early development","title":"NDI"},{"location":"oldREADME/#description-of-key-terms","text":"session : A collection of measurements and analysis that are associated with one experimental session. A \"study\" usually consists of several sessions. probe : An instrument that makes a measurement or provides stimulation. Examples include an electrode, a camera, a 2-photon microscope, a visual stimulus monitor, a nose-poke, a feeder. iodvice : An instrument that digitally acquires and stores measurement values or controls a stimulator. epoch : An episode of time during which data from an iodevice is acquired. Each epoch consists of an interval of time between when a data acquisition device was switched on to acquire data and when it was switched off. An epoch on one device may or may not correspond to epochs from other devices, and synchronization can be managed by NDI_SYNCGRAPH.","title":"Description of key terms:"},{"location":"oldREADME/#description-of-software-objects-that-impliment-the-framework","text":"ndi_session : The class that implements the basic structure of an experiment, including an iodevice list, synggraph, cache, reference, and a unique reference string. ndi_session_dir : A session that uses the file system for storage of its parameters and database. This is presently used for all experiments. ndi_iodevice : A software object that reads data from files created by hardware data acquisition devices ndi_filetree : A file organizing class that traverses any file structure to identify the data files associated with each epoch Required device metadata: Classes (consisting of ndi_iodevicestring and ndi_epochcontents ) that describe the probes and channel mappings between the probes and the iodevice objects. Database objects: ndi_database : A (mostly) abstract database object that specifies the API for storing and searching documents ndi_document : An extensible database document object class that has a name, a unique identifier, and fields that are described in .JSON files. ndi_binarydoc : An abstract class that allows binary reading/writing from files associated with ndi_document . Specific implementations can write to a local file system, or a remote file system such as GRID-FS, etc. Implementations: Because ndi_database lacks specific implementation of key methods, one needs to use an implementation. Right now we have the following: ndi_matlabdumbjsondb : A Matlab implementation of a very simple database ( dumbjsondb in https://github.com/VH-Lab/vhlab-toolbox-matlab) ndi_binarydoc_matfid : A Matlab implementation for reading/writing files that are on the machine's filesystem Timing objects ndi_clocktype : Types of clocks (such as UTC, local, global, global experiment) ndi_timemapping : a mapping between epochs and iodevices ndi_syncgraph : an object that finds mappings from one device and epoch to another using all known timing relationships among iodevices ndi_syncrule : A rule for describing the relationship between data collected on different iodevices ndi_syncrule_filematch : A rule that describes a timing relationship as \"equal\" if two epochs contain raw data files in common","title":"Description of software objects that impliment the framework:"},{"location":"oldREADME/#tutorials","text":"For developers: A tour of ndi_documents and ndi_database: https://github.com/VH-Lab/NDI-matlab/blob/master/demo/documents_database/document_database_demo.ipynb For developers: A tour of epochs, daqsystems, probes, and things: https://github.com/VH-Lab/NDI-matlab/blob/master/demo/epochs_daqsystems_probes_things/epochdemo1.ipynb","title":"Tutorials"},{"location":"oldREADME/#conventions","text":"Channels, samples, and other quantities are numbered from 1..N","title":"Conventions"},{"location":"oldREADME/#development-conventions","text":"Documentation of classes should follow the Matlab standard: https://www.mathworks.com/help/matlab/matlab_prog/create-help-for-classes.html In input arguments and documentation, we'll use \"indexes\" instead of \"indices\" and try to keep other English language exceptions to a minimum All error messages should be informative and give specific information about the problem, not just say 'an error occurred.' Most of the time, class names should include the full parentage of the object, starting with the basic classes for NDI: ndi_session, ndi_iodevice, ndi_probe. For example, a class implementing device drivers for a multifunction data aquisition board from mycompany should be called ndi_iodevice_mfdaq_mycompany to indicate that the object is descended from the ndi_iodevice and ndi_iodevice_mfdaq objects. Let's make exceptions if putting the full parentage gets cumbersome without adding clarity. Most users and programmers don't need to think about those classes (but will need to think about the basic classes ndi_session , ndi_database , and ndi_iodevice ).","title":"Development conventions"},{"location":"oldREADME/#test-code","text":"There is a set of test code that one can run all at once using the function ndi_testsuite.m . The directory test contains a number of subdirectories with test code. The file ndi_testsuite_list.txt has an up-to-date list of the test functions that are current.","title":"Test code"},{"location":"developer_notes/developer-journal/","text":"Developer (Steve's) journal \u00b6 This is a journal of developer thoughts. It is not a change log (that is in git) or an issue list. 2019-08-05 \u00b6 Current workflow to change object names: searchreplacefiles_shell('*.txt',upper('epochcontents'),upper('epochprobemap')) (need to change .txt, .m, object* files typically) filenamesearchreplace(pwd,{'epochcontents'},{'epochprobemap'},'deleteOriginals',1,'noOp',1,'recursive',1) (need to set noOp to 0 to make it run) 2019-01-03 \u00b6 We had the kick-off meeting with Squishymedia today. I would like to understand a bit more about JSON databases: what is json hyper schema for example. Is our best database implementation related to open-neuro, MongoDB Stitch, Google Firebase? We wondered if the file reading could somehow be encapsulated in the database rather than as a separate entity? 2019-01-04 \u00b6 I need to keep making progress on our analysis of Arani's intracellular data. I will put development questions aside and just use the system for a few days. I will keep working on the draft paper, but only 30 minutes/day I will only fix small bugs in code and docs needed to propel work on intracellular data","title":"Developer (Steve's) journal"},{"location":"developer_notes/developer-journal/#developer-steves-journal","text":"This is a journal of developer thoughts. It is not a change log (that is in git) or an issue list.","title":"Developer (Steve's) journal"},{"location":"developer_notes/developer-journal/#2019-08-05","text":"Current workflow to change object names: searchreplacefiles_shell('*.txt',upper('epochcontents'),upper('epochprobemap')) (need to change .txt, .m, object* files typically) filenamesearchreplace(pwd,{'epochcontents'},{'epochprobemap'},'deleteOriginals',1,'noOp',1,'recursive',1) (need to set noOp to 0 to make it run)","title":"2019-08-05"},{"location":"developer_notes/developer-journal/#2019-01-03","text":"We had the kick-off meeting with Squishymedia today. I would like to understand a bit more about JSON databases: what is json hyper schema for example. Is our best database implementation related to open-neuro, MongoDB Stitch, Google Firebase? We wondered if the file reading could somehow be encapsulated in the database rather than as a separate entity?","title":"2019-01-03"},{"location":"developer_notes/developer-journal/#2019-01-04","text":"I need to keep making progress on our analysis of Arani's intracellular data. I will put development questions aside and just use the system for a few days. I will keep working on the draft paper, but only 30 minutes/day I will only fix small bugs in code and docs needed to propel work on intracellular data","title":"2019-01-04"},{"location":"developer_notes/timeline/","text":"Next steps in NDI-matlab development \u00b6 The next development steps in NDI Remove dependencies on the old dbleaf/dbbranch methods \u00b6 Almost done Change thing to element \u00b6 ndi_thing is becoming ndi_element Work on searching for data across sessions \u00b6 Better Schema format \u00b6","title":"Next steps in NDI-matlab development"},{"location":"developer_notes/timeline/#next-steps-in-ndi-matlab-development","text":"The next development steps in NDI","title":"Next steps in NDI-matlab development"},{"location":"developer_notes/timeline/#remove-dependencies-on-the-old-dbleafdbbranch-methods","text":"Almost done","title":"Remove dependencies on the old dbleaf/dbbranch methods"},{"location":"developer_notes/timeline/#change-thing-to-element","text":"ndi_thing is becoming ndi_element","title":"Change thing to element"},{"location":"developer_notes/timeline/#work-on-searching-for-data-across-sessions","text":"","title":"Work on searching for data across sessions"},{"location":"developer_notes/timeline/#better-schema-format","text":"","title":"Better Schema format"},{"location":"developer_notes/demo/app/spikesorting/ndi_spikesorting/tutorial_link/","text":"","title":"Tutorial link"},{"location":"documents/ndi_document/","text":"ndi_document (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document Short name : ndi_document Superclasses : none Definition : $NDIDOCUMENTPATH/ndi_document.json Schema for validation : $NDISCHEMAPATH/ndi_document_schema.json Property_list_name : ndi_document Class_version : 1 ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document"},{"location":"documents/ndi_document/#ndi_document-ndidocument-class","text":"","title":"ndi_document (ndi.document class)"},{"location":"documents/ndi_document/#class-definition","text":"Class name : ndi_document Short name : ndi_document Superclasses : none Definition : $NDIDOCUMENTPATH/ndi_document.json Schema for validation : $NDISCHEMAPATH/ndi_document_schema.json Property_list_name : ndi_document Class_version : 1","title":"Class definition"},{"location":"documents/ndi_document/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/ndi_document_animalsubject/","text":"ndi_document_animalsubject (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_animalsubject Short name : ndi_document_animalsubject Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/ndi_document_animalsubject.json Schema for validation : $NDISCHEMAPATH/ndi_document_animalsubject_schema.json Property_list_name : animalsubject Class_version : 1 ndi_document_animalsubject fields \u00b6 Accessed by animalsubject.field where field is one of the field names below field default_value data type description scientific_name genbank_commonname ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document_animalsubject"},{"location":"documents/ndi_document_animalsubject/#ndi_document_animalsubject-ndidocument-class","text":"","title":"ndi_document_animalsubject (ndi.document class)"},{"location":"documents/ndi_document_animalsubject/#class-definition","text":"Class name : ndi_document_animalsubject Short name : ndi_document_animalsubject Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/ndi_document_animalsubject.json Schema for validation : $NDISCHEMAPATH/ndi_document_animalsubject_schema.json Property_list_name : animalsubject Class_version : 1","title":"Class definition"},{"location":"documents/ndi_document_animalsubject/#ndi_document_animalsubject-fields","text":"Accessed by animalsubject.field where field is one of the field names below field default_value data type description scientific_name genbank_commonname","title":"ndi_document_animalsubject fields"},{"location":"documents/ndi_document_animalsubject/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/ndi_document_app/","text":"ndi_document_app (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_app Short name : ndi_document_app Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/ndi_document_app.json Schema for validation : $NDISCHEMAPATH/ndi_document_app_schema.json Property_list_name : app Class_version : 1 ndi_document_app fields \u00b6 Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document_app"},{"location":"documents/ndi_document_app/#ndi_document_app-ndidocument-class","text":"","title":"ndi_document_app (ndi.document class)"},{"location":"documents/ndi_document_app/#class-definition","text":"Class name : ndi_document_app Short name : ndi_document_app Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/ndi_document_app.json Schema for validation : $NDISCHEMAPATH/ndi_document_app_schema.json Property_list_name : app Class_version : 1","title":"Class definition"},{"location":"documents/ndi_document_app/#ndi_document_app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"ndi_document_app fields"},{"location":"documents/ndi_document_app/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/ndi_document_element/","text":"ndi_document_element (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_element Short name : ndi_document_element Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/ndi_document_element.json Schema for validation : $NDISCHEMAPATH/ndi_document_element_schema.json Property_list_name : element Class_version : 1 ndi_document_element fields \u00b6 Accessed by element.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : underlying_element_id depends_on : subject_id ndi_element_class ndi.element character array (ASCII) The name of the ndi.element class that is stored. name character array (ASCII) The name of element. Elements are uniquely defined by a name, reference, and type. reference 1 Integer The reference number of the element. Elements are uniquely defined by a name, reference, and type. type character array (ASCII) The type of the element. Common probe types are in probetype2object.json direct 0 Integer (0 or 1) Does this element directly feed data from an underlying element? ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document_element"},{"location":"documents/ndi_document_element/#ndi_document_element-ndidocument-class","text":"","title":"ndi_document_element (ndi.document class)"},{"location":"documents/ndi_document_element/#class-definition","text":"Class name : ndi_document_element Short name : ndi_document_element Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/ndi_document_element.json Schema for validation : $NDISCHEMAPATH/ndi_document_element_schema.json Property_list_name : element Class_version : 1","title":"Class definition"},{"location":"documents/ndi_document_element/#ndi_document_element-fields","text":"Accessed by element.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : underlying_element_id depends_on : subject_id ndi_element_class ndi.element character array (ASCII) The name of the ndi.element class that is stored. name character array (ASCII) The name of element. Elements are uniquely defined by a name, reference, and type. reference 1 Integer The reference number of the element. Elements are uniquely defined by a name, reference, and type. type character array (ASCII) The type of the element. Common probe types are in probetype2object.json direct 0 Integer (0 or 1) Does this element directly feed data from an underlying element?","title":"ndi_document_element fields"},{"location":"documents/ndi_document_element/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/ndi_document_element_epoch/","text":"ndi_document_element_epoch (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_element_epoch Short name : ndi_document_element_epoch Superclasses : ndi_document_binaryseries , ndi_document , ndi_document_epochid Definition : $NDIDOCUMENTPATH/ndi_document_element_epoch.json Schema for validation : $NDISCHEMAPATH/ndi_document_element_epoch_schema.json Property_list_name : element_epoch Class_version : 1 ndi_document_element_epoch fields \u00b6 Accessed by element_epoch.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id epoch_clock 'dev_local_time' character array (ASCII) The clock type (of the ndi.time.clocktype object) that describes this epoch. t0_t1 [0 1] 1x2 float The start time and the stop time of this epoch, in time units of the epoch_clock. ndi_document_binaryseries fields \u00b6 Accessed by binary_series_parameters.field where field is one of the field names below field default_value data type description time_size 1 Integer array [n m] Number of independent variable entries (often time) time_type character array (ASCII) Type of the time variable ('float64', 'uint32', etc) (note: make better) data_size 1 Integer array [n m] Number of data entries) data_type character array (ASCII) Type of the time variable ('float64', 'uint32', etc) (note: make better) data_dim 1 Integer array [n m] Dimensions of each data series samples_regular_intervals 1 Integer (0 or 1) is the data always sampled at regular intervals? ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database ndi_document_epochid fields \u00b6 Accessed by epochid_fix.field where field is one of the field names below field default_value data type description epochid character array (ASCII) The epoch id that is referred to","title":"ndi_document_element_epoch"},{"location":"documents/ndi_document_element_epoch/#ndi_document_element_epoch-ndidocument-class","text":"","title":"ndi_document_element_epoch (ndi.document class)"},{"location":"documents/ndi_document_element_epoch/#class-definition","text":"Class name : ndi_document_element_epoch Short name : ndi_document_element_epoch Superclasses : ndi_document_binaryseries , ndi_document , ndi_document_epochid Definition : $NDIDOCUMENTPATH/ndi_document_element_epoch.json Schema for validation : $NDISCHEMAPATH/ndi_document_element_epoch_schema.json Property_list_name : element_epoch Class_version : 1","title":"Class definition"},{"location":"documents/ndi_document_element_epoch/#ndi_document_element_epoch-fields","text":"Accessed by element_epoch.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id epoch_clock 'dev_local_time' character array (ASCII) The clock type (of the ndi.time.clocktype object) that describes this epoch. t0_t1 [0 1] 1x2 float The start time and the stop time of this epoch, in time units of the epoch_clock.","title":"ndi_document_element_epoch fields"},{"location":"documents/ndi_document_element_epoch/#ndi_document_binaryseries-fields","text":"Accessed by binary_series_parameters.field where field is one of the field names below field default_value data type description time_size 1 Integer array [n m] Number of independent variable entries (often time) time_type character array (ASCII) Type of the time variable ('float64', 'uint32', etc) (note: make better) data_size 1 Integer array [n m] Number of data entries) data_type character array (ASCII) Type of the time variable ('float64', 'uint32', etc) (note: make better) data_dim 1 Integer array [n m] Dimensions of each data series samples_regular_intervals 1 Integer (0 or 1) is the data always sampled at regular intervals?","title":"ndi_document_binaryseries fields"},{"location":"documents/ndi_document_element_epoch/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/ndi_document_element_epoch/#ndi_document_epochid-fields","text":"Accessed by epochid_fix.field where field is one of the field names below field default_value data type description epochid character array (ASCII) The epoch id that is referred to","title":"ndi_document_epochid fields"},{"location":"documents/ndi_document_epochid/","text":"ndi_document_epochid (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_epochid Short name : ndi_document_epochid Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/ndi_document_epochid.json Schema for validation : $NDISCHEMAPATH/ndi_document_epochid_schema.json Property_list_name : epochid_fix Class_version : 1 ndi_document_epochid fields \u00b6 Accessed by epochid_fix.field where field is one of the field names below field default_value data type description epochid character array (ASCII) The epoch id that is referred to ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document_epochid"},{"location":"documents/ndi_document_epochid/#ndi_document_epochid-ndidocument-class","text":"","title":"ndi_document_epochid (ndi.document class)"},{"location":"documents/ndi_document_epochid/#class-definition","text":"Class name : ndi_document_epochid Short name : ndi_document_epochid Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/ndi_document_epochid.json Schema for validation : $NDISCHEMAPATH/ndi_document_epochid_schema.json Property_list_name : epochid_fix Class_version : 1","title":"Class definition"},{"location":"documents/ndi_document_epochid/#ndi_document_epochid-fields","text":"Accessed by epochid_fix.field where field is one of the field names below field default_value data type description epochid character array (ASCII) The epoch id that is referred to","title":"ndi_document_epochid fields"},{"location":"documents/ndi_document_epochid/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/ndi_document_projectvar/","text":"ndi_document_projectvar (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_projectvar Short name : ndi_document_projectvar Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/ndi_document_projectvar.json Schema for validation : $NDISCHEMAPATH/ndi_document_projectvar_schema.json Property_list_name : projectvar Class_version : 1 ndi_document_projectvar fields \u00b6 Accessed by projectvar.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id project character array (ASCII) The name of the project id any An identifier that is free for the user to choose lab character array (ASCII) The name of the lab in a format that is free for the user to choose description character array (ASCII) A description that is free for the user to choose date ISO 8601 Date + Time with time zone A time stamp of the measurement ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document_projectvar"},{"location":"documents/ndi_document_projectvar/#ndi_document_projectvar-ndidocument-class","text":"","title":"ndi_document_projectvar (ndi.document class)"},{"location":"documents/ndi_document_projectvar/#class-definition","text":"Class name : ndi_document_projectvar Short name : ndi_document_projectvar Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/ndi_document_projectvar.json Schema for validation : $NDISCHEMAPATH/ndi_document_projectvar_schema.json Property_list_name : projectvar Class_version : 1","title":"Class definition"},{"location":"documents/ndi_document_projectvar/#ndi_document_projectvar-fields","text":"Accessed by projectvar.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id project character array (ASCII) The name of the project id any An identifier that is free for the user to choose lab character array (ASCII) The name of the lab in a format that is free for the user to choose description character array (ASCII) A description that is free for the user to choose date ISO 8601 Date + Time with time zone A time stamp of the measurement","title":"ndi_document_projectvar fields"},{"location":"documents/ndi_document_projectvar/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/ndi_document_subject/","text":"ndi_document_subject (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_subject Short name : ndi_document_subject Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/ndi_document_subject.json Schema for validation : $NDISCHEMAPATH/ndi_document_subject_schema.json Property_list_name : subject Class_version : 1 ndi_document_subject fields \u00b6 Accessed by subject.field where field is one of the field names below field default_value data type description local_identifier - A globally unique identifier that is meaningful to a local group The identifier is usually constructed by concatenating a local identifier with the name of the group, such as mouse123@vhlab.org description character string (ASCII) A character string that is free for the user to choose ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document_subject"},{"location":"documents/ndi_document_subject/#ndi_document_subject-ndidocument-class","text":"","title":"ndi_document_subject (ndi.document class)"},{"location":"documents/ndi_document_subject/#class-definition","text":"Class name : ndi_document_subject Short name : ndi_document_subject Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/ndi_document_subject.json Schema for validation : $NDISCHEMAPATH/ndi_document_subject_schema.json Property_list_name : subject Class_version : 1","title":"Class definition"},{"location":"documents/ndi_document_subject/#ndi_document_subject-fields","text":"Accessed by subject.field where field is one of the field names below field default_value data type description local_identifier - A globally unique identifier that is meaningful to a local group The identifier is usually constructed by concatenating a local identifier with the name of the group, such as mouse123@vhlab.org description character string (ASCII) A character string that is free for the user to choose","title":"ndi_document_subject fields"},{"location":"documents/ndi_document_subject/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/ndi_document_subjectmeasurement/","text":"ndi_document_subjectmeasurement (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_subjectmeasurement Short name : ndi_document_subjectmeasurement Superclasses : ndi_document , ndi_document_subject Definition : $NDIDOCUMENTPATH/ndi_document_subjectmeasurement.json Schema for validation : $NDISCHEMAPATH/ndi_document_subjectmeasurement_schema.json Property_list_name : subjectmeasurement Class_version : 1 ndi_document_subjectmeasurement fields \u00b6 Accessed by subjectmeasurement.field where field is one of the field names below field default_value data type description measurement value datestamp ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database ndi_document_subject fields \u00b6 Accessed by subject.field where field is one of the field names below field default_value data type description local_identifier - A globally unique identifier that is meaningful to a local group The identifier is usually constructed by concatenating a local identifier with the name of the group, such as mouse123@vhlab.org description character string (ASCII) A character string that is free for the user to choose","title":"ndi_document_subjectmeasurement"},{"location":"documents/ndi_document_subjectmeasurement/#ndi_document_subjectmeasurement-ndidocument-class","text":"","title":"ndi_document_subjectmeasurement (ndi.document class)"},{"location":"documents/ndi_document_subjectmeasurement/#class-definition","text":"Class name : ndi_document_subjectmeasurement Short name : ndi_document_subjectmeasurement Superclasses : ndi_document , ndi_document_subject Definition : $NDIDOCUMENTPATH/ndi_document_subjectmeasurement.json Schema for validation : $NDISCHEMAPATH/ndi_document_subjectmeasurement_schema.json Property_list_name : subjectmeasurement Class_version : 1","title":"Class definition"},{"location":"documents/ndi_document_subjectmeasurement/#ndi_document_subjectmeasurement-fields","text":"Accessed by subjectmeasurement.field where field is one of the field names below field default_value data type description measurement value datestamp","title":"ndi_document_subjectmeasurement fields"},{"location":"documents/ndi_document_subjectmeasurement/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/ndi_document_subjectmeasurement/#ndi_document_subject-fields","text":"Accessed by subject.field where field is one of the field names below field default_value data type description local_identifier - A globally unique identifier that is meaningful to a local group The identifier is usually constructed by concatenating a local identifier with the name of the group, such as mouse123@vhlab.org description character string (ASCII) A character string that is free for the user to choose","title":"ndi_document_subject fields"},{"location":"documents/apps/jrclust/jrclust_clusters/","text":"jrclust_clusters (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_apps_jrclust_jrclust_clusters Short name : jrclust_clusters Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/apps/jrclust/jrclust_clusters.json Schema for validation : $NDISCHEMAPATH/apps/jrclust/jrclust_clusters_schema.json Property_list_name : jrclust_clusters Class_version : 1 jrclust_clusters fields \u00b6 Accessed by jrclust_clusters.field where field is one of the field names below field default_value data type description res_mat_MD5_checksum ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database ndi_document_app fields \u00b6 Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"jrclust_clusters"},{"location":"documents/apps/jrclust/jrclust_clusters/#jrclust_clusters-ndidocument-class","text":"","title":"jrclust_clusters (ndi.document class)"},{"location":"documents/apps/jrclust/jrclust_clusters/#class-definition","text":"Class name : ndi_document_apps_jrclust_jrclust_clusters Short name : jrclust_clusters Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/apps/jrclust/jrclust_clusters.json Schema for validation : $NDISCHEMAPATH/apps/jrclust/jrclust_clusters_schema.json Property_list_name : jrclust_clusters Class_version : 1","title":"Class definition"},{"location":"documents/apps/jrclust/jrclust_clusters/#jrclust_clusters-fields","text":"Accessed by jrclust_clusters.field where field is one of the field names below field default_value data type description res_mat_MD5_checksum","title":"jrclust_clusters fields"},{"location":"documents/apps/jrclust/jrclust_clusters/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/apps/jrclust/jrclust_clusters/#ndi_document_app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"ndi_document_app fields"},{"location":"documents/apps/markgarbage/valid_interval/","text":"valid_interval (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_apps_markgarbage_valid_interval Short name : valid_interval Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/apps/markgarbage/valid_interval.json Schema for validation : $NDISCHEMAPATH/apps/markgarbage/valid_interval_schema.json Property_list_name : valid_interval Class_version : 1 valid_interval fields \u00b6 Accessed by valid_interval.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id timeref_structt0 t0 timeref_structt1 t1 ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database ndi_document_app fields \u00b6 Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"valid_interval"},{"location":"documents/apps/markgarbage/valid_interval/#valid_interval-ndidocument-class","text":"","title":"valid_interval (ndi.document class)"},{"location":"documents/apps/markgarbage/valid_interval/#class-definition","text":"Class name : ndi_document_apps_markgarbage_valid_interval Short name : valid_interval Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/apps/markgarbage/valid_interval.json Schema for validation : $NDISCHEMAPATH/apps/markgarbage/valid_interval_schema.json Property_list_name : valid_interval Class_version : 1","title":"Class definition"},{"location":"documents/apps/markgarbage/valid_interval/#valid_interval-fields","text":"Accessed by valid_interval.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id timeref_structt0 t0 timeref_structt1 t1","title":"valid_interval fields"},{"location":"documents/apps/markgarbage/valid_interval/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/apps/markgarbage/valid_interval/#ndi_document_app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"ndi_document_app fields"},{"location":"documents/apps/spikeextractor/spike_extraction_parameters/","text":"spike_extraction_parameters (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_apps_spikeextractor_spike_extraction_parameters Short name : spike_extraction_parameters Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/apps/spikeextractor/spike_extraction_parameters.json Schema for validation : $NDISCHEMAPATH/apps/spikeextractor/spike_extraction_parameters_schema.json Property_list_name : spike_extraction_parameters Class_version : 1 spike_extraction_parameters fields \u00b6 Accessed by spike_extraction_parameters.field where field is one of the field names below field default_value data type description center_range_time overlap read_time refractory_time spike_start_time spike_end_time do_filter filter_type filter_low filter_high filter_order filter_ripple threshold_method threshold_parameter threshold_sign ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database ndi_document_app fields \u00b6 Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"spike_extraction_parameters"},{"location":"documents/apps/spikeextractor/spike_extraction_parameters/#spike_extraction_parameters-ndidocument-class","text":"","title":"spike_extraction_parameters (ndi.document class)"},{"location":"documents/apps/spikeextractor/spike_extraction_parameters/#class-definition","text":"Class name : ndi_document_apps_spikeextractor_spike_extraction_parameters Short name : spike_extraction_parameters Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/apps/spikeextractor/spike_extraction_parameters.json Schema for validation : $NDISCHEMAPATH/apps/spikeextractor/spike_extraction_parameters_schema.json Property_list_name : spike_extraction_parameters Class_version : 1","title":"Class definition"},{"location":"documents/apps/spikeextractor/spike_extraction_parameters/#spike_extraction_parameters-fields","text":"Accessed by spike_extraction_parameters.field where field is one of the field names below field default_value data type description center_range_time overlap read_time refractory_time spike_start_time spike_end_time do_filter filter_type filter_low filter_high filter_order filter_ripple threshold_method threshold_parameter threshold_sign","title":"spike_extraction_parameters fields"},{"location":"documents/apps/spikeextractor/spike_extraction_parameters/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/apps/spikeextractor/spike_extraction_parameters/#ndi_document_app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"ndi_document_app fields"},{"location":"documents/apps/spikeextractor/spike_extraction_parameters_modification/","text":"spike_extraction_parameters_modification (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_apps_spikeextractor_spike_extraction_parameters_modification Short name : spike_extraction_parameters_modification Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/apps/spikeextractor/spike_extraction_parameters_modification.json Schema for validation : $NDISCHEMAPATH/apps/spikeextractor/spike_extraction_parameters_modification_schema.json Property_list_name : spike_extraction_parameters_modification Class_version : 1 spike_extraction_parameters_modification fields \u00b6 Accessed by spike_extraction_parameters_modification.field where field is one of the field names below field default_value data type description center_range_time overlap read_time refractory_time spike_start_time spike_end_time do_filter filter_type filter_low filter_high filter_order filter_ripple threshold_method threshold_parameter threshold_sign ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database ndi_document_app fields \u00b6 Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"spike_extraction_parameters_modification"},{"location":"documents/apps/spikeextractor/spike_extraction_parameters_modification/#spike_extraction_parameters_modification-ndidocument-class","text":"","title":"spike_extraction_parameters_modification (ndi.document class)"},{"location":"documents/apps/spikeextractor/spike_extraction_parameters_modification/#class-definition","text":"Class name : ndi_document_apps_spikeextractor_spike_extraction_parameters_modification Short name : spike_extraction_parameters_modification Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/apps/spikeextractor/spike_extraction_parameters_modification.json Schema for validation : $NDISCHEMAPATH/apps/spikeextractor/spike_extraction_parameters_modification_schema.json Property_list_name : spike_extraction_parameters_modification Class_version : 1","title":"Class definition"},{"location":"documents/apps/spikeextractor/spike_extraction_parameters_modification/#spike_extraction_parameters_modification-fields","text":"Accessed by spike_extraction_parameters_modification.field where field is one of the field names below field default_value data type description center_range_time overlap read_time refractory_time spike_start_time spike_end_time do_filter filter_type filter_low filter_high filter_order filter_ripple threshold_method threshold_parameter threshold_sign","title":"spike_extraction_parameters_modification fields"},{"location":"documents/apps/spikeextractor/spike_extraction_parameters_modification/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/apps/spikeextractor/spike_extraction_parameters_modification/#ndi_document_app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"ndi_document_app fields"},{"location":"documents/apps/spikeextractor/spiketimes/","text":"spiketimes (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_apps_spikeextractor_spikeextractor_spiketimes Short name : spiketimes Superclasses : ndi_document , ndi_document_app , ndi_document_epochid Definition : $NDIDOCUMENTPATH/apps/spikeextractor/spiketimes.json Schema for validation : $NDISCHEMAPATH/apps/spikeextractor/spiketimes_schema.json Property_list_name : spiketimes Class_version : 1 spiketimes fields \u00b6 Accessed by spiketimes.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : extraction_parameters_id depends_on : element_id extraction_name ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database ndi_document_app fields \u00b6 Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter ndi_document_epochid fields \u00b6 Accessed by epochid_fix.field where field is one of the field names below field default_value data type description epochid character array (ASCII) The epoch id that is referred to","title":"spiketimes"},{"location":"documents/apps/spikeextractor/spiketimes/#spiketimes-ndidocument-class","text":"","title":"spiketimes (ndi.document class)"},{"location":"documents/apps/spikeextractor/spiketimes/#class-definition","text":"Class name : ndi_document_apps_spikeextractor_spikeextractor_spiketimes Short name : spiketimes Superclasses : ndi_document , ndi_document_app , ndi_document_epochid Definition : $NDIDOCUMENTPATH/apps/spikeextractor/spiketimes.json Schema for validation : $NDISCHEMAPATH/apps/spikeextractor/spiketimes_schema.json Property_list_name : spiketimes Class_version : 1","title":"Class definition"},{"location":"documents/apps/spikeextractor/spiketimes/#spiketimes-fields","text":"Accessed by spiketimes.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : extraction_parameters_id depends_on : element_id extraction_name","title":"spiketimes fields"},{"location":"documents/apps/spikeextractor/spiketimes/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/apps/spikeextractor/spiketimes/#ndi_document_app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"ndi_document_app fields"},{"location":"documents/apps/spikeextractor/spiketimes/#ndi_document_epochid-fields","text":"Accessed by epochid_fix.field where field is one of the field names below field default_value data type description epochid character array (ASCII) The epoch id that is referred to","title":"ndi_document_epochid fields"},{"location":"documents/apps/spikeextractor/spikewaves/","text":"spikewaves (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_apps_spikeextractor_spikeextractor_spikewaves Short name : spikewaves Superclasses : ndi_document , ndi_document_app , ndi_document_epochid Definition : $NDIDOCUMENTPATH/apps/spikeextractor/spikewaves.json Schema for validation : $NDISCHEMAPATH/apps/spikeextractor/spikewaves_schema.json Property_list_name : spikewaves Class_version : 1 spikewaves fields \u00b6 Accessed by spikewaves.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : extraction_parameters_id depends_on : element_id extraction_name ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database ndi_document_app fields \u00b6 Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter ndi_document_epochid fields \u00b6 Accessed by epochid_fix.field where field is one of the field names below field default_value data type description epochid character array (ASCII) The epoch id that is referred to","title":"spikewaves"},{"location":"documents/apps/spikeextractor/spikewaves/#spikewaves-ndidocument-class","text":"","title":"spikewaves (ndi.document class)"},{"location":"documents/apps/spikeextractor/spikewaves/#class-definition","text":"Class name : ndi_document_apps_spikeextractor_spikeextractor_spikewaves Short name : spikewaves Superclasses : ndi_document , ndi_document_app , ndi_document_epochid Definition : $NDIDOCUMENTPATH/apps/spikeextractor/spikewaves.json Schema for validation : $NDISCHEMAPATH/apps/spikeextractor/spikewaves_schema.json Property_list_name : spikewaves Class_version : 1","title":"Class definition"},{"location":"documents/apps/spikeextractor/spikewaves/#spikewaves-fields","text":"Accessed by spikewaves.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : extraction_parameters_id depends_on : element_id extraction_name","title":"spikewaves fields"},{"location":"documents/apps/spikeextractor/spikewaves/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/apps/spikeextractor/spikewaves/#ndi_document_app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"ndi_document_app fields"},{"location":"documents/apps/spikeextractor/spikewaves/#ndi_document_epochid-fields","text":"Accessed by epochid_fix.field where field is one of the field names below field default_value data type description epochid character array (ASCII) The epoch id that is referred to","title":"ndi_document_epochid fields"},{"location":"documents/apps/spikesorter/sorting_parameters/","text":"sorting_parameters (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_apps_spikesorter_sorting_parameters Short name : sorting_parameters Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/apps/spikesorter/sorting_parameters.json Schema for validation : $NDISCHEMAPATH/apps/spikesorter/sorting_parameters_schema.json Property_list_name : sorting_parameters Class_version : 1 sorting_parameters fields \u00b6 Accessed by sorting_parameters.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id graphical_mode 1 Integer 0/1 Should we bring up the graphical user interface to let the user manually specify the clusters? (0=no, 1=yes) num_pca_features 10 Integer Number of principle component analysis features to use for sorting in automatic mode interpolation 3 Integer The number of times to oversample each spike waveform with cubic splines (minimum 1, maximum 10; must be an integer) min_clusters 3 Integer Minimum number of clusters to find when using automatic mode (this is passed to KlustaKwik) max_clusters 10 Integer Maximum number of clusters to find when using automatic mode (this is passed to KlustaKwik) num_start 5 Integer Number of random starting positions to try when using automatic mode (this is passed to KlustaKwik) ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database ndi_document_app fields \u00b6 Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"sorting_parameters"},{"location":"documents/apps/spikesorter/sorting_parameters/#sorting_parameters-ndidocument-class","text":"","title":"sorting_parameters (ndi.document class)"},{"location":"documents/apps/spikesorter/sorting_parameters/#class-definition","text":"Class name : ndi_document_apps_spikesorter_sorting_parameters Short name : sorting_parameters Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/apps/spikesorter/sorting_parameters.json Schema for validation : $NDISCHEMAPATH/apps/spikesorter/sorting_parameters_schema.json Property_list_name : sorting_parameters Class_version : 1","title":"Class definition"},{"location":"documents/apps/spikesorter/sorting_parameters/#sorting_parameters-fields","text":"Accessed by sorting_parameters.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id graphical_mode 1 Integer 0/1 Should we bring up the graphical user interface to let the user manually specify the clusters? (0=no, 1=yes) num_pca_features 10 Integer Number of principle component analysis features to use for sorting in automatic mode interpolation 3 Integer The number of times to oversample each spike waveform with cubic splines (minimum 1, maximum 10; must be an integer) min_clusters 3 Integer Minimum number of clusters to find when using automatic mode (this is passed to KlustaKwik) max_clusters 10 Integer Maximum number of clusters to find when using automatic mode (this is passed to KlustaKwik) num_start 5 Integer Number of random starting positions to try when using automatic mode (this is passed to KlustaKwik)","title":"sorting_parameters fields"},{"location":"documents/apps/spikesorter/sorting_parameters/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/apps/spikesorter/sorting_parameters/#ndi_document_app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"ndi_document_app fields"},{"location":"documents/apps/spikesorter/spike_clusters/","text":"spike_clusters (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_apps_spikesorter_spikesorter_spike_clusters Short name : spike_clusters Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/apps/spikesorter/spike_clusters.json Schema for validation : $NDISCHEMAPATH/apps/spikesorter/spike_clusters_schema.json Property_list_name : spike_clusters Class_version : 1 spike_clusters fields \u00b6 Accessed by spike_clusters.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : sorting_parameters_id depends_on : element_id depends_on : extraction_parameters_id epoch_info - Structure with fields 'EpochStartSamples' and 'EpochNames' EpochStartSamples is a vector that contains the sample number of the clusterid that begins each epoch. For example, if the second epoch begins with spike wave number 123, then EpochStartSamples(2) is 123. clusterinfo - Structure with fields 'number', 'qualitylabel', 'number_of_spikes', 'meanshape', 'EpochStart', 'EpochStop' The 'number' field is the cluster number (an integer in 1...N); the 'qualitylabel' field is a character string that is one of 'Unselected', 'Not useable', 'Multi-unit', 'Good', 'Excellent'; the 'number_of_spikes' field is the number of spikes assigned to this cluster; the 'meanshape' field is the mean of all waveforms assigned to this cluster -- this is a 2-dimensional matrix with size NumSamples x NumChannels; the 'EpochStart' field is the epoch ID / name where the cluster first appears; the 'EpochStop' field is the epoch ID / name where the cluster last appears waveform_sample_times Array of numbers The sample times of each spike waveforms, after oversampling (interpolation) ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database ndi_document_app fields \u00b6 Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"spike_clusters"},{"location":"documents/apps/spikesorter/spike_clusters/#spike_clusters-ndidocument-class","text":"","title":"spike_clusters (ndi.document class)"},{"location":"documents/apps/spikesorter/spike_clusters/#class-definition","text":"Class name : ndi_document_apps_spikesorter_spikesorter_spike_clusters Short name : spike_clusters Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/apps/spikesorter/spike_clusters.json Schema for validation : $NDISCHEMAPATH/apps/spikesorter/spike_clusters_schema.json Property_list_name : spike_clusters Class_version : 1","title":"Class definition"},{"location":"documents/apps/spikesorter/spike_clusters/#spike_clusters-fields","text":"Accessed by spike_clusters.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : sorting_parameters_id depends_on : element_id depends_on : extraction_parameters_id epoch_info - Structure with fields 'EpochStartSamples' and 'EpochNames' EpochStartSamples is a vector that contains the sample number of the clusterid that begins each epoch. For example, if the second epoch begins with spike wave number 123, then EpochStartSamples(2) is 123. clusterinfo - Structure with fields 'number', 'qualitylabel', 'number_of_spikes', 'meanshape', 'EpochStart', 'EpochStop' The 'number' field is the cluster number (an integer in 1...N); the 'qualitylabel' field is a character string that is one of 'Unselected', 'Not useable', 'Multi-unit', 'Good', 'Excellent'; the 'number_of_spikes' field is the number of spikes assigned to this cluster; the 'meanshape' field is the mean of all waveforms assigned to this cluster -- this is a 2-dimensional matrix with size NumSamples x NumChannels; the 'EpochStart' field is the epoch ID / name where the cluster first appears; the 'EpochStop' field is the epoch ID / name where the cluster last appears waveform_sample_times Array of numbers The sample times of each spike waveforms, after oversampling (interpolation)","title":"spike_clusters fields"},{"location":"documents/apps/spikesorter/spike_clusters/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/apps/spikesorter/spike_clusters/#ndi_document_app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"ndi_document_app fields"},{"location":"documents/apps/spikesorter_hengen/extraction_parameters/","text":"extraction_parameters (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_apps_spikesorter_hengen_extraction_parameters Short name : extraction_parameters Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/apps/spikesorter_hengen/extraction_parameters.json Schema for validation : $NDISCHEMAPATH/apps/spikesorter_hengen/extraction_parameters_schema.json Property_list_name : hengen_extraction_parameters Class_version : 1 extraction_parameters fields \u00b6 Accessed by hengen_extraction_parameters.field where field is one of the field names below field default_value data type description thresh num_channels hstype nprobes probetosort probe_channels fs bad_chans rawdatfilt lnosplit lsorting lmetrics spk_sorter lfp ncpus sorter_config ltk TMPDIR_LOC probefile file_path clustering_output ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database ndi_document_app fields \u00b6 Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"extraction_parameters"},{"location":"documents/apps/spikesorter_hengen/extraction_parameters/#extraction_parameters-ndidocument-class","text":"","title":"extraction_parameters (ndi.document class)"},{"location":"documents/apps/spikesorter_hengen/extraction_parameters/#class-definition","text":"Class name : ndi_document_apps_spikesorter_hengen_extraction_parameters Short name : extraction_parameters Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/apps/spikesorter_hengen/extraction_parameters.json Schema for validation : $NDISCHEMAPATH/apps/spikesorter_hengen/extraction_parameters_schema.json Property_list_name : hengen_extraction_parameters Class_version : 1","title":"Class definition"},{"location":"documents/apps/spikesorter_hengen/extraction_parameters/#extraction_parameters-fields","text":"Accessed by hengen_extraction_parameters.field where field is one of the field names below field default_value data type description thresh num_channels hstype nprobes probetosort probe_channels fs bad_chans rawdatfilt lnosplit lsorting lmetrics spk_sorter lfp ncpus sorter_config ltk TMPDIR_LOC probefile file_path clustering_output","title":"extraction_parameters fields"},{"location":"documents/apps/spikesorter_hengen/extraction_parameters/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/apps/spikesorter_hengen/extraction_parameters/#ndi_document_app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"ndi_document_app fields"},{"location":"documents/apps/spikesorter_hengen/mountainsort_parameters/","text":"mountainsort_parameters (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_apps_spikesorter_hengen_mountainsort_parameters Short name : mountainsort_parameters Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/apps/spikesorter_hengen/mountainsort_parameters.json Schema for validation : $NDISCHEMAPATH/apps/spikesorter_hengen/mountainsort_parameters_schema.json Property_list_name : mountainsort_parameters Class_version : 1 mountainsort_parameters fields \u00b6 Accessed by mountainsort_parameters.field where field is one of the field names below field default_value data type description sorter_name adjacency_radius curation noise_overlap_threshold filter chunk_size freq_min freq_max detect_sign whiten grouping_property clip_size detect_interval parallel verbose ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database ndi_document_app fields \u00b6 Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"mountainsort_parameters"},{"location":"documents/apps/spikesorter_hengen/mountainsort_parameters/#mountainsort_parameters-ndidocument-class","text":"","title":"mountainsort_parameters (ndi.document class)"},{"location":"documents/apps/spikesorter_hengen/mountainsort_parameters/#class-definition","text":"Class name : ndi_document_apps_spikesorter_hengen_mountainsort_parameters Short name : mountainsort_parameters Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/apps/spikesorter_hengen/mountainsort_parameters.json Schema for validation : $NDISCHEMAPATH/apps/spikesorter_hengen/mountainsort_parameters_schema.json Property_list_name : mountainsort_parameters Class_version : 1","title":"Class definition"},{"location":"documents/apps/spikesorter_hengen/mountainsort_parameters/#mountainsort_parameters-fields","text":"Accessed by mountainsort_parameters.field where field is one of the field names below field default_value data type description sorter_name adjacency_radius curation noise_overlap_threshold filter chunk_size freq_min freq_max detect_sign whiten grouping_property clip_size detect_interval parallel verbose","title":"mountainsort_parameters fields"},{"location":"documents/apps/spikesorter_hengen/mountainsort_parameters/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/apps/spikesorter_hengen/mountainsort_parameters/#ndi_document_app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"ndi_document_app fields"},{"location":"documents/apps/spikesorter_hengen/neuron_hengen/","text":"neuron_hengen (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_apps_spikesorter_hengen_neuron_hengen Short name : neuron_hengen Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/apps/spikesorter_hengen/neuron_hengen.json Schema for validation : $NDISCHEMAPATH/apps/spikesorter_hengen/neuron_hengen_schema.json Property_list_name : neuron_hengen Class_version : 1 neuron_hengen fields \u00b6 Accessed by neuron_hengen.field where field is one of the field names below field default_value data type description waveform waveforms clust_idx quality cell_type mean_amplitude waveform_tetrodes spike_amplitude ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"neuron_hengen"},{"location":"documents/apps/spikesorter_hengen/neuron_hengen/#neuron_hengen-ndidocument-class","text":"","title":"neuron_hengen (ndi.document class)"},{"location":"documents/apps/spikesorter_hengen/neuron_hengen/#class-definition","text":"Class name : ndi_document_apps_spikesorter_hengen_neuron_hengen Short name : neuron_hengen Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/apps/spikesorter_hengen/neuron_hengen.json Schema for validation : $NDISCHEMAPATH/apps/spikesorter_hengen/neuron_hengen_schema.json Property_list_name : neuron_hengen Class_version : 1","title":"Class definition"},{"location":"documents/apps/spikesorter_hengen/neuron_hengen/#neuron_hengen-fields","text":"Accessed by neuron_hengen.field where field is one of the field names below field default_value data type description waveform waveforms clust_idx quality cell_type mean_amplitude waveform_tetrodes spike_amplitude","title":"neuron_hengen fields"},{"location":"documents/apps/spikesorter_hengen/neuron_hengen/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/apps/spikesorter_hengen/probe_geometry/","text":"probe_geometry (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_apps_spikesorter_hengen_probe_geometry Short name : probe_geometry Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/apps/spikesorter_hengen/probe_geometry.json Schema for validation : $NDISCHEMAPATH/apps/spikesorter_hengen/probe_geometry_schema.json Property_list_name : geometry Class_version : 1 probe_geometry fields \u00b6 Accessed by geometry.field where field is one of the field names below field default_value data type description channel_groups ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database ndi_document_app fields \u00b6 Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"probe_geometry"},{"location":"documents/apps/spikesorter_hengen/probe_geometry/#probe_geometry-ndidocument-class","text":"","title":"probe_geometry (ndi.document class)"},{"location":"documents/apps/spikesorter_hengen/probe_geometry/#class-definition","text":"Class name : ndi_document_apps_spikesorter_hengen_probe_geometry Short name : probe_geometry Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/apps/spikesorter_hengen/probe_geometry.json Schema for validation : $NDISCHEMAPATH/apps/spikesorter_hengen/probe_geometry_schema.json Property_list_name : geometry Class_version : 1","title":"Class definition"},{"location":"documents/apps/spikesorter_hengen/probe_geometry/#probe_geometry-fields","text":"Accessed by geometry.field where field is one of the field names below field default_value data type description channel_groups","title":"probe_geometry fields"},{"location":"documents/apps/spikesorter_hengen/probe_geometry/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/apps/spikesorter_hengen/probe_geometry/#ndi_document_app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"ndi_document_app fields"},{"location":"documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/","text":"binnedspikeratevm (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_apps_vhlab_voltage2firingrate_binnedspikeratevm Short name : binnedspikeratevm Superclasses : ndi_document , ndi_document_app , ndi_document_epochid Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/binnedspikeratevm.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/binnedspikeratevm_schema.json Property_list_name : binnedspikeratevm Class_version : 1 binnedspikeratevm fields \u00b6 Accessed by binnedspikeratevm.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : sorting_parameters_id depends_on : element_id parameters parameters .binsize parameters .vm_baseline_correction parameters .vm_baseline_correct_time parameters .vm_baseline_correct_func parameters .number_of_points voltage_observations firingrate_observations stimids timepoints exactbintime ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database ndi_document_app fields \u00b6 Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter ndi_document_epochid fields \u00b6 Accessed by epochid_fix.field where field is one of the field names below field default_value data type description epochid character array (ASCII) The epoch id that is referred to","title":"binnedspikeratevm"},{"location":"documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/#binnedspikeratevm-ndidocument-class","text":"","title":"binnedspikeratevm (ndi.document class)"},{"location":"documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/#class-definition","text":"Class name : ndi_document_apps_vhlab_voltage2firingrate_binnedspikeratevm Short name : binnedspikeratevm Superclasses : ndi_document , ndi_document_app , ndi_document_epochid Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/binnedspikeratevm.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/binnedspikeratevm_schema.json Property_list_name : binnedspikeratevm Class_version : 1","title":"Class definition"},{"location":"documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/#binnedspikeratevm-fields","text":"Accessed by binnedspikeratevm.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : sorting_parameters_id depends_on : element_id parameters parameters .binsize parameters .vm_baseline_correction parameters .vm_baseline_correct_time parameters .vm_baseline_correct_func parameters .number_of_points voltage_observations firingrate_observations stimids timepoints exactbintime","title":"binnedspikeratevm fields"},{"location":"documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/#ndi_document_app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"ndi_document_app fields"},{"location":"documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/#ndi_document_epochid-fields","text":"Accessed by epochid_fix.field where field is one of the field names below field default_value data type description epochid character array (ASCII) The epoch id that is referred to","title":"ndi_document_epochid fields"},{"location":"documents/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals/","text":"vmneuralresponseresiduals (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_apps_vhlab_voltage2firingrate_vmneuralresponseresiduals Short name : vmneuralresponseresiduals Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals_schema.json Property_list_name : vmneuralresponseresiduals Class_version : 1 vmneuralresponseresiduals fields \u00b6 Accessed by vmneuralresponseresiduals.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id vmneuralresponseresiduals vmneuralresponseresiduals .element_epochid vmneuralresponseresiduals .parameters vmneuralresponseresiduals .parameters.number_traces vmneuralresponseresiduals .parameters.samples_per_trace vmneuralresponseresiduals .parameters.units vmneuralresponseresiduals .column_labels vmneuralresponseresiduals .column_labels.first_column vmneuralresponseresiduals .column_labels.second_column vmneuralresponseresiduals .column_labels.third_column vmneuralresponseresiduals .column_labels.fourth_column vmneuralresponseresiduals .column_labels.fifth_column vmneuralresponseresiduals .goodness_of_fit vmneuralresponseresiduals .total_power vmneuralresponseresiduals .residual_power ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"vmneuralresponseresiduals"},{"location":"documents/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals/#vmneuralresponseresiduals-ndidocument-class","text":"","title":"vmneuralresponseresiduals (ndi.document class)"},{"location":"documents/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals/#class-definition","text":"Class name : ndi_document_apps_vhlab_voltage2firingrate_vmneuralresponseresiduals Short name : vmneuralresponseresiduals Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals_schema.json Property_list_name : vmneuralresponseresiduals Class_version : 1","title":"Class definition"},{"location":"documents/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals/#vmneuralresponseresiduals-fields","text":"Accessed by vmneuralresponseresiduals.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id vmneuralresponseresiduals vmneuralresponseresiduals .element_epochid vmneuralresponseresiduals .parameters vmneuralresponseresiduals .parameters.number_traces vmneuralresponseresiduals .parameters.samples_per_trace vmneuralresponseresiduals .parameters.units vmneuralresponseresiduals .column_labels vmneuralresponseresiduals .column_labels.first_column vmneuralresponseresiduals .column_labels.second_column vmneuralresponseresiduals .column_labels.third_column vmneuralresponseresiduals .column_labels.fourth_column vmneuralresponseresiduals .column_labels.fifth_column vmneuralresponseresiduals .goodness_of_fit vmneuralresponseresiduals .total_power vmneuralresponseresiduals .residual_power","title":"vmneuralresponseresiduals fields"},{"location":"documents/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/","text":"vmspikefilteringparameters (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_apps_vhlab_voltage2firingrate_vmspikefilteringparameters Short name : vmspikefilteringparameters Superclasses : ndi_document , ndi_document_app , ndi_document_epochid Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmspikefilteringparameters.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmspikefilteringparameters_schema.json Property_list_name : vmspikefilteringparameters Class_version : 1 vmspikefilteringparameters fields \u00b6 Accessed by vmspikefilteringparameters.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id sampling_rate new_sampling_rate threshold spiketimes filter_algorithm filter_algorithm_parameters rm60Hz refract ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database ndi_document_app fields \u00b6 Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter ndi_document_epochid fields \u00b6 Accessed by epochid_fix.field where field is one of the field names below field default_value data type description epochid character array (ASCII) The epoch id that is referred to","title":"vmspikefilteringparameters"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/#vmspikefilteringparameters-ndidocument-class","text":"","title":"vmspikefilteringparameters (ndi.document class)"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/#class-definition","text":"Class name : ndi_document_apps_vhlab_voltage2firingrate_vmspikefilteringparameters Short name : vmspikefilteringparameters Superclasses : ndi_document , ndi_document_app , ndi_document_epochid Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmspikefilteringparameters.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmspikefilteringparameters_schema.json Property_list_name : vmspikefilteringparameters Class_version : 1","title":"Class definition"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/#vmspikefilteringparameters-fields","text":"Accessed by vmspikefilteringparameters.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id sampling_rate new_sampling_rate threshold spiketimes filter_algorithm filter_algorithm_parameters rm60Hz refract","title":"vmspikefilteringparameters fields"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/#ndi_document_app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"ndi_document_app fields"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/#ndi_document_epochid-fields","text":"Accessed by epochid_fix.field where field is one of the field names below field default_value data type description epochid character array (ASCII) The epoch id that is referred to","title":"ndi_document_epochid fields"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikefit/","text":"vmspikefit (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_apps_vhlab_voltage2firingrate_vmspikefit Short name : vmspikefit Superclasses : ndi_document , ndi_document_app , ndi_document_epochid Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmspikefit.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmspikefit_schema.json Property_list_name : vmspikefit Class_version : 1 vmspikefit fields \u00b6 Accessed by vmspikefit.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : fit_input_id depends_on : element_id fit_name fit_equation fit_parameters fit_parameter_names fit_sse fit_sse_perpoint fit_constraints ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database ndi_document_app fields \u00b6 Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter ndi_document_epochid fields \u00b6 Accessed by epochid_fix.field where field is one of the field names below field default_value data type description epochid character array (ASCII) The epoch id that is referred to","title":"vmspikefit"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikefit/#vmspikefit-ndidocument-class","text":"","title":"vmspikefit (ndi.document class)"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikefit/#class-definition","text":"Class name : ndi_document_apps_vhlab_voltage2firingrate_vmspikefit Short name : vmspikefit Superclasses : ndi_document , ndi_document_app , ndi_document_epochid Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmspikefit.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmspikefit_schema.json Property_list_name : vmspikefit Class_version : 1","title":"Class definition"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikefit/#vmspikefit-fields","text":"Accessed by vmspikefit.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : fit_input_id depends_on : element_id fit_name fit_equation fit_parameters fit_parameter_names fit_sse fit_sse_perpoint fit_constraints","title":"vmspikefit fields"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikefit/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikefit/#ndi_document_app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"ndi_document_app fields"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikefit/#ndi_document_epochid-fields","text":"Accessed by epochid_fix.field where field is one of the field names below field default_value data type description epochid character array (ASCII) The epoch id that is referred to","title":"ndi_document_epochid fields"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikesummary/","text":"vmspikesummary (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_apps_vhlab_voltage2firingrate_vmspikesummary Short name : vmspikesummary Superclasses : ndi_document , ndi_document_epochid Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmspikesummary.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmspikesummary_schema.json Property_list_name : vmspikesummary Class_version : 1 vmspikesummary fields \u00b6 Accessed by vmspikesummary.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id depends_on : spike_extraction_id mean_spikewave sample_times number_of_spikes median_spikekink_vm median_voltageofhalfmaximum median_fullwidthhalfmaximum median_presk_halfwidthmaximum median_fullwidthhalfmaximum_1 median_presk_halfwidthmaximum_1 median_max_dvdt median_kink_index slope_criterion ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database ndi_document_epochid fields \u00b6 Accessed by epochid_fix.field where field is one of the field names below field default_value data type description epochid character array (ASCII) The epoch id that is referred to","title":"vmspikesummary"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikesummary/#vmspikesummary-ndidocument-class","text":"","title":"vmspikesummary (ndi.document class)"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikesummary/#class-definition","text":"Class name : ndi_document_apps_vhlab_voltage2firingrate_vmspikesummary Short name : vmspikesummary Superclasses : ndi_document , ndi_document_epochid Definition : $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmspikesummary.json Schema for validation : $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmspikesummary_schema.json Property_list_name : vmspikesummary Class_version : 1","title":"Class definition"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikesummary/#vmspikesummary-fields","text":"Accessed by vmspikesummary.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id depends_on : spike_extraction_id mean_spikewave sample_times number_of_spikes median_spikekink_vm median_voltageofhalfmaximum median_fullwidthhalfmaximum median_presk_halfwidthmaximum median_fullwidthhalfmaximum_1 median_presk_halfwidthmaximum_1 median_max_dvdt median_kink_index slope_criterion","title":"vmspikesummary fields"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikesummary/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/apps/vhlab_voltage2firingrate/vmspikesummary/#ndi_document_epochid-fields","text":"Accessed by epochid_fix.field where field is one of the field names below field default_value data type description epochid character array (ASCII) The epoch id that is referred to","title":"ndi_document_epochid fields"},{"location":"documents/daq/ndi_document_daqmetadatareader/","text":"ndi_document_daqmetadatareader (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_daqmetadatareader Short name : ndi_document_daqmetadatareader Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/daq/ndi_document_daqmetadatareader.json Schema for validation : $NDISCHEMAPATH/daq/ndi_document_daqmetadatareader_schema.json Property_list_name : daqmetadatareader Class_version : 1 ndi_document_daqmetadatareader fields \u00b6 Accessed by daqmetadatareader.field where field is one of the field names below field default_value data type description ndi_daqmetadatareader_class tab_separated_file_parameter ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document_daqmetadatareader"},{"location":"documents/daq/ndi_document_daqmetadatareader/#ndi_document_daqmetadatareader-ndidocument-class","text":"","title":"ndi_document_daqmetadatareader (ndi.document class)"},{"location":"documents/daq/ndi_document_daqmetadatareader/#class-definition","text":"Class name : ndi_document_daqmetadatareader Short name : ndi_document_daqmetadatareader Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/daq/ndi_document_daqmetadatareader.json Schema for validation : $NDISCHEMAPATH/daq/ndi_document_daqmetadatareader_schema.json Property_list_name : daqmetadatareader Class_version : 1","title":"Class definition"},{"location":"documents/daq/ndi_document_daqmetadatareader/#ndi_document_daqmetadatareader-fields","text":"Accessed by daqmetadatareader.field where field is one of the field names below field default_value data type description ndi_daqmetadatareader_class tab_separated_file_parameter","title":"ndi_document_daqmetadatareader fields"},{"location":"documents/daq/ndi_document_daqmetadatareader/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/daq/ndi_document_daqreader/","text":"ndi_document_daqreader (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_daqreader Short name : ndi_document_daqreader Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/daq/ndi_document_daqreader.json Schema for validation : $NDISCHEMAPATH/daq/ndi_document_daqreader_schema.json Property_list_name : daqreader Class_version : 1 ndi_document_daqreader fields \u00b6 Accessed by daqreader.field where field is one of the field names below field default_value data type description ndi_daqreader_class ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document_daqreader"},{"location":"documents/daq/ndi_document_daqreader/#ndi_document_daqreader-ndidocument-class","text":"","title":"ndi_document_daqreader (ndi.document class)"},{"location":"documents/daq/ndi_document_daqreader/#class-definition","text":"Class name : ndi_document_daqreader Short name : ndi_document_daqreader Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/daq/ndi_document_daqreader.json Schema for validation : $NDISCHEMAPATH/daq/ndi_document_daqreader_schema.json Property_list_name : daqreader Class_version : 1","title":"Class definition"},{"location":"documents/daq/ndi_document_daqreader/#ndi_document_daqreader-fields","text":"Accessed by daqreader.field where field is one of the field names below field default_value data type description ndi_daqreader_class","title":"ndi_document_daqreader fields"},{"location":"documents/daq/ndi_document_daqreader/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/daq/ndi_document_daqsystem/","text":"ndi_document_daqsystem (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_daqsystem Short name : ndi_document_daqsystem Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/daq/ndi_document_daqsystem.json Schema for validation : $NDISCHEMAPATH/daq/ndi_document_daqsystem_schema.json Property_list_name : daqsystem Class_version : 1 ndi_document_daqsystem fields \u00b6 Accessed by daqsystem.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : filenavigator_id depends_on : daqreader_id ndi_daqsystem_class ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document_daqsystem"},{"location":"documents/daq/ndi_document_daqsystem/#ndi_document_daqsystem-ndidocument-class","text":"","title":"ndi_document_daqsystem (ndi.document class)"},{"location":"documents/daq/ndi_document_daqsystem/#class-definition","text":"Class name : ndi_document_daqsystem Short name : ndi_document_daqsystem Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/daq/ndi_document_daqsystem.json Schema for validation : $NDISCHEMAPATH/daq/ndi_document_daqsystem_schema.json Property_list_name : daqsystem Class_version : 1","title":"Class definition"},{"location":"documents/daq/ndi_document_daqsystem/#ndi_document_daqsystem-fields","text":"Accessed by daqsystem.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : filenavigator_id depends_on : daqreader_id ndi_daqsystem_class","title":"ndi_document_daqsystem fields"},{"location":"documents/daq/ndi_document_daqsystem/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/daq/ndi_document_filenavigator/","text":"ndi_document_filenavigator (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_filenavigator Short name : ndi_document_filenavigator Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/daq/ndi_document_filenavigator.json Schema for validation : $NDISCHEMAPATH/daq/ndi_document_filenavigator_schema.json Property_list_name : filenavigator Class_version : 1 ndi_document_filenavigator fields \u00b6 Accessed by filenavigator.field where field is one of the field names below field default_value data type description ndi_daqreader_class fileparameters epochprobemap_class epochprobemap_fileparameters ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document_filenavigator"},{"location":"documents/daq/ndi_document_filenavigator/#ndi_document_filenavigator-ndidocument-class","text":"","title":"ndi_document_filenavigator (ndi.document class)"},{"location":"documents/daq/ndi_document_filenavigator/#class-definition","text":"Class name : ndi_document_filenavigator Short name : ndi_document_filenavigator Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/daq/ndi_document_filenavigator.json Schema for validation : $NDISCHEMAPATH/daq/ndi_document_filenavigator_schema.json Property_list_name : filenavigator Class_version : 1","title":"Class definition"},{"location":"documents/daq/ndi_document_filenavigator/#ndi_document_filenavigator-fields","text":"Accessed by filenavigator.field where field is one of the field names below field default_value data type description ndi_daqreader_class fileparameters epochprobemap_class epochprobemap_fileparameters","title":"ndi_document_filenavigator fields"},{"location":"documents/daq/ndi_document_filenavigator/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/daq/ndi_document_syncgraph/","text":"ndi_document_syncgraph (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_syncgraph Short name : ndi_document_syncgraph Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/daq/ndi_document_syncgraph.json Schema for validation : $NDISCHEMAPATH/daq/ndi_document_syncgraph_schema.json Property_list_name : syncgraph Class_version : 1 ndi_document_syncgraph fields \u00b6 Accessed by syncgraph.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : variable dependencies ndi_syncgraph_class ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document_syncgraph"},{"location":"documents/daq/ndi_document_syncgraph/#ndi_document_syncgraph-ndidocument-class","text":"","title":"ndi_document_syncgraph (ndi.document class)"},{"location":"documents/daq/ndi_document_syncgraph/#class-definition","text":"Class name : ndi_document_syncgraph Short name : ndi_document_syncgraph Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/daq/ndi_document_syncgraph.json Schema for validation : $NDISCHEMAPATH/daq/ndi_document_syncgraph_schema.json Property_list_name : syncgraph Class_version : 1","title":"Class definition"},{"location":"documents/daq/ndi_document_syncgraph/#ndi_document_syncgraph-fields","text":"Accessed by syncgraph.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : variable dependencies ndi_syncgraph_class","title":"ndi_document_syncgraph fields"},{"location":"documents/daq/ndi_document_syncgraph/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/daq/ndi_document_syncrule/","text":"ndi_document_syncrule (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_syncrule Short name : ndi_document_syncrule Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/daq/ndi_document_syncrule.json Schema for validation : $NDISCHEMAPATH/daq/ndi_document_syncrule_schema.json Property_list_name : syncrule Class_version : 1 ndi_document_syncrule fields \u00b6 Accessed by syncrule.field where field is one of the field names below field default_value data type description ndi_syncrule_class parameters ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document_syncrule"},{"location":"documents/daq/ndi_document_syncrule/#ndi_document_syncrule-ndidocument-class","text":"","title":"ndi_document_syncrule (ndi.document class)"},{"location":"documents/daq/ndi_document_syncrule/#class-definition","text":"Class name : ndi_document_syncrule Short name : ndi_document_syncrule Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/daq/ndi_document_syncrule.json Schema for validation : $NDISCHEMAPATH/daq/ndi_document_syncrule_schema.json Property_list_name : syncrule Class_version : 1","title":"Class definition"},{"location":"documents/daq/ndi_document_syncrule/#ndi_document_syncrule-fields","text":"Accessed by syncrule.field where field is one of the field names below field default_value data type description ndi_syncrule_class parameters","title":"ndi_document_syncrule fields"},{"location":"documents/daq/ndi_document_syncrule/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/data/fitcurve/","text":"fitcurve (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_data_fitcurve Short name : fitcurve Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/data/fitcurve.json Schema for validation : $NDISCHEMAPATH/data/fitcurve.json Property_list_name : fitcurve Class_version : 1 fitcurve fields \u00b6 Accessed by fitcurve.field where field is one of the field names below field default_value data type description fit_name character array (ASCII) The name of the fit being stored (free for the user to choose) fit_equation character array (ASCII) The name of the fit being stored (free for the user to choose) data_size Data size The size of each data point (note: need to describe what this is) fit_parameters float array The values of the fit parameters fit_parameter_names character array (ASCII) The titles of the fit parameters fit_independent_variable_names character array (ASCII) The names of the independent variables fit_dependent_variable_names character array (ASCII) The names of the dependent variables fit_sse float array The sum of squared error of the fit fit_constraints fit_data ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"fitcurve"},{"location":"documents/data/fitcurve/#fitcurve-ndidocument-class","text":"","title":"fitcurve (ndi.document class)"},{"location":"documents/data/fitcurve/#class-definition","text":"Class name : ndi_document_data_fitcurve Short name : fitcurve Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/data/fitcurve.json Schema for validation : $NDISCHEMAPATH/data/fitcurve.json Property_list_name : fitcurve Class_version : 1","title":"Class definition"},{"location":"documents/data/fitcurve/#fitcurve-fields","text":"Accessed by fitcurve.field where field is one of the field names below field default_value data type description fit_name character array (ASCII) The name of the fit being stored (free for the user to choose) fit_equation character array (ASCII) The name of the fit being stored (free for the user to choose) data_size Data size The size of each data point (note: need to describe what this is) fit_parameters float array The values of the fit parameters fit_parameter_names character array (ASCII) The titles of the fit parameters fit_independent_variable_names character array (ASCII) The names of the independent variables fit_dependent_variable_names character array (ASCII) The names of the dependent variables fit_sse float array The sum of squared error of the fit fit_constraints fit_data","title":"fitcurve fields"},{"location":"documents/data/fitcurve/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/data/ndi_document_binaryseries/","text":"ndi_document_binaryseries (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_data_binaryseries Short name : ndi_document_binaryseries Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/data/ndi_document_binaryseries.json Schema for validation : $NDISCHEMAPATH/data/ndi_document_binaryseries_schema.json Property_list_name : binary_series_parameters Class_version : 1 ndi_document_binaryseries fields \u00b6 Accessed by binary_series_parameters.field where field is one of the field names below field default_value data type description time_size 1 Integer array [n m] Number of independent variable entries (often time) time_type character array (ASCII) Type of the time variable ('float64', 'uint32', etc) (note: make better) data_size 1 Integer array [n m] Number of data entries) data_type character array (ASCII) Type of the time variable ('float64', 'uint32', etc) (note: make better) data_dim 1 Integer array [n m] Dimensions of each data series samples_regular_intervals 1 Integer (0 or 1) is the data always sampled at regular intervals? ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document_binaryseries"},{"location":"documents/data/ndi_document_binaryseries/#ndi_document_binaryseries-ndidocument-class","text":"","title":"ndi_document_binaryseries (ndi.document class)"},{"location":"documents/data/ndi_document_binaryseries/#class-definition","text":"Class name : ndi_document_data_binaryseries Short name : ndi_document_binaryseries Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/data/ndi_document_binaryseries.json Schema for validation : $NDISCHEMAPATH/data/ndi_document_binaryseries_schema.json Property_list_name : binary_series_parameters Class_version : 1","title":"Class definition"},{"location":"documents/data/ndi_document_binaryseries/#ndi_document_binaryseries-fields","text":"Accessed by binary_series_parameters.field where field is one of the field names below field default_value data type description time_size 1 Integer array [n m] Number of independent variable entries (often time) time_type character array (ASCII) Type of the time variable ('float64', 'uint32', etc) (note: make better) data_size 1 Integer array [n m] Number of data entries) data_type character array (ASCII) Type of the time variable ('float64', 'uint32', etc) (note: make better) data_dim 1 Integer array [n m] Dimensions of each data series samples_regular_intervals 1 Integer (0 or 1) is the data always sampled at regular intervals?","title":"ndi_document_binaryseries fields"},{"location":"documents/data/ndi_document_binaryseries/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/neuron/neuron_extracellular/","text":"neuron_extracellular (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_neuron_extracellular Short name : neuron_extracellular Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/neuron/neuron_extracellular.json Schema for validation : $NDISCHEMAPATH/neuron/neuron_extracellular.json Property_list_name : neuron_extracellular Class_version : 1 neuron_extracellular fields \u00b6 Accessed by neuron_extracellular.field where field is one of the field names below field default_value data type description number_of_samples_per_channel number_of_channels mean_waveform waveform_sample_times cluster_index quality_number quality_label ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database ndi_document_app fields \u00b6 Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"neuron_extracellular"},{"location":"documents/neuron/neuron_extracellular/#neuron_extracellular-ndidocument-class","text":"","title":"neuron_extracellular (ndi.document class)"},{"location":"documents/neuron/neuron_extracellular/#class-definition","text":"Class name : ndi_document_neuron_extracellular Short name : neuron_extracellular Superclasses : ndi_document , ndi_document_app Definition : $NDIDOCUMENTPATH/neuron/neuron_extracellular.json Schema for validation : $NDISCHEMAPATH/neuron/neuron_extracellular.json Property_list_name : neuron_extracellular Class_version : 1","title":"Class definition"},{"location":"documents/neuron/neuron_extracellular/#neuron_extracellular-fields","text":"Accessed by neuron_extracellular.field where field is one of the field names below field default_value data type description number_of_samples_per_channel number_of_channels mean_waveform waveform_sample_times cluster_index quality_number quality_label","title":"neuron_extracellular fields"},{"location":"documents/neuron/neuron_extracellular/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/neuron/neuron_extracellular/#ndi_document_app-fields","text":"Accessed by app.field where field is one of the field names below field default_value data type description name ndi.app character array (ASCII) The name of the application version - character array (ASCII) The version of the app according to the app's own version schedule; often this is a Git commit identifier url URL as a character array (ASCII) The home page of the application os character array (ASCII) The operating system that ran the application os_version character array (ASCII) The operating system version interpreter character array (ASCII) If applicable, the name of the interpreter (Matlab, python3, etc) interpreter_version character array (ASCII) If applicable, the version of the interpreter","title":"ndi_document_app fields"},{"location":"documents/newdoctemplate/ndi_document_newdoctemplate/","text":"ndi_document_newdoctemplate (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_newdoctemplate Short name : ndi_document_newdoctemplate Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/ndi_document_newdoctemplate.json Schema for validation : $NDISCHEMAPATH/ndi_document_newdoctemplate_schema.json Property_list_name : newdoctemplate Class_version : 1 ndi_document_newdoctemplate fields \u00b6 Accessed by newdoctemplate.field where field is one of the field names below field default_value data type description propertyname_1_stringexample propertyname_2_number_example propertyname_3_array_example propertyname_4_stringarray_example ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document_newdoctemplate"},{"location":"documents/newdoctemplate/ndi_document_newdoctemplate/#ndi_document_newdoctemplate-ndidocument-class","text":"","title":"ndi_document_newdoctemplate (ndi.document class)"},{"location":"documents/newdoctemplate/ndi_document_newdoctemplate/#class-definition","text":"Class name : ndi_document_newdoctemplate Short name : ndi_document_newdoctemplate Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/ndi_document_newdoctemplate.json Schema for validation : $NDISCHEMAPATH/ndi_document_newdoctemplate_schema.json Property_list_name : newdoctemplate Class_version : 1","title":"Class definition"},{"location":"documents/newdoctemplate/ndi_document_newdoctemplate/#ndi_document_newdoctemplate-fields","text":"Accessed by newdoctemplate.field where field is one of the field names below field default_value data type description propertyname_1_stringexample propertyname_2_number_example propertyname_3_array_example propertyname_4_stringarray_example","title":"ndi_document_newdoctemplate fields"},{"location":"documents/newdoctemplate/ndi_document_newdoctemplate/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/stimulus/control_stimulus_ids/","text":"control_stimulus_ids (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_stimulus_control_stimulus_ids Short name : control_stimulus_ids Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/stimulus/control_stimulus_ids.json Schema for validation : $NDISCHEMAPATH/stimulus/control_stimulus_ids.json Property_list_name : control_stimulus_ids Class_version : 1 control_stimulus_ids fields \u00b6 Accessed by control_stimulus_ids.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : stimulus_presentation_id control_stimulus_ids Integer array An array of the control stimulus identifier for each stimulus. For example, if a stimulus set has IDs [1 2 3], and 3 is a control (or 'blank') stimulus, then this is indicated by control_stimulus_ids = [3 3 3] control_stimulus_id_method Structure with fields 'method','controlid', and 'controlid_value The method field indicates the method used (such as 'pseudorandom'), the controlid is a stimulus parameter that the control stimulus will have (such as 'isblank'), and the controlis_value is the vaue of that parameter (such as 1) ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"control_stimulus_ids"},{"location":"documents/stimulus/control_stimulus_ids/#control_stimulus_ids-ndidocument-class","text":"","title":"control_stimulus_ids (ndi.document class)"},{"location":"documents/stimulus/control_stimulus_ids/#class-definition","text":"Class name : ndi_document_stimulus_control_stimulus_ids Short name : control_stimulus_ids Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/stimulus/control_stimulus_ids.json Schema for validation : $NDISCHEMAPATH/stimulus/control_stimulus_ids.json Property_list_name : control_stimulus_ids Class_version : 1","title":"Class definition"},{"location":"documents/stimulus/control_stimulus_ids/#control_stimulus_ids-fields","text":"Accessed by control_stimulus_ids.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : stimulus_presentation_id control_stimulus_ids Integer array An array of the control stimulus identifier for each stimulus. For example, if a stimulus set has IDs [1 2 3], and 3 is a control (or 'blank') stimulus, then this is indicated by control_stimulus_ids = [3 3 3] control_stimulus_id_method Structure with fields 'method','controlid', and 'controlid_value The method field indicates the method used (such as 'pseudorandom'), the controlid is a stimulus parameter that the control stimulus will have (such as 'isblank'), and the controlis_value is the vaue of that parameter (such as 1)","title":"control_stimulus_ids fields"},{"location":"documents/stimulus/control_stimulus_ids/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/stimulus/stimulus_presentation/","text":"stimulus_presentation (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_stimulus_stimulus_presentation Short name : stimulus_presentation Superclasses : ndi_document , ndi_document_epochid Definition : $NDIDOCUMENTPATH/stimulus/stimulus_presentation.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_presentation_schema.json Property_list_name : stimulus_presentation Class_version : 1 stimulus_presentation fields \u00b6 Accessed by stimulus_presentation.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : stimulus_element_id NDI document ID The ID of the element of the stimulator (usually the probe that provided the stimulation) presentation_order - Integer array An array of the order of stimulus presentation (each stimulus has an integer ID) presentation_time Structure with fields clocktype, stimopen, onset, offset, stimclose clocktype is the string describing the type of clock (from ndi.time.clocktime) presentation_time .clocktype dev_local_clock character string (ASCII) matching types in ndi.time.clocktime The type of clock that is used to specify the time of the stimuli. stimuli stimuli .parameters ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database ndi_document_epochid fields \u00b6 Accessed by epochid_fix.field where field is one of the field names below field default_value data type description epochid character array (ASCII) The epoch id that is referred to","title":"stimulus_presentation"},{"location":"documents/stimulus/stimulus_presentation/#stimulus_presentation-ndidocument-class","text":"","title":"stimulus_presentation (ndi.document class)"},{"location":"documents/stimulus/stimulus_presentation/#class-definition","text":"Class name : ndi_document_stimulus_stimulus_presentation Short name : stimulus_presentation Superclasses : ndi_document , ndi_document_epochid Definition : $NDIDOCUMENTPATH/stimulus/stimulus_presentation.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_presentation_schema.json Property_list_name : stimulus_presentation Class_version : 1","title":"Class definition"},{"location":"documents/stimulus/stimulus_presentation/#stimulus_presentation-fields","text":"Accessed by stimulus_presentation.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : stimulus_element_id NDI document ID The ID of the element of the stimulator (usually the probe that provided the stimulation) presentation_order - Integer array An array of the order of stimulus presentation (each stimulus has an integer ID) presentation_time Structure with fields clocktype, stimopen, onset, offset, stimclose clocktype is the string describing the type of clock (from ndi.time.clocktime) presentation_time .clocktype dev_local_clock character string (ASCII) matching types in ndi.time.clocktime The type of clock that is used to specify the time of the stimuli. stimuli stimuli .parameters","title":"stimulus_presentation fields"},{"location":"documents/stimulus/stimulus_presentation/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/stimulus/stimulus_presentation/#ndi_document_epochid-fields","text":"Accessed by epochid_fix.field where field is one of the field names below field default_value data type description epochid character array (ASCII) The epoch id that is referred to","title":"ndi_document_epochid fields"},{"location":"documents/stimulus/stimulus_response/","text":"stimulus_response (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_stimulus_stimulus_response Short name : stimulus_response Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/stimulus/stimulus_response.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_response_schema.json Property_list_name : stimulus_response Class_version : 1 stimulus_response fields \u00b6 Accessed by stimulus_response.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id depends_on : stimulator_id depends_on : stimulus_presentation_id depends_on : stimulus_control_id stimulator_epochid element_epochid ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"stimulus_response"},{"location":"documents/stimulus/stimulus_response/#stimulus_response-ndidocument-class","text":"","title":"stimulus_response (ndi.document class)"},{"location":"documents/stimulus/stimulus_response/#class-definition","text":"Class name : ndi_document_stimulus_stimulus_response Short name : stimulus_response Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/stimulus/stimulus_response.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_response_schema.json Property_list_name : stimulus_response Class_version : 1","title":"Class definition"},{"location":"documents/stimulus/stimulus_response/#stimulus_response-fields","text":"Accessed by stimulus_response.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id depends_on : stimulator_id depends_on : stimulus_presentation_id depends_on : stimulus_control_id stimulator_epochid element_epochid","title":"stimulus_response fields"},{"location":"documents/stimulus/stimulus_response/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/stimulus/stimulus_response_scalar/","text":"stimulus_response_scalar (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_stimulus_stimulus_response_scalar Short name : stimulus_response_scalar Superclasses : ndi_document , stimulus_response Definition : $NDIDOCUMENTPATH/stimulus/stimulus_response_scalar.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_response_scalar_schema.json Property_list_name : stimulus_response_scalar Class_version : 1 stimulus_response_scalar fields \u00b6 Accessed by stimulus_response_scalar.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : stimulus_response_scalar_parameters_id response_type response response .stimid response .response_real response .response_imaginary response .control_response_real response .control_response_imaginary ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database stimulus_response fields \u00b6 Accessed by stimulus_response.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id depends_on : stimulator_id depends_on : stimulus_presentation_id depends_on : stimulus_control_id stimulator_epochid element_epochid","title":"stimulus_response_scalar"},{"location":"documents/stimulus/stimulus_response_scalar/#stimulus_response_scalar-ndidocument-class","text":"","title":"stimulus_response_scalar (ndi.document class)"},{"location":"documents/stimulus/stimulus_response_scalar/#class-definition","text":"Class name : ndi_document_stimulus_stimulus_response_scalar Short name : stimulus_response_scalar Superclasses : ndi_document , stimulus_response Definition : $NDIDOCUMENTPATH/stimulus/stimulus_response_scalar.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_response_scalar_schema.json Property_list_name : stimulus_response_scalar Class_version : 1","title":"Class definition"},{"location":"documents/stimulus/stimulus_response_scalar/#stimulus_response_scalar-fields","text":"Accessed by stimulus_response_scalar.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : stimulus_response_scalar_parameters_id response_type response response .stimid response .response_real response .response_imaginary response .control_response_real response .control_response_imaginary","title":"stimulus_response_scalar fields"},{"location":"documents/stimulus/stimulus_response_scalar/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/stimulus/stimulus_response_scalar/#stimulus_response-fields","text":"Accessed by stimulus_response.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id depends_on : stimulator_id depends_on : stimulus_presentation_id depends_on : stimulus_control_id stimulator_epochid element_epochid","title":"stimulus_response fields"},{"location":"documents/stimulus/stimulus_response_scalar_parameters/","text":"stimulus_response_scalar_parameters (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_stimulus_stimulus_response_scalar_parameters Short name : stimulus_response_scalar_parameters Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/stimulus/stimulus_response_scalar_parameters.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_response_scalar_schema_parameters.json Property_list_name : stimulus_response_scalar_parameters Class_version : 1 stimulus_response_scalar_parameters fields \u00b6 Accessed by stimulus_response_scalar_parameters.field where field is one of the field names below field default_value data type description stimulus_response_scalar_parameters ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"stimulus_response_scalar_parameters"},{"location":"documents/stimulus/stimulus_response_scalar_parameters/#stimulus_response_scalar_parameters-ndidocument-class","text":"","title":"stimulus_response_scalar_parameters (ndi.document class)"},{"location":"documents/stimulus/stimulus_response_scalar_parameters/#class-definition","text":"Class name : ndi_document_stimulus_stimulus_response_scalar_parameters Short name : stimulus_response_scalar_parameters Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/stimulus/stimulus_response_scalar_parameters.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_response_scalar_schema_parameters.json Property_list_name : stimulus_response_scalar_parameters Class_version : 1","title":"Class definition"},{"location":"documents/stimulus/stimulus_response_scalar_parameters/#stimulus_response_scalar_parameters-fields","text":"Accessed by stimulus_response_scalar_parameters.field where field is one of the field names below field default_value data type description stimulus_response_scalar_parameters","title":"stimulus_response_scalar_parameters fields"},{"location":"documents/stimulus/stimulus_response_scalar_parameters/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/stimulus/stimulus_response_scalar_parameters_basic/","text":"stimulus_response_scalar_parameters_basic (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_stimulus_stimulus_response_scalar_parameters Short name : stimulus_response_scalar_parameters_basic Superclasses : ndi_document , stimulus_response_scalar_parameters Definition : $NDIDOCUMENTPATH/stimulus/stimulus_response_scalar_parameters_basic.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_response_scalar_schema_parameters_basic.json Property_list_name : stimulus_response_scalar_parameters_basic Class_version : 1 stimulus_response_scalar_parameters_basic fields \u00b6 Accessed by stimulus_response_scalar_parameters_basic.field where field is one of the field names below field default_value data type description temporalfreqfunc freq_response prestimulus_time prestimulus_normalization isspike spiketrain_dt ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database stimulus_response_scalar_parameters fields \u00b6 Accessed by stimulus_response_scalar_parameters.field where field is one of the field names below field default_value data type description stimulus_response_scalar_parameters","title":"stimulus_response_scalar_parameters_basic"},{"location":"documents/stimulus/stimulus_response_scalar_parameters_basic/#stimulus_response_scalar_parameters_basic-ndidocument-class","text":"","title":"stimulus_response_scalar_parameters_basic (ndi.document class)"},{"location":"documents/stimulus/stimulus_response_scalar_parameters_basic/#class-definition","text":"Class name : ndi_document_stimulus_stimulus_response_scalar_parameters Short name : stimulus_response_scalar_parameters_basic Superclasses : ndi_document , stimulus_response_scalar_parameters Definition : $NDIDOCUMENTPATH/stimulus/stimulus_response_scalar_parameters_basic.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_response_scalar_schema_parameters_basic.json Property_list_name : stimulus_response_scalar_parameters_basic Class_version : 1","title":"Class definition"},{"location":"documents/stimulus/stimulus_response_scalar_parameters_basic/#stimulus_response_scalar_parameters_basic-fields","text":"Accessed by stimulus_response_scalar_parameters_basic.field where field is one of the field names below field default_value data type description temporalfreqfunc freq_response prestimulus_time prestimulus_normalization isspike spiketrain_dt","title":"stimulus_response_scalar_parameters_basic fields"},{"location":"documents/stimulus/stimulus_response_scalar_parameters_basic/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/stimulus/stimulus_response_scalar_parameters_basic/#stimulus_response_scalar_parameters-fields","text":"Accessed by stimulus_response_scalar_parameters.field where field is one of the field names below field default_value data type description stimulus_response_scalar_parameters","title":"stimulus_response_scalar_parameters fields"},{"location":"documents/stimulus/stimulus_tuningcurve/","text":"stimulus_tuningcurve (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_stimulus_stimulus_tuningcurve Short name : stimulus_tuningcurve Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/stimulus/stimulus_tuningcurve.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_tuningcurve_schema.json Property_list_name : tuning_curve Class_version : 1 stimulus_tuningcurve fields \u00b6 Accessed by tuning_curve.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id depends_on : stimulus_response_scalar_id tuning_curve tuning_curve .independent_variable_label tuning_curve .independent_variable_value tuning_curve .stimid tuning_curve .response_mean tuning_curve .response_stddev tuning_curve .response_mean_1 tuning_curve .response_stderr tuning_curve .individual_responses_real tuning_curve .individual_responses_imaginary tuning_curve .stimulus_presentation_number tuning_curve .stimulus_presentation_number_1 tuning_curve .control_response_mean tuning_curve .control_response_stddev tuning_curve .control_response_stderr tuning_curve .control_individual_responses_real tuning_curve .control_individual_responses_imaginary tuning_curve .response_units ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"stimulus_tuningcurve"},{"location":"documents/stimulus/stimulus_tuningcurve/#stimulus_tuningcurve-ndidocument-class","text":"","title":"stimulus_tuningcurve (ndi.document class)"},{"location":"documents/stimulus/stimulus_tuningcurve/#class-definition","text":"Class name : ndi_document_stimulus_stimulus_tuningcurve Short name : stimulus_tuningcurve Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/stimulus/stimulus_tuningcurve.json Schema for validation : $NDISCHEMAPATH/stimulus/stimulus_tuningcurve_schema.json Property_list_name : tuning_curve Class_version : 1","title":"Class definition"},{"location":"documents/stimulus/stimulus_tuningcurve/#stimulus_tuningcurve-fields","text":"Accessed by tuning_curve.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id depends_on : stimulus_response_scalar_id tuning_curve tuning_curve .independent_variable_label tuning_curve .independent_variable_value tuning_curve .stimid tuning_curve .response_mean tuning_curve .response_stddev tuning_curve .response_mean_1 tuning_curve .response_stderr tuning_curve .individual_responses_real tuning_curve .individual_responses_imaginary tuning_curve .stimulus_presentation_number tuning_curve .stimulus_presentation_number_1 tuning_curve .control_response_mean tuning_curve .control_response_stddev tuning_curve .control_response_stderr tuning_curve .control_individual_responses_real tuning_curve .control_individual_responses_imaginary tuning_curve .response_units","title":"stimulus_tuningcurve fields"},{"location":"documents/stimulus/stimulus_tuningcurve/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"documents/stimulus/vision/oridir/orientation_direction_tuning/","text":"orientation_direction_tuning (ndi.document class) \u00b6 Class definition \u00b6 Class name : ndi_document_stimulus_vision_orientation_direction_tuning Short name : orientation_direction_tuning Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/stimulus/vision/oridir/orientation_direction_tuning.json Schema for validation : $NDISCHEMAPATH/stimulus/vision/oridir/orientation_direction_tuning_schema.json Property_list_name : orientation_direction_tuning Class_version : 1 orientation_direction_tuning fields \u00b6 Accessed by orientation_direction_tuning.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id - NDI document ID of an ndi_document_element object The element from which the responses are derived depends_on : stimulus_tuningcurve_id - NDI document ID of an ndi_document_stimulus_stimulus_tuningcurve object The tuning curve from which the responses are derived properties properties .coordinates properties .response_units properties .response_type tuning_curve tuning_curve .direction tuning_curve .mean tuning_curve .stddev tuning_curve .stderr tuning_curve .individual tuning_curve .raw_individual tuning_curve .control_individual significance - structure Structure with information about the significance of response variation across stimuli significance .visual_response_anova_p - float P-value of ANOVA test across all stimuli and control stimuli; indicates if there is any evidence of a significant visual response significance .across_stimuli_anova_p - float P-value of ANOVA test across all stimuli but excluding the blank; indicates if there is any evidence of a significant response variation across the stimuli vector - structure Structure with information about vector analyses of orientation / direction data vector .circular_variance - float Circular variance: see pubmed 12097515 vector .direction_circular_variance - float Circular variance in direction space: see pubmed 25147504 vector .hotelling2test - float P-value of Hotelling T2 test of whether the cloud of points determined by the trial-by-trial orientation vectors differs significantly from the point 0,0 (a test of significant orientation selectivity): see pubmed 25147504 vector .orientation_preference - float The angle (in orientation space, [0,180)) of the mean response vector; this is a vector-based definition of orientation preference; see pubmed 25147504 vector .direction_preference - float The angle (in direction space, [0,360)) of the mean response vector; this is a vector-based definition of direction preference (which can be noisy); see pubmed 25147504 vector .direction_hotelling2test - float P-value of Hotelling T2 test of whether the cloud of points determined by the trial-by-trial orientation vectors differs significantly from the point 0,0 (a test of significant orientation selectivity): see pubmed 25147504 vector .dot_direction_significance - float P-value of test of whether trial-by-trial vectors have a statistically signifant tendency to point in one of the two opposite directions defined by the preferred orientation; defined in pubmed 25147504 fit - structure Structure with information about double gaussian fit analyses of orientation / direction data fit .double_gaussian_parameters - 1x5 float Fit parameters of double gaussian fit: [offset Rp Op sigm Rn]; the fit function is R(theta) = offset + Rp exp(-(angdiff(theta-OpP).^2))+Rn exp(-(angdiff(theta-Op+180).^2)). See pubmed 10627623 and pubmed 25147504 fit .double_gaussian_fit_angles - 1x360 float Angle values for plotting the double gaussian direction fit fit .double_gaussian_fit_values - 1x360 float Fit response values for plotting the double gaussian direction fit fit .orientation_preferred_orthogonal_ratio - float The preferred to orthogonal ratio fit .direction_preferred_null_ratio - float The preferred to opposite ratio fit .orientation_preferred_orthogonal_ratio_rectified - float The preferred to orthogonal ratio, where each response is rectified to be not less than 0 fit .direction_preferred_null_ratio_rectified - float The preferred to null ratio, where each response is rectified to be not less than 0 fit .orientation_angle_preference - float The preferred orientation as determined by the double gaussian fit, in [0,180) fit .direction_angle_preference - float The preferred direction as determined by the double gaussian fit, in [0,360) fit .hwhh - float The half width at half height from the double gaussian fit, calculated as ln(4) * sigm, see [pubmed 10627623](https://pubmed.ncbi.nlm.nih.gov/10627623/ ndi_document fields \u00b6 Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"orientation_direction_tuning"},{"location":"documents/stimulus/vision/oridir/orientation_direction_tuning/#orientation_direction_tuning-ndidocument-class","text":"","title":"orientation_direction_tuning (ndi.document class)"},{"location":"documents/stimulus/vision/oridir/orientation_direction_tuning/#class-definition","text":"Class name : ndi_document_stimulus_vision_orientation_direction_tuning Short name : orientation_direction_tuning Superclasses : ndi_document Definition : $NDIDOCUMENTPATH/stimulus/vision/oridir/orientation_direction_tuning.json Schema for validation : $NDISCHEMAPATH/stimulus/vision/oridir/orientation_direction_tuning_schema.json Property_list_name : orientation_direction_tuning Class_version : 1","title":"Class definition"},{"location":"documents/stimulus/vision/oridir/orientation_direction_tuning/#orientation_direction_tuning-fields","text":"Accessed by orientation_direction_tuning.field where field is one of the field names below field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use ndi.document methods dependency , dependency_value , add_dependency_value_n , dependency_value_n , remove_dependency_value_n , and set_dependency_value to read and edit depends_on fields of an ndi.document . depends_on : element_id - NDI document ID of an ndi_document_element object The element from which the responses are derived depends_on : stimulus_tuningcurve_id - NDI document ID of an ndi_document_stimulus_stimulus_tuningcurve object The tuning curve from which the responses are derived properties properties .coordinates properties .response_units properties .response_type tuning_curve tuning_curve .direction tuning_curve .mean tuning_curve .stddev tuning_curve .stderr tuning_curve .individual tuning_curve .raw_individual tuning_curve .control_individual significance - structure Structure with information about the significance of response variation across stimuli significance .visual_response_anova_p - float P-value of ANOVA test across all stimuli and control stimuli; indicates if there is any evidence of a significant visual response significance .across_stimuli_anova_p - float P-value of ANOVA test across all stimuli but excluding the blank; indicates if there is any evidence of a significant response variation across the stimuli vector - structure Structure with information about vector analyses of orientation / direction data vector .circular_variance - float Circular variance: see pubmed 12097515 vector .direction_circular_variance - float Circular variance in direction space: see pubmed 25147504 vector .hotelling2test - float P-value of Hotelling T2 test of whether the cloud of points determined by the trial-by-trial orientation vectors differs significantly from the point 0,0 (a test of significant orientation selectivity): see pubmed 25147504 vector .orientation_preference - float The angle (in orientation space, [0,180)) of the mean response vector; this is a vector-based definition of orientation preference; see pubmed 25147504 vector .direction_preference - float The angle (in direction space, [0,360)) of the mean response vector; this is a vector-based definition of direction preference (which can be noisy); see pubmed 25147504 vector .direction_hotelling2test - float P-value of Hotelling T2 test of whether the cloud of points determined by the trial-by-trial orientation vectors differs significantly from the point 0,0 (a test of significant orientation selectivity): see pubmed 25147504 vector .dot_direction_significance - float P-value of test of whether trial-by-trial vectors have a statistically signifant tendency to point in one of the two opposite directions defined by the preferred orientation; defined in pubmed 25147504 fit - structure Structure with information about double gaussian fit analyses of orientation / direction data fit .double_gaussian_parameters - 1x5 float Fit parameters of double gaussian fit: [offset Rp Op sigm Rn]; the fit function is R(theta) = offset + Rp exp(-(angdiff(theta-OpP).^2))+Rn exp(-(angdiff(theta-Op+180).^2)). See pubmed 10627623 and pubmed 25147504 fit .double_gaussian_fit_angles - 1x360 float Angle values for plotting the double gaussian direction fit fit .double_gaussian_fit_values - 1x360 float Fit response values for plotting the double gaussian direction fit fit .orientation_preferred_orthogonal_ratio - float The preferred to orthogonal ratio fit .direction_preferred_null_ratio - float The preferred to opposite ratio fit .orientation_preferred_orthogonal_ratio_rectified - float The preferred to orthogonal ratio, where each response is rectified to be not less than 0 fit .direction_preferred_null_ratio_rectified - float The preferred to null ratio, where each response is rectified to be not less than 0 fit .orientation_angle_preference - float The preferred orientation as determined by the double gaussian fit, in [0,180) fit .direction_angle_preference - float The preferred direction as determined by the double gaussian fit, in [0,360) fit .hwhh - float The half width at half height from the double gaussian fit, calculated as ln(4) * sigm, see [pubmed 10627623](https://pubmed.ncbi.nlm.nih.gov/10627623/","title":"orientation_direction_tuning fields"},{"location":"documents/stimulus/vision/oridir/orientation_direction_tuning/#ndi_document-fields","text":"Accessed by ndi_document.field where field is one of the field names below field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database","title":"ndi_document fields"},{"location":"reference/ndi_Init.m/","text":"ndi_Init \u00b6 NDI_INIT Initializes the file path and global variables for class NDI","title":"ndi_Init"},{"location":"reference/ndi_Init.m/#ndi_init","text":"NDI_INIT Initializes the file path and global variables for class NDI","title":"ndi_Init"},{"location":"reference/ndi_install.m/","text":"ndi_install \u00b6 NDI_INSTALL - install the NDI distribution and its ancillary directories B = NDI_INSTALL Installs the GitHub distributions necessary to run NDI - matlab . These are installed at [ USERPATH filesep 'tools' ] ( for example , / Users / steve / Documents / MATLAB / tools / ) The startup file is edited to add a startup procedure in VHTOOLS . One can also dictate a different install directory by passing a full pathname : B = NDI_INSTALL ( PATHNAME ) PATHNAME should not include any shell script shortcuts ( like '~' ) . Finally , one can also install either the minimal set of tools needed for NDI ( DEPENDENCIES = 1 ), or one can install the standard VHTOOLS suite ( DEPENDENCIES = 2 ): B = NDI_INSTALL ( PATHNAME , DEPENDENCIES ) If PATHNAME is blank , then the default pathway of [ USERPATH filesep 'tools' ] is used .","title":"ndi_install"},{"location":"reference/ndi_install.m/#ndi_install","text":"NDI_INSTALL - install the NDI distribution and its ancillary directories B = NDI_INSTALL Installs the GitHub distributions necessary to run NDI - matlab . These are installed at [ USERPATH filesep 'tools' ] ( for example , / Users / steve / Documents / MATLAB / tools / ) The startup file is edited to add a startup procedure in VHTOOLS . One can also dictate a different install directory by passing a full pathname : B = NDI_INSTALL ( PATHNAME ) PATHNAME should not include any shell script shortcuts ( like '~' ) . Finally , one can also install either the minimal set of tools needed for NDI ( DEPENDENCIES = 1 ), or one can install the standard VHTOOLS suite ( DEPENDENCIES = 2 ): B = NDI_INSTALL ( PATHNAME , DEPENDENCIES ) If PATHNAME is blank , then the default pathway of [ USERPATH filesep 'tools' ] is used .","title":"ndi_install"},{"location":"reference/%2Bndi/app.m/","text":"CLASS ndi.app \u00b6 ndi.app - create a new ndi.app object NDI_APP_OBJ = ndi.app (SESSION) Creates a new ndi.app object that operates on the ndi.session object called SESSION. Superclasses \u00b6 ndi.documentservice Properties \u00b6 Property Description session the ndi.session object that the app will operate on name the name of the app Methods \u00b6 Method Description app create a new ndi.app object newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app varappname return the name of the application for use in variable creation version_url return the app version and url Methods help \u00b6 app - create a new ndi.app object NDI_APP_OBJ = ndi.app (SESSION) Creates a new ndi.app object that operates on the ndi.session object called SESSION. newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'ndi_document_app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY ( NDI_APP_OBJ ) Returns a cell array of strings that allow the creation or searching of an ndi . database document for this app with field ' app ' that has subfield ' name ' equal to the app ' s VARAPPNAME. varappname - return the name of the application for use in variable creation AN = VARAPPNAME ( NDI_APP_OBJ ) Returns the name of the app modified for use as a variable name , either as a Matlab variable or a name in a document . version_url - return the app version and url [ V , URL ] = VERSION_URL ( NDI_APP_OBJ ) Return the version and url for the current app . In the base class , it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory . Developers should override this method in their own class if they use a different version control system .","title":"ndi.app"},{"location":"reference/%2Bndi/app.m/#class-ndiapp","text":"ndi.app - create a new ndi.app object NDI_APP_OBJ = ndi.app (SESSION) Creates a new ndi.app object that operates on the ndi.session object called SESSION.","title":"CLASS ndi.app"},{"location":"reference/%2Bndi/app.m/#superclasses","text":"ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/app.m/#properties","text":"Property Description session the ndi.session object that the app will operate on name the name of the app","title":"Properties"},{"location":"reference/%2Bndi/app.m/#methods","text":"Method Description app create a new ndi.app object newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app varappname return the name of the application for use in variable creation version_url return the app version and url","title":"Methods"},{"location":"reference/%2Bndi/app.m/#methods-help","text":"app - create a new ndi.app object NDI_APP_OBJ = ndi.app (SESSION) Creates a new ndi.app object that operates on the ndi.session object called SESSION. newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ) Creates a blank ndi.document object of type 'ndi_document_app'. The 'app.name' field is filled out with the name of NDI_APP_OBJ.VARAPPNAME(). searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY ( NDI_APP_OBJ ) Returns a cell array of strings that allow the creation or searching of an ndi . database document for this app with field ' app ' that has subfield ' name ' equal to the app ' s VARAPPNAME. varappname - return the name of the application for use in variable creation AN = VARAPPNAME ( NDI_APP_OBJ ) Returns the name of the app modified for use as a variable name , either as a Matlab variable or a name in a document . version_url - return the app version and url [ V , URL ] = VERSION_URL ( NDI_APP_OBJ ) Return the version and url for the current app . In the base class , it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory . Developers should override this method in their own class if they use a different version control system .","title":"Methods help"},{"location":"reference/%2Bndi/cache.m/","text":"CLASS ndi.cache \u00b6 NDI . CACHE - Cache class for NDI Superclasses \u00b6 handle Properties \u00b6 Property Description maxMemory The maximum memory, in bytes, that can be consumed by an NDI_CACHE before it is emptied replacement_rule The rule to be used to replace entries when memory is exceeded ('FIFO','LIFO','error', etc) table The variable that has the data and metadata for the cache Methods \u00b6 Method Description add add data to an NDI.CACHE addlistener ADDLISTENER Add listener for event. bytes memory size of an NDI.CACHE object in bytes cache create a new NDI cache handle clear clear data from an NDI.CACHE delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. freebytes remove the lowest priority entries from the cache to free a certain amount of memory ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lookup retrieve the NDI.CACHE data table corresponding to KEY and TYPE lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. remove remove data from an NDI.CACHE set_replacement_rule set the replacement rule for an NDI_CACHE object Methods help \u00b6 add - add data to an NDI.CACHE NDI_CACHE_OBJ = ADD ( NDI_CACHE_OBJ , KEY , TYPE , DATA , [ PRIORITY ] ) Adds DATA to the NDI_CACHE_OBJ that is referenced by a KEY and TYPE . If desired , a PRIORITY can be added ; items with greatest PRIORITY will be deleted last . addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , NDI . CACHE , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . cache / addlistener is inherited from superclass HANDLE Documentation for ndi . cache / addlistener doc handle . addlistener bytes - memory size of an NDI.CACHE object in bytes B = BYTES ( NDI_CACHE_OBJ ) Return the current memory that is occupied by the table of NDI_CACHE_OBJ . cache - create a new NDI cache handle NDI_CACHE_OBJ = NDI . CACHE ( ... ) Creates a new NDI . CACHE object . Additional arguments can be specified as name value pairs : Parameter ( default ) | Description ------------------------------------------------------------ maxMemory ( 100 e6 ) | Max memory for cache , in bytes ( 100 MB default ) replacement_rule ( ' fifo ' ) | Replacement rule ( see NDI_CACHE / SET_REPLACEMENT_RULE Note that the cache is not ' secure ' , any function can query the data added . See also : vlt . data . namevaluepair clear - clear data from an NDI.CACHE NDI_CACHE_OBJ = CLEAR(NDI_CACHE_OBJ) Clears all entries from the NDI.CACHE object NDI_CACHE_OBJ. delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also NDI . CACHE , NDI . CACHE / ISVALID , CLEAR Help for ndi . cache / delete is inherited from superclass HANDLE Documentation for ndi . cache / delete doc handle . delete eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . CACHE , NDI . CACHE / GE , NDI . CACHE / GT , NDI . CACHE / LE , NDI . CACHE / LT , NDI . CACHE / NE Help for ndi . cache / eq is inherited from superclass HANDLE Documentation for ndi . cache / eq doc handle . eq findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , NDI . CACHE Help for ndi . cache / findobj is inherited from superclass HANDLE Documentation for ndi . cache / findobj doc handle . findobj findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also NDI . CACHE , NDI . CACHE / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for ndi . cache / findprop is inherited from superclass HANDLE Documentation for ndi . cache / findprop doc handle . findprop freebytes - remove the lowest priority entries from the cache to free a certain amount of memory NDI_CACHE_OBJ = FREEBYTES ( NDI_CACHE_OBJ , FREEBYTES ) Remove entries to free at least FREEBYTES memory . Entries will be removed , first by PRIORITY and then by the replacement_rule parameter . See also : NDI . CACHE / ADD , NDI . CACHE / SET_REPLACEMENT_RULE ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . CACHE , NDI . CACHE / EQ , NDI . CACHE / GT , NDI . CACHE / LE , NDI . CACHE / LT , NDI . CACHE / NE Help for ndi . cache / ge is inherited from superclass HANDLE Documentation for ndi . cache / ge doc handle . ge gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . CACHE , NDI . CACHE / EQ , NDI . CACHE / GE , NDI . CACHE / LE , NDI . CACHE / LT , NDI . CACHE / NE Help for ndi . cache / gt is inherited from superclass HANDLE Documentation for ndi . cache / gt doc handle . gt isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDI . CACHE , NDI . CACHE / DELETE Help for ndi . cache / isvalid is inherited from superclass HANDLE Documentation for ndi . cache / isvalid doc handle . isvalid le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . CACHE , NDI . CACHE / EQ , NDI . CACHE / GE , NDI . CACHE / GT , NDI . CACHE / LT , NDI . CACHE / NE Help for ndi . cache / le is inherited from superclass HANDLE Documentation for ndi . cache / le doc handle . le listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , NDI . CACHE , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . cache / listener is inherited from superclass HANDLE Documentation for ndi . cache / listener doc handle . listener lookup - retrieve the NDI.CACHE data table corresponding to KEY and TYPE TABLEENTRY = LOOKUP(NDI_CACHE_OBJ, KEY, TYPE) Performs a case-sensitive lookup of the NDI_CACHE entry whose key and type match KEY and TYPE. The table entry is returned. The table has fields: Fieldname | Description ----------------------------------------------------- key | The key string type | The type string timestamp | The Matlab date stamp (serial date number, see NOW) when data was stored priority | The priority of maintaining the data (higher is better) bytes | The size of the data in this entry (bytes) data | The data stored lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . CACHE , NDI . CACHE / EQ , NDI . CACHE / GE , NDI . CACHE / GT , NDI . CACHE / LE , NDI . CACHE / NE Help for ndi . cache / lt is inherited from superclass HANDLE Documentation for ndi . cache / lt doc handle . lt ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . CACHE , NDI . CACHE / EQ , NDI . CACHE / GE , NDI . CACHE / GT , NDI . CACHE / LE , NDI . CACHE / LT Help for ndi . cache / ne is inherited from superclass HANDLE Documentation for ndi . cache / ne doc handle . ne notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDI . CACHE , NDI . CACHE / ADDLISTENER , NDI . CACHE / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndi . cache / notify is inherited from superclass HANDLE Documentation for ndi . cache / notify doc handle . notify remove - remove data from an NDI.CACHE NDI_CACHE_OBJ = REMOVE ( NDI_CACHE_OBJ , KEY , TYPE , ... ) or NDI_CACHE_OBJ = REMOVE ( NDI_CACHE_OBJ , INDEX , [], ... ) Removes the data at table index INDEX or data with KEY and TYPE . INDEX can be a single entry or an array of entries . If the data entry to be removed is a handle , the handle will be deleted from memory unless the setting is altered with a NAME / VALUE pair . This function can be modified by name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------- leavehandle ( 0 ) | If the ' data ' field of a cache entry is a handle , | leave it in memory . See also : vlt . data . namevaluepair set_replacement_rule - set the replacement rule for an NDI_CACHE object NDI_CACHE_OBJ = SET_REPLACEMENT_RULE ( NDI_CACHE_OBJ , RULE ) Sets the replacement rule for an NDI . CACHE to be used when a new entry would exceed the allowed memory . The rule may be one of the following strings ( case is insensitive and will be stored lower case ) : Rule | Description --------------------------------------------------------- ' fifo ' | First in , first out ; discard oldest entries first. ' lifo ' | Last in , first out ; discard newest entries first. ' error ' | Don ' t discard anything, just produce an error saying cache is full","title":"ndi.cache"},{"location":"reference/%2Bndi/cache.m/#class-ndicache","text":"NDI . CACHE - Cache class for NDI","title":"CLASS ndi.cache"},{"location":"reference/%2Bndi/cache.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"reference/%2Bndi/cache.m/#properties","text":"Property Description maxMemory The maximum memory, in bytes, that can be consumed by an NDI_CACHE before it is emptied replacement_rule The rule to be used to replace entries when memory is exceeded ('FIFO','LIFO','error', etc) table The variable that has the data and metadata for the cache","title":"Properties"},{"location":"reference/%2Bndi/cache.m/#methods","text":"Method Description add add data to an NDI.CACHE addlistener ADDLISTENER Add listener for event. bytes memory size of an NDI.CACHE object in bytes cache create a new NDI cache handle clear clear data from an NDI.CACHE delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. freebytes remove the lowest priority entries from the cache to free a certain amount of memory ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lookup retrieve the NDI.CACHE data table corresponding to KEY and TYPE lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. remove remove data from an NDI.CACHE set_replacement_rule set the replacement rule for an NDI_CACHE object","title":"Methods"},{"location":"reference/%2Bndi/cache.m/#methods-help","text":"add - add data to an NDI.CACHE NDI_CACHE_OBJ = ADD ( NDI_CACHE_OBJ , KEY , TYPE , DATA , [ PRIORITY ] ) Adds DATA to the NDI_CACHE_OBJ that is referenced by a KEY and TYPE . If desired , a PRIORITY can be added ; items with greatest PRIORITY will be deleted last . addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , NDI . CACHE , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . cache / addlistener is inherited from superclass HANDLE Documentation for ndi . cache / addlistener doc handle . addlistener bytes - memory size of an NDI.CACHE object in bytes B = BYTES ( NDI_CACHE_OBJ ) Return the current memory that is occupied by the table of NDI_CACHE_OBJ . cache - create a new NDI cache handle NDI_CACHE_OBJ = NDI . CACHE ( ... ) Creates a new NDI . CACHE object . Additional arguments can be specified as name value pairs : Parameter ( default ) | Description ------------------------------------------------------------ maxMemory ( 100 e6 ) | Max memory for cache , in bytes ( 100 MB default ) replacement_rule ( ' fifo ' ) | Replacement rule ( see NDI_CACHE / SET_REPLACEMENT_RULE Note that the cache is not ' secure ' , any function can query the data added . See also : vlt . data . namevaluepair clear - clear data from an NDI.CACHE NDI_CACHE_OBJ = CLEAR(NDI_CACHE_OBJ) Clears all entries from the NDI.CACHE object NDI_CACHE_OBJ. delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also NDI . CACHE , NDI . CACHE / ISVALID , CLEAR Help for ndi . cache / delete is inherited from superclass HANDLE Documentation for ndi . cache / delete doc handle . delete eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . CACHE , NDI . CACHE / GE , NDI . CACHE / GT , NDI . CACHE / LE , NDI . CACHE / LT , NDI . CACHE / NE Help for ndi . cache / eq is inherited from superclass HANDLE Documentation for ndi . cache / eq doc handle . eq findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , NDI . CACHE Help for ndi . cache / findobj is inherited from superclass HANDLE Documentation for ndi . cache / findobj doc handle . findobj findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also NDI . CACHE , NDI . CACHE / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for ndi . cache / findprop is inherited from superclass HANDLE Documentation for ndi . cache / findprop doc handle . findprop freebytes - remove the lowest priority entries from the cache to free a certain amount of memory NDI_CACHE_OBJ = FREEBYTES ( NDI_CACHE_OBJ , FREEBYTES ) Remove entries to free at least FREEBYTES memory . Entries will be removed , first by PRIORITY and then by the replacement_rule parameter . See also : NDI . CACHE / ADD , NDI . CACHE / SET_REPLACEMENT_RULE ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . CACHE , NDI . CACHE / EQ , NDI . CACHE / GT , NDI . CACHE / LE , NDI . CACHE / LT , NDI . CACHE / NE Help for ndi . cache / ge is inherited from superclass HANDLE Documentation for ndi . cache / ge doc handle . ge gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . CACHE , NDI . CACHE / EQ , NDI . CACHE / GE , NDI . CACHE / LE , NDI . CACHE / LT , NDI . CACHE / NE Help for ndi . cache / gt is inherited from superclass HANDLE Documentation for ndi . cache / gt doc handle . gt isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDI . CACHE , NDI . CACHE / DELETE Help for ndi . cache / isvalid is inherited from superclass HANDLE Documentation for ndi . cache / isvalid doc handle . isvalid le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . CACHE , NDI . CACHE / EQ , NDI . CACHE / GE , NDI . CACHE / GT , NDI . CACHE / LT , NDI . CACHE / NE Help for ndi . cache / le is inherited from superclass HANDLE Documentation for ndi . cache / le doc handle . le listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , NDI . CACHE , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . cache / listener is inherited from superclass HANDLE Documentation for ndi . cache / listener doc handle . listener lookup - retrieve the NDI.CACHE data table corresponding to KEY and TYPE TABLEENTRY = LOOKUP(NDI_CACHE_OBJ, KEY, TYPE) Performs a case-sensitive lookup of the NDI_CACHE entry whose key and type match KEY and TYPE. The table entry is returned. The table has fields: Fieldname | Description ----------------------------------------------------- key | The key string type | The type string timestamp | The Matlab date stamp (serial date number, see NOW) when data was stored priority | The priority of maintaining the data (higher is better) bytes | The size of the data in this entry (bytes) data | The data stored lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . CACHE , NDI . CACHE / EQ , NDI . CACHE / GE , NDI . CACHE / GT , NDI . CACHE / LE , NDI . CACHE / NE Help for ndi . cache / lt is inherited from superclass HANDLE Documentation for ndi . cache / lt doc handle . lt ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . CACHE , NDI . CACHE / EQ , NDI . CACHE / GE , NDI . CACHE / GT , NDI . CACHE / LE , NDI . CACHE / LT Help for ndi . cache / ne is inherited from superclass HANDLE Documentation for ndi . cache / ne doc handle . ne notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDI . CACHE , NDI . CACHE / ADDLISTENER , NDI . CACHE / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndi . cache / notify is inherited from superclass HANDLE Documentation for ndi . cache / notify doc handle . notify remove - remove data from an NDI.CACHE NDI_CACHE_OBJ = REMOVE ( NDI_CACHE_OBJ , KEY , TYPE , ... ) or NDI_CACHE_OBJ = REMOVE ( NDI_CACHE_OBJ , INDEX , [], ... ) Removes the data at table index INDEX or data with KEY and TYPE . INDEX can be a single entry or an array of entries . If the data entry to be removed is a handle , the handle will be deleted from memory unless the setting is altered with a NAME / VALUE pair . This function can be modified by name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------- leavehandle ( 0 ) | If the ' data ' field of a cache entry is a handle , | leave it in memory . See also : vlt . data . namevaluepair set_replacement_rule - set the replacement rule for an NDI_CACHE object NDI_CACHE_OBJ = SET_REPLACEMENT_RULE ( NDI_CACHE_OBJ , RULE ) Sets the replacement rule for an NDI . CACHE to be used when a new entry would exceed the allowed memory . The rule may be one of the following strings ( case is insensitive and will be stored lower case ) : Rule | Description --------------------------------------------------------- ' fifo ' | First in , first out ; discard oldest entries first. ' lifo ' | Last in , first out ; discard newest entries first. ' error ' | Don ' t discard anything, just produce an error saying cache is full","title":"Methods help"},{"location":"reference/%2Bndi/database.m/","text":"CLASS ndi.database \u00b6 A ( primarily abstract ) database class for NDI that stores and manages virtual documents ( NoSQL database ) Superclasses \u00b6 none Properties \u00b6 Property Description path The file system or remote path to the database session_unique_reference The reference string for the database Methods \u00b6 Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc database create a new ndi.database newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database Methods help \u00b6 add - add an ndi.document to the database at a given path NDI_DATABASE_OBJ = ADD ( NDI_DATABASE_OBJ , NDI_DOCUMENT_OBJ , DBPATH , ... ) Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ . This function also accepts name / value pairs that modify its behavior : Parameter ( default ) | Description ------------------------------------------------------------------------- ' Update ' ( 1 ) | If document exists , update it . If 0 , an error is | generated if a document with the same ID exists See also : vlt . data . namevaluepair alldocids - return all document unique reference numbers for the database DOCIDS = ALLDOCIDS ( NDI_DATABASE_OBJ ) Return all document unique reference strings as a cell array of strings . If there are no documents , empty is returned . clear - remove/delete all records from an ndi.database CLEAR ( NDI_DATABASE_OBJ , [ AREYOUSURE ] ) Removes all documents from the vlt . file . dumbjsondb object . Use with care . If AREYOUSURE is 'yes' then the function will proceed . Otherwise , it will not . See also : ndi . database / REMOVE closebinarydoc - close and unlock an ndi.database.binarydoc [ NDI_BINARYDOC_OBJ ] = CLOSEBINARYDOC ( NDI_DATABASE_OBJ , NDI_BINARYDOC_OBJ ) Close and lock an NDI_BINARYDOC_OBJ . The NDI_BINARYDOC_OBJ must be unlocked in the database , which is why it is necessary to call this function through the database . database - create a new ndi.database NDI_DATABASE_OBJ = ndi.database(PATH, REFERENCE) Creates a new ndi.database object with data path PATH and reference REFERENCE. newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DATABASE_OBJ [, DOCUMENT_TYPE]) Creates a new/blank ndi.document document object that can be used with this ndi.database. openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id [ NDI_BINARYDOC_OBJ, VERSION ] = OPENBINARYDOC ( NDI_DATABASE_OBJ , NDI_DOCUMENT_OR_ID , [ VERSION ] ) Return the open ndi . database . binarydoc object and VERSION that corresponds to an ndi . document and the requested version ( the latest version is used if the argument is omitted ). NDI_DOCUMENT_OR_ID can be either the document id of an ndi . document or an ndi . document object itsef . Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi . database / CLOSEBINARYDOC . The locked nature of the binary doc is a property of the database , not the document , which is why the database is needed . read - read an ndi.document from an ndi.database at a given db path NDI_DOCUMENT_OBJ = READ ( NDI_DATABASE_OBJ , NDI_DOCUMENT_ID , [ VERSION ] ) Read the ndi . document object with the document ID specified by NDI_DOCUMENT_ID . If VERSION is provided ( an integer ) then only the version that is equal to VERSION is returned . Otherwise , the latest version is returned . If there is no ndi . document object with that ID , then empty is returned ( [] ). remove - remove a document from an ndi.database NDI_DATABASE_OBJ = REMOVE ( NDI_DATABASE_OBJ , NDI_DOCUMENT_ID ) or NDI_DATABASE_OBJ = REMOVE ( NDI_DATABASE_OBJ , NDI_DOCUMENT_ID , VERSIONS ) or NDI_DATABASE_OBJ = REMOVE ( NDI_DATABASE_OBJ , NDI_DOCUMENT ) Removes the ndi . document object with the ' document unique reference ' equal to NDI_DOCUMENT_OBJ_ID . If VERSIONS is specified , then only the versions that match the entries in VERSIONS are removed . If an ndi . document is passed , then the NDI_DOCUMENT_ID is extracted using ndi . document / DOC_UNIQUE_ID . If a cell array of ndi . document is passed instead , then all of the documents are removed . search - search for an ndi.document from an ndi.database [ DOCUMENT_OBJS , VERSIONS ] = SEARCH ( NDI_DATABASE_OBJ , {' PARAM1 ', VALUE1 , ' PARAM2 ', VALUE2 , ... }) Searches metadata parameters PARAM1 , PARAM2 , etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ . If VALUEN is a string , then a regular expression is evaluated to determine the match . If VALUEN is not a string , then the items must match exactly . If PARAMN1 begins with a dash , then VALUEN indicates the value of one of these special parameters: This function returns a cell array of ndi . document objects . If no documents match the query , then an empty cell array ({}) is returned . An array VERSIONS contains the document version of of each ndi . document .","title":"ndi.database"},{"location":"reference/%2Bndi/database.m/#class-ndidatabase","text":"A ( primarily abstract ) database class for NDI that stores and manages virtual documents ( NoSQL database )","title":"CLASS ndi.database"},{"location":"reference/%2Bndi/database.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndi/database.m/#properties","text":"Property Description path The file system or remote path to the database session_unique_reference The reference string for the database","title":"Properties"},{"location":"reference/%2Bndi/database.m/#methods","text":"Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc database create a new ndi.database newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database","title":"Methods"},{"location":"reference/%2Bndi/database.m/#methods-help","text":"add - add an ndi.document to the database at a given path NDI_DATABASE_OBJ = ADD ( NDI_DATABASE_OBJ , NDI_DOCUMENT_OBJ , DBPATH , ... ) Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ . This function also accepts name / value pairs that modify its behavior : Parameter ( default ) | Description ------------------------------------------------------------------------- ' Update ' ( 1 ) | If document exists , update it . If 0 , an error is | generated if a document with the same ID exists See also : vlt . data . namevaluepair alldocids - return all document unique reference numbers for the database DOCIDS = ALLDOCIDS ( NDI_DATABASE_OBJ ) Return all document unique reference strings as a cell array of strings . If there are no documents , empty is returned . clear - remove/delete all records from an ndi.database CLEAR ( NDI_DATABASE_OBJ , [ AREYOUSURE ] ) Removes all documents from the vlt . file . dumbjsondb object . Use with care . If AREYOUSURE is 'yes' then the function will proceed . Otherwise , it will not . See also : ndi . database / REMOVE closebinarydoc - close and unlock an ndi.database.binarydoc [ NDI_BINARYDOC_OBJ ] = CLOSEBINARYDOC ( NDI_DATABASE_OBJ , NDI_BINARYDOC_OBJ ) Close and lock an NDI_BINARYDOC_OBJ . The NDI_BINARYDOC_OBJ must be unlocked in the database , which is why it is necessary to call this function through the database . database - create a new ndi.database NDI_DATABASE_OBJ = ndi.database(PATH, REFERENCE) Creates a new ndi.database object with data path PATH and reference REFERENCE. newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DATABASE_OBJ [, DOCUMENT_TYPE]) Creates a new/blank ndi.document document object that can be used with this ndi.database. openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id [ NDI_BINARYDOC_OBJ, VERSION ] = OPENBINARYDOC ( NDI_DATABASE_OBJ , NDI_DOCUMENT_OR_ID , [ VERSION ] ) Return the open ndi . database . binarydoc object and VERSION that corresponds to an ndi . document and the requested version ( the latest version is used if the argument is omitted ). NDI_DOCUMENT_OR_ID can be either the document id of an ndi . document or an ndi . document object itsef . Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi . database / CLOSEBINARYDOC . The locked nature of the binary doc is a property of the database , not the document , which is why the database is needed . read - read an ndi.document from an ndi.database at a given db path NDI_DOCUMENT_OBJ = READ ( NDI_DATABASE_OBJ , NDI_DOCUMENT_ID , [ VERSION ] ) Read the ndi . document object with the document ID specified by NDI_DOCUMENT_ID . If VERSION is provided ( an integer ) then only the version that is equal to VERSION is returned . Otherwise , the latest version is returned . If there is no ndi . document object with that ID , then empty is returned ( [] ). remove - remove a document from an ndi.database NDI_DATABASE_OBJ = REMOVE ( NDI_DATABASE_OBJ , NDI_DOCUMENT_ID ) or NDI_DATABASE_OBJ = REMOVE ( NDI_DATABASE_OBJ , NDI_DOCUMENT_ID , VERSIONS ) or NDI_DATABASE_OBJ = REMOVE ( NDI_DATABASE_OBJ , NDI_DOCUMENT ) Removes the ndi . document object with the ' document unique reference ' equal to NDI_DOCUMENT_OBJ_ID . If VERSIONS is specified , then only the versions that match the entries in VERSIONS are removed . If an ndi . document is passed , then the NDI_DOCUMENT_ID is extracted using ndi . document / DOC_UNIQUE_ID . If a cell array of ndi . document is passed instead , then all of the documents are removed . search - search for an ndi.document from an ndi.database [ DOCUMENT_OBJS , VERSIONS ] = SEARCH ( NDI_DATABASE_OBJ , {' PARAM1 ', VALUE1 , ' PARAM2 ', VALUE2 , ... }) Searches metadata parameters PARAM1 , PARAM2 , etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ . If VALUEN is a string , then a regular expression is evaluated to determine the match . If VALUEN is not a string , then the items must match exactly . If PARAMN1 begins with a dash , then VALUEN indicates the value of one of these special parameters: This function returns a cell array of ndi . document objects . If no documents match the query , then an empty cell array ({}) is returned . An array VERSIONS contains the document version of of each ndi . document .","title":"Methods help"},{"location":"reference/%2Bndi/document.m/","text":"CLASS ndi.document \u00b6 NDI . DOCUMENT - NDI_database storage item , general purpose data and parameter storage The ndi . document datatype for storing results in the ndi . database Superclasses \u00b6 none Properties \u00b6 Property Description document_properties a struct with the fields for the document Methods \u00b6 Method Description add_dependency_value_n add a dependency to a named list dependency return names and a structure with all dependencies for an ndi.object dependency_value return dependency value given dependency name dependency_value_n return dependency values from list given dependency name doc_unique_id return the document unique identifier for an ndi.document document create a new ndi.database object eq are two ndi.document objects equal? id return the document unique identifier for an ndi.document plus merge two ndi.document objects readblankdefinition read a blank JSON class definitions from a file location string readjsonfilelocation return the text from a json file location string in NDI remove_dependency_value_n remove a dependency from a named list set_dependency_value set the value of a dependency field setproperties Set property values of an ndi.document object validate 0/1 evaluate whether ndi.document object is valid by its schema Methods help \u00b6 add_dependency_value_n - add a dependency to a named list NDI_DOCUMENT_OBJ = ADD_DEPENDENCY_VALUE_N ( NDI_DOCUMENT_OBJ , DEPENDENCY_NAME , VALUE , ...) Examines the 'depends_on' field ( if it is present ) for a given NDI_DOCUMENT_OBJ and adds a dependency name 'dependency_name_(n+1)' , where n is the number of entries with the form 'depenency_name_i' that exist presently . If there is no dependency field with that , then an entry is added . This function accepts name / value pairs that alter its default behavior : Parameter ( default ) | Description ----------------------------------------------------------------- ErrorIfNotFound ( 1 ) | If 1 , generate an error if the entry is | not found . Otherwise , generate no error but take no action . dependency - return names and a structure with all dependencies for an ndi.object [ NAMES , DEPEND_STRUCT ] = DEPENDENCY ( NDI_DOCUMENT_OBJ ) Returns in the cell array NAMES the 'name' of all 'depends_on' entries in the ndi . document NDI_DOCUMENT_OBJ . Further , this function returns a structure with all 'name' and 'value' entries in DEPEND_STRUCT . dependency_value - return dependency value given dependency name D = DEPENDENCY_VALUE ( NDI_DOCUMENT_OBJ , DEPENDENCY_NAME , ...) Examines the 'depends_on' field ( if it is present ) for a given NDI_DOCUMENT_OBJ and returns the 'value' associated with the given 'name' . If there is no such field ( either 'depends_on' or 'name' ), then D is empty and an error is generated . This function accepts name / value pairs that alter its default behavior : Parameter ( default ) | Description ----------------------------------------------------------------- ErrorIfNotFound ( 1 ) | If 1 , generate an error if the entry is | not found . Otherwise , return empty . dependency_value_n - return dependency values from list given dependency name D = DEPENDENCY_VALUE_N ( NDI_DOCUMENT_OBJ , DEPENDENCY_NAME , ... ) Examines the 'depends_on' field ( if it is present ) for a given NDI_DOCUMENT_OBJ and returns the 'values' associated with the given 'name_i' , where i varies from 1 to the maximum number of entries titled 'name_i' . If there is no such field ( either 'depends_on' or 'name_i' ), then D is empty and an error is generated . This function accepts name / value pairs that alter its default behavior : Parameter ( default ) | Description ----------------------------------------------------------------- ErrorIfNotFound ( 1 ) | If 1 , generate an error if the entry is | not found . Otherwise , return empty . doc_unique_id - return the document unique identifier for an ndi.document UID = DOC_UNIQUE_ID(NDI_DOCUMENT_OBJ) Returns the unique id of an ndi.document (Found at NDI_DOCUMENT_OBJ.documentproperties.ndi_document.id) document - create a new ndi.database object NDI_DOCUMENT_OBJ = ndi.document(DOCUMENT_TYPE, 'PARAM1', VALUE1, ...) or NDI_DOCUMENT_OBJ = ndi.document(MATLAB_STRUCT) eq - are two ndi.document objects equal? B = EQ ( NDI_DOCUMENT_OBJ1 , NDI_DOCUMENT_OBJ2 ) Returns 1 if and only if the objects have identical document_properties . ndi_document . id fields . id - return the document unique identifier for an ndi.document UID = ID (NDI_DOCUMENT_OBJ) Returns the unique id of an ndi.document (Found at NDI_DOCUMENT_OBJ.documentproperties.ndi_document.id) plus - merge two ndi.document objects NDI_DOCUMENT_OBJ_OUT = PLUS ( NDI_DOCUMENT_OBJ_A , NDI_DOCUMENT_OBJ_B ) Merges the ndi . document objects A and B . First , the ' document_class ' superclasses are merged . Then , the fields that are in B but are not in A are added to A . The result is returned in NDI_DOCUMENT_OBJ_OUT . Note that any fields that A has that are also in B will be preserved ; no elements of those fields of B will be combined with A . readblankdefinition - read a blank JSON class definitions from a file location string S = READBLANKDEFINITION(JSONFILELOCATIONSTRING) Given a JSONFILELOCATIONSTRING, this function creates a blank document using the JSON definitions. A JSONFILELOCATIONSTRING can be: a) a url b) a filename (full path) c) a filename referenced with respect to $NDIDOCUMENTPATH See also: READJSONFILELOCATION readjsonfilelocation - return the text from a json file location string in NDI T = READJSONFILELOCATION(JSONFILELOCATIONSTRING) A JSONFILELOCATIONSTRING can be: a) a url b) a filename (full path) c) a relative filename with respect to $NDIDOCUMENTPATH d) a filename referenced with respect to $NDIDOCUMENTPATH remove_dependency_value_n - remove a dependency from a named list NDI_DOCUMENT_OBJ = REMOVE_DEPENDENCY_VALUE_N ( NDI_DOCUMENT_OBJ , DEPENDENCY_NAME , VALUE , N , ...) Examines the 'depends_on' field ( if it is present ) for a given NDI_DOCUMENT_OBJ and removes the dependency name 'dependency_name_(n)' . This function accepts name / value pairs that alter its default behavior : Parameter ( default ) | Description ----------------------------------------------------------------- ErrorIfNotFound ( 1 ) | If 1 , generate an error if the entry is | not found . Otherwise , generate no error but take no action . set_dependency_value - set the value of a dependency field NDI_DOCUMENT_OBJ = SET_DEPENDENCY_VALUE ( NDI_DOCUMENT_OBJ , DEPENDENCY_NAME , VALUE , ...) Examines the 'depends_on' field ( if it is present ) for a given NDI_DOCUMENT_OBJ and , if there is a dependency with a given 'dependency_name' , then the value of the dependency is set to DEPENDENCY_VALUE . This function accepts name / value pairs that alter its default behavior : Parameter ( default ) | Description ----------------------------------------------------------------- ErrorIfNotFound ( 1 ) | If 1 , generate an error if the entry is | not found . Otherwise , add it . setproperties - Set property values of an ndi.document object NDI_DOCUMENT_OBJ = SETPROPERTIES ( NDI_DOCUMENT_OBJ , 'PROPERTY1' , VALUE1 , ...) Sets the property values of NDI_DOCUMENT_OBJ . PROPERTY values should be expressed relative to NDI_DOCUMENT_OBJ . document_properties ( see example ). See also : ndi . document , ndi . document / ndi . document Example : mydoc = mydoc . setproperties ( 'ndi_document.name' , 'mydoc name' ); validate - 0/1 evaluate whether ndi.document object is valid by its schema B = VALIDATE ( NDI_DOCUMENT_OBJ ) Checks the fields of the ndi . document object against the schema in NDI_DOCUMENT_OBJ . ndi_core_properties . validation_schema and returns 1 if the object is valid and 0 otherwise .","title":"ndi.document"},{"location":"reference/%2Bndi/document.m/#class-ndidocument","text":"NDI . DOCUMENT - NDI_database storage item , general purpose data and parameter storage The ndi . document datatype for storing results in the ndi . database","title":"CLASS ndi.document"},{"location":"reference/%2Bndi/document.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndi/document.m/#properties","text":"Property Description document_properties a struct with the fields for the document","title":"Properties"},{"location":"reference/%2Bndi/document.m/#methods","text":"Method Description add_dependency_value_n add a dependency to a named list dependency return names and a structure with all dependencies for an ndi.object dependency_value return dependency value given dependency name dependency_value_n return dependency values from list given dependency name doc_unique_id return the document unique identifier for an ndi.document document create a new ndi.database object eq are two ndi.document objects equal? id return the document unique identifier for an ndi.document plus merge two ndi.document objects readblankdefinition read a blank JSON class definitions from a file location string readjsonfilelocation return the text from a json file location string in NDI remove_dependency_value_n remove a dependency from a named list set_dependency_value set the value of a dependency field setproperties Set property values of an ndi.document object validate 0/1 evaluate whether ndi.document object is valid by its schema","title":"Methods"},{"location":"reference/%2Bndi/document.m/#methods-help","text":"add_dependency_value_n - add a dependency to a named list NDI_DOCUMENT_OBJ = ADD_DEPENDENCY_VALUE_N ( NDI_DOCUMENT_OBJ , DEPENDENCY_NAME , VALUE , ...) Examines the 'depends_on' field ( if it is present ) for a given NDI_DOCUMENT_OBJ and adds a dependency name 'dependency_name_(n+1)' , where n is the number of entries with the form 'depenency_name_i' that exist presently . If there is no dependency field with that , then an entry is added . This function accepts name / value pairs that alter its default behavior : Parameter ( default ) | Description ----------------------------------------------------------------- ErrorIfNotFound ( 1 ) | If 1 , generate an error if the entry is | not found . Otherwise , generate no error but take no action . dependency - return names and a structure with all dependencies for an ndi.object [ NAMES , DEPEND_STRUCT ] = DEPENDENCY ( NDI_DOCUMENT_OBJ ) Returns in the cell array NAMES the 'name' of all 'depends_on' entries in the ndi . document NDI_DOCUMENT_OBJ . Further , this function returns a structure with all 'name' and 'value' entries in DEPEND_STRUCT . dependency_value - return dependency value given dependency name D = DEPENDENCY_VALUE ( NDI_DOCUMENT_OBJ , DEPENDENCY_NAME , ...) Examines the 'depends_on' field ( if it is present ) for a given NDI_DOCUMENT_OBJ and returns the 'value' associated with the given 'name' . If there is no such field ( either 'depends_on' or 'name' ), then D is empty and an error is generated . This function accepts name / value pairs that alter its default behavior : Parameter ( default ) | Description ----------------------------------------------------------------- ErrorIfNotFound ( 1 ) | If 1 , generate an error if the entry is | not found . Otherwise , return empty . dependency_value_n - return dependency values from list given dependency name D = DEPENDENCY_VALUE_N ( NDI_DOCUMENT_OBJ , DEPENDENCY_NAME , ... ) Examines the 'depends_on' field ( if it is present ) for a given NDI_DOCUMENT_OBJ and returns the 'values' associated with the given 'name_i' , where i varies from 1 to the maximum number of entries titled 'name_i' . If there is no such field ( either 'depends_on' or 'name_i' ), then D is empty and an error is generated . This function accepts name / value pairs that alter its default behavior : Parameter ( default ) | Description ----------------------------------------------------------------- ErrorIfNotFound ( 1 ) | If 1 , generate an error if the entry is | not found . Otherwise , return empty . doc_unique_id - return the document unique identifier for an ndi.document UID = DOC_UNIQUE_ID(NDI_DOCUMENT_OBJ) Returns the unique id of an ndi.document (Found at NDI_DOCUMENT_OBJ.documentproperties.ndi_document.id) document - create a new ndi.database object NDI_DOCUMENT_OBJ = ndi.document(DOCUMENT_TYPE, 'PARAM1', VALUE1, ...) or NDI_DOCUMENT_OBJ = ndi.document(MATLAB_STRUCT) eq - are two ndi.document objects equal? B = EQ ( NDI_DOCUMENT_OBJ1 , NDI_DOCUMENT_OBJ2 ) Returns 1 if and only if the objects have identical document_properties . ndi_document . id fields . id - return the document unique identifier for an ndi.document UID = ID (NDI_DOCUMENT_OBJ) Returns the unique id of an ndi.document (Found at NDI_DOCUMENT_OBJ.documentproperties.ndi_document.id) plus - merge two ndi.document objects NDI_DOCUMENT_OBJ_OUT = PLUS ( NDI_DOCUMENT_OBJ_A , NDI_DOCUMENT_OBJ_B ) Merges the ndi . document objects A and B . First , the ' document_class ' superclasses are merged . Then , the fields that are in B but are not in A are added to A . The result is returned in NDI_DOCUMENT_OBJ_OUT . Note that any fields that A has that are also in B will be preserved ; no elements of those fields of B will be combined with A . readblankdefinition - read a blank JSON class definitions from a file location string S = READBLANKDEFINITION(JSONFILELOCATIONSTRING) Given a JSONFILELOCATIONSTRING, this function creates a blank document using the JSON definitions. A JSONFILELOCATIONSTRING can be: a) a url b) a filename (full path) c) a filename referenced with respect to $NDIDOCUMENTPATH See also: READJSONFILELOCATION readjsonfilelocation - return the text from a json file location string in NDI T = READJSONFILELOCATION(JSONFILELOCATIONSTRING) A JSONFILELOCATIONSTRING can be: a) a url b) a filename (full path) c) a relative filename with respect to $NDIDOCUMENTPATH d) a filename referenced with respect to $NDIDOCUMENTPATH remove_dependency_value_n - remove a dependency from a named list NDI_DOCUMENT_OBJ = REMOVE_DEPENDENCY_VALUE_N ( NDI_DOCUMENT_OBJ , DEPENDENCY_NAME , VALUE , N , ...) Examines the 'depends_on' field ( if it is present ) for a given NDI_DOCUMENT_OBJ and removes the dependency name 'dependency_name_(n)' . This function accepts name / value pairs that alter its default behavior : Parameter ( default ) | Description ----------------------------------------------------------------- ErrorIfNotFound ( 1 ) | If 1 , generate an error if the entry is | not found . Otherwise , generate no error but take no action . set_dependency_value - set the value of a dependency field NDI_DOCUMENT_OBJ = SET_DEPENDENCY_VALUE ( NDI_DOCUMENT_OBJ , DEPENDENCY_NAME , VALUE , ...) Examines the 'depends_on' field ( if it is present ) for a given NDI_DOCUMENT_OBJ and , if there is a dependency with a given 'dependency_name' , then the value of the dependency is set to DEPENDENCY_VALUE . This function accepts name / value pairs that alter its default behavior : Parameter ( default ) | Description ----------------------------------------------------------------- ErrorIfNotFound ( 1 ) | If 1 , generate an error if the entry is | not found . Otherwise , add it . setproperties - Set property values of an ndi.document object NDI_DOCUMENT_OBJ = SETPROPERTIES ( NDI_DOCUMENT_OBJ , 'PROPERTY1' , VALUE1 , ...) Sets the property values of NDI_DOCUMENT_OBJ . PROPERTY values should be expressed relative to NDI_DOCUMENT_OBJ . document_properties ( see example ). See also : ndi . document , ndi . document / ndi . document Example : mydoc = mydoc . setproperties ( 'ndi_document.name' , 'mydoc name' ); validate - 0/1 evaluate whether ndi.document object is valid by its schema B = VALIDATE ( NDI_DOCUMENT_OBJ ) Checks the fields of the ndi . document object against the schema in NDI_DOCUMENT_OBJ . ndi_core_properties . validation_schema and returns 1 if the object is valid and 0 otherwise .","title":"Methods help"},{"location":"reference/%2Bndi/documentservice.m/","text":"CLASS ndi.documentservice \u00b6 ndi.documentservice - a class of methods that allows objects to interact with ndi.document objects Superclasses \u00b6 none Properties \u00b6 none Methods \u00b6 Method Description documentservice create an ndi.documentservice object, which is just an abstract class newdocument create a new ndi.document based on information in this object searchquery create a search query to find this object as an ndi.document Methods help \u00b6 documentservice - create an ndi.documentservice object, which is just an abstract class NDI_DOCUMENTSERVICE_OBJ = ndi.documentservice(); newdocument - create a new ndi.document based on information in this object NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DOCUMENTSERVICE_OBJ) Create a new ndi.document based on information in this class. The base ndi.documentservice class returns empty. searchquery - create a search query to find this object as an ndi.document SQ = SEARCHQUERY ( NDI_DOCUMENTSERVICE_OBJ ) Return a search query that can be used to find this object ' s representation as an ndi . document . The base class ndi . documentservice just returns empty .","title":"ndi.documentservice"},{"location":"reference/%2Bndi/documentservice.m/#class-ndidocumentservice","text":"ndi.documentservice - a class of methods that allows objects to interact with ndi.document objects","title":"CLASS ndi.documentservice"},{"location":"reference/%2Bndi/documentservice.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndi/documentservice.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bndi/documentservice.m/#methods","text":"Method Description documentservice create an ndi.documentservice object, which is just an abstract class newdocument create a new ndi.document based on information in this object searchquery create a search query to find this object as an ndi.document","title":"Methods"},{"location":"reference/%2Bndi/documentservice.m/#methods-help","text":"documentservice - create an ndi.documentservice object, which is just an abstract class NDI_DOCUMENTSERVICE_OBJ = ndi.documentservice(); newdocument - create a new ndi.document based on information in this object NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DOCUMENTSERVICE_OBJ) Create a new ndi.document based on information in this class. The base ndi.documentservice class returns empty. searchquery - create a search query to find this object as an ndi.document SQ = SEARCHQUERY ( NDI_DOCUMENTSERVICE_OBJ ) Return a search query that can be used to find this object ' s representation as an ndi . document . The base class ndi . documentservice just returns empty .","title":"Methods help"},{"location":"reference/%2Bndi/element.m/","text":"CLASS ndi.element \u00b6 ndi.element - define or examine a element in the session Superclasses \u00b6 ndi.ido , ndi.epoch.epochset , ndi.documentservice Properties \u00b6 Property Description session associated ndi_session object name type reference underlying_element does this element depend on underlying element data (epochs)? direct is it direct from the element it underlies, or is it different with its own possibly modified epochs? subject_id ID of the subject that is related to the ndi.element dependencies a structure of name/value pairs of document dependencies (with exception of underlying_element and subject_id) identifier Methods \u00b6 Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.element cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object element creator for ndi.element elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochsetname the name of the ndi.element object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID getcache return the NDI_CACHE and key for ndi.element id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version ndi_unique_id Generate a unique ID number for NDI projects newdocument return a new database document of type ndi.document based on a element numepochs Number of epochs of ndi.epoch.epochset resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery return a search query for an ndi.document based on this element t0_t1 underlyingepochnodes find all the underlying epochnodes of a given epochnode Methods help \u00b6 addepoch - add an epoch to the ndi.element [ NDI_ELEMENT_OBJ , EPOCHDOC ] = ADDEPOCH ( NDI_ELEMENT_OBJ , EPOCHID , EPOCHCLOCK , T0_T1 ) Registers the data for an epoch with the NDI_ELEMENT_OBJ . Inputs : NDI_ELEMENT_OBJ : The ndi . element object to modify EPOCHID : The name of the epoch to add ; should match the name of an epoch from the probe EPOCHCLOCK : The epoch clock ; must be a single clock type that matches one of the clock types of the probe T0_T1 : The starting time and ending time of the existence of information about the ELEMENT on the probe , in units of the epock clock buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . element / EPOCHNODES Help for ndi . element / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - build the epoch table for an ndi.element ET = BUILDEPOCHTABLE ( NDI_ELEMENT_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch ( with the session id ). ' epoch_session_id ' | Session of the epoch ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , and ' epoch_id ' cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . element / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . element / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_REF ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then empty is returned . element - creator for ndi.element NDI_ELEMENT_OBJ = ndi . element ( NDI_SESSION_OBJ , ELEMENT_NAME , ELEMENT_REFERENCE , ... ELEMENT_TYPE , UNDERLYING_EPOCHSET , DIRECT , [ SUBJECT_ID ] , [ DEPENDENCIES ] ) or NDI_ELEMENT_OBJ = ndi . element ( NDI_SESSION_OBJ , ELEMENT_DOCUMENT ) Creates an ndi . element object , either from a name and and associated ndi . probe object , or builds the ndi . element in memory from an ndi . document of type 'ndi_document_element' . If the UNDERLYING_EPOCHSET has a subject_id , then that subject ID is used for the new element . elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING ( NDI_ELEMENT_OBJ ) Returns the name as a human - readable string . For ndi . element objects , this is the string ' element: ' followed by its name epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . element / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_ELEMENT_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch . The ndi . element class always returns the clock type ( s ) of the element it is based on epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . element / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . Help for ndi . element / epochid is inherited from superclass NDI . EPOCH . EPOCHSET epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . element / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochsetname - the name of the ndi.element object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_ELEMENT_OBJ ) Returns the object name that is used when creating epoch nodes . For ndi . element objects , this is ndi . element / ELEMENTSTRING . epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . element / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . element / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET getcache - return the NDI_CACHE and key for ndi.element [ CACHE , KEY ] = GETCACHE ( NDI_ELEMENT_OBJ ) Returns the CACHE and KEY for the ndi . element object . The CACHE is returned from the associated session . The KEY is the probe ' s ELEMENTSTRING plus the TYPE of the ELEMENT. See also : ndi . file . navigator id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then an error is returned . issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_ELEMENT_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . element objects , this returns 0 so that underlying ndi . probe epochs are added . load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ) Loads the ndi.document that is based on the ndi.element object and any associated epoch documents. load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC ( NDI_ELEMENT_OBJ ) Load an ndi . document that is based on the ndi . element object . Returns empty if there is no such document . loadaddedepochs - load the added epochs from an ndi.element [ ET_ADDED , EPOCHDOCS ] = LOADADDEDEOPCHS ( NDI_ELEMENT_OBJ ) Load the EPOCHTABLE that consists of added / registered epochs that provide information about the ndi . element . matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . element / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . element . ndi_unique_id is inherited from superclass NDI . IDO newdocument - return a new database document of type ndi.document based on a element NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_ELEMENT_OBJ ) Fill out the fields of an NDI_DOCUMENT_OBJ of type ' ndi_document_element ' with the corresponding ' name ' and ' type ' fields of the element NDI_ELEMENT_OBJ and the ' name ' , ' type ' , and ' reference ' fields of its underlying NDI_PROBE_OBJ . If EPOCHID is provided , then an EPOCHID field is filled out as well in accordance to ' ndi_document_epochid ' . When the document is created , it is automatically added to the session . numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . element / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . element / EPOCHTABLE Help for ndi . element / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET searchquery - return a search query for an ndi.document based on this element SQ = SEARCHQUERY ( NDI_ELEMENT_OBJ , [ EPOCHID ] ) Returns a search query for the fields of an NDI_DOCUMENT_OBJ of type 'ndi_document_element' with the corresponding 'name' and 'type' fields of the element NDI_ELEMENT_OBJ . t0_t1 - ** T0_T1 - return the t0_t1 ( beginning and end ) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK TODO : this must be a bug , it ' s just self - referential underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . element / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET","title":"ndi.element"},{"location":"reference/%2Bndi/element.m/#class-ndielement","text":"ndi.element - define or examine a element in the session","title":"CLASS ndi.element"},{"location":"reference/%2Bndi/element.m/#superclasses","text":"ndi.ido , ndi.epoch.epochset , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/element.m/#properties","text":"Property Description session associated ndi_session object name type reference underlying_element does this element depend on underlying element data (epochs)? direct is it direct from the element it underlies, or is it different with its own possibly modified epochs? subject_id ID of the subject that is related to the ndi.element dependencies a structure of name/value pairs of document dependencies (with exception of underlying_element and subject_id) identifier","title":"Properties"},{"location":"reference/%2Bndi/element.m/#methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.element cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object element creator for ndi.element elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochsetname the name of the ndi.element object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID getcache return the NDI_CACHE and key for ndi.element id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version ndi_unique_id Generate a unique ID number for NDI projects newdocument return a new database document of type ndi.document based on a element numepochs Number of epochs of ndi.epoch.epochset resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery return a search query for an ndi.document based on this element t0_t1 underlyingepochnodes find all the underlying epochnodes of a given epochnode","title":"Methods"},{"location":"reference/%2Bndi/element.m/#methods-help","text":"addepoch - add an epoch to the ndi.element [ NDI_ELEMENT_OBJ , EPOCHDOC ] = ADDEPOCH ( NDI_ELEMENT_OBJ , EPOCHID , EPOCHCLOCK , T0_T1 ) Registers the data for an epoch with the NDI_ELEMENT_OBJ . Inputs : NDI_ELEMENT_OBJ : The ndi . element object to modify EPOCHID : The name of the epoch to add ; should match the name of an epoch from the probe EPOCHCLOCK : The epoch clock ; must be a single clock type that matches one of the clock types of the probe T0_T1 : The starting time and ending time of the existence of information about the ELEMENT on the probe , in units of the epock clock buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . element / EPOCHNODES Help for ndi . element / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - build the epoch table for an ndi.element ET = BUILDEPOCHTABLE ( NDI_ELEMENT_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch ( with the session id ). ' epoch_session_id ' | Session of the epoch ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , and ' epoch_id ' cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . element / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . element / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_REF ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then empty is returned . element - creator for ndi.element NDI_ELEMENT_OBJ = ndi . element ( NDI_SESSION_OBJ , ELEMENT_NAME , ELEMENT_REFERENCE , ... ELEMENT_TYPE , UNDERLYING_EPOCHSET , DIRECT , [ SUBJECT_ID ] , [ DEPENDENCIES ] ) or NDI_ELEMENT_OBJ = ndi . element ( NDI_SESSION_OBJ , ELEMENT_DOCUMENT ) Creates an ndi . element object , either from a name and and associated ndi . probe object , or builds the ndi . element in memory from an ndi . document of type 'ndi_document_element' . If the UNDERLYING_EPOCHSET has a subject_id , then that subject ID is used for the new element . elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING ( NDI_ELEMENT_OBJ ) Returns the name as a human - readable string . For ndi . element objects , this is the string ' element: ' followed by its name epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . element / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_ELEMENT_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch . The ndi . element class always returns the clock type ( s ) of the element it is based on epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . element / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . Help for ndi . element / epochid is inherited from superclass NDI . EPOCH . EPOCHSET epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . element / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochsetname - the name of the ndi.element object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_ELEMENT_OBJ ) Returns the object name that is used when creating epoch nodes . For ndi . element objects , this is ndi . element / ELEMENTSTRING . epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . element / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . element / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET getcache - return the NDI_CACHE and key for ndi.element [ CACHE , KEY ] = GETCACHE ( NDI_ELEMENT_OBJ ) Returns the CACHE and KEY for the ndi . element object . The CACHE is returned from the associated session . The KEY is the probe ' s ELEMENTSTRING plus the TYPE of the ELEMENT. See also : ndi . file . navigator id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then an error is returned . issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_ELEMENT_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . element objects , this returns 0 so that underlying ndi . probe epochs are added . load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ) Loads the ndi.document that is based on the ndi.element object and any associated epoch documents. load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC ( NDI_ELEMENT_OBJ ) Load an ndi . document that is based on the ndi . element object . Returns empty if there is no such document . loadaddedepochs - load the added epochs from an ndi.element [ ET_ADDED , EPOCHDOCS ] = LOADADDEDEOPCHS ( NDI_ELEMENT_OBJ ) Load the EPOCHTABLE that consists of added / registered epochs that provide information about the ndi . element . matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . element / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . element . ndi_unique_id is inherited from superclass NDI . IDO newdocument - return a new database document of type ndi.document based on a element NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_ELEMENT_OBJ ) Fill out the fields of an NDI_DOCUMENT_OBJ of type ' ndi_document_element ' with the corresponding ' name ' and ' type ' fields of the element NDI_ELEMENT_OBJ and the ' name ' , ' type ' , and ' reference ' fields of its underlying NDI_PROBE_OBJ . If EPOCHID is provided , then an EPOCHID field is filled out as well in accordance to ' ndi_document_epochid ' . When the document is created , it is automatically added to the session . numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . element / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . element / EPOCHTABLE Help for ndi . element / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET searchquery - return a search query for an ndi.document based on this element SQ = SEARCHQUERY ( NDI_ELEMENT_OBJ , [ EPOCHID ] ) Returns a search query for the fields of an NDI_DOCUMENT_OBJ of type 'ndi_document_element' with the corresponding 'name' and 'type' fields of the element NDI_ELEMENT_OBJ . t0_t1 - ** T0_T1 - return the t0_t1 ( beginning and end ) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK TODO : this must be a bug , it ' s just self - referential underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . element / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET","title":"Methods help"},{"location":"reference/%2Bndi/filesep.m/","text":"ndi.filesep \u00b6 ndi . filesep The file separator for NDI documents The ndi . filesep is ' / ' , which may differ from the local user ' s machine path separator .","title":"ndi.filesep"},{"location":"reference/%2Bndi/filesep.m/#ndifilesep","text":"ndi . filesep The file separator for NDI documents The ndi . filesep is ' / ' , which may differ from the local user ' s machine path separator .","title":"ndi.filesep"},{"location":"reference/%2Bndi/globals.m/","text":"ndi.globals \u00b6 NDI_GLOBALS - define global variables for NDI ndi . globals Script that defines some global variables for the NDI package The following variables are defined : Name : | Description ------------------------------------------------------------------------- ndi_globals . path . path | The path of the NDI distribution on this machine . | ( Initialized by ndi_Init . m ) ndi_globals . path . commonpath | The path to the package ndi_common | ( Initialized by ndi_Init . m ) ndi_globals . path . documentpath | The path of the NDI document definitions | ( Initialized by ndi_Init . m ) ndi_globals . path . ... | The path of the NDI document validation schema documentschemapath | ( Initialized by ndi_Init . m ) ndi_globals . path . exampleexperpath | The path to the NDI example sessions ndi_globals . path . preferences | A path to a directory of preferences files ndi_globals . path . filecachepath | A path where files may be cached ( not deleted every time ) ndi_globals . path . temppath | The path to a directory that may be used for | temporary files ( Initialized by ndi_Init . m ) ndi_globals . path . testpath | A path to a safe place to run test code ndi_globals . probetype2object | A structure with fields 'type' and 'classname' | that describes the default ndi . probe classname | to use to create a probe for a given type . ndi_globals . databasehierarchy | A structure that describes the order in which to | attempt to open databases in the session path | ndi_globals . debug | A structure with preferences for debugging ndi_globals . log | An object that manages writing system , error , debugging logs ( vlt . app . log )","title":"ndi.globals"},{"location":"reference/%2Bndi/globals.m/#ndiglobals","text":"NDI_GLOBALS - define global variables for NDI ndi . globals Script that defines some global variables for the NDI package The following variables are defined : Name : | Description ------------------------------------------------------------------------- ndi_globals . path . path | The path of the NDI distribution on this machine . | ( Initialized by ndi_Init . m ) ndi_globals . path . commonpath | The path to the package ndi_common | ( Initialized by ndi_Init . m ) ndi_globals . path . documentpath | The path of the NDI document definitions | ( Initialized by ndi_Init . m ) ndi_globals . path . ... | The path of the NDI document validation schema documentschemapath | ( Initialized by ndi_Init . m ) ndi_globals . path . exampleexperpath | The path to the NDI example sessions ndi_globals . path . preferences | A path to a directory of preferences files ndi_globals . path . filecachepath | A path where files may be cached ( not deleted every time ) ndi_globals . path . temppath | The path to a directory that may be used for | temporary files ( Initialized by ndi_Init . m ) ndi_globals . path . testpath | A path to a safe place to run test code ndi_globals . probetype2object | A structure with fields 'type' and 'classname' | that describes the default ndi . probe classname | to use to create a probe for a given type . ndi_globals . databasehierarchy | A structure that describes the order in which to | attempt to open databases in the session path | ndi_globals . debug | A structure with preferences for debugging ndi_globals . log | An object that manages writing system , error , debugging logs ( vlt . app . log )","title":"ndi.globals"},{"location":"reference/%2Bndi/ido.m/","text":"CLASS ndi.ido \u00b6 ndi . ido - identifier object class for ndi This class creates and retrieves unique identifiers . The identifier is a hexidecimal string based on both the current date / time and a random number . When identifiers are sorted in alphabetical order , they are also sorted in the order of fime of creation . ** Example ** : i = ndi . ido () ; id = i . id () , % view the id that was created Superclasses \u00b6 none Properties \u00b6 Property Description identifier Methods \u00b6 Method Description id return the identifier of an ndi.ido object ido create a new ndi.ido object ndi_unique_id Generate a unique ID number for NDI projects Methods help \u00b6 id - return the identifier of an ndi.ido object IDENTIFIER = ID(NDI_ID_OBJ) Returns the unique identifier of an ndi.ido object. ido - create a new ndi.ido object NDI_ID_OBJ = ndi.ido() Creates a new ndi.ido object and generates a unique id that is stored in the property 'identifier'. ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND","title":"ndi.ido"},{"location":"reference/%2Bndi/ido.m/#class-ndiido","text":"ndi . ido - identifier object class for ndi This class creates and retrieves unique identifiers . The identifier is a hexidecimal string based on both the current date / time and a random number . When identifiers are sorted in alphabetical order , they are also sorted in the order of fime of creation . ** Example ** : i = ndi . ido () ; id = i . id () , % view the id that was created","title":"CLASS ndi.ido"},{"location":"reference/%2Bndi/ido.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndi/ido.m/#properties","text":"Property Description identifier","title":"Properties"},{"location":"reference/%2Bndi/ido.m/#methods","text":"Method Description id return the identifier of an ndi.ido object ido create a new ndi.ido object ndi_unique_id Generate a unique ID number for NDI projects","title":"Methods"},{"location":"reference/%2Bndi/ido.m/#methods-help","text":"id - return the identifier of an ndi.ido object IDENTIFIER = ID(NDI_ID_OBJ) Returns the unique identifier of an ndi.ido object. ido - create a new ndi.ido object NDI_ID_OBJ = ndi.ido() Creates a new ndi.ido object and generates a unique id that is stored in the property 'identifier'. ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND","title":"Methods help"},{"location":"reference/%2Bndi/neuron.m/","text":"CLASS ndi.neuron \u00b6 ndi.neuron - an ndi.element that contains data from a neuron An ndi.neuron object is simply an ndi.element.timeseries object that has a different type so that it can be searched easily. Superclasses \u00b6 ndi.element.timeseries , ndi.element , ndi.ido , ndi.epoch.epochset , ndi.documentservice , ndi.time.timeseries Properties \u00b6 Property Description session name type reference underlying_element direct subject_id dependencies identifier Methods \u00b6 Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.element cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochsetname the name of the ndi.element object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID getcache return the NDI_CACHE and key for ndi.element id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version ndi_unique_id Generate a unique ID number for NDI projects neuron creates an ndi.neuron object newdocument need docs here numepochs Number of epochs of ndi.epoch.epochset readtimeseries read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery need docs here t0_t1 times2samples convert from the timeseries time to sample numbers underlyingepochnodes find all the underlying epochnodes of a given epochnode Methods help \u00b6 addepoch - add an epoch to the ndi.element [ NDI_ELEMENT_OBJ , EPOCHDOC ] = ADDEPOCH ( NDI_ELEMENT_TIMESERIES_OBJ , EPOCHID , EPOCHCLOCK , T0_T1 , TIMEPOINTS , DATAPOINTS ) Registers the data for an epoch with the NDI_ELEMENT_OBJ . Inputs : NDI_ELEMENT_OBJ : The ndi . element object to modify EPOCHID : The name of the epoch to add ; should match the name of an epoch from the probe EPOCHCLOCK : The epoch clock ; must be a single clock type that matches one of the clock types of the probe T0_T1 : The starting time and ending time of the existence of information about the ELEMENT on the probe , in units of the epock clock TIMEPOINTS : the time points to be added to this epoch ; can also be the string 'probe' which means the points are read directly from the probe ( must be Tx1 ). Timepoints must be in the units of the EPOCHCLOCK . DATAPOINTS : the data points that accompany each timepoint ( must be TxXxY ...), or can be 'probe' to read from the probe Outputs : If a second output is requested in EPOCHDOC , then the DOC is NOT added to the database Help for ndi . neuron / addepoch is inherited from superclass NDI . ELEMENT . TIMESERIES buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . neuron / EPOCHNODES Help for ndi . neuron / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - build the epoch table for an ndi.element ET = BUILDEPOCHTABLE ( NDI_ELEMENT_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch ( with the session id ). ' epoch_session_id ' | Session of the epoch ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , and ' epoch_id ' Help for ndi . neuron / buildepochtable is inherited from superclass NDI . ELEMENT cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . neuron / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . neuron / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_REF ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then empty is returned . Help for ndi . neuron / doc_unique_id is inherited from superclass NDI . ELEMENT elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING ( NDI_ELEMENT_OBJ ) Returns the name as a human - readable string . For ndi . element objects , this is the string ' element: ' followed by its name Help for ndi . neuron / elementstring is inherited from superclass NDI . ELEMENT epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . neuron / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_ELEMENT_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch . The ndi . element class always returns the clock type ( s ) of the element it is based on Help for ndi . neuron / epochclock is inherited from superclass NDI . ELEMENT epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . neuron / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . Help for ndi . neuron / epochid is inherited from superclass NDI . EPOCH . EPOCHSET epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . neuron / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochsetname - the name of the ndi.element object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_ELEMENT_OBJ ) Returns the object name that is used when creating epoch nodes . For ndi . element objects , this is ndi . element / ELEMENTSTRING . Help for ndi . neuron / epochsetname is inherited from superclass NDI . ELEMENT epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . neuron / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . neuron / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET getcache - return the NDI_CACHE and key for ndi.element [ CACHE , KEY ] = GETCACHE ( NDI_ELEMENT_OBJ ) Returns the CACHE and KEY for the ndi . element object . The CACHE is returned from the associated session . The KEY is the probe ' s ELEMENTSTRING plus the TYPE of the ELEMENT. See also : ndi . file . navigator Help for ndi . neuron / getcache is inherited from superclass NDI . ELEMENT id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then an error is returned . Help for ndi . neuron / id is inherited from superclass NDI . ELEMENT issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_ELEMENT_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . element objects , this returns 0 so that underlying ndi . probe epochs are added . Help for ndi . neuron / issyncgraphroot is inherited from superclass NDI . ELEMENT load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS ( NDI_ELEMENT_OBJ ) Loads the ndi . document that is based on the ndi . element object and any associated epoch documents . Help for ndi . neuron / load_all_element_docs is inherited from superclass NDI . ELEMENT load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC ( NDI_ELEMENT_OBJ ) Load an ndi . document that is based on the ndi . element object . Returns empty if there is no such document . Help for ndi . neuron / load_element_doc is inherited from superclass NDI . ELEMENT loadaddedepochs - load the added epochs from an ndi.element [ ET_ADDED , EPOCHDOCS ] = LOADADDEDEOPCHS ( NDI_ELEMENT_OBJ ) Load the EPOCHTABLE that consists of added / registered epochs that provide information about the ndi . element . Help for ndi . neuron / loadaddedepochs is inherited from superclass NDI . ELEMENT matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . neuron / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . neuron . ndi_unique_id is inherited from superclass NDI . IDO neuron - creates an ndi.neuron object NDI_NEURON_OBJ = ndi.neuron(...) This function takes the same input arguments as ndi.element.timeseries. See ndi.element.timeseries/timeseries newdocument - need docs here Help for ndi . neuron / newdocument is inherited from superclass NDI . ELEMENT . TIMESERIES numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . neuron / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET readtimeseries - read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch [ DATA , T , TIMEREF ] = READTIMESERIES ( NDI_ELEMENT_TIMESERIES_OBJ , TIMEREF_OR_EPOCH , T0 , T1 ) Reads timeseries data from an ndi . element . timeseries object . The DATA and time information T that are returned depend on the the specific subclass of ndi . element . timeseries that is called ( see READTIMESERIESEPOCH ) . In the base class , this function merely calls the element ' s probe ' s READTIMESERIES function . TIMEREF_OR_EPOCH is either an ndi . time . timereference object indicating the time reference for T0 , T1 , or it can be a single number , which will indicate the data are to be read from that epoch . DATA is the data for the probe . T is a time structure , in units of TIMEREF if it is an ndi . time . timereference object or in units of the epoch if an epoch is passed . The TIMEREF is returned . Help for ndi . neuron / readtimeseries is inherited from superclass NDI . ELEMENT . TIMESERIES resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . neuron / EPOCHTABLE Help for ndi . neuron / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLE_RATE ( NDI_TIMESERIES_OBJ , EPOCH ) Returns the sampling rate of a given ndi . time . timeseries object for the epoch EPOCH . EPOCH can be specified as an index or EPOCH_ID . If NDI_TIMESERIES_OBJ is not regularly sampled , then - 1 is returned . Help for ndi . neuron / samplerate is inherited from superclass NDI . TIME . TIMESERIES samples2times - convert from the timeseries time to sample numbers SAMPLES = TIME2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. TODO : convert times to dev_local_clock Help for ndi . neuron / samples2times is inherited from superclass NDI . TIME . TIMESERIES searchquery - need docs here Help for ndi . neuron / searchquery is inherited from superclass NDI . ELEMENT . TIMESERIES t0_t1 - ** T0_T1 - return the t0_t1 ( beginning and end ) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK TODO : this must be a bug , it ' s just self - referential Help for ndi . neuron / t0_t1 is inherited from superclass NDI . ELEMENT times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. Help for ndi . neuron / times2samples is inherited from superclass NDI . TIME . TIMESERIES underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . neuron / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET","title":"ndi.neuron"},{"location":"reference/%2Bndi/neuron.m/#class-ndineuron","text":"ndi.neuron - an ndi.element that contains data from a neuron An ndi.neuron object is simply an ndi.element.timeseries object that has a different type so that it can be searched easily.","title":"CLASS ndi.neuron"},{"location":"reference/%2Bndi/neuron.m/#superclasses","text":"ndi.element.timeseries , ndi.element , ndi.ido , ndi.epoch.epochset , ndi.documentservice , ndi.time.timeseries","title":"Superclasses"},{"location":"reference/%2Bndi/neuron.m/#properties","text":"Property Description session name type reference underlying_element direct subject_id dependencies identifier","title":"Properties"},{"location":"reference/%2Bndi/neuron.m/#methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.element cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochsetname the name of the ndi.element object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID getcache return the NDI_CACHE and key for ndi.element id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version ndi_unique_id Generate a unique ID number for NDI projects neuron creates an ndi.neuron object newdocument need docs here numepochs Number of epochs of ndi.epoch.epochset readtimeseries read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery need docs here t0_t1 times2samples convert from the timeseries time to sample numbers underlyingepochnodes find all the underlying epochnodes of a given epochnode","title":"Methods"},{"location":"reference/%2Bndi/neuron.m/#methods-help","text":"addepoch - add an epoch to the ndi.element [ NDI_ELEMENT_OBJ , EPOCHDOC ] = ADDEPOCH ( NDI_ELEMENT_TIMESERIES_OBJ , EPOCHID , EPOCHCLOCK , T0_T1 , TIMEPOINTS , DATAPOINTS ) Registers the data for an epoch with the NDI_ELEMENT_OBJ . Inputs : NDI_ELEMENT_OBJ : The ndi . element object to modify EPOCHID : The name of the epoch to add ; should match the name of an epoch from the probe EPOCHCLOCK : The epoch clock ; must be a single clock type that matches one of the clock types of the probe T0_T1 : The starting time and ending time of the existence of information about the ELEMENT on the probe , in units of the epock clock TIMEPOINTS : the time points to be added to this epoch ; can also be the string 'probe' which means the points are read directly from the probe ( must be Tx1 ). Timepoints must be in the units of the EPOCHCLOCK . DATAPOINTS : the data points that accompany each timepoint ( must be TxXxY ...), or can be 'probe' to read from the probe Outputs : If a second output is requested in EPOCHDOC , then the DOC is NOT added to the database Help for ndi . neuron / addepoch is inherited from superclass NDI . ELEMENT . TIMESERIES buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . neuron / EPOCHNODES Help for ndi . neuron / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - build the epoch table for an ndi.element ET = BUILDEPOCHTABLE ( NDI_ELEMENT_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch ( with the session id ). ' epoch_session_id ' | Session of the epoch ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , and ' epoch_id ' Help for ndi . neuron / buildepochtable is inherited from superclass NDI . ELEMENT cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . neuron / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . neuron / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_REF ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then empty is returned . Help for ndi . neuron / doc_unique_id is inherited from superclass NDI . ELEMENT elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING ( NDI_ELEMENT_OBJ ) Returns the name as a human - readable string . For ndi . element objects , this is the string ' element: ' followed by its name Help for ndi . neuron / elementstring is inherited from superclass NDI . ELEMENT epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . neuron / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_ELEMENT_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch . The ndi . element class always returns the clock type ( s ) of the element it is based on Help for ndi . neuron / epochclock is inherited from superclass NDI . ELEMENT epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . neuron / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . Help for ndi . neuron / epochid is inherited from superclass NDI . EPOCH . EPOCHSET epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . neuron / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochsetname - the name of the ndi.element object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_ELEMENT_OBJ ) Returns the object name that is used when creating epoch nodes . For ndi . element objects , this is ndi . element / ELEMENTSTRING . Help for ndi . neuron / epochsetname is inherited from superclass NDI . ELEMENT epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . neuron / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . neuron / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET getcache - return the NDI_CACHE and key for ndi.element [ CACHE , KEY ] = GETCACHE ( NDI_ELEMENT_OBJ ) Returns the CACHE and KEY for the ndi . element object . The CACHE is returned from the associated session . The KEY is the probe ' s ELEMENTSTRING plus the TYPE of the ELEMENT. See also : ndi . file . navigator Help for ndi . neuron / getcache is inherited from superclass NDI . ELEMENT id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then an error is returned . Help for ndi . neuron / id is inherited from superclass NDI . ELEMENT issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_ELEMENT_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . element objects , this returns 0 so that underlying ndi . probe epochs are added . Help for ndi . neuron / issyncgraphroot is inherited from superclass NDI . ELEMENT load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS ( NDI_ELEMENT_OBJ ) Loads the ndi . document that is based on the ndi . element object and any associated epoch documents . Help for ndi . neuron / load_all_element_docs is inherited from superclass NDI . ELEMENT load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC ( NDI_ELEMENT_OBJ ) Load an ndi . document that is based on the ndi . element object . Returns empty if there is no such document . Help for ndi . neuron / load_element_doc is inherited from superclass NDI . ELEMENT loadaddedepochs - load the added epochs from an ndi.element [ ET_ADDED , EPOCHDOCS ] = LOADADDEDEOPCHS ( NDI_ELEMENT_OBJ ) Load the EPOCHTABLE that consists of added / registered epochs that provide information about the ndi . element . Help for ndi . neuron / loadaddedepochs is inherited from superclass NDI . ELEMENT matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . neuron / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . neuron . ndi_unique_id is inherited from superclass NDI . IDO neuron - creates an ndi.neuron object NDI_NEURON_OBJ = ndi.neuron(...) This function takes the same input arguments as ndi.element.timeseries. See ndi.element.timeseries/timeseries newdocument - need docs here Help for ndi . neuron / newdocument is inherited from superclass NDI . ELEMENT . TIMESERIES numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . neuron / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET readtimeseries - read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch [ DATA , T , TIMEREF ] = READTIMESERIES ( NDI_ELEMENT_TIMESERIES_OBJ , TIMEREF_OR_EPOCH , T0 , T1 ) Reads timeseries data from an ndi . element . timeseries object . The DATA and time information T that are returned depend on the the specific subclass of ndi . element . timeseries that is called ( see READTIMESERIESEPOCH ) . In the base class , this function merely calls the element ' s probe ' s READTIMESERIES function . TIMEREF_OR_EPOCH is either an ndi . time . timereference object indicating the time reference for T0 , T1 , or it can be a single number , which will indicate the data are to be read from that epoch . DATA is the data for the probe . T is a time structure , in units of TIMEREF if it is an ndi . time . timereference object or in units of the epoch if an epoch is passed . The TIMEREF is returned . Help for ndi . neuron / readtimeseries is inherited from superclass NDI . ELEMENT . TIMESERIES resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . neuron / EPOCHTABLE Help for ndi . neuron / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLE_RATE ( NDI_TIMESERIES_OBJ , EPOCH ) Returns the sampling rate of a given ndi . time . timeseries object for the epoch EPOCH . EPOCH can be specified as an index or EPOCH_ID . If NDI_TIMESERIES_OBJ is not regularly sampled , then - 1 is returned . Help for ndi . neuron / samplerate is inherited from superclass NDI . TIME . TIMESERIES samples2times - convert from the timeseries time to sample numbers SAMPLES = TIME2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. TODO : convert times to dev_local_clock Help for ndi . neuron / samples2times is inherited from superclass NDI . TIME . TIMESERIES searchquery - need docs here Help for ndi . neuron / searchquery is inherited from superclass NDI . ELEMENT . TIMESERIES t0_t1 - ** T0_T1 - return the t0_t1 ( beginning and end ) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK TODO : this must be a bug , it ' s just self - referential Help for ndi . neuron / t0_t1 is inherited from superclass NDI . ELEMENT times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. Help for ndi . neuron / times2samples is inherited from superclass NDI . TIME . TIMESERIES underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . neuron / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET","title":"Methods help"},{"location":"reference/%2Bndi/probe.m/","text":"CLASS ndi.probe \u00b6 ndi . probe - the base class for PROBES -- measurement or stimulation devices In NDI , a PROBE is an instance of an instrument that can be used to MEASURE or to STIMULATE . Typically , a probe is associated with an ndi . daq . system that performs data acquisition or even control of a stimulator . A probe is uniquely identified by 3 fields and an session : session - the session where the probe is used name - the name of the probe reference - the reference number of the probe type - the type of probe ( see type ndi . fun . probetype2objectinit ) Examples : A multichannel extracellular electrode might be named ' extra ' , have a reference of 1 , and a type of ' n-trode ' . If the electrode is moved , one should change the name or the reference to indicate that the data should not be attempted to be combined across the two positions . One might change the reference number to 2 . How to make a probe : ( Talk about epochprobemap records of devices , probes are created from these elements . ) Superclasses \u00b6 ndi.element , ndi.ido , ndi.epoch.epochset , ndi.documentservice Properties \u00b6 Property Description session name type reference underlying_element direct subject_id dependencies identifier Methods \u00b6 Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version ndi_unique_id Generate a unique ID number for NDI projects newdocument return a new database document of type ndi.document based on a element numepochs Number of epochs of ndi.epoch.epochset probe create a new ndi.probe object probestring Produce a human-readable probe string resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery return a search query for an ndi.document based on this element t0_t1 underlyingepochnodes find all the underlying epochnodes of a given epochnode Methods help \u00b6 addepoch - add an epoch to the ndi.element [ NDI_ELEMENT_OBJ , EPOCHDOC ] = ADDEPOCH ( NDI_ELEMENT_OBJ , EPOCHID , EPOCHCLOCK , T0_T1 ) Registers the data for an epoch with the NDI_ELEMENT_OBJ . Inputs : NDI_ELEMENT_OBJ : The ndi . element object to modify EPOCHID : The name of the epoch to add ; should match the name of an epoch from the probe EPOCHCLOCK : The epoch clock ; must be a single clock type that matches one of the clock types of the probe T0_T1 : The starting time and ending time of the existence of information about the ELEMENT on the probe , in units of the epock clock Help for ndi . probe / addepoch is inherited from superclass NDI . ELEMENT buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . probe / EPOCHNODES Help for ndi . probe / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - build the epoch table for an ndi.probe. * ET = BUILDEPOCHTABLE ( NDI_PROBE_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch . ' epoch_session_id ' | The ID of the session ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , and ' epoch_id ' cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . probe / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . probe / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_REF ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then empty is returned . Help for ndi . probe / doc_unique_id is inherited from superclass NDI . ELEMENT elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING ( NDI_ELEMENT_OBJ ) Returns the name as a human - readable string . For ndi . element objects , this is the string ' element: ' followed by its name Help for ndi . probe / elementstring is inherited from superclass NDI . ELEMENT epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . probe / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_PROBE_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch . The ndi . probe class always returns the clock type ( s ) of the device it is based on epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . probe / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . Help for ndi . probe / epochid is inherited from superclass NDI . EPOCH . EPOCHSET epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . probe / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochprobemapmatch - does an epochprobemap record match our probe? B = EPOCHPROBEMAPMATCH ( NDI_PROBE_OBJ , EPOCHPROBEMAP ) Returns 1 if the ndi . epoch . epochprobemap object EPOCHPROBEMAP is a match for the NDI_PROBE_OBJ probe and 0 otherwise . epochsetname - the name of the ndi.probe. object, for EPOCHNODES* NAME = EPOCHSETNAME ( NDI_PROBE_OBJ ) Returns the object name that is used when creating epoch nodes . For ndi . probe objects , this is the string ' probe: ' followed by PROBESTRING ( NDI_PROBE_OBJ ) . epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . probe / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . probe / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET eq - are 2 ndi.probe objects equal? Returns 1 if the objects share an object class , session , and probe string . getcache - return the NDI_CACHE and key for ndi.element [ CACHE , KEY ] = GETCACHE ( NDI_ELEMENT_OBJ ) Returns the CACHE and KEY for the ndi . element object . The CACHE is returned from the associated session . The KEY is the probe ' s ELEMENTSTRING plus the TYPE of the ELEMENT. See also : ndi . file . navigator Help for ndi . probe / getcache is inherited from superclass NDI . ELEMENT getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe. * [ DEV , DEVNAME , DEVEPOCH , CHANNELTYPE , CHANNELLIST ] = GETCHANNELDEVINFO ( NDI_PROBE_OBJ , EPOCH_NUMBER_OR_ID ) Given an ndi . probe . * object and an EPOCH number , this function returns the corresponding channel and device info . Suppose there are C channels corresponding to a probe . Then the outputs are DEV is a 1 xC cell array of ndi . daq . system objects for each channel DEVNAME is a 1 xC cell array of the names of each device in DEV DEVEPOCH is a 1 xC array with the epoch id of the probe ' s EPOCH on each device CHANNELTYPE is a cell array of the type of each channel CHANNELLIST is the channel number of each channel . id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then an error is returned . Help for ndi . probe / id is inherited from superclass NDI . ELEMENT issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset and ndi . probe . * this returns 0 so that the underlying ndi . daq . system epochs are added . load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS ( NDI_ELEMENT_OBJ ) Loads the ndi . document that is based on the ndi . element object and any associated epoch documents . Help for ndi . probe / load_all_element_docs is inherited from superclass NDI . ELEMENT load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC ( NDI_ELEMENT_OBJ ) Load an ndi . document that is based on the ndi . element object . Returns empty if there is no such document . Help for ndi . probe / load_element_doc is inherited from superclass NDI . ELEMENT loadaddedepochs - load the added epochs from an ndi.element [ ET_ADDED , EPOCHDOCS ] = LOADADDEDEOPCHS ( NDI_ELEMENT_OBJ ) Load the EPOCHTABLE that consists of added / registered epochs that provide information about the ndi . element . Help for ndi . probe / loadaddedepochs is inherited from superclass NDI . ELEMENT matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . probe / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . probe . ndi_unique_id is inherited from superclass NDI . IDO newdocument - return a new database document of type ndi.document based on a element NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_ELEMENT_OBJ ) Fill out the fields of an NDI_DOCUMENT_OBJ of type ' ndi_document_element ' with the corresponding ' name ' and ' type ' fields of the element NDI_ELEMENT_OBJ and the ' name ' , ' type ' , and ' reference ' fields of its underlying NDI_PROBE_OBJ . If EPOCHID is provided , then an EPOCHID field is filled out as well in accordance to ' ndi_document_epochid ' . When the document is created , it is automatically added to the session . Help for ndi . probe / newdocument is inherited from superclass NDI . ELEMENT numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . probe / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET probe - create a new ndi.probe object OBJ = ndi.probe(SESSION, NAME, REFERENCE, TYPE, SUBJECT_ID) or OBJ = ndi.probe(SESSION, NDI_DOCUMENT_OBJ) Creates an ndi.probe associated with an ndi.session object SESSION and with name NAME (a string that must start with a letter and contain no white space), reference number equal to REFERENCE (a non-negative integer), the TYPE of the probe (a string that must start with a letter and contain no white space). ndi.probe is a essentially an abstract class, and a specific implementation must be called. probestring - Produce a human-readable probe string PROBESTR = PROBESTRING(NDI_PROBE_OBJ) Returns the name and reference of a probe as a human-readable string. This is simply PROBESTR = [NDI_PROBE_OBJ.name ' _ ' in2str(NDI_PROBE_OBJ.reference)] resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . probe / EPOCHTABLE Help for ndi . probe / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET searchquery - return a search query for an ndi.document based on this element SQ = SEARCHQUERY ( NDI_ELEMENT_OBJ , [ EPOCHID ] ) Returns a search query for the fields of an NDI_DOCUMENT_OBJ of type 'ndi_document_element' with the corresponding 'name' and 'type' fields of the element NDI_ELEMENT_OBJ . Help for ndi . probe / searchquery is inherited from superclass NDI . ELEMENT t0_t1 - ** T0_T1 - return the t0_t1 ( beginning and end ) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK TODO : this must be a bug , it ' s just self - referential Help for ndi . probe / t0_t1 is inherited from superclass NDI . ELEMENT underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . probe / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET","title":"ndi.probe"},{"location":"reference/%2Bndi/probe.m/#class-ndiprobe","text":"ndi . probe - the base class for PROBES -- measurement or stimulation devices In NDI , a PROBE is an instance of an instrument that can be used to MEASURE or to STIMULATE . Typically , a probe is associated with an ndi . daq . system that performs data acquisition or even control of a stimulator . A probe is uniquely identified by 3 fields and an session : session - the session where the probe is used name - the name of the probe reference - the reference number of the probe type - the type of probe ( see type ndi . fun . probetype2objectinit ) Examples : A multichannel extracellular electrode might be named ' extra ' , have a reference of 1 , and a type of ' n-trode ' . If the electrode is moved , one should change the name or the reference to indicate that the data should not be attempted to be combined across the two positions . One might change the reference number to 2 . How to make a probe : ( Talk about epochprobemap records of devices , probes are created from these elements . )","title":"CLASS ndi.probe"},{"location":"reference/%2Bndi/probe.m/#superclasses","text":"ndi.element , ndi.ido , ndi.epoch.epochset , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/probe.m/#properties","text":"Property Description session name type reference underlying_element direct subject_id dependencies identifier","title":"Properties"},{"location":"reference/%2Bndi/probe.m/#methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version ndi_unique_id Generate a unique ID number for NDI projects newdocument return a new database document of type ndi.document based on a element numepochs Number of epochs of ndi.epoch.epochset probe create a new ndi.probe object probestring Produce a human-readable probe string resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery return a search query for an ndi.document based on this element t0_t1 underlyingepochnodes find all the underlying epochnodes of a given epochnode","title":"Methods"},{"location":"reference/%2Bndi/probe.m/#methods-help","text":"addepoch - add an epoch to the ndi.element [ NDI_ELEMENT_OBJ , EPOCHDOC ] = ADDEPOCH ( NDI_ELEMENT_OBJ , EPOCHID , EPOCHCLOCK , T0_T1 ) Registers the data for an epoch with the NDI_ELEMENT_OBJ . Inputs : NDI_ELEMENT_OBJ : The ndi . element object to modify EPOCHID : The name of the epoch to add ; should match the name of an epoch from the probe EPOCHCLOCK : The epoch clock ; must be a single clock type that matches one of the clock types of the probe T0_T1 : The starting time and ending time of the existence of information about the ELEMENT on the probe , in units of the epock clock Help for ndi . probe / addepoch is inherited from superclass NDI . ELEMENT buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . probe / EPOCHNODES Help for ndi . probe / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - build the epoch table for an ndi.probe. * ET = BUILDEPOCHTABLE ( NDI_PROBE_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch . ' epoch_session_id ' | The ID of the session ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , and ' epoch_id ' cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . probe / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . probe / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_REF ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then empty is returned . Help for ndi . probe / doc_unique_id is inherited from superclass NDI . ELEMENT elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING ( NDI_ELEMENT_OBJ ) Returns the name as a human - readable string . For ndi . element objects , this is the string ' element: ' followed by its name Help for ndi . probe / elementstring is inherited from superclass NDI . ELEMENT epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . probe / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_PROBE_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch . The ndi . probe class always returns the clock type ( s ) of the device it is based on epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . probe / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . Help for ndi . probe / epochid is inherited from superclass NDI . EPOCH . EPOCHSET epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . probe / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochprobemapmatch - does an epochprobemap record match our probe? B = EPOCHPROBEMAPMATCH ( NDI_PROBE_OBJ , EPOCHPROBEMAP ) Returns 1 if the ndi . epoch . epochprobemap object EPOCHPROBEMAP is a match for the NDI_PROBE_OBJ probe and 0 otherwise . epochsetname - the name of the ndi.probe. object, for EPOCHNODES* NAME = EPOCHSETNAME ( NDI_PROBE_OBJ ) Returns the object name that is used when creating epoch nodes . For ndi . probe objects , this is the string ' probe: ' followed by PROBESTRING ( NDI_PROBE_OBJ ) . epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . probe / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . probe / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET eq - are 2 ndi.probe objects equal? Returns 1 if the objects share an object class , session , and probe string . getcache - return the NDI_CACHE and key for ndi.element [ CACHE , KEY ] = GETCACHE ( NDI_ELEMENT_OBJ ) Returns the CACHE and KEY for the ndi . element object . The CACHE is returned from the associated session . The KEY is the probe ' s ELEMENTSTRING plus the TYPE of the ELEMENT. See also : ndi . file . navigator Help for ndi . probe / getcache is inherited from superclass NDI . ELEMENT getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe. * [ DEV , DEVNAME , DEVEPOCH , CHANNELTYPE , CHANNELLIST ] = GETCHANNELDEVINFO ( NDI_PROBE_OBJ , EPOCH_NUMBER_OR_ID ) Given an ndi . probe . * object and an EPOCH number , this function returns the corresponding channel and device info . Suppose there are C channels corresponding to a probe . Then the outputs are DEV is a 1 xC cell array of ndi . daq . system objects for each channel DEVNAME is a 1 xC cell array of the names of each device in DEV DEVEPOCH is a 1 xC array with the epoch id of the probe ' s EPOCH on each device CHANNELTYPE is a cell array of the type of each channel CHANNELLIST is the channel number of each channel . id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then an error is returned . Help for ndi . probe / id is inherited from superclass NDI . ELEMENT issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset and ndi . probe . * this returns 0 so that the underlying ndi . daq . system epochs are added . load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS ( NDI_ELEMENT_OBJ ) Loads the ndi . document that is based on the ndi . element object and any associated epoch documents . Help for ndi . probe / load_all_element_docs is inherited from superclass NDI . ELEMENT load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC ( NDI_ELEMENT_OBJ ) Load an ndi . document that is based on the ndi . element object . Returns empty if there is no such document . Help for ndi . probe / load_element_doc is inherited from superclass NDI . ELEMENT loadaddedepochs - load the added epochs from an ndi.element [ ET_ADDED , EPOCHDOCS ] = LOADADDEDEOPCHS ( NDI_ELEMENT_OBJ ) Load the EPOCHTABLE that consists of added / registered epochs that provide information about the ndi . element . Help for ndi . probe / loadaddedepochs is inherited from superclass NDI . ELEMENT matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . probe / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . probe . ndi_unique_id is inherited from superclass NDI . IDO newdocument - return a new database document of type ndi.document based on a element NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_ELEMENT_OBJ ) Fill out the fields of an NDI_DOCUMENT_OBJ of type ' ndi_document_element ' with the corresponding ' name ' and ' type ' fields of the element NDI_ELEMENT_OBJ and the ' name ' , ' type ' , and ' reference ' fields of its underlying NDI_PROBE_OBJ . If EPOCHID is provided , then an EPOCHID field is filled out as well in accordance to ' ndi_document_epochid ' . When the document is created , it is automatically added to the session . Help for ndi . probe / newdocument is inherited from superclass NDI . ELEMENT numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . probe / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET probe - create a new ndi.probe object OBJ = ndi.probe(SESSION, NAME, REFERENCE, TYPE, SUBJECT_ID) or OBJ = ndi.probe(SESSION, NDI_DOCUMENT_OBJ) Creates an ndi.probe associated with an ndi.session object SESSION and with name NAME (a string that must start with a letter and contain no white space), reference number equal to REFERENCE (a non-negative integer), the TYPE of the probe (a string that must start with a letter and contain no white space). ndi.probe is a essentially an abstract class, and a specific implementation must be called. probestring - Produce a human-readable probe string PROBESTR = PROBESTRING(NDI_PROBE_OBJ) Returns the name and reference of a probe as a human-readable string. This is simply PROBESTR = [NDI_PROBE_OBJ.name ' _ ' in2str(NDI_PROBE_OBJ.reference)] resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . probe / EPOCHTABLE Help for ndi . probe / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET searchquery - return a search query for an ndi.document based on this element SQ = SEARCHQUERY ( NDI_ELEMENT_OBJ , [ EPOCHID ] ) Returns a search query for the fields of an NDI_DOCUMENT_OBJ of type 'ndi_document_element' with the corresponding 'name' and 'type' fields of the element NDI_ELEMENT_OBJ . Help for ndi . probe / searchquery is inherited from superclass NDI . ELEMENT t0_t1 - ** T0_T1 - return the t0_t1 ( beginning and end ) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK TODO : this must be a bug , it ' s just self - referential Help for ndi . probe / t0_t1 is inherited from superclass NDI . ELEMENT underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . probe / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET","title":"Methods help"},{"location":"reference/%2Bndi/query.m/","text":"CLASS ndi.query \u00b6 ndi . query - create a query object for searching the database Creates an ndi . query object , which has a single property SEARCH that is a structure array of search structures appropriate for use with vlt . data . fieldsearch . Tha is , SEARCH has the fields: Field: | Description --------------------------------------------------------------------------- field | A character string of the field of A to examine operation | The operation to perform . This operation determines | values of fields ' param1 ' and ' param2 '. |----------------------| | ' regexp ' - are there any regular expression matches between | the field value and ' param1 ' ? | ' exact_string ' - is the field value an exact string match for ' param1 ' ? | ' contains_string ' - is the field value a char array that contains ' param1 ' ? | ' exact_number ' - is the field value exactly ' param1 ' ( same size and values ) ? | ' lessthan ' - is the field value less than ' param1 ' ( and comparable size ) | ' lessthaneq ' - is the field value less than or equal to ' param1 ' ( and comparable size ) | ' greaterthan ' - is the field value greater than ' param1 ' ( and comparable size ) | ' greaterthaneq ' - is the field value greater than or equal to ' param1 ' ( and comparable size ) | 'ha sfield ' - is the field present ? ( no role for ' param1 ' or ' param2 ') | 'ha sanysubfield_contains_string ' - Is the field value an array of structs or cell array of structs | such that any has a field named ' param1 ' with a string that contains the string | in ' param2 ' ? | ' or ' - are any of the searchstruct elements specified in ' param1 ' true ? | ' isa ' - is ' param1 ' either a superclass or the document class itself of the ndi . document ? | ' depends_on ' - does the document depend on an item with name ' param1 ' and value ' param2 ' ? |----------------------| param1 | Search parameter 1. Meaning depends on ' operation ' ( see above ). param2 | Search parameter 2. Meaning depends on ' operation ' ( see above ). --------------------------------------------------------------------------- See vlt . data . fieldsearch for full documentation of the search structure . There are a few creator options: NDI_QUERY_OBJ = ndi . query ( SEARCHSTRUCT ) Accepts a SEARCHSTRUCT with the fields above NDI_QUERY_OBJ = ndi . query ( SEARCHCELLARRAY ) Accepts a cell array with SEARCHCELLARRAY = {' property1 ', value1 ,' property2 ', value2 , ...} This query is converted into a SEARCHSTRUCT with the ' regexp ' operator . NDI_QUERY_OBJ = ndi . query ( FIELD , OPERATION , PARAM1 , PARAM2 ) creates a SEARCHSTRUCT with the fields of the appropriate names . Superclasses \u00b6 none Properties \u00b6 Property Description searchstructure search structure Methods \u00b6 Method Description and add ndi.query objects or search for this ndi.query object or that ndi.query object query create a query object for searching the database searchcellarray2searchstructure convert a search cell array to a search structure searchstruct make a search structure from field, operation, param1, param2 inputs to_searchstructure convert an ndi.query object to a set of search structures Methods help \u00b6 and - add ndi.query objects C = AND ( A , B ) or C = A & B Combines the searches from A and B into a search C . The searchstructure field of C will be a concatenated version of those from A and B . The query C will only pass if all of the characteristics of A and B are satisfied . or - search for this ndi.query object or that ndi.query object C = OR ( A , B ) Produces a new ndi . query object C that is true if either ndi . query A or ndi . query B is true . query - create a query object for searching the database Creates an ndi . query object , which has a single property SEARCH that is a structure array of search structures appropriate for use with vlt . data . fieldsearch . Tha is , SEARCH has the fields: Field: | Description --------------------------------------------------------------------------- field | A character string of the field of A to examine operation | The operation to perform . This operation determines | values of fields ' param1 ' and ' param2 '. |----------------------| | ' regexp ' - are there any regular expression matches between | the field value and ' param1 ' ? | ' exact_string ' - is the field value an exact string match for ' param1 ' ? | ' contains_string ' - is the field value a char array that contains ' param1 ' ? | ' exact_number ' - is the field value exactly ' param1 ' ( same size and values ) ? | ' lessthan ' - is the field value less than ' param1 ' ( and comparable size ) | ' lessthaneq ' - is the field value less than or equal to ' param1 ' ( and comparable size ) | ' greaterthan ' - is the field value greater than ' param1 ' ( and comparable size ) | ' greaterthaneq ' - is the field value greater than or equal to ' param1 ' ( and comparable size ) | 'ha sfield ' - is the field present ? ( no role for ' param1 ' or ' param2 ') | 'ha sanysubfield_contains_string ' - Is the field value an array of structs or cell array of structs | such that any has a field named ' param1 ' with a string that contains the string | in ' param2 ' ? | ' or ' - are any of the searchstruct elements specified in ' param1 ' true ? | ' isa ' - is ' param1 ' either a superclass or the document class itself of the ndi . document ? | ' depends_on ' - does the document depend on an item with name ' param1 ' and value ' param2 ' ? |----------------------| param1 | Search parameter 1. Meaning depends on ' operation ' ( see above ). param2 | Search parameter 2. Meaning depends on ' operation ' ( see above ). --------------------------------------------------------------------------- See vlt . data . fieldsearch for full documentation of the search structure . There are a few creator options: NDI_QUERY_OBJ = ndi . query ( SEARCHSTRUCT ) Accepts a SEARCHSTRUCT with the fields above NDI_QUERY_OBJ = ndi . query ( SEARCHCELLARRAY ) Accepts a cell array with SEARCHCELLARRAY = {' property1 ', value1 ,' property2 ', value2 , ...} This query is converted into a SEARCHSTRUCT with the ' regexp ' operator . NDI_QUERY_OBJ = ndi . query ( FIELD , OPERATION , PARAM1 , PARAM2 ) creates a SEARCHSTRUCT with the fields of the appropriate names . searchcellarray2searchstructure - convert a search cell array to a search structure SEARCHSTRUCT = SEARCHCELLARRAY2SEARCHSTRUCTURE ( SEACHCELLARRAY ) Converts a cell array with SEARCHCELLARRAY = {' property1 ', value1 ,' property2 ', value2 , ...} into a SEARCHSTRUCT with the ' regexp ' operator in the case of a character ' value ' or the ' exact_number ' operator in the case of a non - character value . See also: vlt . data . fieldsearch , ndi . query / ndi . query searchstruct - make a search structure from field, operation, param1, param2 inputs SEARCHSTRUCT_OUT = SEARCHSTRUCT(FIELD, OPERATION, PARAM1, PARAM2) Creates search structure with the given fields FIELD, OPERATION, PARAM1, PARAM2. See also: vlt.data.fieldsearch, ndi.query/ndi.query to_searchstructure - convert an ndi.query object to a set of search structures SEARCHSTRUCTURE = TO_SEARCHSTRUCTURE(NDI_QUERY_OBJ) Converts an NDI_QUERY_OBJECT to a set of search structures without any ndi.query dependencies (see vlt.data.fieldsearch). See also: vlt.data.fieldsearch","title":"ndi.query"},{"location":"reference/%2Bndi/query.m/#class-ndiquery","text":"ndi . query - create a query object for searching the database Creates an ndi . query object , which has a single property SEARCH that is a structure array of search structures appropriate for use with vlt . data . fieldsearch . Tha is , SEARCH has the fields: Field: | Description --------------------------------------------------------------------------- field | A character string of the field of A to examine operation | The operation to perform . This operation determines | values of fields ' param1 ' and ' param2 '. |----------------------| | ' regexp ' - are there any regular expression matches between | the field value and ' param1 ' ? | ' exact_string ' - is the field value an exact string match for ' param1 ' ? | ' contains_string ' - is the field value a char array that contains ' param1 ' ? | ' exact_number ' - is the field value exactly ' param1 ' ( same size and values ) ? | ' lessthan ' - is the field value less than ' param1 ' ( and comparable size ) | ' lessthaneq ' - is the field value less than or equal to ' param1 ' ( and comparable size ) | ' greaterthan ' - is the field value greater than ' param1 ' ( and comparable size ) | ' greaterthaneq ' - is the field value greater than or equal to ' param1 ' ( and comparable size ) | 'ha sfield ' - is the field present ? ( no role for ' param1 ' or ' param2 ') | 'ha sanysubfield_contains_string ' - Is the field value an array of structs or cell array of structs | such that any has a field named ' param1 ' with a string that contains the string | in ' param2 ' ? | ' or ' - are any of the searchstruct elements specified in ' param1 ' true ? | ' isa ' - is ' param1 ' either a superclass or the document class itself of the ndi . document ? | ' depends_on ' - does the document depend on an item with name ' param1 ' and value ' param2 ' ? |----------------------| param1 | Search parameter 1. Meaning depends on ' operation ' ( see above ). param2 | Search parameter 2. Meaning depends on ' operation ' ( see above ). --------------------------------------------------------------------------- See vlt . data . fieldsearch for full documentation of the search structure . There are a few creator options: NDI_QUERY_OBJ = ndi . query ( SEARCHSTRUCT ) Accepts a SEARCHSTRUCT with the fields above NDI_QUERY_OBJ = ndi . query ( SEARCHCELLARRAY ) Accepts a cell array with SEARCHCELLARRAY = {' property1 ', value1 ,' property2 ', value2 , ...} This query is converted into a SEARCHSTRUCT with the ' regexp ' operator . NDI_QUERY_OBJ = ndi . query ( FIELD , OPERATION , PARAM1 , PARAM2 ) creates a SEARCHSTRUCT with the fields of the appropriate names .","title":"CLASS ndi.query"},{"location":"reference/%2Bndi/query.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndi/query.m/#properties","text":"Property Description searchstructure search structure","title":"Properties"},{"location":"reference/%2Bndi/query.m/#methods","text":"Method Description and add ndi.query objects or search for this ndi.query object or that ndi.query object query create a query object for searching the database searchcellarray2searchstructure convert a search cell array to a search structure searchstruct make a search structure from field, operation, param1, param2 inputs to_searchstructure convert an ndi.query object to a set of search structures","title":"Methods"},{"location":"reference/%2Bndi/query.m/#methods-help","text":"and - add ndi.query objects C = AND ( A , B ) or C = A & B Combines the searches from A and B into a search C . The searchstructure field of C will be a concatenated version of those from A and B . The query C will only pass if all of the characteristics of A and B are satisfied . or - search for this ndi.query object or that ndi.query object C = OR ( A , B ) Produces a new ndi . query object C that is true if either ndi . query A or ndi . query B is true . query - create a query object for searching the database Creates an ndi . query object , which has a single property SEARCH that is a structure array of search structures appropriate for use with vlt . data . fieldsearch . Tha is , SEARCH has the fields: Field: | Description --------------------------------------------------------------------------- field | A character string of the field of A to examine operation | The operation to perform . This operation determines | values of fields ' param1 ' and ' param2 '. |----------------------| | ' regexp ' - are there any regular expression matches between | the field value and ' param1 ' ? | ' exact_string ' - is the field value an exact string match for ' param1 ' ? | ' contains_string ' - is the field value a char array that contains ' param1 ' ? | ' exact_number ' - is the field value exactly ' param1 ' ( same size and values ) ? | ' lessthan ' - is the field value less than ' param1 ' ( and comparable size ) | ' lessthaneq ' - is the field value less than or equal to ' param1 ' ( and comparable size ) | ' greaterthan ' - is the field value greater than ' param1 ' ( and comparable size ) | ' greaterthaneq ' - is the field value greater than or equal to ' param1 ' ( and comparable size ) | 'ha sfield ' - is the field present ? ( no role for ' param1 ' or ' param2 ') | 'ha sanysubfield_contains_string ' - Is the field value an array of structs or cell array of structs | such that any has a field named ' param1 ' with a string that contains the string | in ' param2 ' ? | ' or ' - are any of the searchstruct elements specified in ' param1 ' true ? | ' isa ' - is ' param1 ' either a superclass or the document class itself of the ndi . document ? | ' depends_on ' - does the document depend on an item with name ' param1 ' and value ' param2 ' ? |----------------------| param1 | Search parameter 1. Meaning depends on ' operation ' ( see above ). param2 | Search parameter 2. Meaning depends on ' operation ' ( see above ). --------------------------------------------------------------------------- See vlt . data . fieldsearch for full documentation of the search structure . There are a few creator options: NDI_QUERY_OBJ = ndi . query ( SEARCHSTRUCT ) Accepts a SEARCHSTRUCT with the fields above NDI_QUERY_OBJ = ndi . query ( SEARCHCELLARRAY ) Accepts a cell array with SEARCHCELLARRAY = {' property1 ', value1 ,' property2 ', value2 , ...} This query is converted into a SEARCHSTRUCT with the ' regexp ' operator . NDI_QUERY_OBJ = ndi . query ( FIELD , OPERATION , PARAM1 , PARAM2 ) creates a SEARCHSTRUCT with the fields of the appropriate names . searchcellarray2searchstructure - convert a search cell array to a search structure SEARCHSTRUCT = SEARCHCELLARRAY2SEARCHSTRUCTURE ( SEACHCELLARRAY ) Converts a cell array with SEARCHCELLARRAY = {' property1 ', value1 ,' property2 ', value2 , ...} into a SEARCHSTRUCT with the ' regexp ' operator in the case of a character ' value ' or the ' exact_number ' operator in the case of a non - character value . See also: vlt . data . fieldsearch , ndi . query / ndi . query searchstruct - make a search structure from field, operation, param1, param2 inputs SEARCHSTRUCT_OUT = SEARCHSTRUCT(FIELD, OPERATION, PARAM1, PARAM2) Creates search structure with the given fields FIELD, OPERATION, PARAM1, PARAM2. See also: vlt.data.fieldsearch, ndi.query/ndi.query to_searchstructure - convert an ndi.query object to a set of search structures SEARCHSTRUCTURE = TO_SEARCHSTRUCTURE(NDI_QUERY_OBJ) Converts an NDI_QUERY_OBJECT to a set of search structures without any ndi.query dependencies (see vlt.data.fieldsearch). See also: vlt.data.fieldsearch","title":"Methods help"},{"location":"reference/%2Bndi/session.m/","text":"CLASS ndi.session \u00b6 NDI.SESSION - NDI.SESSION object class Superclasses \u00b6 handle Properties \u00b6 Property Description reference A string reference for the session identifier A unique identifier syncgraph An ndi.time.syncgraph object related to this session cache An ndi.cache object for the session's use Methods \u00b6 Method Description addlistener ADDLISTENER Add listener for event. daqsystem_add Add a sampling device to a ndi.session object daqsystem_clear remove all DAQSYSTEM objects from an ndi.session daqsystem_load Load daqsystem objects from an ndi.session daqsystem_rm Remove a sampling device from an ndi.session object database_add Add an ndi.document to an ndi.session object database_clear deletes/removes all entries from the database associated with an session database_closebinarydoc close and unlock an ndi.database.binarydoc database_openbinarydoc open the ndi.database.binarydoc channel of an ndi.document database_rm Remove an ndi.document with a given document ID from an ndi.session object database_search Search for an ndi.document in a database of an ndi.session object delete DELETE Delete a handle object. eq are 2 NDI_SESSIONS equal? findexpobj search an ndi.session for a specific object given name and classname findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getelements Return all ndi.element objects that are found in session database getpath Return the path of the session getprobes Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries gt > (GT) Greater than relation for handles. id return the identifier of an ndi.session object isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. newdocument create a new ndi.database document of type ndi.document notify NOTIFY Notify listeners of event. searchquery return a search query for database objects in this session session Create a new ndi.session object syncgraph_addrule add an ndi.time.syncrule to the syncgraph syncgraph_rmrule remove an ndi.time.syncrule from the syncgraph unique_reference_string return the unique reference string for this session Methods help \u00b6 addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , NDI . SESSION , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . session / addlistener is inherited from superclass HANDLE Documentation for ndi . session / addlistener doc handle . addlistener daqsystem_add - Add a sampling device to a ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_ADD(NDI_SESSION_OBJ, DEV) Adds the device DEV to the ndi.session NDI_SESSION_OBJ The devices can be accessed by referencing NDI_SESSION_OBJ.device See also: DAQSYSTEM_RM, ndi.session daqsystem_clear - remove all DAQSYSTEM objects from an ndi.session NDI_SESSION_OBJ = DAQSYSTEM_CLEAR(NDI_SESSION_OBJ) Permanently removes all ndi.daq.system objects from an ndi.session. Be sure you mean it! daqsystem_load - Load daqsystem objects from an ndi.session DEV = DAQSYSTEM_LOAD ( NDI_SESSION_OBJ , PARAM1 , VALUE1 , PARAM2 , VALUE2 , ... ) or DEV = DAQSYSTEM_LOAD ( NDI_SESSION_OBJ ) Returns the ndi . daq . system objects in the ndi . session with metadata parameters PARAMS1 that matches VALUE1 , PARAMS2 that matches VALUE2 , etc . One can also search for ' name ' as a parameter ; this will be automatically changed to search for database documents with fields ' ndi_document.name ' equal to the corresponding value . If more than one object is requested , then DEV will be a cell list of matching objects . Otherwise , the object will be a single element . If there are no matches , empty ( [] ) is returned . daqsystem_rm - Remove a sampling device from an ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_RM(NDI_SESSION_OBJ, DEV) Removes the device DEV from the device list. See also: DAQSYSTEM_ADD, ndi.session database_add - Add an ndi.document to an ndi.session object NDI_SESSION_OBJ = DATABASE_ADD(NDI_SESSION_OBJ, NDI_DOCUMENT_OBJ) Adds the ndi.document NDI_DOCUMENT_OBJ to the ndi.session NDI_SESSION_OBJ. NDI_DOCUMENT_OBJ can also be a cell array of ndi.document objects, which will all be added in turn. The database can be queried by calling NDI_SESSION_OBJ/SEARCH See also: DATABASE_RM, ndi.session, ndi.database, ndi.session/SEARCH database_clear - deletes/removes all entries from the database associated with an session DATABASE_CLEAR ( NDI_SESSION_OBJ , AREYOUSURE ) Removes all documents from the NDI_SESSION_OBJ object . Use with care . If AREYOUSURE is ' yes ' then the function will proceed . Otherwise , it will not . database_closebinarydoc - close and unlock an ndi.database.binarydoc [ NDI_BINARYDOC_OBJ ] = DATABASE_CLOSEBINARYDOC ( NDI_DATABASE_OBJ , NDI_BINARYDOC_OBJ ) Close and lock an NDI_BINARYDOC_OBJ . The NDI_BINARYDOC_OBJ must be unlocked in the database , which is why it is necessary to call this function through the session object . database_openbinarydoc - open the ndi.database.binarydoc channel of an ndi.document NDI_BINARYDOC_OBJ = DATABASE_OPENBINARYDOC ( NDI_SESSION_OBJ , NDI_DOCUMENT_OR_ID ) Return the open ndi . database . binarydoc object that corresponds to an ndi . document and NDI_DOCUMENT_OR_ID can be either the document id of an ndi . document or an ndi . document object itsef . Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi . session / CLOSEBINARYDOC . The locked nature of the binary doc is a property of the database , not the document , which is why the database is needed in the method . database_rm - Remove an ndi.document with a given document ID from an ndi.session object NDI_SESSION_OBJ = DATABASE_RM ( NDI_SESSION_OBJ , DOC_UNIQUE_ID ) or NDI_SESSION_OBJ = DATABASE_RM ( NDI_SESSION_OBJ , DOC ) Removes an ndi . document with document id DOC_UNIQUE_ID from the NDI_SESSION_OBJ . database . In the second form , if an ndi . document or cell array of NDI_DOCUMENTS is passed for DOC , then the document unique ids are retrieved and they are removed in turn . If DOC / DOC_UNIQUE_ID is empty , no action is taken . This function also takes parameters as name / value pairs that modify its behavior : Parameter ( default ) | Description -------------------------------------------------------------------------------- ErrIfNotFound ( 0 ) | Produce an error if an ID to be deleted is not found . See also : DATABASE_ADD , ndi . session database_search - Search for an ndi.document in a database of an ndi.session object NDI_DOCUMENT_OBJ = DATABASE_SEARCH(NDI_SESSION_OBJ, SEARCHPARAMETERS) Given search parameters, which are a cell list {'PARAM1', VALUE1, 'PARAM2, VALUE2, ...}, the database associated with the ndi.session object is searched. Matches are returned in a cell list NDI_DOCUMENT_OBJ. delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also NDI . SESSION , NDI . SESSION / ISVALID , CLEAR Help for ndi . session / delete is inherited from superclass HANDLE Documentation for ndi . session / delete doc handle . delete eq - are 2 NDI_SESSIONS equal? B = EQ ( E1 , E2 ) Returns 1 if and only if the sessions have the same unique reference number . findexpobj - search an ndi.session for a specific object given name and classname OBJ = FINDEXPOBJ ( NDI_EXPERIMNENT_OBJ , OBJ_NAME , OBJ_CLASSNAME ) Examines the DAQSYSTEM list , DATABASE , and PROBELIST for an object with name OBJ_NAME and classname OBJ_CLASSNAME . If no object is found , OBJ will be empty ( [] ) . findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , NDI . SESSION Help for ndi . session / findobj is inherited from superclass HANDLE Documentation for ndi . session / findobj doc handle . findobj findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also NDI . SESSION , NDI . SESSION / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for ndi . session / findprop is inherited from superclass HANDLE Documentation for ndi . session / findprop doc handle . findprop ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION , NDI . SESSION / EQ , NDI . SESSION / GT , NDI . SESSION / LE , NDI . SESSION / LT , NDI . SESSION / NE Help for ndi . session / ge is inherited from superclass HANDLE Documentation for ndi . session / ge doc handle . ge getelements - Return all ndi.element objects that are found in session database ELEMENTS = GETELEMENTS ( NDI_SESSION_OBJ , ... ) Examines all the database of NDI_SESSION_OBJ and returns all ndi . element entries . ELEMENTS is a cell array of ndi . element . * objects . ELEMENTS = GETELEMENTS ( NDI_SESSION_OBJ , ' PROP1 ' , VALUE1 , ' PROP2 ' , VALUE2 ... ) returns only those probes for which ' PROP1 ' has a value of VALUE1 , ' PROP2 ' has a value of VALUE2 , etc . Properties of elements are ' element.name ' , ' element.type ' , ' element.direct ' , and ' probe.name ' , ' probe.type ' , and ' probe.reference ' . getpath - Return the path of the session P = GETPATH(NDI_SESSION_OBJ) Returns the path of an ndi.session object. The path is some sort of reference to the storage location of the session. This might be a URL, or a file directory, depending upon the subclass. In the ndi.session class, this returns empty. See also: ndi.session getprobes - Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries PROBES = GETPROBES ( NDI_SESSION_OBJ , ... ) Examines all ndi . daq . system entries in the NDI_SESSION_OBJ 's device array and returns all ndi . probe .* entries that can be constructed from each device 's ndi . epoch . epochprobemap entries . PROBES is a cell array of ndi . probe .* objects . One can pass additional arguments that specify the classnames of the probes that are returned : PROBES = GETPROBES ( NDI_SESSION_OBJ , CLASSMATCH ) only probes that are members of the classes CLASSMATCH etc . , are returned . PROBES = GETPROBES ( NDI_SESSION_OBJ , 'PROP1' , VALUE1 , 'PROP2' , VALUE2 ... ) returns only those probes for which 'PROP1' has a value of VALUE1 , 'PROP2' has a value of VALUE2 , etc . Properties of probes are 'name' , 'reference' , and 'type' , and 'subject_ID' . gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION , NDI . SESSION / EQ , NDI . SESSION / GE , NDI . SESSION / LE , NDI . SESSION / LT , NDI . SESSION / NE Help for ndi . session / gt is inherited from superclass HANDLE Documentation for ndi . session / gt doc handle . gt id - return the identifier of an ndi.session object IDENTIFIER = ID(NDI_SESSION_OBJ) Returns the unique identifier of an ndi.session object. isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDI . SESSION , NDI . SESSION / DELETE Help for ndi . session / isvalid is inherited from superclass HANDLE Documentation for ndi . session / isvalid doc handle . isvalid le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION , NDI . SESSION / EQ , NDI . SESSION / GE , NDI . SESSION / GT , NDI . SESSION / LT , NDI . SESSION / NE Help for ndi . session / le is inherited from superclass HANDLE Documentation for ndi . session / le doc handle . le listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , NDI . SESSION , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . session / listener is inherited from superclass HANDLE Documentation for ndi . session / listener doc handle . listener lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION , NDI . SESSION / EQ , NDI . SESSION / GE , NDI . SESSION / GT , NDI . SESSION / LE , NDI . SESSION / NE Help for ndi . session / lt is inherited from superclass HANDLE Documentation for ndi . session / lt doc handle . lt ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION , NDI . SESSION / EQ , NDI . SESSION / GE , NDI . SESSION / GT , NDI . SESSION / LE , NDI . SESSION / LT Help for ndi . session / ne is inherited from superclass HANDLE Documentation for ndi . session / ne doc handle . ne newdocument - create a new ndi.database document of type ndi.document NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_SESSION_OBJ , [ DOCUMENT_TYPE ] , 'PROPERTY1' , VALUE1 , ...) Creates an empty database document NDI_DOCUMENT_OBJ . DOCUMENT_TYPE is an optional argument and can be any type that confirms to the . json files in $ NDI_COMMON / database_documents /*, a URL to such a file, or a full path filename. If DOCUMENT_TYPE is not specified, it is taken to be 'ndi_document.json'. If additional PROPERTY values are specified, they are set to the VALUES indicated. Example: mydoc = ndi_session_obj.newdocument('ndi_document','ndi_document.name','myname'); notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDI . SESSION , NDI . SESSION / ADDLISTENER , NDI . SESSION / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndi . session / notify is inherited from superclass HANDLE Documentation for ndi . session / notify doc handle . notify searchquery - return a search query for database objects in this session SQ = SEARCHQUERY ( NDI_SESSION_OBJ ) Returns a search query that will match all ndi . document objects that were generated by this session . SQ = { 'ndi_document.session_id', ndi_session_obj.id() } ; Example : mydoc = ndi_session_obj . newdocument ( 'ndi_document' , 'ndi_document.name' , 'myname' ); session - Create a new ndi.session object NDI_SESSION_OBJ = ndi . session ( REFERENCE ) Creates a new ndi . session object . The session has a unique reference REFERENCE . This class is an abstract class and typically an end user will open a specific subclass such as ndi . session . dir . ndi . session objects can access 0 or more ndi . daq . system objects . See also : ndi . session / DAQSYSTEM_ADD , ndi . session / DAQSYSTEM_RM , ndi . session / GETPATH , ndi . session / GETREFERENCE syncgraph_addrule - add an ndi.time.syncrule to the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_ADDRULE(NDI_SESSION_OBJ, RULE) Adds the ndi.time.syncrule RULE to the ndi.time.syncgraph of the ndi.session object NDI_SESSION_OBJ. syncgraph_rmrule - remove an ndi.time.syncrule from the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_RMRULE(NDI_SESSION_OBJ, INDEX) Removes the INDEXth ndi.time.syncrule from the ndi.time.syncgraph of the ndi.session object NDI_SESSION_OBJ. unique_reference_string - return the unique reference string for this session REFSTR = UNIQUE_REFERENCE_STRING ( NDI_SESSION_OBJ ) Returns the unique reference string for the ndi . session . REFSTR is a combination of the REFERENCE property of NDI_SESSION_OBJ and the UNIQUE_REFERENCE property of NDI_SESSION_OBJ , joined with a ' _ ' .","title":"ndi.session"},{"location":"reference/%2Bndi/session.m/#class-ndisession","text":"NDI.SESSION - NDI.SESSION object class","title":"CLASS ndi.session"},{"location":"reference/%2Bndi/session.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"reference/%2Bndi/session.m/#properties","text":"Property Description reference A string reference for the session identifier A unique identifier syncgraph An ndi.time.syncgraph object related to this session cache An ndi.cache object for the session's use","title":"Properties"},{"location":"reference/%2Bndi/session.m/#methods","text":"Method Description addlistener ADDLISTENER Add listener for event. daqsystem_add Add a sampling device to a ndi.session object daqsystem_clear remove all DAQSYSTEM objects from an ndi.session daqsystem_load Load daqsystem objects from an ndi.session daqsystem_rm Remove a sampling device from an ndi.session object database_add Add an ndi.document to an ndi.session object database_clear deletes/removes all entries from the database associated with an session database_closebinarydoc close and unlock an ndi.database.binarydoc database_openbinarydoc open the ndi.database.binarydoc channel of an ndi.document database_rm Remove an ndi.document with a given document ID from an ndi.session object database_search Search for an ndi.document in a database of an ndi.session object delete DELETE Delete a handle object. eq are 2 NDI_SESSIONS equal? findexpobj search an ndi.session for a specific object given name and classname findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getelements Return all ndi.element objects that are found in session database getpath Return the path of the session getprobes Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries gt > (GT) Greater than relation for handles. id return the identifier of an ndi.session object isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. newdocument create a new ndi.database document of type ndi.document notify NOTIFY Notify listeners of event. searchquery return a search query for database objects in this session session Create a new ndi.session object syncgraph_addrule add an ndi.time.syncrule to the syncgraph syncgraph_rmrule remove an ndi.time.syncrule from the syncgraph unique_reference_string return the unique reference string for this session","title":"Methods"},{"location":"reference/%2Bndi/session.m/#methods-help","text":"addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , NDI . SESSION , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . session / addlistener is inherited from superclass HANDLE Documentation for ndi . session / addlistener doc handle . addlistener daqsystem_add - Add a sampling device to a ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_ADD(NDI_SESSION_OBJ, DEV) Adds the device DEV to the ndi.session NDI_SESSION_OBJ The devices can be accessed by referencing NDI_SESSION_OBJ.device See also: DAQSYSTEM_RM, ndi.session daqsystem_clear - remove all DAQSYSTEM objects from an ndi.session NDI_SESSION_OBJ = DAQSYSTEM_CLEAR(NDI_SESSION_OBJ) Permanently removes all ndi.daq.system objects from an ndi.session. Be sure you mean it! daqsystem_load - Load daqsystem objects from an ndi.session DEV = DAQSYSTEM_LOAD ( NDI_SESSION_OBJ , PARAM1 , VALUE1 , PARAM2 , VALUE2 , ... ) or DEV = DAQSYSTEM_LOAD ( NDI_SESSION_OBJ ) Returns the ndi . daq . system objects in the ndi . session with metadata parameters PARAMS1 that matches VALUE1 , PARAMS2 that matches VALUE2 , etc . One can also search for ' name ' as a parameter ; this will be automatically changed to search for database documents with fields ' ndi_document.name ' equal to the corresponding value . If more than one object is requested , then DEV will be a cell list of matching objects . Otherwise , the object will be a single element . If there are no matches , empty ( [] ) is returned . daqsystem_rm - Remove a sampling device from an ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_RM(NDI_SESSION_OBJ, DEV) Removes the device DEV from the device list. See also: DAQSYSTEM_ADD, ndi.session database_add - Add an ndi.document to an ndi.session object NDI_SESSION_OBJ = DATABASE_ADD(NDI_SESSION_OBJ, NDI_DOCUMENT_OBJ) Adds the ndi.document NDI_DOCUMENT_OBJ to the ndi.session NDI_SESSION_OBJ. NDI_DOCUMENT_OBJ can also be a cell array of ndi.document objects, which will all be added in turn. The database can be queried by calling NDI_SESSION_OBJ/SEARCH See also: DATABASE_RM, ndi.session, ndi.database, ndi.session/SEARCH database_clear - deletes/removes all entries from the database associated with an session DATABASE_CLEAR ( NDI_SESSION_OBJ , AREYOUSURE ) Removes all documents from the NDI_SESSION_OBJ object . Use with care . If AREYOUSURE is ' yes ' then the function will proceed . Otherwise , it will not . database_closebinarydoc - close and unlock an ndi.database.binarydoc [ NDI_BINARYDOC_OBJ ] = DATABASE_CLOSEBINARYDOC ( NDI_DATABASE_OBJ , NDI_BINARYDOC_OBJ ) Close and lock an NDI_BINARYDOC_OBJ . The NDI_BINARYDOC_OBJ must be unlocked in the database , which is why it is necessary to call this function through the session object . database_openbinarydoc - open the ndi.database.binarydoc channel of an ndi.document NDI_BINARYDOC_OBJ = DATABASE_OPENBINARYDOC ( NDI_SESSION_OBJ , NDI_DOCUMENT_OR_ID ) Return the open ndi . database . binarydoc object that corresponds to an ndi . document and NDI_DOCUMENT_OR_ID can be either the document id of an ndi . document or an ndi . document object itsef . Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi . session / CLOSEBINARYDOC . The locked nature of the binary doc is a property of the database , not the document , which is why the database is needed in the method . database_rm - Remove an ndi.document with a given document ID from an ndi.session object NDI_SESSION_OBJ = DATABASE_RM ( NDI_SESSION_OBJ , DOC_UNIQUE_ID ) or NDI_SESSION_OBJ = DATABASE_RM ( NDI_SESSION_OBJ , DOC ) Removes an ndi . document with document id DOC_UNIQUE_ID from the NDI_SESSION_OBJ . database . In the second form , if an ndi . document or cell array of NDI_DOCUMENTS is passed for DOC , then the document unique ids are retrieved and they are removed in turn . If DOC / DOC_UNIQUE_ID is empty , no action is taken . This function also takes parameters as name / value pairs that modify its behavior : Parameter ( default ) | Description -------------------------------------------------------------------------------- ErrIfNotFound ( 0 ) | Produce an error if an ID to be deleted is not found . See also : DATABASE_ADD , ndi . session database_search - Search for an ndi.document in a database of an ndi.session object NDI_DOCUMENT_OBJ = DATABASE_SEARCH(NDI_SESSION_OBJ, SEARCHPARAMETERS) Given search parameters, which are a cell list {'PARAM1', VALUE1, 'PARAM2, VALUE2, ...}, the database associated with the ndi.session object is searched. Matches are returned in a cell list NDI_DOCUMENT_OBJ. delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also NDI . SESSION , NDI . SESSION / ISVALID , CLEAR Help for ndi . session / delete is inherited from superclass HANDLE Documentation for ndi . session / delete doc handle . delete eq - are 2 NDI_SESSIONS equal? B = EQ ( E1 , E2 ) Returns 1 if and only if the sessions have the same unique reference number . findexpobj - search an ndi.session for a specific object given name and classname OBJ = FINDEXPOBJ ( NDI_EXPERIMNENT_OBJ , OBJ_NAME , OBJ_CLASSNAME ) Examines the DAQSYSTEM list , DATABASE , and PROBELIST for an object with name OBJ_NAME and classname OBJ_CLASSNAME . If no object is found , OBJ will be empty ( [] ) . findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , NDI . SESSION Help for ndi . session / findobj is inherited from superclass HANDLE Documentation for ndi . session / findobj doc handle . findobj findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also NDI . SESSION , NDI . SESSION / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for ndi . session / findprop is inherited from superclass HANDLE Documentation for ndi . session / findprop doc handle . findprop ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION , NDI . SESSION / EQ , NDI . SESSION / GT , NDI . SESSION / LE , NDI . SESSION / LT , NDI . SESSION / NE Help for ndi . session / ge is inherited from superclass HANDLE Documentation for ndi . session / ge doc handle . ge getelements - Return all ndi.element objects that are found in session database ELEMENTS = GETELEMENTS ( NDI_SESSION_OBJ , ... ) Examines all the database of NDI_SESSION_OBJ and returns all ndi . element entries . ELEMENTS is a cell array of ndi . element . * objects . ELEMENTS = GETELEMENTS ( NDI_SESSION_OBJ , ' PROP1 ' , VALUE1 , ' PROP2 ' , VALUE2 ... ) returns only those probes for which ' PROP1 ' has a value of VALUE1 , ' PROP2 ' has a value of VALUE2 , etc . Properties of elements are ' element.name ' , ' element.type ' , ' element.direct ' , and ' probe.name ' , ' probe.type ' , and ' probe.reference ' . getpath - Return the path of the session P = GETPATH(NDI_SESSION_OBJ) Returns the path of an ndi.session object. The path is some sort of reference to the storage location of the session. This might be a URL, or a file directory, depending upon the subclass. In the ndi.session class, this returns empty. See also: ndi.session getprobes - Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries PROBES = GETPROBES ( NDI_SESSION_OBJ , ... ) Examines all ndi . daq . system entries in the NDI_SESSION_OBJ 's device array and returns all ndi . probe .* entries that can be constructed from each device 's ndi . epoch . epochprobemap entries . PROBES is a cell array of ndi . probe .* objects . One can pass additional arguments that specify the classnames of the probes that are returned : PROBES = GETPROBES ( NDI_SESSION_OBJ , CLASSMATCH ) only probes that are members of the classes CLASSMATCH etc . , are returned . PROBES = GETPROBES ( NDI_SESSION_OBJ , 'PROP1' , VALUE1 , 'PROP2' , VALUE2 ... ) returns only those probes for which 'PROP1' has a value of VALUE1 , 'PROP2' has a value of VALUE2 , etc . Properties of probes are 'name' , 'reference' , and 'type' , and 'subject_ID' . gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION , NDI . SESSION / EQ , NDI . SESSION / GE , NDI . SESSION / LE , NDI . SESSION / LT , NDI . SESSION / NE Help for ndi . session / gt is inherited from superclass HANDLE Documentation for ndi . session / gt doc handle . gt id - return the identifier of an ndi.session object IDENTIFIER = ID(NDI_SESSION_OBJ) Returns the unique identifier of an ndi.session object. isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDI . SESSION , NDI . SESSION / DELETE Help for ndi . session / isvalid is inherited from superclass HANDLE Documentation for ndi . session / isvalid doc handle . isvalid le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION , NDI . SESSION / EQ , NDI . SESSION / GE , NDI . SESSION / GT , NDI . SESSION / LT , NDI . SESSION / NE Help for ndi . session / le is inherited from superclass HANDLE Documentation for ndi . session / le doc handle . le listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , NDI . SESSION , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . session / listener is inherited from superclass HANDLE Documentation for ndi . session / listener doc handle . listener lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION , NDI . SESSION / EQ , NDI . SESSION / GE , NDI . SESSION / GT , NDI . SESSION / LE , NDI . SESSION / NE Help for ndi . session / lt is inherited from superclass HANDLE Documentation for ndi . session / lt doc handle . lt ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION , NDI . SESSION / EQ , NDI . SESSION / GE , NDI . SESSION / GT , NDI . SESSION / LE , NDI . SESSION / LT Help for ndi . session / ne is inherited from superclass HANDLE Documentation for ndi . session / ne doc handle . ne newdocument - create a new ndi.database document of type ndi.document NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_SESSION_OBJ , [ DOCUMENT_TYPE ] , 'PROPERTY1' , VALUE1 , ...) Creates an empty database document NDI_DOCUMENT_OBJ . DOCUMENT_TYPE is an optional argument and can be any type that confirms to the . json files in $ NDI_COMMON / database_documents /*, a URL to such a file, or a full path filename. If DOCUMENT_TYPE is not specified, it is taken to be 'ndi_document.json'. If additional PROPERTY values are specified, they are set to the VALUES indicated. Example: mydoc = ndi_session_obj.newdocument('ndi_document','ndi_document.name','myname'); notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDI . SESSION , NDI . SESSION / ADDLISTENER , NDI . SESSION / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndi . session / notify is inherited from superclass HANDLE Documentation for ndi . session / notify doc handle . notify searchquery - return a search query for database objects in this session SQ = SEARCHQUERY ( NDI_SESSION_OBJ ) Returns a search query that will match all ndi . document objects that were generated by this session . SQ = { 'ndi_document.session_id', ndi_session_obj.id() } ; Example : mydoc = ndi_session_obj . newdocument ( 'ndi_document' , 'ndi_document.name' , 'myname' ); session - Create a new ndi.session object NDI_SESSION_OBJ = ndi . session ( REFERENCE ) Creates a new ndi . session object . The session has a unique reference REFERENCE . This class is an abstract class and typically an end user will open a specific subclass such as ndi . session . dir . ndi . session objects can access 0 or more ndi . daq . system objects . See also : ndi . session / DAQSYSTEM_ADD , ndi . session / DAQSYSTEM_RM , ndi . session / GETPATH , ndi . session / GETREFERENCE syncgraph_addrule - add an ndi.time.syncrule to the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_ADDRULE(NDI_SESSION_OBJ, RULE) Adds the ndi.time.syncrule RULE to the ndi.time.syncgraph of the ndi.session object NDI_SESSION_OBJ. syncgraph_rmrule - remove an ndi.time.syncrule from the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_RMRULE(NDI_SESSION_OBJ, INDEX) Removes the INDEXth ndi.time.syncrule from the ndi.time.syncgraph of the ndi.session object NDI_SESSION_OBJ. unique_reference_string - return the unique reference string for this session REFSTR = UNIQUE_REFERENCE_STRING ( NDI_SESSION_OBJ ) Returns the unique reference string for the ndi . session . REFSTR is a combination of the REFERENCE property of NDI_SESSION_OBJ and the UNIQUE_REFERENCE property of NDI_SESSION_OBJ , joined with a ' _ ' .","title":"Methods help"},{"location":"reference/%2Bndi/subject.m/","text":"CLASS ndi.subject \u00b6 ndi . subject - an object describing the subject of a measurement or stimulation ndi . subject is an object that stores information about the subject of an ndi . element . Each ndi . element object must have a subject ; the subject associated with the element is a key defining feature of an ndi . element object . ndi . subject Properties : local_identifier - A string that is a unique global identifier but that also has meaning within an individual lab . Must include an '@' character that identifies the lab . For example : anteater23 @nosuchlab . org description - A string of description that is free for the user to choose . ndi . subject Methods : subject - Create a new ndi . subject object newdocument - Create an ndi . document based on an ndi . subject searchquery - Search for an ndi . document representation of an ndi . subject isvalidlocalidentifierstring - Is a string a valid local_identifier string ? ( Static ) does_subjectstring_match_session_document - Does an ndi . subject object already have a representation in an ndi . database ? ( Static ) Superclasses \u00b6 ndi.ido , ndi.documentservice Properties \u00b6 Property Description local_identifier A string that is a local identifier in the lab, e.g. anteater23@nosuchlab.org description A string description identifier A string that is a local identifier in the lab, e.g. anteater23@nosuchlab.org Methods \u00b6 Method Description does_subjectstring_match_session_document does a subject string match a document? id return the identifier of an ndi.ido object isvalidlocalidentifierstring is this a valid local identifier string? ndi_unique_id Generate a unique ID number for NDI projects newdocument return a new database document of type ndi.document based on a subject searchquery return a search query for an ndi.document based on this element subject create a new ndi.subject object Methods help \u00b6 does_subjectstring_match_session_document - does a subject string match a document? [ B , SUBJECT_ID ] = DOES_SUBJECTSTRING_MATCH_SESSION_DOCUMENT ( NDI_SESSION_OBJ , ... SUBJECTSTRING , MAKEIT ) Given a SUBJECTSTRING , which is either the local identifier for a subject in the ndi . session object , or a document ID in the database , determine if the SUBJECTSTRING corresponds to an ndi . document already in the database . If so , then the ID of that document is returned in SUBJECT_ID and B is 1 . If it is not there , and if MAKEIT is 1 , then a new entry is made and the document id is returned in SUBJECT_ID . If MAKEIT is 0 , and it is not there , then B is 0 and SUBJECT_ID is empty . id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . subject / id is inherited from superclass NDI . IDO isvalidlocalidentifierstring - is this a valid local identifier string? [ B , MSG ] = ISVALIDLOCALIDENTIFIERSTRING ( LOCAL_IDENTIFIER ) Returns 1 if the input LOCAL_IDENTIFIER is a character string and if it has an ' @ ' in it . If B is 0 , then an error message string is returned in MSG . ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . subject . ndi_unique_id is inherited from superclass NDI . IDO newdocument - return a new database document of type ndi.document based on a subject NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_SUBJECT_OBJ) Creates a new ndi.document of type 'ndi_document_subject'. searchquery - return a search query for an ndi.document based on this element SQ = SEARCHQUERY(NDI_SUBJECT_OBJ) subject - create a new ndi.subject object NDI_SUBJECT_OBJ = ndi.subject(LOCAL_IDENTIFIER, DESCRIPTION) or NDI_SUBJECT_OBJ = ndi.subject(NDI_SESSION_OBJ, NDI_SUBJECT_DOCUMENT) Creates an ndi.subject object, either from a local identifier name or an ndi.session object and an ndi.document that describes the ndi.subject object.","title":"ndi.subject"},{"location":"reference/%2Bndi/subject.m/#class-ndisubject","text":"ndi . subject - an object describing the subject of a measurement or stimulation ndi . subject is an object that stores information about the subject of an ndi . element . Each ndi . element object must have a subject ; the subject associated with the element is a key defining feature of an ndi . element object . ndi . subject Properties : local_identifier - A string that is a unique global identifier but that also has meaning within an individual lab . Must include an '@' character that identifies the lab . For example : anteater23 @nosuchlab . org description - A string of description that is free for the user to choose . ndi . subject Methods : subject - Create a new ndi . subject object newdocument - Create an ndi . document based on an ndi . subject searchquery - Search for an ndi . document representation of an ndi . subject isvalidlocalidentifierstring - Is a string a valid local_identifier string ? ( Static ) does_subjectstring_match_session_document - Does an ndi . subject object already have a representation in an ndi . database ? ( Static )","title":"CLASS ndi.subject"},{"location":"reference/%2Bndi/subject.m/#superclasses","text":"ndi.ido , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/subject.m/#properties","text":"Property Description local_identifier A string that is a local identifier in the lab, e.g. anteater23@nosuchlab.org description A string description identifier A string that is a local identifier in the lab, e.g. anteater23@nosuchlab.org","title":"Properties"},{"location":"reference/%2Bndi/subject.m/#methods","text":"Method Description does_subjectstring_match_session_document does a subject string match a document? id return the identifier of an ndi.ido object isvalidlocalidentifierstring is this a valid local identifier string? ndi_unique_id Generate a unique ID number for NDI projects newdocument return a new database document of type ndi.document based on a subject searchquery return a search query for an ndi.document based on this element subject create a new ndi.subject object","title":"Methods"},{"location":"reference/%2Bndi/subject.m/#methods-help","text":"does_subjectstring_match_session_document - does a subject string match a document? [ B , SUBJECT_ID ] = DOES_SUBJECTSTRING_MATCH_SESSION_DOCUMENT ( NDI_SESSION_OBJ , ... SUBJECTSTRING , MAKEIT ) Given a SUBJECTSTRING , which is either the local identifier for a subject in the ndi . session object , or a document ID in the database , determine if the SUBJECTSTRING corresponds to an ndi . document already in the database . If so , then the ID of that document is returned in SUBJECT_ID and B is 1 . If it is not there , and if MAKEIT is 1 , then a new entry is made and the document id is returned in SUBJECT_ID . If MAKEIT is 0 , and it is not there , then B is 0 and SUBJECT_ID is empty . id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . subject / id is inherited from superclass NDI . IDO isvalidlocalidentifierstring - is this a valid local identifier string? [ B , MSG ] = ISVALIDLOCALIDENTIFIERSTRING ( LOCAL_IDENTIFIER ) Returns 1 if the input LOCAL_IDENTIFIER is a character string and if it has an ' @ ' in it . If B is 0 , then an error message string is returned in MSG . ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . subject . ndi_unique_id is inherited from superclass NDI . IDO newdocument - return a new database document of type ndi.document based on a subject NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_SUBJECT_OBJ) Creates a new ndi.document of type 'ndi_document_subject'. searchquery - return a search query for an ndi.document based on this element SQ = SEARCHQUERY(NDI_SUBJECT_OBJ) subject - create a new ndi.subject object NDI_SUBJECT_OBJ = ndi.subject(LOCAL_IDENTIFIER, DESCRIPTION) or NDI_SUBJECT_OBJ = ndi.subject(NDI_SESSION_OBJ, NDI_SUBJECT_DOCUMENT) Creates an ndi.subject object, either from a local identifier name or an ndi.session object and an ndi.document that describes the ndi.subject object.","title":"Methods help"},{"location":"reference/%2Bndi/validate.m/","text":"CLASS ndi.validate \u00b6 Validate a ndi_document to ensure that the type of its properties match with the expected type according to its schema . Most of the logic behind is implemented by Java using everit - org ' s json-schema library: https : // github . com / everit - org / json - schema , a JSON Schema Validator for Java , based on org . json API . It implements the DRAFT 7 version of the JSON Schema : https : // json - schema . org / Superclasses \u00b6 none Properties \u00b6 Property Description validators reports is_valid is the ndi.document valid or not errormsg errormsg_this errormsg_super errormsg_depends_on Methods \u00b6 Method Description extract_schema Extract the content of the ndi.document's extractnamefromdefinition File name contains \".json\" extension load_format_validator readHashMap an instance of java.util.HashMAP replace_ndipath ndi.validate.replace_ndipath is a function. throw_error ndi.validate/throw_error is a function. validate Validate a ndi_document to ensure that the type of its properties Methods help \u00b6 extract_schema - Extract the content of the ndi.document's corresponding schema SCHEMA_JSON = EXTRACT_SCHEMA(NDI_DOCUMENT_OBJ) extractnamefromdefinition - File name contains \".json\" extension Remove the file extension NAME = EXTRACTNAME(STR) load_format_validator - ** LOAD the the list of FormatValidator configurated based on the JSON file ndi_validate_config.json readHashMap - an instance of java.util.HashMAP turn an instance of java . util . hashmap into string useful for displaying the error messages STR = READHASHMAP ( JAVA_HASHMAP ) replace_ndipath - ndi.validate.replace_ndipath is a function. new_path = replace_ndipath(path) throw_error - ndi.validate/throw_error is a function. throw_error(ndi_validate_obj) validate - Validate a ndi_document to ensure that the type of its properties match with the expected type according to its schema . Most of the logic behind is implemented by Java using everit - org ' s json-schema library: https : // github . com / everit - org / json - schema , a JSON Schema Validator for Java , based on org . json API . It implements the DRAFT 7 version of the JSON Schema : https : // json - schema . org /","title":"ndi.validate"},{"location":"reference/%2Bndi/validate.m/#class-ndivalidate","text":"Validate a ndi_document to ensure that the type of its properties match with the expected type according to its schema . Most of the logic behind is implemented by Java using everit - org ' s json-schema library: https : // github . com / everit - org / json - schema , a JSON Schema Validator for Java , based on org . json API . It implements the DRAFT 7 version of the JSON Schema : https : // json - schema . org /","title":"CLASS ndi.validate"},{"location":"reference/%2Bndi/validate.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndi/validate.m/#properties","text":"Property Description validators reports is_valid is the ndi.document valid or not errormsg errormsg_this errormsg_super errormsg_depends_on","title":"Properties"},{"location":"reference/%2Bndi/validate.m/#methods","text":"Method Description extract_schema Extract the content of the ndi.document's extractnamefromdefinition File name contains \".json\" extension load_format_validator readHashMap an instance of java.util.HashMAP replace_ndipath ndi.validate.replace_ndipath is a function. throw_error ndi.validate/throw_error is a function. validate Validate a ndi_document to ensure that the type of its properties","title":"Methods"},{"location":"reference/%2Bndi/validate.m/#methods-help","text":"extract_schema - Extract the content of the ndi.document's corresponding schema SCHEMA_JSON = EXTRACT_SCHEMA(NDI_DOCUMENT_OBJ) extractnamefromdefinition - File name contains \".json\" extension Remove the file extension NAME = EXTRACTNAME(STR) load_format_validator - ** LOAD the the list of FormatValidator configurated based on the JSON file ndi_validate_config.json readHashMap - an instance of java.util.HashMAP turn an instance of java . util . hashmap into string useful for displaying the error messages STR = READHASHMAP ( JAVA_HASHMAP ) replace_ndipath - ndi.validate.replace_ndipath is a function. new_path = replace_ndipath(path) throw_error - ndi.validate/throw_error is a function. throw_error(ndi_validate_obj) validate - Validate a ndi_document to ensure that the type of its properties match with the expected type according to its schema . Most of the logic behind is implemented by Java using everit - org ' s json-schema library: https : // github . com / everit - org / json - schema , a JSON Schema Validator for Java , based on org . json API . It implements the DRAFT 7 version of the JSON Schema : https : // json - schema . org /","title":"Methods help"},{"location":"reference/%2Bndi/version.m/","text":"ndi.version \u00b6 NDI_VERSION - return the version string for NDI [ V , URL ] = ndi . version () Return the Git version string V for the currently installed version of NDI . URL is the url of the NDI distribution . Example : v = ndi . version ()","title":"ndi.version"},{"location":"reference/%2Bndi/version.m/#ndiversion","text":"NDI_VERSION - return the version string for NDI [ V , URL ] = ndi . version () Return the Git version string V for the currently installed version of NDI . URL is the url of the NDI distribution . Example : v = ndi . version ()","title":"ndi.version"},{"location":"reference/%2Bndi/%2Bapp/appdoc.m/","text":"CLASS ndi.app.appdoc \u00b6 ndi . app . appdoc - create a new ndi . app . appdoc document NDI_APPDOC_OBJ = ndi . app . appdoc ( DOC_TYPES , DOC_DOCUMENT_TYPES , DOC_SESSION ) Creates and initializes a new ndi . app . appdoc object . DOC_TYPES should be a cell array of strings describing the internal names of the document types . DOC_DOCUMENT_TYPES should be a cell array of strings describing the NDI_document datatypes for each parameter document . NOC_SESSION should be an ndi . session object that is used to access the connected database . Example : ndi_app_appdoc_obj = ndi . app . appdoc ( { 'extraction_doc' } , { '/apps/spikeextractor/spike_extraction_parameters' } ); Superclasses \u00b6 none Properties \u00b6 Property Description doc_types types of the parameter documents; the app developer can choose (cell array) doc_document_types NDI_document datatypes for each doc doc_session session to use to access the database Methods \u00b6 Method Description add_appdoc Load data from an application document appdoc create a new ndi.app.appdoc document appdoc_description a function that prints a description of all appdoc types clear_appdoc remove an ndi.app.appdoc document from a session database defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters find_appdoc find an ndi.app.appdoc document in the session database isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? loaddata_appdoc Load data from an application document struct2doc create an ndi.document from an input structure and input parameters Methods help \u00b6 add_appdoc - Load data from an application document [...] = ADD_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE , ... APPDOC_STRUCT , DOCEXISTSACTION , [ additional arguments ]) Creates a new ndi . document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT . [ additional inputs ] are used to find or specify the NDI_document in the database . They are passed to the function FIND_APPDOC , so see help FIND_APPDOC for the documentation for each app . The DOC is returned as a cell array of NDI_DOCUMENTs ( should have 1 entry but could have more than 1 if the document already exists ). If APPDOC_STRUCT is empty , then default values are used . If it is a character array , then it is assumed to be a filename of a tab - separated - value text file . If it is an ndi . document , then it is assumed to be an ndi . document and it will be converted to the parameters using DOC2STRUCT . This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [ additional inputs ] already exists : DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- ' Error ' | An error is generating indicating the document exists . ' NoAction ' | The existing document is left alone . The existing ndi . document | is returned in DOC . ' Replace ' | Replace the document ; note that this deletes all NDI_DOCUMENTS | that depend on the original . ' ReplaceIfDifferent ' | Conditionally replace the document , but only if the | the data structures that define the document are not equal . appdoc - create a new ndi.app.appdoc document NDI_APPDOC_OBJ = ndi . app . appdoc ( DOC_TYPES , DOC_DOCUMENT_TYPES , DOC_SESSION ) Creates and initializes a new ndi . app . appdoc object . DOC_TYPES should be a cell array of strings describing the internal names of the document types . DOC_DOCUMENT_TYPES should be a cell array of strings describing the NDI_document datatypes for each parameter document . NOC_SESSION should be an ndi . session object that is used to access the connected database . Example : ndi_app_appdoc_obj = ndi . app . appdoc ( { 'extraction_doc' } , { '/apps/spikeextractor/spike_extraction_parameters' } ); appdoc_description - a function that prints a description of all appdoc types Every subclass should override this function to describe the APPDOC types available to the subclass . It should follow the following form . -------------------- The APPDOCs available to this class are the following : APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'doctype1' | The first app document type . ( in the base class , there are no APPDOCS ; in subclasses , the document types should appear here ) ( here , 'doctype1' is a dummy example .) ---------------------------------------------------------------------------------------------- APPDOC 1 : DOCTYPE1 ---------------------------------------------------------------------------------------------- --------------------- | DOCTYPE1 -- ABOUT | --------------------- DOCTYPE documents store X . It DEPENDS ON documents Y and Z . Definition : app / myapp / doctype1 -------------------------- | DOCTYPE1 -- CREATION | -------------------------- DOC = STRUCT2DOC ( NDI_APPDOC_OBJ , 'doctype1' , DOCTYPE1PARAMS , ...) DOCTYPE1PARAMS should contain the following fields : Fieldname | Description ------------------------------------------------------------------------- field1 | field1 description overlap | field2 description ------------------------ | DOCTYPE1 - FINDING | ------------------------ [ DOCTYPE1_DOC ] = FIND_APPDOC ( NDI_APPDOC_OBJ , 'doctype1' , INPUT1 , INPUT2 , ...) INPUTS : INPUT1 - first input needed to find doctype1 documents INPUT2 - the second input needed to find doctype1 documents OUTPUT : DOCTYPE1_DOC - the ndi . document of the application document DOCTYPE1 ------------------------ | DOCTYPE1 - LOADING | ------------------------ [ OUTPUT1,OUTPUT2,...,DOCTYPE1_DOC ] = LOADDOC_APPDOC ( NDI_APPDOC_OBJ , ... 'doctype1' , INPUT1 , INPUT2 ,...); INPUTS : INPUT1 - first input needed to find doctype1 documents INPUT2 - the second input needed to find doctype1 documents OUTPUT : OUTPUT1 - the first type of loaded data contained in DOCTYPE1 documents OUTPUT2 - the second type of loaded data contained in DOCTYPE1 documents ( If there were more appdoc types , list them here ...) clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE , [ additional inputs ]) Deletes the app document of style DOC_NAME from the database . [ additional inputs ] are used to find the NDI_document in the database . They are passed to the function FIND_APPDOC , so see help FIND_APPDOC for the documentation for each app . B is 1 if the document is found , and 0 otherwise . defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE ) Return the default data structure for a given APPDOC_TYPE of an ndi . app . appdoc object . In the base class , the blank version of the ndi . document is read in and the default structure is built from the ndi . document ' s class property list. doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC ( NDI_APPDOC_OBJ , SESSION , APPDOC_TYPE , APPDOC_STRUCT , [ additional parameters ] Create an ndi . document from a data structure APPDOC_STRUCT . The ndi . document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ . In the base class , this uses the property info in the ndi . document to load the data structure . find_appdoc - find an ndi.app.appdoc document in the session database DOC = FIND_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE , [ additional inputs ]) Using search criteria that is supported by [ additional inputs ], FIND_APPDOC searches the database for the ndi . document object DOC that is described by APPDOC_TYPE . DOC is always a cell array of all matching NDI_DOCUMENTs . In this superclass , empty is always returned . Subclasses should override this function to search for each document type . The documentation for subclasses should be in the overriden function APPDOC_DESCRIPTION . isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT ( NDI_APPDOC_OBJ , APPDOC_TYPE , APPDOC_STRUCT1 , APPDOC_STRUCT2 ) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal . In the base class , this is true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes . That is , B is vlt . data . eqlen ( APPDOC_STRUCT1 , APPDOC_STRUCT2 ) . isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [ B , ERRORMSG ] = ISVALID_APPDOC_STRUCT ( NDI_APPDOC_OBJ , APPDOC_TYPE , APPDOC_STRUCT ) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi . document described by APPDOC_TYPE . B is 1 if it is valid and 0 otherwise . In the base class , B is always 0 with ERRORMSG ' Base class always returns invalid. ' loaddata_appdoc - Load data from an application document [...] = LOADDATA_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE , [ additional arguments ]) Loads the data from app document of style DOC_NAME from the database . [ additional inputs ] are used to find the NDI_document in the database . They are passed to the function FIND_APPDOC , so see help FIND_APPDOC for the documentation for each app . In the base class , this always returns empty . This function should be overridden by each subclass . The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION . struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC ( NDI_APPDOC_OBJ , APPDOC_TYPE , APPDOC_STRUCT , [ additional parameters ] Create an ndi . document from a data structure APPDOC_STRUCT . The ndi . document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ . In the base class , this always returns empty . It must be overridden in subclasses . The documentation for overriden functions should be in the function APPDOC_DESCRIPTION .","title":"ndi.app.appdoc"},{"location":"reference/%2Bndi/%2Bapp/appdoc.m/#class-ndiappappdoc","text":"ndi . app . appdoc - create a new ndi . app . appdoc document NDI_APPDOC_OBJ = ndi . app . appdoc ( DOC_TYPES , DOC_DOCUMENT_TYPES , DOC_SESSION ) Creates and initializes a new ndi . app . appdoc object . DOC_TYPES should be a cell array of strings describing the internal names of the document types . DOC_DOCUMENT_TYPES should be a cell array of strings describing the NDI_document datatypes for each parameter document . NOC_SESSION should be an ndi . session object that is used to access the connected database . Example : ndi_app_appdoc_obj = ndi . app . appdoc ( { 'extraction_doc' } , { '/apps/spikeextractor/spike_extraction_parameters' } );","title":"CLASS ndi.app.appdoc"},{"location":"reference/%2Bndi/%2Bapp/appdoc.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bapp/appdoc.m/#properties","text":"Property Description doc_types types of the parameter documents; the app developer can choose (cell array) doc_document_types NDI_document datatypes for each doc doc_session session to use to access the database","title":"Properties"},{"location":"reference/%2Bndi/%2Bapp/appdoc.m/#methods","text":"Method Description add_appdoc Load data from an application document appdoc create a new ndi.app.appdoc document appdoc_description a function that prints a description of all appdoc types clear_appdoc remove an ndi.app.appdoc document from a session database defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters find_appdoc find an ndi.app.appdoc document in the session database isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? loaddata_appdoc Load data from an application document struct2doc create an ndi.document from an input structure and input parameters","title":"Methods"},{"location":"reference/%2Bndi/%2Bapp/appdoc.m/#methods-help","text":"add_appdoc - Load data from an application document [...] = ADD_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE , ... APPDOC_STRUCT , DOCEXISTSACTION , [ additional arguments ]) Creates a new ndi . document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT . [ additional inputs ] are used to find or specify the NDI_document in the database . They are passed to the function FIND_APPDOC , so see help FIND_APPDOC for the documentation for each app . The DOC is returned as a cell array of NDI_DOCUMENTs ( should have 1 entry but could have more than 1 if the document already exists ). If APPDOC_STRUCT is empty , then default values are used . If it is a character array , then it is assumed to be a filename of a tab - separated - value text file . If it is an ndi . document , then it is assumed to be an ndi . document and it will be converted to the parameters using DOC2STRUCT . This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [ additional inputs ] already exists : DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- ' Error ' | An error is generating indicating the document exists . ' NoAction ' | The existing document is left alone . The existing ndi . document | is returned in DOC . ' Replace ' | Replace the document ; note that this deletes all NDI_DOCUMENTS | that depend on the original . ' ReplaceIfDifferent ' | Conditionally replace the document , but only if the | the data structures that define the document are not equal . appdoc - create a new ndi.app.appdoc document NDI_APPDOC_OBJ = ndi . app . appdoc ( DOC_TYPES , DOC_DOCUMENT_TYPES , DOC_SESSION ) Creates and initializes a new ndi . app . appdoc object . DOC_TYPES should be a cell array of strings describing the internal names of the document types . DOC_DOCUMENT_TYPES should be a cell array of strings describing the NDI_document datatypes for each parameter document . NOC_SESSION should be an ndi . session object that is used to access the connected database . Example : ndi_app_appdoc_obj = ndi . app . appdoc ( { 'extraction_doc' } , { '/apps/spikeextractor/spike_extraction_parameters' } ); appdoc_description - a function that prints a description of all appdoc types Every subclass should override this function to describe the APPDOC types available to the subclass . It should follow the following form . -------------------- The APPDOCs available to this class are the following : APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'doctype1' | The first app document type . ( in the base class , there are no APPDOCS ; in subclasses , the document types should appear here ) ( here , 'doctype1' is a dummy example .) ---------------------------------------------------------------------------------------------- APPDOC 1 : DOCTYPE1 ---------------------------------------------------------------------------------------------- --------------------- | DOCTYPE1 -- ABOUT | --------------------- DOCTYPE documents store X . It DEPENDS ON documents Y and Z . Definition : app / myapp / doctype1 -------------------------- | DOCTYPE1 -- CREATION | -------------------------- DOC = STRUCT2DOC ( NDI_APPDOC_OBJ , 'doctype1' , DOCTYPE1PARAMS , ...) DOCTYPE1PARAMS should contain the following fields : Fieldname | Description ------------------------------------------------------------------------- field1 | field1 description overlap | field2 description ------------------------ | DOCTYPE1 - FINDING | ------------------------ [ DOCTYPE1_DOC ] = FIND_APPDOC ( NDI_APPDOC_OBJ , 'doctype1' , INPUT1 , INPUT2 , ...) INPUTS : INPUT1 - first input needed to find doctype1 documents INPUT2 - the second input needed to find doctype1 documents OUTPUT : DOCTYPE1_DOC - the ndi . document of the application document DOCTYPE1 ------------------------ | DOCTYPE1 - LOADING | ------------------------ [ OUTPUT1,OUTPUT2,...,DOCTYPE1_DOC ] = LOADDOC_APPDOC ( NDI_APPDOC_OBJ , ... 'doctype1' , INPUT1 , INPUT2 ,...); INPUTS : INPUT1 - first input needed to find doctype1 documents INPUT2 - the second input needed to find doctype1 documents OUTPUT : OUTPUT1 - the first type of loaded data contained in DOCTYPE1 documents OUTPUT2 - the second type of loaded data contained in DOCTYPE1 documents ( If there were more appdoc types , list them here ...) clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE , [ additional inputs ]) Deletes the app document of style DOC_NAME from the database . [ additional inputs ] are used to find the NDI_document in the database . They are passed to the function FIND_APPDOC , so see help FIND_APPDOC for the documentation for each app . B is 1 if the document is found , and 0 otherwise . defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE ) Return the default data structure for a given APPDOC_TYPE of an ndi . app . appdoc object . In the base class , the blank version of the ndi . document is read in and the default structure is built from the ndi . document ' s class property list. doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC ( NDI_APPDOC_OBJ , SESSION , APPDOC_TYPE , APPDOC_STRUCT , [ additional parameters ] Create an ndi . document from a data structure APPDOC_STRUCT . The ndi . document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ . In the base class , this uses the property info in the ndi . document to load the data structure . find_appdoc - find an ndi.app.appdoc document in the session database DOC = FIND_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE , [ additional inputs ]) Using search criteria that is supported by [ additional inputs ], FIND_APPDOC searches the database for the ndi . document object DOC that is described by APPDOC_TYPE . DOC is always a cell array of all matching NDI_DOCUMENTs . In this superclass , empty is always returned . Subclasses should override this function to search for each document type . The documentation for subclasses should be in the overriden function APPDOC_DESCRIPTION . isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT ( NDI_APPDOC_OBJ , APPDOC_TYPE , APPDOC_STRUCT1 , APPDOC_STRUCT2 ) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal . In the base class , this is true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes . That is , B is vlt . data . eqlen ( APPDOC_STRUCT1 , APPDOC_STRUCT2 ) . isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [ B , ERRORMSG ] = ISVALID_APPDOC_STRUCT ( NDI_APPDOC_OBJ , APPDOC_TYPE , APPDOC_STRUCT ) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi . document described by APPDOC_TYPE . B is 1 if it is valid and 0 otherwise . In the base class , B is always 0 with ERRORMSG ' Base class always returns invalid. ' loaddata_appdoc - Load data from an application document [...] = LOADDATA_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE , [ additional arguments ]) Loads the data from app document of style DOC_NAME from the database . [ additional inputs ] are used to find the NDI_document in the database . They are passed to the function FIND_APPDOC , so see help FIND_APPDOC for the documentation for each app . In the base class , this always returns empty . This function should be overridden by each subclass . The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION . struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC ( NDI_APPDOC_OBJ , APPDOC_TYPE , APPDOC_STRUCT , [ additional parameters ] Create an ndi . document from a data structure APPDOC_STRUCT . The ndi . document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ . In the base class , this always returns empty . It must be overridden in subclasses . The documentation for overriden functions should be in the function APPDOC_DESCRIPTION .","title":"Methods help"},{"location":"reference/%2Bndi/%2Bapp/markgarbage.m/","text":"CLASS ndi.app.markgarbage \u00b6 ndi . app . markgarbage - an application for marking portions of recordings as \" garbage \" that shouldn ' t be analyzed ** Example 1 ** : Mark a time period as VALID ( the rest of the interval is \" garbage \" ) , on an ndi . element E from ndi . session S G = ndi . app . markgarbage ( S ) ; % create app instance epoch_id = ' myepochid ' ; timeref = ndi . time . timereference ( E , ' dev_local_time ' , epoch_id , 0 ) ; % time reference is local time on ndi.element E t0 = 10 ; t1 = 100; % mark from 10 to 100 seconds as valid G . markvalidinterval ( E , t0 , timeref , t1 , timeref ) ; ** Example 2 ** : Clear previously marked garbage periods on an ndi . element E from ndi . session S G = ndi . app . markgarbage ( S ) ; % create app instance G . clearvalidinterval ( E ) ; Superclasses \u00b6 ndi.app , ndi.documentservice Properties \u00b6 Property Description session name Methods \u00b6 Method Description clearvalidinterval clear all 'valid_interval' records for an ndi.epoch.epochset from session database identifyvalidintervals identify valid region within an interval loadvalidinterval Load all valid interval records from session database markgarbage an app to help exclude garbage data from sessions markvalidinterval mark a valid intervalin an epoch (all else is garbage) newdocument return a new database document of type ndi.document based on an app savevalidinterval save a valid interval structure to the session database searchquery return a search query for an ndi.document related to this app varappname return the name of the application for use in variable creation version_url return the app version and url Methods help \u00b6 clearvalidinterval - clear all 'valid_interval' records for an ndi.epoch.epochset from session database B = CLEARVALIDINTERVAL ( NDI_APP_MARKGARBAGE_OBJ , NDI_EPOCHSET_OBJ ) Clears all valid interval entries from the session database for object NDI_EPOCHSET_OBJ . Returns 1 on success , 0 otherwise . See also : ndi . app . markgarbage / MARKVALIDINTERVAL , ndi . app . markgarbage / SAVEALIDINTERVAL , ... ndi . app . markgarbage / LOADVALIDINTERVAL identifyvalidintervals - identify valid region within an interval INTERVALS = IDENTIFYVALIDINTERVALS ( NDI_APP_MARKGARBAGE_OBJ , NDI_EPOCHSET_OBJ , TIMEREF , T0 , T1 ) Examines whether there is a stored 'validinterval' variable by the app 'ndi.app.markgarbage' for this NDI_EPOCHSET_OBJ , and , if so , returns valid intervals [ t1_0 t1_1 ; t2_0 t2_1 ; ... ] indicating valid snips of data within the range T0 T1 ( with respect to ndi . time . timereference object TIMEREF ) . INTERVALS has time with respect to TIMEREF . disp ([ 'Call of identifyvalidintervals..' ]); loadvalidinterval - Load all valid interval records from session database [ VI , MYDOC ] = LOADVALIDINTERVAL ( NDI_APP_MARKGARBAGE_OBJ , NDI_EPOCHSET_OBJ ) Loads stored valid interval records generated by ndi . app . markgarbage / MAKEVALIDINTERVAL MYDOC is the ndi . document that was loaded . markgarbage - an app to help exclude garbage data from sessions NDI_APP_MARKGARBAGE_OBJ = ndi.app.markgarbage(SESSION) Creates a new ndi.app.markgarbage object that can operate on NDI_SESSIONS. The app is named 'ndi.app.markgarbage'. markvalidinterval - mark a valid intervalin an epoch (all else is garbage) B = MARKVALIDINTERVAL ( NDI_APP_MARKGARBAGE_APP , NDI_EPOCHSET_OBJ , T0 , TIMEREF_T0 , ... T1 , TIMEREF_T1 ) Saves a variable marking a valid interval from T0 to T1 with respect to an ndi . time . timereference object TIMEREF_T0 ( for T0 ) and TIMEREF_T1 ( for T1 ) for an ndi . epoch . epochset object NDI_EPOCHSET_OBJ . Examples of ndi . epoch . epochset objects include ndi . daq . system and ndi . probe and their subclasses . TIMEREF_T0 and TIMEREF_T1 are saved as a name and type for looking up later . developer note : might be good idea to make sure these times exist at saving newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_APP_OBJ ) Creates a blank ndi . document object of type ' ndi_document_app ' . The ' app.name ' field is filled out with the name of NDI_APP_OBJ . VARAPPNAME () . Help for ndi . app . markgarbage / newdocument is inherited from superclass NDI . APP savevalidinterval - save a valid interval structure to the session database B = SAVEVALIDINTERVAL ( NDI_APP_MARKGARBAGE_OBJ , NDI_EPOCHSET_OBJ , VALIDINTERVALSTRUCT ) Saves a VALIDINTERVALSTRUCT to an experment database , in the appropriate place for the NDI_EPOCHSET_OBJ data . If the entry is a duplicate , it is not saved but b is still 1 . searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY ( NDI_APP_OBJ ) Returns a cell array of strings that allow the creation or searching of an ndi . database document for this app with field ' app ' that has subfield ' name ' equal to the app ' s VARAPPNAME. Help for ndi . app . markgarbage / searchquery is inherited from superclass NDI . APP varappname - return the name of the application for use in variable creation AN = VARAPPNAME ( NDI_APP_OBJ ) Returns the name of the app modified for use as a variable name , either as a Matlab variable or a name in a document . Help for ndi . app . markgarbage / varappname is inherited from superclass NDI . APP version_url - return the app version and url [ V , URL ] = VERSION_URL ( NDI_APP_OBJ ) Return the version and url for the current app . In the base class , it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory . Developers should override this method in their own class if they use a different version control system . Help for ndi . app . markgarbage / version_url is inherited from superclass NDI . APP","title":"ndi.app.markgarbage"},{"location":"reference/%2Bndi/%2Bapp/markgarbage.m/#class-ndiappmarkgarbage","text":"ndi . app . markgarbage - an application for marking portions of recordings as \" garbage \" that shouldn ' t be analyzed ** Example 1 ** : Mark a time period as VALID ( the rest of the interval is \" garbage \" ) , on an ndi . element E from ndi . session S G = ndi . app . markgarbage ( S ) ; % create app instance epoch_id = ' myepochid ' ; timeref = ndi . time . timereference ( E , ' dev_local_time ' , epoch_id , 0 ) ; % time reference is local time on ndi.element E t0 = 10 ; t1 = 100; % mark from 10 to 100 seconds as valid G . markvalidinterval ( E , t0 , timeref , t1 , timeref ) ; ** Example 2 ** : Clear previously marked garbage periods on an ndi . element E from ndi . session S G = ndi . app . markgarbage ( S ) ; % create app instance G . clearvalidinterval ( E ) ;","title":"CLASS ndi.app.markgarbage"},{"location":"reference/%2Bndi/%2Bapp/markgarbage.m/#superclasses","text":"ndi.app , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bapp/markgarbage.m/#properties","text":"Property Description session name","title":"Properties"},{"location":"reference/%2Bndi/%2Bapp/markgarbage.m/#methods","text":"Method Description clearvalidinterval clear all 'valid_interval' records for an ndi.epoch.epochset from session database identifyvalidintervals identify valid region within an interval loadvalidinterval Load all valid interval records from session database markgarbage an app to help exclude garbage data from sessions markvalidinterval mark a valid intervalin an epoch (all else is garbage) newdocument return a new database document of type ndi.document based on an app savevalidinterval save a valid interval structure to the session database searchquery return a search query for an ndi.document related to this app varappname return the name of the application for use in variable creation version_url return the app version and url","title":"Methods"},{"location":"reference/%2Bndi/%2Bapp/markgarbage.m/#methods-help","text":"clearvalidinterval - clear all 'valid_interval' records for an ndi.epoch.epochset from session database B = CLEARVALIDINTERVAL ( NDI_APP_MARKGARBAGE_OBJ , NDI_EPOCHSET_OBJ ) Clears all valid interval entries from the session database for object NDI_EPOCHSET_OBJ . Returns 1 on success , 0 otherwise . See also : ndi . app . markgarbage / MARKVALIDINTERVAL , ndi . app . markgarbage / SAVEALIDINTERVAL , ... ndi . app . markgarbage / LOADVALIDINTERVAL identifyvalidintervals - identify valid region within an interval INTERVALS = IDENTIFYVALIDINTERVALS ( NDI_APP_MARKGARBAGE_OBJ , NDI_EPOCHSET_OBJ , TIMEREF , T0 , T1 ) Examines whether there is a stored 'validinterval' variable by the app 'ndi.app.markgarbage' for this NDI_EPOCHSET_OBJ , and , if so , returns valid intervals [ t1_0 t1_1 ; t2_0 t2_1 ; ... ] indicating valid snips of data within the range T0 T1 ( with respect to ndi . time . timereference object TIMEREF ) . INTERVALS has time with respect to TIMEREF . disp ([ 'Call of identifyvalidintervals..' ]); loadvalidinterval - Load all valid interval records from session database [ VI , MYDOC ] = LOADVALIDINTERVAL ( NDI_APP_MARKGARBAGE_OBJ , NDI_EPOCHSET_OBJ ) Loads stored valid interval records generated by ndi . app . markgarbage / MAKEVALIDINTERVAL MYDOC is the ndi . document that was loaded . markgarbage - an app to help exclude garbage data from sessions NDI_APP_MARKGARBAGE_OBJ = ndi.app.markgarbage(SESSION) Creates a new ndi.app.markgarbage object that can operate on NDI_SESSIONS. The app is named 'ndi.app.markgarbage'. markvalidinterval - mark a valid intervalin an epoch (all else is garbage) B = MARKVALIDINTERVAL ( NDI_APP_MARKGARBAGE_APP , NDI_EPOCHSET_OBJ , T0 , TIMEREF_T0 , ... T1 , TIMEREF_T1 ) Saves a variable marking a valid interval from T0 to T1 with respect to an ndi . time . timereference object TIMEREF_T0 ( for T0 ) and TIMEREF_T1 ( for T1 ) for an ndi . epoch . epochset object NDI_EPOCHSET_OBJ . Examples of ndi . epoch . epochset objects include ndi . daq . system and ndi . probe and their subclasses . TIMEREF_T0 and TIMEREF_T1 are saved as a name and type for looking up later . developer note : might be good idea to make sure these times exist at saving newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_APP_OBJ ) Creates a blank ndi . document object of type ' ndi_document_app ' . The ' app.name ' field is filled out with the name of NDI_APP_OBJ . VARAPPNAME () . Help for ndi . app . markgarbage / newdocument is inherited from superclass NDI . APP savevalidinterval - save a valid interval structure to the session database B = SAVEVALIDINTERVAL ( NDI_APP_MARKGARBAGE_OBJ , NDI_EPOCHSET_OBJ , VALIDINTERVALSTRUCT ) Saves a VALIDINTERVALSTRUCT to an experment database , in the appropriate place for the NDI_EPOCHSET_OBJ data . If the entry is a duplicate , it is not saved but b is still 1 . searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY ( NDI_APP_OBJ ) Returns a cell array of strings that allow the creation or searching of an ndi . database document for this app with field ' app ' that has subfield ' name ' equal to the app ' s VARAPPNAME. Help for ndi . app . markgarbage / searchquery is inherited from superclass NDI . APP varappname - return the name of the application for use in variable creation AN = VARAPPNAME ( NDI_APP_OBJ ) Returns the name of the app modified for use as a variable name , either as a Matlab variable or a name in a document . Help for ndi . app . markgarbage / varappname is inherited from superclass NDI . APP version_url - return the app version and url [ V , URL ] = VERSION_URL ( NDI_APP_OBJ ) Return the version and url for the current app . In the base class , it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory . Developers should override this method in their own class if they use a different version control system . Help for ndi . app . markgarbage / version_url is inherited from superclass NDI . APP","title":"Methods help"},{"location":"reference/%2Bndi/%2Bapp/oridirtuning.m/","text":"CLASS ndi.app.oridirtuning \u00b6 ndi.app.oridirtuning - an app to calculate and analyze orientation/direction tuning curves NDI_APP_ORIDIRTUNING_OBJ = ndi.app.oridirtuning(SESSION) Creates a new ndi.app.oridirtuning object that can operate on NDI_SESSIONS. The app is named 'ndi.app.oridirtuning'. Superclasses \u00b6 ndi.app , ndi.documentservice Properties \u00b6 Property Description session name Methods \u00b6 Method Description calculate_all_oridir_indexes ndi.app.oridirtuning/calculate_all_oridir_indexes is a function. calculate_oridir_indexes CALCULATE_ORIDIR_INDEXES calculate_tuning_curve calculate an orientation/direction tuning curve from stimulus responses is_oridir_stimulus_response ndi.app.oridirtuning/is_oridir_stimulus_response is a function. newdocument return a new database document of type ndi.document based on an app oridirtuning an app to calculate and analyze orientation/direction tuning curves plot_oridir_response ndi.app.oridirtuning/plot_oridir_response is a function. searchquery return a search query for an ndi.document related to this app varappname return the name of the application for use in variable creation version_url return the app version and url Methods help \u00b6 calculate_all_oridir_indexes - ndi.app.oridirtuning/calculate_all_oridir_indexes is a function. oriprops = calculate_all_oridir_indexes(ndi_app_oridirtuning_obj, ndi_element_obj) calculate_oridir_indexes - CALCULATE_ORIDIR_INDEXES calculate_tuning_curve - calculate an orientation/direction tuning curve from stimulus responses TUNING_DOC = CALCULATE_TUNING_CURVE(NDI_APP_ORIDIRTUNING_OBJ, ndi.element) is_oridir_stimulus_response - ndi.app.oridirtuning/is_oridir_stimulus_response is a function. b = is_oridir_stimulus_response(ndi_app_oridirtuning_obj, response_doc) newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_APP_OBJ ) Creates a blank ndi . document object of type ' ndi_document_app ' . The ' app.name ' field is filled out with the name of NDI_APP_OBJ . VARAPPNAME () . Help for ndi . app . oridirtuning / newdocument is inherited from superclass NDI . APP oridirtuning - an app to calculate and analyze orientation/direction tuning curves NDI_APP_ORIDIRTUNING_OBJ = ndi.app.oridirtuning(SESSION) Creates a new ndi.app.oridirtuning object that can operate on NDI_SESSIONS. The app is named 'ndi.app.oridirtuning'. plot_oridir_response - ndi.app.oridirtuning/plot_oridir_response is a function. plot_oridir_response(ndi_app_oridirtuning_obj, oriprops_doc) searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY ( NDI_APP_OBJ ) Returns a cell array of strings that allow the creation or searching of an ndi . database document for this app with field ' app ' that has subfield ' name ' equal to the app ' s VARAPPNAME. Help for ndi . app . oridirtuning / searchquery is inherited from superclass NDI . APP varappname - return the name of the application for use in variable creation AN = VARAPPNAME ( NDI_APP_OBJ ) Returns the name of the app modified for use as a variable name , either as a Matlab variable or a name in a document . Help for ndi . app . oridirtuning / varappname is inherited from superclass NDI . APP version_url - return the app version and url [ V , URL ] = VERSION_URL ( NDI_APP_OBJ ) Return the version and url for the current app . In the base class , it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory . Developers should override this method in their own class if they use a different version control system . Help for ndi . app . oridirtuning / version_url is inherited from superclass NDI . APP","title":"ndi.app.oridirtuning"},{"location":"reference/%2Bndi/%2Bapp/oridirtuning.m/#class-ndiapporidirtuning","text":"ndi.app.oridirtuning - an app to calculate and analyze orientation/direction tuning curves NDI_APP_ORIDIRTUNING_OBJ = ndi.app.oridirtuning(SESSION) Creates a new ndi.app.oridirtuning object that can operate on NDI_SESSIONS. The app is named 'ndi.app.oridirtuning'.","title":"CLASS ndi.app.oridirtuning"},{"location":"reference/%2Bndi/%2Bapp/oridirtuning.m/#superclasses","text":"ndi.app , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bapp/oridirtuning.m/#properties","text":"Property Description session name","title":"Properties"},{"location":"reference/%2Bndi/%2Bapp/oridirtuning.m/#methods","text":"Method Description calculate_all_oridir_indexes ndi.app.oridirtuning/calculate_all_oridir_indexes is a function. calculate_oridir_indexes CALCULATE_ORIDIR_INDEXES calculate_tuning_curve calculate an orientation/direction tuning curve from stimulus responses is_oridir_stimulus_response ndi.app.oridirtuning/is_oridir_stimulus_response is a function. newdocument return a new database document of type ndi.document based on an app oridirtuning an app to calculate and analyze orientation/direction tuning curves plot_oridir_response ndi.app.oridirtuning/plot_oridir_response is a function. searchquery return a search query for an ndi.document related to this app varappname return the name of the application for use in variable creation version_url return the app version and url","title":"Methods"},{"location":"reference/%2Bndi/%2Bapp/oridirtuning.m/#methods-help","text":"calculate_all_oridir_indexes - ndi.app.oridirtuning/calculate_all_oridir_indexes is a function. oriprops = calculate_all_oridir_indexes(ndi_app_oridirtuning_obj, ndi_element_obj) calculate_oridir_indexes - CALCULATE_ORIDIR_INDEXES calculate_tuning_curve - calculate an orientation/direction tuning curve from stimulus responses TUNING_DOC = CALCULATE_TUNING_CURVE(NDI_APP_ORIDIRTUNING_OBJ, ndi.element) is_oridir_stimulus_response - ndi.app.oridirtuning/is_oridir_stimulus_response is a function. b = is_oridir_stimulus_response(ndi_app_oridirtuning_obj, response_doc) newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_APP_OBJ ) Creates a blank ndi . document object of type ' ndi_document_app ' . The ' app.name ' field is filled out with the name of NDI_APP_OBJ . VARAPPNAME () . Help for ndi . app . oridirtuning / newdocument is inherited from superclass NDI . APP oridirtuning - an app to calculate and analyze orientation/direction tuning curves NDI_APP_ORIDIRTUNING_OBJ = ndi.app.oridirtuning(SESSION) Creates a new ndi.app.oridirtuning object that can operate on NDI_SESSIONS. The app is named 'ndi.app.oridirtuning'. plot_oridir_response - ndi.app.oridirtuning/plot_oridir_response is a function. plot_oridir_response(ndi_app_oridirtuning_obj, oriprops_doc) searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY ( NDI_APP_OBJ ) Returns a cell array of strings that allow the creation or searching of an ndi . database document for this app with field ' app ' that has subfield ' name ' equal to the app ' s VARAPPNAME. Help for ndi . app . oridirtuning / searchquery is inherited from superclass NDI . APP varappname - return the name of the application for use in variable creation AN = VARAPPNAME ( NDI_APP_OBJ ) Returns the name of the app modified for use as a variable name , either as a Matlab variable or a name in a document . Help for ndi . app . oridirtuning / varappname is inherited from superclass NDI . APP version_url - return the app version and url [ V , URL ] = VERSION_URL ( NDI_APP_OBJ ) Return the version and url for the current app . In the base class , it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory . Developers should override this method in their own class if they use a different version control system . Help for ndi . app . oridirtuning / version_url is inherited from superclass NDI . APP","title":"Methods help"},{"location":"reference/%2Bndi/%2Bapp/spikeextractor.m/","text":"CLASS ndi.app.spikeextractor \u00b6 ndi.app.spikeextractor - an app to extract elements found in sessions NDI_APP_SPIKEEXTRACTOR_OBJ = ndi.app.spikeextractor(SESSION) Creates a new ndi_app_spikeextractor object that can operate on NDI_SESSIONS. The app is named 'ndi_app_spikeextractor'. Superclasses \u00b6 ndi.app , ndi.documentservice , ndi.app.appdoc Properties \u00b6 Property Description session name doc_types doc_document_types doc_session Methods \u00b6 Method Description add_appdoc Load data from an application document appdoc_description a function that prints a description of all appdoc types clear_appdoc remove an ndi.app.appdoc document from a session database defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters extract method that extracts spikes from epochs of an NDI_ELEMENT_TIMESERIES_OBJ filter filter data based on a filter structure find_appdoc find an ndi_app_appdoc document in the session database isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? loaddata_appdoc load data from an application document makefilterstruct make a filter structure for a given sampling rate and extraction parameters newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app spikeextractor an app to extract elements found in sessions struct2doc create an ndi.document from an input structure and input parameters varappname return the name of the application for use in variable creation version_url return the app version and url Methods help \u00b6 add_appdoc - Load data from an application document [...] = ADD_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE , ... APPDOC_STRUCT , DOCEXISTSACTION , [ additional arguments ]) Creates a new ndi . document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT . [ additional inputs ] are used to find or specify the NDI_document in the database . They are passed to the function FIND_APPDOC , so see help FIND_APPDOC for the documentation for each app . The DOC is returned as a cell array of NDI_DOCUMENTs ( should have 1 entry but could have more than 1 if the document already exists ). If APPDOC_STRUCT is empty , then default values are used . If it is a character array , then it is assumed to be a filename of a tab - separated - value text file . If it is an ndi . document , then it is assumed to be an ndi . document and it will be converted to the parameters using DOC2STRUCT . This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [ additional inputs ] already exists : DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- ' Error ' | An error is generating indicating the document exists . ' NoAction ' | The existing document is left alone . The existing ndi . document | is returned in DOC . ' Replace ' | Replace the document ; note that this deletes all NDI_DOCUMENTS | that depend on the original . ' ReplaceIfDifferent ' | Conditionally replace the document , but only if the | the data structures that define the document are not equal . Help for ndi . app . spikeextractor / add_appdoc is inherited from superclass NDI . APP . APPDOC appdoc_description - a function that prints a description of all appdoc types For ndi_app_spikeextractor , there are the following types : APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'extraction_parameters' | A document that describes the parameters to be used for extraction [ 'extraction_parameters'... | A document that describes modifications to the parameters to be used for extracting '_modification' ] | a particular epoch . 'spikewaves' | A document that stores spike waves found by the extractor in an epoch 'spiketimes' | A document that stores the times of the waves found by the extractor in an epoch ---------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------- APPDOC 1 : EXTRACTION_PARAMETERS ---------------------------------------------------------------------------------------------- ---------------------------------- | EXTRACTION_PARAMETERS -- ABOUT | ---------------------------------- EXTRACTION_PARAMETERS documents hold the parameters that are to be used to guide the extraction of spikewaves . Definition : app / spikeextractor / extraction_parameters ------------------------------------- | EXTRACTION_PARAMETERS -- CREATION | ------------------------------------- DOC = STRUCT2DOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , 'extraction_parameters' , EXTRACTION_PARAMS , EXTRACTION_NAME ) EXTRACTION_NAME is a string containing the name of the extraction document . EXTRACTION_PARAMS should contain the following fields : Fieldname | Description ------------------------------------------------------------------------- center_range ( 10 ) | Range in samples to find spike center overlap ( 0.5 ) | Overlap allowed read_time ( 30 ) | Number of seconds to read in at a single time refractory_samples ( 10 ) | Number of samples to use as a refractory period spike_sample_start ( - 9 ) | Samples before the threshold to include % unclear if time or sample spike_sample_stop ( 20 ) | Samples after the threshold to include % unclear if time or sample start_time ( 1 ) | First sample to read do_filter ( 1 ) | Should we perform a filter ? ( 0 / 1 ) filter_type | What filter ? Default is 'cheby1high' but can also be 'none' ( 'cheby1high' ) | filter_low ( 0 ) | Low filter frequency filter_high ( 300 ) | Filter high frequency filter_order ( 4 ) | Filter order filter_ripple ( 0.8 ) | Filter ripple parameter threshold_method | Threshold method . Can be \"standard_deviation\" or \"absolute\" threshold_parameter | Threshold parameter . If threshold_method is \"standard_deviation\" then ( 'standard_deviation' ) | this parameter is multiplied by the empirical standard deviation . | If \"absolute\" , then this value is taken to be the absolute threshold . threshold_sign ( - 1 ) | Threshold crossing sign ( - 1 means high - to - low , 1 means low - to - high ) ------------------------------------ | EXTRACTION_PARAMETERS -- FINDING | ------------------------------------ [ EXTRACTION_PARAMETERS_DOC ] = FIND_APPDOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , ... 'extraction_parameters' , EXTRACTION_PARAMETERS_NAME ) INPUTS : EXTRACTION_PARAMETERS_NAME - the name of the extraction parameter document OUPUT : Returns the extraction parameters ndi . document with the name EXTRACTION_NAME . ------------------------------------ | EXTRACTION_PARAMETERS -- LOADING | ------------------------------------ [ EXTRACTION_PARAMETERS_DOC ] = LOADDATA_APPDOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , ... 'extraction_parameters' , EXTRACTION_NAME ) INPUTS : EXTRACTION_PARAMETERS_NAME - the name of the extraction parameter document OUPUT : Returns the extraction parameters ndi . document with the name EXTRACTION_NAME . ---------------------------------------------------------------------------------------------- APPDOC 2 : EXTRACTION_PARAMETERS_MODIFICATION ---------------------------------------------------------------------------------------------- ----------------------------------------------- | EXTRACTION_PARAMETERS_MODIFICATION -- ABOUT | ----------------------------------------------- EXTRACTION_PARAMETERS_MODIFICATION documents allow the user to modify the spike extraction parameters for a specific epoch . Definition : app / spikeextractor / extraction_parameters_modification -------------------------------------------------- | EXTRACTION_PARAMETERS_MODIFICATION -- CREATION | -------------------------------------------------- DOC = STRUCT2DOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , 'extraction_parameters_modification' , ... EXTRACTION_PARAMS , EXTRACTION_NAME ) EXTRACTION_NAME is a string containing the name of the extraction document . EXTRACTION_PARAMS should contain the following fields : Fieldname | Description ------------------------------------------------------------------------- center_range ( 10 ) | Range in samples to find spike center overlap ( 0.5 ) | Overlap allowed read_time ( 30 ) | Number of seconds to read in at a single time refractory_samples ( 10 ) | Number of samples to use as a refractory period spike_sample_start ( - 9 ) | Samples before the threshold to include % unclear if time or sample spike_sample_stop ( 20 ) | Samples after the threshold to include % unclear if time or sample start_time ( 1 ) | First sample to read do_filter ( 1 ) | Should we perform a filter ? ( 0 / 1 ) filter_type | What filter ? Default is 'cheby1high' but can also be 'none' ( 'cheby1high' ) | filter_low ( 0 ) | Low filter frequency filter_high ( 300 ) | Filter high frequency filter_order ( 4 ) | Filter order filter_ripple ( 0.8 ) | Filter ripple parameter threshold_method | Threshold method . Can be \"standard_deviation\" or \"absolute\" threshold_parameter | Threshold parameter . If threshold_method is \"standard_deviation\" then ( 'standard_deviation' ) | this parameter is multiplied by the empirical standard deviation . | If \"absolute\" , then this value is taken to be the absolute threshold . threshold_sign ( - 1 ) | Threshold crossing sign ( - 1 means high - to - low , 1 means low - to - high ) ------------------------------------------------- | EXTRACTION_PARAMETERS_MODIFICATION -- FINDING | ------------------------------------------------- [ EXTRACTION_PARAMETERS_MODIFICATION_DOC ] = FIND_APPDOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , ... 'extraction_parameters_modification' , NDI_TIMESERIES_OBJ , EPOCHID , EXTRACTION_NAME ) INPUTS : NDI_TIMESERIES_OBJ - the ndi . time . timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUPUT : Returns the extraction parameters modification ndi . document with the name EXTRACTION_NAME for the named EPOCHID and NDI_TIMESERIES_OBJ . ------------------------------------------------- | EXTRACTION_PARAMETERS_MODIFICATION -- LOADING | ------------------------------------------------- [ EXTRACTION_PARAMETERS_DOC ] = LOADDATA_APPDOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , ... 'extraction_parameters_modification' , NDI_TIMESERIES_OBJ , EPOCHID , EXTRACTION_NAME ) INPUTS : NDI_TIMESERIES_OBJ - the ndi . time . timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_PARAMETERS_NAME - the name of the extraction parameter document OUPUT : Returns the extraction parameters modification ndi . document with the name EXTRACTION_NAME . ---------------------------------------------------------------------------------------------- APPDOC 3 : SPIKEWAVES ---------------------------------------------------------------------------------------------- ----------------------- | SPIKEWAVES -- ABOUT | ----------------------- SPIKEWAVES documents store the spike waveforms that are read during a spike extraction . It DEPENDS ON the ndi . time . timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that descibed the extraction . Definition : app / spikeextractor / spikewaves -------------------------- | SPIKEWAVES -- CREATION | -------------------------- Spikewaves documents are created internally by the EXTRACT function ------------------------ | SPIKEWAVES - FINDING | ------------------------ [ SPIKEWAVES_DOC ] = FIND_APPDOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , 'spikewaves' , ... NDI_TIMESERIES_OBJ , EPOCH , EXTRACTION_NAME ) INPUTS : NDI_TIMESERIES_OBJ - the ndi . time . timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUTPUT : SPIKEWAVES_DOC - the ndi . document of the extracted spike waves . ------------------------ | SPIKEWAVES - LOADING | ------------------------ [ CONCATENATED_SPIKES, WAVEPARAMETERS, SPIKEWAVES_DOC ] = LOADDATA_APPDOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , 'spikewaves' , ... NDI_TIMESERIES_OBJ , EPOCH , EXTRACTION_NAME ) INPUTS : NDI_TIMESERIES_OBJ - the ndi . time . timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUTPUTS : CONCATENATED_SPIKES - an array of spike waveforms SxDxN , where S is the number of samples per channel of each waveform , D is the number of channels ( dimension ), and N is the number of spike waveforms WAVEPARAMETERS - a structure with the following fields : Field | Description -------------------------------------------------------- numchannels | Number of channels in each spike S0 | Number of samples before spike center | ( usually negative ) S1 | Number of samples after spike center | ( usually positive ) samplerate | The sampling rate SPIKEWAVES_DOC - the ndi . document of the extracted spike waves . ---------------------------------------------------------------------------------------------- APPDOC 4 : SPIKETIMES ---------------------------------------------------------------------------------------------- ----------------------- | SPIKETIMES -- ABOUT | ----------------------- SPIKETIMES documents store the times spike waveforms that are read during a spike extraction . It DEPENDS ON the ndi . time . timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that descibed the extraction . The times are in the local epoch time units . Definition : app / spikeextractor / spiketimes -------------------------- | SPIKETIMES -- CREATION | -------------------------- Spiketimes documents are created internally by the EXTRACT function ------------------------ | SPIKETIMES - FINDING | ------------------------ [ SPIKETIMES_DOC ] = FIND_APPDOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , 'spiketimes' , ... NDI_TIMESERIES_OBJ , EPOCH , EXTRACTION_NAME ) INPUTS : NDI_TIMESERIES_OBJ - the ndi . time . timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUTPUT : SPIKEWAVES_DOC - the ndi . document of the extracted spike waves . ------------------------ | SPIKETIMES - LOADING | ------------------------ [ SPIKETIMES, SPIKETIMES_DOC ] = LOADDATA_APPDOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , 'spiketimes' , ... NDI_TIMESERIES_OBJ , EPOCH , EXTRACTION_NAME ) INPUTS : NDI_TIMESERIES_OBJ - the ndi . time . timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUTPUTS : SPIKETIMES - the time of each spike wave , in local epoch time coordinates SPIKETIMES_DOC - the ndi . document of the extracted spike times . ---------------------------------------------------------------------------------------------- clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE , [ additional inputs ]) Deletes the app document of style DOC_NAME from the database . [ additional inputs ] are used to find the NDI_document in the database . They are passed to the function FIND_APPDOC , so see help FIND_APPDOC for the documentation for each app . B is 1 if the document is found , and 0 otherwise . Help for ndi . app . spikeextractor / clear_appdoc is inherited from superclass NDI . APP . APPDOC defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE ) Return the default data structure for a given APPDOC_TYPE of an ndi . app . appdoc object . In the base class , the blank version of the ndi . document is read in and the default structure is built from the ndi . document ' s class property list. Help for ndi . app . spikeextractor / defaultstruct_appdoc is inherited from superclass NDI . APP . APPDOC doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC ( NDI_APPDOC_OBJ , SESSION , APPDOC_TYPE , APPDOC_STRUCT , [ additional parameters ] Create an ndi . document from a data structure APPDOC_STRUCT . The ndi . document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ . In the base class , this uses the property info in the ndi . document to load the data structure . Help for ndi . app . spikeextractor / doc2struct is inherited from superclass NDI . APP . APPDOC extract - method that extracts spikes from epochs of an NDI_ELEMENT_TIMESERIES_OBJ EXTRACT ( NDI_APP_SPIKEEXTRACTOR_OBJ , NDI_TIMESERIES_OBJ , EPOCH , EXTRACTION_NAME , [ REDO ], [ T0 T1 ]) TYPE is the type of probe if any combination of NAME and TYPE must return at least one probe from session EPOCH is an index number or id to select epoch to extract , or can be a cell array of epoch number / ids EXTRACTION_NAME name given to find ndi_doc in database REDO - if 1 , then extraction is re - done for epochs even if it has been done before with same extraction parameters [ T0 T1 ] - if given , then restricts the extraction to be between times t0 and t1 ; default is [ - Inf Inf ] filter - filter data based on a filter structure DATA_OUT = FILTER(NDI_APP_SPIKEEXTRACTOR_OBJ, DATA_IN, FILTERSTRUCT) Filters data based on FILTERSTRUCT (see ndi_app_spikeextractor/MAKEFILTERSTRUCT) find_appdoc - find an ndi_app_appdoc document in the session database See ndi_app_spikeextractor / APPDOC_DESCRIPTION for documentation . See also : ndi_app_spikeextractor / APPDOC_DESCRIPTION isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT ( NDI_APPDOC_OBJ , APPDOC_TYPE , APPDOC_STRUCT1 , APPDOC_STRUCT2 ) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal . In the base class , this is true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes . That is , B is vlt . data . eqlen ( APPDOC_STRUCT1 , APPDOC_STRUCT2 ) . Help for ndi . app . spikeextractor / isequal_appdoc_struct is inherited from superclass NDI . APP . APPDOC isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [ B , ERRORMSG ] = ISVALID_APPDOC_STRUCT ( NDI_APP_SPIKEEXTRACTOR_OBJ , APPDOC_TYPE , APPDOC_STRUCT ) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi . document described by APPDOC_TYPE . B is 1 if it is valid and 0 otherwise . For ndi_app_spikeextractor , one can use an APPDOC_TYPE of the following : APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- ' extraction_parameters ' | A document that describes the parameters to be used for extraction loaddata_appdoc - load data from an application document See ndi_app_spikeextractor / APPDOC_DESCRIPTION for documentation . See also : ndi_app_spikeextractor / APPDOC_DESCRIPTION makefilterstruct - make a filter structure for a given sampling rate and extraction parameters FILTERSTRUCT = MAKEFILTERSTRUCT ( NDI_APP_SPIKEEXTRACTOR_OBJ , EXTRACTION_DOC , SAMPLE_RATE ) Given an EXTRACTION_DOC of parameters and a sampling rate SAMPLE_RATE , make a filter structure for passing to FILTERDATA . newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_APP_OBJ ) Creates a blank ndi . document object of type ' ndi_document_app ' . The ' app.name ' field is filled out with the name of NDI_APP_OBJ . VARAPPNAME () . Help for ndi . app . spikeextractor / newdocument is inherited from superclass NDI . APP searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY ( NDI_APP_OBJ ) Returns a cell array of strings that allow the creation or searching of an ndi . database document for this app with field ' app ' that has subfield ' name ' equal to the app ' s VARAPPNAME. Help for ndi . app . spikeextractor / searchquery is inherited from superclass NDI . APP spikeextractor - an app to extract elements found in sessions NDI_APP_SPIKEEXTRACTOR_OBJ = ndi.app.spikeextractor(SESSION) Creates a new ndi_app_spikeextractor object that can operate on NDI_SESSIONS. The app is named 'ndi_app_spikeextractor'. struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , APPDOC_TYPE , APPDOC_STRUCT , ... ) For ndi_app_spikeextractor , one can use an APPDOC_TYPE of the following : APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- ' extraction_parameters ' | A document that describes the parameters to be used for extraction [ ' extraction_parameters ' ... | A document that modifies the parameters to be used for extraction for a single epoch ' _modification ' ] | See APPDOC_DESCRIPTION for a list of the parameters . varappname - return the name of the application for use in variable creation AN = VARAPPNAME ( NDI_APP_OBJ ) Returns the name of the app modified for use as a variable name , either as a Matlab variable or a name in a document . Help for ndi . app . spikeextractor / varappname is inherited from superclass NDI . APP version_url - return the app version and url [ V , URL ] = VERSION_URL ( NDI_APP_OBJ ) Return the version and url for the current app . In the base class , it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory . Developers should override this method in their own class if they use a different version control system . Help for ndi . app . spikeextractor / version_url is inherited from superclass NDI . APP","title":"ndi.app.spikeextractor"},{"location":"reference/%2Bndi/%2Bapp/spikeextractor.m/#class-ndiappspikeextractor","text":"ndi.app.spikeextractor - an app to extract elements found in sessions NDI_APP_SPIKEEXTRACTOR_OBJ = ndi.app.spikeextractor(SESSION) Creates a new ndi_app_spikeextractor object that can operate on NDI_SESSIONS. The app is named 'ndi_app_spikeextractor'.","title":"CLASS ndi.app.spikeextractor"},{"location":"reference/%2Bndi/%2Bapp/spikeextractor.m/#superclasses","text":"ndi.app , ndi.documentservice , ndi.app.appdoc","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bapp/spikeextractor.m/#properties","text":"Property Description session name doc_types doc_document_types doc_session","title":"Properties"},{"location":"reference/%2Bndi/%2Bapp/spikeextractor.m/#methods","text":"Method Description add_appdoc Load data from an application document appdoc_description a function that prints a description of all appdoc types clear_appdoc remove an ndi.app.appdoc document from a session database defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters extract method that extracts spikes from epochs of an NDI_ELEMENT_TIMESERIES_OBJ filter filter data based on a filter structure find_appdoc find an ndi_app_appdoc document in the session database isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? loaddata_appdoc load data from an application document makefilterstruct make a filter structure for a given sampling rate and extraction parameters newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app spikeextractor an app to extract elements found in sessions struct2doc create an ndi.document from an input structure and input parameters varappname return the name of the application for use in variable creation version_url return the app version and url","title":"Methods"},{"location":"reference/%2Bndi/%2Bapp/spikeextractor.m/#methods-help","text":"add_appdoc - Load data from an application document [...] = ADD_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE , ... APPDOC_STRUCT , DOCEXISTSACTION , [ additional arguments ]) Creates a new ndi . document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT . [ additional inputs ] are used to find or specify the NDI_document in the database . They are passed to the function FIND_APPDOC , so see help FIND_APPDOC for the documentation for each app . The DOC is returned as a cell array of NDI_DOCUMENTs ( should have 1 entry but could have more than 1 if the document already exists ). If APPDOC_STRUCT is empty , then default values are used . If it is a character array , then it is assumed to be a filename of a tab - separated - value text file . If it is an ndi . document , then it is assumed to be an ndi . document and it will be converted to the parameters using DOC2STRUCT . This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [ additional inputs ] already exists : DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- ' Error ' | An error is generating indicating the document exists . ' NoAction ' | The existing document is left alone . The existing ndi . document | is returned in DOC . ' Replace ' | Replace the document ; note that this deletes all NDI_DOCUMENTS | that depend on the original . ' ReplaceIfDifferent ' | Conditionally replace the document , but only if the | the data structures that define the document are not equal . Help for ndi . app . spikeextractor / add_appdoc is inherited from superclass NDI . APP . APPDOC appdoc_description - a function that prints a description of all appdoc types For ndi_app_spikeextractor , there are the following types : APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'extraction_parameters' | A document that describes the parameters to be used for extraction [ 'extraction_parameters'... | A document that describes modifications to the parameters to be used for extracting '_modification' ] | a particular epoch . 'spikewaves' | A document that stores spike waves found by the extractor in an epoch 'spiketimes' | A document that stores the times of the waves found by the extractor in an epoch ---------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------- APPDOC 1 : EXTRACTION_PARAMETERS ---------------------------------------------------------------------------------------------- ---------------------------------- | EXTRACTION_PARAMETERS -- ABOUT | ---------------------------------- EXTRACTION_PARAMETERS documents hold the parameters that are to be used to guide the extraction of spikewaves . Definition : app / spikeextractor / extraction_parameters ------------------------------------- | EXTRACTION_PARAMETERS -- CREATION | ------------------------------------- DOC = STRUCT2DOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , 'extraction_parameters' , EXTRACTION_PARAMS , EXTRACTION_NAME ) EXTRACTION_NAME is a string containing the name of the extraction document . EXTRACTION_PARAMS should contain the following fields : Fieldname | Description ------------------------------------------------------------------------- center_range ( 10 ) | Range in samples to find spike center overlap ( 0.5 ) | Overlap allowed read_time ( 30 ) | Number of seconds to read in at a single time refractory_samples ( 10 ) | Number of samples to use as a refractory period spike_sample_start ( - 9 ) | Samples before the threshold to include % unclear if time or sample spike_sample_stop ( 20 ) | Samples after the threshold to include % unclear if time or sample start_time ( 1 ) | First sample to read do_filter ( 1 ) | Should we perform a filter ? ( 0 / 1 ) filter_type | What filter ? Default is 'cheby1high' but can also be 'none' ( 'cheby1high' ) | filter_low ( 0 ) | Low filter frequency filter_high ( 300 ) | Filter high frequency filter_order ( 4 ) | Filter order filter_ripple ( 0.8 ) | Filter ripple parameter threshold_method | Threshold method . Can be \"standard_deviation\" or \"absolute\" threshold_parameter | Threshold parameter . If threshold_method is \"standard_deviation\" then ( 'standard_deviation' ) | this parameter is multiplied by the empirical standard deviation . | If \"absolute\" , then this value is taken to be the absolute threshold . threshold_sign ( - 1 ) | Threshold crossing sign ( - 1 means high - to - low , 1 means low - to - high ) ------------------------------------ | EXTRACTION_PARAMETERS -- FINDING | ------------------------------------ [ EXTRACTION_PARAMETERS_DOC ] = FIND_APPDOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , ... 'extraction_parameters' , EXTRACTION_PARAMETERS_NAME ) INPUTS : EXTRACTION_PARAMETERS_NAME - the name of the extraction parameter document OUPUT : Returns the extraction parameters ndi . document with the name EXTRACTION_NAME . ------------------------------------ | EXTRACTION_PARAMETERS -- LOADING | ------------------------------------ [ EXTRACTION_PARAMETERS_DOC ] = LOADDATA_APPDOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , ... 'extraction_parameters' , EXTRACTION_NAME ) INPUTS : EXTRACTION_PARAMETERS_NAME - the name of the extraction parameter document OUPUT : Returns the extraction parameters ndi . document with the name EXTRACTION_NAME . ---------------------------------------------------------------------------------------------- APPDOC 2 : EXTRACTION_PARAMETERS_MODIFICATION ---------------------------------------------------------------------------------------------- ----------------------------------------------- | EXTRACTION_PARAMETERS_MODIFICATION -- ABOUT | ----------------------------------------------- EXTRACTION_PARAMETERS_MODIFICATION documents allow the user to modify the spike extraction parameters for a specific epoch . Definition : app / spikeextractor / extraction_parameters_modification -------------------------------------------------- | EXTRACTION_PARAMETERS_MODIFICATION -- CREATION | -------------------------------------------------- DOC = STRUCT2DOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , 'extraction_parameters_modification' , ... EXTRACTION_PARAMS , EXTRACTION_NAME ) EXTRACTION_NAME is a string containing the name of the extraction document . EXTRACTION_PARAMS should contain the following fields : Fieldname | Description ------------------------------------------------------------------------- center_range ( 10 ) | Range in samples to find spike center overlap ( 0.5 ) | Overlap allowed read_time ( 30 ) | Number of seconds to read in at a single time refractory_samples ( 10 ) | Number of samples to use as a refractory period spike_sample_start ( - 9 ) | Samples before the threshold to include % unclear if time or sample spike_sample_stop ( 20 ) | Samples after the threshold to include % unclear if time or sample start_time ( 1 ) | First sample to read do_filter ( 1 ) | Should we perform a filter ? ( 0 / 1 ) filter_type | What filter ? Default is 'cheby1high' but can also be 'none' ( 'cheby1high' ) | filter_low ( 0 ) | Low filter frequency filter_high ( 300 ) | Filter high frequency filter_order ( 4 ) | Filter order filter_ripple ( 0.8 ) | Filter ripple parameter threshold_method | Threshold method . Can be \"standard_deviation\" or \"absolute\" threshold_parameter | Threshold parameter . If threshold_method is \"standard_deviation\" then ( 'standard_deviation' ) | this parameter is multiplied by the empirical standard deviation . | If \"absolute\" , then this value is taken to be the absolute threshold . threshold_sign ( - 1 ) | Threshold crossing sign ( - 1 means high - to - low , 1 means low - to - high ) ------------------------------------------------- | EXTRACTION_PARAMETERS_MODIFICATION -- FINDING | ------------------------------------------------- [ EXTRACTION_PARAMETERS_MODIFICATION_DOC ] = FIND_APPDOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , ... 'extraction_parameters_modification' , NDI_TIMESERIES_OBJ , EPOCHID , EXTRACTION_NAME ) INPUTS : NDI_TIMESERIES_OBJ - the ndi . time . timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUPUT : Returns the extraction parameters modification ndi . document with the name EXTRACTION_NAME for the named EPOCHID and NDI_TIMESERIES_OBJ . ------------------------------------------------- | EXTRACTION_PARAMETERS_MODIFICATION -- LOADING | ------------------------------------------------- [ EXTRACTION_PARAMETERS_DOC ] = LOADDATA_APPDOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , ... 'extraction_parameters_modification' , NDI_TIMESERIES_OBJ , EPOCHID , EXTRACTION_NAME ) INPUTS : NDI_TIMESERIES_OBJ - the ndi . time . timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_PARAMETERS_NAME - the name of the extraction parameter document OUPUT : Returns the extraction parameters modification ndi . document with the name EXTRACTION_NAME . ---------------------------------------------------------------------------------------------- APPDOC 3 : SPIKEWAVES ---------------------------------------------------------------------------------------------- ----------------------- | SPIKEWAVES -- ABOUT | ----------------------- SPIKEWAVES documents store the spike waveforms that are read during a spike extraction . It DEPENDS ON the ndi . time . timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that descibed the extraction . Definition : app / spikeextractor / spikewaves -------------------------- | SPIKEWAVES -- CREATION | -------------------------- Spikewaves documents are created internally by the EXTRACT function ------------------------ | SPIKEWAVES - FINDING | ------------------------ [ SPIKEWAVES_DOC ] = FIND_APPDOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , 'spikewaves' , ... NDI_TIMESERIES_OBJ , EPOCH , EXTRACTION_NAME ) INPUTS : NDI_TIMESERIES_OBJ - the ndi . time . timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUTPUT : SPIKEWAVES_DOC - the ndi . document of the extracted spike waves . ------------------------ | SPIKEWAVES - LOADING | ------------------------ [ CONCATENATED_SPIKES, WAVEPARAMETERS, SPIKEWAVES_DOC ] = LOADDATA_APPDOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , 'spikewaves' , ... NDI_TIMESERIES_OBJ , EPOCH , EXTRACTION_NAME ) INPUTS : NDI_TIMESERIES_OBJ - the ndi . time . timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUTPUTS : CONCATENATED_SPIKES - an array of spike waveforms SxDxN , where S is the number of samples per channel of each waveform , D is the number of channels ( dimension ), and N is the number of spike waveforms WAVEPARAMETERS - a structure with the following fields : Field | Description -------------------------------------------------------- numchannels | Number of channels in each spike S0 | Number of samples before spike center | ( usually negative ) S1 | Number of samples after spike center | ( usually positive ) samplerate | The sampling rate SPIKEWAVES_DOC - the ndi . document of the extracted spike waves . ---------------------------------------------------------------------------------------------- APPDOC 4 : SPIKETIMES ---------------------------------------------------------------------------------------------- ----------------------- | SPIKETIMES -- ABOUT | ----------------------- SPIKETIMES documents store the times spike waveforms that are read during a spike extraction . It DEPENDS ON the ndi . time . timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that descibed the extraction . The times are in the local epoch time units . Definition : app / spikeextractor / spiketimes -------------------------- | SPIKETIMES -- CREATION | -------------------------- Spiketimes documents are created internally by the EXTRACT function ------------------------ | SPIKETIMES - FINDING | ------------------------ [ SPIKETIMES_DOC ] = FIND_APPDOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , 'spiketimes' , ... NDI_TIMESERIES_OBJ , EPOCH , EXTRACTION_NAME ) INPUTS : NDI_TIMESERIES_OBJ - the ndi . time . timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUTPUT : SPIKEWAVES_DOC - the ndi . document of the extracted spike waves . ------------------------ | SPIKETIMES - LOADING | ------------------------ [ SPIKETIMES, SPIKETIMES_DOC ] = LOADDATA_APPDOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , 'spiketimes' , ... NDI_TIMESERIES_OBJ , EPOCH , EXTRACTION_NAME ) INPUTS : NDI_TIMESERIES_OBJ - the ndi . time . timeseries object that was used in the extraction EPOCH - the epoch identifier to be accessed EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUTPUTS : SPIKETIMES - the time of each spike wave , in local epoch time coordinates SPIKETIMES_DOC - the ndi . document of the extracted spike times . ---------------------------------------------------------------------------------------------- clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE , [ additional inputs ]) Deletes the app document of style DOC_NAME from the database . [ additional inputs ] are used to find the NDI_document in the database . They are passed to the function FIND_APPDOC , so see help FIND_APPDOC for the documentation for each app . B is 1 if the document is found , and 0 otherwise . Help for ndi . app . spikeextractor / clear_appdoc is inherited from superclass NDI . APP . APPDOC defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE ) Return the default data structure for a given APPDOC_TYPE of an ndi . app . appdoc object . In the base class , the blank version of the ndi . document is read in and the default structure is built from the ndi . document ' s class property list. Help for ndi . app . spikeextractor / defaultstruct_appdoc is inherited from superclass NDI . APP . APPDOC doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC ( NDI_APPDOC_OBJ , SESSION , APPDOC_TYPE , APPDOC_STRUCT , [ additional parameters ] Create an ndi . document from a data structure APPDOC_STRUCT . The ndi . document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ . In the base class , this uses the property info in the ndi . document to load the data structure . Help for ndi . app . spikeextractor / doc2struct is inherited from superclass NDI . APP . APPDOC extract - method that extracts spikes from epochs of an NDI_ELEMENT_TIMESERIES_OBJ EXTRACT ( NDI_APP_SPIKEEXTRACTOR_OBJ , NDI_TIMESERIES_OBJ , EPOCH , EXTRACTION_NAME , [ REDO ], [ T0 T1 ]) TYPE is the type of probe if any combination of NAME and TYPE must return at least one probe from session EPOCH is an index number or id to select epoch to extract , or can be a cell array of epoch number / ids EXTRACTION_NAME name given to find ndi_doc in database REDO - if 1 , then extraction is re - done for epochs even if it has been done before with same extraction parameters [ T0 T1 ] - if given , then restricts the extraction to be between times t0 and t1 ; default is [ - Inf Inf ] filter - filter data based on a filter structure DATA_OUT = FILTER(NDI_APP_SPIKEEXTRACTOR_OBJ, DATA_IN, FILTERSTRUCT) Filters data based on FILTERSTRUCT (see ndi_app_spikeextractor/MAKEFILTERSTRUCT) find_appdoc - find an ndi_app_appdoc document in the session database See ndi_app_spikeextractor / APPDOC_DESCRIPTION for documentation . See also : ndi_app_spikeextractor / APPDOC_DESCRIPTION isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT ( NDI_APPDOC_OBJ , APPDOC_TYPE , APPDOC_STRUCT1 , APPDOC_STRUCT2 ) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal . In the base class , this is true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes . That is , B is vlt . data . eqlen ( APPDOC_STRUCT1 , APPDOC_STRUCT2 ) . Help for ndi . app . spikeextractor / isequal_appdoc_struct is inherited from superclass NDI . APP . APPDOC isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [ B , ERRORMSG ] = ISVALID_APPDOC_STRUCT ( NDI_APP_SPIKEEXTRACTOR_OBJ , APPDOC_TYPE , APPDOC_STRUCT ) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi . document described by APPDOC_TYPE . B is 1 if it is valid and 0 otherwise . For ndi_app_spikeextractor , one can use an APPDOC_TYPE of the following : APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- ' extraction_parameters ' | A document that describes the parameters to be used for extraction loaddata_appdoc - load data from an application document See ndi_app_spikeextractor / APPDOC_DESCRIPTION for documentation . See also : ndi_app_spikeextractor / APPDOC_DESCRIPTION makefilterstruct - make a filter structure for a given sampling rate and extraction parameters FILTERSTRUCT = MAKEFILTERSTRUCT ( NDI_APP_SPIKEEXTRACTOR_OBJ , EXTRACTION_DOC , SAMPLE_RATE ) Given an EXTRACTION_DOC of parameters and a sampling rate SAMPLE_RATE , make a filter structure for passing to FILTERDATA . newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_APP_OBJ ) Creates a blank ndi . document object of type ' ndi_document_app ' . The ' app.name ' field is filled out with the name of NDI_APP_OBJ . VARAPPNAME () . Help for ndi . app . spikeextractor / newdocument is inherited from superclass NDI . APP searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY ( NDI_APP_OBJ ) Returns a cell array of strings that allow the creation or searching of an ndi . database document for this app with field ' app ' that has subfield ' name ' equal to the app ' s VARAPPNAME. Help for ndi . app . spikeextractor / searchquery is inherited from superclass NDI . APP spikeextractor - an app to extract elements found in sessions NDI_APP_SPIKEEXTRACTOR_OBJ = ndi.app.spikeextractor(SESSION) Creates a new ndi_app_spikeextractor object that can operate on NDI_SESSIONS. The app is named 'ndi_app_spikeextractor'. struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC ( NDI_APP_SPIKEEXTRACTOR_OBJ , APPDOC_TYPE , APPDOC_STRUCT , ... ) For ndi_app_spikeextractor , one can use an APPDOC_TYPE of the following : APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- ' extraction_parameters ' | A document that describes the parameters to be used for extraction [ ' extraction_parameters ' ... | A document that modifies the parameters to be used for extraction for a single epoch ' _modification ' ] | See APPDOC_DESCRIPTION for a list of the parameters . varappname - return the name of the application for use in variable creation AN = VARAPPNAME ( NDI_APP_OBJ ) Returns the name of the app modified for use as a variable name , either as a Matlab variable or a name in a document . Help for ndi . app . spikeextractor / varappname is inherited from superclass NDI . APP version_url - return the app version and url [ V , URL ] = VERSION_URL ( NDI_APP_OBJ ) Return the version and url for the current app . In the base class , it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory . Developers should override this method in their own class if they use a different version control system . Help for ndi . app . spikeextractor / version_url is inherited from superclass NDI . APP","title":"Methods help"},{"location":"reference/%2Bndi/%2Bapp/spikesorter.m/","text":"CLASS ndi.app.spikesorter \u00b6 NDI.APP.spikesorter - an app to sort spikewaves found in sessions NDI.APP.spikesorter_OBJ = ndi.app.spikesorter(SESSION) Creates a new NDI_APP_spikesorter object that can operate on NDI_SESSIONS. The app is named 'ndi_app_spikesorter'. Superclasses \u00b6 ndi.app , ndi.documentservice , ndi.app.appdoc Properties \u00b6 Property Description session name doc_types doc_document_types doc_session Methods \u00b6 Method Description add_appdoc Load data from an application document appdoc_description a function that prints a description of all appdoc types check_sorting_parameters check sorting parameters for validity clear_appdoc remove an ndi.app.appdoc document from a session database clusters2neurons create ndi.neuron objects from spike clusterings defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters find_appdoc find an ndi_app_appdoc document in the session database isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? loaddata_appdoc load data from an application document loadspiketimes load extracted spike times for an ndi_timeseries_obj loadwaveforms load extracted spike waveforms for an ndi_timeseries_obj newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app spike_sort method that sorts spikes from specific probes in session to ndi_doc spikesorter an app to sort spikewaves found in sessions struct2doc create an ndi.document from an input structure and input parameters varappname return the name of the application for use in variable creation version_url return the app version and url Methods help \u00b6 add_appdoc - Load data from an application document [...] = ADD_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE , ... APPDOC_STRUCT , DOCEXISTSACTION , [ additional arguments ]) Creates a new ndi . document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT . [ additional inputs ] are used to find or specify the NDI_document in the database . They are passed to the function FIND_APPDOC , so see help FIND_APPDOC for the documentation for each app . The DOC is returned as a cell array of NDI_DOCUMENTs ( should have 1 entry but could have more than 1 if the document already exists ). If APPDOC_STRUCT is empty , then default values are used . If it is a character array , then it is assumed to be a filename of a tab - separated - value text file . If it is an ndi . document , then it is assumed to be an ndi . document and it will be converted to the parameters using DOC2STRUCT . This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [ additional inputs ] already exists : DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- ' Error ' | An error is generating indicating the document exists . ' NoAction ' | The existing document is left alone . The existing ndi . document | is returned in DOC . ' Replace ' | Replace the document ; note that this deletes all NDI_DOCUMENTS | that depend on the original . ' ReplaceIfDifferent ' | Conditionally replace the document , but only if the | the data structures that define the document are not equal . Help for ndi . app . spikesorter / add_appdoc is inherited from superclass NDI . APP . APPDOC appdoc_description - a function that prints a description of all appdoc types For ndi_app_spikeextractor , there are the following types : APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'sorting_parameters' | A document that describes the parameters to be used for sorting 'spike_clusters' | A document that contains the assignment of a set of spikes to clusters ---------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------- APPDOC 1 : SORTING_PARAMETERS ---------------------------------------------------------------------------------------------- ---------------------------------- | SORTING_PARAMETERS -- ABOUT | ---------------------------------- SORTING_PARAMETERS documents hold the parameters that are to be used to guide the extraction of spikewaves . Definition : apps / spikesorter / sorting_parameters . json ------------------------------------- | SORTING_PARAMETERS -- CREATION | ------------------------------------- DOC = STRUCT2DOC ( NDI_APP_SPIKESORTER_OBJ , 'sorting_parameters' , SORTING_PARAMS , SORTING_PARAMETERS_NAME ) SORTING_NAME is a string containing the name of the extraction document . SORTING_PARAMS should contain the following fields : Fieldname | Description ------------------------------------------------------------------------- graphical_mode ( 1 ) | Should we use graphical mode ( 1 ) or automatic mode ( 0 ) ? num_pca_features ( 10 ) | Number of pca - driven features to use in the clustering calculation in automatic mode interpolation ( 3 ) | By how many times should we oversample the spikes , interpolating by splines ? min_clusters ( 3 ) | Minimum clusters parameter for KlustaKwik in automatic mode max_clusters ( 10 ) | Maximum clusters parameter for KlustaKwik in automatic mode num_start ( 5 ) | Number of random starting positions in automatic mode ------------------------------------ | SORTING_PARAMETERS -- FINDING | ------------------------------------ [ SORTING_PARAMETERS_DOC ] = FIND_APPDOC ( NDI_APP_SPIKESORTER_OBJ , ... 'sorting_parameters' , SORTING_PARAMETERS_NAME ) INPUTS : SORTING_PARAMETERS_NAME - the name of the sorting parameter document OUPUT : Returns the sorting parameters ndi . document with the name SORTING_PARAMETERS_NAME . ------------------------------------ | SORTING_PARAMETERS -- LOADING | ------------------------------------ [ SORTING_PARAMETERS_DOC ] = LOADDATA_APPDOC ( NDI_APP_SPIKESORTER_OBJ , ... 'sorting_parameters' , SORTING_PARAMETERS_NAME ) INPUTS : SORTING_PARAMETERS_NAME - the name of the sorting parameter document OUPUT : Returns the sorting parameters ndi . document with the name SORTING_PARAMETERS_NAME . ---------------------------------------------------------------------------------------------- APPDOC 2 : SPIKE_CLUSTERS ---------------------------------------------------------------------------------------------- --------------------------- | SPIKE_CLUSTERS -- ABOUT | --------------------------- SPIKEWAVES documents store the spike waveforms that are read during a spike extraction . It DEPENDS ON the ndi . time . timeseries object on which the extraction is performed and the SORTING_PARAMETERS that descibed the extraction . Definition : apps / spikesorter / spike_clusters ------------------------------ | SPIKE_CLUSTERS -- CREATION | ------------------------------ Spike cluster documents are created internally by the SORT function ---------------------------- | SPIKE_CLUSTERS - FINDING | ---------------------------- [ SPIKE_CLUSTERS_DOC ] = FIND_APPDOC ( NDI_APP_SPIKESORTER_OBJ , 'spike_clusters' , ... NDI_TIMESERIES_OBJ , SORTING_PARAMETERS_NAME ) INPUTS : NDI_TIMESERIES_OBJ - the ndi . time . timeseries object that was used in the extraction SORTING_PARAMETERS_NAME - the name of the sorting parameters document used in the sorting OUTPUT : SPIKECLUSTERS_DOC - the ndi . document of the cluster information ---------------------------- | SPIKE_CLUSTERS - LOADING | ---------------------------- [ CLUSTERIDS, SPIKE_CLUSTERS_DOC ] = LOADDATA_APPDOC ( NDI_APP_SPIKESORTER_OBJ , 'spike_clusters' , ... NDI_TIMESERIES_OBJ , SORTING_PARAMETERS_NAME , EXTRACTION_PARAMETERS_NAME ) INPUTS : NDI_TIMESERIES_OBJ - the ndi . time . timeseries object that was used in the extraction SORTING_PARAMETERS_NAME - the name of the sorting parameters document used in the sorting EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUTPUTS : CLUSTERIDS : the cluster id number of each spike SPIKE_CLUSTERS_DOC - the ndi . document of the clusters , which includes detailed cluster information . check_sorting_parameters - check sorting parameters for validity SORTING_PARAMETERS_STRUCT = CHECK_SORTING_PARAMETERS(NDI_APP_SPIKESORTER_OBJ, SORTING_PARAMETERS_STRUCT) Given a sorting parameters structure (see help ndi.app.spikesorter/appdoc_description), check that the parameters are provided and are in appropriate ranges. interpolation clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE , [ additional inputs ]) Deletes the app document of style DOC_NAME from the database . [ additional inputs ] are used to find the NDI_document in the database . They are passed to the function FIND_APPDOC , so see help FIND_APPDOC for the documentation for each app . B is 1 if the document is found , and 0 otherwise . Help for ndi . app . spikesorter / clear_appdoc is inherited from superclass NDI . APP . APPDOC clusters2neurons - create ndi.neuron objects from spike clusterings CLUSTERS2NEURONS ( NDI_APP_SPIKESORTER_OBJ , NDI_TIMESERIES_OBJ , SORTING_PARAMETER_NAME , EXTRACTION_PARAMETERS_NAME , REDO ) Generates ndi . neuron objects for each spike cluster represented in the defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE ) Return the default data structure for a given APPDOC_TYPE of an ndi . app . appdoc object . In the base class , the blank version of the ndi . document is read in and the default structure is built from the ndi . document ' s class property list. Help for ndi . app . spikesorter / defaultstruct_appdoc is inherited from superclass NDI . APP . APPDOC doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC ( NDI_APPDOC_OBJ , SESSION , APPDOC_TYPE , APPDOC_STRUCT , [ additional parameters ] Create an ndi . document from a data structure APPDOC_STRUCT . The ndi . document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ . In the base class , this uses the property info in the ndi . document to load the data structure . Help for ndi . app . spikesorter / doc2struct is inherited from superclass NDI . APP . APPDOC find_appdoc - find an ndi_app_appdoc document in the session database See ndi_app_spikesorter / APPDOC_DESCRIPTION for documentation . isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT ( NDI_APPDOC_OBJ , APPDOC_TYPE , APPDOC_STRUCT1 , APPDOC_STRUCT2 ) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal . In the base class , this is true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes . That is , B is vlt . data . eqlen ( APPDOC_STRUCT1 , APPDOC_STRUCT2 ) . Help for ndi . app . spikesorter / isequal_appdoc_struct is inherited from superclass NDI . APP . APPDOC isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [ B , ERRORMSG ] = ISVALID_APPDOC_STRUCT ( ndi . app . spikeextractor_OBJ , APPDOC_TYPE , APPDOC_STRUCT ) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi . document described by APPDOC_TYPE . B is 1 if it is valid and 0 otherwise . For ndi_app_spikesorter , one can use an APPDOC_TYPE of the following : APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- ' sorting_parameters ' | A document that describes the parameters to be used for sorting ' spike_clusters ' | A document that describes the loaddata_appdoc - load data from an application document See ndi_app_spikesorter / APPDOC_DESCRIPTION for documentation . loadspiketimes - load extracted spike times for an ndi_timeseries_obj [ SPIKETIMES , EPOCHINFO , EXTRACTION_PARAMS_DOC , SPIKETIMES_DOCS ] = LOADSPIKETIMES ( ... NDI_APP_SPIKESORTER_OBJ , NDI_TIMESERIES_OBJ , EXTRACTION_NAME ) Loads extracted SPIKETIMES from an NDI_TIMESERIERS_OBJ with extraction name EXTRACTION_NAME . SPIKTIMES is a vector description of each spike waveform . EPOCHINFO - a structure with fields EpochStartSamples that indicates the spiketime number that begins each new epoch from the NDI_TIMESERIES_OBJ and EpochNames that is a cell array of the epoch ID of each epoch . EXTRACTION_PARAMS_DOC is the ndi . document for the extraction parameters . SPIKETIMES_DOCS is a cell array of ndi . documents for each extracted spike waveform document . loadwaveforms - load extracted spike waveforms for an ndi_timeseries_obj [ WAVEFORMS , WAVEFORMPARAMS , EPOCHINFO , EXTRACTION_PARAMS_DOC , WAVEFORM_DOCS ] = LOADWAVEFORMS ( ... NDI_APP_SPIKESORTER_OBJ , NDI_TIMESERIES_OBJ , EXTRACTION_NAME ) Loads extracted spike WAVEFORMS from an NDI_TIMESERIERS_OBJ with extraction name EXTRACTION_NAME . WAVEFORMS is a NumSamples x NumChannels x NumSpikes representation of each spike waveform . WAVEFORMPARAMS is the set of waveform parameters from ndi . app . spikeextractor that includes information such as the sample dimensions and the sampling rate of the underlying data . See help ndi . app . spikeextractor . appdoc_description . EPOCHINFO - a structure with fields EpochStartSamples that indicates the waveform sample that begins each new epoch from the NDI_TIMESERIES_OBJ and EpochNames that is a cell array of the epoch ID of each epoch . EXTRACTION_PARAMS_DOC is the ndi . document for the extraction parameters . WAVEFORM_DOCS is a cell array of ndi . documents for each extracted spike waveform document . newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_APP_OBJ ) Creates a blank ndi . document object of type ' ndi_document_app ' . The ' app.name ' field is filled out with the name of NDI_APP_OBJ . VARAPPNAME () . Help for ndi . app . spikesorter / newdocument is inherited from superclass NDI . APP searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY ( NDI_APP_OBJ ) Returns a cell array of strings that allow the creation or searching of an ndi . database document for this app with field ' app ' that has subfield ' name ' equal to the app ' s VARAPPNAME. Help for ndi . app . spikesorter / searchquery is inherited from superclass NDI . APP spike_sort - method that sorts spikes from specific probes in session to ndi_doc SPIKE_CLUSTER_DOC = SPIKE_SORT ( SPIKEWAVES , SORT_NAME , SORTING_PARAMS ) %%%%%%%%%%%% SORT_NAME name given to save sort to ndi_doc spikesorter - an app to sort spikewaves found in sessions NDI.APP.spikesorter_OBJ = ndi.app.spikesorter(SESSION) Creates a new NDI_APP_spikesorter object that can operate on NDI_SESSIONS. The app is named 'ndi_app_spikesorter'. struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC ( NDI_APP_SPIKESORTER_OBJ , APPDOC_TYPE , APPDOC_STRUCT , ... ) For ndi . app . spikesorter , one can use an APPDOC_TYPE of the following : APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- ' sorting_parameters ' | A document that describes the parameters to be used for sorting See APPDOC_DESCRIPTION for a list of the parameters . varappname - return the name of the application for use in variable creation AN = VARAPPNAME ( NDI_APP_OBJ ) Returns the name of the app modified for use as a variable name , either as a Matlab variable or a name in a document . Help for ndi . app . spikesorter / varappname is inherited from superclass NDI . APP version_url - return the app version and url [ V , URL ] = VERSION_URL ( NDI_APP_OBJ ) Return the version and url for the current app . In the base class , it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory . Developers should override this method in their own class if they use a different version control system . Help for ndi . app . spikesorter / version_url is inherited from superclass NDI . APP","title":"ndi.app.spikesorter"},{"location":"reference/%2Bndi/%2Bapp/spikesorter.m/#class-ndiappspikesorter","text":"NDI.APP.spikesorter - an app to sort spikewaves found in sessions NDI.APP.spikesorter_OBJ = ndi.app.spikesorter(SESSION) Creates a new NDI_APP_spikesorter object that can operate on NDI_SESSIONS. The app is named 'ndi_app_spikesorter'.","title":"CLASS ndi.app.spikesorter"},{"location":"reference/%2Bndi/%2Bapp/spikesorter.m/#superclasses","text":"ndi.app , ndi.documentservice , ndi.app.appdoc","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bapp/spikesorter.m/#properties","text":"Property Description session name doc_types doc_document_types doc_session","title":"Properties"},{"location":"reference/%2Bndi/%2Bapp/spikesorter.m/#methods","text":"Method Description add_appdoc Load data from an application document appdoc_description a function that prints a description of all appdoc types check_sorting_parameters check sorting parameters for validity clear_appdoc remove an ndi.app.appdoc document from a session database clusters2neurons create ndi.neuron objects from spike clusterings defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters find_appdoc find an ndi_app_appdoc document in the session database isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? loaddata_appdoc load data from an application document loadspiketimes load extracted spike times for an ndi_timeseries_obj loadwaveforms load extracted spike waveforms for an ndi_timeseries_obj newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app spike_sort method that sorts spikes from specific probes in session to ndi_doc spikesorter an app to sort spikewaves found in sessions struct2doc create an ndi.document from an input structure and input parameters varappname return the name of the application for use in variable creation version_url return the app version and url","title":"Methods"},{"location":"reference/%2Bndi/%2Bapp/spikesorter.m/#methods-help","text":"add_appdoc - Load data from an application document [...] = ADD_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE , ... APPDOC_STRUCT , DOCEXISTSACTION , [ additional arguments ]) Creates a new ndi . document that is based on the type APPDOC_TYPE with creation data specified by APPDOC_STRUCT . [ additional inputs ] are used to find or specify the NDI_document in the database . They are passed to the function FIND_APPDOC , so see help FIND_APPDOC for the documentation for each app . The DOC is returned as a cell array of NDI_DOCUMENTs ( should have 1 entry but could have more than 1 if the document already exists ). If APPDOC_STRUCT is empty , then default values are used . If it is a character array , then it is assumed to be a filename of a tab - separated - value text file . If it is an ndi . document , then it is assumed to be an ndi . document and it will be converted to the parameters using DOC2STRUCT . This function also takes a string DOCEXISTSACTION that describes what it should do in the event that the document fitting the [ additional inputs ] already exists : DOCEXISTACTION value | Description ---------------------------------------------------------------------------------- ' Error ' | An error is generating indicating the document exists . ' NoAction ' | The existing document is left alone . The existing ndi . document | is returned in DOC . ' Replace ' | Replace the document ; note that this deletes all NDI_DOCUMENTS | that depend on the original . ' ReplaceIfDifferent ' | Conditionally replace the document , but only if the | the data structures that define the document are not equal . Help for ndi . app . spikesorter / add_appdoc is inherited from superclass NDI . APP . APPDOC appdoc_description - a function that prints a description of all appdoc types For ndi_app_spikeextractor , there are the following types : APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- 'sorting_parameters' | A document that describes the parameters to be used for sorting 'spike_clusters' | A document that contains the assignment of a set of spikes to clusters ---------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------- APPDOC 1 : SORTING_PARAMETERS ---------------------------------------------------------------------------------------------- ---------------------------------- | SORTING_PARAMETERS -- ABOUT | ---------------------------------- SORTING_PARAMETERS documents hold the parameters that are to be used to guide the extraction of spikewaves . Definition : apps / spikesorter / sorting_parameters . json ------------------------------------- | SORTING_PARAMETERS -- CREATION | ------------------------------------- DOC = STRUCT2DOC ( NDI_APP_SPIKESORTER_OBJ , 'sorting_parameters' , SORTING_PARAMS , SORTING_PARAMETERS_NAME ) SORTING_NAME is a string containing the name of the extraction document . SORTING_PARAMS should contain the following fields : Fieldname | Description ------------------------------------------------------------------------- graphical_mode ( 1 ) | Should we use graphical mode ( 1 ) or automatic mode ( 0 ) ? num_pca_features ( 10 ) | Number of pca - driven features to use in the clustering calculation in automatic mode interpolation ( 3 ) | By how many times should we oversample the spikes , interpolating by splines ? min_clusters ( 3 ) | Minimum clusters parameter for KlustaKwik in automatic mode max_clusters ( 10 ) | Maximum clusters parameter for KlustaKwik in automatic mode num_start ( 5 ) | Number of random starting positions in automatic mode ------------------------------------ | SORTING_PARAMETERS -- FINDING | ------------------------------------ [ SORTING_PARAMETERS_DOC ] = FIND_APPDOC ( NDI_APP_SPIKESORTER_OBJ , ... 'sorting_parameters' , SORTING_PARAMETERS_NAME ) INPUTS : SORTING_PARAMETERS_NAME - the name of the sorting parameter document OUPUT : Returns the sorting parameters ndi . document with the name SORTING_PARAMETERS_NAME . ------------------------------------ | SORTING_PARAMETERS -- LOADING | ------------------------------------ [ SORTING_PARAMETERS_DOC ] = LOADDATA_APPDOC ( NDI_APP_SPIKESORTER_OBJ , ... 'sorting_parameters' , SORTING_PARAMETERS_NAME ) INPUTS : SORTING_PARAMETERS_NAME - the name of the sorting parameter document OUPUT : Returns the sorting parameters ndi . document with the name SORTING_PARAMETERS_NAME . ---------------------------------------------------------------------------------------------- APPDOC 2 : SPIKE_CLUSTERS ---------------------------------------------------------------------------------------------- --------------------------- | SPIKE_CLUSTERS -- ABOUT | --------------------------- SPIKEWAVES documents store the spike waveforms that are read during a spike extraction . It DEPENDS ON the ndi . time . timeseries object on which the extraction is performed and the SORTING_PARAMETERS that descibed the extraction . Definition : apps / spikesorter / spike_clusters ------------------------------ | SPIKE_CLUSTERS -- CREATION | ------------------------------ Spike cluster documents are created internally by the SORT function ---------------------------- | SPIKE_CLUSTERS - FINDING | ---------------------------- [ SPIKE_CLUSTERS_DOC ] = FIND_APPDOC ( NDI_APP_SPIKESORTER_OBJ , 'spike_clusters' , ... NDI_TIMESERIES_OBJ , SORTING_PARAMETERS_NAME ) INPUTS : NDI_TIMESERIES_OBJ - the ndi . time . timeseries object that was used in the extraction SORTING_PARAMETERS_NAME - the name of the sorting parameters document used in the sorting OUTPUT : SPIKECLUSTERS_DOC - the ndi . document of the cluster information ---------------------------- | SPIKE_CLUSTERS - LOADING | ---------------------------- [ CLUSTERIDS, SPIKE_CLUSTERS_DOC ] = LOADDATA_APPDOC ( NDI_APP_SPIKESORTER_OBJ , 'spike_clusters' , ... NDI_TIMESERIES_OBJ , SORTING_PARAMETERS_NAME , EXTRACTION_PARAMETERS_NAME ) INPUTS : NDI_TIMESERIES_OBJ - the ndi . time . timeseries object that was used in the extraction SORTING_PARAMETERS_NAME - the name of the sorting parameters document used in the sorting EXTRACTION_NAME - the name of the extraction parameters document used in the extraction OUTPUTS : CLUSTERIDS : the cluster id number of each spike SPIKE_CLUSTERS_DOC - the ndi . document of the clusters , which includes detailed cluster information . check_sorting_parameters - check sorting parameters for validity SORTING_PARAMETERS_STRUCT = CHECK_SORTING_PARAMETERS(NDI_APP_SPIKESORTER_OBJ, SORTING_PARAMETERS_STRUCT) Given a sorting parameters structure (see help ndi.app.spikesorter/appdoc_description), check that the parameters are provided and are in appropriate ranges. interpolation clear_appdoc - remove an ndi.app.appdoc document from a session database B = CLEAR_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE , [ additional inputs ]) Deletes the app document of style DOC_NAME from the database . [ additional inputs ] are used to find the NDI_document in the database . They are passed to the function FIND_APPDOC , so see help FIND_APPDOC for the documentation for each app . B is 1 if the document is found , and 0 otherwise . Help for ndi . app . spikesorter / clear_appdoc is inherited from superclass NDI . APP . APPDOC clusters2neurons - create ndi.neuron objects from spike clusterings CLUSTERS2NEURONS ( NDI_APP_SPIKESORTER_OBJ , NDI_TIMESERIES_OBJ , SORTING_PARAMETER_NAME , EXTRACTION_PARAMETERS_NAME , REDO ) Generates ndi . neuron objects for each spike cluster represented in the defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC ( NDI_APPDOC_OBJ , APPDOC_TYPE ) Return the default data structure for a given APPDOC_TYPE of an ndi . app . appdoc object . In the base class , the blank version of the ndi . document is read in and the default structure is built from the ndi . document ' s class property list. Help for ndi . app . spikesorter / defaultstruct_appdoc is inherited from superclass NDI . APP . APPDOC doc2struct - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC ( NDI_APPDOC_OBJ , SESSION , APPDOC_TYPE , APPDOC_STRUCT , [ additional parameters ] Create an ndi . document from a data structure APPDOC_STRUCT . The ndi . document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ . In the base class , this uses the property info in the ndi . document to load the data structure . Help for ndi . app . spikesorter / doc2struct is inherited from superclass NDI . APP . APPDOC find_appdoc - find an ndi_app_appdoc document in the session database See ndi_app_spikesorter / APPDOC_DESCRIPTION for documentation . isequal_appdoc_struct - are two APPDOC data structures the same (equal)? B = ISEQUAL_APPDOC_STRUCT ( NDI_APPDOC_OBJ , APPDOC_TYPE , APPDOC_STRUCT1 , APPDOC_STRUCT2 ) Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal . In the base class , this is true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes . That is , B is vlt . data . eqlen ( APPDOC_STRUCT1 , APPDOC_STRUCT2 ) . Help for ndi . app . spikesorter / isequal_appdoc_struct is inherited from superclass NDI . APP . APPDOC isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC? [ B , ERRORMSG ] = ISVALID_APPDOC_STRUCT ( ndi . app . spikeextractor_OBJ , APPDOC_TYPE , APPDOC_STRUCT ) Examines APPDOC_STRUCT and determines whether it is a valid input for creating an ndi . document described by APPDOC_TYPE . B is 1 if it is valid and 0 otherwise . For ndi_app_spikesorter , one can use an APPDOC_TYPE of the following : APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- ' sorting_parameters ' | A document that describes the parameters to be used for sorting ' spike_clusters ' | A document that describes the loaddata_appdoc - load data from an application document See ndi_app_spikesorter / APPDOC_DESCRIPTION for documentation . loadspiketimes - load extracted spike times for an ndi_timeseries_obj [ SPIKETIMES , EPOCHINFO , EXTRACTION_PARAMS_DOC , SPIKETIMES_DOCS ] = LOADSPIKETIMES ( ... NDI_APP_SPIKESORTER_OBJ , NDI_TIMESERIES_OBJ , EXTRACTION_NAME ) Loads extracted SPIKETIMES from an NDI_TIMESERIERS_OBJ with extraction name EXTRACTION_NAME . SPIKTIMES is a vector description of each spike waveform . EPOCHINFO - a structure with fields EpochStartSamples that indicates the spiketime number that begins each new epoch from the NDI_TIMESERIES_OBJ and EpochNames that is a cell array of the epoch ID of each epoch . EXTRACTION_PARAMS_DOC is the ndi . document for the extraction parameters . SPIKETIMES_DOCS is a cell array of ndi . documents for each extracted spike waveform document . loadwaveforms - load extracted spike waveforms for an ndi_timeseries_obj [ WAVEFORMS , WAVEFORMPARAMS , EPOCHINFO , EXTRACTION_PARAMS_DOC , WAVEFORM_DOCS ] = LOADWAVEFORMS ( ... NDI_APP_SPIKESORTER_OBJ , NDI_TIMESERIES_OBJ , EXTRACTION_NAME ) Loads extracted spike WAVEFORMS from an NDI_TIMESERIERS_OBJ with extraction name EXTRACTION_NAME . WAVEFORMS is a NumSamples x NumChannels x NumSpikes representation of each spike waveform . WAVEFORMPARAMS is the set of waveform parameters from ndi . app . spikeextractor that includes information such as the sample dimensions and the sampling rate of the underlying data . See help ndi . app . spikeextractor . appdoc_description . EPOCHINFO - a structure with fields EpochStartSamples that indicates the waveform sample that begins each new epoch from the NDI_TIMESERIES_OBJ and EpochNames that is a cell array of the epoch ID of each epoch . EXTRACTION_PARAMS_DOC is the ndi . document for the extraction parameters . WAVEFORM_DOCS is a cell array of ndi . documents for each extracted spike waveform document . newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_APP_OBJ ) Creates a blank ndi . document object of type ' ndi_document_app ' . The ' app.name ' field is filled out with the name of NDI_APP_OBJ . VARAPPNAME () . Help for ndi . app . spikesorter / newdocument is inherited from superclass NDI . APP searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY ( NDI_APP_OBJ ) Returns a cell array of strings that allow the creation or searching of an ndi . database document for this app with field ' app ' that has subfield ' name ' equal to the app ' s VARAPPNAME. Help for ndi . app . spikesorter / searchquery is inherited from superclass NDI . APP spike_sort - method that sorts spikes from specific probes in session to ndi_doc SPIKE_CLUSTER_DOC = SPIKE_SORT ( SPIKEWAVES , SORT_NAME , SORTING_PARAMS ) %%%%%%%%%%%% SORT_NAME name given to save sort to ndi_doc spikesorter - an app to sort spikewaves found in sessions NDI.APP.spikesorter_OBJ = ndi.app.spikesorter(SESSION) Creates a new NDI_APP_spikesorter object that can operate on NDI_SESSIONS. The app is named 'ndi_app_spikesorter'. struct2doc - create an ndi.document from an input structure and input parameters DOC = STRUCT2DOC ( NDI_APP_SPIKESORTER_OBJ , APPDOC_TYPE , APPDOC_STRUCT , ... ) For ndi . app . spikesorter , one can use an APPDOC_TYPE of the following : APPDOC_TYPE | Description ---------------------------------------------------------------------------------------------- ' sorting_parameters ' | A document that describes the parameters to be used for sorting See APPDOC_DESCRIPTION for a list of the parameters . varappname - return the name of the application for use in variable creation AN = VARAPPNAME ( NDI_APP_OBJ ) Returns the name of the app modified for use as a variable name , either as a Matlab variable or a name in a document . Help for ndi . app . spikesorter / varappname is inherited from superclass NDI . APP version_url - return the app version and url [ V , URL ] = VERSION_URL ( NDI_APP_OBJ ) Return the version and url for the current app . In the base class , it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory . Developers should override this method in their own class if they use a different version control system . Help for ndi . app . spikesorter / version_url is inherited from superclass NDI . APP","title":"Methods help"},{"location":"reference/%2Bndi/%2Bapp/spikesorter_hengen.m/","text":"CLASS ndi.app.spikesorter_hengen \u00b6 NDI.APP.spikesorter.hengen - an app to sort spikewaves found in experiments using hengen Spike Sorter NDI_APP_spikesorter_hengen_OBJ = ndi.app.spikesorter_hengen(EXPERIMENT) Creates a new NDI.APP.spikesorter_hengen object that can operate on ndi.session objects. The app is named 'ndi_app_spikesorter_hengen'. Superclasses \u00b6 ndi.app , ndi.documentservice Properties \u00b6 Property Description session name Methods \u00b6 Method Description add_extraction_doc add extraction parameters document add_geometry_doc add probe geometry document add_sorting_doc add sorting parameters document extract_and_sort extracts and sorts selected .bin file in ndi.session.directory newdocument return a new database document of type ndi.document based on an app rate_neuron_quality given an existing sorting output from hengen sorter, rate neuron quality and add ndi_elements to experiment searchquery return a search query for an ndi.document related to this app spikesorter_hengen an app to sort spikewaves found in experiments using hengen Spike Sorter varappname return the name of the application for use in variable creation version_url return the app version and url Methods help \u00b6 add_extraction_doc - add extraction parameters document EXTRACTION_DOC = ADD_EXTRACTION_DOC(NDI_APP_SPIKESORTER_HENGEN_OBJ, EXTRACTION_NAME, EXTRACTION_PARAMETERS) add_geometry_doc - add probe geometry document GEOMETRY_DOC = ADD_GEOMETRY_DOC(NDI_APP_SPIKESORTER_HENGEN_OBJ, PROBE, GEOMETRY) Add a geometry in a cell array corresponding to channel_groups, ex. This app follows spikeinterface standard, unknown what the unit of geometry values are { \"0\": { \"channels\": [0, 1, 2, 3], \"geometry\": [[0, 0], [0, 1000], [0, 2000], [0, 3000]], \"label\": [\"t_00\", \"t_01\", \"t_02\", \"t_03\"] } } add_sorting_doc - add sorting parameters document SORTING_DOC = ADD_SORTING_DOC(NDI_APP_SPIKESORTER_HENGEN_OBJ, SORTER, SORTING_NAME, SORTING_PARAMETERS) extract_and_sort - extracts and sorts selected .bin file in ndi.session.directory EXTRACT_AND_SORT(REDO) - to handle selected .bin file in json input EXTRACT_AND_SORT(NDI_ELEMENT, EXTRACTION_NAME, SORTING_NAME, REDO) - to handle selected ndi.element newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_APP_OBJ ) Creates a blank ndi . document object of type ' ndi_document_app ' . The ' app.name ' field is filled out with the name of NDI_APP_OBJ . VARAPPNAME () . Help for ndi . app . spikesorter_hengen / newdocument is inherited from superclass NDI . APP rate_neuron_quality - given an existing sorting output from hengen sorter, rate neuron quality and add ndi_elements to experiment searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY ( NDI_APP_OBJ ) Returns a cell array of strings that allow the creation or searching of an ndi . database document for this app with field ' app ' that has subfield ' name ' equal to the app ' s VARAPPNAME. Help for ndi . app . spikesorter_hengen / searchquery is inherited from superclass NDI . APP spikesorter_hengen - an app to sort spikewaves found in experiments using hengen Spike Sorter NDI_APP_spikesorter_hengen_OBJ = ndi.app.spikesorter_hengen(EXPERIMENT) Creates a new NDI.APP.spikesorter_hengen object that can operate on ndi.session objects. The app is named 'ndi_app_spikesorter_hengen'. varappname - return the name of the application for use in variable creation AN = VARAPPNAME ( NDI_APP_OBJ ) Returns the name of the app modified for use as a variable name , either as a Matlab variable or a name in a document . Help for ndi . app . spikesorter_hengen / varappname is inherited from superclass NDI . APP version_url - return the app version and url [ V , URL ] = VERSION_URL ( NDI_APP_OBJ ) Return the version and url for the current app . In the base class , it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory . Developers should override this method in their own class if they use a different version control system . Help for ndi . app . spikesorter_hengen / version_url is inherited from superclass NDI . APP","title":"ndi.app.spikesorter_hengen"},{"location":"reference/%2Bndi/%2Bapp/spikesorter_hengen.m/#class-ndiappspikesorter_hengen","text":"NDI.APP.spikesorter.hengen - an app to sort spikewaves found in experiments using hengen Spike Sorter NDI_APP_spikesorter_hengen_OBJ = ndi.app.spikesorter_hengen(EXPERIMENT) Creates a new NDI.APP.spikesorter_hengen object that can operate on ndi.session objects. The app is named 'ndi_app_spikesorter_hengen'.","title":"CLASS ndi.app.spikesorter_hengen"},{"location":"reference/%2Bndi/%2Bapp/spikesorter_hengen.m/#superclasses","text":"ndi.app , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bapp/spikesorter_hengen.m/#properties","text":"Property Description session name","title":"Properties"},{"location":"reference/%2Bndi/%2Bapp/spikesorter_hengen.m/#methods","text":"Method Description add_extraction_doc add extraction parameters document add_geometry_doc add probe geometry document add_sorting_doc add sorting parameters document extract_and_sort extracts and sorts selected .bin file in ndi.session.directory newdocument return a new database document of type ndi.document based on an app rate_neuron_quality given an existing sorting output from hengen sorter, rate neuron quality and add ndi_elements to experiment searchquery return a search query for an ndi.document related to this app spikesorter_hengen an app to sort spikewaves found in experiments using hengen Spike Sorter varappname return the name of the application for use in variable creation version_url return the app version and url","title":"Methods"},{"location":"reference/%2Bndi/%2Bapp/spikesorter_hengen.m/#methods-help","text":"add_extraction_doc - add extraction parameters document EXTRACTION_DOC = ADD_EXTRACTION_DOC(NDI_APP_SPIKESORTER_HENGEN_OBJ, EXTRACTION_NAME, EXTRACTION_PARAMETERS) add_geometry_doc - add probe geometry document GEOMETRY_DOC = ADD_GEOMETRY_DOC(NDI_APP_SPIKESORTER_HENGEN_OBJ, PROBE, GEOMETRY) Add a geometry in a cell array corresponding to channel_groups, ex. This app follows spikeinterface standard, unknown what the unit of geometry values are { \"0\": { \"channels\": [0, 1, 2, 3], \"geometry\": [[0, 0], [0, 1000], [0, 2000], [0, 3000]], \"label\": [\"t_00\", \"t_01\", \"t_02\", \"t_03\"] } } add_sorting_doc - add sorting parameters document SORTING_DOC = ADD_SORTING_DOC(NDI_APP_SPIKESORTER_HENGEN_OBJ, SORTER, SORTING_NAME, SORTING_PARAMETERS) extract_and_sort - extracts and sorts selected .bin file in ndi.session.directory EXTRACT_AND_SORT(REDO) - to handle selected .bin file in json input EXTRACT_AND_SORT(NDI_ELEMENT, EXTRACTION_NAME, SORTING_NAME, REDO) - to handle selected ndi.element newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_APP_OBJ ) Creates a blank ndi . document object of type ' ndi_document_app ' . The ' app.name ' field is filled out with the name of NDI_APP_OBJ . VARAPPNAME () . Help for ndi . app . spikesorter_hengen / newdocument is inherited from superclass NDI . APP rate_neuron_quality - given an existing sorting output from hengen sorter, rate neuron quality and add ndi_elements to experiment searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY ( NDI_APP_OBJ ) Returns a cell array of strings that allow the creation or searching of an ndi . database document for this app with field ' app ' that has subfield ' name ' equal to the app ' s VARAPPNAME. Help for ndi . app . spikesorter_hengen / searchquery is inherited from superclass NDI . APP spikesorter_hengen - an app to sort spikewaves found in experiments using hengen Spike Sorter NDI_APP_spikesorter_hengen_OBJ = ndi.app.spikesorter_hengen(EXPERIMENT) Creates a new NDI.APP.spikesorter_hengen object that can operate on ndi.session objects. The app is named 'ndi_app_spikesorter_hengen'. varappname - return the name of the application for use in variable creation AN = VARAPPNAME ( NDI_APP_OBJ ) Returns the name of the app modified for use as a variable name , either as a Matlab variable or a name in a document . Help for ndi . app . spikesorter_hengen / varappname is inherited from superclass NDI . APP version_url - return the app version and url [ V , URL ] = VERSION_URL ( NDI_APP_OBJ ) Return the version and url for the current app . In the base class , it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory . Developers should override this method in their own class if they use a different version control system . Help for ndi . app . spikesorter_hengen / version_url is inherited from superclass NDI . APP","title":"Methods help"},{"location":"reference/%2Bndi/%2Bapp/%2Bstimulus/decoder.m/","text":"CLASS ndi.app.stimulus.decoder \u00b6 ndi.app.stimulus.decoder - an app to decode stimulus information from NDI_PROBE_STIMULUS objects NDI_APP_STIMULUS_DECODER_OBJ = ndi.app.stimulus.decoder(SESSION) Creates a new ndi_app_stimulus.decoder object that can operate on NDI_SESSIONS. The app is named 'ndi.app.stimulus_decoder'. Superclasses \u00b6 ndi.app , ndi.documentservice Properties \u00b6 Property Description session name Methods \u00b6 Method Description decoder an app to decode stimulus information from NDI_PROBE_STIMULUS objects newdocument return a new database document of type ndi.document based on an app parse_stimuli write stimulus records for all stimulus epochs of an ndi.element stimulus probe searchquery return a search query for an ndi.document related to this app varappname return the name of the application for use in variable creation version_url return the app version and url Methods help \u00b6 decoder - an app to decode stimulus information from NDI_PROBE_STIMULUS objects NDI_APP_STIMULUS_DECODER_OBJ = ndi.app.stimulus.decoder(SESSION) Creates a new ndi_app_stimulus.decoder object that can operate on NDI_SESSIONS. The app is named 'ndi.app.stimulus_decoder'. newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_APP_OBJ ) Creates a blank ndi . document object of type ' ndi_document_app ' . The ' app.name ' field is filled out with the name of NDI_APP_OBJ . VARAPPNAME () . Help for ndi . app . stimulus . decoder / newdocument is inherited from superclass NDI . APP parse_stimuli - write stimulus records for all stimulus epochs of an ndi.element stimulus probe [ NEWDOCS, EXISITINGDOCS ] = PARSE_STIMULI ( NDI_APP_STIMULUS_DECODER_OBJ , NDI_ELEMENT_STIM , [ RESET ] ) Examines a the ndi . session associated with NDI_APP_STIMULUS_DECODER_OBJ and the stimulus probe NDI_STIM_PROBE , and creates documents of type NDI_DOCUMENT_STIMULUS and NDI_DOCUMENT_STIMULUS_TUNINGCURVE for all stimulus epochs . If NDI_DOCUMENT_STIMULUS and NDI_DOCUMENT_STIMULUS_TUNINGCURVE documents already exist for a given stimulus run , then they are returned in EXISTINGDOCS . Any new documents are returned in NEWDOCS . If the input argument RESET is given and is 1 , then all existing documents for this probe are removed and all documents are recalculated . The default for RESET is 0 ( if it is not provided ). Note that this function DOES add the new documents to the database . searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY ( NDI_APP_OBJ ) Returns a cell array of strings that allow the creation or searching of an ndi . database document for this app with field ' app ' that has subfield ' name ' equal to the app ' s VARAPPNAME. Help for ndi . app . stimulus . decoder / searchquery is inherited from superclass NDI . APP varappname - return the name of the application for use in variable creation AN = VARAPPNAME ( NDI_APP_OBJ ) Returns the name of the app modified for use as a variable name , either as a Matlab variable or a name in a document . Help for ndi . app . stimulus . decoder / varappname is inherited from superclass NDI . APP version_url - return the app version and url [ V , URL ] = VERSION_URL ( NDI_APP_OBJ ) Return the version and url for the current app . In the base class , it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory . Developers should override this method in their own class if they use a different version control system . Help for ndi . app . stimulus . decoder / version_url is inherited from superclass NDI . APP","title":"ndi.app.stimulus.decoder"},{"location":"reference/%2Bndi/%2Bapp/%2Bstimulus/decoder.m/#class-ndiappstimulusdecoder","text":"ndi.app.stimulus.decoder - an app to decode stimulus information from NDI_PROBE_STIMULUS objects NDI_APP_STIMULUS_DECODER_OBJ = ndi.app.stimulus.decoder(SESSION) Creates a new ndi_app_stimulus.decoder object that can operate on NDI_SESSIONS. The app is named 'ndi.app.stimulus_decoder'.","title":"CLASS ndi.app.stimulus.decoder"},{"location":"reference/%2Bndi/%2Bapp/%2Bstimulus/decoder.m/#superclasses","text":"ndi.app , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bapp/%2Bstimulus/decoder.m/#properties","text":"Property Description session name","title":"Properties"},{"location":"reference/%2Bndi/%2Bapp/%2Bstimulus/decoder.m/#methods","text":"Method Description decoder an app to decode stimulus information from NDI_PROBE_STIMULUS objects newdocument return a new database document of type ndi.document based on an app parse_stimuli write stimulus records for all stimulus epochs of an ndi.element stimulus probe searchquery return a search query for an ndi.document related to this app varappname return the name of the application for use in variable creation version_url return the app version and url","title":"Methods"},{"location":"reference/%2Bndi/%2Bapp/%2Bstimulus/decoder.m/#methods-help","text":"decoder - an app to decode stimulus information from NDI_PROBE_STIMULUS objects NDI_APP_STIMULUS_DECODER_OBJ = ndi.app.stimulus.decoder(SESSION) Creates a new ndi_app_stimulus.decoder object that can operate on NDI_SESSIONS. The app is named 'ndi.app.stimulus_decoder'. newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_APP_OBJ ) Creates a blank ndi . document object of type ' ndi_document_app ' . The ' app.name ' field is filled out with the name of NDI_APP_OBJ . VARAPPNAME () . Help for ndi . app . stimulus . decoder / newdocument is inherited from superclass NDI . APP parse_stimuli - write stimulus records for all stimulus epochs of an ndi.element stimulus probe [ NEWDOCS, EXISITINGDOCS ] = PARSE_STIMULI ( NDI_APP_STIMULUS_DECODER_OBJ , NDI_ELEMENT_STIM , [ RESET ] ) Examines a the ndi . session associated with NDI_APP_STIMULUS_DECODER_OBJ and the stimulus probe NDI_STIM_PROBE , and creates documents of type NDI_DOCUMENT_STIMULUS and NDI_DOCUMENT_STIMULUS_TUNINGCURVE for all stimulus epochs . If NDI_DOCUMENT_STIMULUS and NDI_DOCUMENT_STIMULUS_TUNINGCURVE documents already exist for a given stimulus run , then they are returned in EXISTINGDOCS . Any new documents are returned in NEWDOCS . If the input argument RESET is given and is 1 , then all existing documents for this probe are removed and all documents are recalculated . The default for RESET is 0 ( if it is not provided ). Note that this function DOES add the new documents to the database . searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY ( NDI_APP_OBJ ) Returns a cell array of strings that allow the creation or searching of an ndi . database document for this app with field ' app ' that has subfield ' name ' equal to the app ' s VARAPPNAME. Help for ndi . app . stimulus . decoder / searchquery is inherited from superclass NDI . APP varappname - return the name of the application for use in variable creation AN = VARAPPNAME ( NDI_APP_OBJ ) Returns the name of the app modified for use as a variable name , either as a Matlab variable or a name in a document . Help for ndi . app . stimulus . decoder / varappname is inherited from superclass NDI . APP version_url - return the app version and url [ V , URL ] = VERSION_URL ( NDI_APP_OBJ ) Return the version and url for the current app . In the base class , it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory . Developers should override this method in their own class if they use a different version control system . Help for ndi . app . stimulus . decoder / version_url is inherited from superclass NDI . APP","title":"Methods help"},{"location":"reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/","text":"CLASS ndi.app.stimulus.tuning_response \u00b6 ndi.app.stimulus.tuning_response - an app to decode stimulus information from NDI_PROBE_STIMULUS objects NDI_APP_TUNING_RESPONSE_OBJ = ndi.app.stimulus.tuning_response(SESSION) Creates a new ndi.app.stimulus.tuning_response object that can operate on NDI_SESSIONS. The app is named 'ndi_app_stimulus_response'. Superclasses \u00b6 ndi.app , ndi.documentservice Properties \u00b6 Property Description session name Methods \u00b6 Method Description compute_stimulus_response_scalar compute responses to a stimulus set control_stimulus determine the control stimulus ID for each stimulus in a stimulus set find_tuningcurve_document find a tuning curve document of a particular element, epochid, etc... label_control_stimuli label control stimuli for all stimulus presentation documents for a given stimulator make_1d_tuning create 1d tuning documents out of stimulus responses that covary in 2 parameters newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app stimulus_responses write stimulus records for all stimulus epochs of an ndi.element stimulus object tuning_curve compute a tuning curve from stimulus responses tuning_response an app to decode stimulus information from NDI_PROBE_STIMULUS objects tuningdoc_fixcellarrays make sure fields that are supposed to be cell arrays are cell arrays in TUNINGCURVE document varappname return the name of the application for use in variable creation version_url return the app version and url Methods help \u00b6 compute_stimulus_response_scalar - compute responses to a stimulus set RESPONSE_DOC = COMPUTE_STIMULUS_RESPONSE_SCALAR ( NDI_APP_TUNING_RESPONSE_OBJ , NDI_TIMESERIES_OBJ , STIM_DOC , ... ) Given an NDI_TIMESERIES_OBJ , a STIM_DOC ( an ndi . document of class 'ndi_document_stimulus_presentation' ), and a CONTROL_DOC ( an ndi . document of class 'ndi_document_control_stimulus_ids' ), this function computes the stimulus responses of NDI_TIMESERIES_OBJ and stores the results as an ndi . document of class 'ndi_stimulus_response_scalar' . In this app , by default , mean responses and responses at the fundamental stimulus frequency are calculated . Note that this function may generate multiple documents ( for mean responses , F1 , F2 ) . Note that we recommend making a new app subclass if one wants to write additional classes of analysis procedures . This function also takes name / value pairs that alter the behavior : Parameter ( default ) | Description --------------------------------------------------------------------------------- temporalfreqfunc | ( 'ndi.fun.stimulustemporalfrequency' ) | freq_response ([]) | Frequency response to measure . If empty , then the function is | called 3 times with values 0 , 1 , and 2 times the fundamental frequency . prestimulus_time ([]) | Calculate a baseline using a certain amount of TIMESERIES signal during | the pre - stimulus time given here prestimulus_normalization ([]) | Normalize the stimulus response based on the prestimulus measurement . | [] or 0 ) No normalization | 1 ) Subtract : Response : = Response - PrestimResponse | 2 ) Fractional change Response : = (( Response - PrestimResponse ) / PrestimResponse ) | 3 ) Divide : Response : = Response ./ PreStimResponse isspike ( 0 ) | 0 / 1 Is the signal a spike process ? If so , timestamps correspond to spike events . spiketrain_dt ( 0.001 ) | Resolution to use for spike train reconstruction if computing Fourier transform control_stimulus - determine the control stimulus ID for each stimulus in a stimulus set [ CS_IDS , CS_DOC ] = CONTROL_STIMULUS ( NDI_APP_TUNING_RESPONSE_OBJ , STIM_DOC , ... ) For a given set of stimuli described in ndi . document of type ' ndi_document_stimulus ' , this function returns the control stimulus ID for each stimulus in the vector CS_IDS and a corresponding ndi . document of type ndi_document_control_stimulus_ids that describes this relationship . This function accepts parameters in the form of NAME / VALUE pairs : Parameter ( default ) | Description ------------------------------------------------------------------------ control_stim_method | The method to be used to find the control stimulu for ( ' psuedorandom ' ) | each stimulus : -----------| | pseudorandom : Find the stimulus with a parameter | ' controlid ' that is in the same pseudorandom trial . In the | event that there is no match that divides evenly into | complete repetitions of the stimulus set , then the | closest stimulus with field ' controlid ' is chosen . | | -----------| controlid ( ' isblank ' ) | For some methods , the parameter that defines whether | a stimulus is a ' control ' stimulus or not . controlid_value ( 1 ) | For some methods , the parameter value of ' controlid ' that | defines whether a stimulus is a control stimulus or not . find_tuningcurve_document - find a tuning curve document of a particular element, epochid, etc... [TC_DOC, SRS_DOC] = FIND_TUNINGCURVE_DOCUMENT(NDI_APP_TUNING_RESPONSE_OBJ, ELEMENT_OBJ, EPOCHID, RESPONSE_TYPE) label_control_stimuli - label control stimuli for all stimulus presentation documents for a given stimulator CS_DOC = LABEL_CONTROL_STIMULI ( NDI_APP_TUNING_RESPONSE_OBJ , STIMULUS_ELEMENT_OBJ , RESET , ... ) Thus function will look for all ' ndi_document_stimulus_presentation ' documents for STIMULUS_PROBE_OBJ , compute the corresponding control stimuli , and save them as an ' control_stimulus_ids ' document that is also returned as a cell list in CS_DOC . If RESET is 1 , then any existing documents of this type are first removed . If RESET is not provided or is empty , then it is taken to be 0 . The method of finding the control stimulus can be provided by providing extra name / value pairs . See ndi . app . stimulus . tuning_response / CONTROL_STIMULUS for parameters . make_1d_tuning - create 1d tuning documents out of stimulus responses that covary in 2 parameters TUNING_DOCS = MAKE_1D_TUNING ( NDI_APP_TUNING_RESPONSE_OBJ , STIM_RESPONSE_DOC , PARAM_TO_VARY , PARAM_TO_VARY_LABEL , PARAM_TO_FIX ) This function examines a stimulus response doc that covaries in 2 parameters , and \"deals\" the responses into several tuning curves where the parameter with name PARAM_TO_VARY varies across stimuli and the stimulus parameter with name PARAM_TO_FIX is fixed for each tuning doc . newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_APP_OBJ ) Creates a blank ndi . document object of type ' ndi_document_app ' . The ' app.name ' field is filled out with the name of NDI_APP_OBJ . VARAPPNAME () . Help for ndi . app . stimulus . tuning_response / newdocument is inherited from superclass NDI . APP searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY ( NDI_APP_OBJ ) Returns a cell array of strings that allow the creation or searching of an ndi . database document for this app with field ' app ' that has subfield ' name ' equal to the app ' s VARAPPNAME. Help for ndi . app . stimulus . tuning_response / searchquery is inherited from superclass NDI . APP stimulus_responses - write stimulus records for all stimulus epochs of an ndi.element stimulus object [ RDOCS ] = STIMULUS_RESPONSES ( NDI_APP_TUNING_RESPONSE_OBJ , NDI_ELEMENT_STIM , NDI_TIMESERIES_OBJ , [ RESET ] ) Examines a the ndi . session associated with NDI_APP_TUNING_RESPONSE_OBJ and the stimulus probe NDI_STIM_PROBE , and creates documents of type STIMULUS / STIMULUS_RESPONSE_SCALAR and STIMULUS / STIMULUS_TUNINGCURVE for all stimulus epochs . If STIMULUS_PRESENTATION and STIMULUS_TUNINGCURVE documents already exist for a given stimulus run , then they are returned in EXISTINGDOCS . Any new documents are returned in NEWDOCS . If the input argument RESET is given and is 1 , then all existing tuning curve documents for this NDI_TIMESERIES_OBJ are removed . The default for RESET is 0 ( if it is not provided ). Note that this function DOES add the new documents RDOCS to the database . tuning_curve - compute a tuning curve from stimulus responses TUNING_DOC = TUNING_CURVE ( NDI_APP_TUNING_RESPONSE_OBJ , STIM_RESOPNSE_DOC , ... ) This function accepts name / value pairs that modifies its basic operation : Parameter ( default ) | Description ----------------------------------------------------------------------- response_units ( 'Spikes/s' ) | Response units to pass along independent_label { 'label1' } | Independent parameter axis label independent_parameter {} | Independent parameters to search for in stimuli . | Can be multi - dimensional to create multi - variate | tuning curves . Only stimuli that contain these fields | will be included . | Examples : { 'angle' } { 'angle' , 'sFrequency' } constraint ([]) | Constraints in the form of a vlt . data . fieldsearch structure . | Example : struct ( 'field' , 'sFrequency' , 'operation' , ... | 'exact_number' , 'param1' , 1 , 'param2' , '' ) See also : vlt . data . fieldsearch tuning_response - an app to decode stimulus information from NDI_PROBE_STIMULUS objects NDI_APP_TUNING_RESPONSE_OBJ = ndi.app.stimulus.tuning_response(SESSION) Creates a new ndi.app.stimulus.tuning_response object that can operate on NDI_SESSIONS. The app is named 'ndi_app_stimulus_response'. tuningdoc_fixcellarrays - make sure fields that are supposed to be cell arrays are cell arrays in TUNINGCURVE document varappname - return the name of the application for use in variable creation AN = VARAPPNAME ( NDI_APP_OBJ ) Returns the name of the app modified for use as a variable name , either as a Matlab variable or a name in a document . Help for ndi . app . stimulus . tuning_response / varappname is inherited from superclass NDI . APP version_url - return the app version and url [ V , URL ] = VERSION_URL ( NDI_APP_OBJ ) Return the version and url for the current app . In the base class , it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory . Developers should override this method in their own class if they use a different version control system . Help for ndi . app . stimulus . tuning_response / version_url is inherited from superclass NDI . APP","title":"ndi.app.stimulus.tuning_response"},{"location":"reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/#class-ndiappstimulustuning_response","text":"ndi.app.stimulus.tuning_response - an app to decode stimulus information from NDI_PROBE_STIMULUS objects NDI_APP_TUNING_RESPONSE_OBJ = ndi.app.stimulus.tuning_response(SESSION) Creates a new ndi.app.stimulus.tuning_response object that can operate on NDI_SESSIONS. The app is named 'ndi_app_stimulus_response'.","title":"CLASS ndi.app.stimulus.tuning_response"},{"location":"reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/#superclasses","text":"ndi.app , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/#properties","text":"Property Description session name","title":"Properties"},{"location":"reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/#methods","text":"Method Description compute_stimulus_response_scalar compute responses to a stimulus set control_stimulus determine the control stimulus ID for each stimulus in a stimulus set find_tuningcurve_document find a tuning curve document of a particular element, epochid, etc... label_control_stimuli label control stimuli for all stimulus presentation documents for a given stimulator make_1d_tuning create 1d tuning documents out of stimulus responses that covary in 2 parameters newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app stimulus_responses write stimulus records for all stimulus epochs of an ndi.element stimulus object tuning_curve compute a tuning curve from stimulus responses tuning_response an app to decode stimulus information from NDI_PROBE_STIMULUS objects tuningdoc_fixcellarrays make sure fields that are supposed to be cell arrays are cell arrays in TUNINGCURVE document varappname return the name of the application for use in variable creation version_url return the app version and url","title":"Methods"},{"location":"reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/#methods-help","text":"compute_stimulus_response_scalar - compute responses to a stimulus set RESPONSE_DOC = COMPUTE_STIMULUS_RESPONSE_SCALAR ( NDI_APP_TUNING_RESPONSE_OBJ , NDI_TIMESERIES_OBJ , STIM_DOC , ... ) Given an NDI_TIMESERIES_OBJ , a STIM_DOC ( an ndi . document of class 'ndi_document_stimulus_presentation' ), and a CONTROL_DOC ( an ndi . document of class 'ndi_document_control_stimulus_ids' ), this function computes the stimulus responses of NDI_TIMESERIES_OBJ and stores the results as an ndi . document of class 'ndi_stimulus_response_scalar' . In this app , by default , mean responses and responses at the fundamental stimulus frequency are calculated . Note that this function may generate multiple documents ( for mean responses , F1 , F2 ) . Note that we recommend making a new app subclass if one wants to write additional classes of analysis procedures . This function also takes name / value pairs that alter the behavior : Parameter ( default ) | Description --------------------------------------------------------------------------------- temporalfreqfunc | ( 'ndi.fun.stimulustemporalfrequency' ) | freq_response ([]) | Frequency response to measure . If empty , then the function is | called 3 times with values 0 , 1 , and 2 times the fundamental frequency . prestimulus_time ([]) | Calculate a baseline using a certain amount of TIMESERIES signal during | the pre - stimulus time given here prestimulus_normalization ([]) | Normalize the stimulus response based on the prestimulus measurement . | [] or 0 ) No normalization | 1 ) Subtract : Response : = Response - PrestimResponse | 2 ) Fractional change Response : = (( Response - PrestimResponse ) / PrestimResponse ) | 3 ) Divide : Response : = Response ./ PreStimResponse isspike ( 0 ) | 0 / 1 Is the signal a spike process ? If so , timestamps correspond to spike events . spiketrain_dt ( 0.001 ) | Resolution to use for spike train reconstruction if computing Fourier transform control_stimulus - determine the control stimulus ID for each stimulus in a stimulus set [ CS_IDS , CS_DOC ] = CONTROL_STIMULUS ( NDI_APP_TUNING_RESPONSE_OBJ , STIM_DOC , ... ) For a given set of stimuli described in ndi . document of type ' ndi_document_stimulus ' , this function returns the control stimulus ID for each stimulus in the vector CS_IDS and a corresponding ndi . document of type ndi_document_control_stimulus_ids that describes this relationship . This function accepts parameters in the form of NAME / VALUE pairs : Parameter ( default ) | Description ------------------------------------------------------------------------ control_stim_method | The method to be used to find the control stimulu for ( ' psuedorandom ' ) | each stimulus : -----------| | pseudorandom : Find the stimulus with a parameter | ' controlid ' that is in the same pseudorandom trial . In the | event that there is no match that divides evenly into | complete repetitions of the stimulus set , then the | closest stimulus with field ' controlid ' is chosen . | | -----------| controlid ( ' isblank ' ) | For some methods , the parameter that defines whether | a stimulus is a ' control ' stimulus or not . controlid_value ( 1 ) | For some methods , the parameter value of ' controlid ' that | defines whether a stimulus is a control stimulus or not . find_tuningcurve_document - find a tuning curve document of a particular element, epochid, etc... [TC_DOC, SRS_DOC] = FIND_TUNINGCURVE_DOCUMENT(NDI_APP_TUNING_RESPONSE_OBJ, ELEMENT_OBJ, EPOCHID, RESPONSE_TYPE) label_control_stimuli - label control stimuli for all stimulus presentation documents for a given stimulator CS_DOC = LABEL_CONTROL_STIMULI ( NDI_APP_TUNING_RESPONSE_OBJ , STIMULUS_ELEMENT_OBJ , RESET , ... ) Thus function will look for all ' ndi_document_stimulus_presentation ' documents for STIMULUS_PROBE_OBJ , compute the corresponding control stimuli , and save them as an ' control_stimulus_ids ' document that is also returned as a cell list in CS_DOC . If RESET is 1 , then any existing documents of this type are first removed . If RESET is not provided or is empty , then it is taken to be 0 . The method of finding the control stimulus can be provided by providing extra name / value pairs . See ndi . app . stimulus . tuning_response / CONTROL_STIMULUS for parameters . make_1d_tuning - create 1d tuning documents out of stimulus responses that covary in 2 parameters TUNING_DOCS = MAKE_1D_TUNING ( NDI_APP_TUNING_RESPONSE_OBJ , STIM_RESPONSE_DOC , PARAM_TO_VARY , PARAM_TO_VARY_LABEL , PARAM_TO_FIX ) This function examines a stimulus response doc that covaries in 2 parameters , and \"deals\" the responses into several tuning curves where the parameter with name PARAM_TO_VARY varies across stimuli and the stimulus parameter with name PARAM_TO_FIX is fixed for each tuning doc . newdocument - return a new database document of type ndi.document based on an app NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_APP_OBJ ) Creates a blank ndi . document object of type ' ndi_document_app ' . The ' app.name ' field is filled out with the name of NDI_APP_OBJ . VARAPPNAME () . Help for ndi . app . stimulus . tuning_response / newdocument is inherited from superclass NDI . APP searchquery - return a search query for an ndi.document related to this app C = SEARCHQUERY ( NDI_APP_OBJ ) Returns a cell array of strings that allow the creation or searching of an ndi . database document for this app with field ' app ' that has subfield ' name ' equal to the app ' s VARAPPNAME. Help for ndi . app . stimulus . tuning_response / searchquery is inherited from superclass NDI . APP stimulus_responses - write stimulus records for all stimulus epochs of an ndi.element stimulus object [ RDOCS ] = STIMULUS_RESPONSES ( NDI_APP_TUNING_RESPONSE_OBJ , NDI_ELEMENT_STIM , NDI_TIMESERIES_OBJ , [ RESET ] ) Examines a the ndi . session associated with NDI_APP_TUNING_RESPONSE_OBJ and the stimulus probe NDI_STIM_PROBE , and creates documents of type STIMULUS / STIMULUS_RESPONSE_SCALAR and STIMULUS / STIMULUS_TUNINGCURVE for all stimulus epochs . If STIMULUS_PRESENTATION and STIMULUS_TUNINGCURVE documents already exist for a given stimulus run , then they are returned in EXISTINGDOCS . Any new documents are returned in NEWDOCS . If the input argument RESET is given and is 1 , then all existing tuning curve documents for this NDI_TIMESERIES_OBJ are removed . The default for RESET is 0 ( if it is not provided ). Note that this function DOES add the new documents RDOCS to the database . tuning_curve - compute a tuning curve from stimulus responses TUNING_DOC = TUNING_CURVE ( NDI_APP_TUNING_RESPONSE_OBJ , STIM_RESOPNSE_DOC , ... ) This function accepts name / value pairs that modifies its basic operation : Parameter ( default ) | Description ----------------------------------------------------------------------- response_units ( 'Spikes/s' ) | Response units to pass along independent_label { 'label1' } | Independent parameter axis label independent_parameter {} | Independent parameters to search for in stimuli . | Can be multi - dimensional to create multi - variate | tuning curves . Only stimuli that contain these fields | will be included . | Examples : { 'angle' } { 'angle' , 'sFrequency' } constraint ([]) | Constraints in the form of a vlt . data . fieldsearch structure . | Example : struct ( 'field' , 'sFrequency' , 'operation' , ... | 'exact_number' , 'param1' , 1 , 'param2' , '' ) See also : vlt . data . fieldsearch tuning_response - an app to decode stimulus information from NDI_PROBE_STIMULUS objects NDI_APP_TUNING_RESPONSE_OBJ = ndi.app.stimulus.tuning_response(SESSION) Creates a new ndi.app.stimulus.tuning_response object that can operate on NDI_SESSIONS. The app is named 'ndi_app_stimulus_response'. tuningdoc_fixcellarrays - make sure fields that are supposed to be cell arrays are cell arrays in TUNINGCURVE document varappname - return the name of the application for use in variable creation AN = VARAPPNAME ( NDI_APP_OBJ ) Returns the name of the app modified for use as a variable name , either as a Matlab variable or a name in a document . Help for ndi . app . stimulus . tuning_response / varappname is inherited from superclass NDI . APP version_url - return the app version and url [ V , URL ] = VERSION_URL ( NDI_APP_OBJ ) Return the version and url for the current app . In the base class , it is assumed that GIT is used and is available from the command line and the version and url are read from the git directory . Developers should override this method in their own class if they use a different version control system . Help for ndi . app . stimulus . tuning_response / version_url is inherited from superclass NDI . APP","title":"Methods help"},{"location":"reference/%2Bndi/%2Bdaq/daqsystemstring.m/","text":"CLASS ndi.daq.daqsystemstring \u00b6 NDI_DAQSYSTEMSTRING - a class for describing the device and channels that correspond to an NDI_EPOCHPROBEMAP_DAQSYSTEM ndi . daq . daqsystemstring A 'devicestring' is a part of an ndi . epoch . epochprobemap_daqsystem that indicates the channel types and channel numbers that correspond to a particular record . For example , one may specify that a 4-channel extracellular recording with name 'ctx' and reference 1 was recorded on a device called 'mydevice' via analog input on channels 27-28 and 45 and 88 with the following ndi . epoch . epochprobemap_daqsystem entry : name : 'ctx' reference : 1 type : 'extracellular_electrode-4' devicestring : 'mydevice:ai27-28,45,88 The form of a device string is DEVICENAME:CT####, where DEVICENAME is the name of ndi.daq.system object, CT is the channel type identifier, and #### is a list of channels. The #### list of channels should be numbered from 1, and can use the symbols ' - ' to indicate a sequential run of channels, and ' , ' to separate channels. Use a semicolon to separate channel types (e.g., ' ai27-28 ; di1 ') For example: ' 1-5 , 10 , 17 ' corresponds to [ 1 2 3 4 5 10 17 ] ' 2 , 5 , 11-12 , 8 corresponds to [ 2 5 11 12 8 ] '' corresponds to [] % if the device doesn ' t have channels See also : ndi . daq . daqsystemstring / NDI_DEVICESTRING , NDI_DEVICESTRING / DEVICESTRING Superclasses \u00b6 none Properties \u00b6 Property Description devicename The name of the device channeltype The type of channels that are used by the device channellist An array of the channels that are referred to by the devicestring Methods \u00b6 Method Description daqsystemstring Create an NDI_DEVICESTRING object from a string or from a device name, channel type, and channel list devicestring Produce an ndi.daq.daqsystemstring character string ndi_daqsystemstring2channel Convert an ndi.daq.daqsystemstring to device, channel type, channel list Methods help \u00b6 daqsystemstring - Create an NDI_DEVICESTRING object from a string or from a device name, channel type, and channel list DEVSTR = ndi . daq . daqsystemstring ( DEVICENAME , CHANNELTYPE , CHANNELLIST ) or DEVSTR = ndi . daq . daqsystemstring ( DEVSTRING ) Creates a device string suitable for a ndi . epoch . epochprobemap_daqsystem from a DEVICENAME , a cell array of strings CHANNELTYPE ( such as 'ai' , 'di' , 'ao' ), and a CHANNELLIST . Inputs : In the first form : DEVICENAME should be the name of an ndi . daq . system CHANNEL_PREFIX should be the prefix for a particular type of channel . These channel type will vary from device to device . For example , a NDI_DAQSYSTEM_MULTICHANNELDAQ might use : 'ai' - analog input 'ao' - analog output ( it is an 'o' like 'oh' , not 0 ) 'di' - digital input 'do' - digital output CHANNELLIST should be an array of channel numbers , which must start from 1 ( that is , the first channel is 1 ) . In the second form : DEVSTRING should be in the form : 'devicename:ct#,#-#,#,#' where devicename is the name of the device , ct is a string that corresponds to the channel type , and the numbers and separators specify the channel numbers to be accessed . Examples : myndi_daqsystemstring1 = ndi_devicestring ( 'mydevice' , 'ai' ,[ 1 : 5 7 23 ]) myndi_daqsystemstring2 = ndi_devicestring ( 'mydevice:ai1-5,7,23' ); See also : ndi . daq . daqsystemstring devicestring - Produce an ndi.daq.daqsystemstring character string DEVSTR = DEVICESTRING ( SELF ) Creates a device string suitable for a ndi . epoch . epochprobemap_daqsystem from an ndi . daq . daqsystemstring object . Inputs : SELF - an ndi . daq . daqsystemstring object Outputs : DEVSTR - the device string ; e . g ., 'mydevice:ai1-5,10,11-23' See also : ndi . daq . daqsystemstring ndi_daqsystemstring2channel - Convert an ndi.daq.daqsystemstring to device, channel type, channel list [ DEVICENAME , CHANNELTYPE , CHANNELLIST ] = NDI_DAQSYSTEMSTRING2CHANNEL ( SELF , DEVSTR ) Returns the device name ( DEVICENAME ), channel type ( CHANNELTYPE ), and channel list ( CHANNEL ) of a device string . Inputs : DEVSTR should be an NDI devicestring in the form : devicename : ct # , # - # , # , # Outputs : DEVICENAME is the string corresponding to the device name CHANNELTYPE is a cell array of strings with channel types CHANNELLIST is an array of the channel numbers Example : devstr = ndi . daq . daqsystemstring ( 'mydevice:ai1-5,13,18' ); [ devicename , channeltype , channel ] = ndi_daqsystemstring2channel ( devstr ); % devicename == 'mydevice', channelype = 'ai', channel == [1 2 3 4 5 13 18] See also : ndi . daq . daqsystemstring , NDI_DEVICESTRING / DEVICESTRING","title":"ndi.daq.daqsystemstring"},{"location":"reference/%2Bndi/%2Bdaq/daqsystemstring.m/#class-ndidaqdaqsystemstring","text":"NDI_DAQSYSTEMSTRING - a class for describing the device and channels that correspond to an NDI_EPOCHPROBEMAP_DAQSYSTEM ndi . daq . daqsystemstring A 'devicestring' is a part of an ndi . epoch . epochprobemap_daqsystem that indicates the channel types and channel numbers that correspond to a particular record . For example , one may specify that a 4-channel extracellular recording with name 'ctx' and reference 1 was recorded on a device called 'mydevice' via analog input on channels 27-28 and 45 and 88 with the following ndi . epoch . epochprobemap_daqsystem entry : name : 'ctx' reference : 1 type : 'extracellular_electrode-4' devicestring : 'mydevice:ai27-28,45,88 The form of a device string is DEVICENAME:CT####, where DEVICENAME is the name of ndi.daq.system object, CT is the channel type identifier, and #### is a list of channels. The #### list of channels should be numbered from 1, and can use the symbols ' - ' to indicate a sequential run of channels, and ' , ' to separate channels. Use a semicolon to separate channel types (e.g., ' ai27-28 ; di1 ') For example: ' 1-5 , 10 , 17 ' corresponds to [ 1 2 3 4 5 10 17 ] ' 2 , 5 , 11-12 , 8 corresponds to [ 2 5 11 12 8 ] '' corresponds to [] % if the device doesn ' t have channels See also : ndi . daq . daqsystemstring / NDI_DEVICESTRING , NDI_DEVICESTRING / DEVICESTRING","title":"CLASS ndi.daq.daqsystemstring"},{"location":"reference/%2Bndi/%2Bdaq/daqsystemstring.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bdaq/daqsystemstring.m/#properties","text":"Property Description devicename The name of the device channeltype The type of channels that are used by the device channellist An array of the channels that are referred to by the devicestring","title":"Properties"},{"location":"reference/%2Bndi/%2Bdaq/daqsystemstring.m/#methods","text":"Method Description daqsystemstring Create an NDI_DEVICESTRING object from a string or from a device name, channel type, and channel list devicestring Produce an ndi.daq.daqsystemstring character string ndi_daqsystemstring2channel Convert an ndi.daq.daqsystemstring to device, channel type, channel list","title":"Methods"},{"location":"reference/%2Bndi/%2Bdaq/daqsystemstring.m/#methods-help","text":"daqsystemstring - Create an NDI_DEVICESTRING object from a string or from a device name, channel type, and channel list DEVSTR = ndi . daq . daqsystemstring ( DEVICENAME , CHANNELTYPE , CHANNELLIST ) or DEVSTR = ndi . daq . daqsystemstring ( DEVSTRING ) Creates a device string suitable for a ndi . epoch . epochprobemap_daqsystem from a DEVICENAME , a cell array of strings CHANNELTYPE ( such as 'ai' , 'di' , 'ao' ), and a CHANNELLIST . Inputs : In the first form : DEVICENAME should be the name of an ndi . daq . system CHANNEL_PREFIX should be the prefix for a particular type of channel . These channel type will vary from device to device . For example , a NDI_DAQSYSTEM_MULTICHANNELDAQ might use : 'ai' - analog input 'ao' - analog output ( it is an 'o' like 'oh' , not 0 ) 'di' - digital input 'do' - digital output CHANNELLIST should be an array of channel numbers , which must start from 1 ( that is , the first channel is 1 ) . In the second form : DEVSTRING should be in the form : 'devicename:ct#,#-#,#,#' where devicename is the name of the device , ct is a string that corresponds to the channel type , and the numbers and separators specify the channel numbers to be accessed . Examples : myndi_daqsystemstring1 = ndi_devicestring ( 'mydevice' , 'ai' ,[ 1 : 5 7 23 ]) myndi_daqsystemstring2 = ndi_devicestring ( 'mydevice:ai1-5,7,23' ); See also : ndi . daq . daqsystemstring devicestring - Produce an ndi.daq.daqsystemstring character string DEVSTR = DEVICESTRING ( SELF ) Creates a device string suitable for a ndi . epoch . epochprobemap_daqsystem from an ndi . daq . daqsystemstring object . Inputs : SELF - an ndi . daq . daqsystemstring object Outputs : DEVSTR - the device string ; e . g ., 'mydevice:ai1-5,10,11-23' See also : ndi . daq . daqsystemstring ndi_daqsystemstring2channel - Convert an ndi.daq.daqsystemstring to device, channel type, channel list [ DEVICENAME , CHANNELTYPE , CHANNELLIST ] = NDI_DAQSYSTEMSTRING2CHANNEL ( SELF , DEVSTR ) Returns the device name ( DEVICENAME ), channel type ( CHANNELTYPE ), and channel list ( CHANNEL ) of a device string . Inputs : DEVSTR should be an NDI devicestring in the form : devicename : ct # , # - # , # , # Outputs : DEVICENAME is the string corresponding to the device name CHANNELTYPE is a cell array of strings with channel types CHANNELLIST is an array of the channel numbers Example : devstr = ndi . daq . daqsystemstring ( 'mydevice:ai1-5,13,18' ); [ devicename , channeltype , channel ] = ndi_daqsystemstring2channel ( devstr ); % devicename == 'mydevice', channelype = 'ai', channel == [1 2 3 4 5 13 18] See also : ndi . daq . daqsystemstring , NDI_DEVICESTRING / DEVICESTRING","title":"Methods help"},{"location":"reference/%2Bndi/%2Bdaq/metadatareader.m/","text":"CLASS ndi.daq.metadatareader \u00b6 NDI . DAQ . METADATAREADER . BASE - a class for reading metadata related to data acquisition , such as stimulus parameter information Superclasses \u00b6 ndi.ido , ndi.documentservice Properties \u00b6 Property Description tab_separated_file_parameter regular expression to search within epochfiles for a identifier Methods \u00b6 Method Description eq are 2 ndi.daq.metadatareader objects equal? id return the identifier of an ndi.ido object metadatareader Create a new multifunction DAQ object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) readmetadatafromfile read in metadata from the file that is identified searchquery create a search for this ndi.daq.reader object Methods help \u00b6 eq - are 2 ndi.daq.metadatareader objects equal? TF = EQ ( NDI_DAQMETADATAREADER_OBJ_A , NDI_DAQMETADATAREADER_OBJ_B ) TF is 1 if the two objects are of the same class and have the same properties . TF is 0 otherwise . id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . metadatareader / id is inherited from superclass NDI . IDO metadatareader - Create a new multifunction DAQ object D = ndi . daq . metadatareader () or D = ndi . daq . metadatareader ( TSVFILE_REGEXPRESSION ) Creates a new ndi . daq . metadatareader object . If TSVFILE_REGEXPRESSION is given , it indicates a regular expression to use to search EPOCHFILES for a tab - separated - value text file that describes stimulus parameters . ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . metadatareader . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.metadatareader object DOC = NEWDOCUMENT(ndi.daq.metadatareader OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. readmetadata - PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) Returns the parameters ( cell array of structures ) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES . If the property ' tab_separated_file_parameter ' is not empty , then EPOCHFILES will be searched for files that match the regular expression in ' tab_separated_file_parameter '. The tab - separated - value file should have the form: STIMID < tab > PARAMETER1 < tab > PARAMETER2 < tab > PARAMETER3 ( etc ) < newline > 1 < tab > VALUE1 < tab > VALUE2 < tab > VALUE3 ( etc ) < newline > 2 < tab > VALUE1 < tab > VALUE2 < tab > VALUE3 ( etc ) < newline > ( etc ) For example , a stimulus file for an interoral cannula might be: stimid < tab > substance1 < tab > substance1_concentration < newline > 1 < tab > Sodium chloride < tab > 30e-3 < newline > 2 < tab > Sodium chloride < tab > 300e-3 < newline > 3 < tab > Quinine < tab > 30e-6 < newline > 4 < tab > Quinine < tab > 300e-6 < newline > This function can be overridden in more specialized stimulus classes . readmetadatafromfile - read in metadata from the file that is identified PARAMETERS = READMETADATAFROMFILE ( NDI_DAQMETADATAREADER_OBJ , FILE ) Given a file that matches the metadata search criteria for an ndi . daq . metadatareader document , this function loads in the metadata . searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQMETADATAREADER_OBJ ) Creates a search query for the ndi . daq . metadatareader object .","title":"ndi.daq.metadatareader"},{"location":"reference/%2Bndi/%2Bdaq/metadatareader.m/#class-ndidaqmetadatareader","text":"NDI . DAQ . METADATAREADER . BASE - a class for reading metadata related to data acquisition , such as stimulus parameter information","title":"CLASS ndi.daq.metadatareader"},{"location":"reference/%2Bndi/%2Bdaq/metadatareader.m/#superclasses","text":"ndi.ido , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bdaq/metadatareader.m/#properties","text":"Property Description tab_separated_file_parameter regular expression to search within epochfiles for a identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Bdaq/metadatareader.m/#methods","text":"Method Description eq are 2 ndi.daq.metadatareader objects equal? id return the identifier of an ndi.ido object metadatareader Create a new multifunction DAQ object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) readmetadatafromfile read in metadata from the file that is identified searchquery create a search for this ndi.daq.reader object","title":"Methods"},{"location":"reference/%2Bndi/%2Bdaq/metadatareader.m/#methods-help","text":"eq - are 2 ndi.daq.metadatareader objects equal? TF = EQ ( NDI_DAQMETADATAREADER_OBJ_A , NDI_DAQMETADATAREADER_OBJ_B ) TF is 1 if the two objects are of the same class and have the same properties . TF is 0 otherwise . id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . metadatareader / id is inherited from superclass NDI . IDO metadatareader - Create a new multifunction DAQ object D = ndi . daq . metadatareader () or D = ndi . daq . metadatareader ( TSVFILE_REGEXPRESSION ) Creates a new ndi . daq . metadatareader object . If TSVFILE_REGEXPRESSION is given , it indicates a regular expression to use to search EPOCHFILES for a tab - separated - value text file that describes stimulus parameters . ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . metadatareader . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.metadatareader object DOC = NEWDOCUMENT(ndi.daq.metadatareader OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. readmetadata - PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) Returns the parameters ( cell array of structures ) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES . If the property ' tab_separated_file_parameter ' is not empty , then EPOCHFILES will be searched for files that match the regular expression in ' tab_separated_file_parameter '. The tab - separated - value file should have the form: STIMID < tab > PARAMETER1 < tab > PARAMETER2 < tab > PARAMETER3 ( etc ) < newline > 1 < tab > VALUE1 < tab > VALUE2 < tab > VALUE3 ( etc ) < newline > 2 < tab > VALUE1 < tab > VALUE2 < tab > VALUE3 ( etc ) < newline > ( etc ) For example , a stimulus file for an interoral cannula might be: stimid < tab > substance1 < tab > substance1_concentration < newline > 1 < tab > Sodium chloride < tab > 30e-3 < newline > 2 < tab > Sodium chloride < tab > 300e-3 < newline > 3 < tab > Quinine < tab > 30e-6 < newline > 4 < tab > Quinine < tab > 300e-6 < newline > This function can be overridden in more specialized stimulus classes . readmetadatafromfile - read in metadata from the file that is identified PARAMETERS = READMETADATAFROMFILE ( NDI_DAQMETADATAREADER_OBJ , FILE ) Given a file that matches the metadata search criteria for an ndi . daq . metadatareader document , this function loads in the metadata . searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQMETADATAREADER_OBJ ) Creates a search query for the ndi . daq . metadatareader object .","title":"Methods help"},{"location":"reference/%2Bndi/%2Bdaq/reader.m/","text":"CLASS ndi.daq.reader \u00b6 NDI_DAQREADER - A class for objects that read samples for NDI_DAQSYSTEM objects Superclasses \u00b6 ndi.ido , ndi.documentservice Properties \u00b6 Property Description identifier Methods \u00b6 Method Description epochclock return the ndi.time.clocktype objects for an epoch eq tests whether 2 ndi.daq.reader objects are equal id return the identifier of an ndi.ido object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.reader object reader create a new ndi.daq.reader object searchquery create a search for this ndi.daq.reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk Methods help \u00b6 epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQREADER_OBJ , EPOCHFILES ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . For the generic ndi . daq . reader , this returns a single clock type ' no_time ' ; See also : ndi . time . clocktype eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . reader / id is inherited from superclass NDI . IDO ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . reader . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. reader - create a new ndi.daq.reader object OBJ = ndi.daq.reader() Creates an ndi.daq.reader. OBJ = ndi.daq.reader(NDI_SESSION_OBJ, NDI_DOCUMENT_OBJ) Creates an ndi.daq.reader from an NDI_DOCUMENT_OBJ. ndi.daq.reader is essentially an abstract class, and a specific implementation must be used. searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQREADER_OBJ ) Creates a search query for the ndi . daq . reader object . t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQREADER_OBJ , EPOCHPROBEMAP , NUMBER ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER . For the abstract class ndi . daq . reader , EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . See also : ndi . daq . reader , ndi . epoch . epochprobemap_daqsystem","title":"ndi.daq.reader"},{"location":"reference/%2Bndi/%2Bdaq/reader.m/#class-ndidaqreader","text":"NDI_DAQREADER - A class for objects that read samples for NDI_DAQSYSTEM objects","title":"CLASS ndi.daq.reader"},{"location":"reference/%2Bndi/%2Bdaq/reader.m/#superclasses","text":"ndi.ido , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bdaq/reader.m/#properties","text":"Property Description identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Bdaq/reader.m/#methods","text":"Method Description epochclock return the ndi.time.clocktype objects for an epoch eq tests whether 2 ndi.daq.reader objects are equal id return the identifier of an ndi.ido object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.reader object reader create a new ndi.daq.reader object searchquery create a search for this ndi.daq.reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk","title":"Methods"},{"location":"reference/%2Bndi/%2Bdaq/reader.m/#methods-help","text":"epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQREADER_OBJ , EPOCHFILES ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . For the generic ndi . daq . reader , this returns a single clock type ' no_time ' ; See also : ndi . time . clocktype eq - tests whether 2 ndi.daq.reader objects are equal B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2) Examines whether or not the ndi.daq.reader objects are equal. id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . reader / id is inherited from superclass NDI . IDO ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . reader . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ) Creates an ndi.document object DOC that represents the ndi.daq.reader object. reader - create a new ndi.daq.reader object OBJ = ndi.daq.reader() Creates an ndi.daq.reader. OBJ = ndi.daq.reader(NDI_SESSION_OBJ, NDI_DOCUMENT_OBJ) Creates an ndi.daq.reader from an NDI_DOCUMENT_OBJ. ndi.daq.reader is essentially an abstract class, and a specific implementation must be used. searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQREADER_OBJ ) Creates a search query for the ndi . daq . reader object . t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQREADER_OBJ , EPOCHPROBEMAP , NUMBER ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER . For the abstract class ndi . daq . reader , EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . See also : ndi . daq . reader , ndi . epoch . epochprobemap_daqsystem","title":"Methods help"},{"location":"reference/%2Bndi/%2Bdaq/system.m/","text":"CLASS ndi.daq.system \u00b6 ndi.daq.system - Create a new NDI_DEVICE class handle object D = ndi.daq.system(NAME, THEFILENAVIGATOR) Creates a new ndi.daq.system object with name and specific data tree object. This is an abstract class that is overridden by specific devices. Superclasses \u00b6 ndi.ido , ndi.epoch.epochset.param , ndi.epoch.epochset , ndi.documentservice Properties \u00b6 Property Description name The name of the daq system filenavigator The ndi.file.navigator associated with this device daqreader The ndi.daq.reader associated with this device daqmetadatareader The ndi.daq.metadatareader associated with this device (cell array) identifier epochprobemap_class Methods \u00b6 Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build the epochtable for an ndi.daq.system object cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object deleteepoch Delete an epoch and an epoch record from a device epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid return the epoch id string for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq are two ndi.daq.system objects equal? getcache return the NDI_CACHE and key for ndi.daq.system getepochprobemap Return the epoch record for an ndi.daq.system object getepochtag Get tag(s) from an epoch getmetadata get metadata for an epoch getprobes GETPROBES = Return all of the probes associated with an ndi.daq.system object id return the identifier of an ndi.ido object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? matchedepochtable compare a hash number from an epochtable to the current version ndi_daqsystem_gui_edit function for editing an ndi.daq.system object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new document set for ndi.daq.system objects numepochs Number of epochs of ndi.epoch.epochset removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery search for an ndi.daq.system session return the ndi.session object associated with the ndi.daq.system object set_daqmetadatareader set the cell array of ndi.daq.metadatareader objects setepochprobemap Sets the epoch record of a particular epoch setepochtag Set tag(s) for an epoch setsession set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system) system create a new NDI_DEVICE object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk Methods help \u00b6 addepochtag - Add tag(s) for an epoch ADDEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will be added to any tags in the epoch EPOCHNUMBER . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . Help for ndi . daq . system / addepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . daq . system / EPOCHNODES Help for ndi . daq . system / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - Build the epochtable for an ndi.daq.system object ET = BUILDEPOCHTABLE ( NDI_DAQSYSTEM_OBJ ) Returns the epoch table for NDI_DAQSYSTEM_OBJ cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . daq . system / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . daq . system / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET deleteepoch - Delete an epoch and an epoch record from a device DELETEEPOCH ( NDI_DAQSYSTEM_OBJ , NUMBER ... [ REMOVEDATA ] ) Deletes the data and ndi . epoch . epochprobemap_daqsystem and epoch data for epoch NUMBER . If REMOVEDATA is present and is 1 , the data and record are physically deleted . If REMOVEDATA is omitted or is 0 , the data and record are renamed but not deleted from disk . In the abstract class , this command takes no action . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . daq . system / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQSYSTEM_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . For the generic ndi . daq . system , this returns a single clock type ' no_time ' ; See also : ndi . time . clocktype epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . daq . system / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - return the epoch id string for an epoch EID = EOPCHID ( NDI_DAQSYSTEM_OBJ , EPOCH_NUMBER ) Returns the EPOCHID for epoch with number EPOCH_NUMBER . In ndi . daq . system , this is determined by the associated ndi . file . navigator object . epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . daq . system / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochprobemapfilename - return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME ( NDI_DAQSYSTEM_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHPROBEMAPFILENAME for the ndi . daq . system epoch EPOCH_NUMBER_OR_ID . If there is no epoch NUMBER , an error is generated . The file name is returned with a full path . epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_EPOCHSET_OBJ ) Returns the object name that is used when creating epoch nodes . If the class has a ' name ' property , that property is used . Otherwise , ' unknown ' is used . Help for ndi . daq . system / epochsetname is inherited from superclass NDI . EPOCH . EPOCHSET epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . daq . system / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . daq . system / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME(NDI_FILENAVIGATOR_OBJ, EPOCHNUMBER) In this base class, empty is returned because it is an abstract class. eq - are two ndi.daq.system objects equal? B = EQ ( NDI_DAQSYSTEM_OBJ_A , NDI_DAQSYSTEM_OBJ_B ) Returns 1 if the ndi . daq . system objects have the same name and class type . The objects do not have to be the same handle or have the same space in memory . Otherwise , returns 0 . getcache - return the NDI_CACHE and key for ndi.daq.system [ CACHE , KEY ] = GETCACHE ( NDI_DAQSYSTEM_OBJ ) Returns the CACHE and KEY for the ndi . daq . system object . The CACHE is returned from the associated session . The KEY is the string ' daqsystem_ ' followed by the object ' s id. See also : ndi . daq . system , NDI_BASE getepochprobemap - Return the epoch record for an ndi.daq.system object EPOCHPROBEMAP = GETEPOCHPROBEMAP ( NDI_DAQSYSTEM_OBJ , EPOCH ) Inputs : NDI_EPOCHSET_PARAM_OBJ - the ndi . epoch . epochset . param object EPOCH - the epoch number or identifier Output : EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME The ndi . daq . system GETEPOCHPROBEMAP checks its DAQREADER object to see if it has a method called ' GETEPOCHPROBEMAP ' that accepts the EPOCHPROBEMAP filename and the EPOCHFILES for that epoch . If it does have a method by that name , it is called and the output returned . If it does not , then the FILENAVIGATOR parameter ' s method is called. getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . If there are no files in EPOCHNUMBER then an error is returned . Help for ndi . daq . system / getepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM getmetadata - get metadata for an epoch METADATA = GETMETADATA ( NDI_DAQSYSTEM_OBJ , EPOCH , CHANNEL ) Returns the metadata ( cell array of entries ) for EPOCH for metadata channel CHANNEL . CHANNEL indicates the number of the ndi . daq . metadatareader to use to obtain the data . getprobes - GETPROBES = Return all of the probes associated with an ndi.daq.system object PROBES_STRUCT = GETPROBES(NDI_DAQSYSTEM_OBJ) Returns all probes associated with the ndi.daq.system object NDI_DEVICE_OBJ This function returns a structure with fields of all unique probes across all EPOCHPROBEMAP objects returned in ndi.daq.system/GETEPOCHPROBEMAP. The fields are 'name', 'reference', and 'type'. id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . system / id is inherited from superclass NDI . IDO issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset objects , this returns 1 . For some object types ( ndi . probe . * , for example ) this will return 0 so that the underlying ndi . daq . system epochs are added . Help for ndi . daq . system / issyncgraphroot is inherited from superclass NDI . EPOCH . EPOCHSET matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . daq . system / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET ndi_daqsystem_gui_edit - function for editing an ndi.daq.system object OBJ = NDI_DAQSYSTEM_GUI_EDIT ( NDI_DAQSYSTEM_OBJ ) This function will bring up a graphical window to prompt the user to input parameters that edit the NDI_DAQSYSTEM_OBJ and return a new object . ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . system . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new document set for ndi.daq.system objects NDI_DOCUMENT_OBJ_SET = NEWDOCUMENT(NDI_DAQSYSTEM_OBJ) Creates a set of documents that describe an ndi.daq.system. numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . daq . system / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG ( NDI_EPOCH_PARAM_OBJ , EPOCHNUMBER , NAME ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . Any tags with name ' NAME ' will be removed from the tags in the epoch EPOCHNUMBER . tags in the epoch directory . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . NAME can be a single string , or it can be a cell array of strings ( which will result in the removal of multiple tags ) . Help for ndi . daq . system / removeepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . daq . system / EPOCHTABLE Help for ndi . daq . system / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET searchquery - search for an ndi.daq.system SQ = SEARCHQUERY ( NDI_DAQSYSTEM_OBJ ) Returns SQ , an ndi . query object that searches the database for the ndi . daq . system object session - return the ndi.session object associated with the ndi.daq.system object EXP = SESSION ( NDI_DAQSYSTEM_OBJ ) Return the ndi . session object associated with the ndi . daq . system of the ndi . daq . system object . set_daqmetadatareader - set the cell array of ndi.daq.metadatareader objects NDI_DAQSYSTEM_OBJ = SET_DAQMETADATAREADER(NDI_DAQSYSTEM_OBJ, NEWDAQMETADATAREADERS) Sets the 'daqmetadatareader' property of an ndi.daq.system object. NEWDAQMETADATAREADERS should be a cell array of objects that have ndi.daq.metadatareader as a superclass. setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP ( NDI_EPOCHSET_PARAM_OBJ , EPOCHPROBEMAP , NUMBER , [ OVERWRITE ] ) Sets or replaces the ndi . epoch . epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER . If OVERWRITE is present and is 1 , then any existing epoch record is overwritten . Otherwise , an error is given if there is an existing epoch record . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem Help for ndi . daq . system / setepochprobemap is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM setepochtag - Set tag(s) for an epoch SETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will replace any tags in the epoch directory . If there is no epoch EPOCHNUMBER , then an error is returned . Help for ndi . daq . system / setepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM setsession - set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system) NDI_DAQSYSTEM_OBJ = SETSESSION(NDI_DEVICE_OBJ, SESSION) Set the SESSION property of an ndi.daq.system object's ndi.daq.system object system - create a new NDI_DEVICE object OBJ = ndi.daq.system(NAME, THEFILENAVIGATOR, THEDAQREADER) Creates an ndi.daq.system with name NAME, NDI_FILENAVIGTOR THEFILENAVIGATOR and and ndi.daq.reader THEDAQREADER. An ndi.file.navigator is an interface object to the raw data files on disk that are read by the ndi.daq.reader object. ndi.daq.system is an abstract class, and a specific implementation must be called. t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . daq . system / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQSYSTEM_OBJ , EPOCHPROBEMAP , EPOCH ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch EPOCH . For the abstract class ndi . daq . system , EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem","title":"ndi.daq.system"},{"location":"reference/%2Bndi/%2Bdaq/system.m/#class-ndidaqsystem","text":"ndi.daq.system - Create a new NDI_DEVICE class handle object D = ndi.daq.system(NAME, THEFILENAVIGATOR) Creates a new ndi.daq.system object with name and specific data tree object. This is an abstract class that is overridden by specific devices.","title":"CLASS ndi.daq.system"},{"location":"reference/%2Bndi/%2Bdaq/system.m/#superclasses","text":"ndi.ido , ndi.epoch.epochset.param , ndi.epoch.epochset , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bdaq/system.m/#properties","text":"Property Description name The name of the daq system filenavigator The ndi.file.navigator associated with this device daqreader The ndi.daq.reader associated with this device daqmetadatareader The ndi.daq.metadatareader associated with this device (cell array) identifier epochprobemap_class","title":"Properties"},{"location":"reference/%2Bndi/%2Bdaq/system.m/#methods","text":"Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build the epochtable for an ndi.daq.system object cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object deleteepoch Delete an epoch and an epoch record from a device epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid return the epoch id string for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq are two ndi.daq.system objects equal? getcache return the NDI_CACHE and key for ndi.daq.system getepochprobemap Return the epoch record for an ndi.daq.system object getepochtag Get tag(s) from an epoch getmetadata get metadata for an epoch getprobes GETPROBES = Return all of the probes associated with an ndi.daq.system object id return the identifier of an ndi.ido object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? matchedepochtable compare a hash number from an epochtable to the current version ndi_daqsystem_gui_edit function for editing an ndi.daq.system object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new document set for ndi.daq.system objects numepochs Number of epochs of ndi.epoch.epochset removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery search for an ndi.daq.system session return the ndi.session object associated with the ndi.daq.system object set_daqmetadatareader set the cell array of ndi.daq.metadatareader objects setepochprobemap Sets the epoch record of a particular epoch setepochtag Set tag(s) for an epoch setsession set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system) system create a new NDI_DEVICE object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk","title":"Methods"},{"location":"reference/%2Bndi/%2Bdaq/system.m/#methods-help","text":"addepochtag - Add tag(s) for an epoch ADDEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will be added to any tags in the epoch EPOCHNUMBER . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . Help for ndi . daq . system / addepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . daq . system / EPOCHNODES Help for ndi . daq . system / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - Build the epochtable for an ndi.daq.system object ET = BUILDEPOCHTABLE ( NDI_DAQSYSTEM_OBJ ) Returns the epoch table for NDI_DAQSYSTEM_OBJ cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . daq . system / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . daq . system / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET deleteepoch - Delete an epoch and an epoch record from a device DELETEEPOCH ( NDI_DAQSYSTEM_OBJ , NUMBER ... [ REMOVEDATA ] ) Deletes the data and ndi . epoch . epochprobemap_daqsystem and epoch data for epoch NUMBER . If REMOVEDATA is present and is 1 , the data and record are physically deleted . If REMOVEDATA is omitted or is 0 , the data and record are renamed but not deleted from disk . In the abstract class , this command takes no action . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . daq . system / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQSYSTEM_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . For the generic ndi . daq . system , this returns a single clock type ' no_time ' ; See also : ndi . time . clocktype epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . daq . system / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - return the epoch id string for an epoch EID = EOPCHID ( NDI_DAQSYSTEM_OBJ , EPOCH_NUMBER ) Returns the EPOCHID for epoch with number EPOCH_NUMBER . In ndi . daq . system , this is determined by the associated ndi . file . navigator object . epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . daq . system / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochprobemapfilename - return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME ( NDI_DAQSYSTEM_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHPROBEMAPFILENAME for the ndi . daq . system epoch EPOCH_NUMBER_OR_ID . If there is no epoch NUMBER , an error is generated . The file name is returned with a full path . epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_EPOCHSET_OBJ ) Returns the object name that is used when creating epoch nodes . If the class has a ' name ' property , that property is used . Otherwise , ' unknown ' is used . Help for ndi . daq . system / epochsetname is inherited from superclass NDI . EPOCH . EPOCHSET epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . daq . system / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . daq . system / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME(NDI_FILENAVIGATOR_OBJ, EPOCHNUMBER) In this base class, empty is returned because it is an abstract class. eq - are two ndi.daq.system objects equal? B = EQ ( NDI_DAQSYSTEM_OBJ_A , NDI_DAQSYSTEM_OBJ_B ) Returns 1 if the ndi . daq . system objects have the same name and class type . The objects do not have to be the same handle or have the same space in memory . Otherwise , returns 0 . getcache - return the NDI_CACHE and key for ndi.daq.system [ CACHE , KEY ] = GETCACHE ( NDI_DAQSYSTEM_OBJ ) Returns the CACHE and KEY for the ndi . daq . system object . The CACHE is returned from the associated session . The KEY is the string ' daqsystem_ ' followed by the object ' s id. See also : ndi . daq . system , NDI_BASE getepochprobemap - Return the epoch record for an ndi.daq.system object EPOCHPROBEMAP = GETEPOCHPROBEMAP ( NDI_DAQSYSTEM_OBJ , EPOCH ) Inputs : NDI_EPOCHSET_PARAM_OBJ - the ndi . epoch . epochset . param object EPOCH - the epoch number or identifier Output : EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME The ndi . daq . system GETEPOCHPROBEMAP checks its DAQREADER object to see if it has a method called ' GETEPOCHPROBEMAP ' that accepts the EPOCHPROBEMAP filename and the EPOCHFILES for that epoch . If it does have a method by that name , it is called and the output returned . If it does not , then the FILENAVIGATOR parameter ' s method is called. getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . If there are no files in EPOCHNUMBER then an error is returned . Help for ndi . daq . system / getepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM getmetadata - get metadata for an epoch METADATA = GETMETADATA ( NDI_DAQSYSTEM_OBJ , EPOCH , CHANNEL ) Returns the metadata ( cell array of entries ) for EPOCH for metadata channel CHANNEL . CHANNEL indicates the number of the ndi . daq . metadatareader to use to obtain the data . getprobes - GETPROBES = Return all of the probes associated with an ndi.daq.system object PROBES_STRUCT = GETPROBES(NDI_DAQSYSTEM_OBJ) Returns all probes associated with the ndi.daq.system object NDI_DEVICE_OBJ This function returns a structure with fields of all unique probes across all EPOCHPROBEMAP objects returned in ndi.daq.system/GETEPOCHPROBEMAP. The fields are 'name', 'reference', and 'type'. id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . system / id is inherited from superclass NDI . IDO issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset objects , this returns 1 . For some object types ( ndi . probe . * , for example ) this will return 0 so that the underlying ndi . daq . system epochs are added . Help for ndi . daq . system / issyncgraphroot is inherited from superclass NDI . EPOCH . EPOCHSET matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . daq . system / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET ndi_daqsystem_gui_edit - function for editing an ndi.daq.system object OBJ = NDI_DAQSYSTEM_GUI_EDIT ( NDI_DAQSYSTEM_OBJ ) This function will bring up a graphical window to prompt the user to input parameters that edit the NDI_DAQSYSTEM_OBJ and return a new object . ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . system . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new document set for ndi.daq.system objects NDI_DOCUMENT_OBJ_SET = NEWDOCUMENT(NDI_DAQSYSTEM_OBJ) Creates a set of documents that describe an ndi.daq.system. numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . daq . system / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG ( NDI_EPOCH_PARAM_OBJ , EPOCHNUMBER , NAME ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . Any tags with name ' NAME ' will be removed from the tags in the epoch EPOCHNUMBER . tags in the epoch directory . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . NAME can be a single string , or it can be a cell array of strings ( which will result in the removal of multiple tags ) . Help for ndi . daq . system / removeepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . daq . system / EPOCHTABLE Help for ndi . daq . system / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET searchquery - search for an ndi.daq.system SQ = SEARCHQUERY ( NDI_DAQSYSTEM_OBJ ) Returns SQ , an ndi . query object that searches the database for the ndi . daq . system object session - return the ndi.session object associated with the ndi.daq.system object EXP = SESSION ( NDI_DAQSYSTEM_OBJ ) Return the ndi . session object associated with the ndi . daq . system of the ndi . daq . system object . set_daqmetadatareader - set the cell array of ndi.daq.metadatareader objects NDI_DAQSYSTEM_OBJ = SET_DAQMETADATAREADER(NDI_DAQSYSTEM_OBJ, NEWDAQMETADATAREADERS) Sets the 'daqmetadatareader' property of an ndi.daq.system object. NEWDAQMETADATAREADERS should be a cell array of objects that have ndi.daq.metadatareader as a superclass. setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP ( NDI_EPOCHSET_PARAM_OBJ , EPOCHPROBEMAP , NUMBER , [ OVERWRITE ] ) Sets or replaces the ndi . epoch . epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER . If OVERWRITE is present and is 1 , then any existing epoch record is overwritten . Otherwise , an error is given if there is an existing epoch record . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem Help for ndi . daq . system / setepochprobemap is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM setepochtag - Set tag(s) for an epoch SETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will replace any tags in the epoch directory . If there is no epoch EPOCHNUMBER , then an error is returned . Help for ndi . daq . system / setepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM setsession - set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system) NDI_DAQSYSTEM_OBJ = SETSESSION(NDI_DEVICE_OBJ, SESSION) Set the SESSION property of an ndi.daq.system object's ndi.daq.system object system - create a new NDI_DEVICE object OBJ = ndi.daq.system(NAME, THEFILENAVIGATOR, THEDAQREADER) Creates an ndi.daq.system with name NAME, NDI_FILENAVIGTOR THEFILENAVIGATOR and and ndi.daq.reader THEDAQREADER. An ndi.file.navigator is an interface object to the raw data files on disk that are read by the ndi.daq.reader object. ndi.daq.system is an abstract class, and a specific implementation must be called. t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . daq . system / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQSYSTEM_OBJ , EPOCHPROBEMAP , EPOCH ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch EPOCH . For the abstract class ndi . daq . system , EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem","title":"Methods help"},{"location":"reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NewStimStims.m/","text":"CLASS ndi.daq.metadatareader.NewStimStims \u00b6 NDI_DAQMETADATAREADER_NEWSTIMSTIMS - a class for reading NewStim metadata Superclasses \u00b6 ndi.daq.metadatareader , ndi.ido , ndi.documentservice Properties \u00b6 Property Description tab_separated_file_parameter identifier Methods \u00b6 Method Description NewStimStims Create a new multifunction DAQ object eq are 2 ndi.daq.metadatareader objects equal? id return the identifier of an ndi.ido object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) readmetadatafromfile read in metadata from the file that is identified searchquery create a search for this ndi.daq.reader object Methods help \u00b6 NewStimStims - Create a new multifunction DAQ object D = ndi . daq . metadatareader . NewStimStims () or D = ndi . daq . metadatareader ( TSVFILE_REGEXPRESSION ) Creates a new ndi . daq . metadatareader object . If TSVFILE_REGEXPRESSION is given , it indicates a regular expression to use to search EPOCHFILES for a tab - separated - value text file that describes stimulus parameters . eq - are 2 ndi.daq.metadatareader objects equal? TF = EQ ( NDI_DAQMETADATAREADER_OBJ_A , NDI_DAQMETADATAREADER_OBJ_B ) TF is 1 if the two objects are of the same class and have the same properties . TF is 0 otherwise . Help for ndi . daq . metadatareader . NewStimStims / eq is inherited from superclass NDI . DAQ . METADATAREADER id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . metadatareader . NewStimStims / id is inherited from superclass NDI . IDO ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . metadatareader . NewStimStims . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.metadatareader object DOC = NEWDOCUMENT ( ndi . daq . metadatareader OBJ ) Creates an ndi . document object DOC that represents the ndi . daq . reader object . Help for ndi . daq . metadatareader . NewStimStims / newdocument is inherited from superclass NDI . DAQ . METADATAREADER readmetadata - PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) Returns the parameters ( cell array of structures ) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES . If the property ' tab_separated_file_parameter ' is not empty , then EPOCHFILES will be searched for files that match the regular expression in ' tab_separated_file_parameter '. The tab - separated - value file should have the form: STIMID < tab > PARAMETER1 < tab > PARAMETER2 < tab > PARAMETER3 ( etc ) < newline > 1 < tab > VALUE1 < tab > VALUE2 < tab > VALUE3 ( etc ) < newline > 2 < tab > VALUE1 < tab > VALUE2 < tab > VALUE3 ( etc ) < newline > ( etc ) For example , a stimulus file for an interoral cannula might be: stimid < tab > substance1 < tab > substance1_concentration < newline > 1 < tab > Sodium chloride < tab > 30e-3 < newline > 2 < tab > Sodium chloride < tab > 300e-3 < newline > 3 < tab > Quinine < tab > 30e-6 < newline > 4 < tab > Quinine < tab > 300e-6 < newline > This function can be overridden in more specialized stimulus classes . Help for ndi . daq . metadatareader . NewStimStims / readmetadata is inherited from superclass NDI . DAQ . METADATAREADER readmetadatafromfile - read in metadata from the file that is identified PARAMETERS = READMETADATAFROMFILE ( NDI_DAQMETADATAREADER_NEWSTIMSTIMS_OBJ , FILE ) Given a file that matches the metadata search criteria for an ndi . daq . metadatareader . NewStimStims document , this function loads in the metadata . searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQMETADATAREADER_OBJ ) Creates a search query for the ndi . daq . metadatareader object . Help for ndi . daq . metadatareader . NewStimStims / searchquery is inherited from superclass NDI . DAQ . METADATAREADER","title":"ndi.daq.metadatareader.NewStimStims"},{"location":"reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NewStimStims.m/#class-ndidaqmetadatareadernewstimstims","text":"NDI_DAQMETADATAREADER_NEWSTIMSTIMS - a class for reading NewStim metadata","title":"CLASS ndi.daq.metadatareader.NewStimStims"},{"location":"reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NewStimStims.m/#superclasses","text":"ndi.daq.metadatareader , ndi.ido , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NewStimStims.m/#properties","text":"Property Description tab_separated_file_parameter identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NewStimStims.m/#methods","text":"Method Description NewStimStims Create a new multifunction DAQ object eq are 2 ndi.daq.metadatareader objects equal? id return the identifier of an ndi.ido object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) readmetadatafromfile read in metadata from the file that is identified searchquery create a search for this ndi.daq.reader object","title":"Methods"},{"location":"reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NewStimStims.m/#methods-help","text":"NewStimStims - Create a new multifunction DAQ object D = ndi . daq . metadatareader . NewStimStims () or D = ndi . daq . metadatareader ( TSVFILE_REGEXPRESSION ) Creates a new ndi . daq . metadatareader object . If TSVFILE_REGEXPRESSION is given , it indicates a regular expression to use to search EPOCHFILES for a tab - separated - value text file that describes stimulus parameters . eq - are 2 ndi.daq.metadatareader objects equal? TF = EQ ( NDI_DAQMETADATAREADER_OBJ_A , NDI_DAQMETADATAREADER_OBJ_B ) TF is 1 if the two objects are of the same class and have the same properties . TF is 0 otherwise . Help for ndi . daq . metadatareader . NewStimStims / eq is inherited from superclass NDI . DAQ . METADATAREADER id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . metadatareader . NewStimStims / id is inherited from superclass NDI . IDO ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . metadatareader . NewStimStims . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.metadatareader object DOC = NEWDOCUMENT ( ndi . daq . metadatareader OBJ ) Creates an ndi . document object DOC that represents the ndi . daq . reader object . Help for ndi . daq . metadatareader . NewStimStims / newdocument is inherited from superclass NDI . DAQ . METADATAREADER readmetadata - PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) Returns the parameters ( cell array of structures ) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES . If the property ' tab_separated_file_parameter ' is not empty , then EPOCHFILES will be searched for files that match the regular expression in ' tab_separated_file_parameter '. The tab - separated - value file should have the form: STIMID < tab > PARAMETER1 < tab > PARAMETER2 < tab > PARAMETER3 ( etc ) < newline > 1 < tab > VALUE1 < tab > VALUE2 < tab > VALUE3 ( etc ) < newline > 2 < tab > VALUE1 < tab > VALUE2 < tab > VALUE3 ( etc ) < newline > ( etc ) For example , a stimulus file for an interoral cannula might be: stimid < tab > substance1 < tab > substance1_concentration < newline > 1 < tab > Sodium chloride < tab > 30e-3 < newline > 2 < tab > Sodium chloride < tab > 300e-3 < newline > 3 < tab > Quinine < tab > 30e-6 < newline > 4 < tab > Quinine < tab > 300e-6 < newline > This function can be overridden in more specialized stimulus classes . Help for ndi . daq . metadatareader . NewStimStims / readmetadata is inherited from superclass NDI . DAQ . METADATAREADER readmetadatafromfile - read in metadata from the file that is identified PARAMETERS = READMETADATAFROMFILE ( NDI_DAQMETADATAREADER_NEWSTIMSTIMS_OBJ , FILE ) Given a file that matches the metadata search criteria for an ndi . daq . metadatareader . NewStimStims document , this function loads in the metadata . searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQMETADATAREADER_OBJ ) Creates a search query for the ndi . daq . metadatareader object . Help for ndi . daq . metadatareader . NewStimStims / searchquery is inherited from superclass NDI . DAQ . METADATAREADER","title":"Methods help"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/mfdaq.m/","text":"CLASS ndi.daq.reader.mfdaq \u00b6 NDI_DAQREADER_MFDAQ - Multifunction DAQ reader class The ndi . daq . reader . mfdaq object class . This object allows one to address multifunction data acquisition systems that sample a variety of data types potentially simultaneously . The channel types that are supported are the following : Channel type ( string ): | Description ------------------------------------------------------------- 'analog_in' or 'ai' | Analog input 'analog_out' or 'ao' | Analog output 'digital_in' or 'di' | Digital input 'digital_out' or 'do' | Digital output 'time' or 't' | Time 'auxiliary_in' , 'aux' or 'ax' | Auxiliary channels 'event' , or 'e' | Event trigger ( returns times of event trigger activation ) 'mark' , or 'mk' | Mark channel ( contains value at specified times ) See also : ndi . daq . reader . mfdaq / ndi . daq . reader . mfdaq Superclasses \u00b6 ndi.daq.reader , ndi.ido , ndi.documentservice Properties \u00b6 Property Description identifier Methods \u00b6 Method Description epochclock return the ndi.time.clocktype objects for an epoch eq tests whether 2 ndi.daq.reader objects are equal getchannelsepoch List the channels that were sampled for this epoch id return the identifier of an ndi.ido object mfdaq Create a new multifunction DAQ object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk Methods help \u00b6 epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQREADER_MFDAQ_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . For the generic ndi . daq . reader . mfdaq , this returns a single clock type ' dev_local ' time ' ; See also : ndi . time . clocktype eq - tests whether 2 ndi.daq.reader objects are equal B = EQ ( NDI_DAQREADER_OBJ1 , NDI_DAQREADER_OBJ2 ) Examines whether or not the ndi . daq . reader objects are equal . Help for ndi . daq . reader . mfdaq / eq is inherited from superclass NDI . DAQ . READER getchannelsepoch - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxillary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . reader . mfdaq / id is inherited from superclass NDI . IDO mfdaq - Create a new multifunction DAQ object D = ndi.daq.reader.mfdaq() Creates a new ndi.daq.reader.mfdaq object. This is an abstract class that is overridden by specific devices. ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . reader . mfdaq . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT ( NDI_DAQREADER_OBJ ) Creates an ndi . document object DOC that represents the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq / newdocument is inherited from superclass NDI . DAQ . READER readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS(MYDEV, CHANNELTYPE, CHANNEL, EPOCH ,S0, S1) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is the epoch number to read from. DATA will have one column per channel. readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES ( NDR_READER_OBJ , CHANNELTYPE , CHANNEL , EPOCHSTREAMS , EPOCH_SELECT , T0 , T1 ) Returns TIMESTAMPS and DATA corresponding to event or marker channels . If the number of CHANNEL entries is 1 , then TIMESTAMPS is a column vector of type double , and DATA is also a column of a type that depends on the type of event that is read . If the number of CHANNEL entries is more than 1 , then TIMESTAMPS and DATA are both columns of cell arrays , with 1 column per channel . CHANNELTYPE is a cell array of strings , describing the type of each channel to read , such as ' event ' - TIMESTAMPS mark the occurrence of each event ; DATA is a logical 1 for each timestamp ' marker ' - TIMESTAMPS mark the occurence of each event ; each row of DATA is the data associated with the marker (type double) ' text ' - TIMESTAMPS mark the occurence of each event ; DATA is a cell array of character arrays, 1 per event ' dep ' - Create events from a digital channel with positive transitions . TIMESTAMPS mark the occurence of each event and DATA entries will be a 1 ' dimp ' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions . TIMESTAMPS mark the occurrence of each event , and DATA indicates whether the event is a positive transition ( 1 ) or negative ( - 1 ) transition . ' den ' - Create events from a digital channel with negative transitions . TIMESTAMPS mark the occurrence of each event and DATA entries will be a - 1 . ' dimn ' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions . TIMESTAMPS mark the occurence of each event , and DATA indicates whether the event is a negative transition ( 1 ) or a positive transition ( - 1 ) . CHANNEL is a vector with the identity ( ies ) of the channel ( s ) to be read . EPOCHSFILES is a cell array of full path file names readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) . It must be a string ( not a cell array of strings ) . CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . samplerate - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE ( DEV , EPOCHFILES , CHANNELTYPE , CHANNEL ) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQREADER_OBJ ) Creates a search query for the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq / searchquery is inherited from superclass NDI . DAQ . READER t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCHFILES ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch defined by EPOCHFILES . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQREADER_OBJ , EPOCHPROBEMAP , NUMBER ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER . For the abstract class ndi . daq . reader , EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . See also : ndi . daq . reader . mfdaq , ndi . epoch . epochprobemap_daqsystem Help for ndi . daq . reader . mfdaq / verifyepochprobemap is inherited from superclass NDI . DAQ . READER","title":"ndi.daq.reader.mfdaq"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/mfdaq.m/#class-ndidaqreadermfdaq","text":"NDI_DAQREADER_MFDAQ - Multifunction DAQ reader class The ndi . daq . reader . mfdaq object class . This object allows one to address multifunction data acquisition systems that sample a variety of data types potentially simultaneously . The channel types that are supported are the following : Channel type ( string ): | Description ------------------------------------------------------------- 'analog_in' or 'ai' | Analog input 'analog_out' or 'ao' | Analog output 'digital_in' or 'di' | Digital input 'digital_out' or 'do' | Digital output 'time' or 't' | Time 'auxiliary_in' , 'aux' or 'ax' | Auxiliary channels 'event' , or 'e' | Event trigger ( returns times of event trigger activation ) 'mark' , or 'mk' | Mark channel ( contains value at specified times ) See also : ndi . daq . reader . mfdaq / ndi . daq . reader . mfdaq","title":"CLASS ndi.daq.reader.mfdaq"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/mfdaq.m/#superclasses","text":"ndi.daq.reader , ndi.ido , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/mfdaq.m/#properties","text":"Property Description identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/mfdaq.m/#methods","text":"Method Description epochclock return the ndi.time.clocktype objects for an epoch eq tests whether 2 ndi.daq.reader objects are equal getchannelsepoch List the channels that were sampled for this epoch id return the identifier of an ndi.ido object mfdaq Create a new multifunction DAQ object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk","title":"Methods"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/mfdaq.m/#methods-help","text":"epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQREADER_MFDAQ_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . For the generic ndi . daq . reader . mfdaq , this returns a single clock type ' dev_local ' time ' ; See also : ndi . time . clocktype eq - tests whether 2 ndi.daq.reader objects are equal B = EQ ( NDI_DAQREADER_OBJ1 , NDI_DAQREADER_OBJ2 ) Examines whether or not the ndi . daq . reader objects are equal . Help for ndi . daq . reader . mfdaq / eq is inherited from superclass NDI . DAQ . READER getchannelsepoch - List the channels that were sampled for this epoch CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES) Returns the channel list of acquired channels in these EPOCHFILES The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxillary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . reader . mfdaq / id is inherited from superclass NDI . IDO mfdaq - Create a new multifunction DAQ object D = ndi.daq.reader.mfdaq() Creates a new ndi.daq.reader.mfdaq object. This is an abstract class that is overridden by specific devices. ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . reader . mfdaq . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT ( NDI_DAQREADER_OBJ ) Creates an ndi . document object DOC that represents the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq / newdocument is inherited from superclass NDI . DAQ . READER readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS(MYDEV, CHANNELTYPE, CHANNEL, EPOCH ,S0, S1) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is the epoch number to read from. DATA will have one column per channel. readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES ( NDR_READER_OBJ , CHANNELTYPE , CHANNEL , EPOCHSTREAMS , EPOCH_SELECT , T0 , T1 ) Returns TIMESTAMPS and DATA corresponding to event or marker channels . If the number of CHANNEL entries is 1 , then TIMESTAMPS is a column vector of type double , and DATA is also a column of a type that depends on the type of event that is read . If the number of CHANNEL entries is more than 1 , then TIMESTAMPS and DATA are both columns of cell arrays , with 1 column per channel . CHANNELTYPE is a cell array of strings , describing the type of each channel to read , such as ' event ' - TIMESTAMPS mark the occurrence of each event ; DATA is a logical 1 for each timestamp ' marker ' - TIMESTAMPS mark the occurence of each event ; each row of DATA is the data associated with the marker (type double) ' text ' - TIMESTAMPS mark the occurence of each event ; DATA is a cell array of character arrays, 1 per event ' dep ' - Create events from a digital channel with positive transitions . TIMESTAMPS mark the occurence of each event and DATA entries will be a 1 ' dimp ' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions . TIMESTAMPS mark the occurrence of each event , and DATA indicates whether the event is a positive transition ( 1 ) or negative ( - 1 ) transition . ' den ' - Create events from a digital channel with negative transitions . TIMESTAMPS mark the occurrence of each event and DATA entries will be a - 1 . ' dimn ' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions . TIMESTAMPS mark the occurence of each event , and DATA indicates whether the event is a negative transition ( 1 ) or a positive transition ( - 1 ) . CHANNEL is a vector with the identity ( ies ) of the channel ( s ) to be read . EPOCHSFILES is a cell array of full path file names readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) . It must be a string ( not a cell array of strings ) . CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . samplerate - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE ( DEV , EPOCHFILES , CHANNELTYPE , CHANNEL ) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQREADER_OBJ ) Creates a search query for the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq / searchquery is inherited from superclass NDI . DAQ . READER t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCHFILES ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch defined by EPOCHFILES . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQREADER_OBJ , EPOCHPROBEMAP , NUMBER ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER . For the abstract class ndi . daq . reader , EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . See also : ndi . daq . reader . mfdaq , ndi . epoch . epochprobemap_daqsystem Help for ndi . daq . reader . mfdaq / verifyepochprobemap is inherited from superclass NDI . DAQ . READER","title":"Methods help"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/blackrock.m/","text":"CLASS ndi.daq.reader.mfdaq.blackrock \u00b6 NDI_DAQREADER_MFDAQ_BLACKROCK - Device driver for Blackrock Microsystems NSx / NEV file format This class reads data from Blackrock Microsystems NSx / NEV file format . Blackrock Microsystems : https : // www . blackrockmicro . com / Superclasses \u00b6 ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , ndi.documentservice Properties \u00b6 Property Description identifier Methods \u00b6 Method Description blackrock Create a new NDI_DEVICE_MFDAQ_BLACKROCK object epochclock return the ndi.time.clocktype objects for an epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles return the file name that corresponds to the NEV/NSV files getchannelsepoch List the channels that are available on this Blackrock device for a given set of files id return the identifier of an ndi.ido object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.reader object read_blackrock_headers read information from Blackrock Micro header files readchannels_epochsamples read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL searchquery create a search for this ndi.daq.reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk Methods help \u00b6 blackrock - Create a new NDI_DEVICE_MFDAQ_BLACKROCK object D = ndi.daq.reader.mfdaq.blackrock() Creates a new ndi.daq.reader.mfdaq.blackrock object epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQREADER_MFDAQ_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . For the generic ndi . daq . reader . mfdaq , this returns a single clock type ' dev_local ' time ' ; See also : ndi . time . clocktype Help for ndi . daq . reader . mfdaq . blackrock / epochclock is inherited from superclass NDI . DAQ . READER . MFDAQ eq - tests whether 2 ndi.daq.reader objects are equal B = EQ ( NDI_DAQREADER_OBJ1 , NDI_DAQREADER_OBJ2 ) Examines whether or not the ndi . daq . reader objects are equal . Help for ndi . daq . reader . mfdaq . blackrock / eq is inherited from superclass NDI . DAQ . READER filenamefromepochfiles - return the file name that corresponds to the NEV/NSV files [NEVFILES, NSVFILES] = FILENAMEFROMEPOCHFILES(FILENAME_ARRAY) Examines the list of filenames in FILENAME_ARRAY (cell array of full path file strings) and determines which ones have the extension '.nev' (neuro event file) and which have the extension '.ns#', where # is a number, or the source data files. getchannelsepoch - List the channels that are available on this Blackrock device for a given set of files CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ, EPOCHFILES) Returns the channel list of acquired channels in this session CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . reader . mfdaq . blackrock / id is inherited from superclass NDI . IDO ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . reader . mfdaq . blackrock . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT ( NDI_DAQREADER_OBJ ) Creates an ndi . document object DOC that represents the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq . blackrock / newdocument is inherited from superclass NDI . DAQ . READER read_blackrock_headers - read information from Blackrock Micro header files [NS_H, NEV_H, HEADERS] = READ_BLACKROCK_HEADERS(NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ, EPOCHFILES, [CHANNELTYPE, CHANNELS]) readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1) CHANNELTYPE is the type of channel to read (cell array of strings, one per channel) CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is set of epoch files DATA is the channel data (each column contains data from an indvidual channel) readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES ( NDR_READER_OBJ , CHANNELTYPE , CHANNEL , EPOCHSTREAMS , EPOCH_SELECT , T0 , T1 ) Returns TIMESTAMPS and DATA corresponding to event or marker channels . If the number of CHANNEL entries is 1 , then TIMESTAMPS is a column vector of type double , and DATA is also a column of a type that depends on the type of event that is read . If the number of CHANNEL entries is more than 1 , then TIMESTAMPS and DATA are both columns of cell arrays , with 1 column per channel . CHANNELTYPE is a cell array of strings , describing the type of each channel to read , such as ' event ' - TIMESTAMPS mark the occurrence of each event ; DATA is a logical 1 for each timestamp ' marker ' - TIMESTAMPS mark the occurence of each event ; each row of DATA is the data associated with the marker (type double) ' text ' - TIMESTAMPS mark the occurence of each event ; DATA is a cell array of character arrays, 1 per event ' dep ' - Create events from a digital channel with positive transitions . TIMESTAMPS mark the occurence of each event and DATA entries will be a 1 ' dimp ' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions . TIMESTAMPS mark the occurrence of each event , and DATA indicates whether the event is a positive transition ( 1 ) or negative ( - 1 ) transition . ' den ' - Create events from a digital channel with negative transitions . TIMESTAMPS mark the occurrence of each event and DATA entries will be a - 1 . ' dimn ' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions . TIMESTAMPS mark the occurence of each event , and DATA indicates whether the event is a negative transition ( 1 ) or a positive transition ( - 1 ) . CHANNEL is a vector with the identity ( ies ) of the channel ( s ) to be read . EPOCHSFILES is a cell array of full path file names Help for ndi . daq . reader . mfdaq . blackrock / readevents_epochsamples is inherited from superclass NDI . DAQ . READER . MFDAQ readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) . It must be a string ( not a cell array of strings ) . CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndi . daq . reader . mfdaq . blackrock / readevents_epochsamples_native is inherited from superclass NDI . DAQ . READER . MFDAQ samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE ( DEV , EPOCHFILES , CHANNELTYPE , CHANNEL ) CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . SR is the list of sample rate from specified channels searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQREADER_OBJ ) Creates a search query for the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq . blackrock / searchquery is inherited from superclass NDI . DAQ . READER t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCHFILES ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ , EPOCHPROBEMAP , EPOCHFILES ) Examines the NDI_EPOCHPROBEMAP_DAQREADER EPOCHPROBEMAP and determines if it is valid for the given device with epoch files EPOCHFILES . See also : ndi . daq . reader , NDI_EPOCHPROBEMAP_DAQREADER","title":"ndi.daq.reader.mfdaq.blackrock"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/blackrock.m/#class-ndidaqreadermfdaqblackrock","text":"NDI_DAQREADER_MFDAQ_BLACKROCK - Device driver for Blackrock Microsystems NSx / NEV file format This class reads data from Blackrock Microsystems NSx / NEV file format . Blackrock Microsystems : https : // www . blackrockmicro . com /","title":"CLASS ndi.daq.reader.mfdaq.blackrock"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/blackrock.m/#superclasses","text":"ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/blackrock.m/#properties","text":"Property Description identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/blackrock.m/#methods","text":"Method Description blackrock Create a new NDI_DEVICE_MFDAQ_BLACKROCK object epochclock return the ndi.time.clocktype objects for an epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles return the file name that corresponds to the NEV/NSV files getchannelsepoch List the channels that are available on this Blackrock device for a given set of files id return the identifier of an ndi.ido object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.reader object read_blackrock_headers read information from Blackrock Micro header files readchannels_epochsamples read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL searchquery create a search for this ndi.daq.reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk","title":"Methods"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/blackrock.m/#methods-help","text":"blackrock - Create a new NDI_DEVICE_MFDAQ_BLACKROCK object D = ndi.daq.reader.mfdaq.blackrock() Creates a new ndi.daq.reader.mfdaq.blackrock object epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQREADER_MFDAQ_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . For the generic ndi . daq . reader . mfdaq , this returns a single clock type ' dev_local ' time ' ; See also : ndi . time . clocktype Help for ndi . daq . reader . mfdaq . blackrock / epochclock is inherited from superclass NDI . DAQ . READER . MFDAQ eq - tests whether 2 ndi.daq.reader objects are equal B = EQ ( NDI_DAQREADER_OBJ1 , NDI_DAQREADER_OBJ2 ) Examines whether or not the ndi . daq . reader objects are equal . Help for ndi . daq . reader . mfdaq . blackrock / eq is inherited from superclass NDI . DAQ . READER filenamefromepochfiles - return the file name that corresponds to the NEV/NSV files [NEVFILES, NSVFILES] = FILENAMEFROMEPOCHFILES(FILENAME_ARRAY) Examines the list of filenames in FILENAME_ARRAY (cell array of full path file strings) and determines which ones have the extension '.nev' (neuro event file) and which have the extension '.ns#', where # is a number, or the source data files. getchannelsepoch - List the channels that are available on this Blackrock device for a given set of files CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ, EPOCHFILES) Returns the channel list of acquired channels in this session CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . reader . mfdaq . blackrock / id is inherited from superclass NDI . IDO ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . reader . mfdaq . blackrock . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT ( NDI_DAQREADER_OBJ ) Creates an ndi . document object DOC that represents the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq . blackrock / newdocument is inherited from superclass NDI . DAQ . READER read_blackrock_headers - read information from Blackrock Micro header files [NS_H, NEV_H, HEADERS] = READ_BLACKROCK_HEADERS(NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ, EPOCHFILES, [CHANNELTYPE, CHANNELS]) readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1) CHANNELTYPE is the type of channel to read (cell array of strings, one per channel) CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is set of epoch files DATA is the channel data (each column contains data from an indvidual channel) readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES ( NDR_READER_OBJ , CHANNELTYPE , CHANNEL , EPOCHSTREAMS , EPOCH_SELECT , T0 , T1 ) Returns TIMESTAMPS and DATA corresponding to event or marker channels . If the number of CHANNEL entries is 1 , then TIMESTAMPS is a column vector of type double , and DATA is also a column of a type that depends on the type of event that is read . If the number of CHANNEL entries is more than 1 , then TIMESTAMPS and DATA are both columns of cell arrays , with 1 column per channel . CHANNELTYPE is a cell array of strings , describing the type of each channel to read , such as ' event ' - TIMESTAMPS mark the occurrence of each event ; DATA is a logical 1 for each timestamp ' marker ' - TIMESTAMPS mark the occurence of each event ; each row of DATA is the data associated with the marker (type double) ' text ' - TIMESTAMPS mark the occurence of each event ; DATA is a cell array of character arrays, 1 per event ' dep ' - Create events from a digital channel with positive transitions . TIMESTAMPS mark the occurence of each event and DATA entries will be a 1 ' dimp ' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions . TIMESTAMPS mark the occurrence of each event , and DATA indicates whether the event is a positive transition ( 1 ) or negative ( - 1 ) transition . ' den ' - Create events from a digital channel with negative transitions . TIMESTAMPS mark the occurrence of each event and DATA entries will be a - 1 . ' dimn ' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions . TIMESTAMPS mark the occurence of each event , and DATA indicates whether the event is a negative transition ( 1 ) or a positive transition ( - 1 ) . CHANNEL is a vector with the identity ( ies ) of the channel ( s ) to be read . EPOCHSFILES is a cell array of full path file names Help for ndi . daq . reader . mfdaq . blackrock / readevents_epochsamples is inherited from superclass NDI . DAQ . READER . MFDAQ readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) . It must be a string ( not a cell array of strings ) . CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndi . daq . reader . mfdaq . blackrock / readevents_epochsamples_native is inherited from superclass NDI . DAQ . READER . MFDAQ samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE ( DEV , EPOCHFILES , CHANNELTYPE , CHANNEL ) CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . SR is the list of sample rate from specified channels searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQREADER_OBJ ) Creates a search query for the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq . blackrock / searchquery is inherited from superclass NDI . DAQ . READER t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCHFILES ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ , EPOCHPROBEMAP , EPOCHFILES ) Examines the NDI_EPOCHPROBEMAP_DAQREADER EPOCHPROBEMAP and determines if it is valid for the given device with epoch files EPOCHFILES . See also : ndi . daq . reader , NDI_EPOCHPROBEMAP_DAQREADER","title":"Methods help"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/cedspike2.m/","text":"CLASS ndi.daq.reader.mfdaq.cedspike2 \u00b6 NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2 - Device driver for Intan Technologies RHD file format This class reads data from CED Spike2 . SMR or . SON file formats . It depends on sigTOOL by Malcolm Lidierth ( http : // sigtool . sourceforge . net ) . sigTOOL is also included in the https : // github . com / VH - Lab / vhlab - thirdparty - matlab bundle and can be installed with instructions at http : // code . vhlab . org . Superclasses \u00b6 ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , ndi.documentservice Properties \u00b6 Property Description identifier Methods \u00b6 Method Description cedspike2 Create a new NDI_DEVICE_MFDAQ_CEDSPIKE2 object cedspike2filelist2smrfile Identify the .SMR file out of a file list cedspike2headertype2mfdaqchanneltype Convert between Intan headers and the ndi.daq.system.mfdaq channel types epochclock return the ndi.time.clocktype objects for an epoch eq tests whether 2 ndi.daq.reader objects are equal getchannelsepoch List the channels that are available on this device id return the identifier of an ndi.ido object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readevents_epochsamples read events or markers of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL searchquery create a search for this ndi.daq.reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk Methods help \u00b6 cedspike2 - Create a new NDI_DEVICE_MFDAQ_CEDSPIKE2 object D = NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2(NAME,THEFILENAVIGATOR) Creates a new NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2 object with name NAME and associated filenavigator THEFILENAVIGATOR. cedspike2filelist2smrfile - Identify the .SMR file out of a file list FILENAME = CEDSPIKE2FILELIST2SMRFILE(FILELIST) Given a cell array of strings FILELIST with full-path file names, this function identifies the first file with an extension '.smr' (case insensitive) and returns the result in FILENAME (full-path file name). cedspike2headertype2mfdaqchanneltype - Convert between Intan headers and the ndi.daq.system.mfdaq channel types CHANNELTYPE = CEDSPIKE2HEADERTYPE2MFDAQCHANNELTYPE(CEDSPIKE2CHANNELTYPE) Given an Intan header file type, returns the standard ndi.daq.system.mfdaq channel type epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQREADER_MFDAQ_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . For the generic ndi . daq . reader . mfdaq , this returns a single clock type ' dev_local ' time ' ; See also : ndi . time . clocktype Help for ndi . daq . reader . mfdaq . cedspike2 / epochclock is inherited from superclass NDI . DAQ . READER . MFDAQ eq - tests whether 2 ndi.daq.reader objects are equal B = EQ ( NDI_DAQREADER_OBJ1 , NDI_DAQREADER_OBJ2 ) Examines whether or not the ndi . daq . reader objects are equal . Help for ndi . daq . reader . mfdaq . cedspike2 / eq is inherited from superclass NDI . DAQ . READER getchannelsepoch - List the channels that are available on this device CHANNELS = GETCHANNELS(THEDEV, EPOCHFILES) Returns the channel list of acquired channels in this session CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . reader . mfdaq . cedspike2 / id is inherited from superclass NDI . IDO ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . reader . mfdaq . cedspike2 . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT ( NDI_DAQREADER_OBJ ) Creates an ndi . document object DOC that represents the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq . cedspike2 / newdocument is inherited from superclass NDI . DAQ . READER readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , S0 , S1 ) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read , beginning from 1 EPOCHFILES is the cell array of full path filenames for this epoch DATA is the channel data ( each column contains data from an indvidual channel ) readevents_epochsamples - read events or markers of specified channels for a specified epoch DATA = READEVENTS_EPOCHSAMPLES ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the set of epoch files DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) . It must be a string ( not a cell array of strings ) . CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndi . daq . reader . mfdaq . cedspike2 / readevents_epochsamples_native is inherited from superclass NDI . DAQ . READER . MFDAQ samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is the list of sample rate from specified channels searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQREADER_OBJ ) Creates a search query for the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq . cedspike2 / searchquery is inherited from superclass NDI . DAQ . READER t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ , EPOCHFILES ) Return the beginning ( t0 ) and end ( t1 ) times of the EPOCHFILES that define this epoch in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . See also : ndi . time . clocktype , EPOCHCLOCK verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ , EPOCHPROBEMAP , EPOCHFILES ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER . For the abstract class ndi . daq . system , EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem","title":"ndi.daq.reader.mfdaq.cedspike2"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/cedspike2.m/#class-ndidaqreadermfdaqcedspike2","text":"NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2 - Device driver for Intan Technologies RHD file format This class reads data from CED Spike2 . SMR or . SON file formats . It depends on sigTOOL by Malcolm Lidierth ( http : // sigtool . sourceforge . net ) . sigTOOL is also included in the https : // github . com / VH - Lab / vhlab - thirdparty - matlab bundle and can be installed with instructions at http : // code . vhlab . org .","title":"CLASS ndi.daq.reader.mfdaq.cedspike2"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/cedspike2.m/#superclasses","text":"ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/cedspike2.m/#properties","text":"Property Description identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/cedspike2.m/#methods","text":"Method Description cedspike2 Create a new NDI_DEVICE_MFDAQ_CEDSPIKE2 object cedspike2filelist2smrfile Identify the .SMR file out of a file list cedspike2headertype2mfdaqchanneltype Convert between Intan headers and the ndi.daq.system.mfdaq channel types epochclock return the ndi.time.clocktype objects for an epoch eq tests whether 2 ndi.daq.reader objects are equal getchannelsepoch List the channels that are available on this device id return the identifier of an ndi.ido object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readevents_epochsamples read events or markers of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL searchquery create a search for this ndi.daq.reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk","title":"Methods"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/cedspike2.m/#methods-help","text":"cedspike2 - Create a new NDI_DEVICE_MFDAQ_CEDSPIKE2 object D = NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2(NAME,THEFILENAVIGATOR) Creates a new NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2 object with name NAME and associated filenavigator THEFILENAVIGATOR. cedspike2filelist2smrfile - Identify the .SMR file out of a file list FILENAME = CEDSPIKE2FILELIST2SMRFILE(FILELIST) Given a cell array of strings FILELIST with full-path file names, this function identifies the first file with an extension '.smr' (case insensitive) and returns the result in FILENAME (full-path file name). cedspike2headertype2mfdaqchanneltype - Convert between Intan headers and the ndi.daq.system.mfdaq channel types CHANNELTYPE = CEDSPIKE2HEADERTYPE2MFDAQCHANNELTYPE(CEDSPIKE2CHANNELTYPE) Given an Intan header file type, returns the standard ndi.daq.system.mfdaq channel type epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQREADER_MFDAQ_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . For the generic ndi . daq . reader . mfdaq , this returns a single clock type ' dev_local ' time ' ; See also : ndi . time . clocktype Help for ndi . daq . reader . mfdaq . cedspike2 / epochclock is inherited from superclass NDI . DAQ . READER . MFDAQ eq - tests whether 2 ndi.daq.reader objects are equal B = EQ ( NDI_DAQREADER_OBJ1 , NDI_DAQREADER_OBJ2 ) Examines whether or not the ndi . daq . reader objects are equal . Help for ndi . daq . reader . mfdaq . cedspike2 / eq is inherited from superclass NDI . DAQ . READER getchannelsepoch - List the channels that are available on this device CHANNELS = GETCHANNELS(THEDEV, EPOCHFILES) Returns the channel list of acquired channels in this session CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . reader . mfdaq . cedspike2 / id is inherited from superclass NDI . IDO ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . reader . mfdaq . cedspike2 . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT ( NDI_DAQREADER_OBJ ) Creates an ndi . document object DOC that represents the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq . cedspike2 / newdocument is inherited from superclass NDI . DAQ . READER readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , S0 , S1 ) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read , beginning from 1 EPOCHFILES is the cell array of full path filenames for this epoch DATA is the channel data ( each column contains data from an indvidual channel ) readevents_epochsamples - read events or markers of specified channels for a specified epoch DATA = READEVENTS_EPOCHSAMPLES ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the set of epoch files DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) . It must be a string ( not a cell array of strings ) . CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndi . daq . reader . mfdaq . cedspike2 / readevents_epochsamples_native is inherited from superclass NDI . DAQ . READER . MFDAQ samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is the list of sample rate from specified channels searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQREADER_OBJ ) Creates a search query for the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq . cedspike2 / searchquery is inherited from superclass NDI . DAQ . READER t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ , EPOCHFILES ) Return the beginning ( t0 ) and end ( t1 ) times of the EPOCHFILES that define this epoch in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . See also : ndi . time . clocktype , EPOCHCLOCK verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ , EPOCHPROBEMAP , EPOCHFILES ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER . For the abstract class ndi . daq . system , EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem","title":"Methods help"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/intan.m/","text":"CLASS ndi.daq.reader.mfdaq.intan \u00b6 NDI_DAQREADER_MFDAQ_INTAN - Device driver for Intan Technologies RHD file forma This class reads data from Intan Technologies . RHD file format . Intan Technologies : http : // intantech . com / Superclasses \u00b6 ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , ndi.documentservice Properties \u00b6 Property Description identifier Methods \u00b6 Method Description epochclock return the ndi.time.clocktype objects for an epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles return the file name that corresponds to the RHD file, or directory in case of directory getchannelsepoch List the channels that are available on this Intan device for a given set of files id return the identifier of an ndi.ido object intan Create a new NDI_DEVICE_MFDAQ_INTAN object intanheadertype2mfdaqchanneltype Convert between Intan headers and the ndi.daq.reader.mfdaq channel types intanname2mfdaqname Converts a channel name from Intan native format to ndi.daq.reader.mfdaq format. mfdaqchanneltype2intanchanneltype convert the channel type from generic format of multifuncdaqchannel mfdaqchanneltype2intanfreqheader Return header name with frequency information for channel type mfdaqchanneltype2intanheadertype Convert between the ndi.daq.reader.mfdaq channel types and Intan headers ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL searchquery create a search for this ndi.daq.reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk Methods help \u00b6 epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQREADER_MFDAQ_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . For the generic ndi . daq . reader . mfdaq , this returns a single clock type ' dev_local ' time ' ; See also : ndi . time . clocktype Help for ndi . daq . reader . mfdaq . intan / epochclock is inherited from superclass NDI . DAQ . READER . MFDAQ eq - tests whether 2 ndi.daq.reader objects are equal B = EQ ( NDI_DAQREADER_OBJ1 , NDI_DAQREADER_OBJ2 ) Examines whether or not the ndi . daq . reader objects are equal . Help for ndi . daq . reader . mfdaq . intan / eq is inherited from superclass NDI . DAQ . READER filenamefromepochfiles - return the file name that corresponds to the RHD file, or directory in case of directory [ FILENAME , PARENTDIR , ISDIRECTORY ] = FILENAMEFROMEPOCHFILES ( NDI_DAQREADER_MFDAQ_INTAN_OBJ , FILENAME_ARRAY ) Examines the list of filenames in FILENAME_ARRAY ( cell array of full path file strings ) and determines which one is an RHD data file . If the 1 - file - per - channel mode is used , then PARENTDIR is the name of the directory that holds the data files and ISDIRECTORY is 1 . getchannelsepoch - List the channels that are available on this Intan device for a given set of files CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_INTAN_OBJ, EPOCHFILES) Returns the channel list of acquired channels in this session CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . reader . mfdaq . intan / id is inherited from superclass NDI . IDO intan - Create a new NDI_DEVICE_MFDAQ_INTAN object D = ndi.daq.reader.mfdaq.intan(NAME,THEFILENAVIGATOR) Creates a new ndi.daq.reader.mfdaq.intan object with name NAME and associated filenavigator THEFILENAVIGATOR. intanheadertype2mfdaqchanneltype - Convert between Intan headers and the ndi.daq.reader.mfdaq channel types CHANNELTYPE = INTANHEADERTYPE2MFDAQCHANNELTYPE(INTANCHANNELTYPE) Given an Intan header file type, returns the standard ndi.daq.reader.mfdaq channel type intanname2mfdaqname - Converts a channel name from Intan native format to ndi.daq.reader.mfdaq format. MFDAQNAME = INTANNAME2MFDAQNAME(ndi.daq.reader.mfdaq.intan, MFDAQTYPE, NAME) Given an Intan native channel name (e.g., 'A-000') in NAME and a ndi.daq.reader.mfdaq channel type string (see NDI_DEVICE_MFDAQ), this function produces an ndi.daq.reader.mfdaq channel name (e.g., 'ai1'). mfdaqchanneltype2intanchanneltype - convert the channel type from generic format of multifuncdaqchannel to the specific intan channel type INTANCHANNELTYPE = MFDAQCHANNELTYPE2INTANCHANNELTYPE ( CHANNELTYPE ) the intanchanneltype is a string of the specific channel type for intan mfdaqchanneltype2intanfreqheader - Return header name with frequency information for channel type HEADERNAME = MFDAQCHANNELTYPE2INTANFREQHEADER(CHANNELTYPE) Given an NDI_DEV_MFDAQ channel type string, this function returns the associated fieldname mfdaqchanneltype2intanheadertype - Convert between the ndi.daq.reader.mfdaq channel types and Intan headers INTANCHANHEADERTYPE = MFDAQCHANNELTYPE2INTANHEADERTYPE(CHANNELTYPE) Given a standard ndi.daq.reader.mfdaq channel type, returns the name of the type as indicated in Intan header files. ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . reader . mfdaq . intan . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT ( NDI_DAQREADER_OBJ ) Creates an ndi . document object DOC that represents the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq . intan / newdocument is inherited from superclass NDI . DAQ . READER readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1) CHANNELTYPE is the type of channel to read (cell array of strings, one per channel) CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is set of epoch files DATA is the channel data (each column contains data from an indvidual channel) readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES ( NDR_READER_OBJ , CHANNELTYPE , CHANNEL , EPOCHSTREAMS , EPOCH_SELECT , T0 , T1 ) Returns TIMESTAMPS and DATA corresponding to event or marker channels . If the number of CHANNEL entries is 1 , then TIMESTAMPS is a column vector of type double , and DATA is also a column of a type that depends on the type of event that is read . If the number of CHANNEL entries is more than 1 , then TIMESTAMPS and DATA are both columns of cell arrays , with 1 column per channel . CHANNELTYPE is a cell array of strings , describing the type of each channel to read , such as ' event ' - TIMESTAMPS mark the occurrence of each event ; DATA is a logical 1 for each timestamp ' marker ' - TIMESTAMPS mark the occurence of each event ; each row of DATA is the data associated with the marker (type double) ' text ' - TIMESTAMPS mark the occurence of each event ; DATA is a cell array of character arrays, 1 per event ' dep ' - Create events from a digital channel with positive transitions . TIMESTAMPS mark the occurence of each event and DATA entries will be a 1 ' dimp ' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions . TIMESTAMPS mark the occurrence of each event , and DATA indicates whether the event is a positive transition ( 1 ) or negative ( - 1 ) transition . ' den ' - Create events from a digital channel with negative transitions . TIMESTAMPS mark the occurrence of each event and DATA entries will be a - 1 . ' dimn ' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions . TIMESTAMPS mark the occurence of each event , and DATA indicates whether the event is a negative transition ( 1 ) or a positive transition ( - 1 ) . CHANNEL is a vector with the identity ( ies ) of the channel ( s ) to be read . EPOCHSFILES is a cell array of full path file names Help for ndi . daq . reader . mfdaq . intan / readevents_epochsamples is inherited from superclass NDI . DAQ . READER . MFDAQ readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) . It must be a string ( not a cell array of strings ) . CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndi . daq . reader . mfdaq . intan / readevents_epochsamples_native is inherited from superclass NDI . DAQ . READER . MFDAQ samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE ( DEV , EPOCHFILES , CHANNELTYPE , CHANNEL ) CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . SR is the list of sample rate from specified channels searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQREADER_OBJ ) Creates a search query for the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq . intan / searchquery is inherited from superclass NDI . DAQ . READER t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCHFILES ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQREADER_MFDAQ_INTAN_OBJ , EPOCHPROBEMAP , EPOCHFILES ) Examines the NDI_EPOCHPROBEMAP_DAQREADER EPOCHPROBEMAP and determines if it is valid for the given device with epoch files EPOCHFILES . See also : ndi . daq . reader , NDI_EPOCHPROBEMAP_DAQREADER","title":"ndi.daq.reader.mfdaq.intan"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/intan.m/#class-ndidaqreadermfdaqintan","text":"NDI_DAQREADER_MFDAQ_INTAN - Device driver for Intan Technologies RHD file forma This class reads data from Intan Technologies . RHD file format . Intan Technologies : http : // intantech . com /","title":"CLASS ndi.daq.reader.mfdaq.intan"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/intan.m/#superclasses","text":"ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/intan.m/#properties","text":"Property Description identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/intan.m/#methods","text":"Method Description epochclock return the ndi.time.clocktype objects for an epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles return the file name that corresponds to the RHD file, or directory in case of directory getchannelsepoch List the channels that are available on this Intan device for a given set of files id return the identifier of an ndi.ido object intan Create a new NDI_DEVICE_MFDAQ_INTAN object intanheadertype2mfdaqchanneltype Convert between Intan headers and the ndi.daq.reader.mfdaq channel types intanname2mfdaqname Converts a channel name from Intan native format to ndi.daq.reader.mfdaq format. mfdaqchanneltype2intanchanneltype convert the channel type from generic format of multifuncdaqchannel mfdaqchanneltype2intanfreqheader Return header name with frequency information for channel type mfdaqchanneltype2intanheadertype Convert between the ndi.daq.reader.mfdaq channel types and Intan headers ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL searchquery create a search for this ndi.daq.reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk","title":"Methods"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/intan.m/#methods-help","text":"epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQREADER_MFDAQ_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . For the generic ndi . daq . reader . mfdaq , this returns a single clock type ' dev_local ' time ' ; See also : ndi . time . clocktype Help for ndi . daq . reader . mfdaq . intan / epochclock is inherited from superclass NDI . DAQ . READER . MFDAQ eq - tests whether 2 ndi.daq.reader objects are equal B = EQ ( NDI_DAQREADER_OBJ1 , NDI_DAQREADER_OBJ2 ) Examines whether or not the ndi . daq . reader objects are equal . Help for ndi . daq . reader . mfdaq . intan / eq is inherited from superclass NDI . DAQ . READER filenamefromepochfiles - return the file name that corresponds to the RHD file, or directory in case of directory [ FILENAME , PARENTDIR , ISDIRECTORY ] = FILENAMEFROMEPOCHFILES ( NDI_DAQREADER_MFDAQ_INTAN_OBJ , FILENAME_ARRAY ) Examines the list of filenames in FILENAME_ARRAY ( cell array of full path file strings ) and determines which one is an RHD data file . If the 1 - file - per - channel mode is used , then PARENTDIR is the name of the directory that holds the data files and ISDIRECTORY is 1 . getchannelsepoch - List the channels that are available on this Intan device for a given set of files CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_INTAN_OBJ, EPOCHFILES) Returns the channel list of acquired channels in this session CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . reader . mfdaq . intan / id is inherited from superclass NDI . IDO intan - Create a new NDI_DEVICE_MFDAQ_INTAN object D = ndi.daq.reader.mfdaq.intan(NAME,THEFILENAVIGATOR) Creates a new ndi.daq.reader.mfdaq.intan object with name NAME and associated filenavigator THEFILENAVIGATOR. intanheadertype2mfdaqchanneltype - Convert between Intan headers and the ndi.daq.reader.mfdaq channel types CHANNELTYPE = INTANHEADERTYPE2MFDAQCHANNELTYPE(INTANCHANNELTYPE) Given an Intan header file type, returns the standard ndi.daq.reader.mfdaq channel type intanname2mfdaqname - Converts a channel name from Intan native format to ndi.daq.reader.mfdaq format. MFDAQNAME = INTANNAME2MFDAQNAME(ndi.daq.reader.mfdaq.intan, MFDAQTYPE, NAME) Given an Intan native channel name (e.g., 'A-000') in NAME and a ndi.daq.reader.mfdaq channel type string (see NDI_DEVICE_MFDAQ), this function produces an ndi.daq.reader.mfdaq channel name (e.g., 'ai1'). mfdaqchanneltype2intanchanneltype - convert the channel type from generic format of multifuncdaqchannel to the specific intan channel type INTANCHANNELTYPE = MFDAQCHANNELTYPE2INTANCHANNELTYPE ( CHANNELTYPE ) the intanchanneltype is a string of the specific channel type for intan mfdaqchanneltype2intanfreqheader - Return header name with frequency information for channel type HEADERNAME = MFDAQCHANNELTYPE2INTANFREQHEADER(CHANNELTYPE) Given an NDI_DEV_MFDAQ channel type string, this function returns the associated fieldname mfdaqchanneltype2intanheadertype - Convert between the ndi.daq.reader.mfdaq channel types and Intan headers INTANCHANHEADERTYPE = MFDAQCHANNELTYPE2INTANHEADERTYPE(CHANNELTYPE) Given a standard ndi.daq.reader.mfdaq channel type, returns the name of the type as indicated in Intan header files. ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . reader . mfdaq . intan . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT ( NDI_DAQREADER_OBJ ) Creates an ndi . document object DOC that represents the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq . intan / newdocument is inherited from superclass NDI . DAQ . READER readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1) CHANNELTYPE is the type of channel to read (cell array of strings, one per channel) CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is set of epoch files DATA is the channel data (each column contains data from an indvidual channel) readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES ( NDR_READER_OBJ , CHANNELTYPE , CHANNEL , EPOCHSTREAMS , EPOCH_SELECT , T0 , T1 ) Returns TIMESTAMPS and DATA corresponding to event or marker channels . If the number of CHANNEL entries is 1 , then TIMESTAMPS is a column vector of type double , and DATA is also a column of a type that depends on the type of event that is read . If the number of CHANNEL entries is more than 1 , then TIMESTAMPS and DATA are both columns of cell arrays , with 1 column per channel . CHANNELTYPE is a cell array of strings , describing the type of each channel to read , such as ' event ' - TIMESTAMPS mark the occurrence of each event ; DATA is a logical 1 for each timestamp ' marker ' - TIMESTAMPS mark the occurence of each event ; each row of DATA is the data associated with the marker (type double) ' text ' - TIMESTAMPS mark the occurence of each event ; DATA is a cell array of character arrays, 1 per event ' dep ' - Create events from a digital channel with positive transitions . TIMESTAMPS mark the occurence of each event and DATA entries will be a 1 ' dimp ' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions . TIMESTAMPS mark the occurrence of each event , and DATA indicates whether the event is a positive transition ( 1 ) or negative ( - 1 ) transition . ' den ' - Create events from a digital channel with negative transitions . TIMESTAMPS mark the occurrence of each event and DATA entries will be a - 1 . ' dimn ' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions . TIMESTAMPS mark the occurence of each event , and DATA indicates whether the event is a negative transition ( 1 ) or a positive transition ( - 1 ) . CHANNEL is a vector with the identity ( ies ) of the channel ( s ) to be read . EPOCHSFILES is a cell array of full path file names Help for ndi . daq . reader . mfdaq . intan / readevents_epochsamples is inherited from superclass NDI . DAQ . READER . MFDAQ readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) . It must be a string ( not a cell array of strings ) . CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndi . daq . reader . mfdaq . intan / readevents_epochsamples_native is inherited from superclass NDI . DAQ . READER . MFDAQ samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE ( DEV , EPOCHFILES , CHANNELTYPE , CHANNEL ) CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . SR is the list of sample rate from specified channels searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQREADER_OBJ ) Creates a search query for the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq . intan / searchquery is inherited from superclass NDI . DAQ . READER t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCHFILES ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQREADER_MFDAQ_INTAN_OBJ , EPOCHPROBEMAP , EPOCHFILES ) Examines the NDI_EPOCHPROBEMAP_DAQREADER EPOCHPROBEMAP and determines if it is valid for the given device with epoch files EPOCHFILES . See also : ndi . daq . reader , NDI_EPOCHPROBEMAP_DAQREADER","title":"Methods help"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/spikegadgets.m/","text":"CLASS ndi.daq.reader.mfdaq.spikegadgets \u00b6 NDI_DAQREADER_MFDAQ_SPIKEGADGETS - Device driver for SpikeGadgets . rec video file format This class reads data from video files . rec that spikegadgets use Spike Gadgets : http : // spikegadgets . com / Superclasses \u00b6 ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , ndi.documentservice Properties \u00b6 Property Description identifier Methods \u00b6 Method Description epochclock return the ndi.time.clocktype objects for an epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles ndi.daq.reader.mfdaq.spikegadgets/filenamefromepochfiles is a function. getchannelsepoch GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER getchannelsepochdetailed GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER WITH EXTRA DETAILS getepochprobemap GETEPOCHPROBEMAP returns struct with probe information id return the identifier of an ndi.ido object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL searchquery create a search for this ndi.daq.reader object spikegadgets Create a new NDI_DEVICE_MFDAQ_SPIKEGADGETS object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk Methods help \u00b6 epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQREADER_MFDAQ_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . For the generic ndi . daq . reader . mfdaq , this returns a single clock type ' dev_local ' time ' ; See also : ndi . time . clocktype Help for ndi . daq . reader . mfdaq . spikegadgets / epochclock is inherited from superclass NDI . DAQ . READER . MFDAQ eq - tests whether 2 ndi.daq.reader objects are equal B = EQ ( NDI_DAQREADER_OBJ1 , NDI_DAQREADER_OBJ2 ) Examines whether or not the ndi . daq . reader objects are equal . Help for ndi . daq . reader . mfdaq . spikegadgets / eq is inherited from superclass NDI . DAQ . READER filenamefromepochfiles - ndi.daq.reader.mfdaq.spikegadgets/filenamefromepochfiles is a function. filename = filenamefromepochfiles(ndi_daqreader_mfdaq_spikegadgets_obj, filename) getchannelsepoch - GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_SPIKEGADGETS_OBJ) CHANNELS is a STRUCT getchannelsepochdetailed - GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER WITH EXTRA DETAILS CHANNELS = GETCHANNELSEPOCHDETAILED(NDI_DAQREADER_MFDAQ_SPIKEGADGETS_OBJ) CHANNELS is a STRUCT getepochprobemap - GETEPOCHPROBEMAP returns struct with probe information name, reference, n-trode, channels id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . reader . mfdaq . spikegadgets / id is inherited from superclass NDI . IDO ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . reader . mfdaq . spikegadgets . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT ( NDI_DAQREADER_OBJ ) Creates an ndi . document object DOC that represents the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq . spikegadgets / newdocument is inherited from superclass NDI . DAQ . READER readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , S0 , S1 ) CHANNELTYPE is the type of channel to read ' digital_in ' , ' digital_out ' , ' analog_in ' , ' analog_out ' or ' auxiliary ' CHANNEL is a vector of the channel numbers to read beginning from 1 if ' etrodeftrode ' is channeltype , if channeltype is ' analog_in ' channel is an array with the string names of analog channels ' Ain1 ' through 8 EPOCH is set of files in the epoch DATA is the channel data ( each column contains data from an indvidual channel ) readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES ( NDR_READER_OBJ , CHANNELTYPE , CHANNEL , EPOCHSTREAMS , EPOCH_SELECT , T0 , T1 ) Returns TIMESTAMPS and DATA corresponding to event or marker channels . If the number of CHANNEL entries is 1 , then TIMESTAMPS is a column vector of type double , and DATA is also a column of a type that depends on the type of event that is read . If the number of CHANNEL entries is more than 1 , then TIMESTAMPS and DATA are both columns of cell arrays , with 1 column per channel . CHANNELTYPE is a cell array of strings , describing the type of each channel to read , such as ' event ' - TIMESTAMPS mark the occurrence of each event ; DATA is a logical 1 for each timestamp ' marker ' - TIMESTAMPS mark the occurence of each event ; each row of DATA is the data associated with the marker (type double) ' text ' - TIMESTAMPS mark the occurence of each event ; DATA is a cell array of character arrays, 1 per event ' dep ' - Create events from a digital channel with positive transitions . TIMESTAMPS mark the occurence of each event and DATA entries will be a 1 ' dimp ' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions . TIMESTAMPS mark the occurrence of each event , and DATA indicates whether the event is a positive transition ( 1 ) or negative ( - 1 ) transition . ' den ' - Create events from a digital channel with negative transitions . TIMESTAMPS mark the occurrence of each event and DATA entries will be a - 1 . ' dimn ' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions . TIMESTAMPS mark the occurence of each event , and DATA indicates whether the event is a negative transition ( 1 ) or a positive transition ( - 1 ) . CHANNEL is a vector with the identity ( ies ) of the channel ( s ) to be read . EPOCHSFILES is a cell array of full path file names Help for ndi . daq . reader . mfdaq . spikegadgets / readevents_epochsamples is inherited from superclass NDI . DAQ . READER . MFDAQ readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) . It must be a string ( not a cell array of strings ) . CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndi . daq . reader . mfdaq . spikegadgets / readevents_epochsamples_native is inherited from superclass NDI . DAQ . READER . MFDAQ samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE ( DEV , EPOCHFILES , CHANNELTYPE , CHANNEL ) SR is the list of sample rate from specified channels CHANNELTYPE and CHANNEL not used in this case since it is the same for all channels in this device searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQREADER_OBJ ) Creates a search query for the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq . spikegadgets / searchquery is inherited from superclass NDI . DAQ . READER spikegadgets - Create a new NDI_DEVICE_MFDAQ_SPIKEGADGETS object D = NDI_DAQSYSTEM_MFDAQ_SPIKEGADGETS(NAME,THEFILENAVIGATOR) Creates a new NDI_DAQSYSTEM_MFDAQ_SPIKEGADGETS object with name NAME and associated filenavigator THEFILENAVIGATOR. t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCHFILES ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQREADER_OBJ , EPOCHPROBEMAP , NUMBER ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER . For the abstract class ndi . daq . reader , EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . See also : ndi . daq . reader . mfdaq . spikegadgets , ndi . epoch . epochprobemap_daqsystem Help for ndi . daq . reader . mfdaq . spikegadgets / verifyepochprobemap is inherited from superclass NDI . DAQ . READER","title":"ndi.daq.reader.mfdaq.spikegadgets"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/spikegadgets.m/#class-ndidaqreadermfdaqspikegadgets","text":"NDI_DAQREADER_MFDAQ_SPIKEGADGETS - Device driver for SpikeGadgets . rec video file format This class reads data from video files . rec that spikegadgets use Spike Gadgets : http : // spikegadgets . com /","title":"CLASS ndi.daq.reader.mfdaq.spikegadgets"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/spikegadgets.m/#superclasses","text":"ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/spikegadgets.m/#properties","text":"Property Description identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/spikegadgets.m/#methods","text":"Method Description epochclock return the ndi.time.clocktype objects for an epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles ndi.daq.reader.mfdaq.spikegadgets/filenamefromepochfiles is a function. getchannelsepoch GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER getchannelsepochdetailed GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER WITH EXTRA DETAILS getepochprobemap GETEPOCHPROBEMAP returns struct with probe information id return the identifier of an ndi.ido object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL searchquery create a search for this ndi.daq.reader object spikegadgets Create a new NDI_DEVICE_MFDAQ_SPIKEGADGETS object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk","title":"Methods"},{"location":"reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/spikegadgets.m/#methods-help","text":"epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQREADER_MFDAQ_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . For the generic ndi . daq . reader . mfdaq , this returns a single clock type ' dev_local ' time ' ; See also : ndi . time . clocktype Help for ndi . daq . reader . mfdaq . spikegadgets / epochclock is inherited from superclass NDI . DAQ . READER . MFDAQ eq - tests whether 2 ndi.daq.reader objects are equal B = EQ ( NDI_DAQREADER_OBJ1 , NDI_DAQREADER_OBJ2 ) Examines whether or not the ndi . daq . reader objects are equal . Help for ndi . daq . reader . mfdaq . spikegadgets / eq is inherited from superclass NDI . DAQ . READER filenamefromepochfiles - ndi.daq.reader.mfdaq.spikegadgets/filenamefromepochfiles is a function. filename = filenamefromepochfiles(ndi_daqreader_mfdaq_spikegadgets_obj, filename) getchannelsepoch - GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_SPIKEGADGETS_OBJ) CHANNELS is a STRUCT getchannelsepochdetailed - GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER WITH EXTRA DETAILS CHANNELS = GETCHANNELSEPOCHDETAILED(NDI_DAQREADER_MFDAQ_SPIKEGADGETS_OBJ) CHANNELS is a STRUCT getepochprobemap - GETEPOCHPROBEMAP returns struct with probe information name, reference, n-trode, channels id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . reader . mfdaq . spikegadgets / id is inherited from superclass NDI . IDO ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . reader . mfdaq . spikegadgets . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT ( NDI_DAQREADER_OBJ ) Creates an ndi . document object DOC that represents the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq . spikegadgets / newdocument is inherited from superclass NDI . DAQ . READER readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , S0 , S1 ) CHANNELTYPE is the type of channel to read ' digital_in ' , ' digital_out ' , ' analog_in ' , ' analog_out ' or ' auxiliary ' CHANNEL is a vector of the channel numbers to read beginning from 1 if ' etrodeftrode ' is channeltype , if channeltype is ' analog_in ' channel is an array with the string names of analog channels ' Ain1 ' through 8 EPOCH is set of files in the epoch DATA is the channel data ( each column contains data from an indvidual channel ) readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES ( NDR_READER_OBJ , CHANNELTYPE , CHANNEL , EPOCHSTREAMS , EPOCH_SELECT , T0 , T1 ) Returns TIMESTAMPS and DATA corresponding to event or marker channels . If the number of CHANNEL entries is 1 , then TIMESTAMPS is a column vector of type double , and DATA is also a column of a type that depends on the type of event that is read . If the number of CHANNEL entries is more than 1 , then TIMESTAMPS and DATA are both columns of cell arrays , with 1 column per channel . CHANNELTYPE is a cell array of strings , describing the type of each channel to read , such as ' event ' - TIMESTAMPS mark the occurrence of each event ; DATA is a logical 1 for each timestamp ' marker ' - TIMESTAMPS mark the occurence of each event ; each row of DATA is the data associated with the marker (type double) ' text ' - TIMESTAMPS mark the occurence of each event ; DATA is a cell array of character arrays, 1 per event ' dep ' - Create events from a digital channel with positive transitions . TIMESTAMPS mark the occurence of each event and DATA entries will be a 1 ' dimp ' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions . TIMESTAMPS mark the occurrence of each event , and DATA indicates whether the event is a positive transition ( 1 ) or negative ( - 1 ) transition . ' den ' - Create events from a digital channel with negative transitions . TIMESTAMPS mark the occurrence of each event and DATA entries will be a - 1 . ' dimn ' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions . TIMESTAMPS mark the occurence of each event , and DATA indicates whether the event is a negative transition ( 1 ) or a positive transition ( - 1 ) . CHANNEL is a vector with the identity ( ies ) of the channel ( s ) to be read . EPOCHSFILES is a cell array of full path file names Help for ndi . daq . reader . mfdaq . spikegadgets / readevents_epochsamples is inherited from superclass NDI . DAQ . READER . MFDAQ readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) . It must be a string ( not a cell array of strings ) . CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndi . daq . reader . mfdaq . spikegadgets / readevents_epochsamples_native is inherited from superclass NDI . DAQ . READER . MFDAQ samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE ( DEV , EPOCHFILES , CHANNELTYPE , CHANNEL ) SR is the list of sample rate from specified channels CHANNELTYPE and CHANNEL not used in this case since it is the same for all channels in this device searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQREADER_OBJ ) Creates a search query for the ndi . daq . reader object . Help for ndi . daq . reader . mfdaq . spikegadgets / searchquery is inherited from superclass NDI . DAQ . READER spikegadgets - Create a new NDI_DEVICE_MFDAQ_SPIKEGADGETS object D = NDI_DAQSYSTEM_MFDAQ_SPIKEGADGETS(NAME,THEFILENAVIGATOR) Creates a new NDI_DAQSYSTEM_MFDAQ_SPIKEGADGETS object with name NAME and associated filenavigator THEFILENAVIGATOR. t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCHFILES ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQREADER_OBJ , EPOCHPROBEMAP , NUMBER ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER . For the abstract class ndi . daq . reader , EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . See also : ndi . daq . reader . mfdaq . spikegadgets , ndi . epoch . epochprobemap_daqsystem Help for ndi . daq . reader . mfdaq . spikegadgets / verifyepochprobemap is inherited from superclass NDI . DAQ . READER","title":"Methods help"},{"location":"reference/%2Bndi/%2Bdaq/%2Bsystem/mfdaq.m/","text":"CLASS ndi.daq.system.mfdaq \u00b6 NDI_DAQSYSTEM_MFDAQ - Multifunction DAQ object class The ndi . daq . system . mfdaq object class . This object allows one to address multifunction data acquisition systems that sample a variety of data types potentially simultaneously . The channel types that are supported are the following : Channel type ( string ): | Description ------------------------------------------------------------- 'analog_in' or 'ai' | Analog input 'analog_out' or 'ao' | Analog output 'digital_in' or 'di' | Digital input 'digital_out' or 'do' | Digital output 'time' or 't' | Time 'auxiliary_in' , 'aux' or 'ax' | Auxiliary channels 'event' , or 'e' | Event trigger ( returns times of event trigger activation ) 'mark' , or 'mk' | Mark channel ( contains value at specified times ) See also : ndi . daq . system . mfdaq / ndi . daq . system . mfdaq Superclasses \u00b6 ndi.daq.system , ndi.ido , ndi.epoch.epochset.param , ndi.epoch.epochset , ndi.documentservice Properties \u00b6 Property Description name filenavigator daqreader daqmetadatareader identifier epochprobemap_class Methods \u00b6 Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build the epochtable for an ndi.daq.system object cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object deleteepoch Delete an epoch and an epoch record from a device epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid return the epoch id string for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq are two ndi.daq.system objects equal? getcache return the NDI_CACHE and key for ndi.daq.system getchannels List the channels that are available on this device getepochprobemap Return the epoch record for an ndi.daq.system object getepochtag Get tag(s) from an epoch getmetadata get metadata for an epoch getprobes GETPROBES = Return all of the probes associated with an ndi.daq.system object id return the identifier of an ndi.ido object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? matchedepochtable compare a hash number from an epochtable to the current version mfdaq Create a new multifunction DAQ object mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type ndi_daqsystem_gui_edit function for editing an ndi.daq.system object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new document set for ndi.daq.system objects numepochs Number of epochs of ndi.epoch.epochset readchannels because this is an abstract class, only empty records are returned readchannels_epochsamples read the data based on specified channels readevents read events or markers of specified channels readevents_epochsamples read events or markers of specified channels for a specified epoch removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery search for an ndi.daq.system session return the ndi.session object associated with the ndi.daq.system object set_daqmetadatareader set the cell array of ndi.daq.metadatareader objects setepochprobemap Sets the epoch record of a particular epoch setepochtag Set tag(s) for an epoch setsession set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system) t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk Methods help \u00b6 addepochtag - Add tag(s) for an epoch ADDEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will be added to any tags in the epoch EPOCHNUMBER . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . Help for ndi . daq . system . mfdaq / addepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . daq . system . mfdaq / EPOCHNODES Help for ndi . daq . system . mfdaq / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - Build the epochtable for an ndi.daq.system object ET = BUILDEPOCHTABLE ( NDI_DAQSYSTEM_OBJ ) Returns the epoch table for NDI_DAQSYSTEM_OBJ Help for ndi . daq . system . mfdaq / buildepochtable is inherited from superclass NDI . DAQ . SYSTEM cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . daq . system . mfdaq / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . daq . system . mfdaq / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET deleteepoch - Delete an epoch and an epoch record from a device DELETEEPOCH ( NDI_DAQSYSTEM_OBJ , NUMBER ... [ REMOVEDATA ] ) Deletes the data and ndi . epoch . epochprobemap_daqsystem and epoch data for epoch NUMBER . If REMOVEDATA is present and is 1 , the data and record are physically deleted . If REMOVEDATA is omitted or is 0 , the data and record are renamed but not deleted from disk . In the abstract class , this command takes no action . See also : ndi . daq . system . mfdaq , ndi . epoch . epochprobemap_daqsystem Help for ndi . daq . system . mfdaq / deleteepoch is inherited from superclass NDI . DAQ . SYSTEM epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . daq . system . mfdaq / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQSYSTEM_MFDAQ_OBJ , EPOCH ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . For the generic ndi . daq . system . mfdaq , this returns a single clock type ' dev_local ' time ' ; See also : ndi . time . clocktype epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . daq . system . mfdaq / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - return the epoch id string for an epoch EID = EOPCHID ( NDI_DAQSYSTEM_OBJ , EPOCH_NUMBER ) Returns the EPOCHID for epoch with number EPOCH_NUMBER . In ndi . daq . system , this is determined by the associated ndi . file . navigator object . Help for ndi . daq . system . mfdaq / epochid is inherited from superclass NDI . DAQ . SYSTEM epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . daq . system . mfdaq / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochprobemapfilename - return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME ( NDI_DAQSYSTEM_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHPROBEMAPFILENAME for the ndi . daq . system epoch EPOCH_NUMBER_OR_ID . If there is no epoch NUMBER , an error is generated . The file name is returned with a full path . Help for ndi . daq . system . mfdaq / epochprobemapfilename is inherited from superclass NDI . DAQ . SYSTEM epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_EPOCHSET_OBJ ) Returns the object name that is used when creating epoch nodes . If the class has a ' name ' property , that property is used . Otherwise , ' unknown ' is used . Help for ndi . daq . system . mfdaq / epochsetname is inherited from superclass NDI . EPOCH . EPOCHSET epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . daq . system . mfdaq / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . daq . system . mfdaq / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME ( NDI_FILENAVIGATOR_OBJ , EPOCHNUMBER ) In this base class , empty is returned because it is an abstract class . Help for ndi . daq . system . mfdaq / epochtagfilename is inherited from superclass NDI . DAQ . SYSTEM eq - are two ndi.daq.system objects equal? B = EQ ( NDI_DAQSYSTEM_OBJ_A , NDI_DAQSYSTEM_OBJ_B ) Returns 1 if the ndi . daq . system objects have the same name and class type . The objects do not have to be the same handle or have the same space in memory . Otherwise , returns 0 . Help for ndi . daq . system . mfdaq / eq is inherited from superclass NDI . DAQ . SYSTEM getcache - return the NDI_CACHE and key for ndi.daq.system [ CACHE , KEY ] = GETCACHE ( NDI_DAQSYSTEM_OBJ ) Returns the CACHE and KEY for the ndi . daq . system object . The CACHE is returned from the associated session . The KEY is the string ' daqsystem_ ' followed by the object ' s id. See also : ndi . daq . system . mfdaq , NDI_BASE Help for ndi . daq . system . mfdaq / getcache is inherited from superclass NDI . DAQ . SYSTEM getchannels - List the channels that are available on this device CHANNELS = GETCHANNELS(NDI_DAQSYSTEM_MFDAQ_OBJ) Returns the channel list of acquired channels in this session The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxillary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') getepochprobemap - Return the epoch record for an ndi.daq.system object EPOCHPROBEMAP = GETEPOCHPROBEMAP ( NDI_DAQSYSTEM_OBJ , EPOCH ) Inputs : NDI_EPOCHSET_PARAM_OBJ - the ndi . epoch . epochset . param object EPOCH - the epoch number or identifier Output : EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME The ndi . daq . system GETEPOCHPROBEMAP checks its DAQREADER object to see if it has a method called ' GETEPOCHPROBEMAP ' that accepts the EPOCHPROBEMAP filename and the EPOCHFILES for that epoch . If it does have a method by that name , it is called and the output returned . If it does not , then the FILENAVIGATOR parameter ' s method is called. Help for ndi . daq . system . mfdaq / getepochprobemap is inherited from superclass NDI . DAQ . SYSTEM getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . If there are no files in EPOCHNUMBER then an error is returned . Help for ndi . daq . system . mfdaq / getepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM getmetadata - get metadata for an epoch METADATA = GETMETADATA ( NDI_DAQSYSTEM_OBJ , EPOCH , CHANNEL ) Returns the metadata ( cell array of entries ) for EPOCH for metadata channel CHANNEL . CHANNEL indicates the number of the ndi . daq . metadatareader to use to obtain the data . Help for ndi . daq . system . mfdaq / getmetadata is inherited from superclass NDI . DAQ . SYSTEM getprobes - GETPROBES = Return all of the probes associated with an ndi.daq.system object PROBES_STRUCT = GETPROBES ( NDI_DAQSYSTEM_OBJ ) Returns all probes associated with the ndi . daq . system object NDI_DEVICE_OBJ This function returns a structure with fields of all unique probes across all EPOCHPROBEMAP objects returned in ndi . daq . system / GETEPOCHPROBEMAP . The fields are ' name ' , ' reference ' , and ' type ' . Help for ndi . daq . system . mfdaq / getprobes is inherited from superclass NDI . DAQ . SYSTEM id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . system . mfdaq / id is inherited from superclass NDI . IDO issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset objects , this returns 1 . For some object types ( ndi . probe . * , for example ) this will return 0 so that the underlying ndi . daq . system epochs are added . Help for ndi . daq . system . mfdaq / issyncgraphroot is inherited from superclass NDI . EPOCH . EPOCHSET matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . daq . system . mfdaq / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET mfdaq - Create a new multifunction DAQ object D = ndi.daq.system.mfdaq(NAME, THEFILENAVIGATOR) Creates a new ndi.daq.system.mfdaq object with NAME, and FILENAVIGATOR. This is an abstract class that is overridden by specific devices. mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- ' analog_in ' , ' ai ' | ' analog_in ' ' analog_out ' , ' ao ' | ' analog_out ' ' digital_in ' , ' di ' | ' digital_in ' ' digital_out ' , ' do ' | ' digital_out ' ' time ' , ' timestamp ' , ' t ' | ' time ' ' auxiliary ' , ' aux ' , ' ax ' , | ' auxiliary ' ' auxiliary_in ' | ' mark ' , ' marker ' , or ' mk ' | ' mark ' ' event ' or ' e ' | ' event ' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX ndi_daqsystem_gui_edit - function for editing an ndi.daq.system object OBJ = NDI_DAQSYSTEM_GUI_EDIT ( NDI_DAQSYSTEM_OBJ ) This function will bring up a graphical window to prompt the user to input parameters that edit the NDI_DAQSYSTEM_OBJ and return a new object . Help for ndi . daq . system . mfdaq / ndi_daqsystem_gui_edit is inherited from superclass NDI . DAQ . SYSTEM ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . system . mfdaq . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new document set for ndi.daq.system objects NDI_DOCUMENT_OBJ_SET = NEWDOCUMENT ( NDI_DAQSYSTEM_OBJ ) Creates a set of documents that describe an ndi . daq . system . Help for ndi . daq . system . mfdaq / newdocument is inherited from superclass NDI . DAQ . SYSTEM numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . daq . system . mfdaq / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET readchannels - because this is an abstract class, only empty records are returned readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS(MYDEV, CHANNELTYPE, CHANNEL, EPOCH ,S0, S1) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is the epoch number to read from. DATA will have one column per channel. readevents - read events or markers of specified channels DATA = READEVENTS ( MYDEV , CHANNELTYPE , CHANNEL , TIMEREF_OR_EPOCH , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) CHANNEL is a vector with the identity of the channel ( s ) to be read . TIMEREF_OR_EPOCH is either an ndi . time . timereference object indicating the clock for T0 , T1 , or it can be a single number , which will indicate the data are to be read from that epoch . TIMESTAMPS is an array of the timestamps read . If more than one channel is requested , then TIMESTAMPS will be a cell array of timestamp arrays , one per channel . DATA is an array of the event data . If more than one channel is requested , then DATA will be a cell array of data arrays , one per channel . readevents_epochsamples - read events or markers of specified channels for a specified epoch [ DATA , TIMEREF ] = READEVENTS_EPOCHSAMPLES ( MYDEV , CHANNELTYPE , CHANNEL , EPOCH , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG ( NDI_EPOCH_PARAM_OBJ , EPOCHNUMBER , NAME ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . Any tags with name ' NAME ' will be removed from the tags in the epoch EPOCHNUMBER . tags in the epoch directory . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . NAME can be a single string , or it can be a cell array of strings ( which will result in the removal of multiple tags ) . Help for ndi . daq . system . mfdaq / removeepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . daq . system . mfdaq / EPOCHTABLE Help for ndi . daq . system . mfdaq / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET samplerate - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE ( DEV , EPOCH , CHANNELTYPE , CHANNEL ) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . searchquery - search for an ndi.daq.system SQ = SEARCHQUERY ( NDI_DAQSYSTEM_OBJ ) Returns SQ , an ndi . query object that searches the database for the ndi . daq . system object Help for ndi . daq . system . mfdaq / searchquery is inherited from superclass NDI . DAQ . SYSTEM session - return the ndi.session object associated with the ndi.daq.system object EXP = SESSION ( NDI_DAQSYSTEM_OBJ ) Return the ndi . session object associated with the ndi . daq . system of the ndi . daq . system object . Help for ndi . daq . system . mfdaq / session is inherited from superclass NDI . DAQ . SYSTEM set_daqmetadatareader - set the cell array of ndi.daq.metadatareader objects NDI_DAQSYSTEM_OBJ = SET_DAQMETADATAREADER ( NDI_DAQSYSTEM_OBJ , NEWDAQMETADATAREADERS ) Sets the ' daqmetadatareader ' property of an ndi . daq . system object . NEWDAQMETADATAREADERS should be a cell array of objects that have ndi . daq . metadatareader as a superclass . Help for ndi . daq . system . mfdaq / set_daqmetadatareader is inherited from superclass NDI . DAQ . SYSTEM setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP ( NDI_EPOCHSET_PARAM_OBJ , EPOCHPROBEMAP , NUMBER , [ OVERWRITE ] ) Sets or replaces the ndi . epoch . epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER . If OVERWRITE is present and is 1 , then any existing epoch record is overwritten . Otherwise , an error is given if there is an existing epoch record . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem Help for ndi . daq . system . mfdaq / setepochprobemap is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM setepochtag - Set tag(s) for an epoch SETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will replace any tags in the epoch directory . If there is no epoch EPOCHNUMBER , then an error is returned . Help for ndi . daq . system . mfdaq / setepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM setsession - set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system) NDI_DAQSYSTEM_OBJ = SETSESSION ( NDI_DEVICE_OBJ , SESSION ) Set the SESSION property of an ndi . daq . system object ' s ndi.daq.system object Help for ndi . daq . system . mfdaq / setsession is inherited from superclass NDI . DAQ . SYSTEM t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . daq . system . mfdaq / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQSYSTEM_OBJ , EPOCHPROBEMAP , EPOCH ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch EPOCH . For the abstract class ndi . daq . system , EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . See also : ndi . daq . system . mfdaq , ndi . epoch . epochprobemap_daqsystem Help for ndi . daq . system . mfdaq / verifyepochprobemap is inherited from superclass NDI . DAQ . SYSTEM","title":"ndi.daq.system.mfdaq"},{"location":"reference/%2Bndi/%2Bdaq/%2Bsystem/mfdaq.m/#class-ndidaqsystemmfdaq","text":"NDI_DAQSYSTEM_MFDAQ - Multifunction DAQ object class The ndi . daq . system . mfdaq object class . This object allows one to address multifunction data acquisition systems that sample a variety of data types potentially simultaneously . The channel types that are supported are the following : Channel type ( string ): | Description ------------------------------------------------------------- 'analog_in' or 'ai' | Analog input 'analog_out' or 'ao' | Analog output 'digital_in' or 'di' | Digital input 'digital_out' or 'do' | Digital output 'time' or 't' | Time 'auxiliary_in' , 'aux' or 'ax' | Auxiliary channels 'event' , or 'e' | Event trigger ( returns times of event trigger activation ) 'mark' , or 'mk' | Mark channel ( contains value at specified times ) See also : ndi . daq . system . mfdaq / ndi . daq . system . mfdaq","title":"CLASS ndi.daq.system.mfdaq"},{"location":"reference/%2Bndi/%2Bdaq/%2Bsystem/mfdaq.m/#superclasses","text":"ndi.daq.system , ndi.ido , ndi.epoch.epochset.param , ndi.epoch.epochset , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bdaq/%2Bsystem/mfdaq.m/#properties","text":"Property Description name filenavigator daqreader daqmetadatareader identifier epochprobemap_class","title":"Properties"},{"location":"reference/%2Bndi/%2Bdaq/%2Bsystem/mfdaq.m/#methods","text":"Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build the epochtable for an ndi.daq.system object cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object deleteepoch Delete an epoch and an epoch record from a device epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid return the epoch id string for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq are two ndi.daq.system objects equal? getcache return the NDI_CACHE and key for ndi.daq.system getchannels List the channels that are available on this device getepochprobemap Return the epoch record for an ndi.daq.system object getepochtag Get tag(s) from an epoch getmetadata get metadata for an epoch getprobes GETPROBES = Return all of the probes associated with an ndi.daq.system object id return the identifier of an ndi.ido object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? matchedepochtable compare a hash number from an epochtable to the current version mfdaq Create a new multifunction DAQ object mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type ndi_daqsystem_gui_edit function for editing an ndi.daq.system object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new document set for ndi.daq.system objects numepochs Number of epochs of ndi.epoch.epochset readchannels because this is an abstract class, only empty records are returned readchannels_epochsamples read the data based on specified channels readevents read events or markers of specified channels readevents_epochsamples read events or markers of specified channels for a specified epoch removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery search for an ndi.daq.system session return the ndi.session object associated with the ndi.daq.system object set_daqmetadatareader set the cell array of ndi.daq.metadatareader objects setepochprobemap Sets the epoch record of a particular epoch setepochtag Set tag(s) for an epoch setsession set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system) t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk","title":"Methods"},{"location":"reference/%2Bndi/%2Bdaq/%2Bsystem/mfdaq.m/#methods-help","text":"addepochtag - Add tag(s) for an epoch ADDEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will be added to any tags in the epoch EPOCHNUMBER . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . Help for ndi . daq . system . mfdaq / addepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . daq . system . mfdaq / EPOCHNODES Help for ndi . daq . system . mfdaq / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - Build the epochtable for an ndi.daq.system object ET = BUILDEPOCHTABLE ( NDI_DAQSYSTEM_OBJ ) Returns the epoch table for NDI_DAQSYSTEM_OBJ Help for ndi . daq . system . mfdaq / buildepochtable is inherited from superclass NDI . DAQ . SYSTEM cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . daq . system . mfdaq / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . daq . system . mfdaq / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET deleteepoch - Delete an epoch and an epoch record from a device DELETEEPOCH ( NDI_DAQSYSTEM_OBJ , NUMBER ... [ REMOVEDATA ] ) Deletes the data and ndi . epoch . epochprobemap_daqsystem and epoch data for epoch NUMBER . If REMOVEDATA is present and is 1 , the data and record are physically deleted . If REMOVEDATA is omitted or is 0 , the data and record are renamed but not deleted from disk . In the abstract class , this command takes no action . See also : ndi . daq . system . mfdaq , ndi . epoch . epochprobemap_daqsystem Help for ndi . daq . system . mfdaq / deleteepoch is inherited from superclass NDI . DAQ . SYSTEM epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . daq . system . mfdaq / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQSYSTEM_MFDAQ_OBJ , EPOCH ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . For the generic ndi . daq . system . mfdaq , this returns a single clock type ' dev_local ' time ' ; See also : ndi . time . clocktype epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . daq . system . mfdaq / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - return the epoch id string for an epoch EID = EOPCHID ( NDI_DAQSYSTEM_OBJ , EPOCH_NUMBER ) Returns the EPOCHID for epoch with number EPOCH_NUMBER . In ndi . daq . system , this is determined by the associated ndi . file . navigator object . Help for ndi . daq . system . mfdaq / epochid is inherited from superclass NDI . DAQ . SYSTEM epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . daq . system . mfdaq / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochprobemapfilename - return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME ( NDI_DAQSYSTEM_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHPROBEMAPFILENAME for the ndi . daq . system epoch EPOCH_NUMBER_OR_ID . If there is no epoch NUMBER , an error is generated . The file name is returned with a full path . Help for ndi . daq . system . mfdaq / epochprobemapfilename is inherited from superclass NDI . DAQ . SYSTEM epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_EPOCHSET_OBJ ) Returns the object name that is used when creating epoch nodes . If the class has a ' name ' property , that property is used . Otherwise , ' unknown ' is used . Help for ndi . daq . system . mfdaq / epochsetname is inherited from superclass NDI . EPOCH . EPOCHSET epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . daq . system . mfdaq / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . daq . system . mfdaq / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME ( NDI_FILENAVIGATOR_OBJ , EPOCHNUMBER ) In this base class , empty is returned because it is an abstract class . Help for ndi . daq . system . mfdaq / epochtagfilename is inherited from superclass NDI . DAQ . SYSTEM eq - are two ndi.daq.system objects equal? B = EQ ( NDI_DAQSYSTEM_OBJ_A , NDI_DAQSYSTEM_OBJ_B ) Returns 1 if the ndi . daq . system objects have the same name and class type . The objects do not have to be the same handle or have the same space in memory . Otherwise , returns 0 . Help for ndi . daq . system . mfdaq / eq is inherited from superclass NDI . DAQ . SYSTEM getcache - return the NDI_CACHE and key for ndi.daq.system [ CACHE , KEY ] = GETCACHE ( NDI_DAQSYSTEM_OBJ ) Returns the CACHE and KEY for the ndi . daq . system object . The CACHE is returned from the associated session . The KEY is the string ' daqsystem_ ' followed by the object ' s id. See also : ndi . daq . system . mfdaq , NDI_BASE Help for ndi . daq . system . mfdaq / getcache is inherited from superclass NDI . DAQ . SYSTEM getchannels - List the channels that are available on this device CHANNELS = GETCHANNELS(NDI_DAQSYSTEM_MFDAQ_OBJ) Returns the channel list of acquired channels in this session The channels are of different types. In the below, 'n' is replaced with the channel number. Type | Description ------------------------------------------------------ ain | Analog input (e.g., ai1 is the first input channel) din | Digital input (e.g., di1 is the first input channel) t | Time - a time channel axn | Auxillary inputs CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analog_input', 'digital_input', 'image', 'timestamp') getepochprobemap - Return the epoch record for an ndi.daq.system object EPOCHPROBEMAP = GETEPOCHPROBEMAP ( NDI_DAQSYSTEM_OBJ , EPOCH ) Inputs : NDI_EPOCHSET_PARAM_OBJ - the ndi . epoch . epochset . param object EPOCH - the epoch number or identifier Output : EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME The ndi . daq . system GETEPOCHPROBEMAP checks its DAQREADER object to see if it has a method called ' GETEPOCHPROBEMAP ' that accepts the EPOCHPROBEMAP filename and the EPOCHFILES for that epoch . If it does have a method by that name , it is called and the output returned . If it does not , then the FILENAVIGATOR parameter ' s method is called. Help for ndi . daq . system . mfdaq / getepochprobemap is inherited from superclass NDI . DAQ . SYSTEM getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . If there are no files in EPOCHNUMBER then an error is returned . Help for ndi . daq . system . mfdaq / getepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM getmetadata - get metadata for an epoch METADATA = GETMETADATA ( NDI_DAQSYSTEM_OBJ , EPOCH , CHANNEL ) Returns the metadata ( cell array of entries ) for EPOCH for metadata channel CHANNEL . CHANNEL indicates the number of the ndi . daq . metadatareader to use to obtain the data . Help for ndi . daq . system . mfdaq / getmetadata is inherited from superclass NDI . DAQ . SYSTEM getprobes - GETPROBES = Return all of the probes associated with an ndi.daq.system object PROBES_STRUCT = GETPROBES ( NDI_DAQSYSTEM_OBJ ) Returns all probes associated with the ndi . daq . system object NDI_DEVICE_OBJ This function returns a structure with fields of all unique probes across all EPOCHPROBEMAP objects returned in ndi . daq . system / GETEPOCHPROBEMAP . The fields are ' name ' , ' reference ' , and ' type ' . Help for ndi . daq . system . mfdaq / getprobes is inherited from superclass NDI . DAQ . SYSTEM id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . daq . system . mfdaq / id is inherited from superclass NDI . IDO issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset objects , this returns 1 . For some object types ( ndi . probe . * , for example ) this will return 0 so that the underlying ndi . daq . system epochs are added . Help for ndi . daq . system . mfdaq / issyncgraphroot is inherited from superclass NDI . EPOCH . EPOCHSET matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . daq . system . mfdaq / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET mfdaq - Create a new multifunction DAQ object D = ndi.daq.system.mfdaq(NAME, THEFILENAVIGATOR) Creates a new ndi.daq.system.mfdaq object with NAME, and FILENAVIGATOR. This is an abstract class that is overridden by specific devices. mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- ' analog_in ' , ' ai ' | ' analog_in ' ' analog_out ' , ' ao ' | ' analog_out ' ' digital_in ' , ' di ' | ' digital_in ' ' digital_out ' , ' do ' | ' digital_out ' ' time ' , ' timestamp ' , ' t ' | ' time ' ' auxiliary ' , ' aux ' , ' ax ' , | ' auxiliary ' ' auxiliary_in ' | ' mark ' , ' marker ' , or ' mk ' | ' mark ' ' event ' or ' e ' | ' event ' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX ndi_daqsystem_gui_edit - function for editing an ndi.daq.system object OBJ = NDI_DAQSYSTEM_GUI_EDIT ( NDI_DAQSYSTEM_OBJ ) This function will bring up a graphical window to prompt the user to input parameters that edit the NDI_DAQSYSTEM_OBJ and return a new object . Help for ndi . daq . system . mfdaq / ndi_daqsystem_gui_edit is inherited from superclass NDI . DAQ . SYSTEM ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . daq . system . mfdaq . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new document set for ndi.daq.system objects NDI_DOCUMENT_OBJ_SET = NEWDOCUMENT ( NDI_DAQSYSTEM_OBJ ) Creates a set of documents that describe an ndi . daq . system . Help for ndi . daq . system . mfdaq / newdocument is inherited from superclass NDI . DAQ . SYSTEM numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . daq . system . mfdaq / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET readchannels - because this is an abstract class, only empty records are returned readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS(MYDEV, CHANNELTYPE, CHANNEL, EPOCH ,S0, S1) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is the epoch number to read from. DATA will have one column per channel. readevents - read events or markers of specified channels DATA = READEVENTS ( MYDEV , CHANNELTYPE , CHANNEL , TIMEREF_OR_EPOCH , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) CHANNEL is a vector with the identity of the channel ( s ) to be read . TIMEREF_OR_EPOCH is either an ndi . time . timereference object indicating the clock for T0 , T1 , or it can be a single number , which will indicate the data are to be read from that epoch . TIMESTAMPS is an array of the timestamps read . If more than one channel is requested , then TIMESTAMPS will be a cell array of timestamp arrays , one per channel . DATA is an array of the event data . If more than one channel is requested , then DATA will be a cell array of data arrays , one per channel . readevents_epochsamples - read events or markers of specified channels for a specified epoch [ DATA , TIMEREF ] = READEVENTS_EPOCHSAMPLES ( MYDEV , CHANNELTYPE , CHANNEL , EPOCH , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG ( NDI_EPOCH_PARAM_OBJ , EPOCHNUMBER , NAME ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . Any tags with name ' NAME ' will be removed from the tags in the epoch EPOCHNUMBER . tags in the epoch directory . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . NAME can be a single string , or it can be a cell array of strings ( which will result in the removal of multiple tags ) . Help for ndi . daq . system . mfdaq / removeepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . daq . system . mfdaq / EPOCHTABLE Help for ndi . daq . system . mfdaq / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET samplerate - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE ( DEV , EPOCH , CHANNELTYPE , CHANNEL ) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . searchquery - search for an ndi.daq.system SQ = SEARCHQUERY ( NDI_DAQSYSTEM_OBJ ) Returns SQ , an ndi . query object that searches the database for the ndi . daq . system object Help for ndi . daq . system . mfdaq / searchquery is inherited from superclass NDI . DAQ . SYSTEM session - return the ndi.session object associated with the ndi.daq.system object EXP = SESSION ( NDI_DAQSYSTEM_OBJ ) Return the ndi . session object associated with the ndi . daq . system of the ndi . daq . system object . Help for ndi . daq . system . mfdaq / session is inherited from superclass NDI . DAQ . SYSTEM set_daqmetadatareader - set the cell array of ndi.daq.metadatareader objects NDI_DAQSYSTEM_OBJ = SET_DAQMETADATAREADER ( NDI_DAQSYSTEM_OBJ , NEWDAQMETADATAREADERS ) Sets the ' daqmetadatareader ' property of an ndi . daq . system object . NEWDAQMETADATAREADERS should be a cell array of objects that have ndi . daq . metadatareader as a superclass . Help for ndi . daq . system . mfdaq / set_daqmetadatareader is inherited from superclass NDI . DAQ . SYSTEM setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP ( NDI_EPOCHSET_PARAM_OBJ , EPOCHPROBEMAP , NUMBER , [ OVERWRITE ] ) Sets or replaces the ndi . epoch . epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER . If OVERWRITE is present and is 1 , then any existing epoch record is overwritten . Otherwise , an error is given if there is an existing epoch record . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem Help for ndi . daq . system . mfdaq / setepochprobemap is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM setepochtag - Set tag(s) for an epoch SETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will replace any tags in the epoch directory . If there is no epoch EPOCHNUMBER , then an error is returned . Help for ndi . daq . system . mfdaq / setepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM setsession - set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system) NDI_DAQSYSTEM_OBJ = SETSESSION ( NDI_DEVICE_OBJ , SESSION ) Set the SESSION property of an ndi . daq . system object ' s ndi.daq.system object Help for ndi . daq . system . mfdaq / setsession is inherited from superclass NDI . DAQ . SYSTEM t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . daq . system . mfdaq / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQSYSTEM_OBJ , EPOCHPROBEMAP , EPOCH ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch EPOCH . For the abstract class ndi . daq . system , EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . See also : ndi . daq . system . mfdaq , ndi . epoch . epochprobemap_daqsystem Help for ndi . daq . system . mfdaq / verifyepochprobemap is inherited from superclass NDI . DAQ . SYSTEM","title":"Methods help"},{"location":"reference/%2Bndi/%2Bdata/evaluate_fitcurve.m/","text":"ndi.data.evaluate_fitcurve \u00b6 NDI_EVALUTE_FITCURVE - evaluate a fitcurve ( the standard fitcurve type ) Y = NDI_EVALUTE_FITCURVE ( FITCURVE_DOC , X , ... ) Evaluate an FITCURVE document function for indicated values of X .","title":"ndi.data.evaluate_fitcurve"},{"location":"reference/%2Bndi/%2Bdata/evaluate_fitcurve.m/#ndidataevaluate_fitcurve","text":"NDI_EVALUTE_FITCURVE - evaluate a fitcurve ( the standard fitcurve type ) Y = NDI_EVALUTE_FITCURVE ( FITCURVE_DOC , X , ... ) Evaluate an FITCURVE document function for indicated values of X .","title":"ndi.data.evaluate_fitcurve"},{"location":"reference/%2Bndi/%2Bdatabase/binarydoc.m/","text":"CLASS ndi.database.binarydoc \u00b6 NDI_BINARYDOC - a binary file class that handles reading/writing Superclasses \u00b6 handle Properties \u00b6 none Methods \u00b6 Method Description addlistener ADDLISTENER Add listener for event. binarydoc a binary file class that handles reading/writing delete close an ndi.database.binarydoc and delete its handle eq == (EQ) Test handle equality. fclose FCLOSE Close file. feof of-file. findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. fopen FOPEN Open file. fread FREAD Read binary data from file. fseek FSEEK Set file position indicator. ftell FTELL Get file position indicator. fwrite FWRITE Write binary data to file. ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. Methods help \u00b6 addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , NDI . DATABASE . BINARYDOC , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . database . binarydoc / addlistener is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / addlistener doc handle . addlistener binarydoc - a binary file class that handles reading/writing delete - close an ndi.database.binarydoc and delete its handle DELETE ( NDI_BINARYDOC_OBJ ) Closes an ndi . database . binarydoc ( if necessary ) and then deletes the handle . eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . BINARYDOC , NDI . DATABASE . BINARYDOC / GE , NDI . DATABASE . BINARYDOC / GT , NDI . DATABASE . BINARYDOC / LE , NDI . DATABASE . BINARYDOC / LT , NDI . DATABASE . BINARYDOC / NE Help for ndi . database . binarydoc / eq is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / eq doc handle . eq fclose - FCLOSE Close file. ST = FCLOSE ( FID ) closes the file associated with file identifier FID , which is an integer value obtained from an earlier call to FOPEN . FCLOSE returns 0 if successful or - 1 if not . If FID does not represent an open file , or if it is equal to 0 ( standard input ) , 1 ( standard output ) , or 2 ( standard error ) , FCLOSE throws an error . ST = FCLOSE ( ' all ' ) closes all open files , except 0 , 1 and 2 . See also FOPEN , FERROR , FPRINTF , FREAD , FREWIND , FSCANF , FTELL , FWRITE . feof - of-file. ST = FEOF ( FID ) returns 1 if the end - of - file indicator for the file with file identifier FID has been set , and 0 otherwise . The end - of - file indicator is set when a read operation on the file associated with the FID attempts to read past the end of the file . See also FERROR , FGETL , FGETS , FREAD , FSCANF , FOPEN . findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , NDI . DATABASE . BINARYDOC Help for ndi . database . binarydoc / findobj is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / findobj doc handle . findobj findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also NDI . DATABASE . BINARYDOC , NDI . DATABASE . BINARYDOC / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for ndi . database . binarydoc / findprop is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / findprop doc handle . findprop fopen - FOPEN Open file. FID = FOPEN ( FILENAME ) opens the file FILENAME for read access . FILENAME is the name of the file to be opened . FILENAME can be a MATLABPATH relative partial pathname . If the file is not found in the current working directory , FOPEN searches for it on the MATLAB search path . On UNIX systems , FILENAME may also start with a \"~/\" or a \"~username/\" , which FOPEN expands to the current user ' s home directory or the specified user ' s home directory , respectively . FID is a scalar MATLAB integer valued double , called a file identifier . You use FID as the first argument to other file input / output routines , such as FREAD and FCLOSE . If FOPEN cannot open the file , it returns - 1. FID = FOPEN ( FILENAME , PERMISSION ) opens the file FILENAME in the mode specified by PERMISSION: 'r' open file for reading 'w' open file for writing ; discard existing contents 'a' open or create file for writing ; append data to end of file ' r + ' open ( do not create ) file for reading and writing ' w + ' open or create file for reading and writing ; discard existing contents ' a + ' open or create file for reading and writing ; append data to end of file 'W' open file for writing without automatic flushing 'A' open file for appending without automatic flushing FILENAME can be a MATLABPATH relative partial pathname only if the file is opened for reading . You can open files in binary mode ( the default ) or in text mode . In binary mode , no characters get singled out for special treatment . In text mode on the PC , the carriage return character preceding a newline character is deleted on input and added before the newline character on output . To open a file in text mode , append 't' to the permission specifier , for example ' rt ' and ' w + t '. ( On Unix , text and binary mode are the same , so this has no effect . On PC systems this is critical .) If the file is opened in update mode ( '+' ), you must use an FSEEK or FREWIND between an input command like FREAD , FSCANF , FGETS , or FGETL and an output command like FWRITE or FPRINTF . You must also use an FSEEK or FREWIND between an output command and an input command . Two file identifiers are automatically available and need not be opened . They are FID = 1 ( standard output ) and FID = 2 ( standard error ). [ FID , MESSAGE ] = FOPEN ( FILENAME ,...) returns a system dependent error message if the open is not successful . [ FID , MESSAGE ] = FOPEN ( FILENAME , PERMISSION , MACHINEFORMAT ) opens the specified file with the specified PERMISSION and treats data read using FREAD or data written using FWRITE as having a format given by MACHINEFORMAT . MACHINEFORMAT is one of the following: ' native ' or 'n' - local machine format - the default ' ieee - le ' or 'l' - IEEE floating point with little - endian byte ordering ' ieee - be ' or 'b' - IEEE floating point with big - endian byte ordering ' ieee - le . l64 ' or 'a' - IEEE floating point with little - endian byte ordering and 64 bit long data type ' ieee - be . l64 ' or 's' - IEEE floating point with big - endian byte ordering and 64 bit long data type . [ FID , MESSAGE ] = FOPEN ( FILENAME , PERMISSION , MACHINEFORMAT , ENCODING ) opens the specified file using the specified PERMISSION and MACHINEFORMAT . ENCODING specifies the name of a character encoding scheme associated with the file . It must be the empty character vector (''), empty string ( \"\" ), or a name , or alias for an encoding scheme . Some examples are ' UTF - 8 ', ' latin1 ', ' US - ASCII ', and ' Shift_JIS '. For common names and aliases , see the Web site http: //www.iana.org/assignments/character-sets. If ENCODING is unspecified , or is the empty character vector (''), or is the empty string ( \"\" ), MATLAB ' s default encoding scheme is used . [ FILENAME , PERMISSION , MACHINEFORMAT , ENCODING ] = FOPEN ( FID ) returns the filename , permission , machine format , and character encoding values used by MATLAB when it opened the file associated with identifier FID . MATLAB does not determine these output values by reading information from the opened file . For any of these parameters that were not specified when the file was opened , MATLAB returns its default value . The ENCODING is a standard character encoding scheme name that may not be the same as the ENCODING argument used in the call to FOPEN that opened the file . An invalid FID returns empty character vector ('') for all output arguments . FIDS = FOPEN (' all ') returns a row vector containing the file identifiers for all the files currently opened by the user ( but not 1 or 2 ). The 'W' and 'A' permissions do not automatically perform a flush of the current output buffer after output operations . See also FCLOSE , FERROR , FGETL , FGETS , FPRINTF , FREAD , FSCANF , FSEEK , FTELL , FWRITE . fread - FREAD Read binary data from file. A = FREAD ( FID ) reads binary data from the specified file and writes it into matrix A . FID is an integer file identifier obtained from FOPEN . MATLAB reads the entire file and positions the file pointer at the end of the file ( see FEOF for details ). A = FREAD ( FID , SIZE ) reads the number of elements specified by SIZE . Valid entries for SIZE are : N read N elements into a column vector . inf read to the end of the file . [ M , N ] read elements to fill an M-by-N matrix , in column order . N can be inf , but M can 't. A = FREAD(FID,SIZE,PRECISION) reads the file according to the data format specified by PRECISION. The PRECISION input commonly contains a datatype specifier like ' int ' or ' float ', followed by an integer giving the size in bits. The SIZE argument is optional when using this syntax. Any of the following values, either the MATLAB version, or their C or Fortran equivalent, may be used for PRECISION. If not specified, the default PRECISION is ' uint8 '. MATLAB C or Fortran Description ' uchar ' ' unsigned char ' unsigned integer, 8 bits. ' schar ' ' signed char ' signed integer, 8 bits. ' int8 ' ' integer * 1 ' integer, 8 bits. ' int16 ' ' integer * 2 ' integer, 16 bits. ' int32 ' ' integer * 4 ' integer, 32 bits. ' int64 ' ' integer * 8 ' integer, 64 bits. ' uint8 ' ' integer * 1 ' unsigned integer, 8 bits. ' uint16 ' ' integer * 2 ' unsigned integer, 16 bits. ' uint32 ' ' integer * 4 ' unsigned integer, 32 bits. ' uint64 ' ' integer * 8 ' unsigned integer, 64 bits. ' single ' ' real * 4 ' floating point, 32 bits. ' float32 ' ' real * 4 ' floating point, 32 bits. ' double ' ' real * 8 ' floating point, 64 bits. ' float64 ' ' real * 8 ' floating point, 64 bits. The following platform dependent formats are also supported but they are not guaranteed to be the same size on all platforms. MATLAB C or Fortran Description ' char ' ' char * 1 ' character. ' short ' ' short ' integer, 16 bits. ' int ' ' int ' integer, 32 bits. ' long ' ' long ' integer, 32 or 64 bits. ' ushort ' ' unsigned short ' unsigned integer, 16 bits. ' uint ' ' unsigned int ' unsigned integer, 32 bits. ' ulong ' ' unsigned long ' unsigned integer, 32 bits or 64 bits. ' float ' ' float ' floating point, 32 bits. If the precision is ' char ' or ' char * 1 ', MATLAB reads characters using the encoding scheme associated with the file. See FOPEN for more information. The following formats map to an input stream of bits rather than bytes. ' bitN ' signed integer, N bits (1<=N<=64). ' ubitN ' unsigned integer, N bits (1<=N<=64). If the input stream is bytes and FREAD reaches the end of file (see FEOF) in the middle of reading the number of bytes required for an element, the partial result is ignored. However, if the input stream is bits, then the partial result is returned as the last value. If an error occurs before reaching the end of file, only full elements read up to that point are used. By default, numeric and character values are returned in class ' double ' arrays. To return these values stored in classes other than double, create your PRECISION argument by first specifying your source format, then following it by ' => ', and finally specifying your destination format. If the source and destination formats are the same then the following shorthand notation may be used: *source which means: source=>source For example, uint8=>uint8 read in unsigned 8-bit integers and save them in an unsigned 8-bit integer array *uint8 shorthand version of previous example bit4=>int8 read in signed 4-bit integers packed in bytes and save them in a signed 8-bit integer array (each 4-bit integer becomes one 8-bit integer) double=>real*4 read in doubles, convert and save as a 32-bit floating point array A = FREAD(FID,SIZE,PRECISION,SKIP) includes a SKIP argument that specifies the number of bytes to skip after each PRECISION value is read. If PRECISION specifies a bit source format, like ' bitN ' or ' ubitN ', the SKIP argument is interpreted as the number of bits to skip. The SIZE argument is optional when using this syntax. When SKIP is used, the PRECISION specifier may contain a positive integer repetition factor of the form ' N * ' which prepends the source format of the PRECISION argument, like ' 40 * uchar '. Note that 40*uchar for the PRECISION alone is equivalent to ' 40 * uchar => double ', not ' 40 * uchar => uchar '. With SKIP specified, FREAD reads in, at most, a repetition factor number of values (default of 1), does a skip of input specified by the SKIP argument, reads in another block of values and does a skip of input, etc. until SIZE number of values have been read. If a SKIP argument is not specified, the repetition factor is ignored. Repetition with skip is useful for extracting data in noncontiguous fields from fixed length records. For example, s = fread(fid,120,' 40 * uchar => uchar ',8); reads in 120 characters in blocks of 40 each separated by 8 characters. A = FREAD(FID,SIZE,PRECISION,SKIP,MACHINEFORMAT) treats the data read as having a format given by the MACHINEFORMAT. You can obtain the MACHINEFORMAT argument from the output of the FOPEN function. See FOPEN for possible values for MACHINEFORMAT. The SIZE and SKIP arguments are optional when using this syntax. [ A , COUNT ] = FREAD(...) Optional output argument COUNT returns the number of elements successfully read. Examples: The file alphabet.txt contains the 26 letters of the English alphabet, all capitalized. Open the file for read access with fopen, and read the first five elements into output c. Because a precision has not been specified, MATLAB uses the default precision of uchar, and the output is numeric: fid = fopen(' alphabet . txt ', ' r '); c = fread(fid, 5)' c = 65 66 67 68 69 fclose ( fid ); This time , specify that you want each element read as an unsigned 8-bit integer and output as a character . ( Using a precision of 'char=>char' or '*char' will produce the same result ): fid = fopen ( 'alphabet.txt' , 'r' ); c = fread ( fid , 5 , 'uint8=>char' ) ' c = ABCDE fclose ( fid ); See also FWRITE , FSEEK , FSCANF , FGETL , FGETS , LOAD , FOPEN , FEOF . fseek - FSEEK Set file position indicator. STATUS = FSEEK ( FID , OFFSET , ORIGIN ) repositions the file position indicator in the file associated with the given FID . FSEEK sets the position indicator to the byte with the specified OFFSET relative to ORIGIN . FID is an integer file identifier obtained from FOPEN . OFFSET values are interpreted as follows : >= 0 Move position indicator OFFSET bytes after ORIGIN . < 0 Move position indicator OFFSET bytes before ORIGIN . ORIGIN values are interpreted as follows : ' bof ' or - 1 Beginning of file ' cof ' or 0 Current position in file ' eof ' or 1 End of file STATUS is 0 on success and - 1 on failure . If an error occurs , use FERROR to get more information . Example : fseek ( fid , 0 , - 1 ) \" rewinds \" the file . See also FERROR , FOPEN , FPRINTF , FREAD , FREWIND , FSCANF , FSEEK , FTELL , FWRITE . ftell - FTELL Get file position indicator. POSITION = FTELL ( FID ) returns the location of the file position indicator in the specified file . Position is indicated in bytes from the beginning of the file . If - 1 is returned , it indicates that the query was unsuccessful . Use FERROR to determine the nature of the error . FID is an integer file identifier obtained from FOPEN . See also FERROR , FOPEN , FPRINTF , FREAD , FREWIND , FSCANF , FSEEK , FWRITE . fwrite - FWRITE Write binary data to file. COUNT = FWRITE ( FID , A ) writes the elements of matrix A to the specified file . The data are written in column order . COUNT is the number of elements successfully written . FID is an integer file identifier obtained from FOPEN , or 1 for standard output or 2 for standard error . COUNT = FWRITE ( FID , A , PRECISION ) writes the elements of matrix A to the specified file , translating MATLAB values to the specified precision . PRECISION controls the form and size of the result . See the list of allowed precisions under FREAD . If PRECISION is not specified , MATLAB uses the default , which is ' uint8 ' . If either ' bitN ' or ' ubitN ' is used for the PRECISION then any out of range value of A is written as a value with all bits turned on . If the precision is ' char ' or ' char*1 ' , MATLAB writes characters using the encoding scheme associated with the file . See FOPEN for more information . COUNT = FWRITE ( FID , A , PRECISION , SKIP ) includes an optional SKIP argument that specifies the number of bytes to skip before each PRECISION value is written . With the SKIP argument present , FWRITE skips and writes a value , skips and writes another value , etc . until all of A is written . If PRECISION is a bit format like ' bitN ' or ' ubitN ' SKIP is specified in bits . This is useful for inserting data into noncontiguous fields in fixed length records . COUNT = FWRITE ( FID , A , PRECISION , SKIP , MACHINEFORMAT ) treats the data written as having a format given by MACHINEFORMAT . You can obtain the MACHINEFORMAT argument from the output of the FOPEN function . See FOPEN for possible values for MACHINEFORMAT . For example , fid = fopen ( ' magic5.bin ' , ' wb ' ) fwrite ( fid , magic ( 5 ) , ' integer*4 ' ) creates a 100 - byte binary file , containing the 25 elements of the 5 - by - 5 magic square , stored as 4 - byte integers . See also FOPEN , FREAD , FPRINTF , SAVE , DIARY . ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . BINARYDOC , NDI . DATABASE . BINARYDOC / EQ , NDI . DATABASE . BINARYDOC / GT , NDI . DATABASE . BINARYDOC / LE , NDI . DATABASE . BINARYDOC / LT , NDI . DATABASE . BINARYDOC / NE Help for ndi . database . binarydoc / ge is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / ge doc handle . ge gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . BINARYDOC , NDI . DATABASE . BINARYDOC / EQ , NDI . DATABASE . BINARYDOC / GE , NDI . DATABASE . BINARYDOC / LE , NDI . DATABASE . BINARYDOC / LT , NDI . DATABASE . BINARYDOC / NE Help for ndi . database . binarydoc / gt is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / gt doc handle . gt isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDI . DATABASE . BINARYDOC , NDI . DATABASE . BINARYDOC / DELETE Help for ndi . database . binarydoc / isvalid is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / isvalid doc handle . isvalid le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . BINARYDOC , NDI . DATABASE . BINARYDOC / EQ , NDI . DATABASE . BINARYDOC / GE , NDI . DATABASE . BINARYDOC / GT , NDI . DATABASE . BINARYDOC / LT , NDI . DATABASE . BINARYDOC / NE Help for ndi . database . binarydoc / le is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / le doc handle . le listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , NDI . DATABASE . BINARYDOC , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . database . binarydoc / listener is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / listener doc handle . listener lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . BINARYDOC , NDI . DATABASE . BINARYDOC / EQ , NDI . DATABASE . BINARYDOC / GE , NDI . DATABASE . BINARYDOC / GT , NDI . DATABASE . BINARYDOC / LE , NDI . DATABASE . BINARYDOC / NE Help for ndi . database . binarydoc / lt is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / lt doc handle . lt ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . BINARYDOC , NDI . DATABASE . BINARYDOC / EQ , NDI . DATABASE . BINARYDOC / GE , NDI . DATABASE . BINARYDOC / GT , NDI . DATABASE . BINARYDOC / LE , NDI . DATABASE . BINARYDOC / LT Help for ndi . database . binarydoc / ne is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / ne doc handle . ne notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDI . DATABASE . BINARYDOC , NDI . DATABASE . BINARYDOC / ADDLISTENER , NDI . DATABASE . BINARYDOC / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndi . database . binarydoc / notify is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / notify doc handle . notify","title":"ndi.database.binarydoc"},{"location":"reference/%2Bndi/%2Bdatabase/binarydoc.m/#class-ndidatabasebinarydoc","text":"NDI_BINARYDOC - a binary file class that handles reading/writing","title":"CLASS ndi.database.binarydoc"},{"location":"reference/%2Bndi/%2Bdatabase/binarydoc.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bdatabase/binarydoc.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bndi/%2Bdatabase/binarydoc.m/#methods","text":"Method Description addlistener ADDLISTENER Add listener for event. binarydoc a binary file class that handles reading/writing delete close an ndi.database.binarydoc and delete its handle eq == (EQ) Test handle equality. fclose FCLOSE Close file. feof of-file. findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. fopen FOPEN Open file. fread FREAD Read binary data from file. fseek FSEEK Set file position indicator. ftell FTELL Get file position indicator. fwrite FWRITE Write binary data to file. ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event.","title":"Methods"},{"location":"reference/%2Bndi/%2Bdatabase/binarydoc.m/#methods-help","text":"addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , NDI . DATABASE . BINARYDOC , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . database . binarydoc / addlistener is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / addlistener doc handle . addlistener binarydoc - a binary file class that handles reading/writing delete - close an ndi.database.binarydoc and delete its handle DELETE ( NDI_BINARYDOC_OBJ ) Closes an ndi . database . binarydoc ( if necessary ) and then deletes the handle . eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . BINARYDOC , NDI . DATABASE . BINARYDOC / GE , NDI . DATABASE . BINARYDOC / GT , NDI . DATABASE . BINARYDOC / LE , NDI . DATABASE . BINARYDOC / LT , NDI . DATABASE . BINARYDOC / NE Help for ndi . database . binarydoc / eq is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / eq doc handle . eq fclose - FCLOSE Close file. ST = FCLOSE ( FID ) closes the file associated with file identifier FID , which is an integer value obtained from an earlier call to FOPEN . FCLOSE returns 0 if successful or - 1 if not . If FID does not represent an open file , or if it is equal to 0 ( standard input ) , 1 ( standard output ) , or 2 ( standard error ) , FCLOSE throws an error . ST = FCLOSE ( ' all ' ) closes all open files , except 0 , 1 and 2 . See also FOPEN , FERROR , FPRINTF , FREAD , FREWIND , FSCANF , FTELL , FWRITE . feof - of-file. ST = FEOF ( FID ) returns 1 if the end - of - file indicator for the file with file identifier FID has been set , and 0 otherwise . The end - of - file indicator is set when a read operation on the file associated with the FID attempts to read past the end of the file . See also FERROR , FGETL , FGETS , FREAD , FSCANF , FOPEN . findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , NDI . DATABASE . BINARYDOC Help for ndi . database . binarydoc / findobj is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / findobj doc handle . findobj findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also NDI . DATABASE . BINARYDOC , NDI . DATABASE . BINARYDOC / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for ndi . database . binarydoc / findprop is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / findprop doc handle . findprop fopen - FOPEN Open file. FID = FOPEN ( FILENAME ) opens the file FILENAME for read access . FILENAME is the name of the file to be opened . FILENAME can be a MATLABPATH relative partial pathname . If the file is not found in the current working directory , FOPEN searches for it on the MATLAB search path . On UNIX systems , FILENAME may also start with a \"~/\" or a \"~username/\" , which FOPEN expands to the current user ' s home directory or the specified user ' s home directory , respectively . FID is a scalar MATLAB integer valued double , called a file identifier . You use FID as the first argument to other file input / output routines , such as FREAD and FCLOSE . If FOPEN cannot open the file , it returns - 1. FID = FOPEN ( FILENAME , PERMISSION ) opens the file FILENAME in the mode specified by PERMISSION: 'r' open file for reading 'w' open file for writing ; discard existing contents 'a' open or create file for writing ; append data to end of file ' r + ' open ( do not create ) file for reading and writing ' w + ' open or create file for reading and writing ; discard existing contents ' a + ' open or create file for reading and writing ; append data to end of file 'W' open file for writing without automatic flushing 'A' open file for appending without automatic flushing FILENAME can be a MATLABPATH relative partial pathname only if the file is opened for reading . You can open files in binary mode ( the default ) or in text mode . In binary mode , no characters get singled out for special treatment . In text mode on the PC , the carriage return character preceding a newline character is deleted on input and added before the newline character on output . To open a file in text mode , append 't' to the permission specifier , for example ' rt ' and ' w + t '. ( On Unix , text and binary mode are the same , so this has no effect . On PC systems this is critical .) If the file is opened in update mode ( '+' ), you must use an FSEEK or FREWIND between an input command like FREAD , FSCANF , FGETS , or FGETL and an output command like FWRITE or FPRINTF . You must also use an FSEEK or FREWIND between an output command and an input command . Two file identifiers are automatically available and need not be opened . They are FID = 1 ( standard output ) and FID = 2 ( standard error ). [ FID , MESSAGE ] = FOPEN ( FILENAME ,...) returns a system dependent error message if the open is not successful . [ FID , MESSAGE ] = FOPEN ( FILENAME , PERMISSION , MACHINEFORMAT ) opens the specified file with the specified PERMISSION and treats data read using FREAD or data written using FWRITE as having a format given by MACHINEFORMAT . MACHINEFORMAT is one of the following: ' native ' or 'n' - local machine format - the default ' ieee - le ' or 'l' - IEEE floating point with little - endian byte ordering ' ieee - be ' or 'b' - IEEE floating point with big - endian byte ordering ' ieee - le . l64 ' or 'a' - IEEE floating point with little - endian byte ordering and 64 bit long data type ' ieee - be . l64 ' or 's' - IEEE floating point with big - endian byte ordering and 64 bit long data type . [ FID , MESSAGE ] = FOPEN ( FILENAME , PERMISSION , MACHINEFORMAT , ENCODING ) opens the specified file using the specified PERMISSION and MACHINEFORMAT . ENCODING specifies the name of a character encoding scheme associated with the file . It must be the empty character vector (''), empty string ( \"\" ), or a name , or alias for an encoding scheme . Some examples are ' UTF - 8 ', ' latin1 ', ' US - ASCII ', and ' Shift_JIS '. For common names and aliases , see the Web site http: //www.iana.org/assignments/character-sets. If ENCODING is unspecified , or is the empty character vector (''), or is the empty string ( \"\" ), MATLAB ' s default encoding scheme is used . [ FILENAME , PERMISSION , MACHINEFORMAT , ENCODING ] = FOPEN ( FID ) returns the filename , permission , machine format , and character encoding values used by MATLAB when it opened the file associated with identifier FID . MATLAB does not determine these output values by reading information from the opened file . For any of these parameters that were not specified when the file was opened , MATLAB returns its default value . The ENCODING is a standard character encoding scheme name that may not be the same as the ENCODING argument used in the call to FOPEN that opened the file . An invalid FID returns empty character vector ('') for all output arguments . FIDS = FOPEN (' all ') returns a row vector containing the file identifiers for all the files currently opened by the user ( but not 1 or 2 ). The 'W' and 'A' permissions do not automatically perform a flush of the current output buffer after output operations . See also FCLOSE , FERROR , FGETL , FGETS , FPRINTF , FREAD , FSCANF , FSEEK , FTELL , FWRITE . fread - FREAD Read binary data from file. A = FREAD ( FID ) reads binary data from the specified file and writes it into matrix A . FID is an integer file identifier obtained from FOPEN . MATLAB reads the entire file and positions the file pointer at the end of the file ( see FEOF for details ). A = FREAD ( FID , SIZE ) reads the number of elements specified by SIZE . Valid entries for SIZE are : N read N elements into a column vector . inf read to the end of the file . [ M , N ] read elements to fill an M-by-N matrix , in column order . N can be inf , but M can 't. A = FREAD(FID,SIZE,PRECISION) reads the file according to the data format specified by PRECISION. The PRECISION input commonly contains a datatype specifier like ' int ' or ' float ', followed by an integer giving the size in bits. The SIZE argument is optional when using this syntax. Any of the following values, either the MATLAB version, or their C or Fortran equivalent, may be used for PRECISION. If not specified, the default PRECISION is ' uint8 '. MATLAB C or Fortran Description ' uchar ' ' unsigned char ' unsigned integer, 8 bits. ' schar ' ' signed char ' signed integer, 8 bits. ' int8 ' ' integer * 1 ' integer, 8 bits. ' int16 ' ' integer * 2 ' integer, 16 bits. ' int32 ' ' integer * 4 ' integer, 32 bits. ' int64 ' ' integer * 8 ' integer, 64 bits. ' uint8 ' ' integer * 1 ' unsigned integer, 8 bits. ' uint16 ' ' integer * 2 ' unsigned integer, 16 bits. ' uint32 ' ' integer * 4 ' unsigned integer, 32 bits. ' uint64 ' ' integer * 8 ' unsigned integer, 64 bits. ' single ' ' real * 4 ' floating point, 32 bits. ' float32 ' ' real * 4 ' floating point, 32 bits. ' double ' ' real * 8 ' floating point, 64 bits. ' float64 ' ' real * 8 ' floating point, 64 bits. The following platform dependent formats are also supported but they are not guaranteed to be the same size on all platforms. MATLAB C or Fortran Description ' char ' ' char * 1 ' character. ' short ' ' short ' integer, 16 bits. ' int ' ' int ' integer, 32 bits. ' long ' ' long ' integer, 32 or 64 bits. ' ushort ' ' unsigned short ' unsigned integer, 16 bits. ' uint ' ' unsigned int ' unsigned integer, 32 bits. ' ulong ' ' unsigned long ' unsigned integer, 32 bits or 64 bits. ' float ' ' float ' floating point, 32 bits. If the precision is ' char ' or ' char * 1 ', MATLAB reads characters using the encoding scheme associated with the file. See FOPEN for more information. The following formats map to an input stream of bits rather than bytes. ' bitN ' signed integer, N bits (1<=N<=64). ' ubitN ' unsigned integer, N bits (1<=N<=64). If the input stream is bytes and FREAD reaches the end of file (see FEOF) in the middle of reading the number of bytes required for an element, the partial result is ignored. However, if the input stream is bits, then the partial result is returned as the last value. If an error occurs before reaching the end of file, only full elements read up to that point are used. By default, numeric and character values are returned in class ' double ' arrays. To return these values stored in classes other than double, create your PRECISION argument by first specifying your source format, then following it by ' => ', and finally specifying your destination format. If the source and destination formats are the same then the following shorthand notation may be used: *source which means: source=>source For example, uint8=>uint8 read in unsigned 8-bit integers and save them in an unsigned 8-bit integer array *uint8 shorthand version of previous example bit4=>int8 read in signed 4-bit integers packed in bytes and save them in a signed 8-bit integer array (each 4-bit integer becomes one 8-bit integer) double=>real*4 read in doubles, convert and save as a 32-bit floating point array A = FREAD(FID,SIZE,PRECISION,SKIP) includes a SKIP argument that specifies the number of bytes to skip after each PRECISION value is read. If PRECISION specifies a bit source format, like ' bitN ' or ' ubitN ', the SKIP argument is interpreted as the number of bits to skip. The SIZE argument is optional when using this syntax. When SKIP is used, the PRECISION specifier may contain a positive integer repetition factor of the form ' N * ' which prepends the source format of the PRECISION argument, like ' 40 * uchar '. Note that 40*uchar for the PRECISION alone is equivalent to ' 40 * uchar => double ', not ' 40 * uchar => uchar '. With SKIP specified, FREAD reads in, at most, a repetition factor number of values (default of 1), does a skip of input specified by the SKIP argument, reads in another block of values and does a skip of input, etc. until SIZE number of values have been read. If a SKIP argument is not specified, the repetition factor is ignored. Repetition with skip is useful for extracting data in noncontiguous fields from fixed length records. For example, s = fread(fid,120,' 40 * uchar => uchar ',8); reads in 120 characters in blocks of 40 each separated by 8 characters. A = FREAD(FID,SIZE,PRECISION,SKIP,MACHINEFORMAT) treats the data read as having a format given by the MACHINEFORMAT. You can obtain the MACHINEFORMAT argument from the output of the FOPEN function. See FOPEN for possible values for MACHINEFORMAT. The SIZE and SKIP arguments are optional when using this syntax. [ A , COUNT ] = FREAD(...) Optional output argument COUNT returns the number of elements successfully read. Examples: The file alphabet.txt contains the 26 letters of the English alphabet, all capitalized. Open the file for read access with fopen, and read the first five elements into output c. Because a precision has not been specified, MATLAB uses the default precision of uchar, and the output is numeric: fid = fopen(' alphabet . txt ', ' r '); c = fread(fid, 5)' c = 65 66 67 68 69 fclose ( fid ); This time , specify that you want each element read as an unsigned 8-bit integer and output as a character . ( Using a precision of 'char=>char' or '*char' will produce the same result ): fid = fopen ( 'alphabet.txt' , 'r' ); c = fread ( fid , 5 , 'uint8=>char' ) ' c = ABCDE fclose ( fid ); See also FWRITE , FSEEK , FSCANF , FGETL , FGETS , LOAD , FOPEN , FEOF . fseek - FSEEK Set file position indicator. STATUS = FSEEK ( FID , OFFSET , ORIGIN ) repositions the file position indicator in the file associated with the given FID . FSEEK sets the position indicator to the byte with the specified OFFSET relative to ORIGIN . FID is an integer file identifier obtained from FOPEN . OFFSET values are interpreted as follows : >= 0 Move position indicator OFFSET bytes after ORIGIN . < 0 Move position indicator OFFSET bytes before ORIGIN . ORIGIN values are interpreted as follows : ' bof ' or - 1 Beginning of file ' cof ' or 0 Current position in file ' eof ' or 1 End of file STATUS is 0 on success and - 1 on failure . If an error occurs , use FERROR to get more information . Example : fseek ( fid , 0 , - 1 ) \" rewinds \" the file . See also FERROR , FOPEN , FPRINTF , FREAD , FREWIND , FSCANF , FSEEK , FTELL , FWRITE . ftell - FTELL Get file position indicator. POSITION = FTELL ( FID ) returns the location of the file position indicator in the specified file . Position is indicated in bytes from the beginning of the file . If - 1 is returned , it indicates that the query was unsuccessful . Use FERROR to determine the nature of the error . FID is an integer file identifier obtained from FOPEN . See also FERROR , FOPEN , FPRINTF , FREAD , FREWIND , FSCANF , FSEEK , FWRITE . fwrite - FWRITE Write binary data to file. COUNT = FWRITE ( FID , A ) writes the elements of matrix A to the specified file . The data are written in column order . COUNT is the number of elements successfully written . FID is an integer file identifier obtained from FOPEN , or 1 for standard output or 2 for standard error . COUNT = FWRITE ( FID , A , PRECISION ) writes the elements of matrix A to the specified file , translating MATLAB values to the specified precision . PRECISION controls the form and size of the result . See the list of allowed precisions under FREAD . If PRECISION is not specified , MATLAB uses the default , which is ' uint8 ' . If either ' bitN ' or ' ubitN ' is used for the PRECISION then any out of range value of A is written as a value with all bits turned on . If the precision is ' char ' or ' char*1 ' , MATLAB writes characters using the encoding scheme associated with the file . See FOPEN for more information . COUNT = FWRITE ( FID , A , PRECISION , SKIP ) includes an optional SKIP argument that specifies the number of bytes to skip before each PRECISION value is written . With the SKIP argument present , FWRITE skips and writes a value , skips and writes another value , etc . until all of A is written . If PRECISION is a bit format like ' bitN ' or ' ubitN ' SKIP is specified in bits . This is useful for inserting data into noncontiguous fields in fixed length records . COUNT = FWRITE ( FID , A , PRECISION , SKIP , MACHINEFORMAT ) treats the data written as having a format given by MACHINEFORMAT . You can obtain the MACHINEFORMAT argument from the output of the FOPEN function . See FOPEN for possible values for MACHINEFORMAT . For example , fid = fopen ( ' magic5.bin ' , ' wb ' ) fwrite ( fid , magic ( 5 ) , ' integer*4 ' ) creates a 100 - byte binary file , containing the 25 elements of the 5 - by - 5 magic square , stored as 4 - byte integers . See also FOPEN , FREAD , FPRINTF , SAVE , DIARY . ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . BINARYDOC , NDI . DATABASE . BINARYDOC / EQ , NDI . DATABASE . BINARYDOC / GT , NDI . DATABASE . BINARYDOC / LE , NDI . DATABASE . BINARYDOC / LT , NDI . DATABASE . BINARYDOC / NE Help for ndi . database . binarydoc / ge is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / ge doc handle . ge gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . BINARYDOC , NDI . DATABASE . BINARYDOC / EQ , NDI . DATABASE . BINARYDOC / GE , NDI . DATABASE . BINARYDOC / LE , NDI . DATABASE . BINARYDOC / LT , NDI . DATABASE . BINARYDOC / NE Help for ndi . database . binarydoc / gt is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / gt doc handle . gt isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDI . DATABASE . BINARYDOC , NDI . DATABASE . BINARYDOC / DELETE Help for ndi . database . binarydoc / isvalid is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / isvalid doc handle . isvalid le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . BINARYDOC , NDI . DATABASE . BINARYDOC / EQ , NDI . DATABASE . BINARYDOC / GE , NDI . DATABASE . BINARYDOC / GT , NDI . DATABASE . BINARYDOC / LT , NDI . DATABASE . BINARYDOC / NE Help for ndi . database . binarydoc / le is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / le doc handle . le listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , NDI . DATABASE . BINARYDOC , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . database . binarydoc / listener is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / listener doc handle . listener lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . BINARYDOC , NDI . DATABASE . BINARYDOC / EQ , NDI . DATABASE . BINARYDOC / GE , NDI . DATABASE . BINARYDOC / GT , NDI . DATABASE . BINARYDOC / LE , NDI . DATABASE . BINARYDOC / NE Help for ndi . database . binarydoc / lt is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / lt doc handle . lt ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . BINARYDOC , NDI . DATABASE . BINARYDOC / EQ , NDI . DATABASE . BINARYDOC / GE , NDI . DATABASE . BINARYDOC / GT , NDI . DATABASE . BINARYDOC / LE , NDI . DATABASE . BINARYDOC / LT Help for ndi . database . binarydoc / ne is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / ne doc handle . ne notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDI . DATABASE . BINARYDOC , NDI . DATABASE . BINARYDOC / ADDLISTENER , NDI . DATABASE . BINARYDOC / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndi . database . binarydoc / notify is inherited from superclass HANDLE Documentation for ndi . database . binarydoc / notify doc handle . notify","title":"Methods help"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/createGenBankControlledVocabulary.m/","text":"ndi.database.fun.createGenBankControlledVocabulary \u00b6 NDI_CREATEGENBANKCONTROLLEDVOCABULARY - create the controlled vocabulary dictionary for animals ndi . database . fun . createGenBankControlledVocabulary ( DIRNAME , ...) This function examines the name file 'names.dmp' and node file 'nodes.dmp' from the GenBank taxonomy database in the directory DIRNAME . It generates a new text file called 'GenBankControlledVocabulary.tsv' with the following structure : Header row : 'Scientific_Name<tab>GenBank_Common_Name<tab>Synonyms<tab><Other_Common_Name' and then 1 entry per organism . This function also takes name / value pairs that modify the behavior . Parameter ( default ) | Description --------------------------------------------------------------------------- root_node ( 'Bilateria' ) | Root scientific name to start with ; usually 'Bilateria' to | include most research organisms but not cell lines , | bacteria , viruses , etc ( everything not 'Bilateria' ). | Use 'Root' for everything . nodefile ( 'nodes.dmp' ) | File name of the node file within DIRNAME namefile ( 'names.dmp' ) | File name of the name file with DIRNAME outname (... | Output filen name of the file written to disk [ 'GenBankControlled' ... | 'Vocabulary.tsv' ] ) The taxonomy data is available at https :// ftp . ncbi . nlm . nih . gov / pub / taxonomy / taxdump . tar . gz . This function usually takes a couple of hours to run and shows 3 progress bars ( the first one is faster than the second ).","title":"ndi.database.fun.createGenBankControlledVocabulary"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/createGenBankControlledVocabulary.m/#ndidatabasefuncreategenbankcontrolledvocabulary","text":"NDI_CREATEGENBANKCONTROLLEDVOCABULARY - create the controlled vocabulary dictionary for animals ndi . database . fun . createGenBankControlledVocabulary ( DIRNAME , ...) This function examines the name file 'names.dmp' and node file 'nodes.dmp' from the GenBank taxonomy database in the directory DIRNAME . It generates a new text file called 'GenBankControlledVocabulary.tsv' with the following structure : Header row : 'Scientific_Name<tab>GenBank_Common_Name<tab>Synonyms<tab><Other_Common_Name' and then 1 entry per organism . This function also takes name / value pairs that modify the behavior . Parameter ( default ) | Description --------------------------------------------------------------------------- root_node ( 'Bilateria' ) | Root scientific name to start with ; usually 'Bilateria' to | include most research organisms but not cell lines , | bacteria , viruses , etc ( everything not 'Bilateria' ). | Use 'Root' for everything . nodefile ( 'nodes.dmp' ) | File name of the node file within DIRNAME namefile ( 'names.dmp' ) | File name of the name file with DIRNAME outname (... | Output filen name of the file written to disk [ 'GenBankControlled' ... | 'Vocabulary.tsv' ] ) The taxonomy data is available at https :// ftp . ncbi . nlm . nih . gov / pub / taxonomy / taxdump . tar . gz . This function usually takes a couple of hours to run and shows 3 progress bars ( the first one is faster than the second ).","title":"ndi.database.fun.createGenBankControlledVocabulary"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/createNIFbrainareas.m/","text":"ndi.database.fun.createNIFbrainareas \u00b6 NDI_CREATENIFBRAINAREAS - create a list of allowable brain areas from the NIF - Ontology BA = ndi . database . fun . createNIFbrainareas ( ... ) Creates a list of ' controlled ' brain area labels and the corresponding nodes in the NIF - Ontology . Traces all areas that make up a part of the UBERON node ' nervous system ' , excluding those in the first level of depth ( which are all relatively vague descriptors ) . This is then written to a file ' NIFBrainAreaControlledVocabulary.tsv ' with a string id that describes the NIF - Ontology node ID and a string lbl that describes the NIF - Ontology label : Header row : ' ID<tab>LABEL<tab>Synonyms<tab><Other_Common_Name ' and then 1 entry per anatomical node . This function also takes name / value pairs that modify the behavior . Parameter ( default ) | Description --------------------------------------------------------------------------- root ( ' UBERON: ' ... | Root node for establishing the controlled vocabulary . ' 0001016 ' ) | ( Default is ' nervous system ' in Uberon ontology . ) depth ( 1000 ) | How deep past \" nervous system \" to look depth_exclude ( 1 ) | The depths to exclude from the list exclude_ontologies ( {... | Ontologies to exclude ' CL ' } ) | outname ( ... | Output filen name of the file written to disk [ ' NIFBrainAreaContr ' ... | ' olledVocabulary.tsv ' ] ) |","title":"ndi.database.fun.createNIFbrainareas"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/createNIFbrainareas.m/#ndidatabasefuncreatenifbrainareas","text":"NDI_CREATENIFBRAINAREAS - create a list of allowable brain areas from the NIF - Ontology BA = ndi . database . fun . createNIFbrainareas ( ... ) Creates a list of ' controlled ' brain area labels and the corresponding nodes in the NIF - Ontology . Traces all areas that make up a part of the UBERON node ' nervous system ' , excluding those in the first level of depth ( which are all relatively vague descriptors ) . This is then written to a file ' NIFBrainAreaControlledVocabulary.tsv ' with a string id that describes the NIF - Ontology node ID and a string lbl that describes the NIF - Ontology label : Header row : ' ID<tab>LABEL<tab>Synonyms<tab><Other_Common_Name ' and then 1 entry per anatomical node . This function also takes name / value pairs that modify the behavior . Parameter ( default ) | Description --------------------------------------------------------------------------- root ( ' UBERON: ' ... | Root node for establishing the controlled vocabulary . ' 0001016 ' ) | ( Default is ' nervous system ' in Uberon ontology . ) depth ( 1000 ) | How deep past \" nervous system \" to look depth_exclude ( 1 ) | The depths to exclude from the list exclude_ontologies ( {... | Ontologies to exclude ' CL ' } ) | outname ( ... | Output filen name of the file written to disk [ ' NIFBrainAreaContr ' ... | ' olledVocabulary.tsv ' ] ) |","title":"ndi.database.fun.createNIFbrainareas"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/databasehierarchyinit.m/","text":"ndi.database.fun.databasehierarchyinit \u00b6 NDI_DATABASEHIERARCHYINIT - Initializes the list of databases to try ndi . database . fun . databasehierarchyinit Initializes the ndi_globals . databasehierarchy global variable . Use TYPE ndi . probe . fun . probetype2objectinit to see the structure","title":"ndi.database.fun.databasehierarchyinit"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/databasehierarchyinit.m/#ndidatabasefundatabasehierarchyinit","text":"NDI_DATABASEHIERARCHYINIT - Initializes the list of databases to try ndi . database . fun . databasehierarchyinit Initializes the ndi_globals . databasehierarchy global variable . Use TYPE ndi . probe . fun . probetype2objectinit to see the structure","title":"ndi.database.fun.databasehierarchyinit"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/docs2graph.m/","text":"ndi.database.fun.docs2graph \u00b6 NDI_DOCS2GRAPH - create a directed graph from a cell array of NDI_DOCUMENT objects [ G , NODES , MDIGRAPH ] = ndi . database . fun . docs2graph ( NDI_DOCUMENT_OBJ ) Given a cell array of ndi . document objects , this function creates a directed graph with the ' depends_on ' relationships . If an object A ' depends on ' another object B , there will be an edge from B to A . The adjacency matrix G , the node names ( document ids ) NODES , and the Matlab directed graph object MDIGRAPH are all returned . See also : DIGRAPH","title":"ndi.database.fun.docs2graph"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/docs2graph.m/#ndidatabasefundocs2graph","text":"NDI_DOCS2GRAPH - create a directed graph from a cell array of NDI_DOCUMENT objects [ G , NODES , MDIGRAPH ] = ndi . database . fun . docs2graph ( NDI_DOCUMENT_OBJ ) Given a cell array of ndi . document objects , this function creates a directed graph with the ' depends_on ' relationships . If an object A ' depends on ' another object B , there will be an edge from B to A . The adjacency matrix G , the node names ( document ids ) NODES , and the Matlab directed graph object MDIGRAPH are all returned . See also : DIGRAPH","title":"ndi.database.fun.docs2graph"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/findalldependencies.m/","text":"ndi.database.fun.findalldependencies \u00b6 NDI_FINDALLDEPENDENCIES - find documents that have dependencies on documents that do not exist [ D ] = ndi . database . fun . findalldependencies ( E , VISITED , DOC1 , DOC2 , ...) Searches the database of session E and returns all documents that have a dependency ( 'depends_on' ) field for which the 'value' field corresponds to the id of DOC1 or DOC2 , etc . If any DOCS do not need to be searched , provide them in VISITED . Otherwise , provide empty for VISITED . D is always a cell array of NDI_DOCUMENTS ( perhaps empty , {} ).","title":"ndi.database.fun.findalldependencies"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/findalldependencies.m/#ndidatabasefunfindalldependencies","text":"NDI_FINDALLDEPENDENCIES - find documents that have dependencies on documents that do not exist [ D ] = ndi . database . fun . findalldependencies ( E , VISITED , DOC1 , DOC2 , ...) Searches the database of session E and returns all documents that have a dependency ( 'depends_on' ) field for which the 'value' field corresponds to the id of DOC1 or DOC2 , etc . If any DOCS do not need to be searched , provide them in VISITED . Otherwise , provide empty for VISITED . D is always a cell array of NDI_DOCUMENTS ( perhaps empty , {} ).","title":"ndi.database.fun.findalldependencies"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/finddocs_missing_dependencies.m/","text":"ndi.database.fun.finddocs_missing_dependencies \u00b6 NDI_FINDDOCS_MISSING_DEPENDENCIES - find documents that have dependencies on documents that do not exist D = ndi . database . fun . finddocs_missing_dependencies ( E ) Searches the database of session E and returns all documents that have a dependency ( 'depends_on' ) field for which the 'value' field does not correspond to an existing document . The following form : D = ndi . database . fun . finddocs_missing_dependencies ( E , NAME1 , NAME2 , ... ) works similarly except that it only examines variables with depends_on fields with names NAME1 , NAME2 , etc .","title":"ndi.database.fun.finddocs_missing_dependencies"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/finddocs_missing_dependencies.m/#ndidatabasefunfinddocs_missing_dependencies","text":"NDI_FINDDOCS_MISSING_DEPENDENCIES - find documents that have dependencies on documents that do not exist D = ndi . database . fun . finddocs_missing_dependencies ( E ) Searches the database of session E and returns all documents that have a dependency ( 'depends_on' ) field for which the 'value' field does not correspond to an existing document . The following form : D = ndi . database . fun . finddocs_missing_dependencies ( E , NAME1 , NAME2 , ... ) works similarly except that it only examines variables with depends_on fields with names NAME1 , NAME2 , etc .","title":"ndi.database.fun.finddocs_missing_dependencies"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/ndi_document2ndi_object.m/","text":"ndi.database.fun.ndi_document2ndi_object \u00b6 NDI_DOCUMENT2NDI_OBJECT - create an NDI object from an NDI_DOCUMENT O = ndi.database.fun.ndi_document2ndi_object(NDI_DOCUMENT_OBJ, NDI_SESSION_OBJ) Create an NDI object O from an ndi.document object and a related ndi.session object. ndi.document can also be an ndi.document ID number that will be looked up in the session.","title":"ndi.database.fun.ndi_document2ndi_object"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/ndi_document2ndi_object.m/#ndidatabasefunndi_document2ndi_object","text":"NDI_DOCUMENT2NDI_OBJECT - create an NDI object from an NDI_DOCUMENT O = ndi.database.fun.ndi_document2ndi_object(NDI_DOCUMENT_OBJ, NDI_SESSION_OBJ) Create an NDI object O from an ndi.document object and a related ndi.session object. ndi.document can also be an ndi.document ID number that will be looked up in the session.","title":"ndi.database.fun.ndi_document2ndi_object"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/opendatabase.m/","text":"ndi.database.fun.opendatabase \u00b6 NDI_OPENDATABASE - open the database associated with an session DB = ndi . database . fun . opendatabase ( DATABASE_PATH , SESSION_UNIQUE_REFERENCE ) Searches the file path DATABASE_PATH for any known databases in NDI_DATABASEHIERACHY . If it finds a datbase of subtype ndi . database , then it is opened and returned in DB . If it finds no databases , then it tries to create a new database following the order in the hierarchy . Otherwise , DB is empty .","title":"ndi.database.fun.opendatabase"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/opendatabase.m/#ndidatabasefunopendatabase","text":"NDI_OPENDATABASE - open the database associated with an session DB = ndi . database . fun . opendatabase ( DATABASE_PATH , SESSION_UNIQUE_REFERENCE ) Searches the file path DATABASE_PATH for any known databases in NDI_DATABASEHIERACHY . If it finds a datbase of subtype ndi . database , then it is opened and returned in DB . If it finds no databases , then it tries to create a new database following the order in the hierarchy . Otherwise , DB is empty .","title":"ndi.database.fun.opendatabase"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/plotinteractivedocgraph.m/","text":"ndi.database.fun.plotinteractivedocgraph \u00b6 ndi . database . fun . plotinteractivedocgraph ( DOCS , G , MDIGRAPH , NODES , LAYOUT , INTERACTIVE ) Given a cell array of NDI_DOCUMENTs DOCS , a connectivity matrix G , a DIGRAPH object MDIGRAPH , a cell array of node names NODES , and a type of DIGRAPH / PLOT layout LAYOUT , this plots a graph of the graph of the NDI_DOCUMENTS . Usually , G , MDIGRAPH , and NODES are the output of ndi . database . fun . docs2graph If INTERACTIVE is 1 , then the plot is made interactive , in that the closest node to any clicked point will be displayed on the command line , and a global variable 'clicked_node' will be set to the ndi . document of the closest node to the clicked point . The user should click nearby but not directly on the node to reveal it . If INTERACTIVE is 0 , then some data about each document node is shown as a data tip when the user hovers over the node . Example values of LAYOUT include 'force' , 'layered' , 'auto' , and others . See HELP DIGRAPH / PLOT for all options . See also : DIGRAPH / PLOT , ndi . database . fun . docs2graph Example : % Given session E , plot a graph of all documents . docs = E . database_search ({ 'document_class.class_name' , '(.*)' }); [ G , nodes , mdigraph ] = ndi . database . fun . docs2graph ( docs ); ndi . database . fun . plotinteractivedocgraph ( docs , G , mdigraph , nodes , 'layered' );","title":"ndi.database.fun.plotinteractivedocgraph"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/plotinteractivedocgraph.m/#ndidatabasefunplotinteractivedocgraph","text":"ndi . database . fun . plotinteractivedocgraph ( DOCS , G , MDIGRAPH , NODES , LAYOUT , INTERACTIVE ) Given a cell array of NDI_DOCUMENTs DOCS , a connectivity matrix G , a DIGRAPH object MDIGRAPH , a cell array of node names NODES , and a type of DIGRAPH / PLOT layout LAYOUT , this plots a graph of the graph of the NDI_DOCUMENTS . Usually , G , MDIGRAPH , and NODES are the output of ndi . database . fun . docs2graph If INTERACTIVE is 1 , then the plot is made interactive , in that the closest node to any clicked point will be displayed on the command line , and a global variable 'clicked_node' will be set to the ndi . document of the closest node to the clicked point . The user should click nearby but not directly on the node to reveal it . If INTERACTIVE is 0 , then some data about each document node is shown as a data tip when the user hovers over the node . Example values of LAYOUT include 'force' , 'layered' , 'auto' , and others . See HELP DIGRAPH / PLOT for all options . See also : DIGRAPH / PLOT , ndi . database . fun . docs2graph Example : % Given session E , plot a graph of all documents . docs = E . database_search ({ 'document_class.class_name' , '(.*)' }); [ G , nodes , mdigraph ] = ndi . database . fun . docs2graph ( docs ); ndi . database . fun . plotinteractivedocgraph ( docs , G , mdigraph , nodes , 'layered' );","title":"ndi.database.fun.plotinteractivedocgraph"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/projectvardef.m/","text":"ndi.database.fun.projectvardef \u00b6 NDI_PROJECTVARDEF - shorthand function for building an 'ndi_document_projectvar' document PVD = ndi . database . fun . projectvardef ( NAME , TYPE , DESCRIPTION , DATA ) Makes a cell array definition of the fields for an 'ndi_document_projectvar' document . Creates a set of name / value pairs in a 1 x4 cell list : Name : | Value ------------------------------------------------------ 'ndi_document.name' | NAME 'ndi_document.type' | TYPE 'projectvar.description' | DESCRIPTION 'projectvar.data' | DATA","title":"ndi.database.fun.projectvardef"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/projectvardef.m/#ndidatabasefunprojectvardef","text":"NDI_PROJECTVARDEF - shorthand function for building an 'ndi_document_projectvar' document PVD = ndi . database . fun . projectvardef ( NAME , TYPE , DESCRIPTION , DATA ) Makes a cell array definition of the fields for an 'ndi_document_projectvar' document . Creates a set of name / value pairs in a 1 x4 cell list : Name : | Value ------------------------------------------------------ 'ndi_document.name' | NAME 'ndi_document.type' | TYPE 'projectvar.description' | DESCRIPTION 'projectvar.data' | DATA","title":"ndi.database.fun.projectvardef"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/readGenBankNames.m/","text":"ndi.database.fun.readGenBankNames \u00b6 NDI_READGENBANKNAMES - read the GenBank names from the ' names.dmp ' file GENBANK_NAMES = ndi . database . fun . readGenBankNames ( FILENAME ) Given a ' names.dmp ' file from a GenBank taxonomy data dump , this function produces a Matlab structure with the following fields : fieldname | Description ----------------------------------------------------------------- genbank_commonname | The genbank common name of the organism | ( cell array of strings , 1 entry per node ) | genbank_commonname { i } is the entry for node i . scientific_name | The genbank scientific name | ( cell array of strings , 1 entry per node ) | scientific_name { i } is the entry for node i . synonym | A cell array of strings with scientific name synonyms | ( cell array of strings , potentially many entries per node ) | synonym { i }{ j } is the jth synonym for node i other_commonname | A cell array of strings with the other common names | ( cell array of strings , potentially many entries per node ) | other_commonname { i }{ j } is the jth other common name for node i","title":"ndi.database.fun.readGenBankNames"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/readGenBankNames.m/#ndidatabasefunreadgenbanknames","text":"NDI_READGENBANKNAMES - read the GenBank names from the ' names.dmp ' file GENBANK_NAMES = ndi . database . fun . readGenBankNames ( FILENAME ) Given a ' names.dmp ' file from a GenBank taxonomy data dump , this function produces a Matlab structure with the following fields : fieldname | Description ----------------------------------------------------------------- genbank_commonname | The genbank common name of the organism | ( cell array of strings , 1 entry per node ) | genbank_commonname { i } is the entry for node i . scientific_name | The genbank scientific name | ( cell array of strings , 1 entry per node ) | scientific_name { i } is the entry for node i . synonym | A cell array of strings with scientific name synonyms | ( cell array of strings , potentially many entries per node ) | synonym { i }{ j } is the jth synonym for node i other_commonname | A cell array of strings with the other common names | ( cell array of strings , potentially many entries per node ) | other_commonname { i }{ j } is the jth other common name for node i","title":"ndi.database.fun.readGenBankNames"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/readGenBankNodes.m/","text":"ndi.database.fun.readGenBankNodes \u00b6 NDI_READGENBANKNODES - read the node tree from GenBank data dump G = ndi.database.fun.readGenBankNodes(FILENAME) Given a 'nodes.dmp' file from a GenBank taxonomy data dump, this function produces a sparse connectivity matrix G such that G(i,j) = 1 iff node number i is a parent of node j.","title":"ndi.database.fun.readGenBankNodes"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bfun/readGenBankNodes.m/#ndidatabasefunreadgenbanknodes","text":"NDI_READGENBANKNODES - read the node tree from GenBank data dump G = ndi.database.fun.readGenBankNodes(FILENAME) Given a 'nodes.dmp' file from a GenBank taxonomy data dump, this function produces a sparse connectivity matrix G such that G(i,j) = 1 iff node number i is a parent of node j.","title":"ndi.database.fun.readGenBankNodes"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bbinarydoc/matfid.m/","text":"CLASS ndi.database.implementations.binarydoc.matfid \u00b6 ndi.database.implementations.binarydoc.matfid - create a new ndi.database.implementations.binarydoc.matfid object NDI_BINARYDOC_MATFID_OBJ = ndi.database.implementations.binarydoc.matfid(PARAM1,VALUE1, ...) Follows same arguments as vlt.file.fileobj See also: vlt.file.fileobj, vlt.file.fileobj/FILEOBJ Superclasses \u00b6 ndi.database.binarydoc , handle , vlt.file.fileobj Properties \u00b6 Property Description key The key that is created when the binary doc is locked doc_unique_id The document unique id fullpathfilename fid permission machineformat Methods \u00b6 Method Description addlistener ADDLISTENER Add listener for event. delete close an ndi.database.binarydoc and delete its handle eq == (EQ) Test handle equality. fclose close an ndi.database.implementations.binarydoc.matfid object feof test to see if a FILEOBJ is at END-OF-FILE ferror return the last file error message for FILEOBJ fgetl get a line from a FILEOBJ fgets get a line from a FILEOBJ fileparts return filename parts for the file associated with FILEOBJ findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. fopen open a FILEOBJ fprintf print data to a FILEOBJ_OBJ fread read data from a FILEOBJ frewind 'rewind' a FILEOBJ back to the beginning fscanf scan data from a FILEOBJ_OBJ fseek seek to a location within a FILEOBJ ftell find current location within a FILEOBJ fwrite write data to a FILEOBJ ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. matfid create a new ndi.database.implementations.binarydoc.matfid object ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setproperties set the properties of a FILEOBJ Methods help \u00b6 addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . database . implementations . binarydoc . matfid / addlistener is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / addlistener doc handle . addlistener delete - close an ndi.database.binarydoc and delete its handle DELETE ( NDI_BINARYDOC_OBJ ) Closes an ndi . database . binarydoc ( if necessary ) and then deletes the handle . Help for ndi . database . implementations . binarydoc . matfid / delete is inherited from superclass NDI . DATABASE . BINARYDOC eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GT , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LT , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / NE Help for ndi . database . implementations . binarydoc . matfid / eq is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / eq doc handle . eq fclose - close an ndi.database.implementations.binarydoc.matfid object Closes the file, but also clears the fullpathfilename and other fields so the user cannot re-use the object without checking out another binary document from the database. feof - test to see if a FILEOBJ is at END-OF-FILE B = FEOF ( FILEOBJ_OBJ ) Returns 1 if FILEOBJ_OBJ is at its end of file , 0 otherwise . See also : FSEEK , FILEOBJ / FSEEK , FTELL Help for ndi . database . implementations . binarydoc . matfid / feof is inherited from superclass VLT . FILE . FILEOBJ ferror - return the last file error message for FILEOBJ [ MESSAGE , ERRORNUM ] = FERROR ( FILEOBJ_OBJ , COMMAND ) Return the most recent file error MESSAGE and ERRORNUM for the file associated with FERROR . Help for ndi . database . implementations . binarydoc . matfid / ferror is inherited from superclass VLT . FILE . FILEOBJ fgetl - get a line from a FILEOBJ TLINE = FGETL ( FILEOBJ_OBJ ) Returns the next line ( not including NEWLINE character ) just like FGETL . See also : FGETL Help for ndi . database . implementations . binarydoc . matfid / fgetl is inherited from superclass VLT . FILE . FILEOBJ fgets - get a line from a FILEOBJ TLINE = FGETS ( FILEOBJ_OBJ , [ NCHAR ] ) Returns the next line ( including NEWLINE character ) just like FGETS . See also : FGETS Help for ndi . database . implementations . binarydoc . matfid / fgets is inherited from superclass VLT . FILE . FILEOBJ fileparts - return filename parts for the file associated with FILEOBJ [ PATHSTR , NAME , EXT ] = FILEPARTS ( FILEOBJ_OBJ ) Returns FILEPARTS of the ' fullpathfilename ' field of FILEOBJ . Help for ndi . database . implementations . binarydoc . matfid / fileparts is inherited from superclass VLT . FILE . FILEOBJ findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID Help for ndi . database . implementations . binarydoc . matfid / findobj is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / findobj doc handle . findobj findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for ndi . database . implementations . binarydoc . matfid / findprop is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / findprop doc handle . findprop fopen - open a FILEOBJ FILEOBJ_OBJ = FOPEN ( FILEOBJ_OBJ , [ , PERMISSION ] , [ MACHINEFORMAT ] , [ FILENAME ] ) Opens the file associated with a FILEOBJ_OBJ object . If FILENAME , PERMISSION , and MACHINEFORMAT are given , then those variables of FILEOBJ_OBJ are updated . If they are not given , then the existing values in the FILEOBJ_OBJ are used . Note that the order of the input arguments differs from FOPEN , so that the object can be called in place of an FID ( e . g ., fid = fopen ( myvariable ), where myvariable is either a file name or a FILEOBJ object ). If the operation is successful , then FILEOBJ_OBJ . fid is greater than 3. Otherwise , FILEOBJ_OBJ . fid is - 1. See also : FOPEN , FILEOBJ / FCLOSE , FCLOSE Help for ndi . database . implementations . binarydoc . matfid / fopen is inherited from superclass VLT . FILE . FILEOBJ fprintf - print data to a FILEOBJ_OBJ [ COUNT ] = FPRINTF ( FID , FORMAT , A , ...) Call FPRINTF ( see FPRINTF for inputs ) for the file associated with FILEOBJ_OBJ . Help for ndi . database . implementations . binarydoc . matfid / fprintf is inherited from superclass VLT . FILE . FILEOBJ fread - read data from a FILEOBJ COUNT = FWRITE ( FILEOBJ_OBJ , COUNT , [ PRECISION ] , [ SKIP ] , [ MACHINEFORMAT ] ) Attempts to read COUNT elements with resolution PRECISION . If PRECISION is not provided , then 'char' is assumed . If SKIP is provided , then SKIP is in number of bytes , unless PRECISION is in bits , in which case SKIP is in bits . MACHINEFORMAT is the machine format to use . See FREAD for a full description of these input arguments . See also : FREAD Help for ndi . database . implementations . binarydoc . matfid / fread is inherited from superclass VLT . FILE . FILEOBJ frewind - 'rewind' a FILEOBJ back to the beginning FREWIND ( FILEOBJ_OBJ ) Seeks to the beginning of the file . See also : FSEEK , FILEOBJ / FSEEK , FTELL Help for ndi . database . implementations . binarydoc . matfid / frewind is inherited from superclass VLT . FILE . FILEOBJ fscanf - scan data from a FILEOBJ_OBJ [ A,COUNT ] = FSCANF ( FID , FORMAT , [ SIZEA ] ) Call FSCANF ( see FSCANF for inputs ) for the file associated with FILEOBJ_OBJ . Help for ndi . database . implementations . binarydoc . matfid / fscanf is inherited from superclass VLT . FILE . FILEOBJ fseek - seek to a location within a FILEOBJ B = FSEEK ( FILEOBJ_OBJ , OFFSET , REFERENCE ) Seeks the file to the location OFFSET ( in bytes ) relative to REFERENCE . REFERENCE can be ' bof ' or - 1 Beginning of file ' cof ' or 0 Current position in file ' eof ' or 1 End of file B is 0 on success and - 1 on failure . See also : FSEEK , FILEOBJ / FTELL Help for ndi . database . implementations . binarydoc . matfid / fseek is inherited from superclass VLT . FILE . FILEOBJ ftell - find current location within a FILEOBJ LOCATION = FTELL ( FILEOBJ_OBJ ) Returns the current location ( in bytes ) relative to the beginning of the file . If the query fails , - 1 is returned . See also : FSEEK , FILEOBJ / FSEEK , FTELL Help for ndi . database . implementations . binarydoc . matfid / ftell is inherited from superclass VLT . FILE . FILEOBJ fwrite - write data to a FILEOBJ COUNT = FWRITE ( FILEOBJ_OBJ , DATA , [ PRECISION ] , [ SKIP ] , [ MACHINEFORMAT ] ) Attempts to write DATA elements with resolution PRECISION . If PRECISION is not provided , then 'char' is assumed . If SKIP is provided , then SKIP is in number of bytes , unless PRECISION is in bits , in which case SKIP is in bits . MACHINEFORMAT is the machine format to use . See FWRITE for a full description of these input arguments . See also : FWRITE Help for ndi . database . implementations . binarydoc . matfid / fwrite is inherited from superclass VLT . FILE . FILEOBJ ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / EQ , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GT , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LT , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / NE Help for ndi . database . implementations . binarydoc . matfid / ge is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / ge doc handle . ge gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / EQ , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LT , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / NE Help for ndi . database . implementations . binarydoc . matfid / gt is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / gt doc handle . gt isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / DELETE Help for ndi . database . implementations . binarydoc . matfid / isvalid is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / isvalid doc handle . isvalid le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / EQ , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GT , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LT , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / NE Help for ndi . database . implementations . binarydoc . matfid / le is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / le doc handle . le listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . database . implementations . binarydoc . matfid / listener is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / listener doc handle . listener lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / EQ , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GT , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / NE Help for ndi . database . implementations . binarydoc . matfid / lt is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / lt doc handle . lt matfid - create a new ndi.database.implementations.binarydoc.matfid object NDI_BINARYDOC_MATFID_OBJ = ndi.database.implementations.binarydoc.matfid(PARAM1,VALUE1, ...) Follows same arguments as vlt.file.fileobj See also: vlt.file.fileobj, vlt.file.fileobj/FILEOBJ ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / EQ , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GT , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LT Help for ndi . database . implementations . binarydoc . matfid / ne is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / ne doc handle . ne notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / ADDLISTENER , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndi . database . implementations . binarydoc . matfid / notify is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / notify doc handle . notify setproperties - set the properties of a FILEOBJ FILEOBJ_OBJ = SETPROPERTIES ( FILEOBJ_OBJ , 'PROPERTY1' , VALUE1 , ...) Sets the properties of a FILEOBJ with name / value pairs . Properties are : fullpathfilename ; % the full path file name of the file fid ; % The Matlab file identifier permission ; % The file permission machineformat % big-endian ( 'b' ), little-endian ( 'l' ), or native ( 'n' ) Help for ndi . database . implementations . binarydoc . matfid / setproperties is inherited from superclass VLT . FILE . FILEOBJ","title":"ndi.database.implementations.binarydoc.matfid"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bbinarydoc/matfid.m/#class-ndidatabaseimplementationsbinarydocmatfid","text":"ndi.database.implementations.binarydoc.matfid - create a new ndi.database.implementations.binarydoc.matfid object NDI_BINARYDOC_MATFID_OBJ = ndi.database.implementations.binarydoc.matfid(PARAM1,VALUE1, ...) Follows same arguments as vlt.file.fileobj See also: vlt.file.fileobj, vlt.file.fileobj/FILEOBJ","title":"CLASS ndi.database.implementations.binarydoc.matfid"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bbinarydoc/matfid.m/#superclasses","text":"ndi.database.binarydoc , handle , vlt.file.fileobj","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bbinarydoc/matfid.m/#properties","text":"Property Description key The key that is created when the binary doc is locked doc_unique_id The document unique id fullpathfilename fid permission machineformat","title":"Properties"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bbinarydoc/matfid.m/#methods","text":"Method Description addlistener ADDLISTENER Add listener for event. delete close an ndi.database.binarydoc and delete its handle eq == (EQ) Test handle equality. fclose close an ndi.database.implementations.binarydoc.matfid object feof test to see if a FILEOBJ is at END-OF-FILE ferror return the last file error message for FILEOBJ fgetl get a line from a FILEOBJ fgets get a line from a FILEOBJ fileparts return filename parts for the file associated with FILEOBJ findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. fopen open a FILEOBJ fprintf print data to a FILEOBJ_OBJ fread read data from a FILEOBJ frewind 'rewind' a FILEOBJ back to the beginning fscanf scan data from a FILEOBJ_OBJ fseek seek to a location within a FILEOBJ ftell find current location within a FILEOBJ fwrite write data to a FILEOBJ ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. matfid create a new ndi.database.implementations.binarydoc.matfid object ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setproperties set the properties of a FILEOBJ","title":"Methods"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bbinarydoc/matfid.m/#methods-help","text":"addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . database . implementations . binarydoc . matfid / addlistener is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / addlistener doc handle . addlistener delete - close an ndi.database.binarydoc and delete its handle DELETE ( NDI_BINARYDOC_OBJ ) Closes an ndi . database . binarydoc ( if necessary ) and then deletes the handle . Help for ndi . database . implementations . binarydoc . matfid / delete is inherited from superclass NDI . DATABASE . BINARYDOC eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GT , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LT , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / NE Help for ndi . database . implementations . binarydoc . matfid / eq is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / eq doc handle . eq fclose - close an ndi.database.implementations.binarydoc.matfid object Closes the file, but also clears the fullpathfilename and other fields so the user cannot re-use the object without checking out another binary document from the database. feof - test to see if a FILEOBJ is at END-OF-FILE B = FEOF ( FILEOBJ_OBJ ) Returns 1 if FILEOBJ_OBJ is at its end of file , 0 otherwise . See also : FSEEK , FILEOBJ / FSEEK , FTELL Help for ndi . database . implementations . binarydoc . matfid / feof is inherited from superclass VLT . FILE . FILEOBJ ferror - return the last file error message for FILEOBJ [ MESSAGE , ERRORNUM ] = FERROR ( FILEOBJ_OBJ , COMMAND ) Return the most recent file error MESSAGE and ERRORNUM for the file associated with FERROR . Help for ndi . database . implementations . binarydoc . matfid / ferror is inherited from superclass VLT . FILE . FILEOBJ fgetl - get a line from a FILEOBJ TLINE = FGETL ( FILEOBJ_OBJ ) Returns the next line ( not including NEWLINE character ) just like FGETL . See also : FGETL Help for ndi . database . implementations . binarydoc . matfid / fgetl is inherited from superclass VLT . FILE . FILEOBJ fgets - get a line from a FILEOBJ TLINE = FGETS ( FILEOBJ_OBJ , [ NCHAR ] ) Returns the next line ( including NEWLINE character ) just like FGETS . See also : FGETS Help for ndi . database . implementations . binarydoc . matfid / fgets is inherited from superclass VLT . FILE . FILEOBJ fileparts - return filename parts for the file associated with FILEOBJ [ PATHSTR , NAME , EXT ] = FILEPARTS ( FILEOBJ_OBJ ) Returns FILEPARTS of the ' fullpathfilename ' field of FILEOBJ . Help for ndi . database . implementations . binarydoc . matfid / fileparts is inherited from superclass VLT . FILE . FILEOBJ findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID Help for ndi . database . implementations . binarydoc . matfid / findobj is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / findobj doc handle . findobj findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for ndi . database . implementations . binarydoc . matfid / findprop is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / findprop doc handle . findprop fopen - open a FILEOBJ FILEOBJ_OBJ = FOPEN ( FILEOBJ_OBJ , [ , PERMISSION ] , [ MACHINEFORMAT ] , [ FILENAME ] ) Opens the file associated with a FILEOBJ_OBJ object . If FILENAME , PERMISSION , and MACHINEFORMAT are given , then those variables of FILEOBJ_OBJ are updated . If they are not given , then the existing values in the FILEOBJ_OBJ are used . Note that the order of the input arguments differs from FOPEN , so that the object can be called in place of an FID ( e . g ., fid = fopen ( myvariable ), where myvariable is either a file name or a FILEOBJ object ). If the operation is successful , then FILEOBJ_OBJ . fid is greater than 3. Otherwise , FILEOBJ_OBJ . fid is - 1. See also : FOPEN , FILEOBJ / FCLOSE , FCLOSE Help for ndi . database . implementations . binarydoc . matfid / fopen is inherited from superclass VLT . FILE . FILEOBJ fprintf - print data to a FILEOBJ_OBJ [ COUNT ] = FPRINTF ( FID , FORMAT , A , ...) Call FPRINTF ( see FPRINTF for inputs ) for the file associated with FILEOBJ_OBJ . Help for ndi . database . implementations . binarydoc . matfid / fprintf is inherited from superclass VLT . FILE . FILEOBJ fread - read data from a FILEOBJ COUNT = FWRITE ( FILEOBJ_OBJ , COUNT , [ PRECISION ] , [ SKIP ] , [ MACHINEFORMAT ] ) Attempts to read COUNT elements with resolution PRECISION . If PRECISION is not provided , then 'char' is assumed . If SKIP is provided , then SKIP is in number of bytes , unless PRECISION is in bits , in which case SKIP is in bits . MACHINEFORMAT is the machine format to use . See FREAD for a full description of these input arguments . See also : FREAD Help for ndi . database . implementations . binarydoc . matfid / fread is inherited from superclass VLT . FILE . FILEOBJ frewind - 'rewind' a FILEOBJ back to the beginning FREWIND ( FILEOBJ_OBJ ) Seeks to the beginning of the file . See also : FSEEK , FILEOBJ / FSEEK , FTELL Help for ndi . database . implementations . binarydoc . matfid / frewind is inherited from superclass VLT . FILE . FILEOBJ fscanf - scan data from a FILEOBJ_OBJ [ A,COUNT ] = FSCANF ( FID , FORMAT , [ SIZEA ] ) Call FSCANF ( see FSCANF for inputs ) for the file associated with FILEOBJ_OBJ . Help for ndi . database . implementations . binarydoc . matfid / fscanf is inherited from superclass VLT . FILE . FILEOBJ fseek - seek to a location within a FILEOBJ B = FSEEK ( FILEOBJ_OBJ , OFFSET , REFERENCE ) Seeks the file to the location OFFSET ( in bytes ) relative to REFERENCE . REFERENCE can be ' bof ' or - 1 Beginning of file ' cof ' or 0 Current position in file ' eof ' or 1 End of file B is 0 on success and - 1 on failure . See also : FSEEK , FILEOBJ / FTELL Help for ndi . database . implementations . binarydoc . matfid / fseek is inherited from superclass VLT . FILE . FILEOBJ ftell - find current location within a FILEOBJ LOCATION = FTELL ( FILEOBJ_OBJ ) Returns the current location ( in bytes ) relative to the beginning of the file . If the query fails , - 1 is returned . See also : FSEEK , FILEOBJ / FSEEK , FTELL Help for ndi . database . implementations . binarydoc . matfid / ftell is inherited from superclass VLT . FILE . FILEOBJ fwrite - write data to a FILEOBJ COUNT = FWRITE ( FILEOBJ_OBJ , DATA , [ PRECISION ] , [ SKIP ] , [ MACHINEFORMAT ] ) Attempts to write DATA elements with resolution PRECISION . If PRECISION is not provided , then 'char' is assumed . If SKIP is provided , then SKIP is in number of bytes , unless PRECISION is in bits , in which case SKIP is in bits . MACHINEFORMAT is the machine format to use . See FWRITE for a full description of these input arguments . See also : FWRITE Help for ndi . database . implementations . binarydoc . matfid / fwrite is inherited from superclass VLT . FILE . FILEOBJ ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / EQ , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GT , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LT , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / NE Help for ndi . database . implementations . binarydoc . matfid / ge is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / ge doc handle . ge gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / EQ , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LT , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / NE Help for ndi . database . implementations . binarydoc . matfid / gt is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / gt doc handle . gt isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / DELETE Help for ndi . database . implementations . binarydoc . matfid / isvalid is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / isvalid doc handle . isvalid le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / EQ , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GT , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LT , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / NE Help for ndi . database . implementations . binarydoc . matfid / le is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / le doc handle . le listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . database . implementations . binarydoc . matfid / listener is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / listener doc handle . listener lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / EQ , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GT , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / NE Help for ndi . database . implementations . binarydoc . matfid / lt is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / lt doc handle . lt matfid - create a new ndi.database.implementations.binarydoc.matfid object NDI_BINARYDOC_MATFID_OBJ = ndi.database.implementations.binarydoc.matfid(PARAM1,VALUE1, ...) Follows same arguments as vlt.file.fileobj See also: vlt.file.fileobj, vlt.file.fileobj/FILEOBJ ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / EQ , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / GT , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LE , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LT Help for ndi . database . implementations . binarydoc . matfid / ne is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / ne doc handle . ne notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / ADDLISTENER , NDI . DATABASE . IMPLEMENTATIONS . BINARYDOC . MATFID / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndi . database . implementations . binarydoc . matfid / notify is inherited from superclass HANDLE Documentation for ndi . database . implementations . binarydoc . matfid / notify doc handle . notify setproperties - set the properties of a FILEOBJ FILEOBJ_OBJ = SETPROPERTIES ( FILEOBJ_OBJ , 'PROPERTY1' , VALUE1 , ...) Sets the properties of a FILEOBJ with name / value pairs . Properties are : fullpathfilename ; % the full path file name of the file fid ; % The Matlab file identifier permission ; % The file permission machineformat % big-endian ( 'b' ), little-endian ( 'l' ), or native ( 'n' ) Help for ndi . database . implementations . binarydoc . matfid / setproperties is inherited from superclass VLT . FILE . FILEOBJ","title":"Methods help"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb.m/","text":"CLASS ndi.database.implementations.database.matlabdumbjsondb \u00b6 ndi.database.implementations.database.matlabdumbjsondb make a new ndi.database.implementations.database.matlabdumbjsondb object NDI_MATLABDUMBJSONDB_OBJ = ndi.database.implementation.database.matlabdumbjsondb(PATH, SESSION_UNIQUE_REFERENCE, COMMAND, ...) Creates a new ndi.database.implementations.database.matlabdumbjsondb object. COMMAND can either be 'Load' or 'New'. The second argument should be the full pathname of the location where the files should be stored on disk. See also: vlt.file.dumbjsondb, vlt.file.dumbjsondb/DUMBJSONDB Superclasses \u00b6 ndi.database Properties \u00b6 Property Description db vlt.file.dumbjsondb object path session_unique_reference Methods \u00b6 Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc matlabdumbjsondb ndi.database.implementations.database.matlabdumbjsondb make a new ndi.database.implementations.database.matlabdumbjsondb object newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database Methods help \u00b6 add - add an ndi.document to the database at a given path NDI_DATABASE_OBJ = ADD ( NDI_DATABASE_OBJ , NDI_DOCUMENT_OBJ , DBPATH , ... ) Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ . This function also accepts name / value pairs that modify its behavior : Parameter ( default ) | Description ------------------------------------------------------------------------- ' Update ' ( 1 ) | If document exists , update it . If 0 , an error is | generated if a document with the same ID exists See also : vlt . data . namevaluepair Help for ndi . database . implementations . database . matlabdumbjsondb / add is inherited from superclass NDI . DATABASE alldocids - return all document unique reference numbers for the database DOCIDS = ALLDOCIDS ( NDI_MATLABDUMBJSONDB_OBJ ) Return all document unique reference strings as a cell array of strings . If there are no documents , empty is returned . clear - remove/delete all records from an ndi.database CLEAR ( NDI_DATABASE_OBJ , [ AREYOUSURE ] ) Removes all documents from the vlt . file . dumbjsondb object . Use with care . If AREYOUSURE is 'yes' then the function will proceed . Otherwise , it will not . See also : ndi . database . implementations . database . matlabdumbjsondb / REMOVE Help for ndi . database . implementations . database . matlabdumbjsondb / clear is inherited from superclass NDI . DATABASE closebinarydoc - close and unlock an ndi.database.binarydoc [ NDI_BINARYDOC_OBJ ] = CLOSEBINARYDOC ( NDI_DATABASE_OBJ , NDI_BINARYDOC_OBJ ) Close and lock an NDI_BINARYDOC_OBJ . The NDI_BINARYDOC_OBJ must be unlocked in the database , which is why it is necessary to call this function through the database . Help for ndi . database . implementations . database . matlabdumbjsondb / closebinarydoc is inherited from superclass NDI . DATABASE matlabdumbjsondb - ndi.database.implementations.database.matlabdumbjsondb make a new ndi.database.implementations.database.matlabdumbjsondb object NDI_MATLABDUMBJSONDB_OBJ = ndi.database.implementation.database.matlabdumbjsondb(PATH, SESSION_UNIQUE_REFERENCE, COMMAND, ...) Creates a new ndi.database.implementations.database.matlabdumbjsondb object. COMMAND can either be 'Load' or 'New'. The second argument should be the full pathname of the location where the files should be stored on disk. See also: vlt.file.dumbjsondb, vlt.file.dumbjsondb/DUMBJSONDB newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_DATABASE_OBJ [, DOCUMENT_TYPE ] ) Creates a new / blank ndi . document document object that can be used with this ndi . database . Help for ndi . database . implementations . database . matlabdumbjsondb / newdocument is inherited from superclass NDI . DATABASE openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id [ NDI_BINARYDOC_OBJ, VERSION ] = OPENBINARYDOC ( NDI_DATABASE_OBJ , NDI_DOCUMENT_OR_ID , [ VERSION ] ) Return the open ndi . database . binarydoc object and VERSION that corresponds to an ndi . document and the requested version ( the latest version is used if the argument is omitted ). NDI_DOCUMENT_OR_ID can be either the document id of an ndi . document or an ndi . document object itsef . Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi . database / CLOSEBINARYDOC . The locked nature of the binary doc is a property of the database , not the document , which is why the database is needed . Help for ndi . database . implementations . database . matlabdumbjsondb / openbinarydoc is inherited from superclass NDI . DATABASE read - read an ndi.document from an ndi.database at a given db path NDI_DOCUMENT_OBJ = READ ( NDI_DATABASE_OBJ , NDI_DOCUMENT_ID , [ VERSION ] ) Read the ndi . document object with the document ID specified by NDI_DOCUMENT_ID . If VERSION is provided ( an integer ) then only the version that is equal to VERSION is returned . Otherwise , the latest version is returned . If there is no ndi . document object with that ID , then empty is returned ( [] ). Help for ndi . database . implementations . database . matlabdumbjsondb / read is inherited from superclass NDI . DATABASE remove - remove a document from an ndi.database NDI_DATABASE_OBJ = REMOVE ( NDI_DATABASE_OBJ , NDI_DOCUMENT_ID ) or NDI_DATABASE_OBJ = REMOVE ( NDI_DATABASE_OBJ , NDI_DOCUMENT_ID , VERSIONS ) or NDI_DATABASE_OBJ = REMOVE ( NDI_DATABASE_OBJ , NDI_DOCUMENT ) Removes the ndi . document object with the ' document unique reference ' equal to NDI_DOCUMENT_OBJ_ID . If VERSIONS is specified , then only the versions that match the entries in VERSIONS are removed . If an ndi . document is passed , then the NDI_DOCUMENT_ID is extracted using ndi . document / DOC_UNIQUE_ID . If a cell array of ndi . document is passed instead , then all of the documents are removed . Help for ndi . database . implementations . database . matlabdumbjsondb / remove is inherited from superclass NDI . DATABASE search - search for an ndi.document from an ndi.database [ DOCUMENT_OBJS , VERSIONS ] = SEARCH ( NDI_DATABASE_OBJ , {' PARAM1 ', VALUE1 , ' PARAM2 ', VALUE2 , ... }) Searches metadata parameters PARAM1 , PARAM2 , etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ . If VALUEN is a string , then a regular expression is evaluated to determine the match . If VALUEN is not a string , then the items must match exactly . If PARAMN1 begins with a dash , then VALUEN indicates the value of one of these special parameters: This function returns a cell array of ndi . document objects . If no documents match the query , then an empty cell array ({}) is returned . An array VERSIONS contains the document version of of each ndi . document . Help for ndi . database . implementations . database . matlabdumbjsondb / search is inherited from superclass NDI . DATABASE","title":"ndi.database.implementations.database.matlabdumbjsondb"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb.m/#class-ndidatabaseimplementationsdatabasematlabdumbjsondb","text":"ndi.database.implementations.database.matlabdumbjsondb make a new ndi.database.implementations.database.matlabdumbjsondb object NDI_MATLABDUMBJSONDB_OBJ = ndi.database.implementation.database.matlabdumbjsondb(PATH, SESSION_UNIQUE_REFERENCE, COMMAND, ...) Creates a new ndi.database.implementations.database.matlabdumbjsondb object. COMMAND can either be 'Load' or 'New'. The second argument should be the full pathname of the location where the files should be stored on disk. See also: vlt.file.dumbjsondb, vlt.file.dumbjsondb/DUMBJSONDB","title":"CLASS ndi.database.implementations.database.matlabdumbjsondb"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb.m/#superclasses","text":"ndi.database","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb.m/#properties","text":"Property Description db vlt.file.dumbjsondb object path session_unique_reference","title":"Properties"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb.m/#methods","text":"Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc matlabdumbjsondb ndi.database.implementations.database.matlabdumbjsondb make a new ndi.database.implementations.database.matlabdumbjsondb object newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database","title":"Methods"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb.m/#methods-help","text":"add - add an ndi.document to the database at a given path NDI_DATABASE_OBJ = ADD ( NDI_DATABASE_OBJ , NDI_DOCUMENT_OBJ , DBPATH , ... ) Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ . This function also accepts name / value pairs that modify its behavior : Parameter ( default ) | Description ------------------------------------------------------------------------- ' Update ' ( 1 ) | If document exists , update it . If 0 , an error is | generated if a document with the same ID exists See also : vlt . data . namevaluepair Help for ndi . database . implementations . database . matlabdumbjsondb / add is inherited from superclass NDI . DATABASE alldocids - return all document unique reference numbers for the database DOCIDS = ALLDOCIDS ( NDI_MATLABDUMBJSONDB_OBJ ) Return all document unique reference strings as a cell array of strings . If there are no documents , empty is returned . clear - remove/delete all records from an ndi.database CLEAR ( NDI_DATABASE_OBJ , [ AREYOUSURE ] ) Removes all documents from the vlt . file . dumbjsondb object . Use with care . If AREYOUSURE is 'yes' then the function will proceed . Otherwise , it will not . See also : ndi . database . implementations . database . matlabdumbjsondb / REMOVE Help for ndi . database . implementations . database . matlabdumbjsondb / clear is inherited from superclass NDI . DATABASE closebinarydoc - close and unlock an ndi.database.binarydoc [ NDI_BINARYDOC_OBJ ] = CLOSEBINARYDOC ( NDI_DATABASE_OBJ , NDI_BINARYDOC_OBJ ) Close and lock an NDI_BINARYDOC_OBJ . The NDI_BINARYDOC_OBJ must be unlocked in the database , which is why it is necessary to call this function through the database . Help for ndi . database . implementations . database . matlabdumbjsondb / closebinarydoc is inherited from superclass NDI . DATABASE matlabdumbjsondb - ndi.database.implementations.database.matlabdumbjsondb make a new ndi.database.implementations.database.matlabdumbjsondb object NDI_MATLABDUMBJSONDB_OBJ = ndi.database.implementation.database.matlabdumbjsondb(PATH, SESSION_UNIQUE_REFERENCE, COMMAND, ...) Creates a new ndi.database.implementations.database.matlabdumbjsondb object. COMMAND can either be 'Load' or 'New'. The second argument should be the full pathname of the location where the files should be stored on disk. See also: vlt.file.dumbjsondb, vlt.file.dumbjsondb/DUMBJSONDB newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_DATABASE_OBJ [, DOCUMENT_TYPE ] ) Creates a new / blank ndi . document document object that can be used with this ndi . database . Help for ndi . database . implementations . database . matlabdumbjsondb / newdocument is inherited from superclass NDI . DATABASE openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id [ NDI_BINARYDOC_OBJ, VERSION ] = OPENBINARYDOC ( NDI_DATABASE_OBJ , NDI_DOCUMENT_OR_ID , [ VERSION ] ) Return the open ndi . database . binarydoc object and VERSION that corresponds to an ndi . document and the requested version ( the latest version is used if the argument is omitted ). NDI_DOCUMENT_OR_ID can be either the document id of an ndi . document or an ndi . document object itsef . Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi . database / CLOSEBINARYDOC . The locked nature of the binary doc is a property of the database , not the document , which is why the database is needed . Help for ndi . database . implementations . database . matlabdumbjsondb / openbinarydoc is inherited from superclass NDI . DATABASE read - read an ndi.document from an ndi.database at a given db path NDI_DOCUMENT_OBJ = READ ( NDI_DATABASE_OBJ , NDI_DOCUMENT_ID , [ VERSION ] ) Read the ndi . document object with the document ID specified by NDI_DOCUMENT_ID . If VERSION is provided ( an integer ) then only the version that is equal to VERSION is returned . Otherwise , the latest version is returned . If there is no ndi . document object with that ID , then empty is returned ( [] ). Help for ndi . database . implementations . database . matlabdumbjsondb / read is inherited from superclass NDI . DATABASE remove - remove a document from an ndi.database NDI_DATABASE_OBJ = REMOVE ( NDI_DATABASE_OBJ , NDI_DOCUMENT_ID ) or NDI_DATABASE_OBJ = REMOVE ( NDI_DATABASE_OBJ , NDI_DOCUMENT_ID , VERSIONS ) or NDI_DATABASE_OBJ = REMOVE ( NDI_DATABASE_OBJ , NDI_DOCUMENT ) Removes the ndi . document object with the ' document unique reference ' equal to NDI_DOCUMENT_OBJ_ID . If VERSIONS is specified , then only the versions that match the entries in VERSIONS are removed . If an ndi . document is passed , then the NDI_DOCUMENT_ID is extracted using ndi . document / DOC_UNIQUE_ID . If a cell array of ndi . document is passed instead , then all of the documents are removed . Help for ndi . database . implementations . database . matlabdumbjsondb / remove is inherited from superclass NDI . DATABASE search - search for an ndi.document from an ndi.database [ DOCUMENT_OBJS , VERSIONS ] = SEARCH ( NDI_DATABASE_OBJ , {' PARAM1 ', VALUE1 , ' PARAM2 ', VALUE2 , ... }) Searches metadata parameters PARAM1 , PARAM2 , etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ . If VALUEN is a string , then a regular expression is evaluated to determine the match . If VALUEN is not a string , then the items must match exactly . If PARAMN1 begins with a dash , then VALUEN indicates the value of one of these special parameters: This function returns a cell array of ndi . document objects . If no documents match the query , then an empty cell array ({}) is returned . An array VERSIONS contains the document version of of each ndi . document . Help for ndi . database . implementations . database . matlabdumbjsondb / search is inherited from superclass NDI . DATABASE","title":"Methods help"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/postgresdb.m/","text":"CLASS ndi.database.implementations.database.postgresdb \u00b6 ndi.database.implementations.database.postgresdb is a class. Superclasses \u00b6 ndi.database Properties \u00b6 Property Description db Stores PostgreSQL database dbname Used to specify name of Postgres database path session_unique_reference Methods \u00b6 Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc ndi.database.postgresdb ndiquery_to_sql Translates an ndiquery into a SQL command newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id postgresdb ndi.database.implementations.database.postgresdb/postgresdb is a constructor. read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database Methods help \u00b6 add - add an ndi.document to the database at a given path NDI_DATABASE_OBJ = ADD ( NDI_DATABASE_OBJ , NDI_DOCUMENT_OBJ , DBPATH , ... ) Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ . This function also accepts name / value pairs that modify its behavior : Parameter ( default ) | Description ------------------------------------------------------------------------- ' Update ' ( 1 ) | If document exists , update it . If 0 , an error is | generated if a document with the same ID exists See also : vlt . data . namevaluepair Help for ndi . database . implementations . database . postgresdb / add is inherited from superclass NDI . DATABASE alldocids - return all document unique reference numbers for the database DOCIDS = ALLDOCIDS ( NDI_POSTGRESDB_OBJ , DBNAME ) Return all document unique reference strings as a cell array of strings . If there are no documents , empty is returned . NOTE : Requires Database name as input and Assuming data is stored in public . documents docid_query = \"SELECT id FROM \" + ndi_postgresdb_obj . dbname + \".public.documents\" data = select ( ndi_postgresdb_obj . db , docid_query ); clear - remove/delete all records from an ndi.database CLEAR ( NDI_DATABASE_OBJ , [ AREYOUSURE ] ) Removes all documents from the vlt . file . dumbjsondb object . Use with care . If AREYOUSURE is 'yes' then the function will proceed . Otherwise , it will not . See also : ndi . database . implementations . database . postgresdb / REMOVE Help for ndi . database . implementations . database . postgresdb / clear is inherited from superclass NDI . DATABASE closebinarydoc - close and unlock an ndi.database.binarydoc [ NDI_BINARYDOC_OBJ ] = CLOSEBINARYDOC ( NDI_DATABASE_OBJ , NDI_BINARYDOC_OBJ ) Close and lock an NDI_BINARYDOC_OBJ . The NDI_BINARYDOC_OBJ must be unlocked in the database , which is why it is necessary to call this function through the database . Help for ndi . database . implementations . database . postgresdb / closebinarydoc is inherited from superclass NDI . DATABASE ndi.database.postgresdb - ** ndiquery_to_sql - Translates an ndiquery into a SQL command Assumes input is a ndiquery converted to struct Assumes params are correct q = ndi . query ( 'ndi_document.id' , 'exact_string' , 'ABCD' , '' ) ( This means : find all documents that have a field ndi_document . id that exactly matches the string 'ABCD' ) q = ndi . query ( 'list' , 'exact_string' , 'abc' , '' ) Example SQL query : SELECT data ->> 'list' AS list FROM dbname . public . documents WHERE data ->> 'list' LIKE ( '%abc%' ) newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_DATABASE_OBJ [, DOCUMENT_TYPE ] ) Creates a new / blank ndi . document document object that can be used with this ndi . database . Help for ndi . database . implementations . database . postgresdb / newdocument is inherited from superclass NDI . DATABASE openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id [ NDI_BINARYDOC_OBJ, VERSION ] = OPENBINARYDOC ( NDI_DATABASE_OBJ , NDI_DOCUMENT_OR_ID , [ VERSION ] ) Return the open ndi . database . binarydoc object and VERSION that corresponds to an ndi . document and the requested version ( the latest version is used if the argument is omitted ). NDI_DOCUMENT_OR_ID can be either the document id of an ndi . document or an ndi . document object itsef . Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi . database / CLOSEBINARYDOC . The locked nature of the binary doc is a property of the database , not the document , which is why the database is needed . Help for ndi . database . implementations . database . postgresdb / openbinarydoc is inherited from superclass NDI . DATABASE postgresdb - ndi.database.implementations.database.postgresdb/postgresdb is a constructor. read - read an ndi.document from an ndi.database at a given db path NDI_DOCUMENT_OBJ = READ ( NDI_DATABASE_OBJ , NDI_DOCUMENT_ID , [ VERSION ] ) Read the ndi . document object with the document ID specified by NDI_DOCUMENT_ID . If VERSION is provided ( an integer ) then only the version that is equal to VERSION is returned . Otherwise , the latest version is returned . If there is no ndi . document object with that ID , then empty is returned ( [] ). Help for ndi . database . implementations . database . postgresdb / read is inherited from superclass NDI . DATABASE remove - remove a document from an ndi.database NDI_DATABASE_OBJ = REMOVE ( NDI_DATABASE_OBJ , NDI_DOCUMENT_ID ) or NDI_DATABASE_OBJ = REMOVE ( NDI_DATABASE_OBJ , NDI_DOCUMENT_ID , VERSIONS ) or NDI_DATABASE_OBJ = REMOVE ( NDI_DATABASE_OBJ , NDI_DOCUMENT ) Removes the ndi . document object with the ' document unique reference ' equal to NDI_DOCUMENT_OBJ_ID . If VERSIONS is specified , then only the versions that match the entries in VERSIONS are removed . If an ndi . document is passed , then the NDI_DOCUMENT_ID is extracted using ndi . document / DOC_UNIQUE_ID . If a cell array of ndi . document is passed instead , then all of the documents are removed . Help for ndi . database . implementations . database . postgresdb / remove is inherited from superclass NDI . DATABASE search - search for an ndi.document from an ndi.database [ DOCUMENT_OBJS , VERSIONS ] = SEARCH ( NDI_DATABASE_OBJ , {' PARAM1 ', VALUE1 , ' PARAM2 ', VALUE2 , ... }) Searches metadata parameters PARAM1 , PARAM2 , etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ . If VALUEN is a string , then a regular expression is evaluated to determine the match . If VALUEN is not a string , then the items must match exactly . If PARAMN1 begins with a dash , then VALUEN indicates the value of one of these special parameters: This function returns a cell array of ndi . document objects . If no documents match the query , then an empty cell array ({}) is returned . An array VERSIONS contains the document version of of each ndi . document . Help for ndi . database . implementations . database . postgresdb / search is inherited from superclass NDI . DATABASE","title":"ndi.database.implementations.database.postgresdb"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/postgresdb.m/#class-ndidatabaseimplementationsdatabasepostgresdb","text":"ndi.database.implementations.database.postgresdb is a class.","title":"CLASS ndi.database.implementations.database.postgresdb"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/postgresdb.m/#superclasses","text":"ndi.database","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/postgresdb.m/#properties","text":"Property Description db Stores PostgreSQL database dbname Used to specify name of Postgres database path session_unique_reference","title":"Properties"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/postgresdb.m/#methods","text":"Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc ndi.database.postgresdb ndiquery_to_sql Translates an ndiquery into a SQL command newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id postgresdb ndi.database.implementations.database.postgresdb/postgresdb is a constructor. read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database","title":"Methods"},{"location":"reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/postgresdb.m/#methods-help","text":"add - add an ndi.document to the database at a given path NDI_DATABASE_OBJ = ADD ( NDI_DATABASE_OBJ , NDI_DOCUMENT_OBJ , DBPATH , ... ) Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ . This function also accepts name / value pairs that modify its behavior : Parameter ( default ) | Description ------------------------------------------------------------------------- ' Update ' ( 1 ) | If document exists , update it . If 0 , an error is | generated if a document with the same ID exists See also : vlt . data . namevaluepair Help for ndi . database . implementations . database . postgresdb / add is inherited from superclass NDI . DATABASE alldocids - return all document unique reference numbers for the database DOCIDS = ALLDOCIDS ( NDI_POSTGRESDB_OBJ , DBNAME ) Return all document unique reference strings as a cell array of strings . If there are no documents , empty is returned . NOTE : Requires Database name as input and Assuming data is stored in public . documents docid_query = \"SELECT id FROM \" + ndi_postgresdb_obj . dbname + \".public.documents\" data = select ( ndi_postgresdb_obj . db , docid_query ); clear - remove/delete all records from an ndi.database CLEAR ( NDI_DATABASE_OBJ , [ AREYOUSURE ] ) Removes all documents from the vlt . file . dumbjsondb object . Use with care . If AREYOUSURE is 'yes' then the function will proceed . Otherwise , it will not . See also : ndi . database . implementations . database . postgresdb / REMOVE Help for ndi . database . implementations . database . postgresdb / clear is inherited from superclass NDI . DATABASE closebinarydoc - close and unlock an ndi.database.binarydoc [ NDI_BINARYDOC_OBJ ] = CLOSEBINARYDOC ( NDI_DATABASE_OBJ , NDI_BINARYDOC_OBJ ) Close and lock an NDI_BINARYDOC_OBJ . The NDI_BINARYDOC_OBJ must be unlocked in the database , which is why it is necessary to call this function through the database . Help for ndi . database . implementations . database . postgresdb / closebinarydoc is inherited from superclass NDI . DATABASE ndi.database.postgresdb - ** ndiquery_to_sql - Translates an ndiquery into a SQL command Assumes input is a ndiquery converted to struct Assumes params are correct q = ndi . query ( 'ndi_document.id' , 'exact_string' , 'ABCD' , '' ) ( This means : find all documents that have a field ndi_document . id that exactly matches the string 'ABCD' ) q = ndi . query ( 'list' , 'exact_string' , 'abc' , '' ) Example SQL query : SELECT data ->> 'list' AS list FROM dbname . public . documents WHERE data ->> 'list' LIKE ( '%abc%' ) newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_DATABASE_OBJ [, DOCUMENT_TYPE ] ) Creates a new / blank ndi . document document object that can be used with this ndi . database . Help for ndi . database . implementations . database . postgresdb / newdocument is inherited from superclass NDI . DATABASE openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id [ NDI_BINARYDOC_OBJ, VERSION ] = OPENBINARYDOC ( NDI_DATABASE_OBJ , NDI_DOCUMENT_OR_ID , [ VERSION ] ) Return the open ndi . database . binarydoc object and VERSION that corresponds to an ndi . document and the requested version ( the latest version is used if the argument is omitted ). NDI_DOCUMENT_OR_ID can be either the document id of an ndi . document or an ndi . document object itsef . Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi . database / CLOSEBINARYDOC . The locked nature of the binary doc is a property of the database , not the document , which is why the database is needed . Help for ndi . database . implementations . database . postgresdb / openbinarydoc is inherited from superclass NDI . DATABASE postgresdb - ndi.database.implementations.database.postgresdb/postgresdb is a constructor. read - read an ndi.document from an ndi.database at a given db path NDI_DOCUMENT_OBJ = READ ( NDI_DATABASE_OBJ , NDI_DOCUMENT_ID , [ VERSION ] ) Read the ndi . document object with the document ID specified by NDI_DOCUMENT_ID . If VERSION is provided ( an integer ) then only the version that is equal to VERSION is returned . Otherwise , the latest version is returned . If there is no ndi . document object with that ID , then empty is returned ( [] ). Help for ndi . database . implementations . database . postgresdb / read is inherited from superclass NDI . DATABASE remove - remove a document from an ndi.database NDI_DATABASE_OBJ = REMOVE ( NDI_DATABASE_OBJ , NDI_DOCUMENT_ID ) or NDI_DATABASE_OBJ = REMOVE ( NDI_DATABASE_OBJ , NDI_DOCUMENT_ID , VERSIONS ) or NDI_DATABASE_OBJ = REMOVE ( NDI_DATABASE_OBJ , NDI_DOCUMENT ) Removes the ndi . document object with the ' document unique reference ' equal to NDI_DOCUMENT_OBJ_ID . If VERSIONS is specified , then only the versions that match the entries in VERSIONS are removed . If an ndi . document is passed , then the NDI_DOCUMENT_ID is extracted using ndi . document / DOC_UNIQUE_ID . If a cell array of ndi . document is passed instead , then all of the documents are removed . Help for ndi . database . implementations . database . postgresdb / remove is inherited from superclass NDI . DATABASE search - search for an ndi.document from an ndi.database [ DOCUMENT_OBJS , VERSIONS ] = SEARCH ( NDI_DATABASE_OBJ , {' PARAM1 ', VALUE1 , ' PARAM2 ', VALUE2 , ... }) Searches metadata parameters PARAM1 , PARAM2 , etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ . If VALUEN is a string , then a regular expression is evaluated to determine the match . If VALUEN is not a string , then the items must match exactly . If PARAMN1 begins with a dash , then VALUEN indicates the value of one of these special parameters: This function returns a cell array of ndi . document objects . If no documents match the query , then an empty cell array ({}) is returned . An array VERSIONS contains the document version of of each ndi . document . Help for ndi . database . implementations . database . postgresdb / search is inherited from superclass NDI . DATABASE","title":"Methods help"},{"location":"reference/%2Bndi/%2Bdocs/all_documents2markdown.m/","text":"ndi.docs.all_documents2markdown \u00b6 ALL_DOCUMENTS2MARKDOWN - write all NDI document types to documentation folder","title":"ndi.docs.all_documents2markdown"},{"location":"reference/%2Bndi/%2Bdocs/all_documents2markdown.m/#ndidocsall_documents2markdown","text":"ALL_DOCUMENTS2MARKDOWN - write all NDI document types to documentation folder","title":"ndi.docs.all_documents2markdown"},{"location":"reference/%2Bndi/%2Bdocs/build.m/","text":"ndi.docs.build \u00b6 ndi.docs.build - build the NDI markdown documentation from Matlab source Builds the NDI documentation locally in $NDI-matlab/docs and updates the mkdocs-yml file in the $NDI-matlab directory. **Example**: ndi.docs.build();","title":"ndi.docs.build"},{"location":"reference/%2Bndi/%2Bdocs/build.m/#ndidocsbuild","text":"ndi.docs.build - build the NDI markdown documentation from Matlab source Builds the NDI documentation locally in $NDI-matlab/docs and updates the mkdocs-yml file in the $NDI-matlab directory. **Example**: ndi.docs.build();","title":"ndi.docs.build"},{"location":"reference/%2Bndi/%2Bdocs/document2markdown.m/","text":"ndi.docs.document2markdown \u00b6 DOCUMENT2MARKDOWN - convert an NDI document to markdown text MD = ndi.docs.document2markdown(ndi_document_obj) Given an ndi.document NDI_DOCUMENT_OBJ, this function creates a documentation-style markdown file.","title":"ndi.docs.document2markdown"},{"location":"reference/%2Bndi/%2Bdocs/document2markdown.m/#ndidocsdocument2markdown","text":"DOCUMENT2MARKDOWN - convert an NDI document to markdown text MD = ndi.docs.document2markdown(ndi_document_obj) Given an ndi.document NDI_DOCUMENT_OBJ, this function creates a documentation-style markdown file.","title":"ndi.docs.document2markdown"},{"location":"reference/%2Bndi/%2Bdocs/schemastructure2docstructure.m/","text":"ndi.docs.schemastructure2docstructure \u00b6 schemastructure2docstructure - return documentation information from an ndi document schema DOCS = SCHEMASTRUCTURE2DOCSTRUCTURE ( SCHEMA ) Given an NDI schema structure ( json - schema . org / draft / 2019 - 09 / schema # ) this function returns documentation information for all properties . This returns a structure array with fields : - property - doc_default_value - doc_data_type - doc_description","title":"ndi.docs.schemastructure2docstructure"},{"location":"reference/%2Bndi/%2Bdocs/schemastructure2docstructure.m/#ndidocsschemastructure2docstructure","text":"schemastructure2docstructure - return documentation information from an ndi document schema DOCS = SCHEMASTRUCTURE2DOCSTRUCTURE ( SCHEMA ) Given an NDI schema structure ( json - schema . org / draft / 2019 - 09 / schema # ) this function returns documentation information for all properties . This returns a structure array with fields : - property - doc_default_value - doc_data_type - doc_description","title":"ndi.docs.schemastructure2docstructure"},{"location":"reference/%2Bndi/%2Belement/timeseries.m/","text":"CLASS ndi.element.timeseries \u00b6 NDI_ELEMENT - define or examine a element in the session Superclasses \u00b6 ndi.element , ndi.ido , ndi.epoch.epochset , ndi.documentservice , ndi.time.timeseries Properties \u00b6 Property Description session name type reference underlying_element direct subject_id dependencies identifier Methods \u00b6 Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.element cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochsetname the name of the ndi.element object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID getcache return the NDI_CACHE and key for ndi.element id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version ndi_unique_id Generate a unique ID number for NDI projects newdocument need docs here numepochs Number of epochs of ndi.epoch.epochset readtimeseries read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery need docs here t0_t1 times2samples convert from the timeseries time to sample numbers timeseries define or examine a element in the session underlyingepochnodes find all the underlying epochnodes of a given epochnode Methods help \u00b6 addepoch - add an epoch to the ndi.element [ NDI_ELEMENT_OBJ , EPOCHDOC ] = ADDEPOCH ( NDI_ELEMENT_TIMESERIES_OBJ , EPOCHID , EPOCHCLOCK , T0_T1 , TIMEPOINTS , DATAPOINTS ) Registers the data for an epoch with the NDI_ELEMENT_OBJ . Inputs : NDI_ELEMENT_OBJ : The ndi . element object to modify EPOCHID : The name of the epoch to add ; should match the name of an epoch from the probe EPOCHCLOCK : The epoch clock ; must be a single clock type that matches one of the clock types of the probe T0_T1 : The starting time and ending time of the existence of information about the ELEMENT on the probe , in units of the epock clock TIMEPOINTS : the time points to be added to this epoch ; can also be the string 'probe' which means the points are read directly from the probe ( must be Tx1 ). Timepoints must be in the units of the EPOCHCLOCK . DATAPOINTS : the data points that accompany each timepoint ( must be TxXxY ...), or can be 'probe' to read from the probe Outputs : If a second output is requested in EPOCHDOC , then the DOC is NOT added to the database buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . element . timeseries / EPOCHNODES Help for ndi . element . timeseries / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - build the epoch table for an ndi.element ET = BUILDEPOCHTABLE ( NDI_ELEMENT_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch ( with the session id ). ' epoch_session_id ' | Session of the epoch ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , and ' epoch_id ' Help for ndi . element . timeseries / buildepochtable is inherited from superclass NDI . ELEMENT cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . element . timeseries / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . element . timeseries / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_REF ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then empty is returned . Help for ndi . element . timeseries / doc_unique_id is inherited from superclass NDI . ELEMENT elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING ( NDI_ELEMENT_OBJ ) Returns the name as a human - readable string . For ndi . element objects , this is the string ' element: ' followed by its name Help for ndi . element . timeseries / elementstring is inherited from superclass NDI . ELEMENT epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . element . timeseries / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_ELEMENT_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch . The ndi . element class always returns the clock type ( s ) of the element it is based on Help for ndi . element . timeseries / epochclock is inherited from superclass NDI . ELEMENT epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . element . timeseries / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . Help for ndi . element . timeseries / epochid is inherited from superclass NDI . EPOCH . EPOCHSET epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . element . timeseries / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochsetname - the name of the ndi.element object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_ELEMENT_OBJ ) Returns the object name that is used when creating epoch nodes . For ndi . element objects , this is ndi . element / ELEMENTSTRING . Help for ndi . element . timeseries / epochsetname is inherited from superclass NDI . ELEMENT epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . element . timeseries / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . element . timeseries / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET getcache - return the NDI_CACHE and key for ndi.element [ CACHE , KEY ] = GETCACHE ( NDI_ELEMENT_OBJ ) Returns the CACHE and KEY for the ndi . element object . The CACHE is returned from the associated session . The KEY is the probe ' s ELEMENTSTRING plus the TYPE of the ELEMENT. See also : ndi . file . navigator Help for ndi . element . timeseries / getcache is inherited from superclass NDI . ELEMENT id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then an error is returned . Help for ndi . element . timeseries / id is inherited from superclass NDI . ELEMENT issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_ELEMENT_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . element objects , this returns 0 so that underlying ndi . probe epochs are added . Help for ndi . element . timeseries / issyncgraphroot is inherited from superclass NDI . ELEMENT load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS ( NDI_ELEMENT_OBJ ) Loads the ndi . document that is based on the ndi . element object and any associated epoch documents . Help for ndi . element . timeseries / load_all_element_docs is inherited from superclass NDI . ELEMENT load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC ( NDI_ELEMENT_OBJ ) Load an ndi . document that is based on the ndi . element object . Returns empty if there is no such document . Help for ndi . element . timeseries / load_element_doc is inherited from superclass NDI . ELEMENT loadaddedepochs - load the added epochs from an ndi.element [ ET_ADDED , EPOCHDOCS ] = LOADADDEDEOPCHS ( NDI_ELEMENT_OBJ ) Load the EPOCHTABLE that consists of added / registered epochs that provide information about the ndi . element . Help for ndi . element . timeseries / loadaddedepochs is inherited from superclass NDI . ELEMENT matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . element . timeseries / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . element . timeseries . ndi_unique_id is inherited from superclass NDI . IDO newdocument - need docs here numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . element . timeseries / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET readtimeseries - read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch [ DATA , T , TIMEREF ] = READTIMESERIES ( NDI_ELEMENT_TIMESERIES_OBJ , TIMEREF_OR_EPOCH , T0 , T1 ) Reads timeseries data from an ndi . element . timeseries object . The DATA and time information T that are returned depend on the the specific subclass of ndi . element . timeseries that is called ( see READTIMESERIESEPOCH ) . In the base class , this function merely calls the element ' s probe ' s READTIMESERIES function . TIMEREF_OR_EPOCH is either an ndi . time . timereference object indicating the time reference for T0 , T1 , or it can be a single number , which will indicate the data are to be read from that epoch . DATA is the data for the probe . T is a time structure , in units of TIMEREF if it is an ndi . time . timereference object or in units of the epoch if an epoch is passed . The TIMEREF is returned . resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . element . timeseries / EPOCHTABLE Help for ndi . element . timeseries / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLE_RATE ( NDI_TIMESERIES_OBJ , EPOCH ) Returns the sampling rate of a given ndi . time . timeseries object for the epoch EPOCH . EPOCH can be specified as an index or EPOCH_ID . If NDI_TIMESERIES_OBJ is not regularly sampled , then - 1 is returned . Help for ndi . element . timeseries / samplerate is inherited from superclass NDI . TIME . TIMESERIES samples2times - convert from the timeseries time to sample numbers SAMPLES = TIME2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. TODO : convert times to dev_local_clock Help for ndi . element . timeseries / samples2times is inherited from superclass NDI . TIME . TIMESERIES searchquery - need docs here t0_t1 - ** T0_T1 - return the t0_t1 ( beginning and end ) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK TODO : this must be a bug , it ' s just self - referential Help for ndi . element . timeseries / t0_t1 is inherited from superclass NDI . ELEMENT times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. Help for ndi . element . timeseries / times2samples is inherited from superclass NDI . TIME . TIMESERIES timeseries - define or examine a element in the session underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . element . timeseries / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET","title":"ndi.element.timeseries"},{"location":"reference/%2Bndi/%2Belement/timeseries.m/#class-ndielementtimeseries","text":"NDI_ELEMENT - define or examine a element in the session","title":"CLASS ndi.element.timeseries"},{"location":"reference/%2Bndi/%2Belement/timeseries.m/#superclasses","text":"ndi.element , ndi.ido , ndi.epoch.epochset , ndi.documentservice , ndi.time.timeseries","title":"Superclasses"},{"location":"reference/%2Bndi/%2Belement/timeseries.m/#properties","text":"Property Description session name type reference underlying_element direct subject_id dependencies identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Belement/timeseries.m/#methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.element cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochsetname the name of the ndi.element object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID getcache return the NDI_CACHE and key for ndi.element id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version ndi_unique_id Generate a unique ID number for NDI projects newdocument need docs here numepochs Number of epochs of ndi.epoch.epochset readtimeseries read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery need docs here t0_t1 times2samples convert from the timeseries time to sample numbers timeseries define or examine a element in the session underlyingepochnodes find all the underlying epochnodes of a given epochnode","title":"Methods"},{"location":"reference/%2Bndi/%2Belement/timeseries.m/#methods-help","text":"addepoch - add an epoch to the ndi.element [ NDI_ELEMENT_OBJ , EPOCHDOC ] = ADDEPOCH ( NDI_ELEMENT_TIMESERIES_OBJ , EPOCHID , EPOCHCLOCK , T0_T1 , TIMEPOINTS , DATAPOINTS ) Registers the data for an epoch with the NDI_ELEMENT_OBJ . Inputs : NDI_ELEMENT_OBJ : The ndi . element object to modify EPOCHID : The name of the epoch to add ; should match the name of an epoch from the probe EPOCHCLOCK : The epoch clock ; must be a single clock type that matches one of the clock types of the probe T0_T1 : The starting time and ending time of the existence of information about the ELEMENT on the probe , in units of the epock clock TIMEPOINTS : the time points to be added to this epoch ; can also be the string 'probe' which means the points are read directly from the probe ( must be Tx1 ). Timepoints must be in the units of the EPOCHCLOCK . DATAPOINTS : the data points that accompany each timepoint ( must be TxXxY ...), or can be 'probe' to read from the probe Outputs : If a second output is requested in EPOCHDOC , then the DOC is NOT added to the database buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . element . timeseries / EPOCHNODES Help for ndi . element . timeseries / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - build the epoch table for an ndi.element ET = BUILDEPOCHTABLE ( NDI_ELEMENT_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch ( with the session id ). ' epoch_session_id ' | Session of the epoch ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , and ' epoch_id ' Help for ndi . element . timeseries / buildepochtable is inherited from superclass NDI . ELEMENT cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . element . timeseries / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . element . timeseries / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_REF ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then empty is returned . Help for ndi . element . timeseries / doc_unique_id is inherited from superclass NDI . ELEMENT elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING ( NDI_ELEMENT_OBJ ) Returns the name as a human - readable string . For ndi . element objects , this is the string ' element: ' followed by its name Help for ndi . element . timeseries / elementstring is inherited from superclass NDI . ELEMENT epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . element . timeseries / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_ELEMENT_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch . The ndi . element class always returns the clock type ( s ) of the element it is based on Help for ndi . element . timeseries / epochclock is inherited from superclass NDI . ELEMENT epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . element . timeseries / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . Help for ndi . element . timeseries / epochid is inherited from superclass NDI . EPOCH . EPOCHSET epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . element . timeseries / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochsetname - the name of the ndi.element object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_ELEMENT_OBJ ) Returns the object name that is used when creating epoch nodes . For ndi . element objects , this is ndi . element / ELEMENTSTRING . Help for ndi . element . timeseries / epochsetname is inherited from superclass NDI . ELEMENT epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . element . timeseries / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . element . timeseries / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET getcache - return the NDI_CACHE and key for ndi.element [ CACHE , KEY ] = GETCACHE ( NDI_ELEMENT_OBJ ) Returns the CACHE and KEY for the ndi . element object . The CACHE is returned from the associated session . The KEY is the probe ' s ELEMENTSTRING plus the TYPE of the ELEMENT. See also : ndi . file . navigator Help for ndi . element . timeseries / getcache is inherited from superclass NDI . ELEMENT id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then an error is returned . Help for ndi . element . timeseries / id is inherited from superclass NDI . ELEMENT issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_ELEMENT_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . element objects , this returns 0 so that underlying ndi . probe epochs are added . Help for ndi . element . timeseries / issyncgraphroot is inherited from superclass NDI . ELEMENT load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS ( NDI_ELEMENT_OBJ ) Loads the ndi . document that is based on the ndi . element object and any associated epoch documents . Help for ndi . element . timeseries / load_all_element_docs is inherited from superclass NDI . ELEMENT load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC ( NDI_ELEMENT_OBJ ) Load an ndi . document that is based on the ndi . element object . Returns empty if there is no such document . Help for ndi . element . timeseries / load_element_doc is inherited from superclass NDI . ELEMENT loadaddedepochs - load the added epochs from an ndi.element [ ET_ADDED , EPOCHDOCS ] = LOADADDEDEOPCHS ( NDI_ELEMENT_OBJ ) Load the EPOCHTABLE that consists of added / registered epochs that provide information about the ndi . element . Help for ndi . element . timeseries / loadaddedepochs is inherited from superclass NDI . ELEMENT matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . element . timeseries / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . element . timeseries . ndi_unique_id is inherited from superclass NDI . IDO newdocument - need docs here numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . element . timeseries / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET readtimeseries - read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch [ DATA , T , TIMEREF ] = READTIMESERIES ( NDI_ELEMENT_TIMESERIES_OBJ , TIMEREF_OR_EPOCH , T0 , T1 ) Reads timeseries data from an ndi . element . timeseries object . The DATA and time information T that are returned depend on the the specific subclass of ndi . element . timeseries that is called ( see READTIMESERIESEPOCH ) . In the base class , this function merely calls the element ' s probe ' s READTIMESERIES function . TIMEREF_OR_EPOCH is either an ndi . time . timereference object indicating the time reference for T0 , T1 , or it can be a single number , which will indicate the data are to be read from that epoch . DATA is the data for the probe . T is a time structure , in units of TIMEREF if it is an ndi . time . timereference object or in units of the epoch if an epoch is passed . The TIMEREF is returned . resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . element . timeseries / EPOCHTABLE Help for ndi . element . timeseries / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLE_RATE ( NDI_TIMESERIES_OBJ , EPOCH ) Returns the sampling rate of a given ndi . time . timeseries object for the epoch EPOCH . EPOCH can be specified as an index or EPOCH_ID . If NDI_TIMESERIES_OBJ is not regularly sampled , then - 1 is returned . Help for ndi . element . timeseries / samplerate is inherited from superclass NDI . TIME . TIMESERIES samples2times - convert from the timeseries time to sample numbers SAMPLES = TIME2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. TODO : convert times to dev_local_clock Help for ndi . element . timeseries / samples2times is inherited from superclass NDI . TIME . TIMESERIES searchquery - need docs here t0_t1 - ** T0_T1 - return the t0_t1 ( beginning and end ) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK TODO : this must be a bug , it ' s just self - referential Help for ndi . element . timeseries / t0_t1 is inherited from superclass NDI . ELEMENT times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. Help for ndi . element . timeseries / times2samples is inherited from superclass NDI . TIME . TIMESERIES timeseries - define or examine a element in the session underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . element . timeseries / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET","title":"Methods help"},{"location":"reference/%2Bndi/%2Bepoch/epochprobemap.m/","text":"CLASS ndi.epoch.epochprobemap \u00b6 ndi.epoch.epochprobemap - Create a new ndi.epoch.epochprobemap object MYNDI_EPOCHPROBEMAP = ndi.epoch.epochprobemap() Creates a new ndi.epoch.epochprobemap object. This is an abstract base class so it has no inputs. The function has an alternative form: MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(FILENAME) Here, FILENAME is assumed to be a tab-delimitted text file with a header row that has entries 'name<tab>reference<tab>type<tab>devicestring<tab>', with one line per ndi.epoch.epochprobemap_daqsystem entry. Superclasses \u00b6 none Properties \u00b6 none Methods \u00b6 Method Description epochprobemap Create a new ndi.epoch.epochprobemap object savetofile Write ndi.epoch.epochprobemap object array to disk Methods help \u00b6 epochprobemap - Create a new ndi.epoch.epochprobemap object MYNDI_EPOCHPROBEMAP = ndi.epoch.epochprobemap() Creates a new ndi.epoch.epochprobemap object. This is an abstract base class so it has no inputs. The function has an alternative form: MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(FILENAME) Here, FILENAME is assumed to be a tab-delimitted text file with a header row that has entries 'name<tab>reference<tab>type<tab>devicestring<tab>', with one line per ndi.epoch.epochprobemap_daqsystem entry. savetofile - Write ndi.epoch.epochprobemap object array to disk SAVETOFILE(NDI_EPOCHCONENTS_OBJ, FILENAME) Writes the ndi.epoch.epochprobemap object to disk in filename FILENAME (full path). In this abstract class, no action is taken.","title":"ndi.epoch.epochprobemap"},{"location":"reference/%2Bndi/%2Bepoch/epochprobemap.m/#class-ndiepochepochprobemap","text":"ndi.epoch.epochprobemap - Create a new ndi.epoch.epochprobemap object MYNDI_EPOCHPROBEMAP = ndi.epoch.epochprobemap() Creates a new ndi.epoch.epochprobemap object. This is an abstract base class so it has no inputs. The function has an alternative form: MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(FILENAME) Here, FILENAME is assumed to be a tab-delimitted text file with a header row that has entries 'name<tab>reference<tab>type<tab>devicestring<tab>', with one line per ndi.epoch.epochprobemap_daqsystem entry.","title":"CLASS ndi.epoch.epochprobemap"},{"location":"reference/%2Bndi/%2Bepoch/epochprobemap.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bepoch/epochprobemap.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bndi/%2Bepoch/epochprobemap.m/#methods","text":"Method Description epochprobemap Create a new ndi.epoch.epochprobemap object savetofile Write ndi.epoch.epochprobemap object array to disk","title":"Methods"},{"location":"reference/%2Bndi/%2Bepoch/epochprobemap.m/#methods-help","text":"epochprobemap - Create a new ndi.epoch.epochprobemap object MYNDI_EPOCHPROBEMAP = ndi.epoch.epochprobemap() Creates a new ndi.epoch.epochprobemap object. This is an abstract base class so it has no inputs. The function has an alternative form: MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(FILENAME) Here, FILENAME is assumed to be a tab-delimitted text file with a header row that has entries 'name<tab>reference<tab>type<tab>devicestring<tab>', with one line per ndi.epoch.epochprobemap_daqsystem entry. savetofile - Write ndi.epoch.epochprobemap object array to disk SAVETOFILE(NDI_EPOCHCONENTS_OBJ, FILENAME) Writes the ndi.epoch.epochprobemap object to disk in filename FILENAME (full path). In this abstract class, no action is taken.","title":"Methods help"},{"location":"reference/%2Bndi/%2Bepoch/epochprobemap_daqsystem.m/","text":"CLASS ndi.epoch.epochprobemap_daqsystem \u00b6 ndi.epoch.epochprobemap_daqsystem - Create a new ndi.epoch.epochprobemap_daqsystem object MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(NAME, REFERENCE, TYPE, DEVICESTRING, SUBJECTSTRING) Creates a new ndi.epoch.epochprobemap_daqsystem with name NAME, reference REFERENCE, type TYPE, and devicestring DEVICESTRING. NAME can be any string that begins with a letter and contains no whitespace. It is CASE SENSITIVE. REFERENCE must be a non-negative scalar integer. TYPE is the type of recording. DEVICESTRING is a string that indicates the channels that were used to acquire this record. SUBJECTSTRING describes the subject of the probe, either using the unique local identifier or the document unique identifier (ID) of the ndi.document that describes the subject. The function has an alternative form: MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(FILENAME) Here, FILENAME is assumed to be a tab-delimitted text file with a header row that has entries 'name<tab>reference<tab>type<tab>devicestring<tab><subjectstring>', with one line per ndi.epoch.epochprobemap_daqsystem entry. Superclasses \u00b6 ndi.epoch.epochprobemap Properties \u00b6 Property Description name Name of the contents; can by any string that begins with a letter and contains no whitespace reference A non-negative scalar integer reference number that uniquely identifies data records that can be combined type The type of recording that is present in the data devicestring An ndi.daq.daqsystemstring that indicates the device and channels that comprise the data subjectstring A string describing the local_id or unique document ID of the subject of the probe Methods \u00b6 Method Description epochprobemap_daqsystem Create a new ndi.epoch.epochprobemap_daqsystem object savetofile Write ndi.epoch.epochprobemap_daqsystem object array to disk Methods help \u00b6 epochprobemap_daqsystem - Create a new ndi.epoch.epochprobemap_daqsystem object MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(NAME, REFERENCE, TYPE, DEVICESTRING, SUBJECTSTRING) Creates a new ndi.epoch.epochprobemap_daqsystem with name NAME, reference REFERENCE, type TYPE, and devicestring DEVICESTRING. NAME can be any string that begins with a letter and contains no whitespace. It is CASE SENSITIVE. REFERENCE must be a non-negative scalar integer. TYPE is the type of recording. DEVICESTRING is a string that indicates the channels that were used to acquire this record. SUBJECTSTRING describes the subject of the probe, either using the unique local identifier or the document unique identifier (ID) of the ndi.document that describes the subject. The function has an alternative form: MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(FILENAME) Here, FILENAME is assumed to be a tab-delimitted text file with a header row that has entries 'name<tab>reference<tab>type<tab>devicestring<tab><subjectstring>', with one line per ndi.epoch.epochprobemap_daqsystem entry. savetofile - Write ndi.epoch.epochprobemap_daqsystem object array to disk SAVETOFILE(NDI_EPOCHPROBEMAP_DAQSYSTEM_OBJ, FILENAME) Writes the ndi.epoch.epochprobemap_daqsystem object to disk in filename FILENAME (full path).","title":"ndi.epoch.epochprobemap_daqsystem"},{"location":"reference/%2Bndi/%2Bepoch/epochprobemap_daqsystem.m/#class-ndiepochepochprobemap_daqsystem","text":"ndi.epoch.epochprobemap_daqsystem - Create a new ndi.epoch.epochprobemap_daqsystem object MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(NAME, REFERENCE, TYPE, DEVICESTRING, SUBJECTSTRING) Creates a new ndi.epoch.epochprobemap_daqsystem with name NAME, reference REFERENCE, type TYPE, and devicestring DEVICESTRING. NAME can be any string that begins with a letter and contains no whitespace. It is CASE SENSITIVE. REFERENCE must be a non-negative scalar integer. TYPE is the type of recording. DEVICESTRING is a string that indicates the channels that were used to acquire this record. SUBJECTSTRING describes the subject of the probe, either using the unique local identifier or the document unique identifier (ID) of the ndi.document that describes the subject. The function has an alternative form: MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(FILENAME) Here, FILENAME is assumed to be a tab-delimitted text file with a header row that has entries 'name<tab>reference<tab>type<tab>devicestring<tab><subjectstring>', with one line per ndi.epoch.epochprobemap_daqsystem entry.","title":"CLASS ndi.epoch.epochprobemap_daqsystem"},{"location":"reference/%2Bndi/%2Bepoch/epochprobemap_daqsystem.m/#superclasses","text":"ndi.epoch.epochprobemap","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bepoch/epochprobemap_daqsystem.m/#properties","text":"Property Description name Name of the contents; can by any string that begins with a letter and contains no whitespace reference A non-negative scalar integer reference number that uniquely identifies data records that can be combined type The type of recording that is present in the data devicestring An ndi.daq.daqsystemstring that indicates the device and channels that comprise the data subjectstring A string describing the local_id or unique document ID of the subject of the probe","title":"Properties"},{"location":"reference/%2Bndi/%2Bepoch/epochprobemap_daqsystem.m/#methods","text":"Method Description epochprobemap_daqsystem Create a new ndi.epoch.epochprobemap_daqsystem object savetofile Write ndi.epoch.epochprobemap_daqsystem object array to disk","title":"Methods"},{"location":"reference/%2Bndi/%2Bepoch/epochprobemap_daqsystem.m/#methods-help","text":"epochprobemap_daqsystem - Create a new ndi.epoch.epochprobemap_daqsystem object MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(NAME, REFERENCE, TYPE, DEVICESTRING, SUBJECTSTRING) Creates a new ndi.epoch.epochprobemap_daqsystem with name NAME, reference REFERENCE, type TYPE, and devicestring DEVICESTRING. NAME can be any string that begins with a letter and contains no whitespace. It is CASE SENSITIVE. REFERENCE must be a non-negative scalar integer. TYPE is the type of recording. DEVICESTRING is a string that indicates the channels that were used to acquire this record. SUBJECTSTRING describes the subject of the probe, either using the unique local identifier or the document unique identifier (ID) of the ndi.document that describes the subject. The function has an alternative form: MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(FILENAME) Here, FILENAME is assumed to be a tab-delimitted text file with a header row that has entries 'name<tab>reference<tab>type<tab>devicestring<tab><subjectstring>', with one line per ndi.epoch.epochprobemap_daqsystem entry. savetofile - Write ndi.epoch.epochprobemap_daqsystem object array to disk SAVETOFILE(NDI_EPOCHPROBEMAP_DAQSYSTEM_OBJ, FILENAME) Writes the ndi.epoch.epochprobemap_daqsystem object to disk in filename FILENAME (full path).","title":"Methods help"},{"location":"reference/%2Bndi/%2Bepoch/epochset.m/","text":"CLASS ndi.epoch.epochset \u00b6 NDI_EPOCHSET - routines for managing a set of epochs and their dependencies Superclasses \u00b6 none Properties \u00b6 none Methods \u00b6 Method Description buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build and store an epoch table that relates the current object's epochs to underlying epochs cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochset constructor for ndi.epoch.epochset objects epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID getcache return the NDI_CACHE and key for an ndi.epoch.epochset object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? matchedepochtable compare a hash number from an epochtable to the current version numepochs Number of epochs of ndi.epoch.epochset resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode Methods help \u00b6 buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . epoch . epochset / EPOCHNODES buildepochtable - Build and store an epoch table that relates the current object's epochs to underlying epochs [ ET ] = BUILDEPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , ' epochprobemap ' , and ' epoch_clock ' After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . The abstract class always returns ndi . time . clocktype ( ' no_time ' ) See also : ndi . time . clocktype , T0_T1 epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . epochset - constructor for ndi.epoch.epochset objects NDI_EPOCHSET_OBJ = ndi . epoch . epochset () This class has no parameters so the constructor is called with no input arguments . epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_EPOCHSET_OBJ ) Returns the object name that is used when creating epoch nodes . If the class has a ' name ' property , that property is used . Otherwise , ' unknown ' is used . epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. getcache - return the NDI_CACHE and key for an ndi.epoch.epochset object [CACHE, KEY] = GETCACHE(NDI_EPOCHSET_OBJ) Returns the NDI_CACHE object CACHE and the KEY used by the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. In this abstract class, no cache is available, so CACHE and KEY are empty. But subclasses can engage the cache services of the class by returning an NDI_CACHE object and a unique key. issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset objects , this returns 1 . For some object types ( ndi . probe . * , for example ) this will return 0 so that the underlying ndi . daq . system epochs are added . matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . epoch . epochset / EPOCHTABLE t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT","title":"ndi.epoch.epochset"},{"location":"reference/%2Bndi/%2Bepoch/epochset.m/#class-ndiepochepochset","text":"NDI_EPOCHSET - routines for managing a set of epochs and their dependencies","title":"CLASS ndi.epoch.epochset"},{"location":"reference/%2Bndi/%2Bepoch/epochset.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bepoch/epochset.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bndi/%2Bepoch/epochset.m/#methods","text":"Method Description buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build and store an epoch table that relates the current object's epochs to underlying epochs cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochset constructor for ndi.epoch.epochset objects epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID getcache return the NDI_CACHE and key for an ndi.epoch.epochset object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? matchedepochtable compare a hash number from an epochtable to the current version numepochs Number of epochs of ndi.epoch.epochset resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode","title":"Methods"},{"location":"reference/%2Bndi/%2Bepoch/epochset.m/#methods-help","text":"buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . epoch . epochset / EPOCHNODES buildepochtable - Build and store an epoch table that relates the current object's epochs to underlying epochs [ ET ] = BUILDEPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , ' epochprobemap ' , and ' epoch_clock ' After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . The abstract class always returns ndi . time . clocktype ( ' no_time ' ) See also : ndi . time . clocktype , T0_T1 epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . epochset - constructor for ndi.epoch.epochset objects NDI_EPOCHSET_OBJ = ndi . epoch . epochset () This class has no parameters so the constructor is called with no input arguments . epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_EPOCHSET_OBJ ) Returns the object name that is used when creating epoch nodes . If the class has a ' name ' property , that property is used . Otherwise , ' unknown ' is used . epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID) Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the epoch or the EPOCHID of the epoch. getcache - return the NDI_CACHE and key for an ndi.epoch.epochset object [CACHE, KEY] = GETCACHE(NDI_EPOCHSET_OBJ) Returns the NDI_CACHE object CACHE and the KEY used by the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. In this abstract class, no cache is available, so CACHE and KEY are empty. But subclasses can engage the cache services of the class by returning an NDI_CACHE object and a unique key. issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset objects , this returns 1 . For some object types ( ndi . probe . * , for example ) this will return 0 so that the underlying ndi . daq . system epochs are added . matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS(NDI_EPOCHSET_OBJ) Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ. See also: EPOCHTABLE resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . epoch . epochset / EPOCHTABLE t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT","title":"Methods help"},{"location":"reference/%2Bndi/%2Bepoch/findepochnode.m/","text":"ndi.epoch.findepochnode \u00b6 FINDEPOCHNODE - find an occurence of an epochnode in an array of epochnodes INDEX = ndi . epoch . findepochnode ( EPOCHNODE , EPOCHNODEARRAY ) Returns the index of any occurrence ( s ) of EPOCHNODE in EPOCHNODEARRAY . EPOCHNODE and EPOCHNODEARRAY should be structures of the type returned by ndi . epoch . epochset / EPOCHNODES . EPOCHNODE should be a single element , and EPOCHNODEARRAY can be an array of epochnode structures . If any fields of EPOCHNODE are empty or are not present in the structure , then that field is not searched over . Thus , INDEX can be an array of all nodes that match the other criteria . If EPOCHNODE is fully filled , then only exact matches are returned . Note : at present , the ' epochprobemap ' field is not compared . See also : ndi . epoch . epochset / EPOCHNODES","title":"ndi.epoch.findepochnode"},{"location":"reference/%2Bndi/%2Bepoch/findepochnode.m/#ndiepochfindepochnode","text":"FINDEPOCHNODE - find an occurence of an epochnode in an array of epochnodes INDEX = ndi . epoch . findepochnode ( EPOCHNODE , EPOCHNODEARRAY ) Returns the index of any occurrence ( s ) of EPOCHNODE in EPOCHNODEARRAY . EPOCHNODE and EPOCHNODEARRAY should be structures of the type returned by ndi . epoch . epochset / EPOCHNODES . EPOCHNODE should be a single element , and EPOCHNODEARRAY can be an array of epochnode structures . If any fields of EPOCHNODE are empty or are not present in the structure , then that field is not searched over . Thus , INDEX can be an array of all nodes that match the other criteria . If EPOCHNODE is fully filled , then only exact matches are returned . Note : at present , the ' epochprobemap ' field is not compared . See also : ndi . epoch . epochset / EPOCHNODES","title":"ndi.epoch.findepochnode"},{"location":"reference/%2Bndi/%2Bepoch/%2Bepochset/param.m/","text":"CLASS ndi.epoch.epochset.param \u00b6 NDI_EPOCHSET_PARAM - special class of NDI_EPOCHSET that can read/write parameters about epochs Superclasses \u00b6 ndi.epoch.epochset Properties \u00b6 Property Description epochprobemap_class The (sub)class of ndi.epoch.epochprobemap_daqsystem to be used; NDI_EPOCHCONTS is the default; a string Methods \u00b6 Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build and store an epoch table that relates the current object's epochs to underlying epochs cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch getcache return the NDI_CACHE and key for an ndi.epoch.epochset object getepochprobemap Return the epoch record for a given ndi.epoch.epochset.param epoch number getepochtag Get tag(s) from an epoch issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? matchedepochtable compare a hash number from an epochtable to the current version numepochs Number of epochs of ndi.epoch.epochset param Constructor for ndi.epoch.epochset.param objects removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk setepochprobemap Sets the epoch record of a particular epoch setepochtag Set tag(s) for an epoch t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode verifyepochprobemap Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object Methods help \u00b6 addepochtag - Add tag(s) for an epoch ADDEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will be added to any tags in the epoch EPOCHNUMBER . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . epoch . epochset . param / EPOCHNODES Help for ndi . epoch . epochset . param / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - Build and store an epoch table that relates the current object's epochs to underlying epochs [ ET ] = BUILDEPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , ' epochprobemap ' , and ' epoch_clock ' After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . epoch . epochset . param / buildepochtable is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . epoch . epochset . param / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . epoch . epochset . param / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . epoch . epochset . param / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . The abstract class always returns ndi . time . clocktype ( ' no_time ' ) See also : ndi . time . clocktype , T0_T1 Help for ndi . epoch . epochset . param / epochclock is inherited from superclass NDI . EPOCH . EPOCHSET epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . epoch . epochset . param / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . Help for ndi . epoch . epochset . param / epochid is inherited from superclass NDI . EPOCH . EPOCHSET epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . epoch . epochset . param / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochprobemapfilename - return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME ( NDI_EPOCHSET_PARAM_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHPROBEMAPFILENAME for the NDI_EPOCHSET_PARAM_OBJ epoch EPOCH_NUMBER_OR_ID . If there is no epoch NUMBER , an error is generated . The file name is returned with a full path . In this abstract class , an error is always generated . It must be overridden by child classes . epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_EPOCHSET_OBJ ) Returns the object name that is used when creating epoch nodes . If the class has a ' name ' property , that property is used . Otherwise , ' unknown ' is used . Help for ndi . epoch . epochset . param / epochsetname is inherited from superclass NDI . EPOCH . EPOCHSET epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . epoch . epochset . param / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . epoch . epochset . param / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER) In this base class, empty is returned because it is an abstract class. getcache - return the NDI_CACHE and key for an ndi.epoch.epochset object [ CACHE , KEY ] = GETCACHE ( NDI_EPOCHSET_OBJ ) Returns the NDI_CACHE object CACHE and the KEY used by the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . In this abstract class , no cache is available , so CACHE and KEY are empty . But subclasses can engage the cache services of the class by returning an NDI_CACHE object and a unique key . Help for ndi . epoch . epochset . param / getcache is inherited from superclass NDI . EPOCH . EPOCHSET getepochprobemap - Return the epoch record for a given ndi.epoch.epochset.param epoch number EPOCHPROBEMAP = GETEPOCHPROBEMAP ( NDI_EPOCHSET_PARAM_OBJ , N ) Inputs : NDI_EPOCHSET_PARAM_OBJ - the ndi . epoch . epochset . param object N - the epoch number or identifier Output : EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . If there are no files in EPOCHNUMBER then an error is returned . issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset objects , this returns 1 . For some object types ( ndi . probe . * , for example ) this will return 0 so that the underlying ndi . daq . system epochs are added . Help for ndi . epoch . epochset . param / issyncgraphroot is inherited from superclass NDI . EPOCH . EPOCHSET matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . epoch . epochset . param / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . epoch . epochset . param / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET param - Constructor for ndi.epoch.epochset.param objects NDI_EPOCHSET_PARAM_OBJ = ndi.epoch.epochset.param(EPOCHPROBEMAP_CLASS) Create a new ndi.epoch.epochset.param object. It has one optional input argument, EPOCHPROBEMAP_CLASS, a string, that specifies the name of the class or subclass of ndi.epoch.epochprobemap_daqsystem to be used. removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG ( NDI_EPOCH_PARAM_OBJ , EPOCHNUMBER , NAME ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . Any tags with name ' NAME ' will be removed from the tags in the epoch EPOCHNUMBER . tags in the epoch directory . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . NAME can be a single string , or it can be a cell array of strings ( which will result in the removal of multiple tags ) . resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . epoch . epochset . param / EPOCHTABLE Help for ndi . epoch . epochset . param / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP ( NDI_EPOCHSET_PARAM_OBJ , EPOCHPROBEMAP , NUMBER , [ OVERWRITE ] ) Sets or replaces the ndi . epoch . epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER . If OVERWRITE is present and is 1 , then any existing epoch record is overwritten . Otherwise , an error is given if there is an existing epoch record . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem setepochtag - Set tag(s) for an epoch SETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will replace any tags in the epoch directory . If there is no epoch EPOCHNUMBER , then an error is returned . t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK Help for ndi . epoch . epochset . param / t0_t1 is inherited from superclass NDI . EPOCH . EPOCHSET underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . epoch . epochset . param / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET verifyepochprobemap - Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object [ B , MSG ] = VERIFYEPOCHPROBEMAP ( ndi . epoch . epochset . param , EPOCHPROBEMAP , EPOCH_NUMBER_OR_ID ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given epoch number or epoch id EPOCH_NUMBER_OR_ID . For the abstract class EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . If B is 0 , then the error message is returned in MSG . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem","title":"ndi.epoch.epochset.param"},{"location":"reference/%2Bndi/%2Bepoch/%2Bepochset/param.m/#class-ndiepochepochsetparam","text":"NDI_EPOCHSET_PARAM - special class of NDI_EPOCHSET that can read/write parameters about epochs","title":"CLASS ndi.epoch.epochset.param"},{"location":"reference/%2Bndi/%2Bepoch/%2Bepochset/param.m/#superclasses","text":"ndi.epoch.epochset","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bepoch/%2Bepochset/param.m/#properties","text":"Property Description epochprobemap_class The (sub)class of ndi.epoch.epochprobemap_daqsystem to be used; NDI_EPOCHCONTS is the default; a string","title":"Properties"},{"location":"reference/%2Bndi/%2Bepoch/%2Bepochset/param.m/#methods","text":"Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build and store an epoch table that relates the current object's epochs to underlying epochs cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch getcache return the NDI_CACHE and key for an ndi.epoch.epochset object getepochprobemap Return the epoch record for a given ndi.epoch.epochset.param epoch number getepochtag Get tag(s) from an epoch issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? matchedepochtable compare a hash number from an epochtable to the current version numepochs Number of epochs of ndi.epoch.epochset param Constructor for ndi.epoch.epochset.param objects removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk setepochprobemap Sets the epoch record of a particular epoch setepochtag Set tag(s) for an epoch t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode verifyepochprobemap Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object","title":"Methods"},{"location":"reference/%2Bndi/%2Bepoch/%2Bepochset/param.m/#methods-help","text":"addepochtag - Add tag(s) for an epoch ADDEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will be added to any tags in the epoch EPOCHNUMBER . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . epoch . epochset . param / EPOCHNODES Help for ndi . epoch . epochset . param / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - Build and store an epoch table that relates the current object's epochs to underlying epochs [ ET ] = BUILDEPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , ' epochprobemap ' , and ' epoch_clock ' After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . epoch . epochset . param / buildepochtable is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . epoch . epochset . param / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . epoch . epochset . param / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . epoch . epochset . param / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . The abstract class always returns ndi . time . clocktype ( ' no_time ' ) See also : ndi . time . clocktype , T0_T1 Help for ndi . epoch . epochset . param / epochclock is inherited from superclass NDI . EPOCH . EPOCHSET epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . epoch . epochset . param / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . Help for ndi . epoch . epochset . param / epochid is inherited from superclass NDI . EPOCH . EPOCHSET epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . epoch . epochset . param / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochprobemapfilename - return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME ( NDI_EPOCHSET_PARAM_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHPROBEMAPFILENAME for the NDI_EPOCHSET_PARAM_OBJ epoch EPOCH_NUMBER_OR_ID . If there is no epoch NUMBER , an error is generated . The file name is returned with a full path . In this abstract class , an error is always generated . It must be overridden by child classes . epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_EPOCHSET_OBJ ) Returns the object name that is used when creating epoch nodes . If the class has a ' name ' property , that property is used . Otherwise , ' unknown ' is used . Help for ndi . epoch . epochset . param / epochsetname is inherited from superclass NDI . EPOCH . EPOCHSET epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . epoch . epochset . param / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . epoch . epochset . param / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER) In this base class, empty is returned because it is an abstract class. getcache - return the NDI_CACHE and key for an ndi.epoch.epochset object [ CACHE , KEY ] = GETCACHE ( NDI_EPOCHSET_OBJ ) Returns the NDI_CACHE object CACHE and the KEY used by the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . In this abstract class , no cache is available , so CACHE and KEY are empty . But subclasses can engage the cache services of the class by returning an NDI_CACHE object and a unique key . Help for ndi . epoch . epochset . param / getcache is inherited from superclass NDI . EPOCH . EPOCHSET getepochprobemap - Return the epoch record for a given ndi.epoch.epochset.param epoch number EPOCHPROBEMAP = GETEPOCHPROBEMAP ( NDI_EPOCHSET_PARAM_OBJ , N ) Inputs : NDI_EPOCHSET_PARAM_OBJ - the ndi . epoch . epochset . param object N - the epoch number or identifier Output : EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . If there are no files in EPOCHNUMBER then an error is returned . issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset objects , this returns 1 . For some object types ( ndi . probe . * , for example ) this will return 0 so that the underlying ndi . daq . system epochs are added . Help for ndi . epoch . epochset . param / issyncgraphroot is inherited from superclass NDI . EPOCH . EPOCHSET matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . epoch . epochset . param / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . epoch . epochset . param / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET param - Constructor for ndi.epoch.epochset.param objects NDI_EPOCHSET_PARAM_OBJ = ndi.epoch.epochset.param(EPOCHPROBEMAP_CLASS) Create a new ndi.epoch.epochset.param object. It has one optional input argument, EPOCHPROBEMAP_CLASS, a string, that specifies the name of the class or subclass of ndi.epoch.epochprobemap_daqsystem to be used. removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG ( NDI_EPOCH_PARAM_OBJ , EPOCHNUMBER , NAME ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . Any tags with name ' NAME ' will be removed from the tags in the epoch EPOCHNUMBER . tags in the epoch directory . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . NAME can be a single string , or it can be a cell array of strings ( which will result in the removal of multiple tags ) . resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . epoch . epochset . param / EPOCHTABLE Help for ndi . epoch . epochset . param / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP ( NDI_EPOCHSET_PARAM_OBJ , EPOCHPROBEMAP , NUMBER , [ OVERWRITE ] ) Sets or replaces the ndi . epoch . epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER . If OVERWRITE is present and is 1 , then any existing epoch record is overwritten . Otherwise , an error is given if there is an existing epoch record . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem setepochtag - Set tag(s) for an epoch SETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will replace any tags in the epoch directory . If there is no epoch EPOCHNUMBER , then an error is returned . t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK Help for ndi . epoch . epochset . param / t0_t1 is inherited from superclass NDI . EPOCH . EPOCHSET underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . epoch . epochset . param / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET verifyepochprobemap - Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object [ B , MSG ] = VERIFYEPOCHPROBEMAP ( ndi . epoch . epochset . param , EPOCHPROBEMAP , EPOCH_NUMBER_OR_ID ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given epoch number or epoch id EPOCH_NUMBER_OR_ID . For the abstract class EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . If B is 0 , then the error message is returned in MSG . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem","title":"Methods help"},{"location":"reference/%2Bndi/%2Bexample/%2Btutorial/plottreeshrewdata.m/","text":"ndi.example.tutorial.plottreeshrewdata \u00b6 ndi . example . tutorial . plottreeshrewdata - plot tree shrew data from Van Hooser et al . 2014 ndi . example . tutorial . plottreeshrewdata ( filename ) This function also accepts additional arguments in the form of name / value pairs ( see help NAMEVALUEPAIR ) ------------------------------------------------------------------------------- | Property ( default ) | Description | | ------------------------ | ------------------------------------------------ | | electrodeChannel ( 11 ) | Channel with the electrode recording | | stimTriggerChannel ( 2 ) | Channel with the stimulus trigger record | | syncChannel ( 4 ) | Channel with the synchronizing information | | stimCodeMarkChannel ( 32 ) | Channel with stimulus code mark information | | timeWindow ( [ 0 100 ] ) | Time window to show initially in graph | | ePhysYRange ( [ - 11 11 ] ) | ePhys Y range | | ePhysYStimLabel ( 7 ) | Y location for stimulus code type plot | | syncYRange ( [ 0 8 ] ) | stimSync Y range | | syncYStimLabel ( 7 ) | Y location for stimulus code type plot | | stimDuration ( 2 )) | Stimulus duration in seconds | | fig ( [] ) | The figure to use . If empty , make a new one | | verbose ( 1 ) | Should we print status messages ? | | plotit ( 1 ) | Plot the data | | plotstimsync ( 0 ) | Plot a graph of the stimSync data | | title_string ( '' ) | Plot title string | |-----------------------------------------------------------------------------|","title":"ndi.example.tutorial.plottreeshrewdata"},{"location":"reference/%2Bndi/%2Bexample/%2Btutorial/plottreeshrewdata.m/#ndiexampletutorialplottreeshrewdata","text":"ndi . example . tutorial . plottreeshrewdata - plot tree shrew data from Van Hooser et al . 2014 ndi . example . tutorial . plottreeshrewdata ( filename ) This function also accepts additional arguments in the form of name / value pairs ( see help NAMEVALUEPAIR ) ------------------------------------------------------------------------------- | Property ( default ) | Description | | ------------------------ | ------------------------------------------------ | | electrodeChannel ( 11 ) | Channel with the electrode recording | | stimTriggerChannel ( 2 ) | Channel with the stimulus trigger record | | syncChannel ( 4 ) | Channel with the synchronizing information | | stimCodeMarkChannel ( 32 ) | Channel with stimulus code mark information | | timeWindow ( [ 0 100 ] ) | Time window to show initially in graph | | ePhysYRange ( [ - 11 11 ] ) | ePhys Y range | | ePhysYStimLabel ( 7 ) | Y location for stimulus code type plot | | syncYRange ( [ 0 8 ] ) | stimSync Y range | | syncYStimLabel ( 7 ) | Y location for stimulus code type plot | | stimDuration ( 2 )) | Stimulus duration in seconds | | fig ( [] ) | The figure to use . If empty , make a new one | | verbose ( 1 ) | Should we print status messages ? | | plotit ( 1 ) | Plot the data | | plotstimsync ( 0 ) | Plot a graph of the stimSync data | | title_string ( '' ) | Plot title string | |-----------------------------------------------------------------------------|","title":"ndi.example.tutorial.plottreeshrewdata"},{"location":"reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_01_01.m/","text":"ndi.example.tutorial.tutorial_01_01 \u00b6 This script contains all of the code for NDI Tutorial 1: Analzying your first electrophysiology experiment with NDI Tutorial 1.1: Reading an example dataset The tutorial is available at https://vh-lab.github.io/NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset.md","title":"ndi.example.tutorial.tutorial_01_01"},{"location":"reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_01_01.m/#ndiexampletutorialtutorial_01_01","text":"This script contains all of the code for NDI Tutorial 1: Analzying your first electrophysiology experiment with NDI Tutorial 1.1: Reading an example dataset The tutorial is available at https://vh-lab.github.io/NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset.md","title":"ndi.example.tutorial.tutorial_01_01"},{"location":"reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_02_01.m/","text":"ndi.example.tutorial.tutorial_02_01 \u00b6 This script contains all of the code for NDI Tutorial 2 : Analzying your first electrophysiology experiment with NDI Tutorial 2 . 1 : Reading an example dataset The tutorial is available at https : // vh - lab . github . io / NDI - matlab / tutorials / analyzing_first_physiology_experiment / 1 _example_dataset . md","title":"ndi.example.tutorial.tutorial_02_01"},{"location":"reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_02_01.m/#ndiexampletutorialtutorial_02_01","text":"This script contains all of the code for NDI Tutorial 2 : Analzying your first electrophysiology experiment with NDI Tutorial 2 . 1 : Reading an example dataset The tutorial is available at https : // vh - lab . github . io / NDI - matlab / tutorials / analyzing_first_physiology_experiment / 1 _example_dataset . md","title":"ndi.example.tutorial.tutorial_02_01"},{"location":"reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_02_03.m/","text":"ndi.example.tutorial.tutorial_02_03 \u00b6 This script contains all of the code for NDI Tutorial 2 : Analzying your first electrophysiology experiment with NDI Tutorial 2 . 1 : Reading an example dataset The tutorial is available at https : // vh - lab . github . io / NDI - matlab / tutorials / analyzing_first_physiology_experiment / 1 _example_dataset . md","title":"ndi.example.tutorial.tutorial_02_03"},{"location":"reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_02_03.m/#ndiexampletutorialtutorial_02_03","text":"This script contains all of the code for NDI Tutorial 2 : Analzying your first electrophysiology experiment with NDI Tutorial 2 . 1 : Reading an example dataset The tutorial is available at https : // vh - lab . github . io / NDI - matlab / tutorials / analyzing_first_physiology_experiment / 1 _example_dataset . md","title":"ndi.example.tutorial.tutorial_02_03"},{"location":"reference/%2Bndi/%2Bfile/navigator.m/","text":"CLASS ndi.file.navigator \u00b6 ndi . file . navigator - object class for accessing files on disk Superclasses \u00b6 ndi.ido , ndi.epoch.epochset.param , ndi.epoch.epochset , ndi.documentservice Properties \u00b6 Property Description session The ndi.session to be examined (handle) fileparameters The parameters for finding files (see ndi.file.navigator/SETFILEPARAMETERS) epochprobemap_fileparameters The parameters for finding the epochprobemap files (see ndi.file.navigator/SETEPOCHPROBEMAPFILEPARAMETERS) identifier epochprobemap_class Methods \u00b6 Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Return an epoch table for ndi.file.navigator cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object defaultepochprobemapfilename return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochidfilename return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq determines whether two ndi.file.navigator objects are equivalent filematch_hashstring a computation to produce a (likely to be) unique string based on filematch getcache return the NDI_CACHE and key for ndi.file.navigator getepochfiles Return the file paths for one recording epoch getepochfiles_number Return the file paths for one recording epoch getepochprobemap Return the epoch record for a given ndi.epoch.epochset.param epoch number getepochtag Get tag(s) from an epoch id return the identifier of an ndi.ido object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? matchedepochtable compare a hash number from an epochtable to the current version navigator Create a new ndi.file.navigator object that is associated with an session and daqsystem ndi_unique_id Generate a unique ID number for NDI projects newdocument create an ndi.document that is based on an ndi.file.navigator object numepochs Number of epochs of ndi.epoch.epochset path Return the file path for the ndi.file.navigator object removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery create a search query that will search for this object selectfilegroups Return groups of files that will comprise epochs setepochprobemap Sets the epoch record of a particular epoch setepochprobemapfileparameters Set the epoch record fileparameters field of a ndi.file.navigator object setepochtag Set tag(s) for an epoch setfileparameters Set the fileparameters field of a ndi.file.navigator object setsession set the SESSION for an ndi.file.navigator object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode verifyepochprobemap Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object Methods help \u00b6 addepochtag - Add tag(s) for an epoch ADDEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will be added to any tags in the epoch EPOCHNUMBER . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . Help for ndi . file . navigator / addepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . file . navigator / EPOCHNODES Help for ndi . file . navigator / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - Return an epoch table for ndi.file.navigator ET = BUILDEPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains this epoch . ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' | ' underlying ' contains the file list for each epoch ; ' epoch_id ' and ' epoch_number ' | match those of NDI_FILENAVIGATOR_OBJ cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . file . navigator / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . file . navigator / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET defaultepochprobemapfilename - return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = DEFAULTEPOCHPROBEMAPFILENAME ( NDI_FILENAVIGATOR_OBJ , NUMBER ) Returns the default EPOCHPROBEMAPFILENAME for the ndi . daq . system NDI_DEVICE_OBJ for epoch NUMBER . If there are no files in epoch NUMBER , an error is generated . NUMBER cannot be an epoch id . In the base class , ndi . epoch . epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file . If the first file in the epoch file list is ' PATH/MYFILENAME.ext ' , then the default ndi . epoch . epochprobemap_daqsystem data is stored as ' PATH/.MYFILENAME.ext.epochprobemap.ndi. ' . This may be overridden if there is an EPOCHPROBEMAP_FILEPARAMETERS set . See also : ndi . file . navigator / SETEPOCHPROBEMAPFILEPARAMETERS epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . file . navigator / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . The abstract class always returns ndi . time . clocktype ( ' no_time ' ) See also : ndi . time . clocktype , T0_T1 Help for ndi . file . navigator / epochclock is inherited from superclass NDI . EPOCH . EPOCHSET epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . file . navigator / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_FILENAVIGATOR_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it is created. epochidfilename - return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME ( NDI_FILENAVIGATOR_OBJ , NUMBER ) Returns the EPOCHPROBEMAPFILENAME for the ndi . daq . system NDI_DEVICE_OBJ for epoch NUMBER . If there are no files in epoch NUMBER , an error is generated . In the base class , ndi . epoch . epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file . If the first file in the epoch file list is ' PATH/MYFILENAME.ext ' , then the ndi . epoch . epochprobemap_daqsystem data is stored as ' PATH/.MYFILENAME.ext.epochid.ndi. ' . epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . file . navigator / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochprobemapfilename - return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME ( NDI_FILENAVIGATOR_OBJ , NUMBER ) Returns the EPOCHPROBEMAPFILENAME for the ndi . file . navigator NDI_FILENAVIGATOR_OBJ for epoch NUMBER . If there are no files in epoch NUMBER , an error is generated . The file name is returned with a full path . NUMBER cannot be an epoch_id . The file name is determined by examining if the user has specified any EPOCHPROBEMAP_FILEPARAMETERS ; if not, then the DEFAULTEPOCHPROBEMAPFILENAME is used. See also : ndi . file . navigator / SETEPOCHPROBEMAPFILEPARAMETERS , ndi . file . navigator / DEFAULTEPOCHPROBEMAPFILENAME default epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_EPOCHSET_OBJ ) Returns the object name that is used when creating epoch nodes . If the class has a ' name ' property , that property is used . Otherwise , ' unknown ' is used . Help for ndi . file . navigator / epochsetname is inherited from superclass NDI . EPOCH . EPOCHSET epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . file . navigator / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . file . navigator / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME ( NDI_FILENAVIGATOR_OBJ , EPOCH_NUMBER_OR_ID ) Returns the tag file name for the ndi . file . navigator NDI_FILENAVIGATOR_OBJ for epoch EPOCH_NUMBER_OR_ID . EPOCH_NUMBER_OR_ID can be an epoch number or an epoch id . If there are no files in epoch EPOCH_NUMBER_OR_ID , an error is generated . In the base class , ndi . epoch . epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file . If the first file in the epoch file list is 'PATH/MYFILENAME.ext' , then the ndi . epoch . epochprobemap_daqsystem data is stored as 'PATH/.MYFILENAME.ext.[code].epochid.ndi.' . eq - determines whether two ndi.file.navigator objects are equivalent B = EQ ( NDI_FILENAVIGATOR_OBJ_A , NDI_FILENAVIGATOR_OBJ_B ) Returns 1 if the ndi . file . navigator objects are equivalent , and 0 otherwise . This equivalency does not depend on NDI_FILENAVIGATOR_OBJ_A and NDI_FILENAVIGATOR_OBJ_B are the same HANDLE objects . They can be equivalent and occupy different places in memory . filematch_hashstring - a computation to produce a (likely to be) unique string based on filematch FMSTR = FILEMATCH_HASHSTRING(NDI_FILENAVIGATOR_OBJ) Returns a string that is based on a hash function that is computed on the concatenated text of the 'filematch' field of the 'fileparameters' property. Note: the function used is 'crc' (see PM_HASH) getcache - return the NDI_CACHE and key for ndi.file.navigator [ CACHE , KEY ] = GETCACHE ( NDI_FILENAVIGATOR_OBJ ) Returns the CACHE and KEY for the ndi . file . navigator object . The CACHE is returned from the associated session . The KEY is the string ' filenavigator_ ' followed by the object ' s id. See also : ndi . file . navigator getepochfiles - Return the file paths for one recording epoch [ FULLPATHFILENAMES , EPOCHID ] = GETEPOCHFILES ( NDI_FILENAVIGATOR_OBJ , EPOCH_NUMBER_OR_ID ) Return the file names or file paths associated with one recording epoch of of an NDI_FILENAVIGATOR_OBJ . EPOCH_NUMBER_OR_ID can either be a number of an epoch to return , or an epoch identifier ( epoch id ). Requesting multiple epochs simultaneously : EPOCH_NUMBER_OR_ID can also be an array of numbers , in which case a cell array of cell arrays is returned in FULLPATHFILENAMES , one entry per number in EPOCH_NUMBER_OR_ID . Further , EPOCH_NUMBER_OR_ID can be a cell array of strings of multiple epoch identifiers ; in this case , a cell array of cell arrays is returned in FULLPATHFILENAMES . Uses the FILEPARAMETERS ( see ndi . file . navigator / SETFILEPARAMETERS ) to identify recording epochs under the SESSION path . See also : EPOCHID getepochfiles_number - Return the file paths for one recording epoch [ FULLPATHFILENAMES ] = GETEPOCHFILES_NUMBER ( NDI_FILENAVIGATOR_OBJ , EPOCH_NUMBER ) Return the file names or file paths associated with one recording epoch . EPOCH_NUMBER must be a number or array of epoch numbers . EPOCH_NUMBER cannot be an EPOCH_ID . If EPOCH_NUMBER is an array , then a cell array of cell arrays is returned in FULLPATHFILENAMES . Uses the FILEPARAMETERS ( see ndi . file . navigator / SETFILEPARAMETERS ) to identify recording epochs under the SESSION path . See also : GETEPOCHFILES developer note : possibility of caching this with some timeout developer note : this function exists so you can get the epoch files without calling epochtable , which also needs to get the epoch files ; infinite recursion happens getepochprobemap - Return the epoch record for a given ndi.epoch.epochset.param epoch number EPOCHPROBEMAP = GETEPOCHPROBEMAP ( NDI_EPOCHSET_PARAM_OBJ , N ) Inputs : NDI_EPOCHSET_PARAM_OBJ - the ndi . epoch . epochset . param object N - the epoch number or identifier Output : EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME Help for ndi . file . navigator / getepochprobemap is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . If there are no files in EPOCHNUMBER then an error is returned . Help for ndi . file . navigator / getepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . file . navigator / id is inherited from superclass NDI . IDO issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset objects , this returns 1 . For some object types ( ndi . probe . * , for example ) this will return 0 so that the underlying ndi . daq . system epochs are added . Help for ndi . file . navigator / issyncgraphroot is inherited from superclass NDI . EPOCH . EPOCHSET matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . file . navigator / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET navigator - Create a new ndi.file.navigator object that is associated with an session and daqsystem OBJ = ndi . file . navigator ( SESSION , [ FILEPARAMETERS , EPOCHPROBEMAP_CLASS , EPOCHPROBEMAP_FILEPARAMETERS ] ) or OBJ = ndi . file . navigator ( SESSION , NDI_FILENAVIGATOR_DOC_OBJ ) Creates a new ndi . file . navigator object that negotiates the data tree of daqsystem 's data that is stored at the file path PATH. Inputs: SESSION: an ndi.session Optional inputs: FILEPARAMETERS: the files that are recorded in each epoch of DEVICE in this data tree style (see ndi.file.navigator/SETFILEPARAMETERS for description) EPOCHPROBEMAP_CLASS: the class of epoch_record to be used; ' ndi . epoch . epochprobemap_daqsystem ' is used by default EPOCHPROBEMAP_FILEPARAMETERS : the file parameters to search for the epoch record file among the files present in each epoch ( see ndi . file . navigator / SETEPOCHPROBEMAPFILEPARAMETERS ). By default , the file location specified in ndi . file . navigator / EPOCHPROBEMAPFILENAME is used Output : OBJ - an ndi . file . navigator object See also : ndi . session ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . file . navigator . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create an ndi.document that is based on an ndi.file.navigator object NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_FILENAVIGATOR_OBJ) Creates an ndi.document of type 'ndi_document_filenavigator.json' numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . file . navigator / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET path - Return the file path for the ndi.file.navigator object THEPATH = PATH(NDI_FILENAVIGATOR_OBJ) Returns the path of the ndi.session associated with the ndi.file.navigator object NDI_FILENAVIGATOR_OBJ. removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG ( NDI_EPOCH_PARAM_OBJ , EPOCHNUMBER , NAME ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . Any tags with name ' NAME ' will be removed from the tags in the epoch EPOCHNUMBER . tags in the epoch directory . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . NAME can be a single string , or it can be a cell array of strings ( which will result in the removal of multiple tags ) . Help for ndi . file . navigator / removeepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . file . navigator / EPOCHTABLE Help for ndi . file . navigator / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET searchquery - create a search query that will search for this object SQ = SEARCHQUERY ( NDI_FILENAVIGATOR_OBJ ) Returns a database search query for this ndi . file . navigator object . selectfilegroups - Return groups of files that will comprise epochs EPOCHFILES = SELECTFILEGROUPS ( NDI_FILENAVIGATOR_OBJ ) Return the files that comprise epochs . EPOCHFILES { n } will be a cell list of the files in epoch n . For ndi . file . navigator , this simply uses the file matching parameters . See also : ndi . file . navigator / SETFILEPARAMETERS setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP ( NDI_EPOCHSET_PARAM_OBJ , EPOCHPROBEMAP , NUMBER , [ OVERWRITE ] ) Sets or replaces the ndi . epoch . epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER . If OVERWRITE is present and is 1 , then any existing epoch record is overwritten . Otherwise , an error is given if there is an existing epoch record . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem Help for ndi . file . navigator / setepochprobemap is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM setepochprobemapfileparameters - Set the epoch record fileparameters field of a ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETEPOCHPROBEMAPFILEPARAMETERS ( NDI_FILENAVIGATOR_OBJ , THEEPOCHPROBEMAPFILEPARAMETERS ) THEEPOCHPROBEMAPFILEPARAMETERS is a string or cell list of strings that specifies the epoch record file . By default , if no parameters are specified , the epoch record file is located at : [ EXP ]/ . ndi / device_name / epoch_NNNNNNNNN . ndierf , where [ EXP ] is the session 's path. However, one can pass search parameters that will search among all the file names returned by ndi.file.navigator/GETEPOCHS. The search parameter should be a regular expression or a set of regular expressions such as: Example: theepochprobemapfileparameters = ' . * \\ . ext \\ > ' Example: theepochprobemapfileparameters = {' myfile1 . ext1 ', ' myfile2 . ext2 '} Example: theepochprobemapfileparameters = {' # . ext1 ', ' myfile # . ext2 '} ( # is the same , unknown string ) setepochtag - Set tag(s) for an epoch SETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will replace any tags in the epoch directory . If there is no epoch EPOCHNUMBER , then an error is returned . Help for ndi . file . navigator / setepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM setfileparameters - Set the fileparameters field of a ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETFILEPARAMETERS(NDI_FILENAVIGATOR_OBJ, THEFILEPARAMETERS) THEFILEPARAMETERS is a string or cell list of strings that specifies the files that comprise an epoch. Example: filematch = '.*\\.ext\\>' Example: filematch = {'myfile1.ext1', 'myfile2.ext2'} Example: filematch = {'#.ext1', 'myfile#.ext2'} (# is the same, unknown string) Alternatively, THEFILEPARAMETERS can be delivered as a structure with the following fields: Fieldname: | Description ---------------------------------------------------------------------- filematch | A string or cell list of strings that need to be matched | Regular expressions are allowed | Example: filematch = '.*\\.ext\\>' | Example: filematch = {'myfile1.ext1', 'myfile2.ext2'} | Example: filematch = {'#.ext1', 'myfile#.ext2'} (# is the same, unknown string) setsession - set the SESSION for an ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETSESSION(NDI_FILENAVIGATOR_OBJ, SESSION) Set the SESSION property of an ndi.file.navigator object t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK Help for ndi . file . navigator / t0_t1 is inherited from superclass NDI . EPOCH . EPOCHSET underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . file . navigator / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET verifyepochprobemap - Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object [ B , MSG ] = VERIFYEPOCHPROBEMAP ( ndi . epoch . epochset . param , EPOCHPROBEMAP , EPOCH_NUMBER_OR_ID ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given epoch number or epoch id EPOCH_NUMBER_OR_ID . For the abstract class EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . If B is 0 , then the error message is returned in MSG . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem Help for ndi . file . navigator / verifyepochprobemap is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM","title":"ndi.file.navigator"},{"location":"reference/%2Bndi/%2Bfile/navigator.m/#class-ndifilenavigator","text":"ndi . file . navigator - object class for accessing files on disk","title":"CLASS ndi.file.navigator"},{"location":"reference/%2Bndi/%2Bfile/navigator.m/#superclasses","text":"ndi.ido , ndi.epoch.epochset.param , ndi.epoch.epochset , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bfile/navigator.m/#properties","text":"Property Description session The ndi.session to be examined (handle) fileparameters The parameters for finding files (see ndi.file.navigator/SETFILEPARAMETERS) epochprobemap_fileparameters The parameters for finding the epochprobemap files (see ndi.file.navigator/SETEPOCHPROBEMAPFILEPARAMETERS) identifier epochprobemap_class","title":"Properties"},{"location":"reference/%2Bndi/%2Bfile/navigator.m/#methods","text":"Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Return an epoch table for ndi.file.navigator cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object defaultepochprobemapfilename return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochidfilename return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq determines whether two ndi.file.navigator objects are equivalent filematch_hashstring a computation to produce a (likely to be) unique string based on filematch getcache return the NDI_CACHE and key for ndi.file.navigator getepochfiles Return the file paths for one recording epoch getepochfiles_number Return the file paths for one recording epoch getepochprobemap Return the epoch record for a given ndi.epoch.epochset.param epoch number getepochtag Get tag(s) from an epoch id return the identifier of an ndi.ido object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? matchedepochtable compare a hash number from an epochtable to the current version navigator Create a new ndi.file.navigator object that is associated with an session and daqsystem ndi_unique_id Generate a unique ID number for NDI projects newdocument create an ndi.document that is based on an ndi.file.navigator object numepochs Number of epochs of ndi.epoch.epochset path Return the file path for the ndi.file.navigator object removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery create a search query that will search for this object selectfilegroups Return groups of files that will comprise epochs setepochprobemap Sets the epoch record of a particular epoch setepochprobemapfileparameters Set the epoch record fileparameters field of a ndi.file.navigator object setepochtag Set tag(s) for an epoch setfileparameters Set the fileparameters field of a ndi.file.navigator object setsession set the SESSION for an ndi.file.navigator object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode verifyepochprobemap Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object","title":"Methods"},{"location":"reference/%2Bndi/%2Bfile/navigator.m/#methods-help","text":"addepochtag - Add tag(s) for an epoch ADDEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will be added to any tags in the epoch EPOCHNUMBER . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . Help for ndi . file . navigator / addepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . file . navigator / EPOCHNODES Help for ndi . file . navigator / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - Return an epoch table for ndi.file.navigator ET = BUILDEPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains this epoch . ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' | ' underlying ' contains the file list for each epoch ; ' epoch_id ' and ' epoch_number ' | match those of NDI_FILENAVIGATOR_OBJ cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . file . navigator / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . file . navigator / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET defaultepochprobemapfilename - return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = DEFAULTEPOCHPROBEMAPFILENAME ( NDI_FILENAVIGATOR_OBJ , NUMBER ) Returns the default EPOCHPROBEMAPFILENAME for the ndi . daq . system NDI_DEVICE_OBJ for epoch NUMBER . If there are no files in epoch NUMBER , an error is generated . NUMBER cannot be an epoch id . In the base class , ndi . epoch . epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file . If the first file in the epoch file list is ' PATH/MYFILENAME.ext ' , then the default ndi . epoch . epochprobemap_daqsystem data is stored as ' PATH/.MYFILENAME.ext.epochprobemap.ndi. ' . This may be overridden if there is an EPOCHPROBEMAP_FILEPARAMETERS set . See also : ndi . file . navigator / SETEPOCHPROBEMAPFILEPARAMETERS epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . file . navigator / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . The abstract class always returns ndi . time . clocktype ( ' no_time ' ) See also : ndi . time . clocktype , T0_T1 Help for ndi . file . navigator / epochclock is inherited from superclass NDI . EPOCH . EPOCHSET epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . file . navigator / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_FILENAVIGATOR_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it is created. epochidfilename - return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME ( NDI_FILENAVIGATOR_OBJ , NUMBER ) Returns the EPOCHPROBEMAPFILENAME for the ndi . daq . system NDI_DEVICE_OBJ for epoch NUMBER . If there are no files in epoch NUMBER , an error is generated . In the base class , ndi . epoch . epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file . If the first file in the epoch file list is ' PATH/MYFILENAME.ext ' , then the ndi . epoch . epochprobemap_daqsystem data is stored as ' PATH/.MYFILENAME.ext.epochid.ndi. ' . epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . file . navigator / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochprobemapfilename - return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME ( NDI_FILENAVIGATOR_OBJ , NUMBER ) Returns the EPOCHPROBEMAPFILENAME for the ndi . file . navigator NDI_FILENAVIGATOR_OBJ for epoch NUMBER . If there are no files in epoch NUMBER , an error is generated . The file name is returned with a full path . NUMBER cannot be an epoch_id . The file name is determined by examining if the user has specified any EPOCHPROBEMAP_FILEPARAMETERS ; if not, then the DEFAULTEPOCHPROBEMAPFILENAME is used. See also : ndi . file . navigator / SETEPOCHPROBEMAPFILEPARAMETERS , ndi . file . navigator / DEFAULTEPOCHPROBEMAPFILENAME default epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_EPOCHSET_OBJ ) Returns the object name that is used when creating epoch nodes . If the class has a ' name ' property , that property is used . Otherwise , ' unknown ' is used . Help for ndi . file . navigator / epochsetname is inherited from superclass NDI . EPOCH . EPOCHSET epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . file . navigator / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . file . navigator / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME ( NDI_FILENAVIGATOR_OBJ , EPOCH_NUMBER_OR_ID ) Returns the tag file name for the ndi . file . navigator NDI_FILENAVIGATOR_OBJ for epoch EPOCH_NUMBER_OR_ID . EPOCH_NUMBER_OR_ID can be an epoch number or an epoch id . If there are no files in epoch EPOCH_NUMBER_OR_ID , an error is generated . In the base class , ndi . epoch . epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file . If the first file in the epoch file list is 'PATH/MYFILENAME.ext' , then the ndi . epoch . epochprobemap_daqsystem data is stored as 'PATH/.MYFILENAME.ext.[code].epochid.ndi.' . eq - determines whether two ndi.file.navigator objects are equivalent B = EQ ( NDI_FILENAVIGATOR_OBJ_A , NDI_FILENAVIGATOR_OBJ_B ) Returns 1 if the ndi . file . navigator objects are equivalent , and 0 otherwise . This equivalency does not depend on NDI_FILENAVIGATOR_OBJ_A and NDI_FILENAVIGATOR_OBJ_B are the same HANDLE objects . They can be equivalent and occupy different places in memory . filematch_hashstring - a computation to produce a (likely to be) unique string based on filematch FMSTR = FILEMATCH_HASHSTRING(NDI_FILENAVIGATOR_OBJ) Returns a string that is based on a hash function that is computed on the concatenated text of the 'filematch' field of the 'fileparameters' property. Note: the function used is 'crc' (see PM_HASH) getcache - return the NDI_CACHE and key for ndi.file.navigator [ CACHE , KEY ] = GETCACHE ( NDI_FILENAVIGATOR_OBJ ) Returns the CACHE and KEY for the ndi . file . navigator object . The CACHE is returned from the associated session . The KEY is the string ' filenavigator_ ' followed by the object ' s id. See also : ndi . file . navigator getepochfiles - Return the file paths for one recording epoch [ FULLPATHFILENAMES , EPOCHID ] = GETEPOCHFILES ( NDI_FILENAVIGATOR_OBJ , EPOCH_NUMBER_OR_ID ) Return the file names or file paths associated with one recording epoch of of an NDI_FILENAVIGATOR_OBJ . EPOCH_NUMBER_OR_ID can either be a number of an epoch to return , or an epoch identifier ( epoch id ). Requesting multiple epochs simultaneously : EPOCH_NUMBER_OR_ID can also be an array of numbers , in which case a cell array of cell arrays is returned in FULLPATHFILENAMES , one entry per number in EPOCH_NUMBER_OR_ID . Further , EPOCH_NUMBER_OR_ID can be a cell array of strings of multiple epoch identifiers ; in this case , a cell array of cell arrays is returned in FULLPATHFILENAMES . Uses the FILEPARAMETERS ( see ndi . file . navigator / SETFILEPARAMETERS ) to identify recording epochs under the SESSION path . See also : EPOCHID getepochfiles_number - Return the file paths for one recording epoch [ FULLPATHFILENAMES ] = GETEPOCHFILES_NUMBER ( NDI_FILENAVIGATOR_OBJ , EPOCH_NUMBER ) Return the file names or file paths associated with one recording epoch . EPOCH_NUMBER must be a number or array of epoch numbers . EPOCH_NUMBER cannot be an EPOCH_ID . If EPOCH_NUMBER is an array , then a cell array of cell arrays is returned in FULLPATHFILENAMES . Uses the FILEPARAMETERS ( see ndi . file . navigator / SETFILEPARAMETERS ) to identify recording epochs under the SESSION path . See also : GETEPOCHFILES developer note : possibility of caching this with some timeout developer note : this function exists so you can get the epoch files without calling epochtable , which also needs to get the epoch files ; infinite recursion happens getepochprobemap - Return the epoch record for a given ndi.epoch.epochset.param epoch number EPOCHPROBEMAP = GETEPOCHPROBEMAP ( NDI_EPOCHSET_PARAM_OBJ , N ) Inputs : NDI_EPOCHSET_PARAM_OBJ - the ndi . epoch . epochset . param object N - the epoch number or identifier Output : EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME Help for ndi . file . navigator / getepochprobemap is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . If there are no files in EPOCHNUMBER then an error is returned . Help for ndi . file . navigator / getepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . file . navigator / id is inherited from superclass NDI . IDO issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset objects , this returns 1 . For some object types ( ndi . probe . * , for example ) this will return 0 so that the underlying ndi . daq . system epochs are added . Help for ndi . file . navigator / issyncgraphroot is inherited from superclass NDI . EPOCH . EPOCHSET matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . file . navigator / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET navigator - Create a new ndi.file.navigator object that is associated with an session and daqsystem OBJ = ndi . file . navigator ( SESSION , [ FILEPARAMETERS , EPOCHPROBEMAP_CLASS , EPOCHPROBEMAP_FILEPARAMETERS ] ) or OBJ = ndi . file . navigator ( SESSION , NDI_FILENAVIGATOR_DOC_OBJ ) Creates a new ndi . file . navigator object that negotiates the data tree of daqsystem 's data that is stored at the file path PATH. Inputs: SESSION: an ndi.session Optional inputs: FILEPARAMETERS: the files that are recorded in each epoch of DEVICE in this data tree style (see ndi.file.navigator/SETFILEPARAMETERS for description) EPOCHPROBEMAP_CLASS: the class of epoch_record to be used; ' ndi . epoch . epochprobemap_daqsystem ' is used by default EPOCHPROBEMAP_FILEPARAMETERS : the file parameters to search for the epoch record file among the files present in each epoch ( see ndi . file . navigator / SETEPOCHPROBEMAPFILEPARAMETERS ). By default , the file location specified in ndi . file . navigator / EPOCHPROBEMAPFILENAME is used Output : OBJ - an ndi . file . navigator object See also : ndi . session ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . file . navigator . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create an ndi.document that is based on an ndi.file.navigator object NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_FILENAVIGATOR_OBJ) Creates an ndi.document of type 'ndi_document_filenavigator.json' numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . file . navigator / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET path - Return the file path for the ndi.file.navigator object THEPATH = PATH(NDI_FILENAVIGATOR_OBJ) Returns the path of the ndi.session associated with the ndi.file.navigator object NDI_FILENAVIGATOR_OBJ. removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG ( NDI_EPOCH_PARAM_OBJ , EPOCHNUMBER , NAME ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . Any tags with name ' NAME ' will be removed from the tags in the epoch EPOCHNUMBER . tags in the epoch directory . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . NAME can be a single string , or it can be a cell array of strings ( which will result in the removal of multiple tags ) . Help for ndi . file . navigator / removeepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . file . navigator / EPOCHTABLE Help for ndi . file . navigator / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET searchquery - create a search query that will search for this object SQ = SEARCHQUERY ( NDI_FILENAVIGATOR_OBJ ) Returns a database search query for this ndi . file . navigator object . selectfilegroups - Return groups of files that will comprise epochs EPOCHFILES = SELECTFILEGROUPS ( NDI_FILENAVIGATOR_OBJ ) Return the files that comprise epochs . EPOCHFILES { n } will be a cell list of the files in epoch n . For ndi . file . navigator , this simply uses the file matching parameters . See also : ndi . file . navigator / SETFILEPARAMETERS setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP ( NDI_EPOCHSET_PARAM_OBJ , EPOCHPROBEMAP , NUMBER , [ OVERWRITE ] ) Sets or replaces the ndi . epoch . epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER . If OVERWRITE is present and is 1 , then any existing epoch record is overwritten . Otherwise , an error is given if there is an existing epoch record . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem Help for ndi . file . navigator / setepochprobemap is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM setepochprobemapfileparameters - Set the epoch record fileparameters field of a ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETEPOCHPROBEMAPFILEPARAMETERS ( NDI_FILENAVIGATOR_OBJ , THEEPOCHPROBEMAPFILEPARAMETERS ) THEEPOCHPROBEMAPFILEPARAMETERS is a string or cell list of strings that specifies the epoch record file . By default , if no parameters are specified , the epoch record file is located at : [ EXP ]/ . ndi / device_name / epoch_NNNNNNNNN . ndierf , where [ EXP ] is the session 's path. However, one can pass search parameters that will search among all the file names returned by ndi.file.navigator/GETEPOCHS. The search parameter should be a regular expression or a set of regular expressions such as: Example: theepochprobemapfileparameters = ' . * \\ . ext \\ > ' Example: theepochprobemapfileparameters = {' myfile1 . ext1 ', ' myfile2 . ext2 '} Example: theepochprobemapfileparameters = {' # . ext1 ', ' myfile # . ext2 '} ( # is the same , unknown string ) setepochtag - Set tag(s) for an epoch SETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will replace any tags in the epoch directory . If there is no epoch EPOCHNUMBER , then an error is returned . Help for ndi . file . navigator / setepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM setfileparameters - Set the fileparameters field of a ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETFILEPARAMETERS(NDI_FILENAVIGATOR_OBJ, THEFILEPARAMETERS) THEFILEPARAMETERS is a string or cell list of strings that specifies the files that comprise an epoch. Example: filematch = '.*\\.ext\\>' Example: filematch = {'myfile1.ext1', 'myfile2.ext2'} Example: filematch = {'#.ext1', 'myfile#.ext2'} (# is the same, unknown string) Alternatively, THEFILEPARAMETERS can be delivered as a structure with the following fields: Fieldname: | Description ---------------------------------------------------------------------- filematch | A string or cell list of strings that need to be matched | Regular expressions are allowed | Example: filematch = '.*\\.ext\\>' | Example: filematch = {'myfile1.ext1', 'myfile2.ext2'} | Example: filematch = {'#.ext1', 'myfile#.ext2'} (# is the same, unknown string) setsession - set the SESSION for an ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETSESSION(NDI_FILENAVIGATOR_OBJ, SESSION) Set the SESSION property of an ndi.file.navigator object t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK Help for ndi . file . navigator / t0_t1 is inherited from superclass NDI . EPOCH . EPOCHSET underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . file . navigator / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET verifyepochprobemap - Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object [ B , MSG ] = VERIFYEPOCHPROBEMAP ( ndi . epoch . epochset . param , EPOCHPROBEMAP , EPOCH_NUMBER_OR_ID ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given epoch number or epoch id EPOCH_NUMBER_OR_ID . For the abstract class EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . If B is 0 , then the error message is returned in MSG . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem Help for ndi . file . navigator / verifyepochprobemap is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM","title":"Methods help"},{"location":"reference/%2Bndi/%2Bfile/%2Bnavigator/epochdir.m/","text":"CLASS ndi.file.navigator.epochdir \u00b6 NDI_FILENAVIGATOR_EPOCHDIR - Create a new NDI_FILENAVIGATOR_EPOCHDIR object DT = FILENAVIGATOR_EPOCHDIR(EXP, FILETYPE) Creates a new file tree object with the session name This class in inhereted from filenavigator and with epochdir organization Superclasses \u00b6 ndi.file.navigator , ndi.ido , ndi.epoch.epochset.param , ndi.epoch.epochset , ndi.documentservice Properties \u00b6 Property Description session fileparameters epochprobemap_fileparameters identifier epochprobemap_class Methods \u00b6 Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Return an epoch table for ndi.file.navigator cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object defaultepochprobemapfilename return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochdir Create a new ndi.file.navigator.epochdir object that is associated with an session and device epochgraph graph of the mapping and cost of converting time among epochs epochid EPOCHID = Get the epoch identifier for a particular epoch epochidfilename return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq determines whether two ndi.file.navigator objects are equivalent filematch_hashstring a computation to produce a (likely to be) unique string based on filematch getcache return the NDI_CACHE and key for ndi.file.navigator getepochfiles Return the file paths for one recording epoch getepochfiles_number Return the file paths for one recording epoch getepochprobemap Return the epoch record for a given ndi.epoch.epochset.param epoch number getepochtag Get tag(s) from an epoch id return the identifier of an ndi.ido object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? matchedepochtable compare a hash number from an epochtable to the current version ndi_unique_id Generate a unique ID number for NDI projects newdocument create an ndi.document that is based on an ndi.file.navigator object numepochs Number of epochs of ndi.epoch.epochset path Return the file path for the ndi.file.navigator object removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery create a search query that will search for this object selectfilegroups Return groups of files that will comprise epochs setepochprobemap Sets the epoch record of a particular epoch setepochprobemapfileparameters Set the epoch record fileparameters field of a ndi.file.navigator object setepochtag Set tag(s) for an epoch setfileparameters Set the fileparameters field of a ndi.file.navigator object setsession set the SESSION for an ndi.file.navigator object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode verifyepochprobemap Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object Methods help \u00b6 addepochtag - Add tag(s) for an epoch ADDEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will be added to any tags in the epoch EPOCHNUMBER . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . Help for ndi . file . navigator . epochdir / addepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . file . navigator . epochdir / EPOCHNODES Help for ndi . file . navigator . epochdir / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - Return an epoch table for ndi.file.navigator ET = BUILDEPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains this epoch . ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' | ' underlying ' contains the file list for each epoch ; ' epoch_id ' and ' epoch_number ' | match those of NDI_FILENAVIGATOR_OBJ Help for ndi . file . navigator . epochdir / buildepochtable is inherited from superclass NDI . FILE . NAVIGATOR cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . file . navigator . epochdir / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . file . navigator . epochdir / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET defaultepochprobemapfilename - return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = DEFAULTEPOCHPROBEMAPFILENAME ( NDI_FILENAVIGATOR_OBJ , NUMBER ) Returns the default EPOCHPROBEMAPFILENAME for the ndi . daq . system NDI_DEVICE_OBJ for epoch NUMBER . If there are no files in epoch NUMBER , an error is generated . NUMBER cannot be an epoch id . In the base class , ndi . epoch . epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file . If the first file in the epoch file list is ' PATH/MYFILENAME.ext ' , then the default ndi . epoch . epochprobemap_daqsystem data is stored as ' PATH/.MYFILENAME.ext.epochprobemap.ndi. ' . This may be overridden if there is an EPOCHPROBEMAP_FILEPARAMETERS set . See also : ndi . file . navigator . epochdir / SETEPOCHPROBEMAPFILEPARAMETERS Help for ndi . file . navigator . epochdir / defaultepochprobemapfilename is inherited from superclass NDI . FILE . NAVIGATOR epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . file . navigator . epochdir / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . The abstract class always returns ndi . time . clocktype ( ' no_time ' ) See also : ndi . time . clocktype , T0_T1 Help for ndi . file . navigator . epochdir / epochclock is inherited from superclass NDI . EPOCH . EPOCHSET epochdir - Create a new ndi.file.navigator.epochdir object that is associated with an session and device OBJ = ndi . file . navigator . epochdir ( EXP , [ FILEPARAMETERS , EPOCHPROBEMAP_CLASS , EPOCHPROBEMAP_FILEPARAMETERS ] ) Creates a new ndi . file . navigator . epochdir object that negotiates the data tree of device 's data that is stored in an session EXP. (document FILEPARAMETERS) Inputs: EXP - an ndi.session ; FILEPARAMETERS - the files that are recorded in each epoch FILEPARAMETERS: the files that are recorded in each epoch of DEVICE in this data tree style (see ndi.file.navigator/SETFILEPARAMETERS for description) EPOCHPROBEMAP_CLASS: the class of epoch_record to be used; ' ndi . epoch . epochprobemap_daqsystem ' is used by default EPOCHPROBEMAP_FILEPARAMETERS : the file parameters to search for the epoch record file among the files present in each epoch ( see ndi . file . navigator / SETEPOCHPROBEMAPFILEPARAMETERS ). By default , the file location specified in ndi . file . navigator / EPOCHPROBEMAPFILENAME is used Output : OBJ - an ndi . file . navigator . epochdir object See also : ndi . session , ndi . daq . system epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . file . navigator . epochdir / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - EPOCHID = Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_FILENAVIGATOR_EPOCHDIR_OBJ , EPOCH_NUMBER , [ EPOCHFILES ] ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . For the ndi . file . navigator . epochdir object , each EPOCH is organized in its own subdirectory , and the epoch identifier is the _name_ of the subdirectory . For example , if my device has a file tree that reads files with extension . dat , the session directory is mysession / t00001 / mydata . dat Then ID is 't00001' epochidfilename - return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME ( NDI_FILENAVIGATOR_OBJ , NUMBER ) Returns the EPOCHPROBEMAPFILENAME for the ndi . daq . system NDI_DEVICE_OBJ for epoch NUMBER . If there are no files in epoch NUMBER , an error is generated . In the base class , ndi . epoch . epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file . If the first file in the epoch file list is ' PATH/MYFILENAME.ext ' , then the ndi . epoch . epochprobemap_daqsystem data is stored as ' PATH/.MYFILENAME.ext.epochid.ndi. ' . Help for ndi . file . navigator . epochdir / epochidfilename is inherited from superclass NDI . FILE . NAVIGATOR epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . file . navigator . epochdir / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochprobemapfilename - return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME ( NDI_FILENAVIGATOR_OBJ , NUMBER ) Returns the EPOCHPROBEMAPFILENAME for the ndi . file . navigator NDI_FILENAVIGATOR_OBJ for epoch NUMBER . If there are no files in epoch NUMBER , an error is generated . The file name is returned with a full path . NUMBER cannot be an epoch_id . The file name is determined by examining if the user has specified any EPOCHPROBEMAP_FILEPARAMETERS ; if not, then the DEFAULTEPOCHPROBEMAPFILENAME is used. See also : ndi . file . navigator . epochdir / SETEPOCHPROBEMAPFILEPARAMETERS , ndi . file . navigator . epochdir / DEFAULTEPOCHPROBEMAPFILENAME default Help for ndi . file . navigator . epochdir / epochprobemapfilename is inherited from superclass NDI . FILE . NAVIGATOR epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_EPOCHSET_OBJ ) Returns the object name that is used when creating epoch nodes . If the class has a ' name ' property , that property is used . Otherwise , ' unknown ' is used . Help for ndi . file . navigator . epochdir / epochsetname is inherited from superclass NDI . EPOCH . EPOCHSET epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . file . navigator . epochdir / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . file . navigator . epochdir / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME ( NDI_FILENAVIGATOR_OBJ , EPOCH_NUMBER_OR_ID ) Returns the tag file name for the ndi . file . navigator NDI_FILENAVIGATOR_OBJ for epoch EPOCH_NUMBER_OR_ID . EPOCH_NUMBER_OR_ID can be an epoch number or an epoch id . If there are no files in epoch EPOCH_NUMBER_OR_ID , an error is generated . In the base class , ndi . epoch . epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file . If the first file in the epoch file list is 'PATH/MYFILENAME.ext' , then the ndi . epoch . epochprobemap_daqsystem data is stored as 'PATH/.MYFILENAME.ext.[code].epochid.ndi.' . Help for ndi . file . navigator . epochdir / epochtagfilename is inherited from superclass NDI . FILE . NAVIGATOR eq - determines whether two ndi.file.navigator objects are equivalent B = EQ ( NDI_FILENAVIGATOR_OBJ_A , NDI_FILENAVIGATOR_OBJ_B ) Returns 1 if the ndi . file . navigator objects are equivalent , and 0 otherwise . This equivalency does not depend on NDI_FILENAVIGATOR_OBJ_A and NDI_FILENAVIGATOR_OBJ_B are the same HANDLE objects . They can be equivalent and occupy different places in memory . Help for ndi . file . navigator . epochdir / eq is inherited from superclass NDI . FILE . NAVIGATOR filematch_hashstring - a computation to produce a (likely to be) unique string based on filematch FMSTR = FILEMATCH_HASHSTRING ( NDI_FILENAVIGATOR_OBJ ) Returns a string that is based on a hash function that is computed on the concatenated text of the ' filematch ' field of the ' fileparameters ' property . Note : the function used is ' crc ' ( see PM_HASH ) Help for ndi . file . navigator . epochdir / filematch_hashstring is inherited from superclass NDI . FILE . NAVIGATOR getcache - return the NDI_CACHE and key for ndi.file.navigator [ CACHE , KEY ] = GETCACHE ( NDI_FILENAVIGATOR_OBJ ) Returns the CACHE and KEY for the ndi . file . navigator object . The CACHE is returned from the associated session . The KEY is the string ' filenavigator_ ' followed by the object ' s id. See also : ndi . file . navigator . epochdir Help for ndi . file . navigator . epochdir / getcache is inherited from superclass NDI . FILE . NAVIGATOR getepochfiles - Return the file paths for one recording epoch [ FULLPATHFILENAMES , EPOCHID ] = GETEPOCHFILES ( NDI_FILENAVIGATOR_OBJ , EPOCH_NUMBER_OR_ID ) Return the file names or file paths associated with one recording epoch of of an NDI_FILENAVIGATOR_OBJ . EPOCH_NUMBER_OR_ID can either be a number of an epoch to return , or an epoch identifier ( epoch id ). Requesting multiple epochs simultaneously : EPOCH_NUMBER_OR_ID can also be an array of numbers , in which case a cell array of cell arrays is returned in FULLPATHFILENAMES , one entry per number in EPOCH_NUMBER_OR_ID . Further , EPOCH_NUMBER_OR_ID can be a cell array of strings of multiple epoch identifiers ; in this case , a cell array of cell arrays is returned in FULLPATHFILENAMES . Uses the FILEPARAMETERS ( see ndi . file . navigator / SETFILEPARAMETERS ) to identify recording epochs under the SESSION path . See also : EPOCHID Help for ndi . file . navigator . epochdir / getepochfiles is inherited from superclass NDI . FILE . NAVIGATOR getepochfiles_number - Return the file paths for one recording epoch [ FULLPATHFILENAMES ] = GETEPOCHFILES_NUMBER ( NDI_FILENAVIGATOR_OBJ , EPOCH_NUMBER ) Return the file names or file paths associated with one recording epoch . EPOCH_NUMBER must be a number or array of epoch numbers . EPOCH_NUMBER cannot be an EPOCH_ID . If EPOCH_NUMBER is an array , then a cell array of cell arrays is returned in FULLPATHFILENAMES . Uses the FILEPARAMETERS ( see ndi . file . navigator / SETFILEPARAMETERS ) to identify recording epochs under the SESSION path . See also : GETEPOCHFILES developer note : possibility of caching this with some timeout developer note : this function exists so you can get the epoch files without calling epochtable , which also needs to get the epoch files ; infinite recursion happens Help for ndi . file . navigator . epochdir / getepochfiles_number is inherited from superclass NDI . FILE . NAVIGATOR getepochprobemap - Return the epoch record for a given ndi.epoch.epochset.param epoch number EPOCHPROBEMAP = GETEPOCHPROBEMAP ( NDI_EPOCHSET_PARAM_OBJ , N ) Inputs : NDI_EPOCHSET_PARAM_OBJ - the ndi . epoch . epochset . param object N - the epoch number or identifier Output : EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME Help for ndi . file . navigator . epochdir / getepochprobemap is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . If there are no files in EPOCHNUMBER then an error is returned . Help for ndi . file . navigator . epochdir / getepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . file . navigator . epochdir / id is inherited from superclass NDI . IDO issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset objects , this returns 1 . For some object types ( ndi . probe . * , for example ) this will return 0 so that the underlying ndi . daq . system epochs are added . Help for ndi . file . navigator . epochdir / issyncgraphroot is inherited from superclass NDI . EPOCH . EPOCHSET matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . file . navigator . epochdir / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . file . navigator . epochdir . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create an ndi.document that is based on an ndi.file.navigator object NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_FILENAVIGATOR_OBJ ) Creates an ndi . document of type ' ndi_document_filenavigator.json ' Help for ndi . file . navigator . epochdir / newdocument is inherited from superclass NDI . FILE . NAVIGATOR numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . file . navigator . epochdir / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET path - Return the file path for the ndi.file.navigator object THEPATH = PATH ( NDI_FILENAVIGATOR_OBJ ) Returns the path of the ndi . session associated with the ndi . file . navigator object NDI_FILENAVIGATOR_OBJ . Help for ndi . file . navigator . epochdir / path is inherited from superclass NDI . FILE . NAVIGATOR removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG ( NDI_EPOCH_PARAM_OBJ , EPOCHNUMBER , NAME ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . Any tags with name ' NAME ' will be removed from the tags in the epoch EPOCHNUMBER . tags in the epoch directory . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . NAME can be a single string , or it can be a cell array of strings ( which will result in the removal of multiple tags ) . Help for ndi . file . navigator . epochdir / removeepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . file . navigator . epochdir / EPOCHTABLE Help for ndi . file . navigator . epochdir / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET searchquery - create a search query that will search for this object SQ = SEARCHQUERY ( NDI_FILENAVIGATOR_OBJ ) Returns a database search query for this ndi . file . navigator object . Help for ndi . file . navigator . epochdir / searchquery is inherited from superclass NDI . FILE . NAVIGATOR selectfilegroups - Return groups of files that will comprise epochs EPOCHFILES = SELECTFILEGROUPS ( NDI_FILENAVIGATOR_EPOCHDIR_OBJ ) Return the files that comprise epochs . EPOCHFILES { n } will be a cell list of the files in epoch n . For ndi . file . navigator . epochdir , this uses the file matching parameters in all subdirectories within the session ( at a folder depth of 1 ; that is, it doesn't search folders in folders ) . See also : ndi . file . navigator / SETFILEPARAMETERS setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP ( NDI_EPOCHSET_PARAM_OBJ , EPOCHPROBEMAP , NUMBER , [ OVERWRITE ] ) Sets or replaces the ndi . epoch . epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER . If OVERWRITE is present and is 1 , then any existing epoch record is overwritten . Otherwise , an error is given if there is an existing epoch record . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem Help for ndi . file . navigator . epochdir / setepochprobemap is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM setepochprobemapfileparameters - Set the epoch record fileparameters field of a ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETEPOCHPROBEMAPFILEPARAMETERS ( NDI_FILENAVIGATOR_OBJ , THEEPOCHPROBEMAPFILEPARAMETERS ) THEEPOCHPROBEMAPFILEPARAMETERS is a string or cell list of strings that specifies the epoch record file . By default , if no parameters are specified , the epoch record file is located at : [ EXP ]/ . ndi / device_name / epoch_NNNNNNNNN . ndierf , where [ EXP ] is the session 's path. However, one can pass search parameters that will search among all the file names returned by ndi.file.navigator/GETEPOCHS. The search parameter should be a regular expression or a set of regular expressions such as: Example: theepochprobemapfileparameters = ' . * \\ . ext \\ > ' Example: theepochprobemapfileparameters = {' myfile1 . ext1 ', ' myfile2 . ext2 '} Example: theepochprobemapfileparameters = {' # . ext1 ', ' myfile # . ext2 '} ( # is the same , unknown string ) Help for ndi . file . navigator . epochdir / setepochprobemapfileparameters is inherited from superclass NDI . FILE . NAVIGATOR setepochtag - Set tag(s) for an epoch SETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will replace any tags in the epoch directory . If there is no epoch EPOCHNUMBER , then an error is returned . Help for ndi . file . navigator . epochdir / setepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM setfileparameters - Set the fileparameters field of a ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETFILEPARAMETERS ( NDI_FILENAVIGATOR_OBJ , THEFILEPARAMETERS ) THEFILEPARAMETERS is a string or cell list of strings that specifies the files that comprise an epoch . Example : filematch = ' .*\\.ext\\> ' Example : filematch = { ' myfile1.ext1 ' , ' myfile2.ext2 ' } Example : filematch = { ' #.ext1 ' , ' myfile#.ext2 ' } ( # is the same , unknown string ) Alternatively , THEFILEPARAMETERS can be delivered as a structure with the following fields : Fieldname : | Description ---------------------------------------------------------------------- filematch | A string or cell list of strings that need to be matched | Regular expressions are allowed | Example : filematch = ' .*\\.ext\\> ' | Example : filematch = { ' myfile1.ext1 ' , ' myfile2.ext2 ' } | Example : filematch = { ' #.ext1 ' , ' myfile#.ext2 ' } ( # is the same , unknown string ) Help for ndi . file . navigator . epochdir / setfileparameters is inherited from superclass NDI . FILE . NAVIGATOR setsession - set the SESSION for an ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETSESSION ( NDI_FILENAVIGATOR_OBJ , SESSION ) Set the SESSION property of an ndi . file . navigator object Help for ndi . file . navigator . epochdir / setsession is inherited from superclass NDI . FILE . NAVIGATOR t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK Help for ndi . file . navigator . epochdir / t0_t1 is inherited from superclass NDI . EPOCH . EPOCHSET underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . file . navigator . epochdir / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET verifyepochprobemap - Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object [ B , MSG ] = VERIFYEPOCHPROBEMAP ( ndi . epoch . epochset . param , EPOCHPROBEMAP , EPOCH_NUMBER_OR_ID ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given epoch number or epoch id EPOCH_NUMBER_OR_ID . For the abstract class EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . If B is 0 , then the error message is returned in MSG . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem Help for ndi . file . navigator . epochdir / verifyepochprobemap is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM","title":"ndi.file.navigator.epochdir"},{"location":"reference/%2Bndi/%2Bfile/%2Bnavigator/epochdir.m/#class-ndifilenavigatorepochdir","text":"NDI_FILENAVIGATOR_EPOCHDIR - Create a new NDI_FILENAVIGATOR_EPOCHDIR object DT = FILENAVIGATOR_EPOCHDIR(EXP, FILETYPE) Creates a new file tree object with the session name This class in inhereted from filenavigator and with epochdir organization","title":"CLASS ndi.file.navigator.epochdir"},{"location":"reference/%2Bndi/%2Bfile/%2Bnavigator/epochdir.m/#superclasses","text":"ndi.file.navigator , ndi.ido , ndi.epoch.epochset.param , ndi.epoch.epochset , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bfile/%2Bnavigator/epochdir.m/#properties","text":"Property Description session fileparameters epochprobemap_fileparameters identifier epochprobemap_class","title":"Properties"},{"location":"reference/%2Bndi/%2Bfile/%2Bnavigator/epochdir.m/#methods","text":"Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Return an epoch table for ndi.file.navigator cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object defaultepochprobemapfilename return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochdir Create a new ndi.file.navigator.epochdir object that is associated with an session and device epochgraph graph of the mapping and cost of converting time among epochs epochid EPOCHID = Get the epoch identifier for a particular epoch epochidfilename return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq determines whether two ndi.file.navigator objects are equivalent filematch_hashstring a computation to produce a (likely to be) unique string based on filematch getcache return the NDI_CACHE and key for ndi.file.navigator getepochfiles Return the file paths for one recording epoch getepochfiles_number Return the file paths for one recording epoch getepochprobemap Return the epoch record for a given ndi.epoch.epochset.param epoch number getepochtag Get tag(s) from an epoch id return the identifier of an ndi.ido object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? matchedepochtable compare a hash number from an epochtable to the current version ndi_unique_id Generate a unique ID number for NDI projects newdocument create an ndi.document that is based on an ndi.file.navigator object numepochs Number of epochs of ndi.epoch.epochset path Return the file path for the ndi.file.navigator object removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery create a search query that will search for this object selectfilegroups Return groups of files that will comprise epochs setepochprobemap Sets the epoch record of a particular epoch setepochprobemapfileparameters Set the epoch record fileparameters field of a ndi.file.navigator object setepochtag Set tag(s) for an epoch setfileparameters Set the fileparameters field of a ndi.file.navigator object setsession set the SESSION for an ndi.file.navigator object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode verifyepochprobemap Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object","title":"Methods"},{"location":"reference/%2Bndi/%2Bfile/%2Bnavigator/epochdir.m/#methods-help","text":"addepochtag - Add tag(s) for an epoch ADDEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will be added to any tags in the epoch EPOCHNUMBER . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . Help for ndi . file . navigator . epochdir / addepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . file . navigator . epochdir / EPOCHNODES Help for ndi . file . navigator . epochdir / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - Return an epoch table for ndi.file.navigator ET = BUILDEPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains this epoch . ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' | ' underlying ' contains the file list for each epoch ; ' epoch_id ' and ' epoch_number ' | match those of NDI_FILENAVIGATOR_OBJ Help for ndi . file . navigator . epochdir / buildepochtable is inherited from superclass NDI . FILE . NAVIGATOR cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . file . navigator . epochdir / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . file . navigator . epochdir / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET defaultepochprobemapfilename - return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = DEFAULTEPOCHPROBEMAPFILENAME ( NDI_FILENAVIGATOR_OBJ , NUMBER ) Returns the default EPOCHPROBEMAPFILENAME for the ndi . daq . system NDI_DEVICE_OBJ for epoch NUMBER . If there are no files in epoch NUMBER , an error is generated . NUMBER cannot be an epoch id . In the base class , ndi . epoch . epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file . If the first file in the epoch file list is ' PATH/MYFILENAME.ext ' , then the default ndi . epoch . epochprobemap_daqsystem data is stored as ' PATH/.MYFILENAME.ext.epochprobemap.ndi. ' . This may be overridden if there is an EPOCHPROBEMAP_FILEPARAMETERS set . See also : ndi . file . navigator . epochdir / SETEPOCHPROBEMAPFILEPARAMETERS Help for ndi . file . navigator . epochdir / defaultepochprobemapfilename is inherited from superclass NDI . FILE . NAVIGATOR epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . file . navigator . epochdir / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . The abstract class always returns ndi . time . clocktype ( ' no_time ' ) See also : ndi . time . clocktype , T0_T1 Help for ndi . file . navigator . epochdir / epochclock is inherited from superclass NDI . EPOCH . EPOCHSET epochdir - Create a new ndi.file.navigator.epochdir object that is associated with an session and device OBJ = ndi . file . navigator . epochdir ( EXP , [ FILEPARAMETERS , EPOCHPROBEMAP_CLASS , EPOCHPROBEMAP_FILEPARAMETERS ] ) Creates a new ndi . file . navigator . epochdir object that negotiates the data tree of device 's data that is stored in an session EXP. (document FILEPARAMETERS) Inputs: EXP - an ndi.session ; FILEPARAMETERS - the files that are recorded in each epoch FILEPARAMETERS: the files that are recorded in each epoch of DEVICE in this data tree style (see ndi.file.navigator/SETFILEPARAMETERS for description) EPOCHPROBEMAP_CLASS: the class of epoch_record to be used; ' ndi . epoch . epochprobemap_daqsystem ' is used by default EPOCHPROBEMAP_FILEPARAMETERS : the file parameters to search for the epoch record file among the files present in each epoch ( see ndi . file . navigator / SETEPOCHPROBEMAPFILEPARAMETERS ). By default , the file location specified in ndi . file . navigator / EPOCHPROBEMAPFILENAME is used Output : OBJ - an ndi . file . navigator . epochdir object See also : ndi . session , ndi . daq . system epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . file . navigator . epochdir / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - EPOCHID = Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_FILENAVIGATOR_EPOCHDIR_OBJ , EPOCH_NUMBER , [ EPOCHFILES ] ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . For the ndi . file . navigator . epochdir object , each EPOCH is organized in its own subdirectory , and the epoch identifier is the _name_ of the subdirectory . For example , if my device has a file tree that reads files with extension . dat , the session directory is mysession / t00001 / mydata . dat Then ID is 't00001' epochidfilename - return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME ( NDI_FILENAVIGATOR_OBJ , NUMBER ) Returns the EPOCHPROBEMAPFILENAME for the ndi . daq . system NDI_DEVICE_OBJ for epoch NUMBER . If there are no files in epoch NUMBER , an error is generated . In the base class , ndi . epoch . epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file . If the first file in the epoch file list is ' PATH/MYFILENAME.ext ' , then the ndi . epoch . epochprobemap_daqsystem data is stored as ' PATH/.MYFILENAME.ext.epochid.ndi. ' . Help for ndi . file . navigator . epochdir / epochidfilename is inherited from superclass NDI . FILE . NAVIGATOR epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . file . navigator . epochdir / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochprobemapfilename - return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch ECFNAME = EPOCHPROBEMAPFILENAME ( NDI_FILENAVIGATOR_OBJ , NUMBER ) Returns the EPOCHPROBEMAPFILENAME for the ndi . file . navigator NDI_FILENAVIGATOR_OBJ for epoch NUMBER . If there are no files in epoch NUMBER , an error is generated . The file name is returned with a full path . NUMBER cannot be an epoch_id . The file name is determined by examining if the user has specified any EPOCHPROBEMAP_FILEPARAMETERS ; if not, then the DEFAULTEPOCHPROBEMAPFILENAME is used. See also : ndi . file . navigator . epochdir / SETEPOCHPROBEMAPFILEPARAMETERS , ndi . file . navigator . epochdir / DEFAULTEPOCHPROBEMAPFILENAME default Help for ndi . file . navigator . epochdir / epochprobemapfilename is inherited from superclass NDI . FILE . NAVIGATOR epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_EPOCHSET_OBJ ) Returns the object name that is used when creating epoch nodes . If the class has a ' name ' property , that property is used . Otherwise , ' unknown ' is used . Help for ndi . file . navigator . epochdir / epochsetname is inherited from superclass NDI . EPOCH . EPOCHSET epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . file . navigator . epochdir / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . file . navigator . epochdir / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET epochtagfilename - return the file path for the tag file for an epoch ETFNAME = EPOCHTAGFILENAME ( NDI_FILENAVIGATOR_OBJ , EPOCH_NUMBER_OR_ID ) Returns the tag file name for the ndi . file . navigator NDI_FILENAVIGATOR_OBJ for epoch EPOCH_NUMBER_OR_ID . EPOCH_NUMBER_OR_ID can be an epoch number or an epoch id . If there are no files in epoch EPOCH_NUMBER_OR_ID , an error is generated . In the base class , ndi . epoch . epochprobemap_daqsystem data is stored as a hidden file in the same directory as the first epoch file . If the first file in the epoch file list is 'PATH/MYFILENAME.ext' , then the ndi . epoch . epochprobemap_daqsystem data is stored as 'PATH/.MYFILENAME.ext.[code].epochid.ndi.' . Help for ndi . file . navigator . epochdir / epochtagfilename is inherited from superclass NDI . FILE . NAVIGATOR eq - determines whether two ndi.file.navigator objects are equivalent B = EQ ( NDI_FILENAVIGATOR_OBJ_A , NDI_FILENAVIGATOR_OBJ_B ) Returns 1 if the ndi . file . navigator objects are equivalent , and 0 otherwise . This equivalency does not depend on NDI_FILENAVIGATOR_OBJ_A and NDI_FILENAVIGATOR_OBJ_B are the same HANDLE objects . They can be equivalent and occupy different places in memory . Help for ndi . file . navigator . epochdir / eq is inherited from superclass NDI . FILE . NAVIGATOR filematch_hashstring - a computation to produce a (likely to be) unique string based on filematch FMSTR = FILEMATCH_HASHSTRING ( NDI_FILENAVIGATOR_OBJ ) Returns a string that is based on a hash function that is computed on the concatenated text of the ' filematch ' field of the ' fileparameters ' property . Note : the function used is ' crc ' ( see PM_HASH ) Help for ndi . file . navigator . epochdir / filematch_hashstring is inherited from superclass NDI . FILE . NAVIGATOR getcache - return the NDI_CACHE and key for ndi.file.navigator [ CACHE , KEY ] = GETCACHE ( NDI_FILENAVIGATOR_OBJ ) Returns the CACHE and KEY for the ndi . file . navigator object . The CACHE is returned from the associated session . The KEY is the string ' filenavigator_ ' followed by the object ' s id. See also : ndi . file . navigator . epochdir Help for ndi . file . navigator . epochdir / getcache is inherited from superclass NDI . FILE . NAVIGATOR getepochfiles - Return the file paths for one recording epoch [ FULLPATHFILENAMES , EPOCHID ] = GETEPOCHFILES ( NDI_FILENAVIGATOR_OBJ , EPOCH_NUMBER_OR_ID ) Return the file names or file paths associated with one recording epoch of of an NDI_FILENAVIGATOR_OBJ . EPOCH_NUMBER_OR_ID can either be a number of an epoch to return , or an epoch identifier ( epoch id ). Requesting multiple epochs simultaneously : EPOCH_NUMBER_OR_ID can also be an array of numbers , in which case a cell array of cell arrays is returned in FULLPATHFILENAMES , one entry per number in EPOCH_NUMBER_OR_ID . Further , EPOCH_NUMBER_OR_ID can be a cell array of strings of multiple epoch identifiers ; in this case , a cell array of cell arrays is returned in FULLPATHFILENAMES . Uses the FILEPARAMETERS ( see ndi . file . navigator / SETFILEPARAMETERS ) to identify recording epochs under the SESSION path . See also : EPOCHID Help for ndi . file . navigator . epochdir / getepochfiles is inherited from superclass NDI . FILE . NAVIGATOR getepochfiles_number - Return the file paths for one recording epoch [ FULLPATHFILENAMES ] = GETEPOCHFILES_NUMBER ( NDI_FILENAVIGATOR_OBJ , EPOCH_NUMBER ) Return the file names or file paths associated with one recording epoch . EPOCH_NUMBER must be a number or array of epoch numbers . EPOCH_NUMBER cannot be an EPOCH_ID . If EPOCH_NUMBER is an array , then a cell array of cell arrays is returned in FULLPATHFILENAMES . Uses the FILEPARAMETERS ( see ndi . file . navigator / SETFILEPARAMETERS ) to identify recording epochs under the SESSION path . See also : GETEPOCHFILES developer note : possibility of caching this with some timeout developer note : this function exists so you can get the epoch files without calling epochtable , which also needs to get the epoch files ; infinite recursion happens Help for ndi . file . navigator . epochdir / getepochfiles_number is inherited from superclass NDI . FILE . NAVIGATOR getepochprobemap - Return the epoch record for a given ndi.epoch.epochset.param epoch number EPOCHPROBEMAP = GETEPOCHPROBEMAP ( NDI_EPOCHSET_PARAM_OBJ , N ) Inputs : NDI_EPOCHSET_PARAM_OBJ - the ndi . epoch . epochset . param object N - the epoch number or identifier Output : EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME Help for ndi . file . navigator . epochdir / getepochprobemap is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM getepochtag - Get tag(s) from an epoch TAG = GETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . If there are no files in EPOCHNUMBER then an error is returned . Help for ndi . file . navigator . epochdir / getepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . file . navigator . epochdir / id is inherited from superclass NDI . IDO issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset objects , this returns 1 . For some object types ( ndi . probe . * , for example ) this will return 0 so that the underlying ndi . daq . system epochs are added . Help for ndi . file . navigator . epochdir / issyncgraphroot is inherited from superclass NDI . EPOCH . EPOCHSET matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . file . navigator . epochdir / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . file . navigator . epochdir . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create an ndi.document that is based on an ndi.file.navigator object NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_FILENAVIGATOR_OBJ ) Creates an ndi . document of type ' ndi_document_filenavigator.json ' Help for ndi . file . navigator . epochdir / newdocument is inherited from superclass NDI . FILE . NAVIGATOR numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . file . navigator . epochdir / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET path - Return the file path for the ndi.file.navigator object THEPATH = PATH ( NDI_FILENAVIGATOR_OBJ ) Returns the path of the ndi . session associated with the ndi . file . navigator object NDI_FILENAVIGATOR_OBJ . Help for ndi . file . navigator . epochdir / path is inherited from superclass NDI . FILE . NAVIGATOR removeepochtag - Remove tag(s) for an epoch REMOVEEPOCHTAG ( NDI_EPOCH_PARAM_OBJ , EPOCHNUMBER , NAME ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . Any tags with name ' NAME ' will be removed from the tags in the epoch EPOCHNUMBER . tags in the epoch directory . If tags with the same names as those in TAG already exist , they will be overwritten . If there is no epoch EPOCHNUMBER , then an error is returned . NAME can be a single string , or it can be a cell array of strings ( which will result in the removal of multiple tags ) . Help for ndi . file . navigator . epochdir / removeepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . file . navigator . epochdir / EPOCHTABLE Help for ndi . file . navigator . epochdir / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET searchquery - create a search query that will search for this object SQ = SEARCHQUERY ( NDI_FILENAVIGATOR_OBJ ) Returns a database search query for this ndi . file . navigator object . Help for ndi . file . navigator . epochdir / searchquery is inherited from superclass NDI . FILE . NAVIGATOR selectfilegroups - Return groups of files that will comprise epochs EPOCHFILES = SELECTFILEGROUPS ( NDI_FILENAVIGATOR_EPOCHDIR_OBJ ) Return the files that comprise epochs . EPOCHFILES { n } will be a cell list of the files in epoch n . For ndi . file . navigator . epochdir , this uses the file matching parameters in all subdirectories within the session ( at a folder depth of 1 ; that is, it doesn't search folders in folders ) . See also : ndi . file . navigator / SETFILEPARAMETERS setepochprobemap - Sets the epoch record of a particular epoch SETEPOCHPROBEMAP ( NDI_EPOCHSET_PARAM_OBJ , EPOCHPROBEMAP , NUMBER , [ OVERWRITE ] ) Sets or replaces the ndi . epoch . epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch numbered NUMBER . If OVERWRITE is present and is 1 , then any existing epoch record is overwritten . Otherwise , an error is given if there is an existing epoch record . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem Help for ndi . file . navigator . epochdir / setepochprobemap is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM setepochprobemapfileparameters - Set the epoch record fileparameters field of a ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETEPOCHPROBEMAPFILEPARAMETERS ( NDI_FILENAVIGATOR_OBJ , THEEPOCHPROBEMAPFILEPARAMETERS ) THEEPOCHPROBEMAPFILEPARAMETERS is a string or cell list of strings that specifies the epoch record file . By default , if no parameters are specified , the epoch record file is located at : [ EXP ]/ . ndi / device_name / epoch_NNNNNNNNN . ndierf , where [ EXP ] is the session 's path. However, one can pass search parameters that will search among all the file names returned by ndi.file.navigator/GETEPOCHS. The search parameter should be a regular expression or a set of regular expressions such as: Example: theepochprobemapfileparameters = ' . * \\ . ext \\ > ' Example: theepochprobemapfileparameters = {' myfile1 . ext1 ', ' myfile2 . ext2 '} Example: theepochprobemapfileparameters = {' # . ext1 ', ' myfile # . ext2 '} ( # is the same , unknown string ) Help for ndi . file . navigator . epochdir / setepochprobemapfileparameters is inherited from superclass NDI . FILE . NAVIGATOR setepochtag - Set tag(s) for an epoch SETEPOCHTAG ( NDI_EPOCHSET_PARAM_OBJ , EPOCHNUMBER , TAG ) Tags are name / value pairs returned in the form of a structure array with fields ' name ' and ' value ' . These tags will replace any tags in the epoch directory . If there is no epoch EPOCHNUMBER , then an error is returned . Help for ndi . file . navigator . epochdir / setepochtag is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM setfileparameters - Set the fileparameters field of a ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETFILEPARAMETERS ( NDI_FILENAVIGATOR_OBJ , THEFILEPARAMETERS ) THEFILEPARAMETERS is a string or cell list of strings that specifies the files that comprise an epoch . Example : filematch = ' .*\\.ext\\> ' Example : filematch = { ' myfile1.ext1 ' , ' myfile2.ext2 ' } Example : filematch = { ' #.ext1 ' , ' myfile#.ext2 ' } ( # is the same , unknown string ) Alternatively , THEFILEPARAMETERS can be delivered as a structure with the following fields : Fieldname : | Description ---------------------------------------------------------------------- filematch | A string or cell list of strings that need to be matched | Regular expressions are allowed | Example : filematch = ' .*\\.ext\\> ' | Example : filematch = { ' myfile1.ext1 ' , ' myfile2.ext2 ' } | Example : filematch = { ' #.ext1 ' , ' myfile#.ext2 ' } ( # is the same , unknown string ) Help for ndi . file . navigator . epochdir / setfileparameters is inherited from superclass NDI . FILE . NAVIGATOR setsession - set the SESSION for an ndi.file.navigator object NDI_FILENAVIGATOR_OBJ = SETSESSION ( NDI_FILENAVIGATOR_OBJ , SESSION ) Set the SESSION property of an ndi . file . navigator object Help for ndi . file . navigator . epochdir / setsession is inherited from superclass NDI . FILE . NAVIGATOR t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK Help for ndi . file . navigator . epochdir / t0_t1 is inherited from superclass NDI . EPOCH . EPOCHSET underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . file . navigator . epochdir / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET verifyepochprobemap - Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object [ B , MSG ] = VERIFYEPOCHPROBEMAP ( ndi . epoch . epochset . param , EPOCHPROBEMAP , EPOCH_NUMBER_OR_ID ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given epoch number or epoch id EPOCH_NUMBER_OR_ID . For the abstract class EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . If B is 0 , then the error message is returned in MSG . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem Help for ndi . file . navigator . epochdir / verifyepochprobemap is inherited from superclass NDI . EPOCH . EPOCHSET . PARAM","title":"Methods help"},{"location":"reference/%2Bndi/%2Bfun/check_Matlab_toolboxes.m/","text":"ndi.fun.check_Matlab_toolboxes \u00b6 ndi . fun . check_Matlab_toolboxes is a function . check_Matlab_toolboxes","title":"ndi.fun.check_Matlab_toolboxes"},{"location":"reference/%2Bndi/%2Bfun/check_Matlab_toolboxes.m/#ndifuncheck_matlab_toolboxes","text":"ndi . fun . check_Matlab_toolboxes is a function . check_Matlab_toolboxes","title":"ndi.fun.check_Matlab_toolboxes"},{"location":"reference/%2Bndi/%2Bfun/convertoldnsd2ndi.m/","text":"ndi.fun.convertoldnsd2ndi \u00b6 NDI_CONVERTOLDNSD2NDI - convert an old 'nsd' session to 'ndi' ndi . fun . convertoldnsd2ndi ( PATHNAME ) Converts the NDS_SESSION_DIR session at PATHNAME to the new 'ndi' name convention . Needs to be run on MacOS for the unix tools used ( might work on Linux ) . The following irreversible changes are made : ( 1 ) Any instance of 'nsd' in a filename is changed to 'ndi' . ( 2 ) Any instance of 'NSD' in a filename is changed to 'NDI' . ( 3 ) All instances of 'nsd' in . m , . json , . txt * object_ * files are replaced with 'ndi' . ( 4 ) All instances of 'NSD' in . m , . json , . txt or * object_ * files are replaced with 'NDI' . This function is depricated and should be irrelevant shortly as everyone uses 'NDI' instead of 'NSD'","title":"ndi.fun.convertoldnsd2ndi"},{"location":"reference/%2Bndi/%2Bfun/convertoldnsd2ndi.m/#ndifunconvertoldnsd2ndi","text":"NDI_CONVERTOLDNSD2NDI - convert an old 'nsd' session to 'ndi' ndi . fun . convertoldnsd2ndi ( PATHNAME ) Converts the NDS_SESSION_DIR session at PATHNAME to the new 'ndi' name convention . Needs to be run on MacOS for the unix tools used ( might work on Linux ) . The following irreversible changes are made : ( 1 ) Any instance of 'nsd' in a filename is changed to 'ndi' . ( 2 ) Any instance of 'NSD' in a filename is changed to 'NDI' . ( 3 ) All instances of 'nsd' in . m , . json , . txt * object_ * files are replaced with 'ndi' . ( 4 ) All instances of 'NSD' in . m , . json , . txt or * object_ * files are replaced with 'NDI' . This function is depricated and should be irrelevant shortly as everyone uses 'NDI' instead of 'NSD'","title":"ndi.fun.convertoldnsd2ndi"},{"location":"reference/%2Bndi/%2Bfun/stimulustemporalfrequency.m/","text":"ndi.fun.stimulustemporalfrequency \u00b6 NDI_STIMULUSTEMPORALFREQUENCY - given a stimulus parameter set , return the temporal frequency [ TF_VALUE , TF_NAME ] = ndi . fun . stimulustemporalfrequency ( STIMULUS_PARAMETERS ) Given a set of STIMULUS_PARAMETERS ( a structure array ) , this function will check to see if any names match those in ndi . fun . stimulustemporalfrequency . JSON . If so , the value for this stimulus is returned in TF_VALUE and the name of the parameter is returned in TF_NAME . If no temporal frequency can be determined , TF_VALUE and TF_NAME are blank .","title":"ndi.fun.stimulustemporalfrequency"},{"location":"reference/%2Bndi/%2Bfun/stimulustemporalfrequency.m/#ndifunstimulustemporalfrequency","text":"NDI_STIMULUSTEMPORALFREQUENCY - given a stimulus parameter set , return the temporal frequency [ TF_VALUE , TF_NAME ] = ndi . fun . stimulustemporalfrequency ( STIMULUS_PARAMETERS ) Given a set of STIMULUS_PARAMETERS ( a structure array ) , this function will check to see if any names match those in ndi . fun . stimulustemporalfrequency . JSON . If so , the value for this stimulus is returned in TF_VALUE and the name of the parameter is returned in TF_NAME . If no temporal frequency can be determined , TF_VALUE and TF_NAME are blank .","title":"ndi.fun.stimulustemporalfrequency"},{"location":"reference/%2Bndi/%2Bglobals/assert.m/","text":"ndi.globals.assert \u00b6 ndi . globals . assert - check that ndi_globals has been initialized properly [ B , MSG ] = ndi . globals . assert ( ndi_global_variables , ... ) Returns true if the variable ndi_global_variables has been initialized properly . Returns 0 otherwise , and , by default , triggers an error . Also returns the error message in MSG , if applicable . If there was no error , MSG is empty . This function takes name / value pairs that modify its default behavior : ------------------------------------------------------------------------------ | Parameter ( default ) | Description | |------------------------------|---------------------------------------------| | generateError ( 1 ) | 0 / 1 Should we generate a Matlab error call | | | and message ? ( 0 = no , 1 = yes ) | | tryToInit ( 1 ) | 0 / 1 Should we try to initialize ndi by | | | calling ndi_Init if globals are not | | | set up ? | |----------------------------------------------------------------------------|","title":"ndi.globals.assert"},{"location":"reference/%2Bndi/%2Bglobals/assert.m/#ndiglobalsassert","text":"ndi . globals . assert - check that ndi_globals has been initialized properly [ B , MSG ] = ndi . globals . assert ( ndi_global_variables , ... ) Returns true if the variable ndi_global_variables has been initialized properly . Returns 0 otherwise , and , by default , triggers an error . Also returns the error message in MSG , if applicable . If there was no error , MSG is empty . This function takes name / value pairs that modify its default behavior : ------------------------------------------------------------------------------ | Parameter ( default ) | Description | |------------------------------|---------------------------------------------| | generateError ( 1 ) | 0 / 1 Should we generate a Matlab error call | | | and message ? ( 0 = no , 1 = yes ) | | tryToInit ( 1 ) | 0 / 1 Should we try to initialize ndi by | | | calling ndi_Init if globals are not | | | set up ? | |----------------------------------------------------------------------------|","title":"ndi.globals.assert"},{"location":"reference/%2Bndi/%2Bgui/Data.m/","text":"CLASS ndi.gui.Data \u00b6 ndi.gui.Data is a class. obj = Data Superclasses \u00b6 handle Properties \u00b6 Property Description fullDocuments fullTable tempDocuments tempTable search table panel name info Methods \u00b6 Method Description Data ndi.gui.Data/Data is a constructor. addDoc ndi.gui.Data/addDoc is a function. addlistener ADDLISTENER Add listener for event. delete DELETE Delete a handle object. details DETAILS Display array details eq == (EQ) Test handle equality. filter dimensional digital filter. findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. graph ndi.gui.Data/graph is a function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. subgraph ndi.gui.Data/subgraph is a function. Methods help \u00b6 Data - ndi.gui.Data/Data is a constructor. obj = Data addDoc - ndi.gui.Data/addDoc is a function. addDoc(obj, docs) addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , NDI . GUI . DATA , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . gui . Data / addlistener is inherited from superclass HANDLE Documentation for ndi . gui . Data / addlistener doc handle . addlistener delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also NDI . GUI . DATA , NDI . GUI . DATA / ISVALID , CLEAR Help for ndi . gui . Data / delete is inherited from superclass HANDLE Documentation for ndi . gui . Data / delete doc handle . delete details - DETAILS Display array details DETAILS ( X ) displays X with a detailed description . When X is a MATLAB object , details provides more information about the object ' s properties, methods, and events, and if applicable, the package in which the class is defined . See also DISP , DISPLAY , CLASSDEF . eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . DATA , NDI . GUI . DATA / GE , NDI . GUI . DATA / GT , NDI . GUI . DATA / LE , NDI . GUI . DATA / LT , NDI . GUI . DATA / NE Help for ndi . gui . Data / eq is inherited from superclass HANDLE Documentation for ndi . gui . Data / eq doc handle . eq filter - dimensional digital filter. Y = FILTER ( B , A , X ) filters the data in vector X with the filter described by vectors A and B to create the filtered data Y . The filter is a \" Direct Form II Transposed \" implementation of the standard difference equation : a ( 1 ) * y ( n ) = b ( 1 ) * x ( n ) + b ( 2 ) * x ( n - 1 ) + ... + b ( nb + 1 ) * x ( n - nb ) - a ( 2 ) * y ( n - 1 ) - ... - a ( na + 1 ) * y ( n - na ) If a ( 1 ) is not equal to 1 , FILTER normalizes the filter coefficients by a ( 1 ) . FILTER always operates along the first non - singleton dimension , namely dimension 1 for column vectors and non - trivial matrices , and dimension 2 for row vectors . [ Y , Zf ] = FILTER ( B , A , X , Zi ) gives access to initial and final conditions , Zi and Zf , of the delays . Zi is a vector of length MAX ( LENGTH ( A ) , LENGTH ( B )) - 1 , or an array with the leading dimension of size MAX ( LENGTH ( A ) , LENGTH ( B )) - 1 and with remaining dimensions matching those of X . FILTER ( B , A , X ,[], DIM ) or FILTER ( B , A , X , Zi , DIM ) operates along the dimension DIM . Tip : If you have the Signal Processing Toolbox , you can design a filter , D , using DESIGNFILT . Then you can use Y = FILTER ( D , X ) to filter your data . See also FILTER2 , FILTFILT , FILTIC , DESIGNFILT . Note : FILTFILT , FILTIC and DESIGNFILT are in the Signal Processing Toolbox . findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , NDI . GUI . DATA Help for ndi . gui . Data / findobj is inherited from superclass HANDLE Documentation for ndi . gui . Data / findobj doc handle . findobj findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also NDI . GUI . DATA , NDI . GUI . DATA / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for ndi . gui . Data / findprop is inherited from superclass HANDLE Documentation for ndi . gui . Data / findprop doc handle . findprop ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . DATA , NDI . GUI . DATA / EQ , NDI . GUI . DATA / GT , NDI . GUI . DATA / LE , NDI . GUI . DATA / LT , NDI . GUI . DATA / NE Help for ndi . gui . Data / ge is inherited from superclass HANDLE Documentation for ndi . gui . Data / ge doc handle . ge graph - ndi.gui.Data/graph is a function. graph(obj, ~, ~, ind) gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . DATA , NDI . GUI . DATA / EQ , NDI . GUI . DATA / GE , NDI . GUI . DATA / LE , NDI . GUI . DATA / LT , NDI . GUI . DATA / NE Help for ndi . gui . Data / gt is inherited from superclass HANDLE Documentation for ndi . gui . Data / gt doc handle . gt isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDI . GUI . DATA , NDI . GUI . DATA / DELETE Help for ndi . gui . Data / isvalid is inherited from superclass HANDLE Documentation for ndi . gui . Data / isvalid doc handle . isvalid le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . DATA , NDI . GUI . DATA / EQ , NDI . GUI . DATA / GE , NDI . GUI . DATA / GT , NDI . GUI . DATA / LT , NDI . GUI . DATA / NE Help for ndi . gui . Data / le is inherited from superclass HANDLE Documentation for ndi . gui . Data / le doc handle . le listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , NDI . GUI . DATA , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . gui . Data / listener is inherited from superclass HANDLE Documentation for ndi . gui . Data / listener doc handle . listener lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . DATA , NDI . GUI . DATA / EQ , NDI . GUI . DATA / GE , NDI . GUI . DATA / GT , NDI . GUI . DATA / LE , NDI . GUI . DATA / NE Help for ndi . gui . Data / lt is inherited from superclass HANDLE Documentation for ndi . gui . Data / lt doc handle . lt ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . DATA , NDI . GUI . DATA / EQ , NDI . GUI . DATA / GE , NDI . GUI . DATA / GT , NDI . GUI . DATA / LE , NDI . GUI . DATA / LT Help for ndi . gui . Data / ne is inherited from superclass HANDLE Documentation for ndi . gui . Data / ne doc handle . ne notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDI . GUI . DATA , NDI . GUI . DATA / ADDLISTENER , NDI . GUI . DATA / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndi . gui . Data / notify is inherited from superclass HANDLE Documentation for ndi . gui . Data / notify doc handle . notify subgraph - ndi.gui.Data/subgraph is a function. subgraph(obj, ~, ~, ind)","title":"ndi.gui.Data"},{"location":"reference/%2Bndi/%2Bgui/Data.m/#class-ndiguidata","text":"ndi.gui.Data is a class. obj = Data","title":"CLASS ndi.gui.Data"},{"location":"reference/%2Bndi/%2Bgui/Data.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bgui/Data.m/#properties","text":"Property Description fullDocuments fullTable tempDocuments tempTable search table panel name info","title":"Properties"},{"location":"reference/%2Bndi/%2Bgui/Data.m/#methods","text":"Method Description Data ndi.gui.Data/Data is a constructor. addDoc ndi.gui.Data/addDoc is a function. addlistener ADDLISTENER Add listener for event. delete DELETE Delete a handle object. details DETAILS Display array details eq == (EQ) Test handle equality. filter dimensional digital filter. findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. graph ndi.gui.Data/graph is a function. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. subgraph ndi.gui.Data/subgraph is a function.","title":"Methods"},{"location":"reference/%2Bndi/%2Bgui/Data.m/#methods-help","text":"Data - ndi.gui.Data/Data is a constructor. obj = Data addDoc - ndi.gui.Data/addDoc is a function. addDoc(obj, docs) addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , NDI . GUI . DATA , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . gui . Data / addlistener is inherited from superclass HANDLE Documentation for ndi . gui . Data / addlistener doc handle . addlistener delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also NDI . GUI . DATA , NDI . GUI . DATA / ISVALID , CLEAR Help for ndi . gui . Data / delete is inherited from superclass HANDLE Documentation for ndi . gui . Data / delete doc handle . delete details - DETAILS Display array details DETAILS ( X ) displays X with a detailed description . When X is a MATLAB object , details provides more information about the object ' s properties, methods, and events, and if applicable, the package in which the class is defined . See also DISP , DISPLAY , CLASSDEF . eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . DATA , NDI . GUI . DATA / GE , NDI . GUI . DATA / GT , NDI . GUI . DATA / LE , NDI . GUI . DATA / LT , NDI . GUI . DATA / NE Help for ndi . gui . Data / eq is inherited from superclass HANDLE Documentation for ndi . gui . Data / eq doc handle . eq filter - dimensional digital filter. Y = FILTER ( B , A , X ) filters the data in vector X with the filter described by vectors A and B to create the filtered data Y . The filter is a \" Direct Form II Transposed \" implementation of the standard difference equation : a ( 1 ) * y ( n ) = b ( 1 ) * x ( n ) + b ( 2 ) * x ( n - 1 ) + ... + b ( nb + 1 ) * x ( n - nb ) - a ( 2 ) * y ( n - 1 ) - ... - a ( na + 1 ) * y ( n - na ) If a ( 1 ) is not equal to 1 , FILTER normalizes the filter coefficients by a ( 1 ) . FILTER always operates along the first non - singleton dimension , namely dimension 1 for column vectors and non - trivial matrices , and dimension 2 for row vectors . [ Y , Zf ] = FILTER ( B , A , X , Zi ) gives access to initial and final conditions , Zi and Zf , of the delays . Zi is a vector of length MAX ( LENGTH ( A ) , LENGTH ( B )) - 1 , or an array with the leading dimension of size MAX ( LENGTH ( A ) , LENGTH ( B )) - 1 and with remaining dimensions matching those of X . FILTER ( B , A , X ,[], DIM ) or FILTER ( B , A , X , Zi , DIM ) operates along the dimension DIM . Tip : If you have the Signal Processing Toolbox , you can design a filter , D , using DESIGNFILT . Then you can use Y = FILTER ( D , X ) to filter your data . See also FILTER2 , FILTFILT , FILTIC , DESIGNFILT . Note : FILTFILT , FILTIC and DESIGNFILT are in the Signal Processing Toolbox . findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , NDI . GUI . DATA Help for ndi . gui . Data / findobj is inherited from superclass HANDLE Documentation for ndi . gui . Data / findobj doc handle . findobj findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also NDI . GUI . DATA , NDI . GUI . DATA / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for ndi . gui . Data / findprop is inherited from superclass HANDLE Documentation for ndi . gui . Data / findprop doc handle . findprop ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . DATA , NDI . GUI . DATA / EQ , NDI . GUI . DATA / GT , NDI . GUI . DATA / LE , NDI . GUI . DATA / LT , NDI . GUI . DATA / NE Help for ndi . gui . Data / ge is inherited from superclass HANDLE Documentation for ndi . gui . Data / ge doc handle . ge graph - ndi.gui.Data/graph is a function. graph(obj, ~, ~, ind) gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . DATA , NDI . GUI . DATA / EQ , NDI . GUI . DATA / GE , NDI . GUI . DATA / LE , NDI . GUI . DATA / LT , NDI . GUI . DATA / NE Help for ndi . gui . Data / gt is inherited from superclass HANDLE Documentation for ndi . gui . Data / gt doc handle . gt isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDI . GUI . DATA , NDI . GUI . DATA / DELETE Help for ndi . gui . Data / isvalid is inherited from superclass HANDLE Documentation for ndi . gui . Data / isvalid doc handle . isvalid le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . DATA , NDI . GUI . DATA / EQ , NDI . GUI . DATA / GE , NDI . GUI . DATA / GT , NDI . GUI . DATA / LT , NDI . GUI . DATA / NE Help for ndi . gui . Data / le is inherited from superclass HANDLE Documentation for ndi . gui . Data / le doc handle . le listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , NDI . GUI . DATA , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . gui . Data / listener is inherited from superclass HANDLE Documentation for ndi . gui . Data / listener doc handle . listener lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . DATA , NDI . GUI . DATA / EQ , NDI . GUI . DATA / GE , NDI . GUI . DATA / GT , NDI . GUI . DATA / LE , NDI . GUI . DATA / NE Help for ndi . gui . Data / lt is inherited from superclass HANDLE Documentation for ndi . gui . Data / lt doc handle . lt ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . DATA , NDI . GUI . DATA / EQ , NDI . GUI . DATA / GE , NDI . GUI . DATA / GT , NDI . GUI . DATA / LE , NDI . GUI . DATA / LT Help for ndi . gui . Data / ne is inherited from superclass HANDLE Documentation for ndi . gui . Data / ne doc handle . ne notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDI . GUI . DATA , NDI . GUI . DATA / ADDLISTENER , NDI . GUI . DATA / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndi . gui . Data / notify is inherited from superclass HANDLE Documentation for ndi . gui . Data / notify doc handle . notify subgraph - ndi.gui.Data/subgraph is a function. subgraph(obj, ~, ~, ind)","title":"Methods help"},{"location":"reference/%2Bndi/%2Bgui/Icon.m/","text":"CLASS ndi.gui.Icon \u00b6 ndi.gui.Icon is a class. obj = Icon(src, len, elem, hShift, vShift, w, h, color) Superclasses \u00b6 handle Properties \u00b6 Property Description elem img rect term src w h x y c active tag Methods \u00b6 Method Description Icon ndi.gui.Icon/Icon is a constructor. addlistener ADDLISTENER Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. upload ndi.gui.Icon/upload is a function. Methods help \u00b6 Icon - ndi.gui.Icon/Icon is a constructor. obj = Icon(src, len, elem, hShift, vShift, w, h, color) addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , NDI . GUI . ICON , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . gui . Icon / addlistener is inherited from superclass HANDLE Documentation for ndi . gui . Icon / addlistener doc handle . addlistener delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also NDI . GUI . ICON , NDI . GUI . ICON / ISVALID , CLEAR Help for ndi . gui . Icon / delete is inherited from superclass HANDLE Documentation for ndi . gui . Icon / delete doc handle . delete eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . ICON , NDI . GUI . ICON / GE , NDI . GUI . ICON / GT , NDI . GUI . ICON / LE , NDI . GUI . ICON / LT , NDI . GUI . ICON / NE Help for ndi . gui . Icon / eq is inherited from superclass HANDLE Documentation for ndi . gui . Icon / eq doc handle . eq findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , NDI . GUI . ICON Help for ndi . gui . Icon / findobj is inherited from superclass HANDLE Documentation for ndi . gui . Icon / findobj doc handle . findobj findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also NDI . GUI . ICON , NDI . GUI . ICON / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for ndi . gui . Icon / findprop is inherited from superclass HANDLE Documentation for ndi . gui . Icon / findprop doc handle . findprop ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . ICON , NDI . GUI . ICON / EQ , NDI . GUI . ICON / GT , NDI . GUI . ICON / LE , NDI . GUI . ICON / LT , NDI . GUI . ICON / NE Help for ndi . gui . Icon / ge is inherited from superclass HANDLE Documentation for ndi . gui . Icon / ge doc handle . ge gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . ICON , NDI . GUI . ICON / EQ , NDI . GUI . ICON / GE , NDI . GUI . ICON / LE , NDI . GUI . ICON / LT , NDI . GUI . ICON / NE Help for ndi . gui . Icon / gt is inherited from superclass HANDLE Documentation for ndi . gui . Icon / gt doc handle . gt isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDI . GUI . ICON , NDI . GUI . ICON / DELETE Help for ndi . gui . Icon / isvalid is inherited from superclass HANDLE Documentation for ndi . gui . Icon / isvalid doc handle . isvalid le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . ICON , NDI . GUI . ICON / EQ , NDI . GUI . ICON / GE , NDI . GUI . ICON / GT , NDI . GUI . ICON / LT , NDI . GUI . ICON / NE Help for ndi . gui . Icon / le is inherited from superclass HANDLE Documentation for ndi . gui . Icon / le doc handle . le listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , NDI . GUI . ICON , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . gui . Icon / listener is inherited from superclass HANDLE Documentation for ndi . gui . Icon / listener doc handle . listener lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . ICON , NDI . GUI . ICON / EQ , NDI . GUI . ICON / GE , NDI . GUI . ICON / GT , NDI . GUI . ICON / LE , NDI . GUI . ICON / NE Help for ndi . gui . Icon / lt is inherited from superclass HANDLE Documentation for ndi . gui . Icon / lt doc handle . lt ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . ICON , NDI . GUI . ICON / EQ , NDI . GUI . ICON / GE , NDI . GUI . ICON / GT , NDI . GUI . ICON / LE , NDI . GUI . ICON / LT Help for ndi . gui . Icon / ne is inherited from superclass HANDLE Documentation for ndi . gui . Icon / ne doc handle . ne notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDI . GUI . ICON , NDI . GUI . ICON / ADDLISTENER , NDI . GUI . ICON / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndi . gui . Icon / notify is inherited from superclass HANDLE Documentation for ndi . gui . Icon / notify doc handle . notify upload - ndi.gui.Icon/upload is a function. upload ( obj , ~ , ~ )","title":"ndi.gui.Icon"},{"location":"reference/%2Bndi/%2Bgui/Icon.m/#class-ndiguiicon","text":"ndi.gui.Icon is a class. obj = Icon(src, len, elem, hShift, vShift, w, h, color)","title":"CLASS ndi.gui.Icon"},{"location":"reference/%2Bndi/%2Bgui/Icon.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bgui/Icon.m/#properties","text":"Property Description elem img rect term src w h x y c active tag","title":"Properties"},{"location":"reference/%2Bndi/%2Bgui/Icon.m/#methods","text":"Method Description Icon ndi.gui.Icon/Icon is a constructor. addlistener ADDLISTENER Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. upload ndi.gui.Icon/upload is a function.","title":"Methods"},{"location":"reference/%2Bndi/%2Bgui/Icon.m/#methods-help","text":"Icon - ndi.gui.Icon/Icon is a constructor. obj = Icon(src, len, elem, hShift, vShift, w, h, color) addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , NDI . GUI . ICON , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . gui . Icon / addlistener is inherited from superclass HANDLE Documentation for ndi . gui . Icon / addlistener doc handle . addlistener delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also NDI . GUI . ICON , NDI . GUI . ICON / ISVALID , CLEAR Help for ndi . gui . Icon / delete is inherited from superclass HANDLE Documentation for ndi . gui . Icon / delete doc handle . delete eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . ICON , NDI . GUI . ICON / GE , NDI . GUI . ICON / GT , NDI . GUI . ICON / LE , NDI . GUI . ICON / LT , NDI . GUI . ICON / NE Help for ndi . gui . Icon / eq is inherited from superclass HANDLE Documentation for ndi . gui . Icon / eq doc handle . eq findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , NDI . GUI . ICON Help for ndi . gui . Icon / findobj is inherited from superclass HANDLE Documentation for ndi . gui . Icon / findobj doc handle . findobj findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also NDI . GUI . ICON , NDI . GUI . ICON / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for ndi . gui . Icon / findprop is inherited from superclass HANDLE Documentation for ndi . gui . Icon / findprop doc handle . findprop ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . ICON , NDI . GUI . ICON / EQ , NDI . GUI . ICON / GT , NDI . GUI . ICON / LE , NDI . GUI . ICON / LT , NDI . GUI . ICON / NE Help for ndi . gui . Icon / ge is inherited from superclass HANDLE Documentation for ndi . gui . Icon / ge doc handle . ge gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . ICON , NDI . GUI . ICON / EQ , NDI . GUI . ICON / GE , NDI . GUI . ICON / LE , NDI . GUI . ICON / LT , NDI . GUI . ICON / NE Help for ndi . gui . Icon / gt is inherited from superclass HANDLE Documentation for ndi . gui . Icon / gt doc handle . gt isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDI . GUI . ICON , NDI . GUI . ICON / DELETE Help for ndi . gui . Icon / isvalid is inherited from superclass HANDLE Documentation for ndi . gui . Icon / isvalid doc handle . isvalid le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . ICON , NDI . GUI . ICON / EQ , NDI . GUI . ICON / GE , NDI . GUI . ICON / GT , NDI . GUI . ICON / LT , NDI . GUI . ICON / NE Help for ndi . gui . Icon / le is inherited from superclass HANDLE Documentation for ndi . gui . Icon / le doc handle . le listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , NDI . GUI . ICON , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . gui . Icon / listener is inherited from superclass HANDLE Documentation for ndi . gui . Icon / listener doc handle . listener lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . ICON , NDI . GUI . ICON / EQ , NDI . GUI . ICON / GE , NDI . GUI . ICON / GT , NDI . GUI . ICON / LE , NDI . GUI . ICON / NE Help for ndi . gui . Icon / lt is inherited from superclass HANDLE Documentation for ndi . gui . Icon / lt doc handle . lt ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . ICON , NDI . GUI . ICON / EQ , NDI . GUI . ICON / GE , NDI . GUI . ICON / GT , NDI . GUI . ICON / LE , NDI . GUI . ICON / LT Help for ndi . gui . Icon / ne is inherited from superclass HANDLE Documentation for ndi . gui . Icon / ne doc handle . ne notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDI . GUI . ICON , NDI . GUI . ICON / ADDLISTENER , NDI . GUI . ICON / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndi . gui . Icon / notify is inherited from superclass HANDLE Documentation for ndi . gui . Icon / notify doc handle . notify upload - ndi.gui.Icon/upload is a function. upload ( obj , ~ , ~ )","title":"Methods help"},{"location":"reference/%2Bndi/%2Bgui/Lab.m/","text":"CLASS ndi.gui.Lab \u00b6 Create lab Superclasses \u00b6 handle Properties \u00b6 Property Description editable window panel info panelImage subjects probes DAQs drag dragPt moved back zIn zOut editBox editTxt connects wires row transmitting Methods \u00b6 Method Description Lab Create lab addDAQ ndi.gui.Lab/addDAQ is a function. addProbe ndi.gui.Lab/addProbe is a function. addSubject ndi.gui.Lab/addSubject is a function. addlistener ADDLISTENER Add listener for event. buttons ndi.gui.Lab/buttons is a function. connect diagram interconnections of dynamic systems. cut ndi.gui.Lab/cut is a function. delete DELETE Delete a handle object. details DETAILS Display array details editCallback ndi.gui.Lab/editCallback is a function. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. grid GRID Grid lines. gt > (GT) Greater than relation for handles. iconCallback ndi.gui.Lab/iconCallback is a function. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. move ndi.gui.Lab/move is a function. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setZoom ndi.gui.Lab/setZoom is a function. symbol ndi.gui.Lab/symbol is a function. updateConnections ndi.gui.Lab/updateConnections is a function. Methods help \u00b6 Lab - Create lab addDAQ - ndi.gui.Lab/addDAQ is a function. addDAQ(obj, daq) addProbe - ndi.gui.Lab/addProbe is a function. addProbe(obj, prob) addSubject - ndi.gui.Lab/addSubject is a function. addSubject(obj, subj) addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , NDI . GUI . LAB , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . gui . Lab / addlistener is inherited from superclass HANDLE Documentation for ndi . gui . Lab / addlistener doc handle . addlistener buttons - ndi.gui.Lab/buttons is a function. buttons(obj) connect - diagram interconnections of dynamic systems. CONNECT computes an aggregate model for a block diagram interconnection of dynamic systems . You can specify the block diagram connectivity in two ways : Name - based interconnection In this approach , you name the input and output signals of all blocks SYS1 , SYS2 , ... in the block diagram , including the summation blocks . The aggregate model SYS is then built by SYS = CONNECT ( SYS1 , SYS2 , ... , INPUTS , OUTPUTS ) where INPUTS and OUTPUTS are the names of the block diagram external I / Os ( specified as strings or string vectors ) . If you also need to perform open - loop analysis at specific locations in the block diagram , use SYS = CONNECT ( SYS1 , SYS2 , ... , INPUTS , OUTPUTS , APS ) where APS lists the locations ( internal signals ) of interest . The resulting model SYS contains analysis points at the locations APS ( see AnalysisPoint ) . Example 1 : Given SISO models C and G , you can construct the closed - loop transfer T from r to y using e u r ---> O --> [ C ] --- [ G ] -+---> y - | | +<----------------+ C . InputName = 'e' ; C . OutputName = 'u' ; G . InputName = 'u' ; G . OutputName = 'y' ; Sum = sumblk ( 'e = r-y' ); T = connect ( G , C , Sum , 'r' , 'y' ) Example 2 : If C and G above are two - input , two - output models instead , you can form the MIMO transfer T from r to y using C . u = 'e' ; C . y = 'u' ; G . u = 'u' ; G . y = 'y' ; Sum = sumblk ( 'e = r-y' , 2 ); T = connect ( G , C , Sum , 'r' , 'y' ) Note that C . u , C . y is shorthand for C . InputName , C . OutputName and that 'r' , 'y' select all entries of the two - entry vector signals r and y . Example 3 : If you already have specified I / O names for C and G , you can build the closed - loop model T using : Sum = sumblk ( ' %e = r - %y' , C . u , G . y ); T = connect ( G , C , Sum , 'r' , G . y ) See SUMBLK for more details on using aliases like % e and % y . Example 4 : To add an analysis point at the plant input \"u\" and then access the open - loop response L = C * G at this location , use T = connect ( G , C , Sum , 'r' , 'y' , 'u' ) L = getLoopTransfer ( T , 'u' , - 1 ); Index - based interconnection In this approach , first combine all system blocks into an aggregate , unconnected model BLKSYS using APPEND . Then construct a matrix Q where each row specifies one of the connections or summing junctions in terms of the input vector U and output vector Y of BLKSYS . For example , the row [ 3 2 0 0 ] indicates that Y ( 2 ) feeds into U ( 3 ), while the row [ 7 2 - 15 6 ] indicates that Y ( 2 ) - Y ( 15 ) + Y ( 6 ) feeds into U ( 7 ) . The aggregate model SYS is then obtained by SYS = CONNECT ( BLKSYS , Q , INPUTS , OUTPUTS ) where INPUTS and OUTPUTS are index vectors into U and Y selecting the block diagram external I / Os . Example : You can construct the closed - loop model T for the block diagram above as follows : BLKSYS = append ( C , G ); % U = inputs to C , G . Y = outputs of C , G % Here Y ( 1 ) feeds into U ( 2 ) and - Y ( 2 ) feeds into U ( 1 ) Q = [ 2 1 ; 1 - 2 ]; % External I / Os : r drives U ( 1 ) and y is Y ( 2 ) T = connect ( BLKSYS , Q , 1 , 2 ) Note : * CONNECT always returns a state - space or FRD model SYS * States that do not contribute to the I / O transfer from INPUTS to OUTPUTS are automatically discarded . To prevent this , set the \"Simplify\" option to FALSE : OPT = connectOptions ( 'Simplify' , false ); SYS = CONNECT ( ... , OPT ) See also SUMBLK , connectOptions , APPEND , SERIES , PARALLEL , FEEDBACK , LFT , DynamicSystem . cut - ndi.gui.Lab/cut is a function. cut(obj, src, ~) delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also NDI . GUI . LAB , NDI . GUI . LAB / ISVALID , CLEAR Help for ndi . gui . Lab / delete is inherited from superclass HANDLE Documentation for ndi . gui . Lab / delete doc handle . delete details - DETAILS Display array details DETAILS ( X ) displays X with a detailed description . When X is a MATLAB object , details provides more information about the object ' s properties, methods, and events, and if applicable, the package in which the class is defined . See also DISP , DISPLAY , CLASSDEF . editCallback - ndi.gui.Lab/editCallback is a function. editCallback(obj, ~, ~) eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . LAB , NDI . GUI . LAB / GE , NDI . GUI . LAB / GT , NDI . GUI . LAB / LE , NDI . GUI . LAB / LT , NDI . GUI . LAB / NE Help for ndi . gui . Lab / eq is inherited from superclass HANDLE Documentation for ndi . gui . Lab / eq doc handle . eq findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , NDI . GUI . LAB Help for ndi . gui . Lab / findobj is inherited from superclass HANDLE Documentation for ndi . gui . Lab / findobj doc handle . findobj findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also NDI . GUI . LAB , NDI . GUI . LAB / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for ndi . gui . Lab / findprop is inherited from superclass HANDLE Documentation for ndi . gui . Lab / findprop doc handle . findprop ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . LAB , NDI . GUI . LAB / EQ , NDI . GUI . LAB / GT , NDI . GUI . LAB / LE , NDI . GUI . LAB / LT , NDI . GUI . LAB / NE Help for ndi . gui . Lab / ge is inherited from superclass HANDLE Documentation for ndi . gui . Lab / ge doc handle . ge grid - GRID Grid lines. GRID ON adds major grid lines to the current axes . GRID OFF removes major and minor grid lines from the current axes . GRID MINOR toggles the minor grid lines of the current axes . GRID , by itself , toggles the major grid lines of the current axes . GRID ( AX ,... ) uses axes AX instead of the current axes . GRID sets the XGrid , YGrid , and ZGrid properties of the current axes . If the axes is a polar axes then GRID sets the ThetaGrid and RGrid properties . If the axes is a geoaxes , then GRID sets the Grid property . AX . XMinorGrid = ' on ' turns on the minor grid . See also TITLE , XLABEL , YLABEL , ZLABEL , AXES , PLOT , BOX , POLARAXES . gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . LAB , NDI . GUI . LAB / EQ , NDI . GUI . LAB / GE , NDI . GUI . LAB / LE , NDI . GUI . LAB / LT , NDI . GUI . LAB / NE Help for ndi . gui . Lab / gt is inherited from superclass HANDLE Documentation for ndi . gui . Lab / gt doc handle . gt iconCallback - ndi.gui.Lab/iconCallback is a function. iconCallback(obj, ~, ~, src) isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDI . GUI . LAB , NDI . GUI . LAB / DELETE Help for ndi . gui . Lab / isvalid is inherited from superclass HANDLE Documentation for ndi . gui . Lab / isvalid doc handle . isvalid le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . LAB , NDI . GUI . LAB / EQ , NDI . GUI . LAB / GE , NDI . GUI . LAB / GT , NDI . GUI . LAB / LT , NDI . GUI . LAB / NE Help for ndi . gui . Lab / le is inherited from superclass HANDLE Documentation for ndi . gui . Lab / le doc handle . le listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , NDI . GUI . LAB , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . gui . Lab / listener is inherited from superclass HANDLE Documentation for ndi . gui . Lab / listener doc handle . listener lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . LAB , NDI . GUI . LAB / EQ , NDI . GUI . LAB / GE , NDI . GUI . LAB / GT , NDI . GUI . LAB / LE , NDI . GUI . LAB / NE Help for ndi . gui . Lab / lt is inherited from superclass HANDLE Documentation for ndi . gui . Lab / lt doc handle . lt move - ndi.gui.Lab/move is a function. move(obj, ~, ~) ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . LAB , NDI . GUI . LAB / EQ , NDI . GUI . LAB / GE , NDI . GUI . LAB / GT , NDI . GUI . LAB / LE , NDI . GUI . LAB / LT Help for ndi . gui . Lab / ne is inherited from superclass HANDLE Documentation for ndi . gui . Lab / ne doc handle . ne notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDI . GUI . LAB , NDI . GUI . LAB / ADDLISTENER , NDI . GUI . LAB / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndi . gui . Lab / notify is inherited from superclass HANDLE Documentation for ndi . gui . Lab / notify doc handle . notify setZoom - ndi.gui.Lab/setZoom is a function. setZoom(obj, ~, ~, z) symbol - ndi.gui.Lab/symbol is a function. symbol(obj, src) updateConnections - ndi.gui.Lab/updateConnections is a function. updateConnections(obj)","title":"ndi.gui.Lab"},{"location":"reference/%2Bndi/%2Bgui/Lab.m/#class-ndiguilab","text":"Create lab","title":"CLASS ndi.gui.Lab"},{"location":"reference/%2Bndi/%2Bgui/Lab.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bgui/Lab.m/#properties","text":"Property Description editable window panel info panelImage subjects probes DAQs drag dragPt moved back zIn zOut editBox editTxt connects wires row transmitting","title":"Properties"},{"location":"reference/%2Bndi/%2Bgui/Lab.m/#methods","text":"Method Description Lab Create lab addDAQ ndi.gui.Lab/addDAQ is a function. addProbe ndi.gui.Lab/addProbe is a function. addSubject ndi.gui.Lab/addSubject is a function. addlistener ADDLISTENER Add listener for event. buttons ndi.gui.Lab/buttons is a function. connect diagram interconnections of dynamic systems. cut ndi.gui.Lab/cut is a function. delete DELETE Delete a handle object. details DETAILS Display array details editCallback ndi.gui.Lab/editCallback is a function. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. grid GRID Grid lines. gt > (GT) Greater than relation for handles. iconCallback ndi.gui.Lab/iconCallback is a function. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. move ndi.gui.Lab/move is a function. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setZoom ndi.gui.Lab/setZoom is a function. symbol ndi.gui.Lab/symbol is a function. updateConnections ndi.gui.Lab/updateConnections is a function.","title":"Methods"},{"location":"reference/%2Bndi/%2Bgui/Lab.m/#methods-help","text":"Lab - Create lab addDAQ - ndi.gui.Lab/addDAQ is a function. addDAQ(obj, daq) addProbe - ndi.gui.Lab/addProbe is a function. addProbe(obj, prob) addSubject - ndi.gui.Lab/addSubject is a function. addSubject(obj, subj) addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , NDI . GUI . LAB , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . gui . Lab / addlistener is inherited from superclass HANDLE Documentation for ndi . gui . Lab / addlistener doc handle . addlistener buttons - ndi.gui.Lab/buttons is a function. buttons(obj) connect - diagram interconnections of dynamic systems. CONNECT computes an aggregate model for a block diagram interconnection of dynamic systems . You can specify the block diagram connectivity in two ways : Name - based interconnection In this approach , you name the input and output signals of all blocks SYS1 , SYS2 , ... in the block diagram , including the summation blocks . The aggregate model SYS is then built by SYS = CONNECT ( SYS1 , SYS2 , ... , INPUTS , OUTPUTS ) where INPUTS and OUTPUTS are the names of the block diagram external I / Os ( specified as strings or string vectors ) . If you also need to perform open - loop analysis at specific locations in the block diagram , use SYS = CONNECT ( SYS1 , SYS2 , ... , INPUTS , OUTPUTS , APS ) where APS lists the locations ( internal signals ) of interest . The resulting model SYS contains analysis points at the locations APS ( see AnalysisPoint ) . Example 1 : Given SISO models C and G , you can construct the closed - loop transfer T from r to y using e u r ---> O --> [ C ] --- [ G ] -+---> y - | | +<----------------+ C . InputName = 'e' ; C . OutputName = 'u' ; G . InputName = 'u' ; G . OutputName = 'y' ; Sum = sumblk ( 'e = r-y' ); T = connect ( G , C , Sum , 'r' , 'y' ) Example 2 : If C and G above are two - input , two - output models instead , you can form the MIMO transfer T from r to y using C . u = 'e' ; C . y = 'u' ; G . u = 'u' ; G . y = 'y' ; Sum = sumblk ( 'e = r-y' , 2 ); T = connect ( G , C , Sum , 'r' , 'y' ) Note that C . u , C . y is shorthand for C . InputName , C . OutputName and that 'r' , 'y' select all entries of the two - entry vector signals r and y . Example 3 : If you already have specified I / O names for C and G , you can build the closed - loop model T using : Sum = sumblk ( ' %e = r - %y' , C . u , G . y ); T = connect ( G , C , Sum , 'r' , G . y ) See SUMBLK for more details on using aliases like % e and % y . Example 4 : To add an analysis point at the plant input \"u\" and then access the open - loop response L = C * G at this location , use T = connect ( G , C , Sum , 'r' , 'y' , 'u' ) L = getLoopTransfer ( T , 'u' , - 1 ); Index - based interconnection In this approach , first combine all system blocks into an aggregate , unconnected model BLKSYS using APPEND . Then construct a matrix Q where each row specifies one of the connections or summing junctions in terms of the input vector U and output vector Y of BLKSYS . For example , the row [ 3 2 0 0 ] indicates that Y ( 2 ) feeds into U ( 3 ), while the row [ 7 2 - 15 6 ] indicates that Y ( 2 ) - Y ( 15 ) + Y ( 6 ) feeds into U ( 7 ) . The aggregate model SYS is then obtained by SYS = CONNECT ( BLKSYS , Q , INPUTS , OUTPUTS ) where INPUTS and OUTPUTS are index vectors into U and Y selecting the block diagram external I / Os . Example : You can construct the closed - loop model T for the block diagram above as follows : BLKSYS = append ( C , G ); % U = inputs to C , G . Y = outputs of C , G % Here Y ( 1 ) feeds into U ( 2 ) and - Y ( 2 ) feeds into U ( 1 ) Q = [ 2 1 ; 1 - 2 ]; % External I / Os : r drives U ( 1 ) and y is Y ( 2 ) T = connect ( BLKSYS , Q , 1 , 2 ) Note : * CONNECT always returns a state - space or FRD model SYS * States that do not contribute to the I / O transfer from INPUTS to OUTPUTS are automatically discarded . To prevent this , set the \"Simplify\" option to FALSE : OPT = connectOptions ( 'Simplify' , false ); SYS = CONNECT ( ... , OPT ) See also SUMBLK , connectOptions , APPEND , SERIES , PARALLEL , FEEDBACK , LFT , DynamicSystem . cut - ndi.gui.Lab/cut is a function. cut(obj, src, ~) delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also NDI . GUI . LAB , NDI . GUI . LAB / ISVALID , CLEAR Help for ndi . gui . Lab / delete is inherited from superclass HANDLE Documentation for ndi . gui . Lab / delete doc handle . delete details - DETAILS Display array details DETAILS ( X ) displays X with a detailed description . When X is a MATLAB object , details provides more information about the object ' s properties, methods, and events, and if applicable, the package in which the class is defined . See also DISP , DISPLAY , CLASSDEF . editCallback - ndi.gui.Lab/editCallback is a function. editCallback(obj, ~, ~) eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . LAB , NDI . GUI . LAB / GE , NDI . GUI . LAB / GT , NDI . GUI . LAB / LE , NDI . GUI . LAB / LT , NDI . GUI . LAB / NE Help for ndi . gui . Lab / eq is inherited from superclass HANDLE Documentation for ndi . gui . Lab / eq doc handle . eq findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , NDI . GUI . LAB Help for ndi . gui . Lab / findobj is inherited from superclass HANDLE Documentation for ndi . gui . Lab / findobj doc handle . findobj findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also NDI . GUI . LAB , NDI . GUI . LAB / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for ndi . gui . Lab / findprop is inherited from superclass HANDLE Documentation for ndi . gui . Lab / findprop doc handle . findprop ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . LAB , NDI . GUI . LAB / EQ , NDI . GUI . LAB / GT , NDI . GUI . LAB / LE , NDI . GUI . LAB / LT , NDI . GUI . LAB / NE Help for ndi . gui . Lab / ge is inherited from superclass HANDLE Documentation for ndi . gui . Lab / ge doc handle . ge grid - GRID Grid lines. GRID ON adds major grid lines to the current axes . GRID OFF removes major and minor grid lines from the current axes . GRID MINOR toggles the minor grid lines of the current axes . GRID , by itself , toggles the major grid lines of the current axes . GRID ( AX ,... ) uses axes AX instead of the current axes . GRID sets the XGrid , YGrid , and ZGrid properties of the current axes . If the axes is a polar axes then GRID sets the ThetaGrid and RGrid properties . If the axes is a geoaxes , then GRID sets the Grid property . AX . XMinorGrid = ' on ' turns on the minor grid . See also TITLE , XLABEL , YLABEL , ZLABEL , AXES , PLOT , BOX , POLARAXES . gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . LAB , NDI . GUI . LAB / EQ , NDI . GUI . LAB / GE , NDI . GUI . LAB / LE , NDI . GUI . LAB / LT , NDI . GUI . LAB / NE Help for ndi . gui . Lab / gt is inherited from superclass HANDLE Documentation for ndi . gui . Lab / gt doc handle . gt iconCallback - ndi.gui.Lab/iconCallback is a function. iconCallback(obj, ~, ~, src) isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDI . GUI . LAB , NDI . GUI . LAB / DELETE Help for ndi . gui . Lab / isvalid is inherited from superclass HANDLE Documentation for ndi . gui . Lab / isvalid doc handle . isvalid le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . LAB , NDI . GUI . LAB / EQ , NDI . GUI . LAB / GE , NDI . GUI . LAB / GT , NDI . GUI . LAB / LT , NDI . GUI . LAB / NE Help for ndi . gui . Lab / le is inherited from superclass HANDLE Documentation for ndi . gui . Lab / le doc handle . le listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , NDI . GUI . LAB , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . gui . Lab / listener is inherited from superclass HANDLE Documentation for ndi . gui . Lab / listener doc handle . listener lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . LAB , NDI . GUI . LAB / EQ , NDI . GUI . LAB / GE , NDI . GUI . LAB / GT , NDI . GUI . LAB / LE , NDI . GUI . LAB / NE Help for ndi . gui . Lab / lt is inherited from superclass HANDLE Documentation for ndi . gui . Lab / lt doc handle . lt move - ndi.gui.Lab/move is a function. move(obj, ~, ~) ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . GUI . LAB , NDI . GUI . LAB / EQ , NDI . GUI . LAB / GE , NDI . GUI . LAB / GT , NDI . GUI . LAB / LE , NDI . GUI . LAB / LT Help for ndi . gui . Lab / ne is inherited from superclass HANDLE Documentation for ndi . gui . Lab / ne doc handle . ne notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDI . GUI . LAB , NDI . GUI . LAB / ADDLISTENER , NDI . GUI . LAB / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndi . gui . Lab / notify is inherited from superclass HANDLE Documentation for ndi . gui . Lab / notify doc handle . notify setZoom - ndi.gui.Lab/setZoom is a function. setZoom(obj, ~, ~, z) symbol - ndi.gui.Lab/symbol is a function. symbol(obj, src) updateConnections - ndi.gui.Lab/updateConnections is a function. updateConnections(obj)","title":"Methods help"},{"location":"reference/%2Bndi/%2Bgui/gui.m/","text":"ndi.gui.gui \u00b6 GUI - A gui to display the contents of an NDI_SESSION ndi.gui.gui(NDI_SESSION_OBJ) Brings up a graphical user interface to view the ndi.session NDI_SESSION_OBJ See also: ndi.session","title":"ndi.gui.gui"},{"location":"reference/%2Bndi/%2Bgui/gui.m/#ndiguigui","text":"GUI - A gui to display the contents of an NDI_SESSION ndi.gui.gui(NDI_SESSION_OBJ) Brings up a graphical user interface to view the ndi.session NDI_SESSION_OBJ See also: ndi.session","title":"ndi.gui.gui"},{"location":"reference/%2Bndi/%2Bgui/gui_v2.m/","text":"ndi.gui.gui_v2 \u00b6 ndi.gui.gui_v2 is a function.","title":"ndi.gui.gui_v2"},{"location":"reference/%2Bndi/%2Bgui/gui_v2.m/#ndiguigui_v2","text":"ndi.gui.gui_v2 is a function.","title":"ndi.gui.gui_v2"},{"location":"reference/%2Bndi/%2Bneuron/hengen.m/","text":"CLASS ndi.neuron.hengen \u00b6 ndi . neuron . hengen is a class . ndi_neuron_hengen_obj = hengen ( varargin ) Superclasses \u00b6 ndi.element.timeseries , ndi.element , ndi.ido , ndi.epoch.epochset , ndi.documentservice , ndi.time.timeseries Properties \u00b6 Property Description quality source session name type reference underlying_element direct subject_id dependencies identifier Methods \u00b6 Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.element cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochsetname the name of the ndi.element object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID getcache return the NDI_CACHE and key for ndi.element hengen ndi.neuron.hengen/hengen is a constructor. id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version ndi_unique_id Generate a unique ID number for NDI projects newdocument return a new database document of type ndi.document based on a neuron_hengen numepochs Number of epochs of ndi.epoch.epochset readtimeseries read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery need docs here t0_t1 times2samples convert from the timeseries time to sample numbers underlyingepochnodes find all the underlying epochnodes of a given epochnode Methods help \u00b6 addepoch - add an epoch to the ndi.element [ NDI_ELEMENT_OBJ , EPOCHDOC ] = ADDEPOCH ( NDI_ELEMENT_TIMESERIES_OBJ , EPOCHID , EPOCHCLOCK , T0_T1 , TIMEPOINTS , DATAPOINTS ) Registers the data for an epoch with the NDI_ELEMENT_OBJ . Inputs : NDI_ELEMENT_OBJ : The ndi . element object to modify EPOCHID : The name of the epoch to add ; should match the name of an epoch from the probe EPOCHCLOCK : The epoch clock ; must be a single clock type that matches one of the clock types of the probe T0_T1 : The starting time and ending time of the existence of information about the ELEMENT on the probe , in units of the epock clock TIMEPOINTS : the time points to be added to this epoch ; can also be the string 'probe' which means the points are read directly from the probe ( must be Tx1 ). Timepoints must be in the units of the EPOCHCLOCK . DATAPOINTS : the data points that accompany each timepoint ( must be TxXxY ...), or can be 'probe' to read from the probe Outputs : If a second output is requested in EPOCHDOC , then the DOC is NOT added to the database Help for ndi . neuron . hengen / addepoch is inherited from superclass NDI . ELEMENT . TIMESERIES buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . neuron . hengen / EPOCHNODES Help for ndi . neuron . hengen / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - build the epoch table for an ndi.element ET = BUILDEPOCHTABLE ( NDI_ELEMENT_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch ( with the session id ). ' epoch_session_id ' | Session of the epoch ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , and ' epoch_id ' Help for ndi . neuron . hengen / buildepochtable is inherited from superclass NDI . ELEMENT cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . neuron . hengen / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . neuron . hengen / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_REF ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then empty is returned . Help for ndi . neuron . hengen / doc_unique_id is inherited from superclass NDI . ELEMENT elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING ( NDI_ELEMENT_OBJ ) Returns the name as a human - readable string . For ndi . element objects , this is the string ' element: ' followed by its name Help for ndi . neuron . hengen / elementstring is inherited from superclass NDI . ELEMENT epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . neuron . hengen / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_ELEMENT_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch . The ndi . element class always returns the clock type ( s ) of the element it is based on Help for ndi . neuron . hengen / epochclock is inherited from superclass NDI . ELEMENT epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . neuron . hengen / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . Help for ndi . neuron . hengen / epochid is inherited from superclass NDI . EPOCH . EPOCHSET epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . neuron . hengen / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochsetname - the name of the ndi.element object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_ELEMENT_OBJ ) Returns the object name that is used when creating epoch nodes . For ndi . element objects , this is ndi . element / ELEMENTSTRING . Help for ndi . neuron . hengen / epochsetname is inherited from superclass NDI . ELEMENT epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . neuron . hengen / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . neuron . hengen / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET getcache - return the NDI_CACHE and key for ndi.element [ CACHE , KEY ] = GETCACHE ( NDI_ELEMENT_OBJ ) Returns the CACHE and KEY for the ndi . element object . The CACHE is returned from the associated session . The KEY is the probe ' s ELEMENTSTRING plus the TYPE of the ELEMENT. See also : ndi . file . navigator Help for ndi . neuron . hengen / getcache is inherited from superclass NDI . ELEMENT hengen - ndi.neuron.hengen/hengen is a constructor. ndi_neuron_hengen_obj = hengen ( varargin ) id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then an error is returned . Help for ndi . neuron . hengen / id is inherited from superclass NDI . ELEMENT issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_ELEMENT_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . element objects , this returns 0 so that underlying ndi . probe epochs are added . Help for ndi . neuron . hengen / issyncgraphroot is inherited from superclass NDI . ELEMENT load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS ( NDI_ELEMENT_OBJ ) Loads the ndi . document that is based on the ndi . element object and any associated epoch documents . Help for ndi . neuron . hengen / load_all_element_docs is inherited from superclass NDI . ELEMENT load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC ( NDI_ELEMENT_OBJ ) Load an ndi . document that is based on the ndi . element object . Returns empty if there is no such document . Help for ndi . neuron . hengen / load_element_doc is inherited from superclass NDI . ELEMENT loadaddedepochs - load the added epochs from an ndi.element [ ET_ADDED , EPOCHDOCS ] = LOADADDEDEOPCHS ( NDI_ELEMENT_OBJ ) Load the EPOCHTABLE that consists of added / registered epochs that provide information about the ndi . element . Help for ndi . neuron . hengen / loadaddedepochs is inherited from superclass NDI . ELEMENT matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . neuron . hengen / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . neuron . hengen . ndi_unique_id is inherited from superclass NDI . IDO newdocument - return a new database document of type ndi.document based on a neuron_hengen NDI_DOCUMENT_OBJ = NEWDOCUMENT ( ndi_neuron_hengen_obj ) Fill out the fields of an NDI_DOCUMENT_OBJ of type ' ndi_document_element ' with the corresponding ' name ' and ' type ' fields of the element NDI_NEURON_HENGEN_OBJ and the ' name ' , ' type ' , and ' reference ' fields of its underlying NDI_PROBE_OBJ . If EPOCHID is provided , then an EPOCHID field is filled out as well in accordance to ' ndi_document_epochid ' . When the document is created , it is automatically added to the session numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . neuron . hengen / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET readtimeseries - read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch [ DATA , T , TIMEREF ] = READTIMESERIES ( NDI_ELEMENT_TIMESERIES_OBJ , TIMEREF_OR_EPOCH , T0 , T1 ) Reads timeseries data from an ndi . element . timeseries object . The DATA and time information T that are returned depend on the the specific subclass of ndi . element . timeseries that is called ( see READTIMESERIESEPOCH ) . In the base class , this function merely calls the element ' s probe ' s READTIMESERIES function . TIMEREF_OR_EPOCH is either an ndi . time . timereference object indicating the time reference for T0 , T1 , or it can be a single number , which will indicate the data are to be read from that epoch . DATA is the data for the probe . T is a time structure , in units of TIMEREF if it is an ndi . time . timereference object or in units of the epoch if an epoch is passed . The TIMEREF is returned . Help for ndi . neuron . hengen / readtimeseries is inherited from superclass NDI . ELEMENT . TIMESERIES resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . neuron . hengen / EPOCHTABLE Help for ndi . neuron . hengen / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLE_RATE ( NDI_TIMESERIES_OBJ , EPOCH ) Returns the sampling rate of a given ndi . time . timeseries object for the epoch EPOCH . EPOCH can be specified as an index or EPOCH_ID . If NDI_TIMESERIES_OBJ is not regularly sampled , then - 1 is returned . Help for ndi . neuron . hengen / samplerate is inherited from superclass NDI . TIME . TIMESERIES samples2times - convert from the timeseries time to sample numbers SAMPLES = TIME2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. TODO : convert times to dev_local_clock Help for ndi . neuron . hengen / samples2times is inherited from superclass NDI . TIME . TIMESERIES searchquery - need docs here Help for ndi . neuron . hengen / searchquery is inherited from superclass NDI . ELEMENT . TIMESERIES t0_t1 - ** T0_T1 - return the t0_t1 ( beginning and end ) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK TODO : this must be a bug , it ' s just self - referential Help for ndi . neuron . hengen / t0_t1 is inherited from superclass NDI . ELEMENT times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. Help for ndi . neuron . hengen / times2samples is inherited from superclass NDI . TIME . TIMESERIES underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . neuron . hengen / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET","title":"ndi.neuron.hengen"},{"location":"reference/%2Bndi/%2Bneuron/hengen.m/#class-ndineuronhengen","text":"ndi . neuron . hengen is a class . ndi_neuron_hengen_obj = hengen ( varargin )","title":"CLASS ndi.neuron.hengen"},{"location":"reference/%2Bndi/%2Bneuron/hengen.m/#superclasses","text":"ndi.element.timeseries , ndi.element , ndi.ido , ndi.epoch.epochset , ndi.documentservice , ndi.time.timeseries","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bneuron/hengen.m/#properties","text":"Property Description quality source session name type reference underlying_element direct subject_id dependencies identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Bneuron/hengen.m/#methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.element cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochsetname the name of the ndi.element object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID getcache return the NDI_CACHE and key for ndi.element hengen ndi.neuron.hengen/hengen is a constructor. id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version ndi_unique_id Generate a unique ID number for NDI projects newdocument return a new database document of type ndi.document based on a neuron_hengen numepochs Number of epochs of ndi.epoch.epochset readtimeseries read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery need docs here t0_t1 times2samples convert from the timeseries time to sample numbers underlyingepochnodes find all the underlying epochnodes of a given epochnode","title":"Methods"},{"location":"reference/%2Bndi/%2Bneuron/hengen.m/#methods-help","text":"addepoch - add an epoch to the ndi.element [ NDI_ELEMENT_OBJ , EPOCHDOC ] = ADDEPOCH ( NDI_ELEMENT_TIMESERIES_OBJ , EPOCHID , EPOCHCLOCK , T0_T1 , TIMEPOINTS , DATAPOINTS ) Registers the data for an epoch with the NDI_ELEMENT_OBJ . Inputs : NDI_ELEMENT_OBJ : The ndi . element object to modify EPOCHID : The name of the epoch to add ; should match the name of an epoch from the probe EPOCHCLOCK : The epoch clock ; must be a single clock type that matches one of the clock types of the probe T0_T1 : The starting time and ending time of the existence of information about the ELEMENT on the probe , in units of the epock clock TIMEPOINTS : the time points to be added to this epoch ; can also be the string 'probe' which means the points are read directly from the probe ( must be Tx1 ). Timepoints must be in the units of the EPOCHCLOCK . DATAPOINTS : the data points that accompany each timepoint ( must be TxXxY ...), or can be 'probe' to read from the probe Outputs : If a second output is requested in EPOCHDOC , then the DOC is NOT added to the database Help for ndi . neuron . hengen / addepoch is inherited from superclass NDI . ELEMENT . TIMESERIES buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . neuron . hengen / EPOCHNODES Help for ndi . neuron . hengen / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - build the epoch table for an ndi.element ET = BUILDEPOCHTABLE ( NDI_ELEMENT_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch ( with the session id ). ' epoch_session_id ' | Session of the epoch ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , and ' epoch_id ' Help for ndi . neuron . hengen / buildepochtable is inherited from superclass NDI . ELEMENT cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . neuron . hengen / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . neuron . hengen / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_REF ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then empty is returned . Help for ndi . neuron . hengen / doc_unique_id is inherited from superclass NDI . ELEMENT elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING ( NDI_ELEMENT_OBJ ) Returns the name as a human - readable string . For ndi . element objects , this is the string ' element: ' followed by its name Help for ndi . neuron . hengen / elementstring is inherited from superclass NDI . ELEMENT epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . neuron . hengen / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_ELEMENT_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch . The ndi . element class always returns the clock type ( s ) of the element it is based on Help for ndi . neuron . hengen / epochclock is inherited from superclass NDI . ELEMENT epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . neuron . hengen / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . Help for ndi . neuron . hengen / epochid is inherited from superclass NDI . EPOCH . EPOCHSET epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . neuron . hengen / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochsetname - the name of the ndi.element object, for EPOCHNODES NAME = EPOCHSETNAME ( NDI_ELEMENT_OBJ ) Returns the object name that is used when creating epoch nodes . For ndi . element objects , this is ndi . element / ELEMENTSTRING . Help for ndi . neuron . hengen / epochsetname is inherited from superclass NDI . ELEMENT epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . neuron . hengen / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . neuron . hengen / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET getcache - return the NDI_CACHE and key for ndi.element [ CACHE , KEY ] = GETCACHE ( NDI_ELEMENT_OBJ ) Returns the CACHE and KEY for the ndi . element object . The CACHE is returned from the associated session . The KEY is the probe ' s ELEMENTSTRING plus the TYPE of the ELEMENT. See also : ndi . file . navigator Help for ndi . neuron . hengen / getcache is inherited from superclass NDI . ELEMENT hengen - ndi.neuron.hengen/hengen is a constructor. ndi_neuron_hengen_obj = hengen ( varargin ) id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then an error is returned . Help for ndi . neuron . hengen / id is inherited from superclass NDI . ELEMENT issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_ELEMENT_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . element objects , this returns 0 so that underlying ndi . probe epochs are added . Help for ndi . neuron . hengen / issyncgraphroot is inherited from superclass NDI . ELEMENT load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS ( NDI_ELEMENT_OBJ ) Loads the ndi . document that is based on the ndi . element object and any associated epoch documents . Help for ndi . neuron . hengen / load_all_element_docs is inherited from superclass NDI . ELEMENT load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC ( NDI_ELEMENT_OBJ ) Load an ndi . document that is based on the ndi . element object . Returns empty if there is no such document . Help for ndi . neuron . hengen / load_element_doc is inherited from superclass NDI . ELEMENT loadaddedepochs - load the added epochs from an ndi.element [ ET_ADDED , EPOCHDOCS ] = LOADADDEDEOPCHS ( NDI_ELEMENT_OBJ ) Load the EPOCHTABLE that consists of added / registered epochs that provide information about the ndi . element . Help for ndi . neuron . hengen / loadaddedepochs is inherited from superclass NDI . ELEMENT matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . neuron . hengen / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . neuron . hengen . ndi_unique_id is inherited from superclass NDI . IDO newdocument - return a new database document of type ndi.document based on a neuron_hengen NDI_DOCUMENT_OBJ = NEWDOCUMENT ( ndi_neuron_hengen_obj ) Fill out the fields of an NDI_DOCUMENT_OBJ of type ' ndi_document_element ' with the corresponding ' name ' and ' type ' fields of the element NDI_NEURON_HENGEN_OBJ and the ' name ' , ' type ' , and ' reference ' fields of its underlying NDI_PROBE_OBJ . If EPOCHID is provided , then an EPOCHID field is filled out as well in accordance to ' ndi_document_epochid ' . When the document is created , it is automatically added to the session numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . neuron . hengen / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET readtimeseries - read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch [ DATA , T , TIMEREF ] = READTIMESERIES ( NDI_ELEMENT_TIMESERIES_OBJ , TIMEREF_OR_EPOCH , T0 , T1 ) Reads timeseries data from an ndi . element . timeseries object . The DATA and time information T that are returned depend on the the specific subclass of ndi . element . timeseries that is called ( see READTIMESERIESEPOCH ) . In the base class , this function merely calls the element ' s probe ' s READTIMESERIES function . TIMEREF_OR_EPOCH is either an ndi . time . timereference object indicating the time reference for T0 , T1 , or it can be a single number , which will indicate the data are to be read from that epoch . DATA is the data for the probe . T is a time structure , in units of TIMEREF if it is an ndi . time . timereference object or in units of the epoch if an epoch is passed . The TIMEREF is returned . Help for ndi . neuron . hengen / readtimeseries is inherited from superclass NDI . ELEMENT . TIMESERIES resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . neuron . hengen / EPOCHTABLE Help for ndi . neuron . hengen / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLE_RATE ( NDI_TIMESERIES_OBJ , EPOCH ) Returns the sampling rate of a given ndi . time . timeseries object for the epoch EPOCH . EPOCH can be specified as an index or EPOCH_ID . If NDI_TIMESERIES_OBJ is not regularly sampled , then - 1 is returned . Help for ndi . neuron . hengen / samplerate is inherited from superclass NDI . TIME . TIMESERIES samples2times - convert from the timeseries time to sample numbers SAMPLES = TIME2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. TODO : convert times to dev_local_clock Help for ndi . neuron . hengen / samples2times is inherited from superclass NDI . TIME . TIMESERIES searchquery - need docs here Help for ndi . neuron . hengen / searchquery is inherited from superclass NDI . ELEMENT . TIMESERIES t0_t1 - ** T0_T1 - return the t0_t1 ( beginning and end ) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK TODO : this must be a bug , it ' s just self - referential Help for ndi . neuron . hengen / t0_t1 is inherited from superclass NDI . ELEMENT times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. Help for ndi . neuron . hengen / times2samples is inherited from superclass NDI . TIME . TIMESERIES underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . neuron . hengen / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET","title":"Methods help"},{"location":"reference/%2Bndi/%2Bprobe/timeseries.m/","text":"CLASS ndi.probe.timeseries \u00b6 ndi.probe.timeseries - Create a new ndi.probe.timeseries class object Superclasses \u00b6 ndi.probe , ndi.element , ndi.ido , ndi.epoch.epochset , ndi.documentservice , ndi.time.timeseries Properties \u00b6 Property Description session name type reference underlying_element direct subject_id dependencies identifier Methods \u00b6 Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version ndi_unique_id Generate a unique ID number for NDI projects newdocument need docs here numepochs Number of epochs of ndi.epoch.epochset probestring Produce a human-readable probe string readtimeseries read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery need docs here t0_t1 times2samples convert from the timeseries time to sample numbers timeseries create a new ndi.probe.timeseries object underlyingepochnodes find all the underlying epochnodes of a given epochnode Methods help \u00b6 addepoch - add an epoch to the ndi.element [ NDI_ELEMENT_OBJ , EPOCHDOC ] = ADDEPOCH ( NDI_ELEMENT_OBJ , EPOCHID , EPOCHCLOCK , T0_T1 ) Registers the data for an epoch with the NDI_ELEMENT_OBJ . Inputs : NDI_ELEMENT_OBJ : The ndi . element object to modify EPOCHID : The name of the epoch to add ; should match the name of an epoch from the probe EPOCHCLOCK : The epoch clock ; must be a single clock type that matches one of the clock types of the probe T0_T1 : The starting time and ending time of the existence of information about the ELEMENT on the probe , in units of the epock clock Help for ndi . probe . timeseries / addepoch is inherited from superclass NDI . ELEMENT buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . probe . timeseries / EPOCHNODES Help for ndi . probe . timeseries / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - build the epoch table for an ndi.probe. * ET = BUILDEPOCHTABLE ( NDI_PROBE_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch . ' epoch_session_id ' | The ID of the session ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , and ' epoch_id ' Help for ndi . probe . timeseries / buildepochtable is inherited from superclass NDI . PROBE cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . probe . timeseries / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . probe . timeseries / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_REF ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then empty is returned . Help for ndi . probe . timeseries / doc_unique_id is inherited from superclass NDI . ELEMENT elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING ( NDI_ELEMENT_OBJ ) Returns the name as a human - readable string . For ndi . element objects , this is the string ' element: ' followed by its name Help for ndi . probe . timeseries / elementstring is inherited from superclass NDI . ELEMENT epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . probe . timeseries / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_PROBE_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch . The ndi . probe class always returns the clock type ( s ) of the device it is based on Help for ndi . probe . timeseries / epochclock is inherited from superclass NDI . PROBE epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . probe . timeseries / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . Help for ndi . probe . timeseries / epochid is inherited from superclass NDI . EPOCH . EPOCHSET epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . probe . timeseries / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochprobemapmatch - does an epochprobemap record match our probe? B = EPOCHPROBEMAPMATCH ( NDI_PROBE_OBJ , EPOCHPROBEMAP ) Returns 1 if the ndi . epoch . epochprobemap object EPOCHPROBEMAP is a match for the NDI_PROBE_OBJ probe and 0 otherwise . Help for ndi . probe . timeseries / epochprobemapmatch is inherited from superclass NDI . PROBE epochsetname - the name of the ndi.probe. object, for EPOCHNODES* NAME = EPOCHSETNAME ( NDI_PROBE_OBJ ) Returns the object name that is used when creating epoch nodes . For ndi . probe objects , this is the string ' probe: ' followed by PROBESTRING ( NDI_PROBE_OBJ ) . Help for ndi . probe . timeseries / epochsetname is inherited from superclass NDI . PROBE epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . probe . timeseries / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . probe . timeseries / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET eq - are 2 ndi.probe objects equal? Returns 1 if the objects share an object class , session , and probe string . Help for ndi . probe . timeseries / eq is inherited from superclass NDI . PROBE getcache - return the NDI_CACHE and key for ndi.element [ CACHE , KEY ] = GETCACHE ( NDI_ELEMENT_OBJ ) Returns the CACHE and KEY for the ndi . element object . The CACHE is returned from the associated session . The KEY is the probe ' s ELEMENTSTRING plus the TYPE of the ELEMENT. See also : ndi . file . navigator Help for ndi . probe . timeseries / getcache is inherited from superclass NDI . ELEMENT getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe. * [ DEV , DEVNAME , DEVEPOCH , CHANNELTYPE , CHANNELLIST ] = GETCHANNELDEVINFO ( NDI_PROBE_OBJ , EPOCH_NUMBER_OR_ID ) Given an ndi . probe . * object and an EPOCH number , this function returns the corresponding channel and device info . Suppose there are C channels corresponding to a probe . Then the outputs are DEV is a 1 xC cell array of ndi . daq . system objects for each channel DEVNAME is a 1 xC cell array of the names of each device in DEV DEVEPOCH is a 1 xC array with the epoch id of the probe ' s EPOCH on each device CHANNELTYPE is a cell array of the type of each channel CHANNELLIST is the channel number of each channel . Help for ndi . probe . timeseries / getchanneldevinfo is inherited from superclass NDI . PROBE id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then an error is returned . Help for ndi . probe . timeseries / id is inherited from superclass NDI . ELEMENT issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset and ndi . probe . * this returns 0 so that the underlying ndi . daq . system epochs are added . Help for ndi . probe . timeseries / issyncgraphroot is inherited from superclass NDI . PROBE load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS ( NDI_ELEMENT_OBJ ) Loads the ndi . document that is based on the ndi . element object and any associated epoch documents . Help for ndi . probe . timeseries / load_all_element_docs is inherited from superclass NDI . ELEMENT load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC ( NDI_ELEMENT_OBJ ) Load an ndi . document that is based on the ndi . element object . Returns empty if there is no such document . Help for ndi . probe . timeseries / load_element_doc is inherited from superclass NDI . ELEMENT loadaddedepochs - load the added epochs from an ndi.element [ ET_ADDED , EPOCHDOCS ] = LOADADDEDEOPCHS ( NDI_ELEMENT_OBJ ) Load the EPOCHTABLE that consists of added / registered epochs that provide information about the ndi . element . Help for ndi . probe . timeseries / loadaddedepochs is inherited from superclass NDI . ELEMENT matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . probe . timeseries / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . probe . timeseries . ndi_unique_id is inherited from superclass NDI . IDO newdocument - need docs here numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . probe . timeseries / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET probestring - Produce a human-readable probe string PROBESTR = PROBESTRING ( NDI_PROBE_OBJ ) Returns the name and reference of a probe as a human - readable string . This is simply PROBESTR = [ NDI_PROBE_OBJ . name ' _ ' in2str ( NDI_PROBE_OBJ . reference ) ] Help for ndi . probe . timeseries / probestring is inherited from superclass NDI . PROBE readtimeseries - read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch [ DATA , T , TIMEREF ] = READTIMESERIES ( NDI_PROBE_TIMESERIES_OBJ , TIMEREF_OR_EPOCH , T0 , T1 ) Reads timeseries data from an ndi . probe . timeseries object . The DATA and time information T that are returned depend on the the specific subclass of ndi . probe . timeseries that is called ( see READTIMESERIESEPOCH ) . TIMEREF_OR_EPOCH is either an ndi . time . timereference object indicating the time reference for T0 , T1 , or it can be a single number , which will indicate the data are to be read from that epoch . DATA is the data for the probe . T is a time structure , in units of TIMEREF if it is an ndi . time . timereference object or in units of the epoch if an epoch is passed . The TIMEREF is returned . resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . probe . timeseries / EPOCHTABLE Help for ndi . probe . timeseries / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLE_RATE ( NDI_TIMESERIES_OBJ , EPOCH ) Returns the sampling rate of a given ndi . time . timeseries object for the epoch EPOCH . EPOCH can be specified as an index or EPOCH_ID . If NDI_TIMESERIES_OBJ is not regularly sampled , then - 1 is returned . Help for ndi . probe . timeseries / samplerate is inherited from superclass NDI . TIME . TIMESERIES samples2times - convert from the timeseries time to sample numbers SAMPLES = TIME2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. TODO : convert times to dev_local_clock Help for ndi . probe . timeseries / samples2times is inherited from superclass NDI . TIME . TIMESERIES searchquery - need docs here t0_t1 - ** T0_T1 - return the t0_t1 ( beginning and end ) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK TODO : this must be a bug , it ' s just self - referential Help for ndi . probe . timeseries / t0_t1 is inherited from superclass NDI . ELEMENT times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. Help for ndi . probe . timeseries / times2samples is inherited from superclass NDI . TIME . TIMESERIES timeseries - create a new ndi.probe.timeseries object OBJ = ndi.probe.timeseries(SESSION, NAME, REFERENCE, TYPE) Creates an ndi.probe associated with an ndi.session object SESSION and with name NAME (a string that must start with a letter and contain no white space), reference number equal to REFERENCE (a non-negative integer), the TYPE of the probe (a string that must start with a letter and contain no white space). ndi.probe.timeseries is an abstract class, and a specific implementation must be called. underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . probe . timeseries / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET","title":"ndi.probe.timeseries"},{"location":"reference/%2Bndi/%2Bprobe/timeseries.m/#class-ndiprobetimeseries","text":"ndi.probe.timeseries - Create a new ndi.probe.timeseries class object","title":"CLASS ndi.probe.timeseries"},{"location":"reference/%2Bndi/%2Bprobe/timeseries.m/#superclasses","text":"ndi.probe , ndi.element , ndi.ido , ndi.epoch.epochset , ndi.documentservice , ndi.time.timeseries","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bprobe/timeseries.m/#properties","text":"Property Description session name type reference underlying_element direct subject_id dependencies identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Bprobe/timeseries.m/#methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version ndi_unique_id Generate a unique ID number for NDI projects newdocument need docs here numepochs Number of epochs of ndi.epoch.epochset probestring Produce a human-readable probe string readtimeseries read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery need docs here t0_t1 times2samples convert from the timeseries time to sample numbers timeseries create a new ndi.probe.timeseries object underlyingepochnodes find all the underlying epochnodes of a given epochnode","title":"Methods"},{"location":"reference/%2Bndi/%2Bprobe/timeseries.m/#methods-help","text":"addepoch - add an epoch to the ndi.element [ NDI_ELEMENT_OBJ , EPOCHDOC ] = ADDEPOCH ( NDI_ELEMENT_OBJ , EPOCHID , EPOCHCLOCK , T0_T1 ) Registers the data for an epoch with the NDI_ELEMENT_OBJ . Inputs : NDI_ELEMENT_OBJ : The ndi . element object to modify EPOCHID : The name of the epoch to add ; should match the name of an epoch from the probe EPOCHCLOCK : The epoch clock ; must be a single clock type that matches one of the clock types of the probe T0_T1 : The starting time and ending time of the existence of information about the ELEMENT on the probe , in units of the epock clock Help for ndi . probe . timeseries / addepoch is inherited from superclass NDI . ELEMENT buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . probe . timeseries / EPOCHNODES Help for ndi . probe . timeseries / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - build the epoch table for an ndi.probe. * ET = BUILDEPOCHTABLE ( NDI_PROBE_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch . ' epoch_session_id ' | The ID of the session ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , and ' epoch_id ' Help for ndi . probe . timeseries / buildepochtable is inherited from superclass NDI . PROBE cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . probe . timeseries / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . probe . timeseries / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_REF ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then empty is returned . Help for ndi . probe . timeseries / doc_unique_id is inherited from superclass NDI . ELEMENT elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING ( NDI_ELEMENT_OBJ ) Returns the name as a human - readable string . For ndi . element objects , this is the string ' element: ' followed by its name Help for ndi . probe . timeseries / elementstring is inherited from superclass NDI . ELEMENT epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . probe . timeseries / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_PROBE_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch . The ndi . probe class always returns the clock type ( s ) of the device it is based on Help for ndi . probe . timeseries / epochclock is inherited from superclass NDI . PROBE epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . probe . timeseries / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . Help for ndi . probe . timeseries / epochid is inherited from superclass NDI . EPOCH . EPOCHSET epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . probe . timeseries / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochprobemapmatch - does an epochprobemap record match our probe? B = EPOCHPROBEMAPMATCH ( NDI_PROBE_OBJ , EPOCHPROBEMAP ) Returns 1 if the ndi . epoch . epochprobemap object EPOCHPROBEMAP is a match for the NDI_PROBE_OBJ probe and 0 otherwise . Help for ndi . probe . timeseries / epochprobemapmatch is inherited from superclass NDI . PROBE epochsetname - the name of the ndi.probe. object, for EPOCHNODES* NAME = EPOCHSETNAME ( NDI_PROBE_OBJ ) Returns the object name that is used when creating epoch nodes . For ndi . probe objects , this is the string ' probe: ' followed by PROBESTRING ( NDI_PROBE_OBJ ) . Help for ndi . probe . timeseries / epochsetname is inherited from superclass NDI . PROBE epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . probe . timeseries / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . probe . timeseries / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET eq - are 2 ndi.probe objects equal? Returns 1 if the objects share an object class , session , and probe string . Help for ndi . probe . timeseries / eq is inherited from superclass NDI . PROBE getcache - return the NDI_CACHE and key for ndi.element [ CACHE , KEY ] = GETCACHE ( NDI_ELEMENT_OBJ ) Returns the CACHE and KEY for the ndi . element object . The CACHE is returned from the associated session . The KEY is the probe ' s ELEMENTSTRING plus the TYPE of the ELEMENT. See also : ndi . file . navigator Help for ndi . probe . timeseries / getcache is inherited from superclass NDI . ELEMENT getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe. * [ DEV , DEVNAME , DEVEPOCH , CHANNELTYPE , CHANNELLIST ] = GETCHANNELDEVINFO ( NDI_PROBE_OBJ , EPOCH_NUMBER_OR_ID ) Given an ndi . probe . * object and an EPOCH number , this function returns the corresponding channel and device info . Suppose there are C channels corresponding to a probe . Then the outputs are DEV is a 1 xC cell array of ndi . daq . system objects for each channel DEVNAME is a 1 xC cell array of the names of each device in DEV DEVEPOCH is a 1 xC array with the epoch id of the probe ' s EPOCH on each device CHANNELTYPE is a cell array of the type of each channel CHANNELLIST is the channel number of each channel . Help for ndi . probe . timeseries / getchanneldevinfo is inherited from superclass NDI . PROBE id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then an error is returned . Help for ndi . probe . timeseries / id is inherited from superclass NDI . ELEMENT issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset and ndi . probe . * this returns 0 so that the underlying ndi . daq . system epochs are added . Help for ndi . probe . timeseries / issyncgraphroot is inherited from superclass NDI . PROBE load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS ( NDI_ELEMENT_OBJ ) Loads the ndi . document that is based on the ndi . element object and any associated epoch documents . Help for ndi . probe . timeseries / load_all_element_docs is inherited from superclass NDI . ELEMENT load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC ( NDI_ELEMENT_OBJ ) Load an ndi . document that is based on the ndi . element object . Returns empty if there is no such document . Help for ndi . probe . timeseries / load_element_doc is inherited from superclass NDI . ELEMENT loadaddedepochs - load the added epochs from an ndi.element [ ET_ADDED , EPOCHDOCS ] = LOADADDEDEOPCHS ( NDI_ELEMENT_OBJ ) Load the EPOCHTABLE that consists of added / registered epochs that provide information about the ndi . element . Help for ndi . probe . timeseries / loadaddedepochs is inherited from superclass NDI . ELEMENT matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . probe . timeseries / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . probe . timeseries . ndi_unique_id is inherited from superclass NDI . IDO newdocument - need docs here numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . probe . timeseries / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET probestring - Produce a human-readable probe string PROBESTR = PROBESTRING ( NDI_PROBE_OBJ ) Returns the name and reference of a probe as a human - readable string . This is simply PROBESTR = [ NDI_PROBE_OBJ . name ' _ ' in2str ( NDI_PROBE_OBJ . reference ) ] Help for ndi . probe . timeseries / probestring is inherited from superclass NDI . PROBE readtimeseries - read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch [ DATA , T , TIMEREF ] = READTIMESERIES ( NDI_PROBE_TIMESERIES_OBJ , TIMEREF_OR_EPOCH , T0 , T1 ) Reads timeseries data from an ndi . probe . timeseries object . The DATA and time information T that are returned depend on the the specific subclass of ndi . probe . timeseries that is called ( see READTIMESERIESEPOCH ) . TIMEREF_OR_EPOCH is either an ndi . time . timereference object indicating the time reference for T0 , T1 , or it can be a single number , which will indicate the data are to be read from that epoch . DATA is the data for the probe . T is a time structure , in units of TIMEREF if it is an ndi . time . timereference object or in units of the epoch if an epoch is passed . The TIMEREF is returned . resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . probe . timeseries / EPOCHTABLE Help for ndi . probe . timeseries / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLE_RATE ( NDI_TIMESERIES_OBJ , EPOCH ) Returns the sampling rate of a given ndi . time . timeseries object for the epoch EPOCH . EPOCH can be specified as an index or EPOCH_ID . If NDI_TIMESERIES_OBJ is not regularly sampled , then - 1 is returned . Help for ndi . probe . timeseries / samplerate is inherited from superclass NDI . TIME . TIMESERIES samples2times - convert from the timeseries time to sample numbers SAMPLES = TIME2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. TODO : convert times to dev_local_clock Help for ndi . probe . timeseries / samples2times is inherited from superclass NDI . TIME . TIMESERIES searchquery - need docs here t0_t1 - ** T0_T1 - return the t0_t1 ( beginning and end ) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK TODO : this must be a bug , it ' s just self - referential Help for ndi . probe . timeseries / t0_t1 is inherited from superclass NDI . ELEMENT times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. Help for ndi . probe . timeseries / times2samples is inherited from superclass NDI . TIME . TIMESERIES timeseries - create a new ndi.probe.timeseries object OBJ = ndi.probe.timeseries(SESSION, NAME, REFERENCE, TYPE) Creates an ndi.probe associated with an ndi.session object SESSION and with name NAME (a string that must start with a letter and contain no white space), reference number equal to REFERENCE (a non-negative integer), the TYPE of the probe (a string that must start with a letter and contain no white space). ndi.probe.timeseries is an abstract class, and a specific implementation must be called. underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . probe . timeseries / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET","title":"Methods help"},{"location":"reference/%2Bndi/%2Bprobe/%2Bfun/probestruct2probe.m/","text":"ndi.probe.fun.probestruct2probe \u00b6 NDI . PROBE . FUN . PROBESTRUCT2PROBE - Convert probe structures to NDI_PROBE objects NDI_PROBE_OBJ = ndi . probe . fun . probestruct2probe ( PROBESTRUCT , EXP ) Given an array of structures PROBESTRUCT with field 'name' , 'reference' , and 'type' , and an ndi . session EXP , this function generates the appropriate subclass of ndi . probe for dealing with the PROBE and returns the objects in a cell array NDI_PROBE_OBJ . This function uses the ndi . globals variable 'ndi.globals.probetype2object' to make the conversion . See also : ndi . globals and NDI_PROBETYPE2OBJECT","title":"ndi.probe.fun.probestruct2probe"},{"location":"reference/%2Bndi/%2Bprobe/%2Bfun/probestruct2probe.m/#ndiprobefunprobestruct2probe","text":"NDI . PROBE . FUN . PROBESTRUCT2PROBE - Convert probe structures to NDI_PROBE objects NDI_PROBE_OBJ = ndi . probe . fun . probestruct2probe ( PROBESTRUCT , EXP ) Given an array of structures PROBESTRUCT with field 'name' , 'reference' , and 'type' , and an ndi . session EXP , this function generates the appropriate subclass of ndi . probe for dealing with the PROBE and returns the objects in a cell array NDI_PROBE_OBJ . This function uses the ndi . globals variable 'ndi.globals.probetype2object' to make the conversion . See also : ndi . globals and NDI_PROBETYPE2OBJECT","title":"ndi.probe.fun.probestruct2probe"},{"location":"reference/%2Bndi/%2Bprobe/%2Bfun/probetype2objectinit.m/","text":"ndi.probe.fun.probetype2objectinit \u00b6 ndi . probe . fun . PROBETYPE2OBJECTINIT - Initializes the NDI_PROBETYPE2OBJECT global variable in NDI package ndi . probe . fun . probetype2objectinit Initializes the NDI_PROBETYPE2OBJECT structure . The structure has two fields , 'type' and 'classname' . Each entry describes the ndi . probe subclass to use to create an ndi . probe object for the given ndi . epoch . epochprobemap_daqsystem type . Use TYPE ndi . probe . fun . probetype2objectinit to see the structure","title":"ndi.probe.fun.probetype2objectinit"},{"location":"reference/%2Bndi/%2Bprobe/%2Bfun/probetype2objectinit.m/#ndiprobefunprobetype2objectinit","text":"ndi . probe . fun . PROBETYPE2OBJECTINIT - Initializes the NDI_PROBETYPE2OBJECT global variable in NDI package ndi . probe . fun . probetype2objectinit Initializes the NDI_PROBETYPE2OBJECT structure . The structure has two fields , 'type' and 'classname' . Each entry describes the ndi . probe subclass to use to create an ndi . probe object for the given ndi . epoch . epochprobemap_daqsystem type . Use TYPE ndi . probe . fun . probetype2objectinit to see the structure","title":"ndi.probe.fun.probetype2objectinit"},{"location":"reference/%2Bndi/%2Bprobe/%2Btimeseries/mfdaq.m/","text":"CLASS ndi.probe.timeseries.mfdaq \u00b6 NDI_PROBE_TIMESERIES_MFDAQ - Create a new NDI_PROBE_MFAQ class object that handles probes that are associated with NDI_DAQSYSTEM_MFDAQ objects Superclasses \u00b6 ndi.probe.timeseries , ndi.probe , ndi.element , ndi.ido , ndi.epoch.epochset , ndi.documentservice , ndi.time.timeseries Properties \u00b6 Property Description session name type reference underlying_element direct subject_id dependencies identifier Methods \u00b6 Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version mfdaq create a new ndi.probe object ndi_unique_id Generate a unique ID number for NDI projects newdocument need docs here numepochs Number of epochs of ndi.epoch.epochset probestring Produce a human-readable probe string read_epochsamples read the data from a specified epoch readtimeseries read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch readtimeseriesepoch read the data from a specified epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate GET THE SAMPLE RATE FOR A PROBE IN AN EPOCH samples2times convert from the timeseries time to sample numbers searchquery need docs here t0_t1 times2samples convert from the timeseries time to sample numbers underlyingepochnodes find all the underlying epochnodes of a given epochnode Methods help \u00b6 addepoch - add an epoch to the ndi.element [ NDI_ELEMENT_OBJ , EPOCHDOC ] = ADDEPOCH ( NDI_ELEMENT_OBJ , EPOCHID , EPOCHCLOCK , T0_T1 ) Registers the data for an epoch with the NDI_ELEMENT_OBJ . Inputs : NDI_ELEMENT_OBJ : The ndi . element object to modify EPOCHID : The name of the epoch to add ; should match the name of an epoch from the probe EPOCHCLOCK : The epoch clock ; must be a single clock type that matches one of the clock types of the probe T0_T1 : The starting time and ending time of the existence of information about the ELEMENT on the probe , in units of the epock clock Help for ndi . probe . timeseries . mfdaq / addepoch is inherited from superclass NDI . ELEMENT buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . probe . timeseries . mfdaq / EPOCHNODES Help for ndi . probe . timeseries . mfdaq / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - build the epoch table for an ndi.probe. * ET = BUILDEPOCHTABLE ( NDI_PROBE_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch . ' epoch_session_id ' | The ID of the session ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , and ' epoch_id ' Help for ndi . probe . timeseries . mfdaq / buildepochtable is inherited from superclass NDI . PROBE cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . probe . timeseries . mfdaq / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . probe . timeseries . mfdaq / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_REF ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then empty is returned . Help for ndi . probe . timeseries . mfdaq / doc_unique_id is inherited from superclass NDI . ELEMENT elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING ( NDI_ELEMENT_OBJ ) Returns the name as a human - readable string . For ndi . element objects , this is the string ' element: ' followed by its name Help for ndi . probe . timeseries . mfdaq / elementstring is inherited from superclass NDI . ELEMENT epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . probe . timeseries . mfdaq / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_PROBE_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch . The ndi . probe class always returns the clock type ( s ) of the device it is based on Help for ndi . probe . timeseries . mfdaq / epochclock is inherited from superclass NDI . PROBE epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . probe . timeseries . mfdaq / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . Help for ndi . probe . timeseries . mfdaq / epochid is inherited from superclass NDI . EPOCH . EPOCHSET epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . probe . timeseries . mfdaq / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochprobemapmatch - does an epochprobemap record match our probe? B = EPOCHPROBEMAPMATCH ( NDI_PROBE_OBJ , EPOCHPROBEMAP ) Returns 1 if the ndi . epoch . epochprobemap object EPOCHPROBEMAP is a match for the NDI_PROBE_OBJ probe and 0 otherwise . Help for ndi . probe . timeseries . mfdaq / epochprobemapmatch is inherited from superclass NDI . PROBE epochsetname - the name of the ndi.probe. object, for EPOCHNODES* NAME = EPOCHSETNAME ( NDI_PROBE_OBJ ) Returns the object name that is used when creating epoch nodes . For ndi . probe objects , this is the string ' probe: ' followed by PROBESTRING ( NDI_PROBE_OBJ ) . Help for ndi . probe . timeseries . mfdaq / epochsetname is inherited from superclass NDI . PROBE epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . probe . timeseries . mfdaq / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . probe . timeseries . mfdaq / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET eq - are 2 ndi.probe objects equal? Returns 1 if the objects share an object class , session , and probe string . Help for ndi . probe . timeseries . mfdaq / eq is inherited from superclass NDI . PROBE getcache - return the NDI_CACHE and key for ndi.element [ CACHE , KEY ] = GETCACHE ( NDI_ELEMENT_OBJ ) Returns the CACHE and KEY for the ndi . element object . The CACHE is returned from the associated session . The KEY is the probe ' s ELEMENTSTRING plus the TYPE of the ELEMENT. See also : ndi . file . navigator Help for ndi . probe . timeseries . mfdaq / getcache is inherited from superclass NDI . ELEMENT getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe. * [ DEV , DEVNAME , DEVEPOCH , CHANNELTYPE , CHANNELLIST ] = GETCHANNELDEVINFO ( NDI_PROBE_OBJ , EPOCH_NUMBER_OR_ID ) Given an ndi . probe . * object and an EPOCH number , this function returns the corresponding channel and device info . Suppose there are C channels corresponding to a probe . Then the outputs are DEV is a 1 xC cell array of ndi . daq . system objects for each channel DEVNAME is a 1 xC cell array of the names of each device in DEV DEVEPOCH is a 1 xC array with the epoch id of the probe ' s EPOCH on each device CHANNELTYPE is a cell array of the type of each channel CHANNELLIST is the channel number of each channel . Help for ndi . probe . timeseries . mfdaq / getchanneldevinfo is inherited from superclass NDI . PROBE id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then an error is returned . Help for ndi . probe . timeseries . mfdaq / id is inherited from superclass NDI . ELEMENT issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset and ndi . probe . * this returns 0 so that the underlying ndi . daq . system epochs are added . Help for ndi . probe . timeseries . mfdaq / issyncgraphroot is inherited from superclass NDI . PROBE load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS ( NDI_ELEMENT_OBJ ) Loads the ndi . document that is based on the ndi . element object and any associated epoch documents . Help for ndi . probe . timeseries . mfdaq / load_all_element_docs is inherited from superclass NDI . ELEMENT load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC ( NDI_ELEMENT_OBJ ) Load an ndi . document that is based on the ndi . element object . Returns empty if there is no such document . Help for ndi . probe . timeseries . mfdaq / load_element_doc is inherited from superclass NDI . ELEMENT loadaddedepochs - load the added epochs from an ndi.element [ ET_ADDED , EPOCHDOCS ] = LOADADDEDEOPCHS ( NDI_ELEMENT_OBJ ) Load the EPOCHTABLE that consists of added / registered epochs that provide information about the ndi . element . Help for ndi . probe . timeseries . mfdaq / loadaddedepochs is inherited from superclass NDI . ELEMENT matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . probe . timeseries . mfdaq / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET mfdaq - create a new ndi.probe object OBJ = ndi.probe.timeseries.mfdaq(SESSION, NAME, REFERENCE, TYPE) Creates an ndi.probe associated with an ndi.session object SESSION and with name NAME (a string that must start with a letter and contain no white space), reference number equal to REFERENCE (a non-negative integer), the TYPE of the probe (a string that must start with a letter and contain no white space). ndi.probe is an abstract class, and a specific implementation must be called. ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . probe . timeseries . mfdaq . ndi_unique_id is inherited from superclass NDI . IDO newdocument - need docs here Help for ndi . probe . timeseries . mfdaq / newdocument is inherited from superclass NDI . PROBE . TIMESERIES numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . probe . timeseries . mfdaq / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET probestring - Produce a human-readable probe string PROBESTR = PROBESTRING ( NDI_PROBE_OBJ ) Returns the name and reference of a probe as a human - readable string . This is simply PROBESTR = [ NDI_PROBE_OBJ . name ' _ ' in2str ( NDI_PROBE_OBJ . reference ) ] Help for ndi . probe . timeseries . mfdaq / probestring is inherited from superclass NDI . PROBE read_epochsamples - read the data from a specified epoch [DATA, T, TIMEREF_OUT] = READ_EPOCHSAMPLES(NDI_PROBE_TIMESERIES_MFDAQ_OBJ, EPOCH ,S0, S1) EPOCH is the epoch number to read from. DATA will have one column per channel. T is the time of each sample, relative to the beginning of the epoch. TIMEREF_OUT is an ndi.time.timereference object that describes the epoch. readtimeseries - read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch [ DATA , T , TIMEREF ] = READTIMESERIES ( NDI_PROBE_TIMESERIES_OBJ , TIMEREF_OR_EPOCH , T0 , T1 ) Reads timeseries data from an ndi . probe . timeseries object . The DATA and time information T that are returned depend on the the specific subclass of ndi . probe . timeseries that is called ( see READTIMESERIESEPOCH ) . TIMEREF_OR_EPOCH is either an ndi . time . timereference object indicating the time reference for T0 , T1 , or it can be a single number , which will indicate the data are to be read from that epoch . DATA is the data for the probe . T is a time structure , in units of TIMEREF if it is an ndi . time . timereference object or in units of the epoch if an epoch is passed . The TIMEREF is returned . Help for ndi . probe . timeseries . mfdaq / readtimeseries is inherited from superclass NDI . PROBE . TIMESERIES readtimeseriesepoch - read the data from a specified epoch [DATA, T, TIMEREF_OUT] = READTIMESERIESEPOCH(NDI_PROBE_TIMESERIES_MFDAQ_OBJ, EPOCH ,T0, T1) EPOCH is the epoch number to read from. DATA will have one column per channel. T is the time of each sample, relative to the beginning of the epoch. TIMEREF_OUT is an ndi.time.timereference object that describes the epoch. resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . probe . timeseries . mfdaq / EPOCHTABLE Help for ndi . probe . timeseries . mfdaq / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET samplerate - GET THE SAMPLE RATE FOR A PROBE IN AN EPOCH SR = SAMPLERATE ( NDI_PROBE_TIMESERIES_MFDAQ_OBJ , EPOCH ) SR is an array of sample rates for the probe NDI_PROBE_TIMESERIES_MFDAQ_OBJ from epoch number EPOCH . samples2times - convert from the timeseries time to sample numbers SAMPLES = TIME2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. TODO : convert times to dev_local_clock Help for ndi . probe . timeseries . mfdaq / samples2times is inherited from superclass NDI . TIME . TIMESERIES searchquery - need docs here Help for ndi . probe . timeseries . mfdaq / searchquery is inherited from superclass NDI . PROBE . TIMESERIES t0_t1 - ** T0_T1 - return the t0_t1 ( beginning and end ) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK TODO : this must be a bug , it ' s just self - referential Help for ndi . probe . timeseries . mfdaq / t0_t1 is inherited from superclass NDI . ELEMENT times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. Help for ndi . probe . timeseries . mfdaq / times2samples is inherited from superclass NDI . TIME . TIMESERIES underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . probe . timeseries . mfdaq / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET","title":"ndi.probe.timeseries.mfdaq"},{"location":"reference/%2Bndi/%2Bprobe/%2Btimeseries/mfdaq.m/#class-ndiprobetimeseriesmfdaq","text":"NDI_PROBE_TIMESERIES_MFDAQ - Create a new NDI_PROBE_MFAQ class object that handles probes that are associated with NDI_DAQSYSTEM_MFDAQ objects","title":"CLASS ndi.probe.timeseries.mfdaq"},{"location":"reference/%2Bndi/%2Bprobe/%2Btimeseries/mfdaq.m/#superclasses","text":"ndi.probe.timeseries , ndi.probe , ndi.element , ndi.ido , ndi.epoch.epochset , ndi.documentservice , ndi.time.timeseries","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bprobe/%2Btimeseries/mfdaq.m/#properties","text":"Property Description session name type reference underlying_element direct subject_id dependencies identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Bprobe/%2Btimeseries/mfdaq.m/#methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version mfdaq create a new ndi.probe object ndi_unique_id Generate a unique ID number for NDI projects newdocument need docs here numepochs Number of epochs of ndi.epoch.epochset probestring Produce a human-readable probe string read_epochsamples read the data from a specified epoch readtimeseries read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch readtimeseriesepoch read the data from a specified epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate GET THE SAMPLE RATE FOR A PROBE IN AN EPOCH samples2times convert from the timeseries time to sample numbers searchquery need docs here t0_t1 times2samples convert from the timeseries time to sample numbers underlyingepochnodes find all the underlying epochnodes of a given epochnode","title":"Methods"},{"location":"reference/%2Bndi/%2Bprobe/%2Btimeseries/mfdaq.m/#methods-help","text":"addepoch - add an epoch to the ndi.element [ NDI_ELEMENT_OBJ , EPOCHDOC ] = ADDEPOCH ( NDI_ELEMENT_OBJ , EPOCHID , EPOCHCLOCK , T0_T1 ) Registers the data for an epoch with the NDI_ELEMENT_OBJ . Inputs : NDI_ELEMENT_OBJ : The ndi . element object to modify EPOCHID : The name of the epoch to add ; should match the name of an epoch from the probe EPOCHCLOCK : The epoch clock ; must be a single clock type that matches one of the clock types of the probe T0_T1 : The starting time and ending time of the existence of information about the ELEMENT on the probe , in units of the epock clock Help for ndi . probe . timeseries . mfdaq / addepoch is inherited from superclass NDI . ELEMENT buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . probe . timeseries . mfdaq / EPOCHNODES Help for ndi . probe . timeseries . mfdaq / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - build the epoch table for an ndi.probe. * ET = BUILDEPOCHTABLE ( NDI_PROBE_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch . ' epoch_session_id ' | The ID of the session ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , and ' epoch_id ' Help for ndi . probe . timeseries . mfdaq / buildepochtable is inherited from superclass NDI . PROBE cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . probe . timeseries . mfdaq / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . probe . timeseries . mfdaq / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_REF ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then empty is returned . Help for ndi . probe . timeseries . mfdaq / doc_unique_id is inherited from superclass NDI . ELEMENT elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING ( NDI_ELEMENT_OBJ ) Returns the name as a human - readable string . For ndi . element objects , this is the string ' element: ' followed by its name Help for ndi . probe . timeseries . mfdaq / elementstring is inherited from superclass NDI . ELEMENT epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . probe . timeseries . mfdaq / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_PROBE_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch . The ndi . probe class always returns the clock type ( s ) of the device it is based on Help for ndi . probe . timeseries . mfdaq / epochclock is inherited from superclass NDI . PROBE epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . probe . timeseries . mfdaq / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . Help for ndi . probe . timeseries . mfdaq / epochid is inherited from superclass NDI . EPOCH . EPOCHSET epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . probe . timeseries . mfdaq / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochprobemapmatch - does an epochprobemap record match our probe? B = EPOCHPROBEMAPMATCH ( NDI_PROBE_OBJ , EPOCHPROBEMAP ) Returns 1 if the ndi . epoch . epochprobemap object EPOCHPROBEMAP is a match for the NDI_PROBE_OBJ probe and 0 otherwise . Help for ndi . probe . timeseries . mfdaq / epochprobemapmatch is inherited from superclass NDI . PROBE epochsetname - the name of the ndi.probe. object, for EPOCHNODES* NAME = EPOCHSETNAME ( NDI_PROBE_OBJ ) Returns the object name that is used when creating epoch nodes . For ndi . probe objects , this is the string ' probe: ' followed by PROBESTRING ( NDI_PROBE_OBJ ) . Help for ndi . probe . timeseries . mfdaq / epochsetname is inherited from superclass NDI . PROBE epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . probe . timeseries . mfdaq / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . probe . timeseries . mfdaq / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET eq - are 2 ndi.probe objects equal? Returns 1 if the objects share an object class , session , and probe string . Help for ndi . probe . timeseries . mfdaq / eq is inherited from superclass NDI . PROBE getcache - return the NDI_CACHE and key for ndi.element [ CACHE , KEY ] = GETCACHE ( NDI_ELEMENT_OBJ ) Returns the CACHE and KEY for the ndi . element object . The CACHE is returned from the associated session . The KEY is the probe ' s ELEMENTSTRING plus the TYPE of the ELEMENT. See also : ndi . file . navigator Help for ndi . probe . timeseries . mfdaq / getcache is inherited from superclass NDI . ELEMENT getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe. * [ DEV , DEVNAME , DEVEPOCH , CHANNELTYPE , CHANNELLIST ] = GETCHANNELDEVINFO ( NDI_PROBE_OBJ , EPOCH_NUMBER_OR_ID ) Given an ndi . probe . * object and an EPOCH number , this function returns the corresponding channel and device info . Suppose there are C channels corresponding to a probe . Then the outputs are DEV is a 1 xC cell array of ndi . daq . system objects for each channel DEVNAME is a 1 xC cell array of the names of each device in DEV DEVEPOCH is a 1 xC array with the epoch id of the probe ' s EPOCH on each device CHANNELTYPE is a cell array of the type of each channel CHANNELLIST is the channel number of each channel . Help for ndi . probe . timeseries . mfdaq / getchanneldevinfo is inherited from superclass NDI . PROBE id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then an error is returned . Help for ndi . probe . timeseries . mfdaq / id is inherited from superclass NDI . ELEMENT issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset and ndi . probe . * this returns 0 so that the underlying ndi . daq . system epochs are added . Help for ndi . probe . timeseries . mfdaq / issyncgraphroot is inherited from superclass NDI . PROBE load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS ( NDI_ELEMENT_OBJ ) Loads the ndi . document that is based on the ndi . element object and any associated epoch documents . Help for ndi . probe . timeseries . mfdaq / load_all_element_docs is inherited from superclass NDI . ELEMENT load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC ( NDI_ELEMENT_OBJ ) Load an ndi . document that is based on the ndi . element object . Returns empty if there is no such document . Help for ndi . probe . timeseries . mfdaq / load_element_doc is inherited from superclass NDI . ELEMENT loadaddedepochs - load the added epochs from an ndi.element [ ET_ADDED , EPOCHDOCS ] = LOADADDEDEOPCHS ( NDI_ELEMENT_OBJ ) Load the EPOCHTABLE that consists of added / registered epochs that provide information about the ndi . element . Help for ndi . probe . timeseries . mfdaq / loadaddedepochs is inherited from superclass NDI . ELEMENT matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . probe . timeseries . mfdaq / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET mfdaq - create a new ndi.probe object OBJ = ndi.probe.timeseries.mfdaq(SESSION, NAME, REFERENCE, TYPE) Creates an ndi.probe associated with an ndi.session object SESSION and with name NAME (a string that must start with a letter and contain no white space), reference number equal to REFERENCE (a non-negative integer), the TYPE of the probe (a string that must start with a letter and contain no white space). ndi.probe is an abstract class, and a specific implementation must be called. ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . probe . timeseries . mfdaq . ndi_unique_id is inherited from superclass NDI . IDO newdocument - need docs here Help for ndi . probe . timeseries . mfdaq / newdocument is inherited from superclass NDI . PROBE . TIMESERIES numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . probe . timeseries . mfdaq / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET probestring - Produce a human-readable probe string PROBESTR = PROBESTRING ( NDI_PROBE_OBJ ) Returns the name and reference of a probe as a human - readable string . This is simply PROBESTR = [ NDI_PROBE_OBJ . name ' _ ' in2str ( NDI_PROBE_OBJ . reference ) ] Help for ndi . probe . timeseries . mfdaq / probestring is inherited from superclass NDI . PROBE read_epochsamples - read the data from a specified epoch [DATA, T, TIMEREF_OUT] = READ_EPOCHSAMPLES(NDI_PROBE_TIMESERIES_MFDAQ_OBJ, EPOCH ,S0, S1) EPOCH is the epoch number to read from. DATA will have one column per channel. T is the time of each sample, relative to the beginning of the epoch. TIMEREF_OUT is an ndi.time.timereference object that describes the epoch. readtimeseries - read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch [ DATA , T , TIMEREF ] = READTIMESERIES ( NDI_PROBE_TIMESERIES_OBJ , TIMEREF_OR_EPOCH , T0 , T1 ) Reads timeseries data from an ndi . probe . timeseries object . The DATA and time information T that are returned depend on the the specific subclass of ndi . probe . timeseries that is called ( see READTIMESERIESEPOCH ) . TIMEREF_OR_EPOCH is either an ndi . time . timereference object indicating the time reference for T0 , T1 , or it can be a single number , which will indicate the data are to be read from that epoch . DATA is the data for the probe . T is a time structure , in units of TIMEREF if it is an ndi . time . timereference object or in units of the epoch if an epoch is passed . The TIMEREF is returned . Help for ndi . probe . timeseries . mfdaq / readtimeseries is inherited from superclass NDI . PROBE . TIMESERIES readtimeseriesepoch - read the data from a specified epoch [DATA, T, TIMEREF_OUT] = READTIMESERIESEPOCH(NDI_PROBE_TIMESERIES_MFDAQ_OBJ, EPOCH ,T0, T1) EPOCH is the epoch number to read from. DATA will have one column per channel. T is the time of each sample, relative to the beginning of the epoch. TIMEREF_OUT is an ndi.time.timereference object that describes the epoch. resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . probe . timeseries . mfdaq / EPOCHTABLE Help for ndi . probe . timeseries . mfdaq / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET samplerate - GET THE SAMPLE RATE FOR A PROBE IN AN EPOCH SR = SAMPLERATE ( NDI_PROBE_TIMESERIES_MFDAQ_OBJ , EPOCH ) SR is an array of sample rates for the probe NDI_PROBE_TIMESERIES_MFDAQ_OBJ from epoch number EPOCH . samples2times - convert from the timeseries time to sample numbers SAMPLES = TIME2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. TODO : convert times to dev_local_clock Help for ndi . probe . timeseries . mfdaq / samples2times is inherited from superclass NDI . TIME . TIMESERIES searchquery - need docs here Help for ndi . probe . timeseries . mfdaq / searchquery is inherited from superclass NDI . PROBE . TIMESERIES t0_t1 - ** T0_T1 - return the t0_t1 ( beginning and end ) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK TODO : this must be a bug , it ' s just self - referential Help for ndi . probe . timeseries . mfdaq / t0_t1 is inherited from superclass NDI . ELEMENT times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. Help for ndi . probe . timeseries . mfdaq / times2samples is inherited from superclass NDI . TIME . TIMESERIES underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . probe . timeseries . mfdaq / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET","title":"Methods help"},{"location":"reference/%2Bndi/%2Bprobe/%2Btimeseries/stimulator.m/","text":"CLASS ndi.probe.timeseries.stimulator \u00b6 ndi.probe.timeseries.stimulator - Create a new NDI_PROBE_TIMESERIES_STIMULATOR class object that handles probes that are associated with NDI_DAQSYSTEM_STIMULUS objects Superclasses \u00b6 ndi.probe.timeseries , ndi.probe , ndi.element , ndi.ido , ndi.epoch.epochset , ndi.documentservice , ndi.time.timeseries Properties \u00b6 Property Description session name type reference underlying_element direct subject_id dependencies identifier Methods \u00b6 Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version ndi_unique_id Generate a unique ID number for NDI projects newdocument need docs here numepochs Number of epochs of ndi.epoch.epochset probestring Produce a human-readable probe string readtimeseries read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch readtimeseriesepoch Read stimulus data from an ndi.probe.timeseries.stimulator object resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery need docs here stimulator create a new ndi.probe.timeseries.stimulator object t0_t1 times2samples convert from the timeseries time to sample numbers underlyingepochnodes find all the underlying epochnodes of a given epochnode Methods help \u00b6 addepoch - add an epoch to the ndi.element [ NDI_ELEMENT_OBJ , EPOCHDOC ] = ADDEPOCH ( NDI_ELEMENT_OBJ , EPOCHID , EPOCHCLOCK , T0_T1 ) Registers the data for an epoch with the NDI_ELEMENT_OBJ . Inputs : NDI_ELEMENT_OBJ : The ndi . element object to modify EPOCHID : The name of the epoch to add ; should match the name of an epoch from the probe EPOCHCLOCK : The epoch clock ; must be a single clock type that matches one of the clock types of the probe T0_T1 : The starting time and ending time of the existence of information about the ELEMENT on the probe , in units of the epock clock Help for ndi . probe . timeseries . stimulator / addepoch is inherited from superclass NDI . ELEMENT buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . probe . timeseries . stimulator / EPOCHNODES Help for ndi . probe . timeseries . stimulator / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - build the epoch table for an ndi.probe. * ET = BUILDEPOCHTABLE ( NDI_PROBE_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch . ' epoch_session_id ' | The ID of the session ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , and ' epoch_id ' Help for ndi . probe . timeseries . stimulator / buildepochtable is inherited from superclass NDI . PROBE cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . probe . timeseries . stimulator / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . probe . timeseries . stimulator / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_REF ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then empty is returned . Help for ndi . probe . timeseries . stimulator / doc_unique_id is inherited from superclass NDI . ELEMENT elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING ( NDI_ELEMENT_OBJ ) Returns the name as a human - readable string . For ndi . element objects , this is the string ' element: ' followed by its name Help for ndi . probe . timeseries . stimulator / elementstring is inherited from superclass NDI . ELEMENT epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . probe . timeseries . stimulator / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_PROBE_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch . The ndi . probe class always returns the clock type ( s ) of the device it is based on Help for ndi . probe . timeseries . stimulator / epochclock is inherited from superclass NDI . PROBE epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . probe . timeseries . stimulator / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . Help for ndi . probe . timeseries . stimulator / epochid is inherited from superclass NDI . EPOCH . EPOCHSET epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . probe . timeseries . stimulator / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochprobemapmatch - does an epochprobemap record match our probe? B = EPOCHPROBEMAPMATCH ( NDI_PROBE_OBJ , EPOCHPROBEMAP ) Returns 1 if the ndi . epoch . epochprobemap object EPOCHPROBEMAP is a match for the NDI_PROBE_OBJ probe and 0 otherwise . Help for ndi . probe . timeseries . stimulator / epochprobemapmatch is inherited from superclass NDI . PROBE epochsetname - the name of the ndi.probe. object, for EPOCHNODES* NAME = EPOCHSETNAME ( NDI_PROBE_OBJ ) Returns the object name that is used when creating epoch nodes . For ndi . probe objects , this is the string ' probe: ' followed by PROBESTRING ( NDI_PROBE_OBJ ) . Help for ndi . probe . timeseries . stimulator / epochsetname is inherited from superclass NDI . PROBE epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . probe . timeseries . stimulator / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . probe . timeseries . stimulator / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET eq - are 2 ndi.probe objects equal? Returns 1 if the objects share an object class , session , and probe string . Help for ndi . probe . timeseries . stimulator / eq is inherited from superclass NDI . PROBE getcache - return the NDI_CACHE and key for ndi.element [ CACHE , KEY ] = GETCACHE ( NDI_ELEMENT_OBJ ) Returns the CACHE and KEY for the ndi . element object . The CACHE is returned from the associated session . The KEY is the probe ' s ELEMENTSTRING plus the TYPE of the ELEMENT. See also : ndi . file . navigator Help for ndi . probe . timeseries . stimulator / getcache is inherited from superclass NDI . ELEMENT getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe. * [ DEV , DEVNAME , DEVEPOCH , CHANNELTYPE , CHANNELLIST ] = GETCHANNELDEVINFO ( NDI_PROBE_OBJ , EPOCH_NUMBER_OR_ID ) Given an ndi . probe . * object and an EPOCH number , this function returns the corresponding channel and device info . Suppose there are C channels corresponding to a probe . Then the outputs are DEV is a 1 xC cell array of ndi . daq . system objects for each channel DEVNAME is a 1 xC cell array of the names of each device in DEV DEVEPOCH is a 1 xC array with the epoch id of the probe ' s EPOCH on each device CHANNELTYPE is a cell array of the type of each channel CHANNELLIST is the channel number of each channel . Help for ndi . probe . timeseries . stimulator / getchanneldevinfo is inherited from superclass NDI . PROBE id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then an error is returned . Help for ndi . probe . timeseries . stimulator / id is inherited from superclass NDI . ELEMENT issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset and ndi . probe . * this returns 0 so that the underlying ndi . daq . system epochs are added . Help for ndi . probe . timeseries . stimulator / issyncgraphroot is inherited from superclass NDI . PROBE load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS ( NDI_ELEMENT_OBJ ) Loads the ndi . document that is based on the ndi . element object and any associated epoch documents . Help for ndi . probe . timeseries . stimulator / load_all_element_docs is inherited from superclass NDI . ELEMENT load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC ( NDI_ELEMENT_OBJ ) Load an ndi . document that is based on the ndi . element object . Returns empty if there is no such document . Help for ndi . probe . timeseries . stimulator / load_element_doc is inherited from superclass NDI . ELEMENT loadaddedepochs - load the added epochs from an ndi.element [ ET_ADDED , EPOCHDOCS ] = LOADADDEDEOPCHS ( NDI_ELEMENT_OBJ ) Load the EPOCHTABLE that consists of added / registered epochs that provide information about the ndi . element . Help for ndi . probe . timeseries . stimulator / loadaddedepochs is inherited from superclass NDI . ELEMENT matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . probe . timeseries . stimulator / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . probe . timeseries . stimulator . ndi_unique_id is inherited from superclass NDI . IDO newdocument - need docs here Help for ndi . probe . timeseries . stimulator / newdocument is inherited from superclass NDI . PROBE . TIMESERIES numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . probe . timeseries . stimulator / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET probestring - Produce a human-readable probe string PROBESTR = PROBESTRING ( NDI_PROBE_OBJ ) Returns the name and reference of a probe as a human - readable string . This is simply PROBESTR = [ NDI_PROBE_OBJ . name ' _ ' in2str ( NDI_PROBE_OBJ . reference ) ] Help for ndi . probe . timeseries . stimulator / probestring is inherited from superclass NDI . PROBE readtimeseries - read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch [ DATA , T , TIMEREF ] = READTIMESERIES ( NDI_PROBE_TIMESERIES_OBJ , TIMEREF_OR_EPOCH , T0 , T1 ) Reads timeseries data from an ndi . probe . timeseries object . The DATA and time information T that are returned depend on the the specific subclass of ndi . probe . timeseries that is called ( see READTIMESERIESEPOCH ) . TIMEREF_OR_EPOCH is either an ndi . time . timereference object indicating the time reference for T0 , T1 , or it can be a single number , which will indicate the data are to be read from that epoch . DATA is the data for the probe . T is a time structure , in units of TIMEREF if it is an ndi . time . timereference object or in units of the epoch if an epoch is passed . The TIMEREF is returned . Help for ndi . probe . timeseries . stimulator / readtimeseries is inherited from superclass NDI . PROBE . TIMESERIES readtimeseriesepoch - Read stimulus data from an ndi.probe.timeseries.stimulator object [ DATA, T, TIMEREF ] = READTIMESERIESEPOCH ( NDI_PROBE_TIMESERIES_STIMULATOR_OBJ , EPOCH , T0 , T1 ) STIMON , STIMOFF , STIMID , PARAMETERS , STIMOPENCLOSE ] = ... READSTIMULUSEPOCH ( NDI_PROBE_STIMULTOR_OBJ , EPOCH , T0 , T1 ) Reads stimulus delivery information from an ndi . probe . timeseries . stimulator object for a given EPOCH . T0 and T1 are in epoch time . T . STIMON is an Nx1 vector with the ON times of each stimulus delivery in the time units of the epoch or the clock . If marker channels 'mk' are present , then STIMON is taken to be occurrences where the first marker channel registers a value greater than 0. Alternatively , if 'dim*' channels are present , then STIMON is taken to be times whenever ANY of the dim channels registers an event onset . T . STIMOFF is an Nx1 vector with the OFF times of each stimulus delivery in the time units of the epoch or the clock . If STIMOFF data is not provided , these values will be NaN . If marker channels 'mk' are present , then STIMOFF is taken to be occurrences where the first marker channels registers a value less than 0. Alternatively , if 'dim*' channels are present , then STIMOFF is taken to be the times when * any * of the 'dim*' channels go off . DATA . STIMID is an Nx1 vector with the STIMID values . If STIMID values are not provided , these values will be NaN . If there are marker channels , the STIMID is taken to be the marker code of the second marker channel in the group . If 'dim*' channels are present , then the stimid will be 1. . number of dim channels , depending upon which 'dim*' channel turned on . For example , if the second one turned on , then the stimid is 2. DATA . PARAMETERS is an Nx1 cell array of stimulus parameters . If the device provides no parameters , then this will be an empty cell array of size Nx1 . This is read from the first metadata channel . T . STIMOPENCLOSE is an Nx2 vector of stimulus 'setup' and 'shutdown' times , if applicable . For example , a visual stimulus might begin or end with the presentation of a 'background' image . These times will be encoded here . If there is no information about stimulus setup or shutdown , then T . STIMOPENCLOSE == [ T.STIMON T.STIMOFF ] . If there is a third marker channel present , then STIMOPENCLOSE will be defined by + 1 and - 1 marks on the third marker channel . TIMEREF is an ndi . time . timereference object that refers to this EPOCH . See also : ndi . probe . timeseries / READTIMESERIES resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . probe . timeseries . stimulator / EPOCHTABLE Help for ndi . probe . timeseries . stimulator / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLE_RATE ( NDI_TIMESERIES_OBJ , EPOCH ) Returns the sampling rate of a given ndi . time . timeseries object for the epoch EPOCH . EPOCH can be specified as an index or EPOCH_ID . If NDI_TIMESERIES_OBJ is not regularly sampled , then - 1 is returned . Help for ndi . probe . timeseries . stimulator / samplerate is inherited from superclass NDI . TIME . TIMESERIES samples2times - convert from the timeseries time to sample numbers SAMPLES = TIME2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. TODO : convert times to dev_local_clock Help for ndi . probe . timeseries . stimulator / samples2times is inherited from superclass NDI . TIME . TIMESERIES searchquery - need docs here Help for ndi . probe . timeseries . stimulator / searchquery is inherited from superclass NDI . PROBE . TIMESERIES stimulator - create a new ndi.probe.timeseries.stimulator object OBJ = ndi.probe.timeseries.stimulator(SESSION, NAME, REFERENCE, TYPE) Creates an ndi.probe.timeseries.stimulator associated with an ndi.session object SESSION and with name NAME (a string that must start with a letter and contain no white space), reference number equal to REFERENCE (a non-negative integer), the TYPE of the probe (a string that must start with a letter and contain no white space). t0_t1 - ** T0_T1 - return the t0_t1 ( beginning and end ) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK TODO : this must be a bug , it ' s just self - referential Help for ndi . probe . timeseries . stimulator / t0_t1 is inherited from superclass NDI . ELEMENT times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. Help for ndi . probe . timeseries . stimulator / times2samples is inherited from superclass NDI . TIME . TIMESERIES underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . probe . timeseries . stimulator / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET","title":"ndi.probe.timeseries.stimulator"},{"location":"reference/%2Bndi/%2Bprobe/%2Btimeseries/stimulator.m/#class-ndiprobetimeseriesstimulator","text":"ndi.probe.timeseries.stimulator - Create a new NDI_PROBE_TIMESERIES_STIMULATOR class object that handles probes that are associated with NDI_DAQSYSTEM_STIMULUS objects","title":"CLASS ndi.probe.timeseries.stimulator"},{"location":"reference/%2Bndi/%2Bprobe/%2Btimeseries/stimulator.m/#superclasses","text":"ndi.probe.timeseries , ndi.probe , ndi.element , ndi.ido , ndi.epoch.epochset , ndi.documentservice , ndi.time.timeseries","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bprobe/%2Btimeseries/stimulator.m/#properties","text":"Property Description session name type reference underlying_element direct subject_id dependencies identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Bprobe/%2Btimeseries/stimulator.m/#methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresonds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version ndi_unique_id Generate a unique ID number for NDI projects newdocument need docs here numepochs Number of epochs of ndi.epoch.epochset probestring Produce a human-readable probe string readtimeseries read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch readtimeseriesepoch Read stimulus data from an ndi.probe.timeseries.stimulator object resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery need docs here stimulator create a new ndi.probe.timeseries.stimulator object t0_t1 times2samples convert from the timeseries time to sample numbers underlyingepochnodes find all the underlying epochnodes of a given epochnode","title":"Methods"},{"location":"reference/%2Bndi/%2Bprobe/%2Btimeseries/stimulator.m/#methods-help","text":"addepoch - add an epoch to the ndi.element [ NDI_ELEMENT_OBJ , EPOCHDOC ] = ADDEPOCH ( NDI_ELEMENT_OBJ , EPOCHID , EPOCHCLOCK , T0_T1 ) Registers the data for an epoch with the NDI_ELEMENT_OBJ . Inputs : NDI_ELEMENT_OBJ : The ndi . element object to modify EPOCHID : The name of the epoch to add ; should match the name of an epoch from the probe EPOCHCLOCK : The epoch clock ; must be a single clock type that matches one of the clock types of the probe T0_T1 : The starting time and ending time of the existence of information about the ELEMENT on the probe , in units of the epock clock Help for ndi . probe . timeseries . stimulator / addepoch is inherited from superclass NDI . ELEMENT buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object [ COST , MAPPING ] = BUILDEPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of EPOCHNODES . For example , if there is one epoch with clock types 'dev_local_time' and 'utc' , then M is 2. Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . In the abstract class , the following NDI_CLOCKTYPEs , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' See also : ndi . time . clocktype , ndi . time . clocktype / ndi . time . clocktype , ndi . time . timemapping , ndi . time . timemapping / ndi . time . timemapping , ndi . probe . timeseries . stimulator / EPOCHNODES Help for ndi . probe . timeseries . stimulator / buildepochgraph is inherited from superclass NDI . EPOCH . EPOCHSET buildepochtable - build the epoch table for an ndi.probe. * ET = BUILDEPOCHTABLE ( NDI_PROBE_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch ( may change ) ' epoch_id ' | The epoch ID code ( will never change once established ) | This uniquely specifies the epoch . ' epoch_session_id ' | The ID of the session ' epochprobemap ' | The epochprobemap object from each epoch ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , and ' epoch_id ' Help for ndi . probe . timeseries . stimulator / buildepochtable is inherited from superclass NDI . PROBE cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object [ COST , MAPPING ] = CACHED_EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Return the cached version of the epoch graph , if it exists and is up - to - date ( that is , the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ has not changed ) . If there is no cached version , or if it is not up - to - date , COST and MAPPING will be empty . If the cached epochgraph is present and not up - to - date , it is deleted . See also : NDI_EPOCHSET_OBJ / EPOCHGRAPH , NDI_EPOCHSET_OBJ / BUILDEPOCHGRAPH Help for ndi . probe . timeseries . stimulator / cached_epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object [ ET , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_EPOCHSET_OBJ ) Return the cached version of the epochtable , if it exists , along with its HASHVALUE ( a hash number generated from the table ) . If there is no cached version , ET and HASHVALUE will be empty . Help for ndi . probe . timeseries . stimulator / cached_epochtable is inherited from superclass NDI . EPOCH . EPOCHSET doc_unique_id - return the document unique reference for an ndi.element object UNIQUE_REF = DOC_UNIQUE_REF ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then empty is returned . Help for ndi . probe . timeseries . stimulator / doc_unique_id is inherited from superclass NDI . ELEMENT elementstring - Produce a human-readable element string ELEMENTSTR = ELEMENTSTRING ( NDI_ELEMENT_OBJ ) Returns the name as a human - readable string . For ndi . element objects , this is the string ' element: ' followed by its name Help for ndi . probe . timeseries . stimulator / elementstring is inherited from superclass NDI . ELEMENT epoch2str - convert an epoch number or id to a string S = EPOCH2STR ( NDI_EPOCHSET_OBJ , NUMBER ) Returns the epoch NUMBER in the form of a string . If it is a simple integer , then INT2STR is used to produce a string . If it is an epoch identifier string , then it is returned . Help for ndi . probe . timeseries . stimulator / epoch2str is inherited from superclass NDI . EPOCH . EPOCHSET epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_PROBE_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch . The ndi . probe class always returns the clock type ( s ) of the device it is based on Help for ndi . probe . timeseries . stimulator / epochclock is inherited from superclass NDI . PROBE epochgraph - graph of the mapping and cost of converting time among epochs [ COST , MAPPING ] = EPOCHGRAPH ( NDI_EPOCHSET_OBJ ) Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi . epoch . epochset object COST is an MxM matrix where M is the number of ordered pairs of ( epochs , clocktypes ) . For example , if there is one epoch with clock types ' dev_local_time ' and ' utc ' , then M is 2 . Each entry COST ( i , j ) indicates whether there is a mapping between ( epoch , clocktype ) i to j . The cost of each transformation is normally 1 operation . MAPPING is the ndi . time . timemapping object that describes the mapping . Help for ndi . probe . timeseries . stimulator / epochgraph is inherited from superclass NDI . EPOCH . EPOCHSET epochid - Get the epoch identifier for a particular epoch ID = EPOCHID ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Returns the epoch identifier string for the epoch EPOCH_NUMBER . If it doesn ' t exist, it should be created. EPOCH_NUMBER can be a number of an EPOCH ID string . The abstract class just queries the EPOCHTABLE . Most classes that manage epochs themselves ( ndi . file . navigator , ndi . daq . system ) will override this method . Help for ndi . probe . timeseries . stimulator / epochid is inherited from superclass NDI . EPOCH . EPOCHSET epochnodes - return all epoch nodes from an ndi.epoch.epochset object [ NODES , UNDERLYINGNODES ] = EPOCHNODES ( NDI_EPOCHSET_OBJ ) Return all EPOCHNODES for an ndi . epoch . epochset . EPOCHNODES consist of the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch within the session . ' epoch_session_id ' | The ID of the session that contains the epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A SINGLE ndi . time . clocktype entry that describes the clock type of this node . ' t0_t1 ' | The times [ t0 t1 ] of the beginning and end of the epoch in units of ' epoch_clock ' ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_id ' , and ' epochprobemap ' ' objectname ' | A string containing the ' name ' field of NDI_EPOCHSET_OBJ , if it exists . If there is no | ' name ' field , then ' unknown ' is used . ' objectclass ' | The object class name of the NDI_EPOCHSET_OBJ . EPOCHNODES are related to EPOCHTABLE entries , except a ) only 1 ndi . time . clocktype is permitted per epoch node . If an entry in epoch table contains multiple ndi . time . clocktype entries , then each one will have its own epoch node . This aids in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another . b ) EPOCHNODES contain identifying information ( objectname and objectclass ) to help in identifying the epoch nodes across ndi . epoch . epochset objects . UNDERLYINGNODES are nodes that are directly linked to this ndi . epoch . epochset ' s node via ' underlying ' epochs . Help for ndi . probe . timeseries . stimulator / epochnodes is inherited from superclass NDI . EPOCH . EPOCHSET epochprobemapmatch - does an epochprobemap record match our probe? B = EPOCHPROBEMAPMATCH ( NDI_PROBE_OBJ , EPOCHPROBEMAP ) Returns 1 if the ndi . epoch . epochprobemap object EPOCHPROBEMAP is a match for the NDI_PROBE_OBJ probe and 0 otherwise . Help for ndi . probe . timeseries . stimulator / epochprobemapmatch is inherited from superclass NDI . PROBE epochsetname - the name of the ndi.probe. object, for EPOCHNODES* NAME = EPOCHSETNAME ( NDI_PROBE_OBJ ) Returns the object name that is used when creating epoch nodes . For ndi . probe objects , this is the string ' probe: ' followed by PROBESTRING ( NDI_PROBE_OBJ ) . Help for ndi . probe . timeseries . stimulator / epochsetname is inherited from superclass NDI . PROBE epochtable - Return an epoch table that relates the current object's epochs to underlying epochs [ ET , HASHVALUE ] = EPOCHTABLE ( NDI_EPOCHSET_OBJ ) ET is a structure array with the following fields : Fieldname : | Description ------------------------------------------------------------------------ ' epoch_number ' | The number of the epoch . The number may change as epochs are added and subtracted . ' epoch_id ' | The epoch ID code ( will never change once established , though it may be deleted .) | This epoch ID uniquely specifies the epoch . ' epoch_session_id ' | The session ID that contains this epoch ' epochprobemap ' | Any contents information for each epoch , usually of type ndi . epoch . epochprobemap or empty . ' epoch_clock ' | A cell array of ndi . time . clocktype objects that describe the type of clocks available ' t0_t1 ' | A cell array of ordered pairs [ t0 t1 ] that indicates , for each ndi . time . clocktype , the start and stop | time of this epoch . The time units of t0_t1 { i } match epoch_clock { i }. ' underlying_epochs ' | A structure array of the ndi . epoch . epochset objects that comprise these epochs . | It contains fields ' underlying ' , ' epoch_number ' , ' epoch_id ' , and ' epochprobemap ' HASHVALUE is the hashed value of the epochtable . One can check to see if the epochtable has changed with ndi . epoch . epochset / MATCHEDEPOCHTABLE . After it is read from disk once , the ET is stored in memory and is not re - read from disk unless the user calls ndi . epoch . epochset / RESETEPOCHTABLE . Help for ndi . probe . timeseries . stimulator / epochtable is inherited from superclass NDI . EPOCH . EPOCHSET epochtableentry - return the entry of the EPOCHTABLE that corresonds to an EPOCHID ET_ENTRY = EPOCHTABLEENTRY ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER_OR_ID ) Returns the EPOCHTABLE entry associated with the ndi . epoch . epochset object that corresponds to EPOCH_NUMBER_OR_ID , which can be the number of the epoch or the EPOCHID of the epoch . Help for ndi . probe . timeseries . stimulator / epochtableentry is inherited from superclass NDI . EPOCH . EPOCHSET eq - are 2 ndi.probe objects equal? Returns 1 if the objects share an object class , session , and probe string . Help for ndi . probe . timeseries . stimulator / eq is inherited from superclass NDI . PROBE getcache - return the NDI_CACHE and key for ndi.element [ CACHE , KEY ] = GETCACHE ( NDI_ELEMENT_OBJ ) Returns the CACHE and KEY for the ndi . element object . The CACHE is returned from the associated session . The KEY is the probe ' s ELEMENTSTRING plus the TYPE of the ELEMENT. See also : ndi . file . navigator Help for ndi . probe . timeseries . stimulator / getcache is inherited from superclass NDI . ELEMENT getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe. * [ DEV , DEVNAME , DEVEPOCH , CHANNELTYPE , CHANNELLIST ] = GETCHANNELDEVINFO ( NDI_PROBE_OBJ , EPOCH_NUMBER_OR_ID ) Given an ndi . probe . * object and an EPOCH number , this function returns the corresponding channel and device info . Suppose there are C channels corresponding to a probe . Then the outputs are DEV is a 1 xC cell array of ndi . daq . system objects for each channel DEVNAME is a 1 xC cell array of the names of each device in DEV DEVEPOCH is a 1 xC array with the epoch id of the probe ' s EPOCH on each device CHANNELTYPE is a cell array of the type of each channel CHANNELLIST is the channel number of each channel . Help for ndi . probe . timeseries . stimulator / getchanneldevinfo is inherited from superclass NDI . PROBE id - return the document unique identifier for an ndi.element object UNIQUE_REF = ID ( NDI_ELEMENT_OBJ ) Returns the document unique reference for NDI_ELEMENT_OBJ . If there is no associated document for the element , then an error is returned . Help for ndi . probe . timeseries . stimulator / id is inherited from superclass NDI . ELEMENT issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph? B = ISSYNCGRAPHROOT ( NDI_EPOCHSET_OBJ ) This function tells an ndi . time . syncgraph object whether it should continue adding the ' underlying ' epochs to the graph , or whether it should stop at this level . For ndi . epoch . epochset and ndi . probe . * this returns 0 so that the underlying ndi . daq . system epochs are added . Help for ndi . probe . timeseries . stimulator / issyncgraphroot is inherited from superclass NDI . PROBE load_all_element_docs - load all of the ndi.element objects from an session database ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS ( NDI_ELEMENT_OBJ ) Loads the ndi . document that is based on the ndi . element object and any associated epoch documents . Help for ndi . probe . timeseries . stimulator / load_all_element_docs is inherited from superclass NDI . ELEMENT load_element_doc - load a element doc from the session database ELEMENT_DOC = LOAD_ELEMENT_DOC ( NDI_ELEMENT_OBJ ) Load an ndi . document that is based on the ndi . element object . Returns empty if there is no such document . Help for ndi . probe . timeseries . stimulator / load_element_doc is inherited from superclass NDI . ELEMENT loadaddedepochs - load the added epochs from an ndi.element [ ET_ADDED , EPOCHDOCS ] = LOADADDEDEOPCHS ( NDI_ELEMENT_OBJ ) Load the EPOCHTABLE that consists of added / registered epochs that provide information about the ndi . element . Help for ndi . probe . timeseries . stimulator / loadaddedepochs is inherited from superclass NDI . ELEMENT matchedepochtable - compare a hash number from an epochtable to the current version B = MATCHEDEPOCHTABLE ( NDI_EPOCHSET_OBJ , HASHVALUE ) Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE . Otherwise , it returns 0 . Help for ndi . probe . timeseries . stimulator / matchedepochtable is inherited from superclass NDI . EPOCH . EPOCHSET ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . probe . timeseries . stimulator . ndi_unique_id is inherited from superclass NDI . IDO newdocument - need docs here Help for ndi . probe . timeseries . stimulator / newdocument is inherited from superclass NDI . PROBE . TIMESERIES numepochs - Number of epochs of ndi.epoch.epochset N = NUMEPOCHS ( NDI_EPOCHSET_OBJ ) Returns the number of epochs in the ndi . epoch . epochset object NDI_EPOCHSET_OBJ . See also : EPOCHTABLE Help for ndi . probe . timeseries . stimulator / numepochs is inherited from superclass NDI . EPOCH . EPOCHSET probestring - Produce a human-readable probe string PROBESTR = PROBESTRING ( NDI_PROBE_OBJ ) Returns the name and reference of a probe as a human - readable string . This is simply PROBESTR = [ NDI_PROBE_OBJ . name ' _ ' in2str ( NDI_PROBE_OBJ . reference ) ] Help for ndi . probe . timeseries . stimulator / probestring is inherited from superclass NDI . PROBE readtimeseries - read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch [ DATA , T , TIMEREF ] = READTIMESERIES ( NDI_PROBE_TIMESERIES_OBJ , TIMEREF_OR_EPOCH , T0 , T1 ) Reads timeseries data from an ndi . probe . timeseries object . The DATA and time information T that are returned depend on the the specific subclass of ndi . probe . timeseries that is called ( see READTIMESERIESEPOCH ) . TIMEREF_OR_EPOCH is either an ndi . time . timereference object indicating the time reference for T0 , T1 , or it can be a single number , which will indicate the data are to be read from that epoch . DATA is the data for the probe . T is a time structure , in units of TIMEREF if it is an ndi . time . timereference object or in units of the epoch if an epoch is passed . The TIMEREF is returned . Help for ndi . probe . timeseries . stimulator / readtimeseries is inherited from superclass NDI . PROBE . TIMESERIES readtimeseriesepoch - Read stimulus data from an ndi.probe.timeseries.stimulator object [ DATA, T, TIMEREF ] = READTIMESERIESEPOCH ( NDI_PROBE_TIMESERIES_STIMULATOR_OBJ , EPOCH , T0 , T1 ) STIMON , STIMOFF , STIMID , PARAMETERS , STIMOPENCLOSE ] = ... READSTIMULUSEPOCH ( NDI_PROBE_STIMULTOR_OBJ , EPOCH , T0 , T1 ) Reads stimulus delivery information from an ndi . probe . timeseries . stimulator object for a given EPOCH . T0 and T1 are in epoch time . T . STIMON is an Nx1 vector with the ON times of each stimulus delivery in the time units of the epoch or the clock . If marker channels 'mk' are present , then STIMON is taken to be occurrences where the first marker channel registers a value greater than 0. Alternatively , if 'dim*' channels are present , then STIMON is taken to be times whenever ANY of the dim channels registers an event onset . T . STIMOFF is an Nx1 vector with the OFF times of each stimulus delivery in the time units of the epoch or the clock . If STIMOFF data is not provided , these values will be NaN . If marker channels 'mk' are present , then STIMOFF is taken to be occurrences where the first marker channels registers a value less than 0. Alternatively , if 'dim*' channels are present , then STIMOFF is taken to be the times when * any * of the 'dim*' channels go off . DATA . STIMID is an Nx1 vector with the STIMID values . If STIMID values are not provided , these values will be NaN . If there are marker channels , the STIMID is taken to be the marker code of the second marker channel in the group . If 'dim*' channels are present , then the stimid will be 1. . number of dim channels , depending upon which 'dim*' channel turned on . For example , if the second one turned on , then the stimid is 2. DATA . PARAMETERS is an Nx1 cell array of stimulus parameters . If the device provides no parameters , then this will be an empty cell array of size Nx1 . This is read from the first metadata channel . T . STIMOPENCLOSE is an Nx2 vector of stimulus 'setup' and 'shutdown' times , if applicable . For example , a visual stimulus might begin or end with the presentation of a 'background' image . These times will be encoded here . If there is no information about stimulus setup or shutdown , then T . STIMOPENCLOSE == [ T.STIMON T.STIMOFF ] . If there is a third marker channel present , then STIMOPENCLOSE will be defined by + 1 and - 1 marks on the third marker channel . TIMEREF is an ndi . time . timereference object that refers to this EPOCH . See also : ndi . probe . timeseries / READTIMESERIES resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk NDI_EPOCHSET_OBJ = RESETEPOCHTABLE ( NDI_EPOCHSET_OBJ ) This function clears the internal cached memory of the epochtable , forcing it to be re - read from disk at the next request . See also : ndi . probe . timeseries . stimulator / EPOCHTABLE Help for ndi . probe . timeseries . stimulator / resetepochtable is inherited from superclass NDI . EPOCH . EPOCHSET samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLE_RATE ( NDI_TIMESERIES_OBJ , EPOCH ) Returns the sampling rate of a given ndi . time . timeseries object for the epoch EPOCH . EPOCH can be specified as an index or EPOCH_ID . If NDI_TIMESERIES_OBJ is not regularly sampled , then - 1 is returned . Help for ndi . probe . timeseries . stimulator / samplerate is inherited from superclass NDI . TIME . TIMESERIES samples2times - convert from the timeseries time to sample numbers SAMPLES = TIME2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. TODO : convert times to dev_local_clock Help for ndi . probe . timeseries . stimulator / samples2times is inherited from superclass NDI . TIME . TIMESERIES searchquery - need docs here Help for ndi . probe . timeseries . stimulator / searchquery is inherited from superclass NDI . PROBE . TIMESERIES stimulator - create a new ndi.probe.timeseries.stimulator object OBJ = ndi.probe.timeseries.stimulator(SESSION, NAME, REFERENCE, TYPE) Creates an ndi.probe.timeseries.stimulator associated with an ndi.session object SESSION and with name NAME (a string that must start with a letter and contain no white space), reference number equal to REFERENCE (a non-negative integer), the TYPE of the probe (a string that must start with a letter and contain no white space). t0_t1 - ** T0_T1 - return the t0_t1 ( beginning and end ) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCH_NUMBER ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK TODO : this must be a bug , it ' s just self - referential Help for ndi . probe . timeseries . stimulator / t0_t1 is inherited from superclass NDI . ELEMENT times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. Help for ndi . probe . timeseries . stimulator / times2samples is inherited from superclass NDI . TIME . TIMESERIES underlyingepochnodes - find all the underlying epochnodes of a given epochnode [ UNODES , COST , MAPPING ] = UNDERLYINGEPOCHNODES ( NDI_EPOCHSET_OBJ , EPOCHNODE ) Traverse the underlying nodes of a given EPOCHNODE until we get to the roots ( an ndi . epoch . epochset object with ISSYNGRAPHROOT that returns 1 ) . Note that the EPOCHNODE itself is returned as the first ' underlying ' node . See also : ISSYNCGRAPHROOT Help for ndi . probe . timeseries . stimulator / underlyingepochnodes is inherited from superclass NDI . EPOCH . EPOCHSET","title":"Methods help"},{"location":"reference/%2Bndi/%2Bsession/dir.m/","text":"CLASS ndi.session.dir \u00b6 NDI_SESSION_DIR - NDI_SESSION_DIR object class - an session with an associated file directory Superclasses \u00b6 ndi.session , handle Properties \u00b6 Property Description path the file path of the session reference identifier syncgraph cache Methods \u00b6 Method Description addlistener ADDLISTENER Add listener for event. daqsystem_add Add a sampling device to a ndi.session object daqsystem_clear remove all DAQSYSTEM objects from an ndi.session daqsystem_load Load daqsystem objects from an ndi.session daqsystem_rm Remove a sampling device from an ndi.session object database_add Add an ndi.document to an ndi.session object database_clear deletes/removes all entries from the database associated with an session database_closebinarydoc close and unlock an ndi.database.binarydoc database_openbinarydoc open the ndi.database.binarydoc channel of an ndi.document database_rm Remove an ndi.document with a given document ID from an ndi.session object database_search Search for an ndi.document in a database of an ndi.session object delete DELETE Delete a handle object. dir Create a new ndi.session.dir ndi_session_dir_object eq Are two ndi.session.dir objects equivalent? findexpobj search an ndi.session for a specific object given name and classname findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getelements Return all ndi.element objects that are found in session database getpath Return the path of the session getprobes Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries gt > (GT) Greater than relation for handles. id return the identifier of an ndi.session object isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ndipathname Return the path of the NDI files within the session ne ~= (NE) Not equal relation for handles. newdocument create a new ndi.database document of type ndi.document notify NOTIFY Notify listeners of event. searchquery return a search query for database objects in this session syncgraph_addrule add an ndi.time.syncrule to the syncgraph syncgraph_rmrule remove an ndi.time.syncrule from the syncgraph unique_reference_string return the unique reference string for this session Methods help \u00b6 addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , NDI . SESSION . DIR , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . session . dir / addlistener is inherited from superclass HANDLE Documentation for ndi . session . dir / addlistener doc handle . addlistener daqsystem_add - Add a sampling device to a ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_ADD ( NDI_SESSION_OBJ , DEV ) Adds the device DEV to the ndi . session NDI_SESSION_OBJ The devices can be accessed by referencing NDI_SESSION_OBJ . device See also : DAQSYSTEM_RM , ndi . session . dir Help for ndi . session . dir / daqsystem_add is inherited from superclass NDI . SESSION daqsystem_clear - remove all DAQSYSTEM objects from an ndi.session NDI_SESSION_OBJ = DAQSYSTEM_CLEAR ( NDI_SESSION_OBJ ) Permanently removes all ndi . daq . system objects from an ndi . session . Be sure you mean it ! Help for ndi . session . dir / daqsystem_clear is inherited from superclass NDI . SESSION daqsystem_load - Load daqsystem objects from an ndi.session DEV = DAQSYSTEM_LOAD ( NDI_SESSION_OBJ , PARAM1 , VALUE1 , PARAM2 , VALUE2 , ... ) or DEV = DAQSYSTEM_LOAD ( NDI_SESSION_OBJ ) Returns the ndi . daq . system objects in the ndi . session with metadata parameters PARAMS1 that matches VALUE1 , PARAMS2 that matches VALUE2 , etc . One can also search for 'name' as a parameter ; this will be automatically changed to search for database documents with fields 'ndi_document.name' equal to the corresponding value . If more than one object is requested , then DEV will be a cell list of matching objects . Otherwise , the object will be a single element . If there are no matches , empty ([]) is returned . Help for ndi . session . dir / daqsystem_load is inherited from superclass NDI . SESSION daqsystem_rm - Remove a sampling device from an ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_RM ( NDI_SESSION_OBJ , DEV ) Removes the device DEV from the device list . See also : DAQSYSTEM_ADD , ndi . session . dir Help for ndi . session . dir / daqsystem_rm is inherited from superclass NDI . SESSION database_add - Add an ndi.document to an ndi.session object NDI_SESSION_OBJ = DATABASE_ADD ( NDI_SESSION_OBJ , NDI_DOCUMENT_OBJ ) Adds the ndi . document NDI_DOCUMENT_OBJ to the ndi . session NDI_SESSION_OBJ . NDI_DOCUMENT_OBJ can also be a cell array of ndi . document objects , which will all be added in turn . The database can be queried by calling NDI_SESSION_OBJ / SEARCH See also : DATABASE_RM , ndi . session . dir , ndi . database , ndi . session . dir / SEARCH Help for ndi . session . dir / database_add is inherited from superclass NDI . SESSION database_clear - deletes/removes all entries from the database associated with an session DATABASE_CLEAR ( NDI_SESSION_OBJ , AREYOUSURE ) Removes all documents from the NDI_SESSION_OBJ object . Use with care . If AREYOUSURE is ' yes ' then the function will proceed . Otherwise , it will not . Help for ndi . session . dir / database_clear is inherited from superclass NDI . SESSION database_closebinarydoc - close and unlock an ndi.database.binarydoc [ NDI_BINARYDOC_OBJ ] = DATABASE_CLOSEBINARYDOC ( NDI_DATABASE_OBJ , NDI_BINARYDOC_OBJ ) Close and lock an NDI_BINARYDOC_OBJ . The NDI_BINARYDOC_OBJ must be unlocked in the database , which is why it is necessary to call this function through the session object . Help for ndi . session . dir / database_closebinarydoc is inherited from superclass NDI . SESSION database_openbinarydoc - open the ndi.database.binarydoc channel of an ndi.document NDI_BINARYDOC_OBJ = DATABASE_OPENBINARYDOC ( NDI_SESSION_OBJ , NDI_DOCUMENT_OR_ID ) Return the open ndi . database . binarydoc object that corresponds to an ndi . document and NDI_DOCUMENT_OR_ID can be either the document id of an ndi . document or an ndi . document object itsef . Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi . session / CLOSEBINARYDOC . The locked nature of the binary doc is a property of the database , not the document , which is why the database is needed in the method . Help for ndi . session . dir / database_openbinarydoc is inherited from superclass NDI . SESSION database_rm - Remove an ndi.document with a given document ID from an ndi.session object NDI_SESSION_OBJ = DATABASE_RM ( NDI_SESSION_OBJ , DOC_UNIQUE_ID ) or NDI_SESSION_OBJ = DATABASE_RM ( NDI_SESSION_OBJ , DOC ) Removes an ndi . document with document id DOC_UNIQUE_ID from the NDI_SESSION_OBJ . database . In the second form , if an ndi . document or cell array of NDI_DOCUMENTS is passed for DOC , then the document unique ids are retrieved and they are removed in turn . If DOC / DOC_UNIQUE_ID is empty , no action is taken . This function also takes parameters as name / value pairs that modify its behavior : Parameter ( default ) | Description -------------------------------------------------------------------------------- ErrIfNotFound ( 0 ) | Produce an error if an ID to be deleted is not found . See also : DATABASE_ADD , ndi . session . dir Help for ndi . session . dir / database_rm is inherited from superclass NDI . SESSION database_search - Search for an ndi.document in a database of an ndi.session object NDI_DOCUMENT_OBJ = DATABASE_SEARCH ( NDI_SESSION_OBJ , SEARCHPARAMETERS ) Given search parameters , which are a cell list { ' PARAM1 ' , VALUE1 , ' PARAM2, VALUE2, ...}, the database associated with the ndi . session object is searched . Matches are returned in a cell list NDI_DOCUMENT_OBJ . Help for ndi . session . dir / database_search is inherited from superclass NDI . SESSION delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also NDI . SESSION . DIR , NDI . SESSION . DIR / ISVALID , CLEAR Help for ndi . session . dir / delete is inherited from superclass HANDLE Documentation for ndi . session . dir / delete doc handle . delete dir - Create a new ndi.session.dir ndi_session_dir_object E = ndi . session . dir ( REFERENCE , PATHNAME ) Creates an ndi . session . dir ndi_session_dir_object , or an session with an associated directory . REFERENCE should be a unique reference for the session and directory PATHNAME . One can also open an existing session by using E = ndi . session . dir ( PATHNAME ) See also : ndi . session , ndi . session . dir / GETPATH eq - Are two ndi.session.dir objects equivalent? B = EQ ( NDI_SESSION_DIR_OBJ_A , NDI_SESSION_DIR_OBJ_B ) Returns 1 if the two ndi . session . dir objects have the same path and reference fields . They do not have to be the same handles ( that is , have the same location in memory ) . findexpobj - search an ndi.session for a specific object given name and classname OBJ = FINDEXPOBJ ( NDI_EXPERIMNENT_OBJ , OBJ_NAME , OBJ_CLASSNAME ) Examines the DAQSYSTEM list , DATABASE , and PROBELIST for an object with name OBJ_NAME and classname OBJ_CLASSNAME . If no object is found , OBJ will be empty ( [] ) . Help for ndi . session . dir / findexpobj is inherited from superclass NDI . SESSION findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , NDI . SESSION . DIR Help for ndi . session . dir / findobj is inherited from superclass HANDLE Documentation for ndi . session . dir / findobj doc handle . findobj findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also NDI . SESSION . DIR , NDI . SESSION . DIR / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for ndi . session . dir / findprop is inherited from superclass HANDLE Documentation for ndi . session . dir / findprop doc handle . findprop ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION . DIR , NDI . SESSION . DIR / EQ , NDI . SESSION . DIR / GT , NDI . SESSION . DIR / LE , NDI . SESSION . DIR / LT , NDI . SESSION . DIR / NE Help for ndi . session . dir / ge is inherited from superclass HANDLE Documentation for ndi . session . dir / ge doc handle . ge getelements - Return all ndi.element objects that are found in session database ELEMENTS = GETELEMENTS ( NDI_SESSION_OBJ , ... ) Examines all the database of NDI_SESSION_OBJ and returns all ndi . element entries . ELEMENTS is a cell array of ndi . element . * objects . ELEMENTS = GETELEMENTS ( NDI_SESSION_OBJ , ' PROP1 ' , VALUE1 , ' PROP2 ' , VALUE2 ... ) returns only those probes for which ' PROP1 ' has a value of VALUE1 , ' PROP2 ' has a value of VALUE2 , etc . Properties of elements are ' element.name ' , ' element.type ' , ' element.direct ' , and ' probe.name ' , ' probe.type ' , and ' probe.reference ' . Help for ndi . session . dir / getelements is inherited from superclass NDI . SESSION getpath - Return the path of the session P = GETPATH(NDI_SESSION_DIR_OBJ) Returns the path of an ndi.session.dir object. The path is some sort of reference to the storage location of the session. This might be a URL, or a file directory. getprobes - Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries PROBES = GETPROBES ( NDI_SESSION_OBJ , ... ) Examines all ndi . daq . system entries in the NDI_SESSION_OBJ 's device array and returns all ndi . probe .* entries that can be constructed from each device 's ndi . epoch . epochprobemap entries . PROBES is a cell array of ndi . probe .* objects . One can pass additional arguments that specify the classnames of the probes that are returned : PROBES = GETPROBES ( NDI_SESSION_OBJ , CLASSMATCH ) only probes that are members of the classes CLASSMATCH etc . , are returned . PROBES = GETPROBES ( NDI_SESSION_OBJ , 'PROP1' , VALUE1 , 'PROP2' , VALUE2 ... ) returns only those probes for which 'PROP1' has a value of VALUE1 , 'PROP2' has a value of VALUE2 , etc . Properties of probes are 'name' , 'reference' , and 'type' , and 'subject_ID' . Help for ndi . session . dir / getprobes is inherited from superclass NDI . SESSION gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION . DIR , NDI . SESSION . DIR / EQ , NDI . SESSION . DIR / GE , NDI . SESSION . DIR / LE , NDI . SESSION . DIR / LT , NDI . SESSION . DIR / NE Help for ndi . session . dir / gt is inherited from superclass HANDLE Documentation for ndi . session . dir / gt doc handle . gt id - return the identifier of an ndi.session object IDENTIFIER = ID ( NDI_SESSION_OBJ ) Returns the unique identifier of an ndi . session object . Help for ndi . session . dir / id is inherited from superclass NDI . SESSION isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDI . SESSION . DIR , NDI . SESSION . DIR / DELETE Help for ndi . session . dir / isvalid is inherited from superclass HANDLE Documentation for ndi . session . dir / isvalid doc handle . isvalid le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION . DIR , NDI . SESSION . DIR / EQ , NDI . SESSION . DIR / GE , NDI . SESSION . DIR / GT , NDI . SESSION . DIR / LT , NDI . SESSION . DIR / NE Help for ndi . session . dir / le is inherited from superclass HANDLE Documentation for ndi . session . dir / le doc handle . le listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , NDI . SESSION . DIR , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . session . dir / listener is inherited from superclass HANDLE Documentation for ndi . session . dir / listener doc handle . listener lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION . DIR , NDI . SESSION . DIR / EQ , NDI . SESSION . DIR / GE , NDI . SESSION . DIR / GT , NDI . SESSION . DIR / LE , NDI . SESSION . DIR / NE Help for ndi . session . dir / lt is inherited from superclass HANDLE Documentation for ndi . session . dir / lt doc handle . lt ndipathname - Return the path of the NDI files within the session P = NDIPATHNAME(NDI_SESSION_DIR_OBJ) Returns the pathname to the NDI files in the ndi.session.dir object. It is the ndi.session.dir object's path plus [filesep '.ndi' ] ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION . DIR , NDI . SESSION . DIR / EQ , NDI . SESSION . DIR / GE , NDI . SESSION . DIR / GT , NDI . SESSION . DIR / LE , NDI . SESSION . DIR / LT Help for ndi . session . dir / ne is inherited from superclass HANDLE Documentation for ndi . session . dir / ne doc handle . ne newdocument - create a new ndi.database document of type ndi.document NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_SESSION_OBJ , [ DOCUMENT_TYPE ] , 'PROPERTY1' , VALUE1 , ...) Creates an empty database document NDI_DOCUMENT_OBJ . DOCUMENT_TYPE is an optional argument and can be any type that confirms to the . json files in $ NDI_COMMON / database_documents /*, a URL to such a file, or a full path filename. If DOCUMENT_TYPE is not specified, it is taken to be 'ndi_document.json'. If additional PROPERTY values are specified, they are set to the VALUES indicated. Example: mydoc = ndi_session_obj.newdocument('ndi_document','ndi_document.name','myname'); Help for ndi.session.dir/newdocument is inherited from superclass NDI.SESSION notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDI . SESSION . DIR , NDI . SESSION . DIR / ADDLISTENER , NDI . SESSION . DIR / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndi . session . dir / notify is inherited from superclass HANDLE Documentation for ndi . session . dir / notify doc handle . notify searchquery - return a search query for database objects in this session SQ = SEARCHQUERY ( NDI_SESSION_OBJ ) Returns a search query that will match all ndi . document objects that were generated by this session . SQ = { 'ndi_document.session_id', ndi_session_obj.id() } ; Example : mydoc = ndi_session_obj . newdocument ( 'ndi_document' , 'ndi_document.name' , 'myname' ); Help for ndi . session . dir / searchquery is inherited from superclass NDI . SESSION syncgraph_addrule - add an ndi.time.syncrule to the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_ADDRULE ( NDI_SESSION_OBJ , RULE ) Adds the ndi . time . syncrule RULE to the ndi . time . syncgraph of the ndi . session object NDI_SESSION_OBJ . Help for ndi . session . dir / syncgraph_addrule is inherited from superclass NDI . SESSION syncgraph_rmrule - remove an ndi.time.syncrule from the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_RMRULE ( NDI_SESSION_OBJ , INDEX ) Removes the INDEXth ndi . time . syncrule from the ndi . time . syncgraph of the ndi . session object NDI_SESSION_OBJ . Help for ndi . session . dir / syncgraph_rmrule is inherited from superclass NDI . SESSION unique_reference_string - return the unique reference string for this session REFSTR = UNIQUE_REFERENCE_STRING ( NDI_SESSION_OBJ ) Returns the unique reference string for the ndi . session . REFSTR is a combination of the REFERENCE property of NDI_SESSION_OBJ and the UNIQUE_REFERENCE property of NDI_SESSION_OBJ , joined with a ' _ ' . Help for ndi . session . dir / unique_reference_string is inherited from superclass NDI . SESSION","title":"ndi.session.dir"},{"location":"reference/%2Bndi/%2Bsession/dir.m/#class-ndisessiondir","text":"NDI_SESSION_DIR - NDI_SESSION_DIR object class - an session with an associated file directory","title":"CLASS ndi.session.dir"},{"location":"reference/%2Bndi/%2Bsession/dir.m/#superclasses","text":"ndi.session , handle","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bsession/dir.m/#properties","text":"Property Description path the file path of the session reference identifier syncgraph cache","title":"Properties"},{"location":"reference/%2Bndi/%2Bsession/dir.m/#methods","text":"Method Description addlistener ADDLISTENER Add listener for event. daqsystem_add Add a sampling device to a ndi.session object daqsystem_clear remove all DAQSYSTEM objects from an ndi.session daqsystem_load Load daqsystem objects from an ndi.session daqsystem_rm Remove a sampling device from an ndi.session object database_add Add an ndi.document to an ndi.session object database_clear deletes/removes all entries from the database associated with an session database_closebinarydoc close and unlock an ndi.database.binarydoc database_openbinarydoc open the ndi.database.binarydoc channel of an ndi.document database_rm Remove an ndi.document with a given document ID from an ndi.session object database_search Search for an ndi.document in a database of an ndi.session object delete DELETE Delete a handle object. dir Create a new ndi.session.dir ndi_session_dir_object eq Are two ndi.session.dir objects equivalent? findexpobj search an ndi.session for a specific object given name and classname findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. getelements Return all ndi.element objects that are found in session database getpath Return the path of the session getprobes Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries gt > (GT) Greater than relation for handles. id return the identifier of an ndi.session object isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ndipathname Return the path of the NDI files within the session ne ~= (NE) Not equal relation for handles. newdocument create a new ndi.database document of type ndi.document notify NOTIFY Notify listeners of event. searchquery return a search query for database objects in this session syncgraph_addrule add an ndi.time.syncrule to the syncgraph syncgraph_rmrule remove an ndi.time.syncrule from the syncgraph unique_reference_string return the unique reference string for this session","title":"Methods"},{"location":"reference/%2Bndi/%2Bsession/dir.m/#methods-help","text":"addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , NDI . SESSION . DIR , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . session . dir / addlistener is inherited from superclass HANDLE Documentation for ndi . session . dir / addlistener doc handle . addlistener daqsystem_add - Add a sampling device to a ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_ADD ( NDI_SESSION_OBJ , DEV ) Adds the device DEV to the ndi . session NDI_SESSION_OBJ The devices can be accessed by referencing NDI_SESSION_OBJ . device See also : DAQSYSTEM_RM , ndi . session . dir Help for ndi . session . dir / daqsystem_add is inherited from superclass NDI . SESSION daqsystem_clear - remove all DAQSYSTEM objects from an ndi.session NDI_SESSION_OBJ = DAQSYSTEM_CLEAR ( NDI_SESSION_OBJ ) Permanently removes all ndi . daq . system objects from an ndi . session . Be sure you mean it ! Help for ndi . session . dir / daqsystem_clear is inherited from superclass NDI . SESSION daqsystem_load - Load daqsystem objects from an ndi.session DEV = DAQSYSTEM_LOAD ( NDI_SESSION_OBJ , PARAM1 , VALUE1 , PARAM2 , VALUE2 , ... ) or DEV = DAQSYSTEM_LOAD ( NDI_SESSION_OBJ ) Returns the ndi . daq . system objects in the ndi . session with metadata parameters PARAMS1 that matches VALUE1 , PARAMS2 that matches VALUE2 , etc . One can also search for 'name' as a parameter ; this will be automatically changed to search for database documents with fields 'ndi_document.name' equal to the corresponding value . If more than one object is requested , then DEV will be a cell list of matching objects . Otherwise , the object will be a single element . If there are no matches , empty ([]) is returned . Help for ndi . session . dir / daqsystem_load is inherited from superclass NDI . SESSION daqsystem_rm - Remove a sampling device from an ndi.session object NDI_SESSION_OBJ = DAQSYSTEM_RM ( NDI_SESSION_OBJ , DEV ) Removes the device DEV from the device list . See also : DAQSYSTEM_ADD , ndi . session . dir Help for ndi . session . dir / daqsystem_rm is inherited from superclass NDI . SESSION database_add - Add an ndi.document to an ndi.session object NDI_SESSION_OBJ = DATABASE_ADD ( NDI_SESSION_OBJ , NDI_DOCUMENT_OBJ ) Adds the ndi . document NDI_DOCUMENT_OBJ to the ndi . session NDI_SESSION_OBJ . NDI_DOCUMENT_OBJ can also be a cell array of ndi . document objects , which will all be added in turn . The database can be queried by calling NDI_SESSION_OBJ / SEARCH See also : DATABASE_RM , ndi . session . dir , ndi . database , ndi . session . dir / SEARCH Help for ndi . session . dir / database_add is inherited from superclass NDI . SESSION database_clear - deletes/removes all entries from the database associated with an session DATABASE_CLEAR ( NDI_SESSION_OBJ , AREYOUSURE ) Removes all documents from the NDI_SESSION_OBJ object . Use with care . If AREYOUSURE is ' yes ' then the function will proceed . Otherwise , it will not . Help for ndi . session . dir / database_clear is inherited from superclass NDI . SESSION database_closebinarydoc - close and unlock an ndi.database.binarydoc [ NDI_BINARYDOC_OBJ ] = DATABASE_CLOSEBINARYDOC ( NDI_DATABASE_OBJ , NDI_BINARYDOC_OBJ ) Close and lock an NDI_BINARYDOC_OBJ . The NDI_BINARYDOC_OBJ must be unlocked in the database , which is why it is necessary to call this function through the session object . Help for ndi . session . dir / database_closebinarydoc is inherited from superclass NDI . SESSION database_openbinarydoc - open the ndi.database.binarydoc channel of an ndi.document NDI_BINARYDOC_OBJ = DATABASE_OPENBINARYDOC ( NDI_SESSION_OBJ , NDI_DOCUMENT_OR_ID ) Return the open ndi . database . binarydoc object that corresponds to an ndi . document and NDI_DOCUMENT_OR_ID can be either the document id of an ndi . document or an ndi . document object itsef . Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi . session / CLOSEBINARYDOC . The locked nature of the binary doc is a property of the database , not the document , which is why the database is needed in the method . Help for ndi . session . dir / database_openbinarydoc is inherited from superclass NDI . SESSION database_rm - Remove an ndi.document with a given document ID from an ndi.session object NDI_SESSION_OBJ = DATABASE_RM ( NDI_SESSION_OBJ , DOC_UNIQUE_ID ) or NDI_SESSION_OBJ = DATABASE_RM ( NDI_SESSION_OBJ , DOC ) Removes an ndi . document with document id DOC_UNIQUE_ID from the NDI_SESSION_OBJ . database . In the second form , if an ndi . document or cell array of NDI_DOCUMENTS is passed for DOC , then the document unique ids are retrieved and they are removed in turn . If DOC / DOC_UNIQUE_ID is empty , no action is taken . This function also takes parameters as name / value pairs that modify its behavior : Parameter ( default ) | Description -------------------------------------------------------------------------------- ErrIfNotFound ( 0 ) | Produce an error if an ID to be deleted is not found . See also : DATABASE_ADD , ndi . session . dir Help for ndi . session . dir / database_rm is inherited from superclass NDI . SESSION database_search - Search for an ndi.document in a database of an ndi.session object NDI_DOCUMENT_OBJ = DATABASE_SEARCH ( NDI_SESSION_OBJ , SEARCHPARAMETERS ) Given search parameters , which are a cell list { ' PARAM1 ' , VALUE1 , ' PARAM2, VALUE2, ...}, the database associated with the ndi . session object is searched . Matches are returned in a cell list NDI_DOCUMENT_OBJ . Help for ndi . session . dir / database_search is inherited from superclass NDI . SESSION delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also NDI . SESSION . DIR , NDI . SESSION . DIR / ISVALID , CLEAR Help for ndi . session . dir / delete is inherited from superclass HANDLE Documentation for ndi . session . dir / delete doc handle . delete dir - Create a new ndi.session.dir ndi_session_dir_object E = ndi . session . dir ( REFERENCE , PATHNAME ) Creates an ndi . session . dir ndi_session_dir_object , or an session with an associated directory . REFERENCE should be a unique reference for the session and directory PATHNAME . One can also open an existing session by using E = ndi . session . dir ( PATHNAME ) See also : ndi . session , ndi . session . dir / GETPATH eq - Are two ndi.session.dir objects equivalent? B = EQ ( NDI_SESSION_DIR_OBJ_A , NDI_SESSION_DIR_OBJ_B ) Returns 1 if the two ndi . session . dir objects have the same path and reference fields . They do not have to be the same handles ( that is , have the same location in memory ) . findexpobj - search an ndi.session for a specific object given name and classname OBJ = FINDEXPOBJ ( NDI_EXPERIMNENT_OBJ , OBJ_NAME , OBJ_CLASSNAME ) Examines the DAQSYSTEM list , DATABASE , and PROBELIST for an object with name OBJ_NAME and classname OBJ_CLASSNAME . If no object is found , OBJ will be empty ( [] ) . Help for ndi . session . dir / findexpobj is inherited from superclass NDI . SESSION findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , NDI . SESSION . DIR Help for ndi . session . dir / findobj is inherited from superclass HANDLE Documentation for ndi . session . dir / findobj doc handle . findobj findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also NDI . SESSION . DIR , NDI . SESSION . DIR / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for ndi . session . dir / findprop is inherited from superclass HANDLE Documentation for ndi . session . dir / findprop doc handle . findprop ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION . DIR , NDI . SESSION . DIR / EQ , NDI . SESSION . DIR / GT , NDI . SESSION . DIR / LE , NDI . SESSION . DIR / LT , NDI . SESSION . DIR / NE Help for ndi . session . dir / ge is inherited from superclass HANDLE Documentation for ndi . session . dir / ge doc handle . ge getelements - Return all ndi.element objects that are found in session database ELEMENTS = GETELEMENTS ( NDI_SESSION_OBJ , ... ) Examines all the database of NDI_SESSION_OBJ and returns all ndi . element entries . ELEMENTS is a cell array of ndi . element . * objects . ELEMENTS = GETELEMENTS ( NDI_SESSION_OBJ , ' PROP1 ' , VALUE1 , ' PROP2 ' , VALUE2 ... ) returns only those probes for which ' PROP1 ' has a value of VALUE1 , ' PROP2 ' has a value of VALUE2 , etc . Properties of elements are ' element.name ' , ' element.type ' , ' element.direct ' , and ' probe.name ' , ' probe.type ' , and ' probe.reference ' . Help for ndi . session . dir / getelements is inherited from superclass NDI . SESSION getpath - Return the path of the session P = GETPATH(NDI_SESSION_DIR_OBJ) Returns the path of an ndi.session.dir object. The path is some sort of reference to the storage location of the session. This might be a URL, or a file directory. getprobes - Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries PROBES = GETPROBES ( NDI_SESSION_OBJ , ... ) Examines all ndi . daq . system entries in the NDI_SESSION_OBJ 's device array and returns all ndi . probe .* entries that can be constructed from each device 's ndi . epoch . epochprobemap entries . PROBES is a cell array of ndi . probe .* objects . One can pass additional arguments that specify the classnames of the probes that are returned : PROBES = GETPROBES ( NDI_SESSION_OBJ , CLASSMATCH ) only probes that are members of the classes CLASSMATCH etc . , are returned . PROBES = GETPROBES ( NDI_SESSION_OBJ , 'PROP1' , VALUE1 , 'PROP2' , VALUE2 ... ) returns only those probes for which 'PROP1' has a value of VALUE1 , 'PROP2' has a value of VALUE2 , etc . Properties of probes are 'name' , 'reference' , and 'type' , and 'subject_ID' . Help for ndi . session . dir / getprobes is inherited from superclass NDI . SESSION gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION . DIR , NDI . SESSION . DIR / EQ , NDI . SESSION . DIR / GE , NDI . SESSION . DIR / LE , NDI . SESSION . DIR / LT , NDI . SESSION . DIR / NE Help for ndi . session . dir / gt is inherited from superclass HANDLE Documentation for ndi . session . dir / gt doc handle . gt id - return the identifier of an ndi.session object IDENTIFIER = ID ( NDI_SESSION_OBJ ) Returns the unique identifier of an ndi . session object . Help for ndi . session . dir / id is inherited from superclass NDI . SESSION isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDI . SESSION . DIR , NDI . SESSION . DIR / DELETE Help for ndi . session . dir / isvalid is inherited from superclass HANDLE Documentation for ndi . session . dir / isvalid doc handle . isvalid le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION . DIR , NDI . SESSION . DIR / EQ , NDI . SESSION . DIR / GE , NDI . SESSION . DIR / GT , NDI . SESSION . DIR / LT , NDI . SESSION . DIR / NE Help for ndi . session . dir / le is inherited from superclass HANDLE Documentation for ndi . session . dir / le doc handle . le listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , NDI . SESSION . DIR , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndi . session . dir / listener is inherited from superclass HANDLE Documentation for ndi . session . dir / listener doc handle . listener lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION . DIR , NDI . SESSION . DIR / EQ , NDI . SESSION . DIR / GE , NDI . SESSION . DIR / GT , NDI . SESSION . DIR / LE , NDI . SESSION . DIR / NE Help for ndi . session . dir / lt is inherited from superclass HANDLE Documentation for ndi . session . dir / lt doc handle . lt ndipathname - Return the path of the NDI files within the session P = NDIPATHNAME(NDI_SESSION_DIR_OBJ) Returns the pathname to the NDI files in the ndi.session.dir object. It is the ndi.session.dir object's path plus [filesep '.ndi' ] ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDI . SESSION . DIR , NDI . SESSION . DIR / EQ , NDI . SESSION . DIR / GE , NDI . SESSION . DIR / GT , NDI . SESSION . DIR / LE , NDI . SESSION . DIR / LT Help for ndi . session . dir / ne is inherited from superclass HANDLE Documentation for ndi . session . dir / ne doc handle . ne newdocument - create a new ndi.database document of type ndi.document NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_SESSION_OBJ , [ DOCUMENT_TYPE ] , 'PROPERTY1' , VALUE1 , ...) Creates an empty database document NDI_DOCUMENT_OBJ . DOCUMENT_TYPE is an optional argument and can be any type that confirms to the . json files in $ NDI_COMMON / database_documents /*, a URL to such a file, or a full path filename. If DOCUMENT_TYPE is not specified, it is taken to be 'ndi_document.json'. If additional PROPERTY values are specified, they are set to the VALUES indicated. Example: mydoc = ndi_session_obj.newdocument('ndi_document','ndi_document.name','myname'); Help for ndi.session.dir/newdocument is inherited from superclass NDI.SESSION notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDI . SESSION . DIR , NDI . SESSION . DIR / ADDLISTENER , NDI . SESSION . DIR / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndi . session . dir / notify is inherited from superclass HANDLE Documentation for ndi . session . dir / notify doc handle . notify searchquery - return a search query for database objects in this session SQ = SEARCHQUERY ( NDI_SESSION_OBJ ) Returns a search query that will match all ndi . document objects that were generated by this session . SQ = { 'ndi_document.session_id', ndi_session_obj.id() } ; Example : mydoc = ndi_session_obj . newdocument ( 'ndi_document' , 'ndi_document.name' , 'myname' ); Help for ndi . session . dir / searchquery is inherited from superclass NDI . SESSION syncgraph_addrule - add an ndi.time.syncrule to the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_ADDRULE ( NDI_SESSION_OBJ , RULE ) Adds the ndi . time . syncrule RULE to the ndi . time . syncgraph of the ndi . session object NDI_SESSION_OBJ . Help for ndi . session . dir / syncgraph_addrule is inherited from superclass NDI . SESSION syncgraph_rmrule - remove an ndi.time.syncrule from the syncgraph NDI_SESSION_OBJ = SYNCGRAPH_RMRULE ( NDI_SESSION_OBJ , INDEX ) Removes the INDEXth ndi . time . syncrule from the ndi . time . syncgraph of the ndi . session object NDI_SESSION_OBJ . Help for ndi . session . dir / syncgraph_rmrule is inherited from superclass NDI . SESSION unique_reference_string - return the unique reference string for this session REFSTR = UNIQUE_REFERENCE_STRING ( NDI_SESSION_OBJ ) Returns the unique reference string for the ndi . session . REFSTR is a combination of the REFERENCE property of NDI_SESSION_OBJ and the UNIQUE_REFERENCE property of NDI_SESSION_OBJ , joined with a ' _ ' . Help for ndi . session . dir / unique_reference_string is inherited from superclass NDI . SESSION","title":"Methods help"},{"location":"reference/%2Bndi/%2Bsession/sessiontable.m/","text":"CLASS ndi.session.sessiontable \u00b6 NDI_SESSIONTABLE - a table for managing the file paths of NDI sessions Superclasses \u00b6 none Properties \u00b6 none Methods \u00b6 Method Description addtableentry add an entry to an ndi.session.sessiontable backupfilelist a list of backup files that are present on disk backupsessiontable create a backup file for an ndi.session.sessiontable checktable check the session table for proper form, accessibility clearsessiontable clear an ndi.session.sessiontable object's data getsessionpath look up the path of an ndi.session by its ID getsessiontable return the session table isvalidtable Does the session table have the correct fields? localtablefilename return the session table filename removetableentry remove an entry of an ndi.session.sessiontable sessiontable a table for managing the file paths of NDI sessions Methods help \u00b6 addtableentry - add an entry to an ndi.session.sessiontable ADDTABLEENTRY ( NDI_SESSIONTABLE_OBJ , SESSION_ID , PATH ) Adds SESSION_ID and PATH as an entry to the session table . If SESSION_ID is already in the table , then the entry is replaced . backupfilelist - a list of backup files that are present on disk F = BACKUPFILELIST ( NDI_SESSIONTABLE_OBJ ) Returns a list of backup files that are available . Backup files have the name [ USERPATH ]/ Preferences / NDI / local_sessiontable_bkupNNN . txt . backupsessiontable - create a backup file for an ndi.session.sessiontable BACKUP_SESSION_TABLE ( NDI_SESSIONTABLE_OBJ ) Perform a backup of the sesion table file . The session table file is backed up in the [ USERPATH ]/ Preferences / NDI directory and be named 'local_sessiontableNNN.txt' , where NNN is a number . checktable - check the session table for proper form, accessibility [ B , RESULTS ] = CHECKTABLE ( NDI_SESSIONTABLE_OBJ ) Check the ndi . session . sessiontable object ' s session table to see if it has the right form ( B is 1 if it does , B is 0 otherwise ) . ( It has the right form if it is a structure with fieldnames ' path ' and ' sesion_id ' . If the table has the right form RESULTS is a structure array with one entry per entry in the table . It has a field ' exists ' which is 1 if the path currently exists on the user ' s machine. If the table does not have the right form , then RESULTS is empty . clearsessiontable - clear an ndi.session.sessiontable object's data CLEARSESSIONTABLE ( NDI_SESSIONTABLE_OBJ , [ MAKEBACKUP ] ) Removes all entries from the ndi . session . sessiontable ' s file . If MAKEBACKUP is present and is 1 , then the session table file is backed up first ( in the Preferences / NDI directory ). getsessionpath - look up the path of an ndi.session by its ID THEPATH = GETSESIONPATH ( SESSION_ID ) Examines the ndi . session . sessiontable object to see if a path is known for a session with an ID of SESSION_ID . Otherwise , empty ( [] ) is returned ; getsessiontable - return the session table T = GETSESSIONTABLE(NDI_SESSIONTABLE_OBJ) Returns the session table, a structure with fields 'SESSION_ID' and 'PATH'. Each entry in the table corresponds to a recently-opened or added path of ndi.session.dir. isvalidtable - Does the session table have the correct fields? [ B,MSG ] = ISVALIDTABLE ( NDI_SESSIONTABLE_OBJ , [ T ] ) B is 1 if the NDI SESSION TABLE is a structure array with fields 'path' and 'session_id' , all text fields . B is 0 otherwise . If T is not provided , then the session table is read . If B is 0 , then an error description is provided in MSG . MSG is '' otherwise . localtablefilename - return the session table filename F = LOCALTABLEFILENAME() removetableentry - remove an entry of an ndi.session.sessiontable REMOVETABLEENTRY(NDI_SESSIONTABLE_OBJ, SESSION_ID) Removes the entry of an ndi.session.sessiontable with the given SESSION_ID. sessiontable - a table for managing the file paths of NDI sessions","title":"ndi.session.sessiontable"},{"location":"reference/%2Bndi/%2Bsession/sessiontable.m/#class-ndisessionsessiontable","text":"NDI_SESSIONTABLE - a table for managing the file paths of NDI sessions","title":"CLASS ndi.session.sessiontable"},{"location":"reference/%2Bndi/%2Bsession/sessiontable.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bsession/sessiontable.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bndi/%2Bsession/sessiontable.m/#methods","text":"Method Description addtableentry add an entry to an ndi.session.sessiontable backupfilelist a list of backup files that are present on disk backupsessiontable create a backup file for an ndi.session.sessiontable checktable check the session table for proper form, accessibility clearsessiontable clear an ndi.session.sessiontable object's data getsessionpath look up the path of an ndi.session by its ID getsessiontable return the session table isvalidtable Does the session table have the correct fields? localtablefilename return the session table filename removetableentry remove an entry of an ndi.session.sessiontable sessiontable a table for managing the file paths of NDI sessions","title":"Methods"},{"location":"reference/%2Bndi/%2Bsession/sessiontable.m/#methods-help","text":"addtableentry - add an entry to an ndi.session.sessiontable ADDTABLEENTRY ( NDI_SESSIONTABLE_OBJ , SESSION_ID , PATH ) Adds SESSION_ID and PATH as an entry to the session table . If SESSION_ID is already in the table , then the entry is replaced . backupfilelist - a list of backup files that are present on disk F = BACKUPFILELIST ( NDI_SESSIONTABLE_OBJ ) Returns a list of backup files that are available . Backup files have the name [ USERPATH ]/ Preferences / NDI / local_sessiontable_bkupNNN . txt . backupsessiontable - create a backup file for an ndi.session.sessiontable BACKUP_SESSION_TABLE ( NDI_SESSIONTABLE_OBJ ) Perform a backup of the sesion table file . The session table file is backed up in the [ USERPATH ]/ Preferences / NDI directory and be named 'local_sessiontableNNN.txt' , where NNN is a number . checktable - check the session table for proper form, accessibility [ B , RESULTS ] = CHECKTABLE ( NDI_SESSIONTABLE_OBJ ) Check the ndi . session . sessiontable object ' s session table to see if it has the right form ( B is 1 if it does , B is 0 otherwise ) . ( It has the right form if it is a structure with fieldnames ' path ' and ' sesion_id ' . If the table has the right form RESULTS is a structure array with one entry per entry in the table . It has a field ' exists ' which is 1 if the path currently exists on the user ' s machine. If the table does not have the right form , then RESULTS is empty . clearsessiontable - clear an ndi.session.sessiontable object's data CLEARSESSIONTABLE ( NDI_SESSIONTABLE_OBJ , [ MAKEBACKUP ] ) Removes all entries from the ndi . session . sessiontable ' s file . If MAKEBACKUP is present and is 1 , then the session table file is backed up first ( in the Preferences / NDI directory ). getsessionpath - look up the path of an ndi.session by its ID THEPATH = GETSESIONPATH ( SESSION_ID ) Examines the ndi . session . sessiontable object to see if a path is known for a session with an ID of SESSION_ID . Otherwise , empty ( [] ) is returned ; getsessiontable - return the session table T = GETSESSIONTABLE(NDI_SESSIONTABLE_OBJ) Returns the session table, a structure with fields 'SESSION_ID' and 'PATH'. Each entry in the table corresponds to a recently-opened or added path of ndi.session.dir. isvalidtable - Does the session table have the correct fields? [ B,MSG ] = ISVALIDTABLE ( NDI_SESSIONTABLE_OBJ , [ T ] ) B is 1 if the NDI SESSION TABLE is a structure array with fields 'path' and 'session_id' , all text fields . B is 0 otherwise . If T is not provided , then the session table is read . If B is 0 , then an error description is provided in MSG . MSG is '' otherwise . localtablefilename - return the session table filename F = LOCALTABLEFILENAME() removetableentry - remove an entry of an ndi.session.sessiontable REMOVETABLEENTRY(NDI_SESSIONTABLE_OBJ, SESSION_ID) Removes the entry of an ndi.session.sessiontable with the given SESSION_ID. sessiontable - a table for managing the file paths of NDI sessions","title":"Methods help"},{"location":"reference/%2Bndi/%2Bsetup/angeluccilab.m/","text":"ndi.setup.angeluccilab \u00b6 ndi . setup . angeluccilab - initialize an NDI_SESSION_DIR with ANGELUCCILAB devices S = ndi . setup . angeluccilab ( REF , DIRNAME ) Initializes an ndi . session . dir object for the directory DIRNAME with the standard compliment of ANGELUCCILAB devices , as found in ndi . setup . daq . system . angeluccilab_makedev . If the devices are already added , they are not re - created .","title":"ndi.setup.angeluccilab"},{"location":"reference/%2Bndi/%2Bsetup/angeluccilab.m/#ndisetupangeluccilab","text":"ndi . setup . angeluccilab - initialize an NDI_SESSION_DIR with ANGELUCCILAB devices S = ndi . setup . angeluccilab ( REF , DIRNAME ) Initializes an ndi . session . dir object for the directory DIRNAME with the standard compliment of ANGELUCCILAB devices , as found in ndi . setup . daq . system . angeluccilab_makedev . If the devices are already added , they are not re - created .","title":"ndi.setup.angeluccilab"},{"location":"reference/%2Bndi/%2Bsetup/dbkatzlab.m/","text":"ndi.setup.dbkatzlab \u00b6 KATZLAB_EXPERDIR - initialize an NDI_SESSION_DIR with KATZLAB devices S = ndi . setup . dbkatzlab ( REF , DIRNAME ) Initializes an ndi . session . dir object for the directory DIRNAME with the standard compliment of KATZLAB devices , as found in ndi . setup . daq . system . dbkatzlab . If the devices are already added , they are not re - created .","title":"ndi.setup.dbkatzlab"},{"location":"reference/%2Bndi/%2Bsetup/dbkatzlab.m/#ndisetupdbkatzlab","text":"KATZLAB_EXPERDIR - initialize an NDI_SESSION_DIR with KATZLAB devices S = ndi . setup . dbkatzlab ( REF , DIRNAME ) Initializes an ndi . session . dir object for the directory DIRNAME with the standard compliment of KATZLAB devices , as found in ndi . setup . daq . system . dbkatzlab . If the devices are already added , they are not re - created .","title":"ndi.setup.dbkatzlab"},{"location":"reference/%2Bndi/%2Bsetup/marderlab.m/","text":"ndi.setup.marderlab \u00b6 ndi . setup . marderlab - initialize an NDI_SESSION_DIR with MARDERLAB devices S = ndi . setup . marderlab ( REF , DIRNAME ) Initializes an ndi . session . dir object for the directory DIRNAME with the standard compliment of MARDERLAB devices , as found in ndi . setup . daq . system . marderlab . If the devices are already added , they are not re - created .","title":"ndi.setup.marderlab"},{"location":"reference/%2Bndi/%2Bsetup/marderlab.m/#ndisetupmarderlab","text":"ndi . setup . marderlab - initialize an NDI_SESSION_DIR with MARDERLAB devices S = ndi . setup . marderlab ( REF , DIRNAME ) Initializes an ndi . session . dir object for the directory DIRNAME with the standard compliment of MARDERLAB devices , as found in ndi . setup . daq . system . marderlab . If the devices are already added , they are not re - created .","title":"ndi.setup.marderlab"},{"location":"reference/%2Bndi/%2Bsetup/vhlab.m/","text":"ndi.setup.vhlab \u00b6 ndi . setup . vhlab - initialize an ndi . session . dir with VHLAB devices S = ndi . setup . vhlab ( REF , DIRNAME ) Initializes an ndi . session . dir object for the directory DIRNAME with the standard compliment of VHLAB devices , as found in ndi . setup . daq . system . vhlab . If the devices are already added , they are not re - created .","title":"ndi.setup.vhlab"},{"location":"reference/%2Bndi/%2Bsetup/vhlab.m/#ndisetupvhlab","text":"ndi . setup . vhlab - initialize an ndi . session . dir with VHLAB devices S = ndi . setup . vhlab ( REF , DIRNAME ) Initializes an ndi . session . dir object for the directory DIRNAME with the standard compliment of VHLAB devices , as found in ndi . setup . daq . system . vhlab . If the devices are already added , they are not re - created .","title":"ndi.setup.vhlab"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/AngelucciStims.m/","text":"CLASS ndi.setup.daq.metadatareader.AngelucciStims \u00b6 NDI_DAQMETADATAREADER_ANGELUCCISTIMS - a class for reading stims from Angelucci lab example data Superclasses \u00b6 ndi.daq.metadatareader , ndi.ido , ndi.documentservice Properties \u00b6 Property Description tab_separated_file_parameter identifier Methods \u00b6 Method Description AngelucciStims Create a new multifunction DAQ object eq are 2 ndi.daq.metadatareader objects equal? id return the identifier of an ndi.ido object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) readmetadatafromfile read in metadata from the file that is identified searchquery create a search for this ndi.daq.reader object Methods help \u00b6 AngelucciStims - Create a new multifunction DAQ object D = NDI_DAQMETADATAREADER_ANGELUCCI_STIMS () or D = ndi . daq . metadatareader ( STIMDATA_MAT_FILE ) Creates a new ndi . daq . metadatareader object . If TSVFILE_REGEXPRESSION is given , it indicates a regular expression to use to search EPOCHFILES for a tab - separated - value text file that describes stimulus parameters . eq - are 2 ndi.daq.metadatareader objects equal? TF = EQ ( NDI_DAQMETADATAREADER_OBJ_A , NDI_DAQMETADATAREADER_OBJ_B ) TF is 1 if the two objects are of the same class and have the same properties . TF is 0 otherwise . Help for ndi . setup . daq . metadatareader . AngelucciStims / eq is inherited from superclass NDI . DAQ . METADATAREADER id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . setup . daq . metadatareader . AngelucciStims / id is inherited from superclass NDI . IDO ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . setup . daq . metadatareader . AngelucciStims . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.metadatareader object DOC = NEWDOCUMENT ( ndi . daq . metadatareader OBJ ) Creates an ndi . document object DOC that represents the ndi . daq . reader object . Help for ndi . setup . daq . metadatareader . AngelucciStims / newdocument is inherited from superclass NDI . DAQ . METADATAREADER readmetadata - PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) Returns the parameters ( cell array of structures ) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES . If the property ' tab_separated_file_parameter ' is not empty , then EPOCHFILES will be searched for files that match the regular expression in ' tab_separated_file_parameter '. The tab - separated - value file should have the form: STIMID < tab > PARAMETER1 < tab > PARAMETER2 < tab > PARAMETER3 ( etc ) < newline > 1 < tab > VALUE1 < tab > VALUE2 < tab > VALUE3 ( etc ) < newline > 2 < tab > VALUE1 < tab > VALUE2 < tab > VALUE3 ( etc ) < newline > ( etc ) For example , a stimulus file for an interoral cannula might be: stimid < tab > substance1 < tab > substance1_concentration < newline > 1 < tab > Sodium chloride < tab > 30e-3 < newline > 2 < tab > Sodium chloride < tab > 300e-3 < newline > 3 < tab > Quinine < tab > 30e-6 < newline > 4 < tab > Quinine < tab > 300e-6 < newline > This function can be overridden in more specialized stimulus classes . Help for ndi . setup . daq . metadatareader . AngelucciStims / readmetadata is inherited from superclass NDI . DAQ . METADATAREADER readmetadatafromfile - read in metadata from the file that is identified PARAMETERS = READMETADATAFROMFILE ( NDI_DAQMETADATAREADER_ANGELUCCI_STIMS_OBJ , FILE ) Given a file that matches the metadata search criteria for an NDI_DAQMETADATAREADER_ANGELUCCI_STIMS document , this function loads in the metadata . searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQMETADATAREADER_OBJ ) Creates a search query for the ndi . daq . metadatareader object . Help for ndi . setup . daq . metadatareader . AngelucciStims / searchquery is inherited from superclass NDI . DAQ . METADATAREADER","title":"ndi.setup.daq.metadatareader.AngelucciStims"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/AngelucciStims.m/#class-ndisetupdaqmetadatareaderangeluccistims","text":"NDI_DAQMETADATAREADER_ANGELUCCISTIMS - a class for reading stims from Angelucci lab example data","title":"CLASS ndi.setup.daq.metadatareader.AngelucciStims"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/AngelucciStims.m/#superclasses","text":"ndi.daq.metadatareader , ndi.ido , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/AngelucciStims.m/#properties","text":"Property Description tab_separated_file_parameter identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/AngelucciStims.m/#methods","text":"Method Description AngelucciStims Create a new multifunction DAQ object eq are 2 ndi.daq.metadatareader objects equal? id return the identifier of an ndi.ido object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) readmetadatafromfile read in metadata from the file that is identified searchquery create a search for this ndi.daq.reader object","title":"Methods"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/AngelucciStims.m/#methods-help","text":"AngelucciStims - Create a new multifunction DAQ object D = NDI_DAQMETADATAREADER_ANGELUCCI_STIMS () or D = ndi . daq . metadatareader ( STIMDATA_MAT_FILE ) Creates a new ndi . daq . metadatareader object . If TSVFILE_REGEXPRESSION is given , it indicates a regular expression to use to search EPOCHFILES for a tab - separated - value text file that describes stimulus parameters . eq - are 2 ndi.daq.metadatareader objects equal? TF = EQ ( NDI_DAQMETADATAREADER_OBJ_A , NDI_DAQMETADATAREADER_OBJ_B ) TF is 1 if the two objects are of the same class and have the same properties . TF is 0 otherwise . Help for ndi . setup . daq . metadatareader . AngelucciStims / eq is inherited from superclass NDI . DAQ . METADATAREADER id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . setup . daq . metadatareader . AngelucciStims / id is inherited from superclass NDI . IDO ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . setup . daq . metadatareader . AngelucciStims . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.metadatareader object DOC = NEWDOCUMENT ( ndi . daq . metadatareader OBJ ) Creates an ndi . document object DOC that represents the ndi . daq . reader object . Help for ndi . setup . daq . metadatareader . AngelucciStims / newdocument is inherited from superclass NDI . DAQ . METADATAREADER readmetadata - PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES) Returns the parameters ( cell array of structures ) associated with the stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES . If the property ' tab_separated_file_parameter ' is not empty , then EPOCHFILES will be searched for files that match the regular expression in ' tab_separated_file_parameter '. The tab - separated - value file should have the form: STIMID < tab > PARAMETER1 < tab > PARAMETER2 < tab > PARAMETER3 ( etc ) < newline > 1 < tab > VALUE1 < tab > VALUE2 < tab > VALUE3 ( etc ) < newline > 2 < tab > VALUE1 < tab > VALUE2 < tab > VALUE3 ( etc ) < newline > ( etc ) For example , a stimulus file for an interoral cannula might be: stimid < tab > substance1 < tab > substance1_concentration < newline > 1 < tab > Sodium chloride < tab > 30e-3 < newline > 2 < tab > Sodium chloride < tab > 300e-3 < newline > 3 < tab > Quinine < tab > 30e-6 < newline > 4 < tab > Quinine < tab > 300e-6 < newline > This function can be overridden in more specialized stimulus classes . Help for ndi . setup . daq . metadatareader . AngelucciStims / readmetadata is inherited from superclass NDI . DAQ . METADATAREADER readmetadatafromfile - read in metadata from the file that is identified PARAMETERS = READMETADATAFROMFILE ( NDI_DAQMETADATAREADER_ANGELUCCI_STIMS_OBJ , FILE ) Given a file that matches the metadata search criteria for an NDI_DAQMETADATAREADER_ANGELUCCI_STIMS document , this function loads in the metadata . searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQMETADATAREADER_OBJ ) Creates a search query for the ndi . daq . metadatareader object . Help for ndi . setup . daq . metadatareader . AngelucciStims / searchquery is inherited from superclass NDI . DAQ . METADATAREADER","title":"Methods help"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/angelucci_visstim.m/","text":"CLASS ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim \u00b6 NDI_DAQREADER_MFDAQ_STIMULUS_ANGELUCCI_VISSTIM - Device object for Angelucci lab visual stimulus system This device reads the ' stimData.mat ' to obtain stimulus parameters and a * . ns4 file ( digital events on ai1 ) . Channel name : | Signal description : ----------------|------------------------------------------ m1 | stimulus on / off m2 | stimid Superclasses \u00b6 ndi.daq.reader.mfdaq.blackrock , ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , ndi.documentservice Properties \u00b6 Property Description identifier Methods \u00b6 Method Description angelucci_visstim Create a new multifunction DAQ object epochclock return the ndi.time.clocktype objects for an epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles return the file name that corresponds to the NEV/NSV files getchannelsepoch List the channels that are available on this device id return the identifier of an ndi.ido object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.reader object read_blackrock_headers read information from Blackrock Micro header files readchannels_epochsamples read the data based on specified channels readevents_epochsamples read events or markers of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL searchquery create a search for this ndi.daq.reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk Methods help \u00b6 angelucci_visstim - Create a new multifunction DAQ object D = NDI_DAQREADER_MFDAQ_STIMULUS_ANGELUCCI_VISSTIM2(NAME, THEFILENAVIGATOR, DAQREADER) Creates a new ndi.daq.system.mfdaq object with NAME, and FILENAVIGATOR. This is an abstract class that is overridden by specific devices. epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQREADER_MFDAQ_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . For the generic ndi . daq . reader . mfdaq , this returns a single clock type ' dev_local ' time ' ; See also : ndi . time . clocktype Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / epochclock is inherited from superclass NDI . DAQ . READER . MFDAQ eq - tests whether 2 ndi.daq.reader objects are equal B = EQ ( NDI_DAQREADER_OBJ1 , NDI_DAQREADER_OBJ2 ) Examines whether or not the ndi . daq . reader objects are equal . Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / eq is inherited from superclass NDI . DAQ . READER filenamefromepochfiles - return the file name that corresponds to the NEV/NSV files [ NEVFILES , NSVFILES ] = FILENAMEFROMEPOCHFILES ( FILENAME_ARRAY ) Examines the list of filenames in FILENAME_ARRAY ( cell array of full path file strings ) and determines which ones have the extension ' .nev ' ( neuro event file ) and which have the extension ' .ns# ' , where # is a number , or the source data files . Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim . filenamefromepochfiles is inherited from superclass NDI . DAQ . READER . MFDAQ . BLACKROCK getchannelsepoch - List the channels that are available on this device CHANNELS = GETCHANNELSEPOCH(THEDEV, EPOCHFILES) This device produces the following channels in each epoch: Channel name: | Signal description: ----------------|------------------------------------------ mk1 | stimulus on/off mk2 | stimid id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / id is inherited from superclass NDI . IDO ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT ( NDI_DAQREADER_OBJ ) Creates an ndi . document object DOC that represents the ndi . daq . reader object . Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / newdocument is inherited from superclass NDI . DAQ . READER read_blackrock_headers - read information from Blackrock Micro header files [ NS_H , NEV_H , HEADERS ] = READ_BLACKROCK_HEADERS ( NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ , EPOCHFILES , [ CHANNELTYPE , CHANNELS ] ) Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / read_blackrock_headers is inherited from superclass NDI . DAQ . READER . MFDAQ . BLACKROCK readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , S0 , S1 ) CHANNELTYPE is the type of channel to read ( cell array of strings , one per channel ) CHANNEL is a vector of the channel numbers to read , beginning from 1 EPOCH is set of epoch files DATA is the channel data ( each column contains data from an indvidual channel ) Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / readchannels_epochsamples is inherited from superclass NDI . DAQ . READER . MFDAQ . BLACKROCK readevents_epochsamples - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES ( SELF , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) SELF is the NDI_DAQSYSTEM_MFDAQ_STIMULUS_ANGELUCCI_VISSTIM object . CHANNELTYPE is a cell array of strings describing the the type ( s ) of channel ( s ) to read ( ' event ' , ' marker ' , etc ) CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the cell array of file names associated with an epoch DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) . It must be a string ( not a cell array of strings ) . CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / readevents_epochsamples_native is inherited from superclass NDI . DAQ . READER . MFDAQ samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE ( DEV , EPOCHFILES , CHANNELTYPE , CHANNEL ) CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . SR is the list of sample rate from specified channels Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / samplerate is inherited from superclass NDI . DAQ . READER . MFDAQ . BLACKROCK searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQREADER_OBJ ) Creates a search query for the ndi . daq . reader object . Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / searchquery is inherited from superclass NDI . DAQ . READER t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCHFILES ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / t0_t1 is inherited from superclass NDI . DAQ . READER . MFDAQ . BLACKROCK verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ , EPOCHPROBEMAP , EPOCHFILES ) Examines the NDI_EPOCHPROBEMAP_DAQREADER EPOCHPROBEMAP and determines if it is valid for the given device with epoch files EPOCHFILES . See also : ndi . daq . reader , NDI_EPOCHPROBEMAP_DAQREADER Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / verifyepochprobemap is inherited from superclass NDI . DAQ . READER . MFDAQ . BLACKROCK","title":"ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/angelucci_visstim.m/#class-ndisetupdaqreadermfdaqstimulusangelucci_visstim","text":"NDI_DAQREADER_MFDAQ_STIMULUS_ANGELUCCI_VISSTIM - Device object for Angelucci lab visual stimulus system This device reads the ' stimData.mat ' to obtain stimulus parameters and a * . ns4 file ( digital events on ai1 ) . Channel name : | Signal description : ----------------|------------------------------------------ m1 | stimulus on / off m2 | stimid","title":"CLASS ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/angelucci_visstim.m/#superclasses","text":"ndi.daq.reader.mfdaq.blackrock , ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/angelucci_visstim.m/#properties","text":"Property Description identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/angelucci_visstim.m/#methods","text":"Method Description angelucci_visstim Create a new multifunction DAQ object epochclock return the ndi.time.clocktype objects for an epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles return the file name that corresponds to the NEV/NSV files getchannelsepoch List the channels that are available on this device id return the identifier of an ndi.ido object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.reader object read_blackrock_headers read information from Blackrock Micro header files readchannels_epochsamples read the data based on specified channels readevents_epochsamples read events or markers of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL searchquery create a search for this ndi.daq.reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk","title":"Methods"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/angelucci_visstim.m/#methods-help","text":"angelucci_visstim - Create a new multifunction DAQ object D = NDI_DAQREADER_MFDAQ_STIMULUS_ANGELUCCI_VISSTIM2(NAME, THEFILENAVIGATOR, DAQREADER) Creates a new ndi.daq.system.mfdaq object with NAME, and FILENAVIGATOR. This is an abstract class that is overridden by specific devices. epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQREADER_MFDAQ_OBJ , EPOCH_NUMBER ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . For the generic ndi . daq . reader . mfdaq , this returns a single clock type ' dev_local ' time ' ; See also : ndi . time . clocktype Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / epochclock is inherited from superclass NDI . DAQ . READER . MFDAQ eq - tests whether 2 ndi.daq.reader objects are equal B = EQ ( NDI_DAQREADER_OBJ1 , NDI_DAQREADER_OBJ2 ) Examines whether or not the ndi . daq . reader objects are equal . Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / eq is inherited from superclass NDI . DAQ . READER filenamefromepochfiles - return the file name that corresponds to the NEV/NSV files [ NEVFILES , NSVFILES ] = FILENAMEFROMEPOCHFILES ( FILENAME_ARRAY ) Examines the list of filenames in FILENAME_ARRAY ( cell array of full path file strings ) and determines which ones have the extension ' .nev ' ( neuro event file ) and which have the extension ' .ns# ' , where # is a number , or the source data files . Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim . filenamefromepochfiles is inherited from superclass NDI . DAQ . READER . MFDAQ . BLACKROCK getchannelsepoch - List the channels that are available on this device CHANNELS = GETCHANNELSEPOCH(THEDEV, EPOCHFILES) This device produces the following channels in each epoch: Channel name: | Signal description: ----------------|------------------------------------------ mk1 | stimulus on/off mk2 | stimid id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / id is inherited from superclass NDI . IDO ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT ( NDI_DAQREADER_OBJ ) Creates an ndi . document object DOC that represents the ndi . daq . reader object . Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / newdocument is inherited from superclass NDI . DAQ . READER read_blackrock_headers - read information from Blackrock Micro header files [ NS_H , NEV_H , HEADERS ] = READ_BLACKROCK_HEADERS ( NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ , EPOCHFILES , [ CHANNELTYPE , CHANNELS ] ) Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / read_blackrock_headers is inherited from superclass NDI . DAQ . READER . MFDAQ . BLACKROCK readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , S0 , S1 ) CHANNELTYPE is the type of channel to read ( cell array of strings , one per channel ) CHANNEL is a vector of the channel numbers to read , beginning from 1 EPOCH is set of epoch files DATA is the channel data ( each column contains data from an indvidual channel ) Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / readchannels_epochsamples is inherited from superclass NDI . DAQ . READER . MFDAQ . BLACKROCK readevents_epochsamples - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES ( SELF , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) SELF is the NDI_DAQSYSTEM_MFDAQ_STIMULUS_ANGELUCCI_VISSTIM object . CHANNELTYPE is a cell array of strings describing the the type ( s ) of channel ( s ) to read ( ' event ' , ' marker ' , etc ) CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the cell array of file names associated with an epoch DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) . It must be a string ( not a cell array of strings ) . CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / readevents_epochsamples_native is inherited from superclass NDI . DAQ . READER . MFDAQ samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE ( DEV , EPOCHFILES , CHANNELTYPE , CHANNEL ) CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . SR is the list of sample rate from specified channels Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / samplerate is inherited from superclass NDI . DAQ . READER . MFDAQ . BLACKROCK searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQREADER_OBJ ) Creates a search query for the ndi . daq . reader object . Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / searchquery is inherited from superclass NDI . DAQ . READER t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCHFILES ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / t0_t1 is inherited from superclass NDI . DAQ . READER . MFDAQ . BLACKROCK verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ , EPOCHPROBEMAP , EPOCHFILES ) Examines the NDI_EPOCHPROBEMAP_DAQREADER EPOCHPROBEMAP and determines if it is valid for the given device with epoch files EPOCHFILES . See also : ndi . daq . reader , NDI_EPOCHPROBEMAP_DAQREADER Help for ndi . setup . daq . reader . mfdaq . stimulus . angelucci_visstim / verifyepochprobemap is inherited from superclass NDI . DAQ . READER . MFDAQ . BLACKROCK","title":"Methods help"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/vhlabvisspike2.m/","text":"CLASS ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2 \u00b6 NDI_DAQREADER_MFDAQ_STIMULUS_VHLABVISSPIKE2 - Device object for vhlab visual stimulus computer This device reads the ' stimtimes.txt ' , ' verticalblanking.txt ' , ' stims.mat ' , and ' spike2data.smr ' files that are present in directories where a VHLAB stimulus computer ( running NewStim / RunExperiment ) has produced triggers that have been acquired on a CED Spike2 system running the VHLAB Spike2 script . This device produces the following event channels in each epoch . They are not read from the CED SMR file but instead are read from the . txt files that are generated by the vhlab scripts . Channel name : | Signal description : ----------------|------------------------------------------ mk1 | stimulus on / off mk2 | stimid e1 | frame trigger e2 | vertical refresh trigger e3 | pretime trigger Superclasses \u00b6 ndi.daq.reader.mfdaq.cedspike2 , ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , ndi.documentservice Properties \u00b6 Property Description identifier Methods \u00b6 Method Description cedspike2filelist2smrfile Identify the .SMR file out of a file list cedspike2headertype2mfdaqchanneltype Convert between Intan headers and the ndi.daq.system.mfdaq channel types epochclock return the ndi.time.clocktype objects for an epoch eq tests whether 2 ndi.daq.reader objects are equal getchannelsepoch List the channels that are available on this device id return the identifier of an ndi.ido object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readevents_epochsamples read events or markers of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate searchquery create a search for this ndi.daq.reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk vhlabvisspike2 Create a new multifunction DAQ object Methods help \u00b6 cedspike2filelist2smrfile - Identify the .SMR file out of a file list FILENAME = CEDSPIKE2FILELIST2SMRFILE ( FILELIST ) Given a cell array of strings FILELIST with full - path file names , this function identifies the first file with an extension ' .smr ' ( case insensitive ) and returns the result in FILENAME ( full - path file name ) . Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 . cedspike2filelist2smrfile is inherited from superclass NDI . DAQ . READER . MFDAQ . CEDSPIKE2 cedspike2headertype2mfdaqchanneltype - Convert between Intan headers and the ndi.daq.system.mfdaq channel types CHANNELTYPE = CEDSPIKE2HEADERTYPE2MFDAQCHANNELTYPE ( CEDSPIKE2CHANNELTYPE ) Given an Intan header file type , returns the standard ndi . daq . system . mfdaq channel type Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 . cedspike2headertype2mfdaqchanneltype is inherited from superclass NDI . DAQ . READER . MFDAQ . CEDSPIKE2 epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQREADER_MFDAQ_STIMULUS_VHLABVISSPIKE2_OBJ , EPOCHFILES ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . This returns a single clock type ' dev_local ' time ' ; See also : ndi . time . clocktype eq - tests whether 2 ndi.daq.reader objects are equal B = EQ ( NDI_DAQREADER_OBJ1 , NDI_DAQREADER_OBJ2 ) Examines whether or not the ndi . daq . reader objects are equal . Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 / eq is inherited from superclass NDI . DAQ . READER getchannelsepoch - List the channels that are available on this device CHANNELS = GETCHANNELSEPOCH(THEDEV, EPOCHFILES) This device produces the following channels in each epoch: Channel name: | Signal description: ----------------|------------------------------------------ mk1 | stimulus on/off mk2 | stimid mk3 | stimulus open/close e1 | frame trigger e2 | vertical refresh trigger e3 | pretime trigger id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 / id is inherited from superclass NDI . IDO ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT ( NDI_DAQREADER_OBJ ) Creates an ndi . document object DOC that represents the ndi . daq . reader object . Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 / newdocument is inherited from superclass NDI . DAQ . READER readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , S0 , S1 ) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read , beginning from 1 EPOCHFILES is the cell array of full path filenames for this epoch DATA is the channel data ( each column contains data from an indvidual channel ) Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 / readchannels_epochsamples is inherited from superclass NDI . DAQ . READER . MFDAQ . CEDSPIKE2 readevents_epochsamples - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES ( SELF , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) SELF is the NDI_DAQSYSTEM_MFDAQ_STIMULUS_VHVISSPIKE2 object . CHANNELTYPE is a cell array of strings describing the the type ( s ) of channel ( s ) to read ( ' event ' , ' marker ' , etc ) CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the cell array of file names associated with an epoch DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) . It must be a string ( not a cell array of strings ) . CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 / readevents_epochsamples_native is inherited from superclass NDI . DAQ . READER . MFDAQ samplerate - ** SAMPLERATE - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE ( DEV , EPOCHFILES , CHANNELTYPE , CHANNEL ) SR is an array of sample rates from the specified channels so , these are all events , and it doesn ' t much matter, so let ' s make a guess that should apply well in all cases searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQREADER_OBJ ) Creates a search query for the ndi . daq . reader object . Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 / searchquery is inherited from superclass NDI . DAQ . READER t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ , EPOCHFILES ) Return the beginning ( t0 ) and end ( t1 ) times of the EPOCHFILES that define this epoch in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . See also : ndi . time . clocktype , EPOCHCLOCK Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 / t0_t1 is inherited from superclass NDI . DAQ . READER . MFDAQ . CEDSPIKE2 verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ , EPOCHPROBEMAP , EPOCHFILES ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER . For the abstract class ndi . daq . system , EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 / verifyepochprobemap is inherited from superclass NDI . DAQ . READER . MFDAQ . CEDSPIKE2 vhlabvisspike2 - Create a new multifunction DAQ object D = ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2(NAME, THEFILENAVIGATOR, DAQREADER) Creates a new ndi.daq.system.mfdaq object with NAME, and FILENAVIGATOR. This is an abstract class that is overridden by specific devices.","title":"ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/vhlabvisspike2.m/#class-ndisetupdaqreadermfdaqstimulusvhlabvisspike2","text":"NDI_DAQREADER_MFDAQ_STIMULUS_VHLABVISSPIKE2 - Device object for vhlab visual stimulus computer This device reads the ' stimtimes.txt ' , ' verticalblanking.txt ' , ' stims.mat ' , and ' spike2data.smr ' files that are present in directories where a VHLAB stimulus computer ( running NewStim / RunExperiment ) has produced triggers that have been acquired on a CED Spike2 system running the VHLAB Spike2 script . This device produces the following event channels in each epoch . They are not read from the CED SMR file but instead are read from the . txt files that are generated by the vhlab scripts . Channel name : | Signal description : ----------------|------------------------------------------ mk1 | stimulus on / off mk2 | stimid e1 | frame trigger e2 | vertical refresh trigger e3 | pretime trigger","title":"CLASS ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/vhlabvisspike2.m/#superclasses","text":"ndi.daq.reader.mfdaq.cedspike2 , ndi.daq.reader.mfdaq , ndi.daq.reader , ndi.ido , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/vhlabvisspike2.m/#properties","text":"Property Description identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/vhlabvisspike2.m/#methods","text":"Method Description cedspike2filelist2smrfile Identify the .SMR file out of a file list cedspike2headertype2mfdaqchanneltype Convert between Intan headers and the ndi.daq.system.mfdaq channel types epochclock return the ndi.time.clocktype objects for an epoch eq tests whether 2 ndi.daq.reader objects are equal getchannelsepoch List the channels that are available on this device id return the identifier of an ndi.ido object ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readevents_epochsamples read events or markers of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate searchquery create a search for this ndi.daq.reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk vhlabvisspike2 Create a new multifunction DAQ object","title":"Methods"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/vhlabvisspike2.m/#methods-help","text":"cedspike2filelist2smrfile - Identify the .SMR file out of a file list FILENAME = CEDSPIKE2FILELIST2SMRFILE ( FILELIST ) Given a cell array of strings FILELIST with full - path file names , this function identifies the first file with an extension ' .smr ' ( case insensitive ) and returns the result in FILENAME ( full - path file name ) . Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 . cedspike2filelist2smrfile is inherited from superclass NDI . DAQ . READER . MFDAQ . CEDSPIKE2 cedspike2headertype2mfdaqchanneltype - Convert between Intan headers and the ndi.daq.system.mfdaq channel types CHANNELTYPE = CEDSPIKE2HEADERTYPE2MFDAQCHANNELTYPE ( CEDSPIKE2CHANNELTYPE ) Given an Intan header file type , returns the standard ndi . daq . system . mfdaq channel type Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 . cedspike2headertype2mfdaqchanneltype is inherited from superclass NDI . DAQ . READER . MFDAQ . CEDSPIKE2 epochclock - return the ndi.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDI_DAQREADER_MFDAQ_STIMULUS_VHLABVISSPIKE2_OBJ , EPOCHFILES ) Return the clock types available for this epoch as a cell array of ndi . time . clocktype objects ( or sub - class members ) . This returns a single clock type ' dev_local ' time ' ; See also : ndi . time . clocktype eq - tests whether 2 ndi.daq.reader objects are equal B = EQ ( NDI_DAQREADER_OBJ1 , NDI_DAQREADER_OBJ2 ) Examines whether or not the ndi . daq . reader objects are equal . Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 / eq is inherited from superclass NDI . DAQ . READER getchannelsepoch - List the channels that are available on this device CHANNELS = GETCHANNELSEPOCH(THEDEV, EPOCHFILES) This device produces the following channels in each epoch: Channel name: | Signal description: ----------------|------------------------------------------ mk1 | stimulus on/off mk2 | stimid mk3 | stimulus open/close e1 | frame trigger e2 | vertical refresh trigger e3 | pretime trigger id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 / id is inherited from superclass NDI . IDO ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.daq.reader object DOC = NEWDOCUMENT ( NDI_DAQREADER_OBJ ) Creates an ndi . document object DOC that represents the ndi . daq . reader object . Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 / newdocument is inherited from superclass NDI . DAQ . READER readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , S0 , S1 ) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read , beginning from 1 EPOCHFILES is the cell array of full path filenames for this epoch DATA is the channel data ( each column contains data from an indvidual channel ) Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 / readchannels_epochsamples is inherited from superclass NDI . DAQ . READER . MFDAQ . CEDSPIKE2 readevents_epochsamples - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES ( SELF , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) SELF is the NDI_DAQSYSTEM_MFDAQ_STIMULUS_VHVISSPIKE2 object . CHANNELTYPE is a cell array of strings describing the the type ( s ) of channel ( s ) to read ( ' event ' , ' marker ' , etc ) CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the cell array of file names associated with an epoch DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( ' event ' , ' marker ' , etc ) . It must be a string ( not a cell array of strings ) . CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event. The second column indicates the marker code . In the case of ' events ' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 / readevents_epochsamples_native is inherited from superclass NDI . DAQ . READER . MFDAQ samplerate - ** SAMPLERATE - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE ( DEV , EPOCHFILES , CHANNELTYPE , CHANNEL ) SR is an array of sample rates from the specified channels so , these are all events , and it doesn ' t much matter, so let ' s make a guess that should apply well in all cases searchquery - create a search for this ndi.daq.reader object SQ = SEARCHQUERY ( NDI_DAQREADER_OBJ ) Creates a search query for the ndi . daq . reader object . Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 / searchquery is inherited from superclass NDI . DAQ . READER t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ , EPOCHFILES ) Return the beginning ( t0 ) and end ( t1 ) times of the EPOCHFILES that define this epoch in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . See also : ndi . time . clocktype , EPOCHCLOCK Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 / t0_t1 is inherited from superclass NDI . DAQ . READER . MFDAQ . CEDSPIKE2 verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk B = VERIFYEPOCHPROBEMAP ( NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ , EPOCHPROBEMAP , EPOCHFILES ) Examines the ndi . epoch . epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device epoch NUMBER . For the abstract class ndi . daq . system , EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an ndi . epoch . epochprobemap_daqsystem object . See also : ndi . daq . system , ndi . epoch . epochprobemap_daqsystem Help for ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 / verifyepochprobemap is inherited from superclass NDI . DAQ . READER . MFDAQ . CEDSPIKE2 vhlabvisspike2 - Create a new multifunction DAQ object D = ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2(NAME, THEFILENAVIGATOR, DAQREADER) Creates a new ndi.daq.system.mfdaq object with NAME, and FILENAVIGATOR. This is an abstract class that is overridden by specific devices.","title":"Methods help"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/angeluccilab.m/","text":"ndi.setup.daq.system.angeluccilab \u00b6 ANGELUCCILAB - initialize devices used by ANGELUCCILAB EXP = ndi . setup . daq . system . angeluccilab ( EXP , DEVNAME ) Creates devices that look for files in the ANGELUCCILAB standard recording scheme , where data from different epochs are organized into subdirectories ( using ndi . file . navigator . epochdir ) . DEVNAME should be the name a device in the table below . These devices are added to the ndi . session object EXP . If DEVNAME is a cell list of strings , then multiple items are added . If the function is called with no input arguments , then it returns a list of all valid device names . Each epoch is defined by the presence of a ' reference.txt ' file , as well as specific files that are needed by each device as described below . Devices created | Description ---------------------------------------------------------------- angelucci_blackrock5 | ndi . daq . system . mfdaq that looks for | files ' #.nev ' , ' #.ns5 ' , and ' stimData.mat ' angelucci_visstim | ndi . daq . system . mfdaq that looks for | files ' #.nev ' , ' #.ns4 ' , and ' stimData.mat ' See also : ndi . file . navigator . epochdir","title":"ndi.setup.daq.system.angeluccilab"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/angeluccilab.m/#ndisetupdaqsystemangeluccilab","text":"ANGELUCCILAB - initialize devices used by ANGELUCCILAB EXP = ndi . setup . daq . system . angeluccilab ( EXP , DEVNAME ) Creates devices that look for files in the ANGELUCCILAB standard recording scheme , where data from different epochs are organized into subdirectories ( using ndi . file . navigator . epochdir ) . DEVNAME should be the name a device in the table below . These devices are added to the ndi . session object EXP . If DEVNAME is a cell list of strings , then multiple items are added . If the function is called with no input arguments , then it returns a list of all valid device names . Each epoch is defined by the presence of a ' reference.txt ' file , as well as specific files that are needed by each device as described below . Devices created | Description ---------------------------------------------------------------- angelucci_blackrock5 | ndi . daq . system . mfdaq that looks for | files ' #.nev ' , ' #.ns5 ' , and ' stimData.mat ' angelucci_visstim | ndi . daq . system . mfdaq that looks for | files ' #.nev ' , ' #.ns4 ' , and ' stimData.mat ' See also : ndi . file . navigator . epochdir","title":"ndi.setup.daq.system.angeluccilab"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/dbkatzlab.m/","text":"ndi.setup.daq.system.dbkatzlab \u00b6 KATZLAB_MAKEDEV - initialize devices used by KATZLAB EXP = ndi . setups . katzlab_makedev ( EXP , DEVNAME ) Creates devices that look for files in the KATZLAB standard recording scheme , where data from different epochs are organized into subdirectories ( using ndi . file . navigator . epochdir ) . DEVNAME should be the name a device in the table below . These devices are added to the ndi . session object EXP . If DEVNAME is a cell list of strings , then multiple items are added . If the function is called with no input arguments , then it returns a list of all valid device names . Each epoch is defined by the presence specific files that are needed by each device as described below . Devices created | Description ---------------------------------------------------------------- narendra_intan | ndi_daqsystem_multichannel_mfdaq that looks for | files ' time.dat, ' info . rhd ' , and ' epochprobemap . txt ' See also : ndi . file . navigator . epochdir","title":"ndi.setup.daq.system.dbkatzlab"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/dbkatzlab.m/#ndisetupdaqsystemdbkatzlab","text":"KATZLAB_MAKEDEV - initialize devices used by KATZLAB EXP = ndi . setups . katzlab_makedev ( EXP , DEVNAME ) Creates devices that look for files in the KATZLAB standard recording scheme , where data from different epochs are organized into subdirectories ( using ndi . file . navigator . epochdir ) . DEVNAME should be the name a device in the table below . These devices are added to the ndi . session object EXP . If DEVNAME is a cell list of strings , then multiple items are added . If the function is called with no input arguments , then it returns a list of all valid device names . Each epoch is defined by the presence specific files that are needed by each device as described below . Devices created | Description ---------------------------------------------------------------- narendra_intan | ndi_daqsystem_multichannel_mfdaq that looks for | files ' time.dat, ' info . rhd ' , and ' epochprobemap . txt ' See also : ndi . file . navigator . epochdir","title":"ndi.setup.daq.system.dbkatzlab"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/marderlab.m/","text":"ndi.setup.daq.system.marderlab \u00b6 NDI_MARDERLAB_MAKEDEV - initialize devices used by MARDERLAB EXP = ndi . setups . marderlab . makedev ( EXP , DEVNAME ) Creates devices that look for files in the MARDERLAB standard recording scheme , where data from different epochs are organized into subdirectories ( using ndi . file . navigator . epochdir ). DEVNAME should be the name a device in the table below . These devices are added to the ndi . session object EXP . If DEVNAME is a cell list of strings , then multiple items are added . If the function is called with no input arguments , then it returns a list of all valid device names . Each epoch is defined by the presence specific files that are needed by each device as described below . Devices created | Description ---------------------------------------------------------------- marder_ced | ndi_daqsystem_multichannel_mfdaq that looks for | files '[something].smr' and | '[something].epochprobemap.txt' See also : ndi . file . navigator . epochdir","title":"ndi.setup.daq.system.marderlab"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/marderlab.m/#ndisetupdaqsystemmarderlab","text":"NDI_MARDERLAB_MAKEDEV - initialize devices used by MARDERLAB EXP = ndi . setups . marderlab . makedev ( EXP , DEVNAME ) Creates devices that look for files in the MARDERLAB standard recording scheme , where data from different epochs are organized into subdirectories ( using ndi . file . navigator . epochdir ). DEVNAME should be the name a device in the table below . These devices are added to the ndi . session object EXP . If DEVNAME is a cell list of strings , then multiple items are added . If the function is called with no input arguments , then it returns a list of all valid device names . Each epoch is defined by the presence specific files that are needed by each device as described below . Devices created | Description ---------------------------------------------------------------- marder_ced | ndi_daqsystem_multichannel_mfdaq that looks for | files '[something].smr' and | '[something].epochprobemap.txt' See also : ndi . file . navigator . epochdir","title":"ndi.setup.daq.system.marderlab"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/vhlab.m/","text":"ndi.setup.daq.system.vhlab \u00b6 ndi . setup . daq . system . vhlab - initialize daq systems used by VHLAB S = ndi . setup . daq . system . vhlab ( S , DEVNAME ) Creates daq systems that look for files in the VHLAB standard recording scheme , where data from different epochs are organized into subdirectories ( using ndi . file . navigator . epochdir ) . DEVNAME should be the name a daq systems in the table below . These daq systems are added to the ndi . session object S . If DEVNAME is a cell list of strings , then multiple items are added . If the function is called with no input arguments , then it returns a list of all valid device names . Each epoch is defined by the presence of a ' reference.txt ' file , as well as specific files that are needed by each device as described below . Devices created | Description |------------------|--------------------------------------------------| | vhintan | ndi . daq . system . mfdaq that looks for files | | | ' vhintan_channelgrouping.txt ' and ' *.rhd ' | | vhspike2 | ndi . daq . system . mfdaq that looks for files | | | ' vhspike2_channelgrouping.txt ' and ' *.smr ' | | vhvis_spike2 | ndi . daq . system . mfdaq . stimulus that looks for | | | files ' stimtimes.txt ' , ' verticalblanking.txt ' , | | | ' stims.mat ' , and ' spike2data.smr ' . | ----------------------------------------------------------------------- See also : ndi . file . navigator . epochdir","title":"ndi.setup.daq.system.vhlab"},{"location":"reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/vhlab.m/#ndisetupdaqsystemvhlab","text":"ndi . setup . daq . system . vhlab - initialize daq systems used by VHLAB S = ndi . setup . daq . system . vhlab ( S , DEVNAME ) Creates daq systems that look for files in the VHLAB standard recording scheme , where data from different epochs are organized into subdirectories ( using ndi . file . navigator . epochdir ) . DEVNAME should be the name a daq systems in the table below . These daq systems are added to the ndi . session object S . If DEVNAME is a cell list of strings , then multiple items are added . If the function is called with no input arguments , then it returns a list of all valid device names . Each epoch is defined by the presence of a ' reference.txt ' file , as well as specific files that are needed by each device as described below . Devices created | Description |------------------|--------------------------------------------------| | vhintan | ndi . daq . system . mfdaq that looks for files | | | ' vhintan_channelgrouping.txt ' and ' *.rhd ' | | vhspike2 | ndi . daq . system . mfdaq that looks for files | | | ' vhspike2_channelgrouping.txt ' and ' *.smr ' | | vhvis_spike2 | ndi . daq . system . mfdaq . stimulus that looks for | | | files ' stimtimes.txt ' , ' verticalblanking.txt ' , | | | ' stims.mat ' , and ' spike2data.smr ' . | ----------------------------------------------------------------------- See also : ndi . file . navigator . epochdir","title":"ndi.setup.daq.system.vhlab"},{"location":"reference/%2Bndi/%2Bsetup/%2Bepoch/epochprobemap_daqsystem_vhlab.m/","text":"CLASS ndi.setup.epoch.epochprobemap_daqsystem_vhlab \u00b6 ndi . epoch . epochprobemap_daqsystem_vhlab - Create a new ndi . epoch . epochprobemap_daqsystem object derived from the vhlab device implementation MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI_EPOCHPROBEMAP_VHLAB ( NAME , REFERENCE , TYPE , DEVICESTRING , SUBJECTSTRING ) Creates a new ndi . epoch . epochprobemap_daqsystem with name NAME , reference REFERENCE , type TYPE , and devicestring DEVICESTRING . NAME can be any string that begins with a letter and contains no whitespace . It is CASE SENSITIVE . REFERENCE must be a non - negative scalar integer . TYPE is the type of recording . DEVICESTRING is a string that indicates the channels that were used to acquire this record . MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI_EPOCHPROBEMAP_VHLAB ( FILENAME ) Here , FILENAME is assumed to be a ( full path ) tab - delimitted text file in the style of ' vhintan_channelgrouping.txt ' ( see HELP VHINTAN_CHANNELGROUPING ) that has entries ' name<tab>ref<tab>channel_list<tab> ' . The device type of each channel is assumed to be ' n-trode ' , where n is set to be the number of channels in the channel_list for each name / ref pair . The NDI device name for this device must be ' vhintan ' ( VH Intan RHD device ) , ' vhlv ' ( VH Lab Labview custom acqusition code ) , ' vhspike2 ' , or ' vhwillow ' . The device name will be taken from the filename , following [ VHDEVICENAME ' _channelgrouping.txt ' ] Superclasses \u00b6 ndi.epoch.epochprobemap_daqsystem , ndi.epoch.epochprobemap Properties \u00b6 Property Description name reference type devicestring subjectstring Methods \u00b6 Method Description epochprobemap_daqsystem_vhlab Create a new ndi.epoch.epochprobemap_daqsystem object derived from the vhlab device implementation savetofile Write ndi.epoch.epochprobemap_daqsystem object array to disk Methods help \u00b6 epochprobemap_daqsystem_vhlab - Create a new ndi.epoch.epochprobemap_daqsystem object derived from the vhlab device implementation MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI_EPOCHPROBEMAP_VHLAB ( NAME , REFERENCE , TYPE , DEVICESTRING , SUBJECTSTRING ) Creates a new ndi . epoch . epochprobemap_daqsystem with name NAME , reference REFERENCE , type TYPE , and devicestring DEVICESTRING . NAME can be any string that begins with a letter and contains no whitespace . It is CASE SENSITIVE . REFERENCE must be a non - negative scalar integer . TYPE is the type of recording . DEVICESTRING is a string that indicates the channels that were used to acquire this record . MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI_EPOCHPROBEMAP_VHLAB ( FILENAME ) Here , FILENAME is assumed to be a ( full path ) tab - delimitted text file in the style of ' vhintan_channelgrouping.txt ' ( see HELP VHINTAN_CHANNELGROUPING ) that has entries ' name<tab>ref<tab>channel_list<tab> ' . The device type of each channel is assumed to be ' n-trode ' , where n is set to be the number of channels in the channel_list for each name / ref pair . The NDI device name for this device must be ' vhintan ' ( VH Intan RHD device ) , ' vhlv ' ( VH Lab Labview custom acqusition code ) , ' vhspike2 ' , or ' vhwillow ' . The device name will be taken from the filename , following [ VHDEVICENAME ' _channelgrouping.txt ' ] savetofile - Write ndi.epoch.epochprobemap_daqsystem object array to disk SAVETOFILE(OBJ, FILENAME) Writes the ndi.epoch.epochprobemap_daqsystem_vhlab object to disk in filename FILENAME (full path).","title":"ndi.setup.epoch.epochprobemap_daqsystem_vhlab"},{"location":"reference/%2Bndi/%2Bsetup/%2Bepoch/epochprobemap_daqsystem_vhlab.m/#class-ndisetupepochepochprobemap_daqsystem_vhlab","text":"ndi . epoch . epochprobemap_daqsystem_vhlab - Create a new ndi . epoch . epochprobemap_daqsystem object derived from the vhlab device implementation MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI_EPOCHPROBEMAP_VHLAB ( NAME , REFERENCE , TYPE , DEVICESTRING , SUBJECTSTRING ) Creates a new ndi . epoch . epochprobemap_daqsystem with name NAME , reference REFERENCE , type TYPE , and devicestring DEVICESTRING . NAME can be any string that begins with a letter and contains no whitespace . It is CASE SENSITIVE . REFERENCE must be a non - negative scalar integer . TYPE is the type of recording . DEVICESTRING is a string that indicates the channels that were used to acquire this record . MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI_EPOCHPROBEMAP_VHLAB ( FILENAME ) Here , FILENAME is assumed to be a ( full path ) tab - delimitted text file in the style of ' vhintan_channelgrouping.txt ' ( see HELP VHINTAN_CHANNELGROUPING ) that has entries ' name<tab>ref<tab>channel_list<tab> ' . The device type of each channel is assumed to be ' n-trode ' , where n is set to be the number of channels in the channel_list for each name / ref pair . The NDI device name for this device must be ' vhintan ' ( VH Intan RHD device ) , ' vhlv ' ( VH Lab Labview custom acqusition code ) , ' vhspike2 ' , or ' vhwillow ' . The device name will be taken from the filename , following [ VHDEVICENAME ' _channelgrouping.txt ' ]","title":"CLASS ndi.setup.epoch.epochprobemap_daqsystem_vhlab"},{"location":"reference/%2Bndi/%2Bsetup/%2Bepoch/epochprobemap_daqsystem_vhlab.m/#superclasses","text":"ndi.epoch.epochprobemap_daqsystem , ndi.epoch.epochprobemap","title":"Superclasses"},{"location":"reference/%2Bndi/%2Bsetup/%2Bepoch/epochprobemap_daqsystem_vhlab.m/#properties","text":"Property Description name reference type devicestring subjectstring","title":"Properties"},{"location":"reference/%2Bndi/%2Bsetup/%2Bepoch/epochprobemap_daqsystem_vhlab.m/#methods","text":"Method Description epochprobemap_daqsystem_vhlab Create a new ndi.epoch.epochprobemap_daqsystem object derived from the vhlab device implementation savetofile Write ndi.epoch.epochprobemap_daqsystem object array to disk","title":"Methods"},{"location":"reference/%2Bndi/%2Bsetup/%2Bepoch/epochprobemap_daqsystem_vhlab.m/#methods-help","text":"epochprobemap_daqsystem_vhlab - Create a new ndi.epoch.epochprobemap_daqsystem object derived from the vhlab device implementation MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI_EPOCHPROBEMAP_VHLAB ( NAME , REFERENCE , TYPE , DEVICESTRING , SUBJECTSTRING ) Creates a new ndi . epoch . epochprobemap_daqsystem with name NAME , reference REFERENCE , type TYPE , and devicestring DEVICESTRING . NAME can be any string that begins with a letter and contains no whitespace . It is CASE SENSITIVE . REFERENCE must be a non - negative scalar integer . TYPE is the type of recording . DEVICESTRING is a string that indicates the channels that were used to acquire this record . MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI_EPOCHPROBEMAP_VHLAB ( FILENAME ) Here , FILENAME is assumed to be a ( full path ) tab - delimitted text file in the style of ' vhintan_channelgrouping.txt ' ( see HELP VHINTAN_CHANNELGROUPING ) that has entries ' name<tab>ref<tab>channel_list<tab> ' . The device type of each channel is assumed to be ' n-trode ' , where n is set to be the number of channels in the channel_list for each name / ref pair . The NDI device name for this device must be ' vhintan ' ( VH Intan RHD device ) , ' vhlv ' ( VH Lab Labview custom acqusition code ) , ' vhspike2 ' , or ' vhwillow ' . The device name will be taken from the filename , following [ VHDEVICENAME ' _channelgrouping.txt ' ] savetofile - Write ndi.epoch.epochprobemap_daqsystem object array to disk SAVETOFILE(OBJ, FILENAME) Writes the ndi.epoch.epochprobemap_daqsystem_vhlab object to disk in filename FILENAME (full path).","title":"Methods help"},{"location":"reference/%2Bndi/%2Btest/cache.m/","text":"ndi.test.cache \u00b6 ndi.test.cache - test the ndi.cache object Adds several entries to ndi.cache objects to test the functions.","title":"ndi.test.cache"},{"location":"reference/%2Bndi/%2Btest/cache.m/#nditestcache","text":"ndi.test.cache - test the ndi.cache object Adds several entries to ndi.cache objects to test the functions.","title":"ndi.test.cache"},{"location":"reference/%2Bndi/%2Btest/%2Bapp/markgarbage.m/","text":"ndi.test.app.markgarbage \u00b6 ndi . test . app . markgarbage - Test the functionality of the app 'ndi.app.markgarbage' ndi . test . app . markgarbage Tests the ndi . app . markgarbage on example data in [ NDICOMMONPATH ]/ example_app_sessions / markgarbage_ex","title":"ndi.test.app.markgarbage"},{"location":"reference/%2Bndi/%2Btest/%2Bapp/markgarbage.m/#nditestappmarkgarbage","text":"ndi . test . app . markgarbage - Test the functionality of the app 'ndi.app.markgarbage' ndi . test . app . markgarbage Tests the ndi . app . markgarbage on example data in [ NDICOMMONPATH ]/ example_app_sessions / markgarbage_ex","title":"ndi.test.app.markgarbage"},{"location":"reference/%2Bndi/%2Btest/%2Bapp/spikeextractor.m/","text":"ndi.test.app.spikeextractor \u00b6 ndi . test . app . spikeextractor - Test the functionality of the apps 'ndi.app.spikeextractor' and 'ndi.app.spikesort' with example data Tests the ndi . app . spikeextractor on example data in [ NDICOMMONPATH ]/ example_app_sessions / exp_sg","title":"ndi.test.app.spikeextractor"},{"location":"reference/%2Bndi/%2Btest/%2Bapp/spikeextractor.m/#nditestappspikeextractor","text":"ndi . test . app . spikeextractor - Test the functionality of the apps 'ndi.app.spikeextractor' and 'ndi.app.spikesort' with example data Tests the ndi . app . spikeextractor on example data in [ NDICOMMONPATH ]/ example_app_sessions / exp_sg","title":"ndi.test.app.spikeextractor"},{"location":"reference/%2Bndi/%2Btest/%2Bdaq/blackrock.m/","text":"ndi.test.daq.blackrock \u00b6 ndi . test . daq . blackrock - Test the functionality of the Blackrock driver and a file tree with a flat organization ndi . test . daq . blackrock ( [ DIRNAME ] ) Given a directory with Blackrock data inside , this function loads the channel information and then plots some data from channel 1 , as an example of the Intan driver . If DIRNAME is not provided , the default directory [ NDIPATH ]/ example_sessions / exp_blackrock is used .","title":"ndi.test.daq.blackrock"},{"location":"reference/%2Bndi/%2Btest/%2Bdaq/blackrock.m/#nditestdaqblackrock","text":"ndi . test . daq . blackrock - Test the functionality of the Blackrock driver and a file tree with a flat organization ndi . test . daq . blackrock ( [ DIRNAME ] ) Given a directory with Blackrock data inside , this function loads the channel information and then plots some data from channel 1 , as an example of the Intan driver . If DIRNAME is not provided , the default directory [ NDIPATH ]/ example_sessions / exp_blackrock is used .","title":"ndi.test.daq.blackrock"},{"location":"reference/%2Bndi/%2Btest/%2Bdaq/build_intan_flat_exp.m/","text":"ndi.test.daq.build_intan_flat_exp \u00b6 BUILD_INTAN_FLAT_EXP - Create an Intan driver and save it to an session ndi . test . daq . build_intan_flat_exp ( [ DIRNAME ] ) Given a directory with RHD data inside , this function loads the channel information and then plots some data from channel 1 , as an example of the Intan driver . It also leaves the driver saved in the session record . If DIRNAME is not provided , the default directory [ NDIPATH ]/ example_sessions / exp1_eg_saved is used .","title":"ndi.test.daq.build_intan_flat_exp"},{"location":"reference/%2Bndi/%2Btest/%2Bdaq/build_intan_flat_exp.m/#nditestdaqbuild_intan_flat_exp","text":"BUILD_INTAN_FLAT_EXP - Create an Intan driver and save it to an session ndi . test . daq . build_intan_flat_exp ( [ DIRNAME ] ) Given a directory with RHD data inside , this function loads the channel information and then plots some data from channel 1 , as an example of the Intan driver . It also leaves the driver saved in the session record . If DIRNAME is not provided , the default directory [ NDIPATH ]/ example_sessions / exp1_eg_saved is used .","title":"ndi.test.daq.build_intan_flat_exp"},{"location":"reference/%2Bndi/%2Btest/%2Bdaq/intan_flat.m/","text":"ndi.test.daq.intan_flat \u00b6 ndi . test . daq . intan_flat - Test the functionality of the Intan driver and a file tree with a flat organization ndi . test . daq . intan_flat ( [ DIRNAME ] ) Given a directory with RHD data inside , this function loads the channel information and then plots some data from channel 1 , as an example of the Intan driver . If DIRNAME is not provided , the default directory [ NDIPATH ]/ example_sessions / exp1_eg is used .","title":"ndi.test.daq.intan_flat"},{"location":"reference/%2Bndi/%2Btest/%2Bdaq/intan_flat.m/#nditestdaqintan_flat","text":"ndi . test . daq . intan_flat - Test the functionality of the Intan driver and a file tree with a flat organization ndi . test . daq . intan_flat ( [ DIRNAME ] ) Given a directory with RHD data inside , this function loads the channel information and then plots some data from channel 1 , as an example of the Intan driver . If DIRNAME is not provided , the default directory [ NDIPATH ]/ example_sessions / exp1_eg is used .","title":"ndi.test.daq.intan_flat"},{"location":"reference/%2Bndi/%2Btest/%2Bdaq/intan_flat_metadata.m/","text":"ndi.test.daq.intan_flat_metadata \u00b6 intan_flat_metadata - Test the functionality of the Intan driver and a file tree with a flat organization ndi . test . daq . test_intan_flat_metadata ( [ DIRNAME ] ) Given a directory with RHD data inside , this function loads the channel information and then plots some data from channel 1 , as an example of the Intan driver . If DIRNAME is not provided , the default directory [ NDIPATH ]/ example_sessions / exp1_eg is used .","title":"ndi.test.daq.intan_flat_metadata"},{"location":"reference/%2Bndi/%2Btest/%2Bdaq/intan_flat_metadata.m/#nditestdaqintan_flat_metadata","text":"intan_flat_metadata - Test the functionality of the Intan driver and a file tree with a flat organization ndi . test . daq . test_intan_flat_metadata ( [ DIRNAME ] ) Given a directory with RHD data inside , this function loads the channel information and then plots some data from channel 1 , as an example of the Intan driver . If DIRNAME is not provided , the default directory [ NDIPATH ]/ example_sessions / exp1_eg is used .","title":"ndi.test.daq.intan_flat_metadata"},{"location":"reference/%2Bndi/%2Btest/%2Bdaq/intan_flat_saved.m/","text":"ndi.test.daq.intan_flat_saved \u00b6 NDI . TEST . DAQ . INTAN_FLAT_SAVED - Test the functionality of the Intan driver and a file tree with a flat organization ndi . test . daq . intan_flat_saved ( [ DIRNAME ] ) Given an session directory with an associated Intan driver , this function loads the channel information and then plots some data from channel 1 , as an example of the Intan driver . If DIRNAME is not provided , the default directory [ NDIPATH ]/ example_sessions / exp1_eg_saved is used .","title":"ndi.test.daq.intan_flat_saved"},{"location":"reference/%2Bndi/%2Btest/%2Bdaq/intan_flat_saved.m/#nditestdaqintan_flat_saved","text":"NDI . TEST . DAQ . INTAN_FLAT_SAVED - Test the functionality of the Intan driver and a file tree with a flat organization ndi . test . daq . intan_flat_saved ( [ DIRNAME ] ) Given an session directory with an associated Intan driver , this function loads the channel information and then plots some data from channel 1 , as an example of the Intan driver . If DIRNAME is not provided , the default directory [ NDIPATH ]/ example_sessions / exp1_eg_saved is used .","title":"ndi.test.daq.intan_flat_saved"},{"location":"reference/%2Bndi/%2Btest/%2Bdaq/sg_flat.m/","text":"ndi.test.daq.sg_flat \u00b6 ndi . test . daq . sg_flat - Test the functionality of the SpikeGadgets driver and a filenavigator with a flat organization ndi . test . daq . sg_flat ( [ DIRNAME ] ) Given a directory with . rec data inside , this function loads the first tetrode and plots the first second of data in all four channels . If DIRNAME is not provided , the default directory [ NDIPATH ]/ example_sessions / exp1_eg is used . Developer note : function can be expanded to take in a specific tetrode to plot from specific epoch n , along with sample0 and sample1 .","title":"ndi.test.daq.sg_flat"},{"location":"reference/%2Bndi/%2Btest/%2Bdaq/sg_flat.m/#nditestdaqsg_flat","text":"ndi . test . daq . sg_flat - Test the functionality of the SpikeGadgets driver and a filenavigator with a flat organization ndi . test . daq . sg_flat ( [ DIRNAME ] ) Given a directory with . rec data inside , this function loads the first tetrode and plots the first second of data in all four channels . If DIRNAME is not provided , the default directory [ NDIPATH ]/ example_sessions / exp1_eg is used . Developer note : function can be expanded to take in a specific tetrode to plot from specific epoch n , along with sample0 and sample1 .","title":"ndi.test.daq.sg_flat"},{"location":"reference/%2Bndi/%2Btest/%2Bdaq/test_ndi_device_image_tiffstack.m/","text":"ndi.test.daq.test_ndi_device_image_tiffstack \u00b6 UNTITLED5 Summary of this function goes here Detailed explanation goes here","title":"ndi.test.daq.test_ndi_device_image_tiffstack"},{"location":"reference/%2Bndi/%2Btest/%2Bdaq/test_ndi_device_image_tiffstack.m/#nditestdaqtest_ndi_device_image_tiffstack","text":"UNTITLED5 Summary of this function goes here Detailed explanation goes here","title":"ndi.test.daq.test_ndi_device_image_tiffstack"},{"location":"reference/%2Bndi/%2Btest/%2Bdaq/test_ndi_image_tiffstack_multipleepoch.m/","text":"ndi.test.daq.test_ndi_image_tiffstack_multipleepoch \u00b6 UNTITLED5 Summary of this function goes here Detailed explanation goes here","title":"ndi.test.daq.test_ndi_image_tiffstack_multipleepoch"},{"location":"reference/%2Bndi/%2Btest/%2Bdaq/test_ndi_image_tiffstack_multipleepoch.m/#nditestdaqtest_ndi_image_tiffstack_multipleepoch","text":"UNTITLED5 Summary of this function goes here Detailed explanation goes here","title":"ndi.test.daq.test_ndi_image_tiffstack_multipleepoch"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/test_ndi_document.m/","text":"ndi.test.database.test_ndi_document \u00b6 TEST_NDI_DOCUMENT - Test the functionality of the NDI_DOCUMENT object and the NDI_SESSION database ndi . test . document ( [ DIRNAME ] ) Given a directory , this function tries to create some NDI_VARIABLE objects in the session DATABASE . The test function removes them on completion . If DIRNAME is not provided , the default directory [ NDIEXAMPLEEXPERPATH/exp1_eg ] is used .","title":"ndi.test.database.test_ndi_document"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/test_ndi_document.m/#nditestdatabasetest_ndi_document","text":"TEST_NDI_DOCUMENT - Test the functionality of the NDI_DOCUMENT object and the NDI_SESSION database ndi . test . document ( [ DIRNAME ] ) Given a directory , this function tries to create some NDI_VARIABLE objects in the session DATABASE . The test function removes them on completion . If DIRNAME is not provided , the default directory [ NDIEXAMPLEEXPERPATH/exp1_eg ] is used .","title":"ndi.test.database.test_ndi_document"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/test_ndi_document_jsons.m/","text":"ndi.test.database.test_ndi_document_jsons \u00b6 TEST_NDI_DOCUMNET_JSONS - test validity of all NDI_DOCUMENT json definitions [ B , SUCCESSES , FAILURES ] = ndi . test . document_jsons ( GENERATE_ERROR ) Tries to make a blank ndi . document from all ndi . document JSON definitions . Returns a cell array of all JSON file names that were successfully created in SUCCESSES , and a cell array of JSON file names there unsuccessfully created in FAILURES . B is 1 if all ndi documents were created successfully . If GENERATE_ERROR is present and is 1 , then an error is generated if B is 0 .","title":"ndi.test.database.test_ndi_document_jsons"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/test_ndi_document_jsons.m/#nditestdatabasetest_ndi_document_jsons","text":"TEST_NDI_DOCUMNET_JSONS - test validity of all NDI_DOCUMENT json definitions [ B , SUCCESSES , FAILURES ] = ndi . test . document_jsons ( GENERATE_ERROR ) Tries to make a blank ndi . document from all ndi . document JSON definitions . Returns a cell array of all JSON file names that were successfully created in SUCCESSES , and a cell array of JSON file names there unsuccessfully created in FAILURES . B is 1 if all ndi documents were created successfully . If GENERATE_ERROR is present and is 1 , then an error is generated if B is 0 .","title":"ndi.test.database.test_ndi_document_jsons"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/test_ndi_validate.m/","text":"ndi.test.database.test_ndi_validate \u00b6 TEST_NDI_DOCUMENT - Test the functionality of the NDI_VALIDATE object ndi . test . document () Create a variety of mock ndi . document objects to test if the ndi . validate can correctly detect ndi . document object with invalid types based on its corresponding schema","title":"ndi.test.database.test_ndi_validate"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/test_ndi_validate.m/#nditestdatabasetest_ndi_validate","text":"TEST_NDI_DOCUMENT - Test the functionality of the NDI_VALIDATE object ndi . test . document () Create a variety of mock ndi . document objects to test if the ndi . validate can correctly detect ndi . document object with invalid types based on its corresponding schema","title":"ndi.test.database.test_ndi_validate"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/testpostgresdb.m/","text":"ndi.test.database.testpostgresdb \u00b6 ndi.test.database.testpostgresdb is a script.","title":"ndi.test.database.testpostgresdb"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/testpostgresdb.m/#nditestdatabasetestpostgresdb","text":"ndi.test.database.testpostgresdb is a script.","title":"ndi.test.database.testpostgresdb"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/testpostgresdb2.m/","text":"ndi.test.database.testpostgresdb2 \u00b6 ndi.test.database.testpostgresdb2 is a script.","title":"ndi.test.database.testpostgresdb2"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/testpostgresdb2.m/#nditestdatabasetestpostgresdb2","text":"ndi.test.database.testpostgresdb2 is a script.","title":"ndi.test.database.testpostgresdb2"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/testpostgresdbsearch.m/","text":"ndi.test.database.testpostgresdbsearch \u00b6 ndi.test.database.testpostgresdbsearch is a script.","title":"ndi.test.database.testpostgresdbsearch"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/testpostgresdbsearch.m/#nditestdatabasetestpostgresdbsearch","text":"ndi.test.database.testpostgresdbsearch is a script.","title":"ndi.test.database.testpostgresdbsearch"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_daq_documents.m/","text":"ndi.test.database.core.test_ndi_daq_documents \u00b6 TEST_NDI_DAQ_DOCUMENTS - Test the functionality of the storage of DAQ objects using NDI_DOCUMENT and the NDI_SESSION database ndi . test . daq . documents ( [ DIRNAME ] ) Given a directory , this function tries to create and test the following objects and subclasses : 1 ) ndi . file . navigator ( by calling test_ndi_filenavigator_document ) 2 ) ndi . daq . reader ( by calling test_ndi_daqreader_document ) 3 ) ndi . daq . system ( by calling test_ndi_daqsystem_document ) 4 ) ndi . time . syncrule ( by calling test_ndi_syncrule_document ) 5 ) ndi . time . syncgraph ( by calling test_ndi_syncgraph_document ) If DIRNAME is not provided , the default directory [ NDIEXAMPLEEXPERPATH/exp1_eg ] is used .","title":"ndi.test.database.core.test_ndi_daq_documents"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_daq_documents.m/#nditestdatabasecoretest_ndi_daq_documents","text":"TEST_NDI_DAQ_DOCUMENTS - Test the functionality of the storage of DAQ objects using NDI_DOCUMENT and the NDI_SESSION database ndi . test . daq . documents ( [ DIRNAME ] ) Given a directory , this function tries to create and test the following objects and subclasses : 1 ) ndi . file . navigator ( by calling test_ndi_filenavigator_document ) 2 ) ndi . daq . reader ( by calling test_ndi_daqreader_document ) 3 ) ndi . daq . system ( by calling test_ndi_daqsystem_document ) 4 ) ndi . time . syncrule ( by calling test_ndi_syncrule_document ) 5 ) ndi . time . syncgraph ( by calling test_ndi_syncgraph_document ) If DIRNAME is not provided , the default directory [ NDIEXAMPLEEXPERPATH/exp1_eg ] is used .","title":"ndi.test.database.core.test_ndi_daq_documents"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_daqreader_documents.m/","text":"ndi.test.database.core.test_ndi_daqreader_documents \u00b6 TEST_NDI_DAQREADER_DOCUMENTS - test creating database entries , searching , and building from documents ndi . test . daq . reader . documents ( DIRNAME ) Given a directory that corresponds to an session , this function tries to create the following objects : 1 ) ndi . daq . reader 2 ) ndi . daq . reader . mfdaq 3 ) ndi . daq . reader . mfdaq . cedspike2 4 ) ndi . daq . reader . mfdaq . intan 5 ) ndi . daq . reader . mfdaq . spikegadgets 6 ) ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 Then , the following tests actions are conducted for each document type : a ) Create a new database document b ) Add the database document to the database c ) Search for the database document d ) Create a new object based on the database entry , and test that it matches the original","title":"ndi.test.database.core.test_ndi_daqreader_documents"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_daqreader_documents.m/#nditestdatabasecoretest_ndi_daqreader_documents","text":"TEST_NDI_DAQREADER_DOCUMENTS - test creating database entries , searching , and building from documents ndi . test . daq . reader . documents ( DIRNAME ) Given a directory that corresponds to an session , this function tries to create the following objects : 1 ) ndi . daq . reader 2 ) ndi . daq . reader . mfdaq 3 ) ndi . daq . reader . mfdaq . cedspike2 4 ) ndi . daq . reader . mfdaq . intan 5 ) ndi . daq . reader . mfdaq . spikegadgets 6 ) ndi . setup . daq . reader . mfdaq . stimulus . vhlabvisspike2 Then , the following tests actions are conducted for each document type : a ) Create a new database document b ) Add the database document to the database c ) Search for the database document d ) Create a new object based on the database entry , and test that it matches the original","title":"ndi.test.database.core.test_ndi_daqreader_documents"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_daqsystem_documents.m/","text":"ndi.test.database.core.test_ndi_daqsystem_documents \u00b6 TEST_NDI_DAQSYSTEM_DOCUMENTS - test creating database entries , searching , and building from documents ndi . test . daq . system . documents ( DIRNAME ) Given a directory that corresponds to an session , this function tries to create the following objects : 1 ) ndi . daq . system . mfdaq 2 ) ndi_daqsystem_mfdaq_stimulus Then , the following tests actions are conducted for each document type : a ) Create a new database document b ) Add the database document to the database c ) Search for the database document d ) Create a new object based on the database entry , and test that it matches the original","title":"ndi.test.database.core.test_ndi_daqsystem_documents"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_daqsystem_documents.m/#nditestdatabasecoretest_ndi_daqsystem_documents","text":"TEST_NDI_DAQSYSTEM_DOCUMENTS - test creating database entries , searching , and building from documents ndi . test . daq . system . documents ( DIRNAME ) Given a directory that corresponds to an session , this function tries to create the following objects : 1 ) ndi . daq . system . mfdaq 2 ) ndi_daqsystem_mfdaq_stimulus Then , the following tests actions are conducted for each document type : a ) Create a new database document b ) Add the database document to the database c ) Search for the database document d ) Create a new object based on the database entry , and test that it matches the original","title":"ndi.test.database.core.test_ndi_daqsystem_documents"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_filenavigator_documents.m/","text":"ndi.test.database.core.test_ndi_filenavigator_documents \u00b6 TEST_NDI_FILENAVIGATOR_DOCUMENTS - test creating database entries , searching , and building from documents ndi . test . daq . filenavigator . documents ( DIRNAME ) Given a directory that corresponds to an session , this function tries to create an ndi . file . navigator object and an ndi . file . navigator . epochdir object and do the following : a ) Create a new database document b ) Add the database document to the database c ) Search for the database document d ) Create a new object based on the database entry , and test that it matches the original","title":"ndi.test.database.core.test_ndi_filenavigator_documents"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_filenavigator_documents.m/#nditestdatabasecoretest_ndi_filenavigator_documents","text":"TEST_NDI_FILENAVIGATOR_DOCUMENTS - test creating database entries , searching , and building from documents ndi . test . daq . filenavigator . documents ( DIRNAME ) Given a directory that corresponds to an session , this function tries to create an ndi . file . navigator object and an ndi . file . navigator . epochdir object and do the following : a ) Create a new database document b ) Add the database document to the database c ) Search for the database document d ) Create a new object based on the database entry , and test that it matches the original","title":"ndi.test.database.core.test_ndi_filenavigator_documents"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_syncgraph_documents.m/","text":"ndi.test.database.core.test_ndi_syncgraph_documents \u00b6 TEST_NDI_SYNCGRAPH_DOCUMENTS - test creating database entries , searching , and building from documents ndi . test . syncgraph . documents ( DIRNAME ) Given a directory that corresponds to an session , this function tries to create the following objects : 1 ) ndi . time . syncgraph Then , the following tests actions are conducted for each document type : a ) Create a new database document b ) Add the database document to the database c ) Search for the database document d ) Create a new object based on the database entry , and test that it matches the original","title":"ndi.test.database.core.test_ndi_syncgraph_documents"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_syncgraph_documents.m/#nditestdatabasecoretest_ndi_syncgraph_documents","text":"TEST_NDI_SYNCGRAPH_DOCUMENTS - test creating database entries , searching , and building from documents ndi . test . syncgraph . documents ( DIRNAME ) Given a directory that corresponds to an session , this function tries to create the following objects : 1 ) ndi . time . syncgraph Then , the following tests actions are conducted for each document type : a ) Create a new database document b ) Add the database document to the database c ) Search for the database document d ) Create a new object based on the database entry , and test that it matches the original","title":"ndi.test.database.core.test_ndi_syncgraph_documents"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_syncrule_documents.m/","text":"ndi.test.database.core.test_ndi_syncrule_documents \u00b6 TEST_NDI_SYNCRULE_DOCUMENTS - test creating database entries , searching , and building from documents ndi . test . syncrule . documents ( DIRNAME ) Given a directory that corresponds to an session , this function tries to create the following objects : 1 ) ndi . time . syncrule . filematch Then , the following tests actions are conducted for each document type : a ) Create a new database document b ) Add the database document to the database c ) Search for the database document d ) Create a new object based on the database entry , and test that it matches the original","title":"ndi.test.database.core.test_ndi_syncrule_documents"},{"location":"reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_syncrule_documents.m/#nditestdatabasecoretest_ndi_syncrule_documents","text":"TEST_NDI_SYNCRULE_DOCUMENTS - test creating database entries , searching , and building from documents ndi . test . syncrule . documents ( DIRNAME ) Given a directory that corresponds to an session , this function tries to create the following objects : 1 ) ndi . time . syncrule . filematch Then , the following tests actions are conducted for each document type : a ) Create a new database document b ) Add the database document to the database c ) Search for the database document d ) Create a new object based on the database entry , and test that it matches the original","title":"ndi.test.database.core.test_ndi_syncrule_documents"},{"location":"reference/%2Bndi/%2Btest/%2Bdebug/ndi_debug_database_stats.m/","text":"ndi.test.debug.ndi_debug_database_stats \u00b6 NDI_DEBUG_DATABASE_STATS - examine an NDI database to check for inconsistencies OUT = ndi . test . database . debug_stats ( E ) Return a bunch of documents from an NDI session E","title":"ndi.test.debug.ndi_debug_database_stats"},{"location":"reference/%2Bndi/%2Btest/%2Bdebug/ndi_debug_database_stats.m/#nditestdebugndi_debug_database_stats","text":"NDI_DEBUG_DATABASE_STATS - examine an NDI database to check for inconsistencies OUT = ndi . test . database . debug_stats ( E ) Return a bunch of documents from an NDI session E","title":"ndi.test.debug.ndi_debug_database_stats"},{"location":"reference/%2Bndi/%2Btest/%2Belement/test_ndi_element.m/","text":"ndi.test.element.test_ndi_element \u00b6 TEST_NDI_ELEMENT - Test the functionality of the NDI_ELEMENT object and the NDI_SESSION database ndi . test . element ( [ DIRNAME ] ) Given a directory , this function tries to create some NDI_VARIABLE objects in the session DATABASE . The test function removes them on completion . If DIRNAME is not provided , the default directory [ NDIEXAMPLEEXPERPATH/exp1_eg_saved ] is used .","title":"ndi.test.element.test_ndi_element"},{"location":"reference/%2Bndi/%2Btest/%2Belement/test_ndi_element.m/#nditestelementtest_ndi_element","text":"TEST_NDI_ELEMENT - Test the functionality of the NDI_ELEMENT object and the NDI_SESSION database ndi . test . element ( [ DIRNAME ] ) Given a directory , this function tries to create some NDI_VARIABLE objects in the session DATABASE . The test function removes them on completion . If DIRNAME is not provided , the default directory [ NDIEXAMPLEEXPERPATH/exp1_eg_saved ] is used .","title":"ndi.test.element.test_ndi_element"},{"location":"reference/%2Bndi/%2Btest/%2Bfilenavigator/test_ndi_filenavigator.m/","text":"ndi.test.filenavigator.test_ndi_filenavigator \u00b6 TEST_FILENAVIGATOR - A test function for the ndi_filenavigator class Creates an session based on a test directory in vhtools_mltbx_toolsbox . Then it finds the number of epochs and returns the files associated with epoch N = 2.","title":"ndi.test.filenavigator.test_ndi_filenavigator"},{"location":"reference/%2Bndi/%2Btest/%2Bfilenavigator/test_ndi_filenavigator.m/#nditestfilenavigatortest_ndi_filenavigator","text":"TEST_FILENAVIGATOR - A test function for the ndi_filenavigator class Creates an session based on a test directory in vhtools_mltbx_toolsbox . Then it finds the number of epochs and returns the files associated with epoch N = 2.","title":"ndi.test.filenavigator.test_ndi_filenavigator"},{"location":"reference/%2Bndi/%2Btest/%2Bfilenavigator/test_ndi_filenavigator_fileIDfunction.m/","text":"ndi.test.filenavigator.test_ndi_filenavigator_fileIDfunction \u00b6 function : Short description Extended description","title":"ndi.test.filenavigator.test_ndi_filenavigator_fileIDfunction"},{"location":"reference/%2Bndi/%2Btest/%2Bfilenavigator/test_ndi_filenavigator_fileIDfunction.m/#nditestfilenavigatortest_ndi_filenavigator_fileidfunction","text":"function : Short description Extended description","title":"ndi.test.filenavigator.test_ndi_filenavigator_fileIDfunction"},{"location":"reference/%2Bndi/%2Btest/%2Bprobe/test_ndi_probe.m/","text":"ndi.test.probe.test_ndi_probe \u00b6 TEST_NDI_PROBE - Test the functionality of NDI_PROBE ndi . test . probe ( [ DIRNAME ] ) Given an session directory with probes , this function plots some data from the first probe channel 1. If DIRNAME is not provided , the default directory [ NDIPATH/example_sessions/exp1_eg_saved ] is used .","title":"ndi.test.probe.test_ndi_probe"},{"location":"reference/%2Bndi/%2Btest/%2Bprobe/test_ndi_probe.m/#nditestprobetest_ndi_probe","text":"TEST_NDI_PROBE - Test the functionality of NDI_PROBE ndi . test . probe ( [ DIRNAME ] ) Given an session directory with probes , this function plots some data from the first probe channel 1. If DIRNAME is not provided , the default directory [ NDIPATH/example_sessions/exp1_eg_saved ] is used .","title":"ndi.test.probe.test_ndi_probe"},{"location":"reference/%2Bndi/%2Btest/%2Bsession/ndi_test_sessiontable.m/","text":"ndi.test.session.ndi_test_sessiontable \u00b6 NDI_TEST_SESSIONTABLE Test the ndi.session.sessiontable object","title":"ndi.test.session.ndi_test_sessiontable"},{"location":"reference/%2Bndi/%2Btest/%2Bsession/ndi_test_sessiontable.m/#nditestsessionndi_test_sessiontable","text":"NDI_TEST_SESSIONTABLE Test the ndi.session.sessiontable object","title":"ndi.test.session.ndi_test_sessiontable"},{"location":"reference/%2Bndi/%2Btest/%2Bsetup/angeluccilab.m/","text":"ndi.test.setup.angeluccilab \u00b6 ndi . test . setup . angeluccilab - test reading from Angelucci lab data E = ndi . test . setup . angeluccilab ( REF , DIRNAME ) Open a directory from test data provided by Angelucci lab Example : E = ndi . test . setup . angeluccilab ( '2017-09-11' , '/Volumes/van-hooser-lab/Projects/NDI/Datasets_to_Convert/Angelucci/2017-09-11' );","title":"ndi.test.setup.angeluccilab"},{"location":"reference/%2Bndi/%2Btest/%2Bsetup/angeluccilab.m/#nditestsetupangeluccilab","text":"ndi . test . setup . angeluccilab - test reading from Angelucci lab data E = ndi . test . setup . angeluccilab ( REF , DIRNAME ) Open a directory from test data provided by Angelucci lab Example : E = ndi . test . setup . angeluccilab ( '2017-09-11' , '/Volumes/van-hooser-lab/Projects/NDI/Datasets_to_Convert/Angelucci/2017-09-11' );","title":"ndi.test.setup.angeluccilab"},{"location":"reference/%2Bndi/%2Btest/%2Bsetup/dbkatzlab_narendra.m/","text":"ndi.test.setup.dbkatzlab_narendra \u00b6 NDI_KATZLAB_NARENDRA_TEST - test reading from Murkherjee et al . 2019 E = ndi . test . setups . katzlab . narendra_test ( REF , DIRNAME ) Open a directory from Murkherjee et al . ( 2019 , Don Katz lab ) Example : E = ndi . test . setup . dbkatzlab_narendra ( '/Volumes/van-hooser-lab/Projects/NDI/Datasets_to_Convert/Katz/NM43_Raw' );","title":"ndi.test.setup.dbkatzlab_narendra"},{"location":"reference/%2Bndi/%2Btest/%2Bsetup/dbkatzlab_narendra.m/#nditestsetupdbkatzlab_narendra","text":"NDI_KATZLAB_NARENDRA_TEST - test reading from Murkherjee et al . 2019 E = ndi . test . setups . katzlab . narendra_test ( REF , DIRNAME ) Open a directory from Murkherjee et al . ( 2019 , Don Katz lab ) Example : E = ndi . test . setup . dbkatzlab_narendra ( '/Volumes/van-hooser-lab/Projects/NDI/Datasets_to_Convert/Katz/NM43_Raw' );","title":"ndi.test.setup.dbkatzlab_narendra"},{"location":"reference/%2Bndi/%2Btest/%2Bsetup/marderlab_hamood.m/","text":"ndi.test.setup.marderlab_hamood \u00b6 ndi . test . setup . marderlab_hamood - test reading from Murkherjee et al . 2019 E = ndi . test . setup . marderlab_hamood ( REF , DIRNAME ) Open a directory from Hamood et al . ( 2015 , Eve Marder lab ) Example : E = ndi . test . setups . marderlab_hamood ( '811_05' , '/Volumes/van-hooser-lab/Projects/NDI/Datasets_to_Convert/Marder/Data/811/811_05' );","title":"ndi.test.setup.marderlab_hamood"},{"location":"reference/%2Bndi/%2Btest/%2Bsetup/marderlab_hamood.m/#nditestsetupmarderlab_hamood","text":"ndi . test . setup . marderlab_hamood - test reading from Murkherjee et al . 2019 E = ndi . test . setup . marderlab_hamood ( REF , DIRNAME ) Open a directory from Hamood et al . ( 2015 , Eve Marder lab ) Example : E = ndi . test . setups . marderlab_hamood ( '811_05' , '/Volumes/van-hooser-lab/Projects/NDI/Datasets_to_Convert/Marder/Data/811/811_05' );","title":"ndi.test.setup.marderlab_hamood"},{"location":"reference/%2Bndi/%2Btest/%2Btestsuite/ndi_testsuite.m/","text":"ndi.test.testsuite.ndi_testsuite \u00b6 NDI_TESTSUITE - run a suite of tests OUTPUT = ndi . test . testsuite Loads a set of test suite instructions in the file 'ndi_testsuite_list.txt' . This file is a tab - delimited table that can be loaded with vlt . file . loadStructArray with fields Field name | Description -------------------------------------------------------------------------- code | The code to be run ( as a Matlab evaluation ) runit | Should we run it ? 0 / 1 comment | A comment string describing the test OUTPUT is a structure of outcomes . It includes the following fields : Field name | Descriptopn -------------------------------------------------------------------------- outcome | Success is 1 , failure is 0. - 1 means it was not run . errormsg | Any error message","title":"ndi.test.testsuite.ndi_testsuite"},{"location":"reference/%2Bndi/%2Btest/%2Btestsuite/ndi_testsuite.m/#nditesttestsuitendi_testsuite","text":"NDI_TESTSUITE - run a suite of tests OUTPUT = ndi . test . testsuite Loads a set of test suite instructions in the file 'ndi_testsuite_list.txt' . This file is a tab - delimited table that can be loaded with vlt . file . loadStructArray with fields Field name | Description -------------------------------------------------------------------------- code | The code to be run ( as a Matlab evaluation ) runit | Should we run it ? 0 / 1 comment | A comment string describing the test OUTPUT is a structure of outcomes . It includes the following fields : Field name | Descriptopn -------------------------------------------------------------------------- outcome | Success is 1 , failure is 0. - 1 means it was not run . errormsg | Any error message","title":"ndi.test.testsuite.ndi_testsuite"},{"location":"reference/%2Bndi/%2Btest/%2Btime/filefind.m/","text":"ndi.test.time.filefind \u00b6 at present, this is not a user-accessible test function","title":"ndi.test.time.filefind"},{"location":"reference/%2Bndi/%2Btest/%2Btime/filefind.m/#nditesttimefilefind","text":"at present, this is not a user-accessible test function","title":"ndi.test.time.filefind"},{"location":"reference/%2Bndi/%2Btime/clocktype.m/","text":"CLASS ndi.time.clocktype \u00b6 NDI_CLOCKTYPE - a class for specifying a clock type in the NDI framework Superclasses \u00b6 none Properties \u00b6 Property Description type the ndi_clock type; in this class, acceptable values are 'UTC', 'exp_global_time', and 'no_time' Methods \u00b6 Method Description clocktype Creates a new ndi.time.clocktype object epochgraph_edge provide epochgraph edge based purely on clock type eq are two ndi.time.clocktype objects equal? ndi_clocktype2char produce the NDI_CLOCKTOP's type as a string ne are two ndi.time.clocktype objects not equal? needsepoch does this clocktype need an epoch for full description? setclocktype Set the type of an ndi.time.clocktype Methods help \u00b6 clocktype - Creates a new ndi.time.clocktype object OBJ = ndi.time.clocktype(TYPE) Creates a new ndi.time.clocktype object. TYPE can be any of the following strings (with description): TYPE string | Description ------------------------------------------------------------------------------ 'utc' | Universal coordinated time (within 0.1ms) 'approx_utc' | Universal coordinated time (within 5 seconds) 'exp_global_time' | Experiment global time (within 0.1ms) 'approx_exp_global_time' | Experiment global time (within 5s) 'dev_global_time' | A device keeps its own global time (within 0.1ms) | (that is, it knows its own clock across recording epochs) 'approx_dev_global_time' | A device keeps its own global time (within 5 s) | (that is, it knows its own clock across recording epochs) 'dev_local_time' | A device keeps its own local time only within epochs 'no_time' | No timing information 'inherited' | The timing information is inherited from another device. epochgraph_edge - provide epochgraph edge based purely on clock type [ COST , MAPPING ] = EPOCHGRAPH_EDGE ( NDI_CLOCKTYPE_A , NDI_CLOCKTYPE_B ) Returns the COST and ndi . time . timemapping object MAPPING that describes the automatic mapping between epochs that have clock types NDI_CLOCKTYPE_A and NDI_CLOCKTYPE_B . The following NDI_CLOCKTYPES , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' Otherwise , COST is Inf and MAPPING is empty . eq - are two ndi.time.clocktype objects equal? B = EQ ( NDS_CLOCK_OBJ_A , NDI_CLOCKTYPE_OBJ_B ) Compares two NDI_CLOCKTYPE_objects and returns 1 if they refer to the same clock type . ndi_clocktype2char - produce the NDI_CLOCKTOP's type as a string STR = NDI_CLOCKTYPE2CHAR ( NDI_CLOCKTYPE_OBJ ) Return a string STR equal to the ndi . time . clocktype object ' s type parameter. ne - are two ndi.time.clocktype objects not equal? B = EQ ( NDS_CLOCK_OBJ_A , NDI_CLOCKTYPE_OBJ_B ) Compares two NDI_CLOCKTYPE_objects and returns 0 if they refer to the same clock type . needsepoch - does this clocktype need an epoch for full description? B = NEEDSEPOCH ( NDI_CLOCKTYPE_OBJ ) Does this ndi . time . clocktype object need an epoch in order to specify time ? Returns 1 for ' dev_local_time ' , 0 otherwise . setclocktype - Set the type of an ndi.time.clocktype NDI_CLOCKTYPE_OBJ = SETCLOCKTYPE ( NDI_CLOCKTYPE_OBJ , TYPE ) Sets the TYPE property of an ndi . time . clocktype object NDI_CLOCKTYPE_OBJ . Valid values for the TYPE string are as follows : TYPE string | Description ------------------------------------------------------------------------------ ' utc ' | Universal coordinated time ( within 0 . 1 ms ) ' approx_utc ' | Universal coordinated time ( within 5 seconds ) ' exp_global_time ' | Experiment global time ( within 0 . 1 ms ) ' approx_exp_global_time ' | Experiment global time ( within 5 s ) ' dev_global_time ' | A device keeps its own global time ( within 0 . 1 ms ) | ( that is , it knows its own clock across recording epochs ) ' approx_dev_global_time ' | A device keeps its own global time ( within 5 s ) | ( that is , it knows its own clock across recording epochs ) ' dev_local_time ' | A device keeps its own local time only within epochs ' no_time ' | No timing information ' inherited ' | The timing information is inherited from another device .","title":"ndi.time.clocktype"},{"location":"reference/%2Bndi/%2Btime/clocktype.m/#class-nditimeclocktype","text":"NDI_CLOCKTYPE - a class for specifying a clock type in the NDI framework","title":"CLASS ndi.time.clocktype"},{"location":"reference/%2Bndi/%2Btime/clocktype.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndi/%2Btime/clocktype.m/#properties","text":"Property Description type the ndi_clock type; in this class, acceptable values are 'UTC', 'exp_global_time', and 'no_time'","title":"Properties"},{"location":"reference/%2Bndi/%2Btime/clocktype.m/#methods","text":"Method Description clocktype Creates a new ndi.time.clocktype object epochgraph_edge provide epochgraph edge based purely on clock type eq are two ndi.time.clocktype objects equal? ndi_clocktype2char produce the NDI_CLOCKTOP's type as a string ne are two ndi.time.clocktype objects not equal? needsepoch does this clocktype need an epoch for full description? setclocktype Set the type of an ndi.time.clocktype","title":"Methods"},{"location":"reference/%2Bndi/%2Btime/clocktype.m/#methods-help","text":"clocktype - Creates a new ndi.time.clocktype object OBJ = ndi.time.clocktype(TYPE) Creates a new ndi.time.clocktype object. TYPE can be any of the following strings (with description): TYPE string | Description ------------------------------------------------------------------------------ 'utc' | Universal coordinated time (within 0.1ms) 'approx_utc' | Universal coordinated time (within 5 seconds) 'exp_global_time' | Experiment global time (within 0.1ms) 'approx_exp_global_time' | Experiment global time (within 5s) 'dev_global_time' | A device keeps its own global time (within 0.1ms) | (that is, it knows its own clock across recording epochs) 'approx_dev_global_time' | A device keeps its own global time (within 5 s) | (that is, it knows its own clock across recording epochs) 'dev_local_time' | A device keeps its own local time only within epochs 'no_time' | No timing information 'inherited' | The timing information is inherited from another device. epochgraph_edge - provide epochgraph edge based purely on clock type [ COST , MAPPING ] = EPOCHGRAPH_EDGE ( NDI_CLOCKTYPE_A , NDI_CLOCKTYPE_B ) Returns the COST and ndi . time . timemapping object MAPPING that describes the automatic mapping between epochs that have clock types NDI_CLOCKTYPE_A and NDI_CLOCKTYPE_B . The following NDI_CLOCKTYPES , if they exist , are linked across epochs with a cost of 1 and a linear mapping rule with shift 1 and offset 0 : 'utc' -> 'utc' 'utc' -> 'approx_utc' 'exp_global_time' -> 'exp_global_time' 'exp_global_time' -> 'approx_exp_global_time' 'dev_global_time' -> 'dev_global_time' 'dev_global_time' -> 'approx_dev_global_time' Otherwise , COST is Inf and MAPPING is empty . eq - are two ndi.time.clocktype objects equal? B = EQ ( NDS_CLOCK_OBJ_A , NDI_CLOCKTYPE_OBJ_B ) Compares two NDI_CLOCKTYPE_objects and returns 1 if they refer to the same clock type . ndi_clocktype2char - produce the NDI_CLOCKTOP's type as a string STR = NDI_CLOCKTYPE2CHAR ( NDI_CLOCKTYPE_OBJ ) Return a string STR equal to the ndi . time . clocktype object ' s type parameter. ne - are two ndi.time.clocktype objects not equal? B = EQ ( NDS_CLOCK_OBJ_A , NDI_CLOCKTYPE_OBJ_B ) Compares two NDI_CLOCKTYPE_objects and returns 0 if they refer to the same clock type . needsepoch - does this clocktype need an epoch for full description? B = NEEDSEPOCH ( NDI_CLOCKTYPE_OBJ ) Does this ndi . time . clocktype object need an epoch in order to specify time ? Returns 1 for ' dev_local_time ' , 0 otherwise . setclocktype - Set the type of an ndi.time.clocktype NDI_CLOCKTYPE_OBJ = SETCLOCKTYPE ( NDI_CLOCKTYPE_OBJ , TYPE ) Sets the TYPE property of an ndi . time . clocktype object NDI_CLOCKTYPE_OBJ . Valid values for the TYPE string are as follows : TYPE string | Description ------------------------------------------------------------------------------ ' utc ' | Universal coordinated time ( within 0 . 1 ms ) ' approx_utc ' | Universal coordinated time ( within 5 seconds ) ' exp_global_time ' | Experiment global time ( within 0 . 1 ms ) ' approx_exp_global_time ' | Experiment global time ( within 5 s ) ' dev_global_time ' | A device keeps its own global time ( within 0 . 1 ms ) | ( that is , it knows its own clock across recording epochs ) ' approx_dev_global_time ' | A device keeps its own global time ( within 5 s ) | ( that is , it knows its own clock across recording epochs ) ' dev_local_time ' | A device keeps its own local time only within epochs ' no_time ' | No timing information ' inherited ' | The timing information is inherited from another device .","title":"Methods help"},{"location":"reference/%2Bndi/%2Btime/syncgraph.m/","text":"CLASS ndi.time.syncgraph \u00b6 ndi.time.syncgraph - create a new ndi.time.syncgraph object NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION) Builds a new ndi.time.syncgraph object and sets its SESSION property to SESSION, which should be an ndi.session object. This function can be called in another form: NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION, NDI_DOCUMENT_OBJ) where NDI_DOCUMENT_OBJ is an ndi.document of class ndi_document_syncgraph. Superclasses \u00b6 ndi.ido Properties \u00b6 Property Description session ndi.session object rules cell array of ndi.time.syncrule objects to apply identifier Methods \u00b6 Method Description addepoch add an ndi.epoch.epochset to the graph addrule add an ndi.time.syncrule to an ndi.time.syncgraph object addunderlyingepochs add an ndi.epoch.epochset to the graph buildgraphinfo build graph info for an ndi.time.syncgraph object cached_graphinfo return the cached graph info of an ndi.time.syncgraph object eq are 2 ndi.time.syncgraph objects equal? getcache return the NDI_CACHE and key for ndi.time.syncgraph graphinfo return the graph information id return the identifier of an ndi.ido object load_all_syncgraph_docs load a syncgraph document and all of its syncrules ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.time.syncgraph object removeepoch remove an ndi.epoch.epochset from the graph removerule remove a given ndi.time.syncrule from an ndi.time.syncgraph object searchquery create a search for this ndi.time.syncgraph object set_cached_graphinfo SET_CACHED_GRAPHINFO syncgraph create a new ndi.time.syncgraph object time_convert convert time from one ndi.time.timereference to another Methods help \u00b6 addepoch - add an ndi.epoch.epochset to the graph NEW_GINFO = ADDEPOCH(NDI_SYNCGRAPH_OBJ, NDI_DAQSYSTEM_OBJ, GINFO) Adds an ndi.epoch.epochset to the ndi.time.syncgraph Note: this does not update the cache Step 1: make sure we have the right kind of input object addrule - add an ndi.time.syncrule to an ndi.time.syncgraph object NDI_SYNCGRAPH_OBJ = ADDRULE ( NDI_SYNCGRAPH_OBJ , NDI_SYNCRULE_OBJ ) Adds the ndi . time . syncrule object indicated as a rule for the ndi . time . syncgraph NDI_SYNCGRAPH_OBJ . If the ndi . time . syncrule is already there , then See also : ndi . time . syncgraph / REMOVERULE addunderlyingepochs - add an ndi.epoch.epochset to the graph NEW_GINFO = ADDUNDERLYINGEPOCHS(NDI_SYNCGRAPH_OBJ, NDI_EPOCHSET_OBJ, GINFO) Adds an ndi.epoch.epochset to the ndi.time.syncgraph Note: this DOES update the cache Step 1: make sure we have the right kind of input object buildgraphinfo - build graph info for an ndi.time.syncgraph object [ GINFO ] = BUILDGRAPHINFO ( NDI_SYNCGRAPH_OBJ ) Builds from scratch the syncgraph structure GINFO from all of the devices in the NDI_SYNCGRAPH_OBJ 's associated ' session ' property. The graph information GINFO is a structure with the following fields: Fieldname | Description --------------------------------------------------------------------- nodes | The epochnodes (see ndi.epoch.epochset/EPOCHNODE) G | The epoch node graph adjacency matrix. G(i,j) is the cost of | converting between node i and j. mapping | A cell matrix with ndi.time.timemapping objects that describes the | time mapping among nodes. mapping{i,j} is the mapping between node i and j. diG | The graph data structure in Matlab for G (a ' digraph ' ) cached_graphinfo - return the cached graph info of an ndi.time.syncgraph object [ GINFO , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_SYNCGRAPH_OBJ ) Return the cached version of the graph info , if it exists , along with its HASHVALUE ( a hash number generated from the graph info ) . If there is no cached version , GINFO and HASHVALUE will be empty . eq - are 2 ndi.time.syncgraph objects equal? B = EQ ( NDI_SYNCGRAPH_OBJ1 , NDI_SYNCHGRAPH_OBJ2 ) B is 1 if the ndi . time . syncgraph objects have equal sessions and if all syncrules are equal . getcache - return the NDI_CACHE and key for ndi.time.syncgraph [ CACHE , KEY ] = GETCACHE ( NDI_SYNCGRAPH_OBJ ) Returns the CACHE and KEY for the ndi . time . syncgraph object . The CACHE is returned from the associated session . The KEY is the string ' syncgraph_ ' followed by the object ' s id. See also : ndi . time . syncgraph , NDI_BASE graphinfo - return the graph information The graph information GINFO is a structure with the following fields: Fieldname | Description --------------------------------------------------------------------- nodes | The epochnodes (see ndi.epoch.epochset/EPOCHNODE) G | The epoch node graph adjacency matrix. G(i,j) is the cost of | converting between node i and j. mapping | A cell matrix with ndi.time.timemapping objects that describes the | time mapping among nodes. mapping{i,j} is the mapping between node i and j. id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . time . syncgraph / id is inherited from superclass NDI . IDO load_all_syncgraph_docs - load a syncgraph document and all of its syncrules [ SYNCGRAPH_DOC , SYNCRULE_DOCS ] = LOAD_ALL_SYNCGRAPH_DOCS ( NDI_SESSION_OBJ , ... SYNCGRAPH_DOC_ID ) Given an ndi . session object and the document identifier of an ndi . time . syncgraph object , this function loads the ndi . document associated with the SYNCGRAPH ( SYNCGRAPH_DOC ) and all of the documents of its SYNCRULES ( cell array of NDI_DOCUMENTS in SYNCRULES_DOC ) . ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . time . syncgraph . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.time.syncgraph object NDI_DOCUMENT_OBJ_SET = NEWDOCUMENT(NDI_SYNCGRAPH_OBJ) Creates an ndi.document object DOC that represents the ndi.time.syncrule object. removeepoch - remove an ndi.epoch.epochset from the graph GINFO = REMOVEEPOCHS(NDI_SYNCGRAPH_OBJ, NDI_DAQSYSTEM_OBJ, GINFO) Remove all epoch nodes from the graph that are contributed by NDI_DAQSYSTEM_OBJ Note: this does not update the cache removerule - remove a given ndi.time.syncrule from an ndi.time.syncgraph object NDI_SYNCGRAPH_OBJ = REMOVERULE(NDI_SYNCGRAPH_OBJ, INDEX) Removes the NDI_SYNCGRAPH_OBJ.rules entry at the INDEX (or indexes) indicated. searchquery - create a search for this ndi.time.syncgraph object SQ = SEARCHQUERY ( NDI_SYNCGRAPH_OBJ ) Creates a search query for the ndi . time . syncgraph object . set_cached_graphinfo - SET_CACHED_GRAPHINFO SET_CACHED_GRAPHINFO(NDI_SYNCGRAPH_OBJ, GINFO) Set the cached graph info. Opposite of CACHE_GRAPHINFO. See also: CACHE_GRAPHINFO syncgraph - create a new ndi.time.syncgraph object NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION) Builds a new ndi.time.syncgraph object and sets its SESSION property to SESSION, which should be an ndi.session object. This function can be called in another form: NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION, NDI_DOCUMENT_OBJ) where NDI_DOCUMENT_OBJ is an ndi.document of class ndi_document_syncgraph. time_convert - convert time from one ndi.time.timereference to another [ T_OUT , TIMEREF_OUT , MSG ] = TIME_CONVERT ( NDI_SYNCGRAPH_OBJ , TIMEREF_IN , T_IN , REFERENT_OUT , CLOCKTYPE_OUT ) Attempts to convert a time T_IN that is referred to by ndi . time . timereference object TIMEREF_IN to T_OUT that is referred to by the requested REFERENT_OUT object ( must be type ndi . epoch . epochset and NDI_BASE ) with the requested ndi . time . clocktype CLOCKTYPE_OUT . T_OUT is the output time with respect to the ndi . time . timereference TIMEREF_OUT that incorporates REFERENT_OUT and CLOCKTYPE_OUT with the appropriate epoch and time reference . If the conversion cannot be made , T_OUT is empty and MSG contains a text message describing why the conversion could not be made .","title":"ndi.time.syncgraph"},{"location":"reference/%2Bndi/%2Btime/syncgraph.m/#class-nditimesyncgraph","text":"ndi.time.syncgraph - create a new ndi.time.syncgraph object NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION) Builds a new ndi.time.syncgraph object and sets its SESSION property to SESSION, which should be an ndi.session object. This function can be called in another form: NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION, NDI_DOCUMENT_OBJ) where NDI_DOCUMENT_OBJ is an ndi.document of class ndi_document_syncgraph.","title":"CLASS ndi.time.syncgraph"},{"location":"reference/%2Bndi/%2Btime/syncgraph.m/#superclasses","text":"ndi.ido","title":"Superclasses"},{"location":"reference/%2Bndi/%2Btime/syncgraph.m/#properties","text":"Property Description session ndi.session object rules cell array of ndi.time.syncrule objects to apply identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Btime/syncgraph.m/#methods","text":"Method Description addepoch add an ndi.epoch.epochset to the graph addrule add an ndi.time.syncrule to an ndi.time.syncgraph object addunderlyingepochs add an ndi.epoch.epochset to the graph buildgraphinfo build graph info for an ndi.time.syncgraph object cached_graphinfo return the cached graph info of an ndi.time.syncgraph object eq are 2 ndi.time.syncgraph objects equal? getcache return the NDI_CACHE and key for ndi.time.syncgraph graphinfo return the graph information id return the identifier of an ndi.ido object load_all_syncgraph_docs load a syncgraph document and all of its syncrules ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.time.syncgraph object removeepoch remove an ndi.epoch.epochset from the graph removerule remove a given ndi.time.syncrule from an ndi.time.syncgraph object searchquery create a search for this ndi.time.syncgraph object set_cached_graphinfo SET_CACHED_GRAPHINFO syncgraph create a new ndi.time.syncgraph object time_convert convert time from one ndi.time.timereference to another","title":"Methods"},{"location":"reference/%2Bndi/%2Btime/syncgraph.m/#methods-help","text":"addepoch - add an ndi.epoch.epochset to the graph NEW_GINFO = ADDEPOCH(NDI_SYNCGRAPH_OBJ, NDI_DAQSYSTEM_OBJ, GINFO) Adds an ndi.epoch.epochset to the ndi.time.syncgraph Note: this does not update the cache Step 1: make sure we have the right kind of input object addrule - add an ndi.time.syncrule to an ndi.time.syncgraph object NDI_SYNCGRAPH_OBJ = ADDRULE ( NDI_SYNCGRAPH_OBJ , NDI_SYNCRULE_OBJ ) Adds the ndi . time . syncrule object indicated as a rule for the ndi . time . syncgraph NDI_SYNCGRAPH_OBJ . If the ndi . time . syncrule is already there , then See also : ndi . time . syncgraph / REMOVERULE addunderlyingepochs - add an ndi.epoch.epochset to the graph NEW_GINFO = ADDUNDERLYINGEPOCHS(NDI_SYNCGRAPH_OBJ, NDI_EPOCHSET_OBJ, GINFO) Adds an ndi.epoch.epochset to the ndi.time.syncgraph Note: this DOES update the cache Step 1: make sure we have the right kind of input object buildgraphinfo - build graph info for an ndi.time.syncgraph object [ GINFO ] = BUILDGRAPHINFO ( NDI_SYNCGRAPH_OBJ ) Builds from scratch the syncgraph structure GINFO from all of the devices in the NDI_SYNCGRAPH_OBJ 's associated ' session ' property. The graph information GINFO is a structure with the following fields: Fieldname | Description --------------------------------------------------------------------- nodes | The epochnodes (see ndi.epoch.epochset/EPOCHNODE) G | The epoch node graph adjacency matrix. G(i,j) is the cost of | converting between node i and j. mapping | A cell matrix with ndi.time.timemapping objects that describes the | time mapping among nodes. mapping{i,j} is the mapping between node i and j. diG | The graph data structure in Matlab for G (a ' digraph ' ) cached_graphinfo - return the cached graph info of an ndi.time.syncgraph object [ GINFO , HASHVALUE ] = CACHED_EPOCHTABLE ( NDI_SYNCGRAPH_OBJ ) Return the cached version of the graph info , if it exists , along with its HASHVALUE ( a hash number generated from the graph info ) . If there is no cached version , GINFO and HASHVALUE will be empty . eq - are 2 ndi.time.syncgraph objects equal? B = EQ ( NDI_SYNCGRAPH_OBJ1 , NDI_SYNCHGRAPH_OBJ2 ) B is 1 if the ndi . time . syncgraph objects have equal sessions and if all syncrules are equal . getcache - return the NDI_CACHE and key for ndi.time.syncgraph [ CACHE , KEY ] = GETCACHE ( NDI_SYNCGRAPH_OBJ ) Returns the CACHE and KEY for the ndi . time . syncgraph object . The CACHE is returned from the associated session . The KEY is the string ' syncgraph_ ' followed by the object ' s id. See also : ndi . time . syncgraph , NDI_BASE graphinfo - return the graph information The graph information GINFO is a structure with the following fields: Fieldname | Description --------------------------------------------------------------------- nodes | The epochnodes (see ndi.epoch.epochset/EPOCHNODE) G | The epoch node graph adjacency matrix. G(i,j) is the cost of | converting between node i and j. mapping | A cell matrix with ndi.time.timemapping objects that describes the | time mapping among nodes. mapping{i,j} is the mapping between node i and j. id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . time . syncgraph / id is inherited from superclass NDI . IDO load_all_syncgraph_docs - load a syncgraph document and all of its syncrules [ SYNCGRAPH_DOC , SYNCRULE_DOCS ] = LOAD_ALL_SYNCGRAPH_DOCS ( NDI_SESSION_OBJ , ... SYNCGRAPH_DOC_ID ) Given an ndi . session object and the document identifier of an ndi . time . syncgraph object , this function loads the ndi . document associated with the SYNCGRAPH ( SYNCGRAPH_DOC ) and all of the documents of its SYNCRULES ( cell array of NDI_DOCUMENTS in SYNCRULES_DOC ) . ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . time . syncgraph . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.time.syncgraph object NDI_DOCUMENT_OBJ_SET = NEWDOCUMENT(NDI_SYNCGRAPH_OBJ) Creates an ndi.document object DOC that represents the ndi.time.syncrule object. removeepoch - remove an ndi.epoch.epochset from the graph GINFO = REMOVEEPOCHS(NDI_SYNCGRAPH_OBJ, NDI_DAQSYSTEM_OBJ, GINFO) Remove all epoch nodes from the graph that are contributed by NDI_DAQSYSTEM_OBJ Note: this does not update the cache removerule - remove a given ndi.time.syncrule from an ndi.time.syncgraph object NDI_SYNCGRAPH_OBJ = REMOVERULE(NDI_SYNCGRAPH_OBJ, INDEX) Removes the NDI_SYNCGRAPH_OBJ.rules entry at the INDEX (or indexes) indicated. searchquery - create a search for this ndi.time.syncgraph object SQ = SEARCHQUERY ( NDI_SYNCGRAPH_OBJ ) Creates a search query for the ndi . time . syncgraph object . set_cached_graphinfo - SET_CACHED_GRAPHINFO SET_CACHED_GRAPHINFO(NDI_SYNCGRAPH_OBJ, GINFO) Set the cached graph info. Opposite of CACHE_GRAPHINFO. See also: CACHE_GRAPHINFO syncgraph - create a new ndi.time.syncgraph object NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION) Builds a new ndi.time.syncgraph object and sets its SESSION property to SESSION, which should be an ndi.session object. This function can be called in another form: NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION, NDI_DOCUMENT_OBJ) where NDI_DOCUMENT_OBJ is an ndi.document of class ndi_document_syncgraph. time_convert - convert time from one ndi.time.timereference to another [ T_OUT , TIMEREF_OUT , MSG ] = TIME_CONVERT ( NDI_SYNCGRAPH_OBJ , TIMEREF_IN , T_IN , REFERENT_OUT , CLOCKTYPE_OUT ) Attempts to convert a time T_IN that is referred to by ndi . time . timereference object TIMEREF_IN to T_OUT that is referred to by the requested REFERENT_OUT object ( must be type ndi . epoch . epochset and NDI_BASE ) with the requested ndi . time . clocktype CLOCKTYPE_OUT . T_OUT is the output time with respect to the ndi . time . timereference TIMEREF_OUT that incorporates REFERENT_OUT and CLOCKTYPE_OUT with the appropriate epoch and time reference . If the conversion cannot be made , T_OUT is empty and MSG contains a text message describing why the conversion could not be made .","title":"Methods help"},{"location":"reference/%2Bndi/%2Btime/syncrule.m/","text":"CLASS ndi.time.syncrule \u00b6 NDI_SYNCRULE_OBJ - create a new NDI_SYNCRULE for managing synchronization NDI_SYNCRULE_OBJ = ndi . time . syncrule ( ... ) or NDI_SYNCRULE_OBJ = ndi . time . syncrule ( PARAMETERS ) Creates a new ndi . time . syncrule object with the given PARAMETERS ( a structure ) . This is an abstract class , so PARAMETERS must be empty . Superclasses \u00b6 ndi.ido , ndi.documentservice Properties \u00b6 Property Description parameters identifier Methods \u00b6 Method Description apply apply an ndi.time.syncrule to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule eq are two ndi.time.syncrule objects equal? id return the identifier of an ndi.ido object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form syncrule create a new NDI_SYNCRULE for managing synchronization Methods help \u00b6 apply - apply an ndi.time.syncrule to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects [ COST , MAPPING ] = APPLY ( NDI_SYNCRULE_OBJ , EPOCHNODE_A , EPOCHNODE_B ) Given an ndi . time . syncrule object and two epochnodes returned from ndi . epoch . epochset / EPOCHNODES this function attempts to identify whether a time synchronization can be made across these epoch nodes . If so , a cost COST and an ndi . time . timemapping object MAPPING is returned . Otherwise , COST and MAPPING are empty . In the abstract class , COST and MAPPING are always empty . See also : ndi . epoch . epochset / EPOCHNODES eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule EC = ELIGIBLECLOCKS ( NDI_SYNCRULE_OBJ ) Returns a cell array of ndi . time . clocktype objects with types that can be processed by the ndi . time . syncrule . If EC is empty , then no information is conveyed about which ndi . time . clocktype objects is valid ( that is , it is not the case that the ndi . time . syncrule processes no types ; instead, it has no specific limits). In the abstract class , EC is empty ( {} ) . See also : ndi . time . syncrule / INELIGIBLECLOCKS eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule EES = ELIGIBLEEPOCHSETS ( NDI_SYNCRULE_OBJ ) Returns a cell array of valid ndi . epoch . epochset subclasses that the rule can process . If EES is empty , then no information is conveyed about which ndi . epoch . epochset subtypes can be processed by the ndi . time . syncrule . ( That is , it is not the case that the NDI_SYNCTABLE cannot use any classes . ) NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here . The abstract class ndi . time . syncrule always returns empty . See also : ndi . time . syncrule / INELIGIBLEEPOCHSETS eq - are two ndi.time.syncrule objects equal? B = EQ ( NDI_SYNCRULE_OBJ_A , NDI_SYNCRULE_OBJ_B ) Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal . Otherwise , 0 is returned . id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . time . syncrule / id is inherited from superclass NDI . IDO ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule IC = INELIGIBLECLOCKS ( NDI_SYNCRULE_OBJ ) Returns a cell array of ndi . time . clocktype objects with types that cannot be processed by the ndi . time . syncrule . If IC is empty , then no information is conveyed about which ndi . time . clocktype objects is valid ( that is , it is not the case that the ndi . time . syncrule cannot be used on any types ; instead, it has no specific limits ) . In the abstract class , IC is { ndi . time . clocktype ( ' no_time ' ) } . See also : ndi . time . syncrule / ELIGIBLECLOCKS ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule IES = INELIGIBLEEPOCHSETS ( NDI_SYNCRULE_OBJ ) Returns a cell array of ndi . epoch . epochset subclasses that the rule cannot process . If IES is empty , then no information is conveyed about which ndi . epoch . epochset subtypes cannot be processed by the ndi . time . syncrule . ( That is , it is not the case that the NDI_SYNCTABLE can use any class . ) NDI_EPOCHSETS that use the rule must not be members of the classes returned here , but may be descendents of those classes . The abstract class ndi . time . syncrule always returns empty . See also : ndi . time . syncrule / ELIGIBLEEPOCHSETS isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule [ B , MSG ] = ISVALIDPARAMETERS ( NDI_SYNCRULE_OBJ , PARAMETERS ) Returns 1 if PARAMETERS is a valid parameter structure for ndi . time . syncrule . Returns 0 otherwise . If there is an error , MSG describes the error . See also : ndi . time . syncrule / SETPARAMETERS ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . time . syncrule . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.time.syncrule object DOC = NEWDOCUMENT(NDI_SYNCRULE_OBJ) Creates an ndi.document object DOC that represents the ndi.time.syncrule object. searchquery - create a search for this ndi.time.syncrule object SQ = SEARCHQUERY ( NDI_SYNCRULE_OBJ ) Creates a search query for the ndi . time . syncgraph object . setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form NDI_SYNCRULE_OBJ = SETPARAMETERS ( NDI_SYNCRULE_OBJ , PARAMETERS ) Sets the ' parameters ' field of an ndi . time . syncrule object , while also checking that the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS . See also : ndi . time . syncrule / ISVALIDPARAMETERS syncrule - create a new NDI_SYNCRULE for managing synchronization NDI_SYNCRULE_OBJ = ndi.time.syncrule(...) or NDI_SYNCRULE_OBJ = ndi.time.syncrule(PARAMETERS) Creates a new ndi.time.syncrule object with the given PARAMETERS (a structure). This is an abstract class, so PARAMETERS must be empty.","title":"ndi.time.syncrule"},{"location":"reference/%2Bndi/%2Btime/syncrule.m/#class-nditimesyncrule","text":"NDI_SYNCRULE_OBJ - create a new NDI_SYNCRULE for managing synchronization NDI_SYNCRULE_OBJ = ndi . time . syncrule ( ... ) or NDI_SYNCRULE_OBJ = ndi . time . syncrule ( PARAMETERS ) Creates a new ndi . time . syncrule object with the given PARAMETERS ( a structure ) . This is an abstract class , so PARAMETERS must be empty .","title":"CLASS ndi.time.syncrule"},{"location":"reference/%2Bndi/%2Btime/syncrule.m/#superclasses","text":"ndi.ido , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Btime/syncrule.m/#properties","text":"Property Description parameters identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Btime/syncrule.m/#methods","text":"Method Description apply apply an ndi.time.syncrule to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule eq are two ndi.time.syncrule objects equal? id return the identifier of an ndi.ido object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form syncrule create a new NDI_SYNCRULE for managing synchronization","title":"Methods"},{"location":"reference/%2Bndi/%2Btime/syncrule.m/#methods-help","text":"apply - apply an ndi.time.syncrule to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects [ COST , MAPPING ] = APPLY ( NDI_SYNCRULE_OBJ , EPOCHNODE_A , EPOCHNODE_B ) Given an ndi . time . syncrule object and two epochnodes returned from ndi . epoch . epochset / EPOCHNODES this function attempts to identify whether a time synchronization can be made across these epoch nodes . If so , a cost COST and an ndi . time . timemapping object MAPPING is returned . Otherwise , COST and MAPPING are empty . In the abstract class , COST and MAPPING are always empty . See also : ndi . epoch . epochset / EPOCHNODES eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule EC = ELIGIBLECLOCKS ( NDI_SYNCRULE_OBJ ) Returns a cell array of ndi . time . clocktype objects with types that can be processed by the ndi . time . syncrule . If EC is empty , then no information is conveyed about which ndi . time . clocktype objects is valid ( that is , it is not the case that the ndi . time . syncrule processes no types ; instead, it has no specific limits). In the abstract class , EC is empty ( {} ) . See also : ndi . time . syncrule / INELIGIBLECLOCKS eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule EES = ELIGIBLEEPOCHSETS ( NDI_SYNCRULE_OBJ ) Returns a cell array of valid ndi . epoch . epochset subclasses that the rule can process . If EES is empty , then no information is conveyed about which ndi . epoch . epochset subtypes can be processed by the ndi . time . syncrule . ( That is , it is not the case that the NDI_SYNCTABLE cannot use any classes . ) NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here . The abstract class ndi . time . syncrule always returns empty . See also : ndi . time . syncrule / INELIGIBLEEPOCHSETS eq - are two ndi.time.syncrule objects equal? B = EQ ( NDI_SYNCRULE_OBJ_A , NDI_SYNCRULE_OBJ_B ) Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal . Otherwise , 0 is returned . id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . time . syncrule / id is inherited from superclass NDI . IDO ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule IC = INELIGIBLECLOCKS ( NDI_SYNCRULE_OBJ ) Returns a cell array of ndi . time . clocktype objects with types that cannot be processed by the ndi . time . syncrule . If IC is empty , then no information is conveyed about which ndi . time . clocktype objects is valid ( that is , it is not the case that the ndi . time . syncrule cannot be used on any types ; instead, it has no specific limits ) . In the abstract class , IC is { ndi . time . clocktype ( ' no_time ' ) } . See also : ndi . time . syncrule / ELIGIBLECLOCKS ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule IES = INELIGIBLEEPOCHSETS ( NDI_SYNCRULE_OBJ ) Returns a cell array of ndi . epoch . epochset subclasses that the rule cannot process . If IES is empty , then no information is conveyed about which ndi . epoch . epochset subtypes cannot be processed by the ndi . time . syncrule . ( That is , it is not the case that the NDI_SYNCTABLE can use any class . ) NDI_EPOCHSETS that use the rule must not be members of the classes returned here , but may be descendents of those classes . The abstract class ndi . time . syncrule always returns empty . See also : ndi . time . syncrule / ELIGIBLEEPOCHSETS isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule [ B , MSG ] = ISVALIDPARAMETERS ( NDI_SYNCRULE_OBJ , PARAMETERS ) Returns 1 if PARAMETERS is a valid parameter structure for ndi . time . syncrule . Returns 0 otherwise . If there is an error , MSG describes the error . See also : ndi . time . syncrule / SETPARAMETERS ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . time . syncrule . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.time.syncrule object DOC = NEWDOCUMENT(NDI_SYNCRULE_OBJ) Creates an ndi.document object DOC that represents the ndi.time.syncrule object. searchquery - create a search for this ndi.time.syncrule object SQ = SEARCHQUERY ( NDI_SYNCRULE_OBJ ) Creates a search query for the ndi . time . syncgraph object . setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form NDI_SYNCRULE_OBJ = SETPARAMETERS ( NDI_SYNCRULE_OBJ , PARAMETERS ) Sets the ' parameters ' field of an ndi . time . syncrule object , while also checking that the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS . See also : ndi . time . syncrule / ISVALIDPARAMETERS syncrule - create a new NDI_SYNCRULE for managing synchronization NDI_SYNCRULE_OBJ = ndi.time.syncrule(...) or NDI_SYNCRULE_OBJ = ndi.time.syncrule(PARAMETERS) Creates a new ndi.time.syncrule object with the given PARAMETERS (a structure). This is an abstract class, so PARAMETERS must be empty.","title":"Methods help"},{"location":"reference/%2Bndi/%2Btime/timemapping.m/","text":"CLASS ndi.time.timemapping \u00b6 NDI . TIME . TIMEMAPPING - class for managing mapping of time across epochs and devices Describes mapping from one time base to another . The base class , ndi . time . timemapping , provides polynomial mapping , although usually only linear mapping is used . The property MAPPING is a vector of length N + 1 that describes the coefficients of a polynomial such that : t_out = mapping ( 1 ) * t_in ^ N + mapping ( 2 ) * t_in ^ ( N -1 ) + ... mapping ( N ) * t_in + mapping ( N + 1 ) Usually , one specifies a linear relationship only , with MAPPING = [ scale shift ] so that t_out = scale * t_in + shift Superclasses \u00b6 none Properties \u00b6 Property Description mapping mapping parameters; in the ndi.time.timemapping base class, this is a polynomial (see help POLYVAL) Methods \u00b6 Method Description map perform a mapping from one time base to another timemapping ndi.time.timemapping Methods help \u00b6 map - perform a mapping from one time base to another T_OUT = MAP(NDI_TIMEMAPPING_OBJ, T_IN) Perform the mapping described by NDI_TIMEMAPPING_OBJ from one time base to another. In the base class ndi.time.timemapping, the mapping is a polynomial. timemapping - ndi.time.timemapping NDI_TIMEMAPPING_OBJ = ndi . time . timemapping () or NDI_TIMEMAPPING_OBJ = ndi . time . timemapping ( MAPPING ) Creates a new ndi . time . timemapping object . In this base class , the ndi . time . timemapping object specifies a polynomial mapping from one time base to another . If the function is called with no input arguments , then the trivial mapping MAPPING = [ 1 0 ] is used ; this corresponds to the polynomial t_out = 1 * t_in + 0. Typically , the mapping is linear , so that MAPPING = [ scale shift ]. See also : POLYVAL","title":"ndi.time.timemapping"},{"location":"reference/%2Bndi/%2Btime/timemapping.m/#class-nditimetimemapping","text":"NDI . TIME . TIMEMAPPING - class for managing mapping of time across epochs and devices Describes mapping from one time base to another . The base class , ndi . time . timemapping , provides polynomial mapping , although usually only linear mapping is used . The property MAPPING is a vector of length N + 1 that describes the coefficients of a polynomial such that : t_out = mapping ( 1 ) * t_in ^ N + mapping ( 2 ) * t_in ^ ( N -1 ) + ... mapping ( N ) * t_in + mapping ( N + 1 ) Usually , one specifies a linear relationship only , with MAPPING = [ scale shift ] so that t_out = scale * t_in + shift","title":"CLASS ndi.time.timemapping"},{"location":"reference/%2Bndi/%2Btime/timemapping.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndi/%2Btime/timemapping.m/#properties","text":"Property Description mapping mapping parameters; in the ndi.time.timemapping base class, this is a polynomial (see help POLYVAL)","title":"Properties"},{"location":"reference/%2Bndi/%2Btime/timemapping.m/#methods","text":"Method Description map perform a mapping from one time base to another timemapping ndi.time.timemapping","title":"Methods"},{"location":"reference/%2Bndi/%2Btime/timemapping.m/#methods-help","text":"map - perform a mapping from one time base to another T_OUT = MAP(NDI_TIMEMAPPING_OBJ, T_IN) Perform the mapping described by NDI_TIMEMAPPING_OBJ from one time base to another. In the base class ndi.time.timemapping, the mapping is a polynomial. timemapping - ndi.time.timemapping NDI_TIMEMAPPING_OBJ = ndi . time . timemapping () or NDI_TIMEMAPPING_OBJ = ndi . time . timemapping ( MAPPING ) Creates a new ndi . time . timemapping object . In this base class , the ndi . time . timemapping object specifies a polynomial mapping from one time base to another . If the function is called with no input arguments , then the trivial mapping MAPPING = [ 1 0 ] is used ; this corresponds to the polynomial t_out = 1 * t_in + 0. Typically , the mapping is linear , so that MAPPING = [ scale shift ]. See also : POLYVAL","title":"Methods help"},{"location":"reference/%2Bndi/%2Btime/timereference.m/","text":"CLASS ndi.time.timereference \u00b6 NDI . TIME . TIMEREFERENCE - a class for specifying time relative to an NDI_CLOCK Superclasses \u00b6 none Properties \u00b6 Property Description referent the ndi.daq.system, ndi.probe.*,... that is referred to (must be a subclass of ndi.epoch.epochset) clocktype the ndi.time.clocktype: can be 'utc', 'exp_global_time', 'dev_global_time', or 'dev_local_time' epoch the epoch that may be referred to (required if the time type is 'dev_local_time') time the time of the referent that is referred to session_ID the ID of the session that contains the time Methods \u00b6 Method Description ndi_timereference_struct return a structure that describes an ndi.time.timereference object that lacks Matlab objects timereference creates a new time reference object Methods help \u00b6 ndi_timereference_struct - return a structure that describes an ndi.time.timereference object that lacks Matlab objects A = NDI_TIMEREFERENCE_STRUCT(NDI_TIMEREF_OBJ) Returns a structure with the following fields: Fieldname | Description -------------------------------------------------------------------------------- referent_epochsetname | The epochsetname() of the referent referent_classname | The classname of the referent clocktypestring | The value of the clocktype epoch | The epoch (either a string or a number) session_ID | The session ID of the session that contains the epoch time | The time timereference - creates a new time reference object OBJ = NDI . TIME . TIMEREFERENCE ( REFERENT , CLOCKTYPE , EPOCH , TIME ) Creates a new ndi . time . timereference object . The REFERENT , EPOCH , and TIME must specify a unique time . REFERENT is any subclass of ndi . epoch . epochset object that has a ' session ' property ( e . g ., ndi . daq . system , ndi . element , etc ... ) . TYPE is the time type , can be ' utc ' , ' exp_global_time ' , or ' dev_global_time ' or ' dev_local_time ' If TYPE is ' dev_local_time ' , then the EPOCH identifier is necessary . Otherwise , it can be empty . If EPOCH is specified , then TIME is taken to be relative to the EPOCH number of the device associated with CLOCK , even if the device keeps universal or time . An alternative creator is available : OBJ = ndi . time . timereference ( NDI_SESSION_OBJ , NDI_TIMEREF_STRUCT ) where NDI_SESSION_OBJ is an ndi . session and NDI_TIMEREF_STRUCT is a structure returned by ndi . time . timereference / NDI_TIMEREFERENCE_STRUCT . The NDI_SESSION_OBJ fields will be searched to find the live REFERENT to create OBJ .","title":"ndi.time.timereference"},{"location":"reference/%2Bndi/%2Btime/timereference.m/#class-nditimetimereference","text":"NDI . TIME . TIMEREFERENCE - a class for specifying time relative to an NDI_CLOCK","title":"CLASS ndi.time.timereference"},{"location":"reference/%2Bndi/%2Btime/timereference.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndi/%2Btime/timereference.m/#properties","text":"Property Description referent the ndi.daq.system, ndi.probe.*,... that is referred to (must be a subclass of ndi.epoch.epochset) clocktype the ndi.time.clocktype: can be 'utc', 'exp_global_time', 'dev_global_time', or 'dev_local_time' epoch the epoch that may be referred to (required if the time type is 'dev_local_time') time the time of the referent that is referred to session_ID the ID of the session that contains the time","title":"Properties"},{"location":"reference/%2Bndi/%2Btime/timereference.m/#methods","text":"Method Description ndi_timereference_struct return a structure that describes an ndi.time.timereference object that lacks Matlab objects timereference creates a new time reference object","title":"Methods"},{"location":"reference/%2Bndi/%2Btime/timereference.m/#methods-help","text":"ndi_timereference_struct - return a structure that describes an ndi.time.timereference object that lacks Matlab objects A = NDI_TIMEREFERENCE_STRUCT(NDI_TIMEREF_OBJ) Returns a structure with the following fields: Fieldname | Description -------------------------------------------------------------------------------- referent_epochsetname | The epochsetname() of the referent referent_classname | The classname of the referent clocktypestring | The value of the clocktype epoch | The epoch (either a string or a number) session_ID | The session ID of the session that contains the epoch time | The time timereference - creates a new time reference object OBJ = NDI . TIME . TIMEREFERENCE ( REFERENT , CLOCKTYPE , EPOCH , TIME ) Creates a new ndi . time . timereference object . The REFERENT , EPOCH , and TIME must specify a unique time . REFERENT is any subclass of ndi . epoch . epochset object that has a ' session ' property ( e . g ., ndi . daq . system , ndi . element , etc ... ) . TYPE is the time type , can be ' utc ' , ' exp_global_time ' , or ' dev_global_time ' or ' dev_local_time ' If TYPE is ' dev_local_time ' , then the EPOCH identifier is necessary . Otherwise , it can be empty . If EPOCH is specified , then TIME is taken to be relative to the EPOCH number of the device associated with CLOCK , even if the device keeps universal or time . An alternative creator is available : OBJ = ndi . time . timereference ( NDI_SESSION_OBJ , NDI_TIMEREF_STRUCT ) where NDI_SESSION_OBJ is an ndi . session and NDI_TIMEREF_STRUCT is a structure returned by ndi . time . timereference / NDI_TIMEREFERENCE_STRUCT . The NDI_SESSION_OBJ fields will be searched to find the live REFERENT to create OBJ .","title":"Methods help"},{"location":"reference/%2Bndi/%2Btime/timeseries.m/","text":"CLASS ndi.time.timeseries \u00b6 NDI_TIMESERIES - abstract class for managing time series data Superclasses \u00b6 ndi.documentservice Properties \u00b6 none Methods \u00b6 Method Description newdocument create a new ndi.document based on information in this object readtimeseries read a time series from this parent object (ndi.time.timeseries) samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery create a search query to find this object as an ndi.document times2samples convert from the timeseries time to sample numbers timeseries create an ndi.time.timeseries object Methods help \u00b6 newdocument - create a new ndi.document based on information in this object NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_DOCUMENTSERVICE_OBJ ) Create a new ndi . document based on information in this class . The base ndi . documentservice class returns empty . Help for ndi . time . timeseries / newdocument is inherited from superclass NDI . DOCUMENTSERVICE readtimeseries - read a time series from this parent object (ndi.time.timeseries) [ DATA , T , TIMEREF ] = READTIMESERIES ( NDI_TIMESERIES_OBJ , TIMEREF_OR_EPOCH , T0 , T1 ) Reads timeseries data from an ndi . time . timeseries object . The DATA and time information T that are returned depend on the the specific subclass of ndi . time . timeseries that is called ( see READTIMESERIESEPOCH ) . TIMEREF_OR_EPOCH is either an ndi . time . timereference object indicating the time reference for T0 , T1 , or it can be a single number , which will indicate the data are to be read from that epoch . DATA is the data for the probe . T is a time structure , in units of TIMEREF if it is an ndi . time . timereference object or in units of the epoch if an epoch is passed . The TIMEREF is returned . samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLE_RATE ( NDI_TIMESERIES_OBJ , EPOCH ) Returns the sampling rate of a given ndi . time . timeseries object for the epoch EPOCH . EPOCH can be specified as an index or EPOCH_ID . If NDI_TIMESERIES_OBJ is not regularly sampled , then - 1 is returned . samples2times - convert from the timeseries time to sample numbers SAMPLES = TIME2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. TODO : convert times to dev_local_clock searchquery - create a search query to find this object as an ndi.document SQ = SEARCHQUERY ( NDI_DOCUMENTSERVICE_OBJ ) Return a search query that can be used to find this object ' s representation as an ndi . document . The base class ndi . documentservice just returns empty . Help for ndi . time . timeseries / searchquery is inherited from superclass NDI . DOCUMENTSERVICE times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. timeseries - create an ndi.time.timeseries object NDI_TIMESERIES_OBJ = ndi . time . timeseries () This function creates an ndi . time . timeseries object , which is an abstract class that defines methods for other objects that deal with time series .","title":"ndi.time.timeseries"},{"location":"reference/%2Bndi/%2Btime/timeseries.m/#class-nditimetimeseries","text":"NDI_TIMESERIES - abstract class for managing time series data","title":"CLASS ndi.time.timeseries"},{"location":"reference/%2Bndi/%2Btime/timeseries.m/#superclasses","text":"ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Btime/timeseries.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bndi/%2Btime/timeseries.m/#methods","text":"Method Description newdocument create a new ndi.document based on information in this object readtimeseries read a time series from this parent object (ndi.time.timeseries) samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery create a search query to find this object as an ndi.document times2samples convert from the timeseries time to sample numbers timeseries create an ndi.time.timeseries object","title":"Methods"},{"location":"reference/%2Bndi/%2Btime/timeseries.m/#methods-help","text":"newdocument - create a new ndi.document based on information in this object NDI_DOCUMENT_OBJ = NEWDOCUMENT ( NDI_DOCUMENTSERVICE_OBJ ) Create a new ndi . document based on information in this class . The base ndi . documentservice class returns empty . Help for ndi . time . timeseries / newdocument is inherited from superclass NDI . DOCUMENTSERVICE readtimeseries - read a time series from this parent object (ndi.time.timeseries) [ DATA , T , TIMEREF ] = READTIMESERIES ( NDI_TIMESERIES_OBJ , TIMEREF_OR_EPOCH , T0 , T1 ) Reads timeseries data from an ndi . time . timeseries object . The DATA and time information T that are returned depend on the the specific subclass of ndi . time . timeseries that is called ( see READTIMESERIESEPOCH ) . TIMEREF_OR_EPOCH is either an ndi . time . timereference object indicating the time reference for T0 , T1 , or it can be a single number , which will indicate the data are to be read from that epoch . DATA is the data for the probe . T is a time structure , in units of TIMEREF if it is an ndi . time . timereference object or in units of the epoch if an epoch is passed . The TIMEREF is returned . samplerate - return the sample rate of an ndi.time.timeseries object SR = SAMPLE_RATE ( NDI_TIMESERIES_OBJ , EPOCH ) Returns the sampling rate of a given ndi . time . timeseries object for the epoch EPOCH . EPOCH can be specified as an index or EPOCH_ID . If NDI_TIMESERIES_OBJ is not regularly sampled , then - 1 is returned . samples2times - convert from the timeseries time to sample numbers SAMPLES = TIME2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. TODO : convert times to dev_local_clock searchquery - create a search query to find this object as an ndi.document SQ = SEARCHQUERY ( NDI_DOCUMENTSERVICE_OBJ ) Return a search query that can be used to find this object ' s representation as an ndi . document . The base class ndi . documentservice just returns empty . Help for ndi . time . timeseries / searchquery is inherited from superclass NDI . DOCUMENTSERVICE times2samples - convert from the timeseries time to sample numbers SAMPLES = TIMES2SAMPLES ( NDI_TIMESERIES_OBJ , EPOCH , TIMES ) For a given ndi . time . timeseries object and a recording epoch EPOCH , return the sample index numbers SAMPLE that corresponds to the times TIMES . The first sample in the epoch is 1 . The TIMES requested might be out of bounds of the EPOCH ; no checking is performed. timeseries - create an ndi.time.timeseries object NDI_TIMESERIES_OBJ = ndi . time . timeseries () This function creates an ndi . time . timeseries object , which is an abstract class that defines methods for other objects that deal with time series .","title":"Methods help"},{"location":"reference/%2Bndi/%2Btime/%2Bsyncrule/commontriggers.m/","text":"CLASS ndi.time.syncrule.commontriggers \u00b6 NDI_SYNCRULE_COMMONTRIGGERS_OBJ - create a new ndi . time . syncrule . commontriggers for managing synchronization NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi . time . syncrule . commontriggers () or NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi . time . syncrule . commontriggers ( PARAMETERS ) Creates a new ndi . time . syncrule . commontriggers object with the given PARAMETERS ( a structure , see below ) . If no inputs are provided , then the default PARAMETERS ( see below ) is used . PARAMETERS should be a structure with the following entries : Field ( default ) | Description ------------------------------------------------------------------- daqsystem1 | The name of the first daq system channel_daq1 | The channel on the first daq system daqsystem2 | The name of the second daq system channel_daq2 | The channel on the second daq system number_fullpath_matches | Number fullpath file matches that need to be true to check channels Superclasses \u00b6 ndi.time.syncrule , ndi.ido , ndi.documentservice Properties \u00b6 Property Description parameters identifier Methods \u00b6 Method Description apply apply an ndi.time.syncrule.commontriggers to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects commontriggers create a new ndi.time.syncrule.commontriggers for managing synchronization eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers eq are two ndi.time.syncrule objects equal? id return the identifier of an ndi.ido object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule.commontriggers ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form Methods help \u00b6 apply - apply an ndi.time.syncrule.commontriggers to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects [ COST , MAPPING ] = APPLY ( NDI_SYNCRULE_COMMONTRIGGERS_OBJ , EPOCHNODE_A , EPOCHNODE_B ) Given an ndi . time . syncrule . commontriggers object and two EPOCHNODES ( see ndi . epoch . epochset / EPOCHNODES ) , this function attempts to identify whether a time synchronization can be made across these epochs . If so , a cost COST and an ndi . time . timemapping object MAPPING is returned . Otherwise , COST and MAPPING are empty . commontriggers - create a new ndi.time.syncrule.commontriggers for managing synchronization NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi . time . syncrule . commontriggers () or NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi . time . syncrule . commontriggers ( PARAMETERS ) Creates a new ndi . time . syncrule . commontriggers object with the given PARAMETERS ( a structure , see below ) . If no inputs are provided , then the default PARAMETERS ( see below ) is used . PARAMETERS should be a structure with the following entries : Field ( default ) | Description ------------------------------------------------------------------- daqsystem1 | The name of the first daq system channel_daq1 | The channel on the first daq system daqsystem2 | The name of the second daq system channel_daq2 | The channel on the second daq system number_fullpath_matches | Number fullpath file matches that need to be true to check channels eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule EC = ELIGIBLECLOCKS ( NDI_SYNCRULE_OBJ ) Returns a cell array of ndi . time . clocktype objects with types that can be processed by the ndi . time . syncrule . If EC is empty , then no information is conveyed about which ndi . time . clocktype objects is valid ( that is , it is not the case that the ndi . time . syncrule processes no types ; instead, it has no specific limits). In the abstract class , EC is empty ( {} ) . See also : ndi . time . syncrule . commontriggers / INELIGIBLECLOCKS Help for ndi . time . syncrule . commontriggers / eligibleclocks is inherited from superclass NDI . TIME . SYNCRULE eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers EES = ELIGIBLEEPOCHSETS ( NDI_SYNCRULE_COMMONTRIGGERS_OBJ ) Returns a cell array of valid ndi . epoch . epochset subclasses that the rule can process . If EES is empty , then no information is conveyed about which ndi . epoch . epochset subtypes can be processed by the ndi . time . syncrule . commontriggers . ( That is , it is not the case that the NDI_SYNCTABLE cannot use any classes . ) ndi . time . syncrule . commontriggers returns { ' ndi.daq.system ' } ( it works with ndi . daq . system objects ) . NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here . See also : ndi . time . syncrule . commontriggers / INELIGIBLEEPOCHSETS eq - are two ndi.time.syncrule objects equal? B = EQ ( NDI_SYNCRULE_OBJ_A , NDI_SYNCRULE_OBJ_B ) Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal . Otherwise , 0 is returned . Help for ndi . time . syncrule . commontriggers / eq is inherited from superclass NDI . TIME . SYNCRULE id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . time . syncrule . commontriggers / id is inherited from superclass NDI . IDO ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule IC = INELIGIBLECLOCKS ( NDI_SYNCRULE_OBJ ) Returns a cell array of ndi . time . clocktype objects with types that cannot be processed by the ndi . time . syncrule . If IC is empty , then no information is conveyed about which ndi . time . clocktype objects is valid ( that is , it is not the case that the ndi . time . syncrule cannot be used on any types ; instead, it has no specific limits ) . In the abstract class , IC is { ndi . time . clocktype ( ' no_time ' ) } . See also : ndi . time . syncrule . commontriggers / ELIGIBLECLOCKS Help for ndi . time . syncrule . commontriggers / ineligibleclocks is inherited from superclass NDI . TIME . SYNCRULE ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers IES = INELIGIBLEEPOCHSETS ( NDI_SYNCRULE_COMMONTRIGGERS_OBJ ) Returns a cell array of ndi . epoch . epochset subclasses that the rule cannot process . If IES is empty , then no information is conveyed about which ndi . epoch . epochset subtypes cannot be processed by the ndi . time . syncrule . commontriggers . ( That is , it is not the case that the NDI_SYNCTABLE can use any class . ) ndi . time . syncrule . commontriggers does not work with ndi . epoch . epochset , NDI_EPOCHSETPARAM , or ndi . file . navigator classes . NDI_EPOCHSETS that use the rule must not be members of the classes returned here , but may be descendents of those classes . See also : ndi . time . syncrule . commontriggers / ELIGIBLEEPOCHSETS isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule.commontriggers [ B , MSG ] = ISVALIDPARAMETERS ( NDI_SYNCRULE_COMMONTRIGGERS_OBJ , PARAMETERS ) Returns 1 if PARAMETERS is a valid parameter structure for ndi . time . syncrule . commontriggers . Returns 0 otherwise . If there is an error , MSG contains an error message . PARAMETERS should be a structure with the following entries : Field ( default ) | Description ------------------------------------------------------------------- number_fullpath_matches ( 2 ) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match . See also : ndi . time . syncrule / SETPARAMETERS ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . time . syncrule . commontriggers . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.time.syncrule object DOC = NEWDOCUMENT ( NDI_SYNCRULE_OBJ ) Creates an ndi . document object DOC that represents the ndi . time . syncrule object . Help for ndi . time . syncrule . commontriggers / newdocument is inherited from superclass NDI . TIME . SYNCRULE searchquery - create a search for this ndi.time.syncrule object SQ = SEARCHQUERY ( NDI_SYNCRULE_OBJ ) Creates a search query for the ndi . time . syncgraph object . Help for ndi . time . syncrule . commontriggers / searchquery is inherited from superclass NDI . TIME . SYNCRULE setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form NDI_SYNCRULE_OBJ = SETPARAMETERS ( NDI_SYNCRULE_OBJ , PARAMETERS ) Sets the ' parameters ' field of an ndi . time . syncrule object , while also checking that the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS . See also : ndi . time . syncrule . commontriggers / ISVALIDPARAMETERS Help for ndi . time . syncrule . commontriggers / setparameters is inherited from superclass NDI . TIME . SYNCRULE","title":"ndi.time.syncrule.commontriggers"},{"location":"reference/%2Bndi/%2Btime/%2Bsyncrule/commontriggers.m/#class-nditimesyncrulecommontriggers","text":"NDI_SYNCRULE_COMMONTRIGGERS_OBJ - create a new ndi . time . syncrule . commontriggers for managing synchronization NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi . time . syncrule . commontriggers () or NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi . time . syncrule . commontriggers ( PARAMETERS ) Creates a new ndi . time . syncrule . commontriggers object with the given PARAMETERS ( a structure , see below ) . If no inputs are provided , then the default PARAMETERS ( see below ) is used . PARAMETERS should be a structure with the following entries : Field ( default ) | Description ------------------------------------------------------------------- daqsystem1 | The name of the first daq system channel_daq1 | The channel on the first daq system daqsystem2 | The name of the second daq system channel_daq2 | The channel on the second daq system number_fullpath_matches | Number fullpath file matches that need to be true to check channels","title":"CLASS ndi.time.syncrule.commontriggers"},{"location":"reference/%2Bndi/%2Btime/%2Bsyncrule/commontriggers.m/#superclasses","text":"ndi.time.syncrule , ndi.ido , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Btime/%2Bsyncrule/commontriggers.m/#properties","text":"Property Description parameters identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Btime/%2Bsyncrule/commontriggers.m/#methods","text":"Method Description apply apply an ndi.time.syncrule.commontriggers to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects commontriggers create a new ndi.time.syncrule.commontriggers for managing synchronization eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers eq are two ndi.time.syncrule objects equal? id return the identifier of an ndi.ido object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule.commontriggers ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form","title":"Methods"},{"location":"reference/%2Bndi/%2Btime/%2Bsyncrule/commontriggers.m/#methods-help","text":"apply - apply an ndi.time.syncrule.commontriggers to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects [ COST , MAPPING ] = APPLY ( NDI_SYNCRULE_COMMONTRIGGERS_OBJ , EPOCHNODE_A , EPOCHNODE_B ) Given an ndi . time . syncrule . commontriggers object and two EPOCHNODES ( see ndi . epoch . epochset / EPOCHNODES ) , this function attempts to identify whether a time synchronization can be made across these epochs . If so , a cost COST and an ndi . time . timemapping object MAPPING is returned . Otherwise , COST and MAPPING are empty . commontriggers - create a new ndi.time.syncrule.commontriggers for managing synchronization NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi . time . syncrule . commontriggers () or NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi . time . syncrule . commontriggers ( PARAMETERS ) Creates a new ndi . time . syncrule . commontriggers object with the given PARAMETERS ( a structure , see below ) . If no inputs are provided , then the default PARAMETERS ( see below ) is used . PARAMETERS should be a structure with the following entries : Field ( default ) | Description ------------------------------------------------------------------- daqsystem1 | The name of the first daq system channel_daq1 | The channel on the first daq system daqsystem2 | The name of the second daq system channel_daq2 | The channel on the second daq system number_fullpath_matches | Number fullpath file matches that need to be true to check channels eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule EC = ELIGIBLECLOCKS ( NDI_SYNCRULE_OBJ ) Returns a cell array of ndi . time . clocktype objects with types that can be processed by the ndi . time . syncrule . If EC is empty , then no information is conveyed about which ndi . time . clocktype objects is valid ( that is , it is not the case that the ndi . time . syncrule processes no types ; instead, it has no specific limits). In the abstract class , EC is empty ( {} ) . See also : ndi . time . syncrule . commontriggers / INELIGIBLECLOCKS Help for ndi . time . syncrule . commontriggers / eligibleclocks is inherited from superclass NDI . TIME . SYNCRULE eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers EES = ELIGIBLEEPOCHSETS ( NDI_SYNCRULE_COMMONTRIGGERS_OBJ ) Returns a cell array of valid ndi . epoch . epochset subclasses that the rule can process . If EES is empty , then no information is conveyed about which ndi . epoch . epochset subtypes can be processed by the ndi . time . syncrule . commontriggers . ( That is , it is not the case that the NDI_SYNCTABLE cannot use any classes . ) ndi . time . syncrule . commontriggers returns { ' ndi.daq.system ' } ( it works with ndi . daq . system objects ) . NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here . See also : ndi . time . syncrule . commontriggers / INELIGIBLEEPOCHSETS eq - are two ndi.time.syncrule objects equal? B = EQ ( NDI_SYNCRULE_OBJ_A , NDI_SYNCRULE_OBJ_B ) Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal . Otherwise , 0 is returned . Help for ndi . time . syncrule . commontriggers / eq is inherited from superclass NDI . TIME . SYNCRULE id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . time . syncrule . commontriggers / id is inherited from superclass NDI . IDO ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule IC = INELIGIBLECLOCKS ( NDI_SYNCRULE_OBJ ) Returns a cell array of ndi . time . clocktype objects with types that cannot be processed by the ndi . time . syncrule . If IC is empty , then no information is conveyed about which ndi . time . clocktype objects is valid ( that is , it is not the case that the ndi . time . syncrule cannot be used on any types ; instead, it has no specific limits ) . In the abstract class , IC is { ndi . time . clocktype ( ' no_time ' ) } . See also : ndi . time . syncrule . commontriggers / ELIGIBLECLOCKS Help for ndi . time . syncrule . commontriggers / ineligibleclocks is inherited from superclass NDI . TIME . SYNCRULE ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers IES = INELIGIBLEEPOCHSETS ( NDI_SYNCRULE_COMMONTRIGGERS_OBJ ) Returns a cell array of ndi . epoch . epochset subclasses that the rule cannot process . If IES is empty , then no information is conveyed about which ndi . epoch . epochset subtypes cannot be processed by the ndi . time . syncrule . commontriggers . ( That is , it is not the case that the NDI_SYNCTABLE can use any class . ) ndi . time . syncrule . commontriggers does not work with ndi . epoch . epochset , NDI_EPOCHSETPARAM , or ndi . file . navigator classes . NDI_EPOCHSETS that use the rule must not be members of the classes returned here , but may be descendents of those classes . See also : ndi . time . syncrule . commontriggers / ELIGIBLEEPOCHSETS isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule.commontriggers [ B , MSG ] = ISVALIDPARAMETERS ( NDI_SYNCRULE_COMMONTRIGGERS_OBJ , PARAMETERS ) Returns 1 if PARAMETERS is a valid parameter structure for ndi . time . syncrule . commontriggers . Returns 0 otherwise . If there is an error , MSG contains an error message . PARAMETERS should be a structure with the following entries : Field ( default ) | Description ------------------------------------------------------------------- number_fullpath_matches ( 2 ) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match . See also : ndi . time . syncrule / SETPARAMETERS ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . time . syncrule . commontriggers . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.time.syncrule object DOC = NEWDOCUMENT ( NDI_SYNCRULE_OBJ ) Creates an ndi . document object DOC that represents the ndi . time . syncrule object . Help for ndi . time . syncrule . commontriggers / newdocument is inherited from superclass NDI . TIME . SYNCRULE searchquery - create a search for this ndi.time.syncrule object SQ = SEARCHQUERY ( NDI_SYNCRULE_OBJ ) Creates a search query for the ndi . time . syncgraph object . Help for ndi . time . syncrule . commontriggers / searchquery is inherited from superclass NDI . TIME . SYNCRULE setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form NDI_SYNCRULE_OBJ = SETPARAMETERS ( NDI_SYNCRULE_OBJ , PARAMETERS ) Sets the ' parameters ' field of an ndi . time . syncrule object , while also checking that the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS . See also : ndi . time . syncrule . commontriggers / ISVALIDPARAMETERS Help for ndi . time . syncrule . commontriggers / setparameters is inherited from superclass NDI . TIME . SYNCRULE","title":"Methods help"},{"location":"reference/%2Bndi/%2Btime/%2Bsyncrule/filefind.m/","text":"CLASS ndi.time.syncrule.filefind \u00b6 NDI_SYNCRULE_FILEFIND_OBJ - create a new ndi . time . syncrule . filefind for managing synchronization NDI_SYNCRULE_FILEFIND_OBJ = ndi . time . syncrule . filefind () or NDI_SYNCRULE_FILEFIND_OBJ = ndi . time . syncrule . filefind ( PARAMETERS ) Creates a new ndi . time . syncrule . filefind object with the given PARAMETERS ( a structure , see below ). If no inputs are provided , then the default PARAMETERS ( see below ) is used . PARAMETERS should be a structure with the following entries : Field ( default ) | Description ------------------------------------------------------------------- number_fullpath_matches ( 1 ) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match . syncfilename ( 'syncfile.txt' )| The text synchronization file to find | This file should have 2 numbers in it ; a shift and a scale . | TimeOnDaqSystem2 = shift + scale * TimeOnDaqSystem1 | This file should be in the second daq system 's epoch files. daqsystem1 (' mydaq1 ') | The name of the first daq system daqsystem2 (' mydaq2 ' ) | The name of the second daq system Superclasses \u00b6 ndi.time.syncrule , ndi.ido , ndi.documentservice Properties \u00b6 Property Description parameters identifier Methods \u00b6 Method Description apply apply an ndi.time.syncrule.filefind to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind eq are two ndi.time.syncrule objects equal? filefind create a new ndi.time.syncrule.filefind for managing synchronization id return the identifier of an ndi.ido object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule.filefind ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form Methods help \u00b6 apply - apply an ndi.time.syncrule.filefind to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects [ COST , MAPPING ] = APPLY ( NDI_SYNCRULE_FILEFIND_OBJ , EPOCHNODE_A , EPOCHNODE_B ) Given an ndi . time . syncrule . filefind object and two EPOCHNODES ( see ndi . epoch . epochset / EPOCHNODES ) , this function attempts to identify whether a time synchronization can be made across these epochs . If so , a cost COST and an ndi . time . timemapping object MAPPING is returned . Otherwise , COST and MAPPING are empty . eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule EC = ELIGIBLECLOCKS ( NDI_SYNCRULE_OBJ ) Returns a cell array of ndi . time . clocktype objects with types that can be processed by the ndi . time . syncrule . If EC is empty , then no information is conveyed about which ndi . time . clocktype objects is valid ( that is , it is not the case that the ndi . time . syncrule processes no types ; instead, it has no specific limits). In the abstract class , EC is empty ( {} ) . See also : ndi . time . syncrule . filefind / INELIGIBLECLOCKS Help for ndi . time . syncrule . filefind / eligibleclocks is inherited from superclass NDI . TIME . SYNCRULE eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind EES = ELIGIBLEEPOCHSETS ( NDI_SYNCRULE_FILEFIND_OBJ ) Returns a cell array of valid ndi . epoch . epochset subclasses that the rule can process . If EES is empty , then no information is conveyed about which ndi . epoch . epochset subtypes can be processed by the ndi . time . syncrule . filefind . ( That is , it is not the case that the NDI_SYNCTABLE cannot use any classes . ) ndi . time . syncrule . filefind returns { ' ndi.daq.system ' } ( it works with ndi . daq . system objects ) . NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here . See also : ndi . time . syncrule . filefind / INELIGIBLEEPOCHSETS eq - are two ndi.time.syncrule objects equal? B = EQ ( NDI_SYNCRULE_OBJ_A , NDI_SYNCRULE_OBJ_B ) Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal . Otherwise , 0 is returned . Help for ndi . time . syncrule . filefind / eq is inherited from superclass NDI . TIME . SYNCRULE filefind - create a new ndi.time.syncrule.filefind for managing synchronization NDI_SYNCRULE_FILEFIND_OBJ = ndi . time . syncrule . filefind () or NDI_SYNCRULE_FILEFIND_OBJ = ndi . time . syncrule . filefind ( PARAMETERS ) Creates a new ndi . time . syncrule . filefind object with the given PARAMETERS ( a structure , see below ). If no inputs are provided , then the default PARAMETERS ( see below ) is used . PARAMETERS should be a structure with the following entries : Field ( default ) | Description ------------------------------------------------------------------- number_fullpath_matches ( 1 ) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match . syncfilename ( 'syncfile.txt' )| The text synchronization file to find | This file should have 2 numbers in it ; a shift and a scale . | TimeOnDaqSystem2 = shift + scale * TimeOnDaqSystem1 | This file should be in the second daq system 's epoch files. daqsystem1 (' mydaq1 ') | The name of the first daq system daqsystem2 (' mydaq2 ' ) | The name of the second daq system id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . time . syncrule . filefind / id is inherited from superclass NDI . IDO ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule IC = INELIGIBLECLOCKS ( NDI_SYNCRULE_OBJ ) Returns a cell array of ndi . time . clocktype objects with types that cannot be processed by the ndi . time . syncrule . If IC is empty , then no information is conveyed about which ndi . time . clocktype objects is valid ( that is , it is not the case that the ndi . time . syncrule cannot be used on any types ; instead, it has no specific limits ) . In the abstract class , IC is { ndi . time . clocktype ( ' no_time ' ) } . See also : ndi . time . syncrule . filefind / ELIGIBLECLOCKS Help for ndi . time . syncrule . filefind / ineligibleclocks is inherited from superclass NDI . TIME . SYNCRULE ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind IES = INELIGIBLEEPOCHSETS ( NDI_SYNCRULE_FILEFIND_OBJ ) Returns a cell array of ndi . epoch . epochset subclasses that the rule cannot process . If IES is empty , then no information is conveyed about which ndi . epoch . epochset subtypes cannot be processed by the ndi . time . syncrule . filefind . ( That is , it is not the case that the NDI_SYNCTABLE can use any class . ) ndi . time . syncrule . filefind does not work with ndi . epoch . epochset , NDI_EPOCHSETPARAM , or ndi . file . navigator classes . NDI_EPOCHSETS that use the rule must not be members of the classes returned here , but may be descendents of those classes . See also : ndi . time . syncrule . filefind / ELIGIBLEEPOCHSETS isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule.filefind [ B , MSG ] = ISVALIDPARAMETERS ( NDI_SYNCRULE_FILEFIND_OBJ , PARAMETERS ) Returns 1 if PARAMETERS is a valid parameter structure for ndi . time . syncrule . filefind . Returns 0 otherwise . If there is an error , MSG contains an error message . PARAMETERS should be a structure with the following entries : Field ( default ) | Description ------------------------------------------------------------------- number_fullpath_matches ( 2 ) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match . See also : ndi . time . syncrule / SETPARAMETERS ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . time . syncrule . filefind . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.time.syncrule object DOC = NEWDOCUMENT ( NDI_SYNCRULE_OBJ ) Creates an ndi . document object DOC that represents the ndi . time . syncrule object . Help for ndi . time . syncrule . filefind / newdocument is inherited from superclass NDI . TIME . SYNCRULE searchquery - create a search for this ndi.time.syncrule object SQ = SEARCHQUERY ( NDI_SYNCRULE_OBJ ) Creates a search query for the ndi . time . syncgraph object . Help for ndi . time . syncrule . filefind / searchquery is inherited from superclass NDI . TIME . SYNCRULE setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form NDI_SYNCRULE_OBJ = SETPARAMETERS ( NDI_SYNCRULE_OBJ , PARAMETERS ) Sets the ' parameters ' field of an ndi . time . syncrule object , while also checking that the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS . See also : ndi . time . syncrule . filefind / ISVALIDPARAMETERS Help for ndi . time . syncrule . filefind / setparameters is inherited from superclass NDI . TIME . SYNCRULE","title":"ndi.time.syncrule.filefind"},{"location":"reference/%2Bndi/%2Btime/%2Bsyncrule/filefind.m/#class-nditimesyncrulefilefind","text":"NDI_SYNCRULE_FILEFIND_OBJ - create a new ndi . time . syncrule . filefind for managing synchronization NDI_SYNCRULE_FILEFIND_OBJ = ndi . time . syncrule . filefind () or NDI_SYNCRULE_FILEFIND_OBJ = ndi . time . syncrule . filefind ( PARAMETERS ) Creates a new ndi . time . syncrule . filefind object with the given PARAMETERS ( a structure , see below ). If no inputs are provided , then the default PARAMETERS ( see below ) is used . PARAMETERS should be a structure with the following entries : Field ( default ) | Description ------------------------------------------------------------------- number_fullpath_matches ( 1 ) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match . syncfilename ( 'syncfile.txt' )| The text synchronization file to find | This file should have 2 numbers in it ; a shift and a scale . | TimeOnDaqSystem2 = shift + scale * TimeOnDaqSystem1 | This file should be in the second daq system 's epoch files. daqsystem1 (' mydaq1 ') | The name of the first daq system daqsystem2 (' mydaq2 ' ) | The name of the second daq system","title":"CLASS ndi.time.syncrule.filefind"},{"location":"reference/%2Bndi/%2Btime/%2Bsyncrule/filefind.m/#superclasses","text":"ndi.time.syncrule , ndi.ido , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Btime/%2Bsyncrule/filefind.m/#properties","text":"Property Description parameters identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Btime/%2Bsyncrule/filefind.m/#methods","text":"Method Description apply apply an ndi.time.syncrule.filefind to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind eq are two ndi.time.syncrule objects equal? filefind create a new ndi.time.syncrule.filefind for managing synchronization id return the identifier of an ndi.ido object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule.filefind ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form","title":"Methods"},{"location":"reference/%2Bndi/%2Btime/%2Bsyncrule/filefind.m/#methods-help","text":"apply - apply an ndi.time.syncrule.filefind to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects [ COST , MAPPING ] = APPLY ( NDI_SYNCRULE_FILEFIND_OBJ , EPOCHNODE_A , EPOCHNODE_B ) Given an ndi . time . syncrule . filefind object and two EPOCHNODES ( see ndi . epoch . epochset / EPOCHNODES ) , this function attempts to identify whether a time synchronization can be made across these epochs . If so , a cost COST and an ndi . time . timemapping object MAPPING is returned . Otherwise , COST and MAPPING are empty . eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule EC = ELIGIBLECLOCKS ( NDI_SYNCRULE_OBJ ) Returns a cell array of ndi . time . clocktype objects with types that can be processed by the ndi . time . syncrule . If EC is empty , then no information is conveyed about which ndi . time . clocktype objects is valid ( that is , it is not the case that the ndi . time . syncrule processes no types ; instead, it has no specific limits). In the abstract class , EC is empty ( {} ) . See also : ndi . time . syncrule . filefind / INELIGIBLECLOCKS Help for ndi . time . syncrule . filefind / eligibleclocks is inherited from superclass NDI . TIME . SYNCRULE eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind EES = ELIGIBLEEPOCHSETS ( NDI_SYNCRULE_FILEFIND_OBJ ) Returns a cell array of valid ndi . epoch . epochset subclasses that the rule can process . If EES is empty , then no information is conveyed about which ndi . epoch . epochset subtypes can be processed by the ndi . time . syncrule . filefind . ( That is , it is not the case that the NDI_SYNCTABLE cannot use any classes . ) ndi . time . syncrule . filefind returns { ' ndi.daq.system ' } ( it works with ndi . daq . system objects ) . NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here . See also : ndi . time . syncrule . filefind / INELIGIBLEEPOCHSETS eq - are two ndi.time.syncrule objects equal? B = EQ ( NDI_SYNCRULE_OBJ_A , NDI_SYNCRULE_OBJ_B ) Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal . Otherwise , 0 is returned . Help for ndi . time . syncrule . filefind / eq is inherited from superclass NDI . TIME . SYNCRULE filefind - create a new ndi.time.syncrule.filefind for managing synchronization NDI_SYNCRULE_FILEFIND_OBJ = ndi . time . syncrule . filefind () or NDI_SYNCRULE_FILEFIND_OBJ = ndi . time . syncrule . filefind ( PARAMETERS ) Creates a new ndi . time . syncrule . filefind object with the given PARAMETERS ( a structure , see below ). If no inputs are provided , then the default PARAMETERS ( see below ) is used . PARAMETERS should be a structure with the following entries : Field ( default ) | Description ------------------------------------------------------------------- number_fullpath_matches ( 1 ) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match . syncfilename ( 'syncfile.txt' )| The text synchronization file to find | This file should have 2 numbers in it ; a shift and a scale . | TimeOnDaqSystem2 = shift + scale * TimeOnDaqSystem1 | This file should be in the second daq system 's epoch files. daqsystem1 (' mydaq1 ') | The name of the first daq system daqsystem2 (' mydaq2 ' ) | The name of the second daq system id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . time . syncrule . filefind / id is inherited from superclass NDI . IDO ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule IC = INELIGIBLECLOCKS ( NDI_SYNCRULE_OBJ ) Returns a cell array of ndi . time . clocktype objects with types that cannot be processed by the ndi . time . syncrule . If IC is empty , then no information is conveyed about which ndi . time . clocktype objects is valid ( that is , it is not the case that the ndi . time . syncrule cannot be used on any types ; instead, it has no specific limits ) . In the abstract class , IC is { ndi . time . clocktype ( ' no_time ' ) } . See also : ndi . time . syncrule . filefind / ELIGIBLECLOCKS Help for ndi . time . syncrule . filefind / ineligibleclocks is inherited from superclass NDI . TIME . SYNCRULE ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind IES = INELIGIBLEEPOCHSETS ( NDI_SYNCRULE_FILEFIND_OBJ ) Returns a cell array of ndi . epoch . epochset subclasses that the rule cannot process . If IES is empty , then no information is conveyed about which ndi . epoch . epochset subtypes cannot be processed by the ndi . time . syncrule . filefind . ( That is , it is not the case that the NDI_SYNCTABLE can use any class . ) ndi . time . syncrule . filefind does not work with ndi . epoch . epochset , NDI_EPOCHSETPARAM , or ndi . file . navigator classes . NDI_EPOCHSETS that use the rule must not be members of the classes returned here , but may be descendents of those classes . See also : ndi . time . syncrule . filefind / ELIGIBLEEPOCHSETS isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule.filefind [ B , MSG ] = ISVALIDPARAMETERS ( NDI_SYNCRULE_FILEFIND_OBJ , PARAMETERS ) Returns 1 if PARAMETERS is a valid parameter structure for ndi . time . syncrule . filefind . Returns 0 otherwise . If there is an error , MSG contains an error message . PARAMETERS should be a structure with the following entries : Field ( default ) | Description ------------------------------------------------------------------- number_fullpath_matches ( 2 ) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match . See also : ndi . time . syncrule / SETPARAMETERS ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . time . syncrule . filefind . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.time.syncrule object DOC = NEWDOCUMENT ( NDI_SYNCRULE_OBJ ) Creates an ndi . document object DOC that represents the ndi . time . syncrule object . Help for ndi . time . syncrule . filefind / newdocument is inherited from superclass NDI . TIME . SYNCRULE searchquery - create a search for this ndi.time.syncrule object SQ = SEARCHQUERY ( NDI_SYNCRULE_OBJ ) Creates a search query for the ndi . time . syncgraph object . Help for ndi . time . syncrule . filefind / searchquery is inherited from superclass NDI . TIME . SYNCRULE setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form NDI_SYNCRULE_OBJ = SETPARAMETERS ( NDI_SYNCRULE_OBJ , PARAMETERS ) Sets the ' parameters ' field of an ndi . time . syncrule object , while also checking that the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS . See also : ndi . time . syncrule . filefind / ISVALIDPARAMETERS Help for ndi . time . syncrule . filefind / setparameters is inherited from superclass NDI . TIME . SYNCRULE","title":"Methods help"},{"location":"reference/%2Bndi/%2Btime/%2Bsyncrule/filematch.m/","text":"CLASS ndi.time.syncrule.filematch \u00b6 NDI_SYNCRULE_FILEMATCH_OBJ - create a new ndi . time . syncrule . filematch for managing synchronization NDI_SYNCRULE_FILEMATCH_OBJ = ndi . time . syncrule . filematch () or NDI_SYNCRULE_FILEMATCH_OBJ = ndi . time . syncrule . filematch ( PARAMETERS ) Creates a new ndi . time . syncrule . filematch object with the given PARAMETERS ( a structure , see below ) . If no inputs are provided , then the default PARAMETERS ( see below ) is used . PARAMETERS should be a structure with the following entries : Field ( default ) | Description ------------------------------------------------------------------- number_fullpath_matches ( 2 ) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match . Superclasses \u00b6 ndi.time.syncrule , ndi.ido , ndi.documentservice Properties \u00b6 Property Description parameters identifier Methods \u00b6 Method Description apply apply an ndi.time.syncrule.filematch to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch eq are two ndi.time.syncrule objects equal? filematch create a new ndi.time.syncrule.filematch for managing synchronization id return the identifier of an ndi.ido object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule.filematch ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form Methods help \u00b6 apply - apply an ndi.time.syncrule.filematch to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects [ COST , MAPPING ] = APPLY ( NDI_SYNCRULE_FILEMATCH_OBJ , EPOCHNODE_A , EPOCHNODE_B ) Given an ndi . time . syncrule . filematch object and two EPOCHNODES ( see ndi . epoch . epochset / EPOCHNODES ) , this function attempts to identify whether a time synchronization can be made across these epochs . If so , a cost COST and an ndi . time . timemapping object MAPPING is returned . Otherwise , COST and MAPPING are empty . eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule EC = ELIGIBLECLOCKS ( NDI_SYNCRULE_OBJ ) Returns a cell array of ndi . time . clocktype objects with types that can be processed by the ndi . time . syncrule . If EC is empty , then no information is conveyed about which ndi . time . clocktype objects is valid ( that is , it is not the case that the ndi . time . syncrule processes no types ; instead, it has no specific limits). In the abstract class , EC is empty ( {} ) . See also : ndi . time . syncrule . filematch / INELIGIBLECLOCKS Help for ndi . time . syncrule . filematch / eligibleclocks is inherited from superclass NDI . TIME . SYNCRULE eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch EES = ELIGIBLEEPOCHSETS ( NDI_SYNCRULE_FILEMATCH_OBJ ) Returns a cell array of valid ndi . epoch . epochset subclasses that the rule can process . If EES is empty , then no information is conveyed about which ndi . epoch . epochset subtypes can be processed by the ndi . time . syncrule . filematch . ( That is , it is not the case that the NDI_SYNCTABLE cannot use any classes . ) ndi . time . syncrule . filematch returns { ' ndi.daq.system ' } ( it works with ndi . daq . system objects ) . NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here . See also : ndi . time . syncrule . filematch / INELIGIBLEEPOCHSETS eq - are two ndi.time.syncrule objects equal? B = EQ ( NDI_SYNCRULE_OBJ_A , NDI_SYNCRULE_OBJ_B ) Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal . Otherwise , 0 is returned . Help for ndi . time . syncrule . filematch / eq is inherited from superclass NDI . TIME . SYNCRULE filematch - create a new ndi.time.syncrule.filematch for managing synchronization NDI_SYNCRULE_FILEMATCH_OBJ = ndi . time . syncrule . filematch () or NDI_SYNCRULE_FILEMATCH_OBJ = ndi . time . syncrule . filematch ( PARAMETERS ) Creates a new ndi . time . syncrule . filematch object with the given PARAMETERS ( a structure , see below ) . If no inputs are provided , then the default PARAMETERS ( see below ) is used . PARAMETERS should be a structure with the following entries : Field ( default ) | Description ------------------------------------------------------------------- number_fullpath_matches ( 2 ) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match . id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . time . syncrule . filematch / id is inherited from superclass NDI . IDO ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule IC = INELIGIBLECLOCKS ( NDI_SYNCRULE_OBJ ) Returns a cell array of ndi . time . clocktype objects with types that cannot be processed by the ndi . time . syncrule . If IC is empty , then no information is conveyed about which ndi . time . clocktype objects is valid ( that is , it is not the case that the ndi . time . syncrule cannot be used on any types ; instead, it has no specific limits ) . In the abstract class , IC is { ndi . time . clocktype ( ' no_time ' ) } . See also : ndi . time . syncrule . filematch / ELIGIBLECLOCKS Help for ndi . time . syncrule . filematch / ineligibleclocks is inherited from superclass NDI . TIME . SYNCRULE ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch IES = INELIGIBLEEPOCHSETS ( NDI_SYNCRULE_FILEMATCH_OBJ ) Returns a cell array of ndi . epoch . epochset subclasses that the rule cannot process . If IES is empty , then no information is conveyed about which ndi . epoch . epochset subtypes cannot be processed by the ndi . time . syncrule . filematch . ( That is , it is not the case that the NDI_SYNCTABLE can use any class . ) ndi . time . syncrule . filematch does not work with ndi . epoch . epochset , NDI_EPOCHSETPARAM , or ndi . file . navigator classes . NDI_EPOCHSETS that use the rule must not be members of the classes returned here , but may be descendents of those classes . See also : ndi . time . syncrule . filematch / ELIGIBLEEPOCHSETS isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule.filematch [ B , MSG ] = ISVALIDPARAMETERS ( NDI_SYNCRULE_FILEMATCH_OBJ , PARAMETERS ) Returns 1 if PARAMETERS is a valid parameter structure for ndi . time . syncrule . filematch . Returns 0 otherwise . If there is an error , MSG contains an error message . PARAMETERS should be a structure with the following entries : Field ( default ) | Description ------------------------------------------------------------------- number_fullpath_matches ( 2 ) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match . See also : ndi . time . syncrule / SETPARAMETERS ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . time . syncrule . filematch . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.time.syncrule object DOC = NEWDOCUMENT ( NDI_SYNCRULE_OBJ ) Creates an ndi . document object DOC that represents the ndi . time . syncrule object . Help for ndi . time . syncrule . filematch / newdocument is inherited from superclass NDI . TIME . SYNCRULE searchquery - create a search for this ndi.time.syncrule object SQ = SEARCHQUERY ( NDI_SYNCRULE_OBJ ) Creates a search query for the ndi . time . syncgraph object . Help for ndi . time . syncrule . filematch / searchquery is inherited from superclass NDI . TIME . SYNCRULE setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form NDI_SYNCRULE_OBJ = SETPARAMETERS ( NDI_SYNCRULE_OBJ , PARAMETERS ) Sets the ' parameters ' field of an ndi . time . syncrule object , while also checking that the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS . See also : ndi . time . syncrule . filematch / ISVALIDPARAMETERS Help for ndi . time . syncrule . filematch / setparameters is inherited from superclass NDI . TIME . SYNCRULE","title":"ndi.time.syncrule.filematch"},{"location":"reference/%2Bndi/%2Btime/%2Bsyncrule/filematch.m/#class-nditimesyncrulefilematch","text":"NDI_SYNCRULE_FILEMATCH_OBJ - create a new ndi . time . syncrule . filematch for managing synchronization NDI_SYNCRULE_FILEMATCH_OBJ = ndi . time . syncrule . filematch () or NDI_SYNCRULE_FILEMATCH_OBJ = ndi . time . syncrule . filematch ( PARAMETERS ) Creates a new ndi . time . syncrule . filematch object with the given PARAMETERS ( a structure , see below ) . If no inputs are provided , then the default PARAMETERS ( see below ) is used . PARAMETERS should be a structure with the following entries : Field ( default ) | Description ------------------------------------------------------------------- number_fullpath_matches ( 2 ) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match .","title":"CLASS ndi.time.syncrule.filematch"},{"location":"reference/%2Bndi/%2Btime/%2Bsyncrule/filematch.m/#superclasses","text":"ndi.time.syncrule , ndi.ido , ndi.documentservice","title":"Superclasses"},{"location":"reference/%2Bndi/%2Btime/%2Bsyncrule/filematch.m/#properties","text":"Property Description parameters identifier","title":"Properties"},{"location":"reference/%2Bndi/%2Btime/%2Bsyncrule/filematch.m/#methods","text":"Method Description apply apply an ndi.time.syncrule.filematch to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch eq are two ndi.time.syncrule objects equal? filematch create a new ndi.time.syncrule.filematch for managing synchronization id return the identifier of an ndi.ido object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule.filematch ndi_unique_id Generate a unique ID number for NDI projects newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form","title":"Methods"},{"location":"reference/%2Bndi/%2Btime/%2Bsyncrule/filematch.m/#methods-help","text":"apply - apply an ndi.time.syncrule.filematch to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects [ COST , MAPPING ] = APPLY ( NDI_SYNCRULE_FILEMATCH_OBJ , EPOCHNODE_A , EPOCHNODE_B ) Given an ndi . time . syncrule . filematch object and two EPOCHNODES ( see ndi . epoch . epochset / EPOCHNODES ) , this function attempts to identify whether a time synchronization can be made across these epochs . If so , a cost COST and an ndi . time . timemapping object MAPPING is returned . Otherwise , COST and MAPPING are empty . eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule EC = ELIGIBLECLOCKS ( NDI_SYNCRULE_OBJ ) Returns a cell array of ndi . time . clocktype objects with types that can be processed by the ndi . time . syncrule . If EC is empty , then no information is conveyed about which ndi . time . clocktype objects is valid ( that is , it is not the case that the ndi . time . syncrule processes no types ; instead, it has no specific limits). In the abstract class , EC is empty ( {} ) . See also : ndi . time . syncrule . filematch / INELIGIBLECLOCKS Help for ndi . time . syncrule . filematch / eligibleclocks is inherited from superclass NDI . TIME . SYNCRULE eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch EES = ELIGIBLEEPOCHSETS ( NDI_SYNCRULE_FILEMATCH_OBJ ) Returns a cell array of valid ndi . epoch . epochset subclasses that the rule can process . If EES is empty , then no information is conveyed about which ndi . epoch . epochset subtypes can be processed by the ndi . time . syncrule . filematch . ( That is , it is not the case that the NDI_SYNCTABLE cannot use any classes . ) ndi . time . syncrule . filematch returns { ' ndi.daq.system ' } ( it works with ndi . daq . system objects ) . NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here . See also : ndi . time . syncrule . filematch / INELIGIBLEEPOCHSETS eq - are two ndi.time.syncrule objects equal? B = EQ ( NDI_SYNCRULE_OBJ_A , NDI_SYNCRULE_OBJ_B ) Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal . Otherwise , 0 is returned . Help for ndi . time . syncrule . filematch / eq is inherited from superclass NDI . TIME . SYNCRULE filematch - create a new ndi.time.syncrule.filematch for managing synchronization NDI_SYNCRULE_FILEMATCH_OBJ = ndi . time . syncrule . filematch () or NDI_SYNCRULE_FILEMATCH_OBJ = ndi . time . syncrule . filematch ( PARAMETERS ) Creates a new ndi . time . syncrule . filematch object with the given PARAMETERS ( a structure , see below ) . If no inputs are provided , then the default PARAMETERS ( see below ) is used . PARAMETERS should be a structure with the following entries : Field ( default ) | Description ------------------------------------------------------------------- number_fullpath_matches ( 2 ) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match . id - return the identifier of an ndi.ido object IDENTIFIER = ID ( NDI_ID_OBJ ) Returns the unique identifier of an ndi . ido object . Help for ndi . time . syncrule . filematch / id is inherited from superclass NDI . IDO ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule IC = INELIGIBLECLOCKS ( NDI_SYNCRULE_OBJ ) Returns a cell array of ndi . time . clocktype objects with types that cannot be processed by the ndi . time . syncrule . If IC is empty , then no information is conveyed about which ndi . time . clocktype objects is valid ( that is , it is not the case that the ndi . time . syncrule cannot be used on any types ; instead, it has no specific limits ) . In the abstract class , IC is { ndi . time . clocktype ( ' no_time ' ) } . See also : ndi . time . syncrule . filematch / ELIGIBLECLOCKS Help for ndi . time . syncrule . filematch / ineligibleclocks is inherited from superclass NDI . TIME . SYNCRULE ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch IES = INELIGIBLEEPOCHSETS ( NDI_SYNCRULE_FILEMATCH_OBJ ) Returns a cell array of ndi . epoch . epochset subclasses that the rule cannot process . If IES is empty , then no information is conveyed about which ndi . epoch . epochset subtypes cannot be processed by the ndi . time . syncrule . filematch . ( That is , it is not the case that the NDI_SYNCTABLE can use any class . ) ndi . time . syncrule . filematch does not work with ndi . epoch . epochset , NDI_EPOCHSETPARAM , or ndi . file . navigator classes . NDI_EPOCHSETS that use the rule must not be members of the classes returned here , but may be descendents of those classes . See also : ndi . time . syncrule . filematch / ELIGIBLEEPOCHSETS isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule.filematch [ B , MSG ] = ISVALIDPARAMETERS ( NDI_SYNCRULE_FILEMATCH_OBJ , PARAMETERS ) Returns 1 if PARAMETERS is a valid parameter structure for ndi . time . syncrule . filematch . Returns 0 otherwise . If there is an error , MSG contains an error message . PARAMETERS should be a structure with the following entries : Field ( default ) | Description ------------------------------------------------------------------- number_fullpath_matches ( 2 ) | The number of full path matches of the underlying | filenames that must match in order for the epochs to match . See also : ndi . time . syncrule / SETPARAMETERS ndi_unique_id - Generate a unique ID number for NDI projects ID = NDI_UNIQUE_ID Generates a unique ID character array based on the current time and a random number . It is a hexidecimal representation of the serial date number in UTC Leap Seconds time . The serial date number is the number of days since January 0 , 0000 at 0 : 00 : 00 . The integer portion of the date is the whole number of days and the fractional part of the date number is the fraction of days . ID = [ NUM2HEX ( SERIAL_DATE_NUMBER ) ' _ ' NUM2HEX ( RAND ) ] See also : NUM2HEX , NOW , RAND Help for ndi . time . syncrule . filematch . ndi_unique_id is inherited from superclass NDI . IDO newdocument - create a new ndi.document for an ndi.time.syncrule object DOC = NEWDOCUMENT ( NDI_SYNCRULE_OBJ ) Creates an ndi . document object DOC that represents the ndi . time . syncrule object . Help for ndi . time . syncrule . filematch / newdocument is inherited from superclass NDI . TIME . SYNCRULE searchquery - create a search for this ndi.time.syncrule object SQ = SEARCHQUERY ( NDI_SYNCRULE_OBJ ) Creates a search query for the ndi . time . syncgraph object . Help for ndi . time . syncrule . filematch / searchquery is inherited from superclass NDI . TIME . SYNCRULE setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form NDI_SYNCRULE_OBJ = SETPARAMETERS ( NDI_SYNCRULE_OBJ , PARAMETERS ) Sets the ' parameters ' field of an ndi . time . syncrule object , while also checking that the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS . See also : ndi . time . syncrule . filematch / ISVALIDPARAMETERS Help for ndi . time . syncrule . filematch / setparameters is inherited from superclass NDI . TIME . SYNCRULE","title":"Methods help"},{"location":"tutorials/analysis_app/","text":"Making your own analysis app that uses NDI \u00b6 This is planned tutorial. We will design a simple application that analyzes responses of taste stimuli, and take the user/developer through the process of design, creating database document types, writing, and testing. This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.","title":"6. Making your own analysis app that uses NDI"},{"location":"tutorials/analysis_app/#making-your-own-analysis-app-that-uses-ndi","text":"This is planned tutorial. We will design a simple application that analyzes responses of taste stimuli, and take the user/developer through the process of design, creating database document types, writing, and testing. This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.","title":"Making your own analysis app that uses NDI"},{"location":"tutorials/archive/","text":"Saving your data to an archive \u00b6 Planned: Save a set of experimental sessions to DANDI , after NWB reading/writing capability is added. Planned as part of R01MH126791 (if funded). Planned: Save a set of experimental sessions to DABI . Soon.","title":"7. Submitting your data to an archive"},{"location":"tutorials/archive/#saving-your-data-to-an-archive","text":"Planned: Save a set of experimental sessions to DANDI , after NWB reading/writing capability is added. Planned as part of R01MH126791 (if funded). Planned: Save a set of experimental sessions to DABI . Soon.","title":"Saving your data to an archive"},{"location":"tutorials/case_studies_reading_data/","text":"Case studies in reading your own data in NDI \u00b6 This is planned tutorial that will show examples of how to specify ndi.daq.system and ndi.file.navigator objects for 4 systems neuroscience labs that use different data acquisition systems and different file organizations (Van Hooser; Marder; Katz; Jadhav); This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.","title":"4. Case studies in reading data in NDI"},{"location":"tutorials/case_studies_reading_data/#case-studies-in-reading-your-own-data-in-ndi","text":"This is planned tutorial that will show examples of how to specify ndi.daq.system and ndi.file.navigator objects for 4 systems neuroscience labs that use different data acquisition systems and different file organizations (Van Hooser; Marder; Katz; Jadhav); This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.","title":"Case studies in reading your own data in NDI"},{"location":"tutorials/data_pipeline/","text":"Creating a data pipeline in NDI \u00b6 This is planned tutorial that will cover an example of making a data pipeline in NDI; we will show how to analyze several aspects of visual responses and to calculate place-cell locations in recordings of hippocampus. This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.","title":"5. Making your own data pipeline in NDI"},{"location":"tutorials/data_pipeline/#creating-a-data-pipeline-in-ndi","text":"This is planned tutorial that will cover an example of making a data pipeline in NDI; we will show how to analyze several aspects of visual responses and to calculate place-cell locations in recordings of hippocampus. This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.","title":"Creating a data pipeline in NDI"},{"location":"tutorials/reading_own_data_ndi/","text":"Reading your own data in NDI \u00b6 This is planned tutorial that will cover identifying your data's file format and organization specifying your data's file format and organization in an ndi.daq.system and ndi.file.navigator specifying subjects and mapping between probes and daq systems checking your work This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.","title":"3. Reading your own data in NDI"},{"location":"tutorials/reading_own_data_ndi/#reading-your-own-data-in-ndi","text":"This is planned tutorial that will cover identifying your data's file format and organization specifying your data's file format and organization in an ndi.daq.system and ndi.file.navigator specifying subjects and mapping between probes and daq systems checking your work This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.","title":"Reading your own data in NDI"},{"location":"tutorials/search_ndi_databases/","text":"Search and analyze NDI databases on the web \u00b6 Planned: Search the web for NDI databases When: After adding databases to DANDI This work is planned as part of application R01MH126791 (if funded)","title":"8. Search and analyze NDI databases on the web"},{"location":"tutorials/search_ndi_databases/#search-and-analyze-ndi-databases-on-the-web","text":"Planned: Search the web for NDI databases When: After adding databases to DANDI This work is planned as part of application R01MH126791 (if funded)","title":"Search and analyze NDI databases on the web"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/","text":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI \u00b6 2.1: Reading an example dataset \u00b6 We will start with learning to read an example dataset into NDI. We assume you have already installed NDI and taken the introductory tutorial of the NDI model . These data are available in a compressed folder here . You can put the folder anywhere, but we will assume that you put them in your MATLAB/Documents/NDI folder, where MATLAB is your normal user path in Matlab (usually /Users/username/Documents/MATLAB on a Mac). Normally, we'd use some helper functions to open our data to make this process even easier, but this tutorial takes the user through the full manual process for training purposes. 2.1.1 Introduction to the experiment \u00b6 These data are single neuron recordings made with electrodes in the anesthetized tree shrew visual as a part of Van Hooser et al. 2013 . This example data is a very small subset of the original data for the purposes of illustration. In this experiment, a single unit recording electrode was inserted into either lateral geniculate nucleus or V1. The electrode was connected to an amplifier, and the output signal was recorded by a Cambridge Electronic Design (CED) micro1401 digital acquisition board. A CED Spike2 software script was used that stored 1 recording epoch per folder. In software, the voltage from the electrode was assigned to channel 11. A visual stimulus monitor was set up in front of the animal, and visual stimuli were generated by custom software running on a separate computer. A record of the stimulus parameters was stored in the epoch folder in a file called stims.mat , and stimulus timing information was delievered to the digital inputs of the micro1401 in the form of a stimulus onset trigger and an 8-bit stimulus code signal that were generated by the stimulus computer. 2.1.2 Introduction to the data \u00b6 The data are in a folder called ts_exper1 . It contains recordings of two neurons, an LGN neuron and a V1 neuron, to presentation of sinusoidal gratings that either vary in orientation or in spatial frequency. The data as provided by the host lab are organized into subfolders, named t00001 , t00002 , t00003 , and t00004 . The first two folders are recordings of the LGN neuron, and the second two folders are recordings of the V1 neuron. Each t0000N folder has 3 files: probemap.txt - a file that we made for NDI that describe what probes are recorded in this folder spike2data.smr - a CED Spike2 file that has the raw electrophysiology data and the stimulus timing information stims.mat - A Matlab file that has detailed parameters of the stimuli that were run First, let's list these files using the ls command (that's the letter l followed by the letter s , short for list ) and take a quick look at what is in them. Set up the \"prefix\" path to your data as necessary. (Here, we assume you put the ts_exper1 folder into your Matlab userpath folder but you can put it anywhere. Code block 2.1.2.1. Type this in to Matlab: \u00b6 prefix = [ userpath filesep 'Documents' filesep 'NDI' ]; % or '/Users/yourusername/Desktop/' if you put it on the desktop perhaps ls ([ prefix filesep 'ts_exper1' filesep 't*' ]); % list all the files in the t0000N folders We wrote a short function so that you can see the raw voltage recording and the stimulus timing information. Each stimulus appears as a number and its duration is indicated by the black bar. You can pan with the mouse to scroll through the recording. Code block 2.1.2.2. Type this in to Matlab: \u00b6 my_smr_file = fullfile ( prefix , 'ts_exper1' , 't00001' , 'spike2data.smr' ) ndi . example . tutorial . plottreeshrewdata ( my_smr_file ); You should see a Matlab window that looks like this, and when you hover your mouse over the image, it should turn into a \"hand\" that allows you to drag and pan around. 2.1.3 Specifying the metadata that NDI needs to read the experiment \u00b6 In this example, we have already prepared the metadata files that are necessary for NDI to read the data. Let's look at them in turn. First, we need to tell NDI what probes we have in our experiment. A probe is anything that measures or stimulates; one end of a probe is connected to a subject , and the other end of a probe is connected to a data acquisition device. We tell NDI how the probe is connected by creating an ndi.epoch.epochprobemap . Usually, we do this with a little code that instructs NDI how to read this information directly from the laboratory's own file information, but in this example we will use the generic ndi.epoch.epochprobemap_daqsystem object, which reads in a simple tab-delimited text file. Let's print the probemap.txt file for directory t00001 : Code block 2.1.3.1. Type this in to Matlab: \u00b6 type ( fullfile ( prefix , 'ts_exper1' , 't00001' , 'probemap.txt' )) You will see a tab-delimited text table that looks like the following. In the Matlab command window, the tabs may not line up, so don't be concerned if it doesn't look like a nice formatted table. name reference type devicestring subjectstring ctx 1 n-trode ced_daqsystem:ai11 treeshrew_12345@mylab.org vis_stim 1 stimulator vis_daqsystem:mk30;text30;md1 treeshrew_12345@mylab.org This text file has all of the information to specify the probe and its connections. It has a name for the probe that is meaningful to the user, and the reference specifies an identifier that groups the recordings of the probe. Typically, when the probe is in one physical position, the reference number is kept the same, but when the probe is moved (such as when an electrode is advanced), the reference number is incremented. This tells NDI to try to combine information from recordings that have the same name and reference. type tells NDI what type of probe it is. There are a variety of pre-determined types, and this type instructs NDI (via this file ) which probe object type to create in software. Second, we need to specify the stimulus parameters metadata. Typically, one would create a metadata reader for ones own lab so that the native data can be read directly, but here we have made another tab-delimited text file with the parameters. You can read this for yourself by typing the following: Code block 2.1.3.2. Type this in to Matlab: \u00b6 type ( fullfile ( prefix , 'ts_exper1' , 't00001' , 'stims.tsv' )) 2.1.4 Gaining acess to the data in NDI: ndi.session and ndi.daq.system objects \u00b6 Now all that remains is to open the data directory as an ndi.session object, and make ndi.daq.system objects to read your data. We will use an ndi.session.dir object, which allows us to read information from a directory (folder) on disk. We will create a new ndi.system object by calling the constructor with the reference name we wish to give to the session and the pathname to our data: Code block 2.1.4.1. Type this in to Matlab: \u00b6 S = ndi . session . dir ( 'ts_exper1' ,[ prefix filesep 'ts_exper1' ]) Now you have made a new NDI session. The session is brand new, and doesn't know about any of the devices we used in our experiment. So, if we try to see if there are any probes, we will see that it doesn't know of any: Code block 2.1.4.2. Type this in to Matlab: \u00b6 S . getprobes () Unless you ran this demo before, you won't see any probes here (it will return an empty cell array). We need to make new ndi.daq.system objects for our data acquisition system and our stimulator. Our devices are multifunction data acquisition systems, so we use the ndi.daq.system.mfdaq subtype. An ndi.daq.system object consists of three components: an ndi.file.navigator object whose job it is to find the files or streams associated with each epoch of data, an ndi.daq.reader object whose job it is to read the raw data from the files, and an ndi.daq.metadatareader (optionally) whose job it is to read any metadata associated with the epoch (such as stimulus parameter information). First, we will build an ndi.daq.system.mfdaq object that we will call 'ced_daqsystem' to read the electrode data from our CED SMR files. Code block 2.1.4.3. Type this in to Matlab: \u00b6 ced_filenav = ndi . file . navigator ( S , { '.*\\.smr\\>' , 'probemap.txt' }, ... 'ndi.epoch.epochprobemap_daqsystem' , 'probemap.txt' ); ced_rdr = ndi . daq . reader . mfdaq . cedspike2 (); ced_system = ndi . daq . system . mfdaq ( 'ced_daqsystem' , ced_filenav , ced_rdr ); % if you haven't already added the daq system, you can add it here: S . daqsystem_add ( ced_system ); Note: If you ran the tutorial before, you may have added ced_system to your session S already. That's fine, you'll get an error if you try to do it again. If you want to remove all your daq systems, you can call ndi.session.daqsystem_clear() by typing S.daqsystem_clear() and then you can add them again. Let's look at the epochs that ced_system can find, in order to understand how it searches for epochs: Code block 2.1.4.4 Type this into Matlab \u00b6 % let's look at the epochs the daq.system can find et = ced_system . epochtable () % should see a 4 element answer f = ced_system . filenavigator . getepochfiles ( 1 ) % you should see the files from epoch 1, t00001 Second, we will build an ndi.daq.system.mfdaq for our visual stimulus system. Code block 2.1.4.5. Type this in to Matlab: \u00b6 vis_filenav = ndi . file . navigator ( S , { '.*\\.smr\\>' , 'probemap.txt' , 'stims.tsv' }, ... 'ndi.epoch.epochprobemap_daqsystem' , 'probemap.txt' ); vis_rdr = ndi . daq . reader . mfdaq . cedspike2 (); vis_mdrdr = ndi . daq . metadatareader ( 'stims.tsv' ); vis_system = ndi . daq . system . mfdaq ( 'vis_daqsystem' , vis_filenav , vis_rdr , { vis_mdrdr }); % if you haven't already added the daq system, you can add it here: S . daqsystem_add ( vis_system ); Last, we will tell NDI how these devices are synchronized with each other. These two daq systems have a file in common ( spike2data.smr ), which means that they have a common time base, but NDI doesn't yet know that the two daq systems can be synchronized. Here we add a \"syncrule\" that tells NDI that any daq systems that share at least 2 files per epoch also share a common time clock for that epoch. Code block 2.1.4.6. Type this in to Matlab: \u00b6 nsf = ndi . time . syncrule . filematch ( struct ( 'number_fullpath_matches' , 2 )); S . syncgraph_addrule ( nsf ); 2.1.5 Opening the data in NDI: accessing probes via from ndi.daq.system.mfdaq \u00b6 Now we can use NDI to see the probes that these daq systems can find, and to access the data from those probes. Let's look at the electrode probe data first. Code block 2.1.5.1. Type this in to Matlab: \u00b6 p = S . getprobes () % get all of the probes that are in the ndi.session S for i = 1 : numel ( p ), p { i }, end ; % display the probe information for each probe % look at the number of epochs recorded for probe 1 p_ctx1_list = S . getprobes ( 'name' , 'ctx' , 'reference' , 1 ) % returns a cell array of matches p_ctx1 = p_ctx1_list { 1 }; % take the first one, should be the only one et = p_ctx1 . epochtable () for i = 1 : numel ( et ), et ( i ), end ; % display the epoch table entries epoch_to_read = 1 ; You can see that probe 1 has a name of ctx , a reference of 1 , and it is of type n-trode , or an n-channel electrode. It has a software object type of ndi.probe.timeseries.mfdaq , which simply means it is associated with multifunction DAQ systems and returns timeseries observations. Now let's read data from our probe p_ctx1 and plot the data: Code block 2.1.5.2. Type this into Matlab \u00b6 [ data , t , timeref_p_ctx1 ]= p_ctx1 . readtimeseries ( epoch_to_read , - Inf , Inf ); % read all data from epoch 1 figure ( 100 ); plot ( t , data ); xlabel ( 'Time(s)' ); ylabel ( 'Voltage (V)' ); set ( gca , 'xlim' ,[ t ( 1 ) t ( end )]); box off ; This code calls an important function for reading data from probes: ndi.timeseries.readtimeseries : This code is documentation; do not type into Matlab \u00b6 [ D , T , TIMEREF ] = ndi . timeseries . readtimeseries ( EPOCH_OR_TIMEREF , T0 , T1 ) % Reads data and timestamps from an ndi.timeseries.readtimeseries object with respect % to a specific epoch or an ndi.time.timereference object, from time T0 to T1. When analyzing data or writing apps to analyze data, ndi.timeseries.readtimeseries is one of the most commonly called functions. Now let's also look at our stimulator probe vis_stim . First, let's examine the epochs that are known to vis_stim : Code block 2.1.5.3. Type this in to Matlab: \u00b6 p_visstim_list = S . getprobes ( 'name' , 'vis_stim' , 'reference' , 1 ) % returns a cell array of matches p_visstim = p_visstim_list { 1 }; % take the first one, should be the only one et = p_visstim . epochtable () for i = 1 : numel ( et ), et ( i ), end ; % display the epoch table entries Now let's read the data from our stimulator. To do this, we are going to ask NDI to read the stimulus timing information in the time units of our electrode probe p_ctx . You'll notice that when we read data from p_ctx1 , readtimeseries returned an ndi.time.timereference object timeref_p_ctx1 . Let's examine this quickly: Code block 2.1.5.4. Type this in to Matlab: \u00b6 timeref_p_ctx1 You'll see a structure with the following fields: timeref_p_ctx1 timereference with properties referent [1x1 ndi.probe.timeseries.mfdaq] clocktype [1x1 ndi.time.clocktype] epoch 1 time 0 session_ID '412687ba08e28694_c0d9c07d0b8726cf' In NDI, one can refer to time with respect to a variety of different clocks, which is helpful because daq systems typically do not have access to a global clock. We can now ask for the time of the stimulus presentations with respect to our electrode's clock, and add the onset times to the graph. Code block 2.1.5.5. Type this in to Matlab: \u00b6 [ data , t , timeref_stim ]= p_visstim . readtimeseries ( timeref_p_ctx1 , - Inf , Inf ); % read all data from epoch 1 of p_ctx1 ! figure ( 100 ); hold on ; vlt . neuro . stimulus . plot_stimulus_timeseries ( 7 , t . stimon , t . stimon + 2 , 'stimid' , data . stimid ); Let's look at what readtimeseries returned in the case of a stimulator. It is a little different than when being used with regularly-sampled data. Code block 2.1.5.6. Type this in to Matlab: \u00b6 t , % show timestamps t . stimon , data , % show data data . stimid , data . parameters { 1 } Here we examined several fields of the variables data and t returned from readtimeseries from our ndi.probe.timeseries.stimulator . You can see that t is a structure with 2 fields, stimon and stimoff . Our system kept track of when each stimulus began, but in these recordings, we did not have our data acquisition system keep track of when our stimulus turned off. (For later analysis, we will need to read this from the stimulus parameters.) You can also see that data has some metadata about the stimuli. It has the ID number of each stimulus that was shown ( data.stimid(1) is the stimulus that turned on at t.stimon(1) ), and it has the parameters of each stimulus. data.parameters{1} is the parameters of the stimulus with ID number 1. 2.1.6 Discussion/Feedback \u00b6 This concludes our tutorial on the fully manual way of reading data through NDI. In the next tutorial, we'll explore how to create a couple of code objects that read our data directly from a lab's internal structure. Post comments, bugs, questions, or discuss .","title":"2.1 Reading an example dataset"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#tutorial-2-analyzing-your-first-electrophysiology-experiment-with-ndi","text":"","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#21-reading-an-example-dataset","text":"We will start with learning to read an example dataset into NDI. We assume you have already installed NDI and taken the introductory tutorial of the NDI model . These data are available in a compressed folder here . You can put the folder anywhere, but we will assume that you put them in your MATLAB/Documents/NDI folder, where MATLAB is your normal user path in Matlab (usually /Users/username/Documents/MATLAB on a Mac). Normally, we'd use some helper functions to open our data to make this process even easier, but this tutorial takes the user through the full manual process for training purposes.","title":"2.1: Reading an example dataset"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#211-introduction-to-the-experiment","text":"These data are single neuron recordings made with electrodes in the anesthetized tree shrew visual as a part of Van Hooser et al. 2013 . This example data is a very small subset of the original data for the purposes of illustration. In this experiment, a single unit recording electrode was inserted into either lateral geniculate nucleus or V1. The electrode was connected to an amplifier, and the output signal was recorded by a Cambridge Electronic Design (CED) micro1401 digital acquisition board. A CED Spike2 software script was used that stored 1 recording epoch per folder. In software, the voltage from the electrode was assigned to channel 11. A visual stimulus monitor was set up in front of the animal, and visual stimuli were generated by custom software running on a separate computer. A record of the stimulus parameters was stored in the epoch folder in a file called stims.mat , and stimulus timing information was delievered to the digital inputs of the micro1401 in the form of a stimulus onset trigger and an 8-bit stimulus code signal that were generated by the stimulus computer.","title":"2.1.1 Introduction to the experiment"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#212-introduction-to-the-data","text":"The data are in a folder called ts_exper1 . It contains recordings of two neurons, an LGN neuron and a V1 neuron, to presentation of sinusoidal gratings that either vary in orientation or in spatial frequency. The data as provided by the host lab are organized into subfolders, named t00001 , t00002 , t00003 , and t00004 . The first two folders are recordings of the LGN neuron, and the second two folders are recordings of the V1 neuron. Each t0000N folder has 3 files: probemap.txt - a file that we made for NDI that describe what probes are recorded in this folder spike2data.smr - a CED Spike2 file that has the raw electrophysiology data and the stimulus timing information stims.mat - A Matlab file that has detailed parameters of the stimuli that were run First, let's list these files using the ls command (that's the letter l followed by the letter s , short for list ) and take a quick look at what is in them. Set up the \"prefix\" path to your data as necessary. (Here, we assume you put the ts_exper1 folder into your Matlab userpath folder but you can put it anywhere.","title":"2.1.2 Introduction to the data"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2121-type-this-in-to-matlab","text":"prefix = [ userpath filesep 'Documents' filesep 'NDI' ]; % or '/Users/yourusername/Desktop/' if you put it on the desktop perhaps ls ([ prefix filesep 'ts_exper1' filesep 't*' ]); % list all the files in the t0000N folders We wrote a short function so that you can see the raw voltage recording and the stimulus timing information. Each stimulus appears as a number and its duration is indicated by the black bar. You can pan with the mouse to scroll through the recording.","title":"Code block 2.1.2.1. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2122-type-this-in-to-matlab","text":"my_smr_file = fullfile ( prefix , 'ts_exper1' , 't00001' , 'spike2data.smr' ) ndi . example . tutorial . plottreeshrewdata ( my_smr_file ); You should see a Matlab window that looks like this, and when you hover your mouse over the image, it should turn into a \"hand\" that allows you to drag and pan around.","title":"Code block 2.1.2.2. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#213-specifying-the-metadata-that-ndi-needs-to-read-the-experiment","text":"In this example, we have already prepared the metadata files that are necessary for NDI to read the data. Let's look at them in turn. First, we need to tell NDI what probes we have in our experiment. A probe is anything that measures or stimulates; one end of a probe is connected to a subject , and the other end of a probe is connected to a data acquisition device. We tell NDI how the probe is connected by creating an ndi.epoch.epochprobemap . Usually, we do this with a little code that instructs NDI how to read this information directly from the laboratory's own file information, but in this example we will use the generic ndi.epoch.epochprobemap_daqsystem object, which reads in a simple tab-delimited text file. Let's print the probemap.txt file for directory t00001 :","title":"2.1.3 Specifying the metadata that NDI needs to read the experiment"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2131-type-this-in-to-matlab","text":"type ( fullfile ( prefix , 'ts_exper1' , 't00001' , 'probemap.txt' )) You will see a tab-delimited text table that looks like the following. In the Matlab command window, the tabs may not line up, so don't be concerned if it doesn't look like a nice formatted table. name reference type devicestring subjectstring ctx 1 n-trode ced_daqsystem:ai11 treeshrew_12345@mylab.org vis_stim 1 stimulator vis_daqsystem:mk30;text30;md1 treeshrew_12345@mylab.org This text file has all of the information to specify the probe and its connections. It has a name for the probe that is meaningful to the user, and the reference specifies an identifier that groups the recordings of the probe. Typically, when the probe is in one physical position, the reference number is kept the same, but when the probe is moved (such as when an electrode is advanced), the reference number is incremented. This tells NDI to try to combine information from recordings that have the same name and reference. type tells NDI what type of probe it is. There are a variety of pre-determined types, and this type instructs NDI (via this file ) which probe object type to create in software. Second, we need to specify the stimulus parameters metadata. Typically, one would create a metadata reader for ones own lab so that the native data can be read directly, but here we have made another tab-delimited text file with the parameters. You can read this for yourself by typing the following:","title":"Code block 2.1.3.1. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2132-type-this-in-to-matlab","text":"type ( fullfile ( prefix , 'ts_exper1' , 't00001' , 'stims.tsv' ))","title":"Code block 2.1.3.2. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#214-gaining-acess-to-the-data-in-ndi-ndisession-and-ndidaqsystem-objects","text":"Now all that remains is to open the data directory as an ndi.session object, and make ndi.daq.system objects to read your data. We will use an ndi.session.dir object, which allows us to read information from a directory (folder) on disk. We will create a new ndi.system object by calling the constructor with the reference name we wish to give to the session and the pathname to our data:","title":"2.1.4 Gaining acess to the data in NDI: ndi.session and ndi.daq.system objects"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2141-type-this-in-to-matlab","text":"S = ndi . session . dir ( 'ts_exper1' ,[ prefix filesep 'ts_exper1' ]) Now you have made a new NDI session. The session is brand new, and doesn't know about any of the devices we used in our experiment. So, if we try to see if there are any probes, we will see that it doesn't know of any:","title":"Code block 2.1.4.1. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2142-type-this-in-to-matlab","text":"S . getprobes () Unless you ran this demo before, you won't see any probes here (it will return an empty cell array). We need to make new ndi.daq.system objects for our data acquisition system and our stimulator. Our devices are multifunction data acquisition systems, so we use the ndi.daq.system.mfdaq subtype. An ndi.daq.system object consists of three components: an ndi.file.navigator object whose job it is to find the files or streams associated with each epoch of data, an ndi.daq.reader object whose job it is to read the raw data from the files, and an ndi.daq.metadatareader (optionally) whose job it is to read any metadata associated with the epoch (such as stimulus parameter information). First, we will build an ndi.daq.system.mfdaq object that we will call 'ced_daqsystem' to read the electrode data from our CED SMR files.","title":"Code block 2.1.4.2. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2143-type-this-in-to-matlab","text":"ced_filenav = ndi . file . navigator ( S , { '.*\\.smr\\>' , 'probemap.txt' }, ... 'ndi.epoch.epochprobemap_daqsystem' , 'probemap.txt' ); ced_rdr = ndi . daq . reader . mfdaq . cedspike2 (); ced_system = ndi . daq . system . mfdaq ( 'ced_daqsystem' , ced_filenav , ced_rdr ); % if you haven't already added the daq system, you can add it here: S . daqsystem_add ( ced_system ); Note: If you ran the tutorial before, you may have added ced_system to your session S already. That's fine, you'll get an error if you try to do it again. If you want to remove all your daq systems, you can call ndi.session.daqsystem_clear() by typing S.daqsystem_clear() and then you can add them again. Let's look at the epochs that ced_system can find, in order to understand how it searches for epochs:","title":"Code block 2.1.4.3. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2144-type-this-into-matlab","text":"% let's look at the epochs the daq.system can find et = ced_system . epochtable () % should see a 4 element answer f = ced_system . filenavigator . getepochfiles ( 1 ) % you should see the files from epoch 1, t00001 Second, we will build an ndi.daq.system.mfdaq for our visual stimulus system.","title":"Code block 2.1.4.4 Type this into Matlab"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2145-type-this-in-to-matlab","text":"vis_filenav = ndi . file . navigator ( S , { '.*\\.smr\\>' , 'probemap.txt' , 'stims.tsv' }, ... 'ndi.epoch.epochprobemap_daqsystem' , 'probemap.txt' ); vis_rdr = ndi . daq . reader . mfdaq . cedspike2 (); vis_mdrdr = ndi . daq . metadatareader ( 'stims.tsv' ); vis_system = ndi . daq . system . mfdaq ( 'vis_daqsystem' , vis_filenav , vis_rdr , { vis_mdrdr }); % if you haven't already added the daq system, you can add it here: S . daqsystem_add ( vis_system ); Last, we will tell NDI how these devices are synchronized with each other. These two daq systems have a file in common ( spike2data.smr ), which means that they have a common time base, but NDI doesn't yet know that the two daq systems can be synchronized. Here we add a \"syncrule\" that tells NDI that any daq systems that share at least 2 files per epoch also share a common time clock for that epoch.","title":"Code block 2.1.4.5. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2146-type-this-in-to-matlab","text":"nsf = ndi . time . syncrule . filematch ( struct ( 'number_fullpath_matches' , 2 )); S . syncgraph_addrule ( nsf );","title":"Code block 2.1.4.6. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#215-opening-the-data-in-ndi-accessing-probes-via-from-ndidaqsystemmfdaq","text":"Now we can use NDI to see the probes that these daq systems can find, and to access the data from those probes. Let's look at the electrode probe data first.","title":"2.1.5 Opening the data in NDI: accessing probes via from ndi.daq.system.mfdaq"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2151-type-this-in-to-matlab","text":"p = S . getprobes () % get all of the probes that are in the ndi.session S for i = 1 : numel ( p ), p { i }, end ; % display the probe information for each probe % look at the number of epochs recorded for probe 1 p_ctx1_list = S . getprobes ( 'name' , 'ctx' , 'reference' , 1 ) % returns a cell array of matches p_ctx1 = p_ctx1_list { 1 }; % take the first one, should be the only one et = p_ctx1 . epochtable () for i = 1 : numel ( et ), et ( i ), end ; % display the epoch table entries epoch_to_read = 1 ; You can see that probe 1 has a name of ctx , a reference of 1 , and it is of type n-trode , or an n-channel electrode. It has a software object type of ndi.probe.timeseries.mfdaq , which simply means it is associated with multifunction DAQ systems and returns timeseries observations. Now let's read data from our probe p_ctx1 and plot the data:","title":"Code block 2.1.5.1. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2152-type-this-into-matlab","text":"[ data , t , timeref_p_ctx1 ]= p_ctx1 . readtimeseries ( epoch_to_read , - Inf , Inf ); % read all data from epoch 1 figure ( 100 ); plot ( t , data ); xlabel ( 'Time(s)' ); ylabel ( 'Voltage (V)' ); set ( gca , 'xlim' ,[ t ( 1 ) t ( end )]); box off ; This code calls an important function for reading data from probes: ndi.timeseries.readtimeseries :","title":"Code block 2.1.5.2. Type this into Matlab"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#this-code-is-documentation-do-not-type-into-matlab","text":"[ D , T , TIMEREF ] = ndi . timeseries . readtimeseries ( EPOCH_OR_TIMEREF , T0 , T1 ) % Reads data and timestamps from an ndi.timeseries.readtimeseries object with respect % to a specific epoch or an ndi.time.timereference object, from time T0 to T1. When analyzing data or writing apps to analyze data, ndi.timeseries.readtimeseries is one of the most commonly called functions. Now let's also look at our stimulator probe vis_stim . First, let's examine the epochs that are known to vis_stim :","title":"This code is documentation; do not type into Matlab"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2153-type-this-in-to-matlab","text":"p_visstim_list = S . getprobes ( 'name' , 'vis_stim' , 'reference' , 1 ) % returns a cell array of matches p_visstim = p_visstim_list { 1 }; % take the first one, should be the only one et = p_visstim . epochtable () for i = 1 : numel ( et ), et ( i ), end ; % display the epoch table entries Now let's read the data from our stimulator. To do this, we are going to ask NDI to read the stimulus timing information in the time units of our electrode probe p_ctx . You'll notice that when we read data from p_ctx1 , readtimeseries returned an ndi.time.timereference object timeref_p_ctx1 . Let's examine this quickly:","title":"Code block 2.1.5.3. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2154-type-this-in-to-matlab","text":"timeref_p_ctx1 You'll see a structure with the following fields: timeref_p_ctx1 timereference with properties referent [1x1 ndi.probe.timeseries.mfdaq] clocktype [1x1 ndi.time.clocktype] epoch 1 time 0 session_ID '412687ba08e28694_c0d9c07d0b8726cf' In NDI, one can refer to time with respect to a variety of different clocks, which is helpful because daq systems typically do not have access to a global clock. We can now ask for the time of the stimulus presentations with respect to our electrode's clock, and add the onset times to the graph.","title":"Code block 2.1.5.4. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2155-type-this-in-to-matlab","text":"[ data , t , timeref_stim ]= p_visstim . readtimeseries ( timeref_p_ctx1 , - Inf , Inf ); % read all data from epoch 1 of p_ctx1 ! figure ( 100 ); hold on ; vlt . neuro . stimulus . plot_stimulus_timeseries ( 7 , t . stimon , t . stimon + 2 , 'stimid' , data . stimid ); Let's look at what readtimeseries returned in the case of a stimulator. It is a little different than when being used with regularly-sampled data.","title":"Code block 2.1.5.5. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2156-type-this-in-to-matlab","text":"t , % show timestamps t . stimon , data , % show data data . stimid , data . parameters { 1 } Here we examined several fields of the variables data and t returned from readtimeseries from our ndi.probe.timeseries.stimulator . You can see that t is a structure with 2 fields, stimon and stimoff . Our system kept track of when each stimulus began, but in these recordings, we did not have our data acquisition system keep track of when our stimulus turned off. (For later analysis, we will need to read this from the stimulus parameters.) You can also see that data has some metadata about the stimuli. It has the ID number of each stimulus that was shown ( data.stimid(1) is the stimulus that turned on at t.stimon(1) ), and it has the parameters of each stimulus. data.parameters{1} is the parameters of the stimulus with ID number 1.","title":"Code block 2.1.5.6. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment/1_example_dataset/#216-discussionfeedback","text":"This concludes our tutorial on the fully manual way of reading data through NDI. In the next tutorial, we'll explore how to create a couple of code objects that read our data directly from a lab's internal structure. Post comments, bugs, questions, or discuss .","title":"2.1.6 Discussion/Feedback"},{"location":"tutorials/analyzing_first_physiology_experiment/2_theautomatedway/","text":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI \u00b6 2.2 Automating the reading of data from your rig or lab or collaborator \u00b6 In the previous tutorial, we reviewed the steps necessary to create ndi.daq.system objects to read in a dataset, and to add the metadata that is necessary to tell NDI about the contents of each epoch. Most labs use the same data acquisition devices and file organization schemes over and over again, and many labs also store the necessary metadata that describes the probes and subjects that are acquired. NDI allows you to create small software objects that read this metadata directly from the laboratory files. Then, opening an experimental session becomes as simple as a one line command such as S = ndi . setup . vhlab ([ reference ],[ foldername ]); Once this command has been run once, the directory can be opened with the standard ndi.session.dir command thereafter (though there is no harm to re-issuing the ndi.setup.* command). It's our guess that many labs have at least one person handy with code, and this task might fall to them. This tutorial is written for people who already have some familiarity with coding. If you'd like help creating these functions for your lab, use the issue tracker to post a question. Creating these automatic readers is the biggest stress point in using NDI. The system is relatively easy to use once you are able to read your data! While there are many ways to organize code for custom setups, we have created a motif that is easy to follow. The ndi package in Matlab has a subpackage called setup . Here, we have placed m-files that create an ndi.session with the default settings for various labs or users. The setup package also has a subpackage structure that mimics the subpackage structure of ndi . In Matlab, packages are denoted by putting a + in the folder name: +ndi/+setup/ +daq/ +metadata/ +metadatareader/ +reader/ +system/ 2.2.1 Download an experiment with all vhlab metadata left intact \u00b6 Please download an example data directory called ts_exper2 . Be sure to unzip the files, and we recommend placing them in your Matlab userpath under 'MATLAB/Documents/NDI/' as before. This directory contains the files that were generated at the time of acquisition on Steve's rig in the Fitzpatrick lab at Duke, which is nearly identical to the format that we use in the vhlab now. You'll see that these directories have a few more files. It's not necessary to follow the identities of the files in detail, but let's look at what is in t00001 as an example: t00001/ filetime.txt - The time of the acquisition beginning in seconds from midnight reference.txt = A file describing the probes that are present in this directory spike2data.S2R - This is an irrelevant file! But it's there every time. spike2data.smr - The raw data file acquired by CED's program Spike2 (data acquired via Micro1401) spike2datalog.txt - A text log file (not relevant) stims.mat - The record of stimulation as produced by the stimulus computer. It uses NewStim stimuli and is written by VH lab's RunExperiment program. stimtimes.txt - A text file where each line contains a) the stimulus onset trigger, b) the stimulus ID number between 1-255, and c) an array of video frame trigger times (when the video frame was changed) twophotontimes.txt - A record of triggers of all 2-photon frames. None in this experiment. verticalblanking.txt - A record of each refresh of the monitor. This was not yet used in these experiments but is now part of the VH lab's suite. vhspike2_channelgrouping.txt - A text file that indicates which acquisition channels of our vhspike2 DAQ system are connected to each probe. 2.2.2 Example NDI-matlab files for vhlab \u00b6 To import data from our lab, we created 4 Matlab files: +ndi/+setup/vhlab.m - A function that builds an ndi.session object with daq systems that read from our lab's major devices. +ndi/+setup/+daq/+metadata/epochprobemap_daqsystem_vhlab.m - A class that examines our lab's metadata files that describe the mapping between probes and data acquisition systems and returns an epochprobemap that NDI can interpret. Overrides the default ndi.epoch.epochprobemap_daqsystem.m class that reads the probemap.txt text files we saw in Tutorial 2.1 . +ndi/+setup/+daq/+reader/+mfdaq/+stimulus/vhlabvisspike2.m - A class that reads stimulus event data from our custom acquisition files. +ndi/+daq/+metadatareader/NewStimStims.m - A class that imports stimulus metadata from our lab's open source NewStim package. (We put it in NDI proper because it is an open source program, not intended solely for our lab.) 2.2.3 Creating a setup file. \u00b6 The setup file accomplishes, in an automated fashion, exactly what we did in Tutorial 2.1 : it opens an ndi.session with a particular reference name and directory path, and adds the daq systems that are necessary to read the probe data. It normally lives in +ndi/+setup/LABORINVESTIGATORNAME.m . We include the code here: Code block 2.2.3.1: Content of +ndi/+setup/vhlab.m . (Do not type into Matlab command line.) \u00b6 function S = vhlab ( ref, dirname ) % ndi.setup.vhlab - initialize an ndi.session.dir with VHLAB devices % % S = ndi.setup.vhlab(REF, DIRNAME) % % Initializes an ndi.session.dir object for the directory % DIRNAME with the standard compliment of VHLAB devices, as % found in ndi.setup.daq.system.vhlab. % % If the devices are already added, they are not re-created. % S = ndi . session . dir ( ref , dirname ); vhlabdevnames = ndi . setup . daq . system . vhlab (); % returns list of daq system names for i = 1 : numel ( vhlabdevnames ), dev = S . daqsystem_load ( 'name' , vhlabdevnames { i }); if isempty ( dev ), S = ndi . setup . daq . system . vhlab ( S , vhlabdevnames { i }); end end % update SYNCGRAPH nsf = ndi . time . syncrule . filematch ( struct ( 'number_fullpath_matches' , 2 )); n_intan2spike2 = ndi . time . syncrule . filefind ( struct ( 'number_fullpath_matches' , 1 , ... 'syncfilename' , 'vhintan_intan2spike2time.txt' , ... 'daqsystem1' , 'vhintan' , 'daqsystem2' , 'vhvis_spike2' )); S . syncgraph_addrule ( nsf ); S . syncgraph_addrule ( n_intan2spike2 ); This function calls another function that we will see in a minute ( ndi.setup.daq.system.vhlab ) that actually builds the daq system objects that we use in our lab. At the end of this function, 2 ndi.time.syncrules are added that describe how synchronization is performed across our devices. If 2 or more of the same files are present in an epoch, then it is assumed that files are from the same underlying device and they are assumed to have the same time clock. Our custom acquisition code also produces a file vhintan_intan2spike2time.txt that has the time shift and scaling between our Intan acquisition system and our CED Spike2 acquisition system, and we instruct NDI to use that file to synchronize the 2 devices using shift and scale in that file. 2.2.4 Creating a function that creates the daq systems for a lab \u00b6 We also write a function that builds the daq systems that we use in our lab. This process involves 1) naming the daq system, 2) specifying the ndi.daq.reader that is used, 3) specifying any ndi.daq.metadatareader if necessary, and 4) specifying the ndi.file.navigator to find the files that comprise each epoch. If this function here is called with 0 input arguments, then it returns a list of all known daq systems objects for our lab ( 'vhintan', 'vhspike2', 'vhvis_spike2' ). Otherwise, if it is called with the name of a daq system that this function knows how to build, it builds it. It adds the appropriate ndi.daq.reader , ndi.daq.metadatareader , and ndi.file.navigator . Code block 2.2.4.1: Content of +ndi/+setup/+daq/+system/vhlab.m . (Do not type into Matlab command line.) \u00b6 function S = vhlab ( S, daqsystemname ) % ndi.setup.daq.system.vhlab - initialize daq systems used by VHLAB % % S = ndi.setup.daq.system.vhlab(S, DEVNAME) % % Creates daq systems that look for files in the VHLAB standard recording % scheme, where data from different epochs are organized into % subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the % name a daq systems in the table below. These daq systems are added to the ndi.session % object S. If DEVNAME is a cell list of strings, then multiple items are added. % % If the function is called with no input arguments, then it returns a list % of all valid device names. % % Each epoch is defined by the presence of a 'reference.txt' file, as well % as specific files that are needed by each device as described below. % % Devices created | Description % |------------------|--------------------------------------------------| % | vhintan | ndi.daq.system.mfdaq that looks for files | % | | 'vhintan_channelgrouping.txt' and '*.rhd' | % | vhspike2 | ndi.daq.system.mfdaq that looks for files | % | | 'vhspike2_channelgrouping.txt' and '*.smr' | % | vhvis_spike2 | ndi.daq.system.mfdaq.stimulus that looks for | % | | files 'stimtimes.txt', 'verticalblanking.txt',| % | | 'stims.mat', and 'spike2data.smr'. | % ----------------------------------------------------------------------- % % See also: ndi.file.navigator.epochdir if nargin == 0 , S = { 'vhintan' , 'vhspike2' , 'vhvis_spike2' }; return ; end ; if iscell ( daqsystemname ), for i = 1 : length ( daqsystemname ), S = ndi . setup . daq . system . vhlab ( S , daqsystemname { i }); end return ; end % all of our daq systems use this custom epochprobemap class epochprobemapclass = 'ndi.setup.daq.metadata.epochprobemap_daqsystem_vhlab' ; switch daqsystemname , case 'vhintan' , fileparameters = { 'reference.txt' , '.*\\.rhd\\>' , 'vhintan_channelgrouping.txt' }; readerobjectclass = [ 'ndi.daq.reader.mfdaq.intan' ]; epochprobemapfileparameters = { 'vhintan_channelgrouping.txt' }; mdr = {}; case 'vhspike2' , fileparameters = { 'reference.txt' , '.*\\.smr\\>' , 'vhspike2_channelgrouping.txt' }; readerobjectclass = [ 'ndi.daq.reader.mfdaq.cedspike2' ]; epochprobemapfileparameters = { 'vhspike2_channelgrouping.txt' }; mdr = {}; case 'vhvis_spike2' fileparameters = { 'reference.txt' , 'stimtimes.txt' , 'verticalblanking.txt' , ... 'stims.mat' , 'spike2data.smr' }; readerobjectclass = [ 'ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2' ]; epochprobemapfileparameters = { 'stimtimes.txt' }; mdr = { ndi . daq . metadatareader . NewStimStims ( 'stims.mat' )}; otherwise , error ([ 'Unknown device requested ' daqsystemname '.' ]); end ft = ndi . file . navigator . epochdir ( S , fileparameters , epochprobemapclass , epochprobemapfileparameters ); eval ([ 'dr = ' readerobjectclass '();' ]); mydev = ndi . daq . system . mfdaq ( daqsystemname , ft , dr , mdr ); % create the daq system object S = S . daqsystem_add ( mydev ); % add the daq system object to our ndi.session Let's look at the creation of these daq system objects in detail. vhintan - This daq system looks for groups of files with one file named reference.txt , a file that ends in .rhd , and another file called vhintan_channelgrouping.txt . These files are produced by the computer that runs our main acquisition on our rigs, when an Intan acquisition device is used. Together, reference.txt and vhintan_channelgrouping.txt have information about the probes that were used in that recording and the channel mapping of those probes. We will look at these in more detail later. We use the reader ndi.daq.reader.mfdaq.intan , which knows how to read channel data from Intan .rhd files. We tell our daq.system object that 'vhintan_channelgrouping.txt' is the file to use to read epochprobemap information (we will instruct it how to interpret the data in a later function), and there is no metadata reader mdr . We also tell ndi.file.navigator that all of these files will appear in subfolders within our main folder by using the ndi.file.navigator.epochdir class. vhspike2 - This daq system is very similar to vhintan , except that it looks for files that end in .smr and looks for a different epochmap metadata file ( vhspike2_channelgrouping.txt ). vhvis_spike2 - This system is more custom. It relies on text files that are generated by our scripts that run on our CED Micro1401 acquisition system: stimtimes.txt , verticalblanking.txt , spike2data.smr , and a file generated by our visual stimulation system called stims.mat . We add a metadatareader ndi.daq.metadatareader.NewStimStims that knows how to interpret the stims.mat file. We will cover this custom ndi.daq.reader next. 2.2.5 Creating a custom ndi.daq.reader.mfdaq.stimulus object: \u00b6 Our visual stimulation system produces a variety of event data, including information about stimulus onset and offset, the vertical refresh signal from the monitor, an 8-bit code for each stimulus ID, a video frame trigger (every time we update the image on the screen), and a signal we call the \"pretime\" trigger that is generally issued 0.5 seconds before a stimulus is begun (used for baseline subtracting in intrinsic signal imaging experiments among other applications). Our acquisition system running on a CED Micro1401 generates text files related to these events, and we propagate them through as a set of event channels. We define 5 fixed channels for our daq system: mk1 : a marker channel that indicates stim ON (+1) or stim OFF (-1) mk2 : a marker channel that indicates the 8-bit stimulus identifier (stimid) mk3 : a marker channel that indicates when the stimulus period opens (+1) and closes (-1); this includes interstimulus \"background\" time e1 : an event channel that indicates each frame trigger / video frame update e2 : an event channel that indicates the vertical refresh times of the stimulus monitor e3 : an event channel that indicates the pre-stimulus trigger (indicates stimulus is upcoming, usually 0.5s away) Rather than copying the entire code here, we will include a link to the file: ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.m . It should be relatively self-explanitory for someone with a coding background to read and mimic this file. 2.2.6 Creating a custom epochprobemap class \u00b6 In Tutorial 2.1 , we saw that each epoch of data had an associated epochprobemap that contained the following fields of information: name reference type devicestring subjectstring ctx 1 n-trode ced_daqsystem:ai11 treeshrew_12345@mylab.org vis_stim 1 stimulator vis_daqsystem:mk30;text30;md1 treeshrew_12345@mylab.org We need to write a substitute class that is a subclass of ndi.epoch.epochprobemap that reads the epoch information and returns all of this same information. In our vhlab session directories, we always have a single subject whose unique identifier is specified in a text file called subject.txt in the top directory. This file is read, and this text is used as the subjectstring for all probes. In each vhlab epoch directory, we have a file called reference.txt that includes the name, reference, and type of recording present in each epoch. Our class's creator reads this file, and uses it to pull out the name and reference number for all electrode (or imaging) probes. If our reference.txt file indicates that our vhlab \"type\" is singleEC (single extracellular) or 'ntrode', then it looks for other text files that contain a mapping between the name and reference of each probe and the channels that were used on a recording device to acquire it. In this experiment, we have vhspike2_channelgrouping.txt that indicates that our probe 'ctx | 1' was acquired on channel 11 of our CED Micro1401/Spike2 system. Finally, if a file named stimtimes.txt exists in the epoch directory, then we add in an epochprobemap entry for our visual stimulator: name reference type devicestring subjectstring vis_stim 1 stimulator vhvis_spike2:mk1-3;e1-3;md1 treeshrew_12345@mylab.org We will not reproduce the code here but refer the reader to the link for the source code of the class ndi.setup.epoch.epochprobemap_daqsystem_vhlab that is a subclass of ndi.epoch.epochprobemap_daqsystem . 2.2.7 Putting it all together \u00b6 Now that we have these pieces together, we can read our example data that we call ts_exper2 . We will pull up the same plots that we pulled up in Tutorial 2.1 . Code block 2.2.7.1 Type this into Matlab \u00b6 prefix = [ userpath filesep 'Documents' filesep 'NDI' ]; % if you put the folder somewhere else, edit this S = ndi . setup . vhlab ( 'ts_exper2' ,[ prefix filesep 'ts_exper2' ]); p_ctx1_list = S . getprobes ( 'name' , 'ctx' , 'reference' , 1 ) % returns a cell array of matches p_ctx1 = p_ctx1_list { 1 }; % take the first one, should be the only one epoch_to_read = 1 ; [ data , t , timeref_p_ctx1 ]= p_ctx1 . readtimeseries ( epoch_to_read , - Inf , Inf ); % read all data from epoch 1 figure ( 100 ); plot ( t , data ); xlabel ( 'Time(s)' ); ylabel ( 'Voltage (V)' ); set ( gca , 'xlim' ,[ t ( 1 ) t ( end )]); box off ; p_visstim_list = S . getprobes ( 'type' , 'stimulator' ) % returns a cell array of matches p_visstim = p_visstim_list { 1 }; % take the first one, should be the only one [ data , t , timeref_stim ]= p_visstim . readtimeseries ( timeref_p_ctx1 , - Inf , Inf ); % read all data from epoch 1 of p_ctx1 ! figure ( 100 ); hold on ; vlt . neuro . stimulus . plot_stimulus_timeseries ( 7 , t . stimon , t . stimoff , 'stimid' , data . stimid ); If you are paying close attention, you'll notice we got a little more information out of the readtimeseries command here. t.stimoff exists (it's extracted from our stimulus metadata), so we don't have to know the stimulus duration from elsewhere. That information is not directly accessible in the event record of the smr file, so there is an advantage to reading all the metadata that is available from all sources with a custom object. 2.2.8 Discussion/Feedback \u00b6 This concludes our tutorial on setting up code files to read one's own data and metadata into NDI. To help make this process clearer, we also include 3 other case studies in reading data (tutorials currently under construction): Alessandra Angelluci lab (reads unpublished recording) Don Katz lab (reads Mukherjee et al., 2019 ) Eve Marder lab (reads Hamood et al., 2015 ) Post comments, bugs, questions, or discuss .","title":"2.2 Automating data reading with NDI"},{"location":"tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#tutorial-2-analyzing-your-first-electrophysiology-experiment-with-ndi","text":"","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI"},{"location":"tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#22-automating-the-reading-of-data-from-your-rig-or-lab-or-collaborator","text":"In the previous tutorial, we reviewed the steps necessary to create ndi.daq.system objects to read in a dataset, and to add the metadata that is necessary to tell NDI about the contents of each epoch. Most labs use the same data acquisition devices and file organization schemes over and over again, and many labs also store the necessary metadata that describes the probes and subjects that are acquired. NDI allows you to create small software objects that read this metadata directly from the laboratory files. Then, opening an experimental session becomes as simple as a one line command such as S = ndi . setup . vhlab ([ reference ],[ foldername ]); Once this command has been run once, the directory can be opened with the standard ndi.session.dir command thereafter (though there is no harm to re-issuing the ndi.setup.* command). It's our guess that many labs have at least one person handy with code, and this task might fall to them. This tutorial is written for people who already have some familiarity with coding. If you'd like help creating these functions for your lab, use the issue tracker to post a question. Creating these automatic readers is the biggest stress point in using NDI. The system is relatively easy to use once you are able to read your data! While there are many ways to organize code for custom setups, we have created a motif that is easy to follow. The ndi package in Matlab has a subpackage called setup . Here, we have placed m-files that create an ndi.session with the default settings for various labs or users. The setup package also has a subpackage structure that mimics the subpackage structure of ndi . In Matlab, packages are denoted by putting a + in the folder name: +ndi/+setup/ +daq/ +metadata/ +metadatareader/ +reader/ +system/","title":"2.2 Automating the reading of data from your rig or lab or collaborator"},{"location":"tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#221-download-an-experiment-with-all-vhlab-metadata-left-intact","text":"Please download an example data directory called ts_exper2 . Be sure to unzip the files, and we recommend placing them in your Matlab userpath under 'MATLAB/Documents/NDI/' as before. This directory contains the files that were generated at the time of acquisition on Steve's rig in the Fitzpatrick lab at Duke, which is nearly identical to the format that we use in the vhlab now. You'll see that these directories have a few more files. It's not necessary to follow the identities of the files in detail, but let's look at what is in t00001 as an example: t00001/ filetime.txt - The time of the acquisition beginning in seconds from midnight reference.txt = A file describing the probes that are present in this directory spike2data.S2R - This is an irrelevant file! But it's there every time. spike2data.smr - The raw data file acquired by CED's program Spike2 (data acquired via Micro1401) spike2datalog.txt - A text log file (not relevant) stims.mat - The record of stimulation as produced by the stimulus computer. It uses NewStim stimuli and is written by VH lab's RunExperiment program. stimtimes.txt - A text file where each line contains a) the stimulus onset trigger, b) the stimulus ID number between 1-255, and c) an array of video frame trigger times (when the video frame was changed) twophotontimes.txt - A record of triggers of all 2-photon frames. None in this experiment. verticalblanking.txt - A record of each refresh of the monitor. This was not yet used in these experiments but is now part of the VH lab's suite. vhspike2_channelgrouping.txt - A text file that indicates which acquisition channels of our vhspike2 DAQ system are connected to each probe.","title":"2.2.1 Download an experiment with all vhlab metadata left intact"},{"location":"tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#222-example-ndi-matlab-files-for-vhlab","text":"To import data from our lab, we created 4 Matlab files: +ndi/+setup/vhlab.m - A function that builds an ndi.session object with daq systems that read from our lab's major devices. +ndi/+setup/+daq/+metadata/epochprobemap_daqsystem_vhlab.m - A class that examines our lab's metadata files that describe the mapping between probes and data acquisition systems and returns an epochprobemap that NDI can interpret. Overrides the default ndi.epoch.epochprobemap_daqsystem.m class that reads the probemap.txt text files we saw in Tutorial 2.1 . +ndi/+setup/+daq/+reader/+mfdaq/+stimulus/vhlabvisspike2.m - A class that reads stimulus event data from our custom acquisition files. +ndi/+daq/+metadatareader/NewStimStims.m - A class that imports stimulus metadata from our lab's open source NewStim package. (We put it in NDI proper because it is an open source program, not intended solely for our lab.)","title":"2.2.2 Example NDI-matlab files for vhlab"},{"location":"tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#223-creating-a-setup-file","text":"The setup file accomplishes, in an automated fashion, exactly what we did in Tutorial 2.1 : it opens an ndi.session with a particular reference name and directory path, and adds the daq systems that are necessary to read the probe data. It normally lives in +ndi/+setup/LABORINVESTIGATORNAME.m . We include the code here:","title":"2.2.3 Creating a setup file."},{"location":"tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#code-block-2231-content-of-ndisetupvhlabm-do-not-type-into-matlab-command-line","text":"function S = vhlab ( ref, dirname ) % ndi.setup.vhlab - initialize an ndi.session.dir with VHLAB devices % % S = ndi.setup.vhlab(REF, DIRNAME) % % Initializes an ndi.session.dir object for the directory % DIRNAME with the standard compliment of VHLAB devices, as % found in ndi.setup.daq.system.vhlab. % % If the devices are already added, they are not re-created. % S = ndi . session . dir ( ref , dirname ); vhlabdevnames = ndi . setup . daq . system . vhlab (); % returns list of daq system names for i = 1 : numel ( vhlabdevnames ), dev = S . daqsystem_load ( 'name' , vhlabdevnames { i }); if isempty ( dev ), S = ndi . setup . daq . system . vhlab ( S , vhlabdevnames { i }); end end % update SYNCGRAPH nsf = ndi . time . syncrule . filematch ( struct ( 'number_fullpath_matches' , 2 )); n_intan2spike2 = ndi . time . syncrule . filefind ( struct ( 'number_fullpath_matches' , 1 , ... 'syncfilename' , 'vhintan_intan2spike2time.txt' , ... 'daqsystem1' , 'vhintan' , 'daqsystem2' , 'vhvis_spike2' )); S . syncgraph_addrule ( nsf ); S . syncgraph_addrule ( n_intan2spike2 ); This function calls another function that we will see in a minute ( ndi.setup.daq.system.vhlab ) that actually builds the daq system objects that we use in our lab. At the end of this function, 2 ndi.time.syncrules are added that describe how synchronization is performed across our devices. If 2 or more of the same files are present in an epoch, then it is assumed that files are from the same underlying device and they are assumed to have the same time clock. Our custom acquisition code also produces a file vhintan_intan2spike2time.txt that has the time shift and scaling between our Intan acquisition system and our CED Spike2 acquisition system, and we instruct NDI to use that file to synchronize the 2 devices using shift and scale in that file.","title":"Code block 2.2.3.1: Content of +ndi/+setup/vhlab.m. (Do not type into Matlab command line.)"},{"location":"tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#224-creating-a-function-that-creates-the-daq-systems-for-a-lab","text":"We also write a function that builds the daq systems that we use in our lab. This process involves 1) naming the daq system, 2) specifying the ndi.daq.reader that is used, 3) specifying any ndi.daq.metadatareader if necessary, and 4) specifying the ndi.file.navigator to find the files that comprise each epoch. If this function here is called with 0 input arguments, then it returns a list of all known daq systems objects for our lab ( 'vhintan', 'vhspike2', 'vhvis_spike2' ). Otherwise, if it is called with the name of a daq system that this function knows how to build, it builds it. It adds the appropriate ndi.daq.reader , ndi.daq.metadatareader , and ndi.file.navigator .","title":"2.2.4 Creating a function that creates the daq systems for a lab"},{"location":"tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#code-block-2241-content-of-ndisetupdaqsystemvhlabm-do-not-type-into-matlab-command-line","text":"function S = vhlab ( S, daqsystemname ) % ndi.setup.daq.system.vhlab - initialize daq systems used by VHLAB % % S = ndi.setup.daq.system.vhlab(S, DEVNAME) % % Creates daq systems that look for files in the VHLAB standard recording % scheme, where data from different epochs are organized into % subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the % name a daq systems in the table below. These daq systems are added to the ndi.session % object S. If DEVNAME is a cell list of strings, then multiple items are added. % % If the function is called with no input arguments, then it returns a list % of all valid device names. % % Each epoch is defined by the presence of a 'reference.txt' file, as well % as specific files that are needed by each device as described below. % % Devices created | Description % |------------------|--------------------------------------------------| % | vhintan | ndi.daq.system.mfdaq that looks for files | % | | 'vhintan_channelgrouping.txt' and '*.rhd' | % | vhspike2 | ndi.daq.system.mfdaq that looks for files | % | | 'vhspike2_channelgrouping.txt' and '*.smr' | % | vhvis_spike2 | ndi.daq.system.mfdaq.stimulus that looks for | % | | files 'stimtimes.txt', 'verticalblanking.txt',| % | | 'stims.mat', and 'spike2data.smr'. | % ----------------------------------------------------------------------- % % See also: ndi.file.navigator.epochdir if nargin == 0 , S = { 'vhintan' , 'vhspike2' , 'vhvis_spike2' }; return ; end ; if iscell ( daqsystemname ), for i = 1 : length ( daqsystemname ), S = ndi . setup . daq . system . vhlab ( S , daqsystemname { i }); end return ; end % all of our daq systems use this custom epochprobemap class epochprobemapclass = 'ndi.setup.daq.metadata.epochprobemap_daqsystem_vhlab' ; switch daqsystemname , case 'vhintan' , fileparameters = { 'reference.txt' , '.*\\.rhd\\>' , 'vhintan_channelgrouping.txt' }; readerobjectclass = [ 'ndi.daq.reader.mfdaq.intan' ]; epochprobemapfileparameters = { 'vhintan_channelgrouping.txt' }; mdr = {}; case 'vhspike2' , fileparameters = { 'reference.txt' , '.*\\.smr\\>' , 'vhspike2_channelgrouping.txt' }; readerobjectclass = [ 'ndi.daq.reader.mfdaq.cedspike2' ]; epochprobemapfileparameters = { 'vhspike2_channelgrouping.txt' }; mdr = {}; case 'vhvis_spike2' fileparameters = { 'reference.txt' , 'stimtimes.txt' , 'verticalblanking.txt' , ... 'stims.mat' , 'spike2data.smr' }; readerobjectclass = [ 'ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2' ]; epochprobemapfileparameters = { 'stimtimes.txt' }; mdr = { ndi . daq . metadatareader . NewStimStims ( 'stims.mat' )}; otherwise , error ([ 'Unknown device requested ' daqsystemname '.' ]); end ft = ndi . file . navigator . epochdir ( S , fileparameters , epochprobemapclass , epochprobemapfileparameters ); eval ([ 'dr = ' readerobjectclass '();' ]); mydev = ndi . daq . system . mfdaq ( daqsystemname , ft , dr , mdr ); % create the daq system object S = S . daqsystem_add ( mydev ); % add the daq system object to our ndi.session Let's look at the creation of these daq system objects in detail. vhintan - This daq system looks for groups of files with one file named reference.txt , a file that ends in .rhd , and another file called vhintan_channelgrouping.txt . These files are produced by the computer that runs our main acquisition on our rigs, when an Intan acquisition device is used. Together, reference.txt and vhintan_channelgrouping.txt have information about the probes that were used in that recording and the channel mapping of those probes. We will look at these in more detail later. We use the reader ndi.daq.reader.mfdaq.intan , which knows how to read channel data from Intan .rhd files. We tell our daq.system object that 'vhintan_channelgrouping.txt' is the file to use to read epochprobemap information (we will instruct it how to interpret the data in a later function), and there is no metadata reader mdr . We also tell ndi.file.navigator that all of these files will appear in subfolders within our main folder by using the ndi.file.navigator.epochdir class. vhspike2 - This daq system is very similar to vhintan , except that it looks for files that end in .smr and looks for a different epochmap metadata file ( vhspike2_channelgrouping.txt ). vhvis_spike2 - This system is more custom. It relies on text files that are generated by our scripts that run on our CED Micro1401 acquisition system: stimtimes.txt , verticalblanking.txt , spike2data.smr , and a file generated by our visual stimulation system called stims.mat . We add a metadatareader ndi.daq.metadatareader.NewStimStims that knows how to interpret the stims.mat file. We will cover this custom ndi.daq.reader next.","title":"Code block 2.2.4.1: Content of +ndi/+setup/+daq/+system/vhlab.m. (Do not type into Matlab command line.)"},{"location":"tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#225-creating-a-custom-ndidaqreadermfdaqstimulus-object","text":"Our visual stimulation system produces a variety of event data, including information about stimulus onset and offset, the vertical refresh signal from the monitor, an 8-bit code for each stimulus ID, a video frame trigger (every time we update the image on the screen), and a signal we call the \"pretime\" trigger that is generally issued 0.5 seconds before a stimulus is begun (used for baseline subtracting in intrinsic signal imaging experiments among other applications). Our acquisition system running on a CED Micro1401 generates text files related to these events, and we propagate them through as a set of event channels. We define 5 fixed channels for our daq system: mk1 : a marker channel that indicates stim ON (+1) or stim OFF (-1) mk2 : a marker channel that indicates the 8-bit stimulus identifier (stimid) mk3 : a marker channel that indicates when the stimulus period opens (+1) and closes (-1); this includes interstimulus \"background\" time e1 : an event channel that indicates each frame trigger / video frame update e2 : an event channel that indicates the vertical refresh times of the stimulus monitor e3 : an event channel that indicates the pre-stimulus trigger (indicates stimulus is upcoming, usually 0.5s away) Rather than copying the entire code here, we will include a link to the file: ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.m . It should be relatively self-explanitory for someone with a coding background to read and mimic this file.","title":"2.2.5 Creating a custom ndi.daq.reader.mfdaq.stimulus object:"},{"location":"tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#226-creating-a-custom-epochprobemap-class","text":"In Tutorial 2.1 , we saw that each epoch of data had an associated epochprobemap that contained the following fields of information: name reference type devicestring subjectstring ctx 1 n-trode ced_daqsystem:ai11 treeshrew_12345@mylab.org vis_stim 1 stimulator vis_daqsystem:mk30;text30;md1 treeshrew_12345@mylab.org We need to write a substitute class that is a subclass of ndi.epoch.epochprobemap that reads the epoch information and returns all of this same information. In our vhlab session directories, we always have a single subject whose unique identifier is specified in a text file called subject.txt in the top directory. This file is read, and this text is used as the subjectstring for all probes. In each vhlab epoch directory, we have a file called reference.txt that includes the name, reference, and type of recording present in each epoch. Our class's creator reads this file, and uses it to pull out the name and reference number for all electrode (or imaging) probes. If our reference.txt file indicates that our vhlab \"type\" is singleEC (single extracellular) or 'ntrode', then it looks for other text files that contain a mapping between the name and reference of each probe and the channels that were used on a recording device to acquire it. In this experiment, we have vhspike2_channelgrouping.txt that indicates that our probe 'ctx | 1' was acquired on channel 11 of our CED Micro1401/Spike2 system. Finally, if a file named stimtimes.txt exists in the epoch directory, then we add in an epochprobemap entry for our visual stimulator: name reference type devicestring subjectstring vis_stim 1 stimulator vhvis_spike2:mk1-3;e1-3;md1 treeshrew_12345@mylab.org We will not reproduce the code here but refer the reader to the link for the source code of the class ndi.setup.epoch.epochprobemap_daqsystem_vhlab that is a subclass of ndi.epoch.epochprobemap_daqsystem .","title":"2.2.6 Creating a custom epochprobemap class"},{"location":"tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#227-putting-it-all-together","text":"Now that we have these pieces together, we can read our example data that we call ts_exper2 . We will pull up the same plots that we pulled up in Tutorial 2.1 .","title":"2.2.7 Putting it all together"},{"location":"tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#code-block-2271-type-this-into-matlab","text":"prefix = [ userpath filesep 'Documents' filesep 'NDI' ]; % if you put the folder somewhere else, edit this S = ndi . setup . vhlab ( 'ts_exper2' ,[ prefix filesep 'ts_exper2' ]); p_ctx1_list = S . getprobes ( 'name' , 'ctx' , 'reference' , 1 ) % returns a cell array of matches p_ctx1 = p_ctx1_list { 1 }; % take the first one, should be the only one epoch_to_read = 1 ; [ data , t , timeref_p_ctx1 ]= p_ctx1 . readtimeseries ( epoch_to_read , - Inf , Inf ); % read all data from epoch 1 figure ( 100 ); plot ( t , data ); xlabel ( 'Time(s)' ); ylabel ( 'Voltage (V)' ); set ( gca , 'xlim' ,[ t ( 1 ) t ( end )]); box off ; p_visstim_list = S . getprobes ( 'type' , 'stimulator' ) % returns a cell array of matches p_visstim = p_visstim_list { 1 }; % take the first one, should be the only one [ data , t , timeref_stim ]= p_visstim . readtimeseries ( timeref_p_ctx1 , - Inf , Inf ); % read all data from epoch 1 of p_ctx1 ! figure ( 100 ); hold on ; vlt . neuro . stimulus . plot_stimulus_timeseries ( 7 , t . stimon , t . stimoff , 'stimid' , data . stimid ); If you are paying close attention, you'll notice we got a little more information out of the readtimeseries command here. t.stimoff exists (it's extracted from our stimulus metadata), so we don't have to know the stimulus duration from elsewhere. That information is not directly accessible in the event record of the smr file, so there is an advantage to reading all the metadata that is available from all sources with a custom object.","title":"Code block 2.2.7.1 Type this into Matlab"},{"location":"tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#228-discussionfeedback","text":"This concludes our tutorial on setting up code files to read one's own data and metadata into NDI. To help make this process clearer, we also include 3 other case studies in reading data (tutorials currently under construction): Alessandra Angelluci lab (reads unpublished recording) Don Katz lab (reads Mukherjee et al., 2019 ) Eve Marder lab (reads Hamood et al., 2015 ) Post comments, bugs, questions, or discuss .","title":"2.2.8 Discussion/Feedback"},{"location":"tutorials/analyzing_first_physiology_experiment/3_spikesorting/","text":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI \u00b6 Tutorial 2.3: Using apps to analyze data (spike sorting) \u00b6 You've seen how to read data from probes in NDI. Now suppose we want to do some analysis of this data? How would we do it? Clearly, one could write functions in Matlab that read the data and perform some sort of analysis. But it would be great to share (or borrow) those functions across the open source community, and to develop \"apps\" that excel at performing specific tasks. NDI allows both approaches. Tutorial 2.3.1: What is an 'app' in NDI? ndi.app objects \u00b6 An app for our purposes is any application program that can read data from NDI and perform some analysis or computation on this data. Some apps exist outside of NDI, and know how to read data from NDI experiments and write results back to NDI experimental sessions. One example of such an app is the spike sorting program JRClust. There is another set of apps that are developed specifically for NDI that are members of a special parent class called ndi.app . This parent class performs some services to help app developers maintain a consistant approach to make it easier for users and programmers that want to use the app to easily figure out what it does and how to use it. Here, we will examine one of these apps that we made for spike extraction. Just like Windows computers come with NotePad and Mac computers come with TextEdit, our ndi.app.spikeextractor is a plain-but-usable program for extracting spike waveforms from voltage records. It is suitable for spike extraction situations where the channel count for each electrode is low, such as single electrodes or tetrodes. It is not suitable for dense, multichannel electrodes like NeuroPixels or dense NeuroNexus probes. We will use the program first as though we knew how to use it by magic, and then we will go through how one could figure out how to use the program if one didn't know. Tutorial 2.3.2: Extracting spikes using ndi.app.spikeextractor \u00b6 Code block 2.3.2.1. Type this into Matlab. \u00b6 dirname = [ userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2' ]; % change this if you put the example somewhere else ref = 'ts_exper2' ; S = ndi . setup . vhlab ( ref , dirname ); % let's find our probes that correspond to extracellular electrodes p = S . getprobes ( 'type' , 'n-trode' ); % make a new app instance se = ndi . app . spikeextractor ( S ); % find out what the spike extraction parameters are extraction_param_struct = se . defaultstruct_appdoc ( 'extraction_parameters' ); % if we wanted to modify these parameters, we could extraction_param_struct . threshold_parameter = 4 ; extraction_param_struct . threshold_sign = 1 ; my_extraction_name { 1 } = 'my_positive_extraction_params' ; extraction_param_doc = se . add_appdoc ( 'extraction_parameters' , extraction_param_struct , 'Replace' , my_extraction_name { 1 }); my_extraction_name { 2 } = 'my_negative_extraction_params' ; extraction_param_struct . threshold_parameter = - 4 ; extraction_param_struct . threshold_sign = - 1 ; extraction_param_doc_2 = se . add_appdoc ( 'extraction_parameters' , extraction_param_struct , 'Replace' , my_extraction_name { 2 }); % we will add a parameter document to our database that our extractor will use % now let's perform the extraction over all epochs redo = 1 ; % redo it if we already did it % we know there are two probes, so do it for both se . extract ( p { 1 },[], my_extraction_name { 1 }, redo ); se . extract ( p { 2 },[], my_extraction_name { 2 }, redo ); Now, let's take a look at what we extracted: Code block 2.3.2.2 Type this into Matlab. \u00b6 % now let's take a look at what we got for the first probe, first epoch epoch_id = 't00001' ; [ spikes , waveparameters , spikewaves_doc ] = se . loaddata_appdoc ( 'spikewaves' , p { 1 }, epoch_id , my_extraction_name { 1 }); % let's plot these waveforms t_spike = [ waveparameters . S0 : waveparameters . S1 ] * 1 / waveparameters . samplerate ; % create a time vector % spikes is a 3-d matrix. % The first dimension has the number of samples per spike. % The second dimension has data from each channel. Because this is a single electrode, there is only one channel. If it were a tetrode, this would be 4. % The third dimension is the number of spikes detected. size ( spikes ) figure ( 101 ); plot ( t_spike , squeeze ( spikes )); xlabel ( 'Time (s)' ); ylabel ( 'Voltage' ); box off ; % We can see how we did by plotting the spike times back with the raw data: [ spiketimes , spiketimes_doc ] = se . loaddata_appdoc ( 'spiketimes' , p { 1 }, epoch_id , my_extraction_name { 1 }); [ d , t ] = readtimeseries ( p { 1 }, epoch_id , - Inf , Inf ); figure ( 102 ); plot ( t , d ); hold on ; samples = round ( vlt . signal . value2sample ( spiketimes , 1 / ( t ( 2 ) - t ( 1 )), 0 )); plot ( t ( samples ), d ( samples ), 'ko' ); % mark each spike peak location with a circle 2.3.3 Spike sorting using ndi.app.spikesorter \u00b6 Now we will feed our results to our plain spikesorting application, which relies on either Kmeans clustering the KlustaKwik clustering tool (Harris KD, J. Neurophys. , 2000). As a first step, we will create a sorting parameters document to specify how we will perform the sorting. This program includes a small graphical user interface to help in choosing the clusters (called in the line that has ssa.spike_sort ). For a quick video demo of how to use this graphical user interface in the context of this tutorial, click here . Code block 2.3.3.1 Type this into Matlab. \u00b6 ssa = ndi . app . spikesorter ( S ); sorting_params_struct = ssa . defaultstruct_appdoc ( 'sorting_parameters' ); my_sorting_name = 'my_sorting_params' ; sorting_param_doc = ssa . add_appdoc ( 'sorting_parameters' , sorting_params_struct , 'Replace' , my_sorting_name ); spike_cluster_doc = ssa . spike_sort ( p { 1 }, my_extraction_name { 1 }, my_sorting_name , redo ) ssa . clusters2neurons ( p { 1 }, my_sorting_name , my_extraction_name { 1 }, redo ) spike_cluster_doc = ssa . spike_sort ( p { 2 }, my_extraction_name { 2 }, my_sorting_name , redo ) ssa . clusters2neurons ( p { 2 }, my_sorting_name , my_extraction_name { 2 }) Now let's check the spike times of the the first neuron Code block 2.3.3.2 Type this into Matlab. \u00b6 e = S . getelements ( 'element.type' , 'spikes' , 'element.name' , 'ctx_1' ) [ D , T ] = e { 1 }. readtimeseries ( 't00001' , - Inf , Inf ); figure ( 102 ); hold on ; samples2 = round ( vlt . signal . value2sample ( T , 1 / ( t ( 2 ) - t ( 1 )), 0 )); plot ( T , d ( samples2 ), 'gs' ); % now spike times from neuron 1 are plotted as green squares You can observe that most of the spiketimes that were detected on the first probe are part of neuron 1, but there are some lower amplitude peaks that are not. 2.3.4 How can we learn about the functionality of ndi.app objects? \u00b6 In section 2.2, we used ndi.app.spikeextractor as though we were born knowning what to do. How could we learn how to use a new app if there isn't a tutorial available? There are three great ways to learn about what apps do and how to use them. Read the main documentation for the app by typing help *appclass* or doc *appclass* into the Matlab command line. For example, try help ndi.app.spikeextractor . Many apps follow what we call the appdoc convention for creating the documents that they create and loading the documents and data that they have generated. This is a convention that have developed relatively recently, and we are in the process of converting all of our included ndi.app objects to use this form. If an app follows ndi.app.appdoc (which means it is a member of the ndi.app.appdoc class), then they will have a set of methods called: Method Description appdoc_description The help information should have a full description of all database documents that are produced by the application. Type help *appname*/appdoc_description . For example, help ndi.app.spikeextractor/appdoc_description add_appdoc Add a new document of a given type to the database, using the app clear_appdoc Delete a document of a given type from the database, using the app find_appdoc Find the NDI document for a given type, using the app loaddata_appdoc Load binary data associated with an NDI document, using the app Let's look at the document types that are written and needed by ndi.app.spikeextractor : Code block 2.3.4.1. Type this into Matlab \u00b6 help ndi . app . spikeextractor / appdoc_description You see a long bit of text that describes all of the document types that are generated and calculated by ndi.app.spikeextractor . Here's a table of the document types and their \"about\" info for ndi.app.spikeextractor: Appdoc Type Description EXTRACTION_PARAMETERS EXTRACTION_PARAMETERS documents hold the parameters that are to be used to guide the extraction of spikewaves EXTRACTION_PARAMETERS_MODIFICATION EXTRACTION_PARAMETERS_MODIFICATION documents allow the user to modify the spike extraction parameters for a specific epoch SPIKEWAVES SPIKEWAVES documents store the spike waveforms that are read during a spike extraction. It DEPENDS ON the ndi.time.timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that descibed the extraction SPIKETIMES SPIKETIMES documents store the times spike waveforms that are read during a spike extraction. It DEPENDS ON the ndi.time.timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that descibed the extraction. The times are in the local epoch time units. If the app writer really loves his/her/their users, then he/she/they will create a tutorial. Look for a tutorial, that should be referenced in the Matlab help. We are working on adding tutorials for all of our included applications, but we are not there yet. Discussion/Feedback 2.3.5 \u00b6 Post comments, bugs, questions, or discuss .","title":"2.3 Using apps to analyze data (example - spike sorting)"},{"location":"tutorials/analyzing_first_physiology_experiment/3_spikesorting/#tutorial-2-analyzing-your-first-electrophysiology-experiment-with-ndi","text":"","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI"},{"location":"tutorials/analyzing_first_physiology_experiment/3_spikesorting/#tutorial-23-using-apps-to-analyze-data-spike-sorting","text":"You've seen how to read data from probes in NDI. Now suppose we want to do some analysis of this data? How would we do it? Clearly, one could write functions in Matlab that read the data and perform some sort of analysis. But it would be great to share (or borrow) those functions across the open source community, and to develop \"apps\" that excel at performing specific tasks. NDI allows both approaches.","title":"Tutorial 2.3: Using apps to analyze data (spike sorting)"},{"location":"tutorials/analyzing_first_physiology_experiment/3_spikesorting/#tutorial-231-what-is-an-app-in-ndi-ndiapp-objects","text":"An app for our purposes is any application program that can read data from NDI and perform some analysis or computation on this data. Some apps exist outside of NDI, and know how to read data from NDI experiments and write results back to NDI experimental sessions. One example of such an app is the spike sorting program JRClust. There is another set of apps that are developed specifically for NDI that are members of a special parent class called ndi.app . This parent class performs some services to help app developers maintain a consistant approach to make it easier for users and programmers that want to use the app to easily figure out what it does and how to use it. Here, we will examine one of these apps that we made for spike extraction. Just like Windows computers come with NotePad and Mac computers come with TextEdit, our ndi.app.spikeextractor is a plain-but-usable program for extracting spike waveforms from voltage records. It is suitable for spike extraction situations where the channel count for each electrode is low, such as single electrodes or tetrodes. It is not suitable for dense, multichannel electrodes like NeuroPixels or dense NeuroNexus probes. We will use the program first as though we knew how to use it by magic, and then we will go through how one could figure out how to use the program if one didn't know.","title":"Tutorial 2.3.1: What is an 'app' in NDI? ndi.app objects"},{"location":"tutorials/analyzing_first_physiology_experiment/3_spikesorting/#tutorial-232-extracting-spikes-using-ndiappspikeextractor","text":"","title":"Tutorial 2.3.2: Extracting spikes using ndi.app.spikeextractor"},{"location":"tutorials/analyzing_first_physiology_experiment/3_spikesorting/#code-block-2321-type-this-into-matlab","text":"dirname = [ userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2' ]; % change this if you put the example somewhere else ref = 'ts_exper2' ; S = ndi . setup . vhlab ( ref , dirname ); % let's find our probes that correspond to extracellular electrodes p = S . getprobes ( 'type' , 'n-trode' ); % make a new app instance se = ndi . app . spikeextractor ( S ); % find out what the spike extraction parameters are extraction_param_struct = se . defaultstruct_appdoc ( 'extraction_parameters' ); % if we wanted to modify these parameters, we could extraction_param_struct . threshold_parameter = 4 ; extraction_param_struct . threshold_sign = 1 ; my_extraction_name { 1 } = 'my_positive_extraction_params' ; extraction_param_doc = se . add_appdoc ( 'extraction_parameters' , extraction_param_struct , 'Replace' , my_extraction_name { 1 }); my_extraction_name { 2 } = 'my_negative_extraction_params' ; extraction_param_struct . threshold_parameter = - 4 ; extraction_param_struct . threshold_sign = - 1 ; extraction_param_doc_2 = se . add_appdoc ( 'extraction_parameters' , extraction_param_struct , 'Replace' , my_extraction_name { 2 }); % we will add a parameter document to our database that our extractor will use % now let's perform the extraction over all epochs redo = 1 ; % redo it if we already did it % we know there are two probes, so do it for both se . extract ( p { 1 },[], my_extraction_name { 1 }, redo ); se . extract ( p { 2 },[], my_extraction_name { 2 }, redo ); Now, let's take a look at what we extracted:","title":"Code block 2.3.2.1. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment/3_spikesorting/#code-block-2322-type-this-into-matlab","text":"% now let's take a look at what we got for the first probe, first epoch epoch_id = 't00001' ; [ spikes , waveparameters , spikewaves_doc ] = se . loaddata_appdoc ( 'spikewaves' , p { 1 }, epoch_id , my_extraction_name { 1 }); % let's plot these waveforms t_spike = [ waveparameters . S0 : waveparameters . S1 ] * 1 / waveparameters . samplerate ; % create a time vector % spikes is a 3-d matrix. % The first dimension has the number of samples per spike. % The second dimension has data from each channel. Because this is a single electrode, there is only one channel. If it were a tetrode, this would be 4. % The third dimension is the number of spikes detected. size ( spikes ) figure ( 101 ); plot ( t_spike , squeeze ( spikes )); xlabel ( 'Time (s)' ); ylabel ( 'Voltage' ); box off ; % We can see how we did by plotting the spike times back with the raw data: [ spiketimes , spiketimes_doc ] = se . loaddata_appdoc ( 'spiketimes' , p { 1 }, epoch_id , my_extraction_name { 1 }); [ d , t ] = readtimeseries ( p { 1 }, epoch_id , - Inf , Inf ); figure ( 102 ); plot ( t , d ); hold on ; samples = round ( vlt . signal . value2sample ( spiketimes , 1 / ( t ( 2 ) - t ( 1 )), 0 )); plot ( t ( samples ), d ( samples ), 'ko' ); % mark each spike peak location with a circle","title":"Code block 2.3.2.2 Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment/3_spikesorting/#233-spike-sorting-using-ndiappspikesorter","text":"Now we will feed our results to our plain spikesorting application, which relies on either Kmeans clustering the KlustaKwik clustering tool (Harris KD, J. Neurophys. , 2000). As a first step, we will create a sorting parameters document to specify how we will perform the sorting. This program includes a small graphical user interface to help in choosing the clusters (called in the line that has ssa.spike_sort ). For a quick video demo of how to use this graphical user interface in the context of this tutorial, click here .","title":"2.3.3 Spike sorting using ndi.app.spikesorter"},{"location":"tutorials/analyzing_first_physiology_experiment/3_spikesorting/#code-block-2331-type-this-into-matlab","text":"ssa = ndi . app . spikesorter ( S ); sorting_params_struct = ssa . defaultstruct_appdoc ( 'sorting_parameters' ); my_sorting_name = 'my_sorting_params' ; sorting_param_doc = ssa . add_appdoc ( 'sorting_parameters' , sorting_params_struct , 'Replace' , my_sorting_name ); spike_cluster_doc = ssa . spike_sort ( p { 1 }, my_extraction_name { 1 }, my_sorting_name , redo ) ssa . clusters2neurons ( p { 1 }, my_sorting_name , my_extraction_name { 1 }, redo ) spike_cluster_doc = ssa . spike_sort ( p { 2 }, my_extraction_name { 2 }, my_sorting_name , redo ) ssa . clusters2neurons ( p { 2 }, my_sorting_name , my_extraction_name { 2 }) Now let's check the spike times of the the first neuron","title":"Code block 2.3.3.1 Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment/3_spikesorting/#code-block-2332-type-this-into-matlab","text":"e = S . getelements ( 'element.type' , 'spikes' , 'element.name' , 'ctx_1' ) [ D , T ] = e { 1 }. readtimeseries ( 't00001' , - Inf , Inf ); figure ( 102 ); hold on ; samples2 = round ( vlt . signal . value2sample ( T , 1 / ( t ( 2 ) - t ( 1 )), 0 )); plot ( T , d ( samples2 ), 'gs' ); % now spike times from neuron 1 are plotted as green squares You can observe that most of the spiketimes that were detected on the first probe are part of neuron 1, but there are some lower amplitude peaks that are not.","title":"Code block 2.3.3.2 Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment/3_spikesorting/#234-how-can-we-learn-about-the-functionality-of-ndiapp-objects","text":"In section 2.2, we used ndi.app.spikeextractor as though we were born knowning what to do. How could we learn how to use a new app if there isn't a tutorial available? There are three great ways to learn about what apps do and how to use them. Read the main documentation for the app by typing help *appclass* or doc *appclass* into the Matlab command line. For example, try help ndi.app.spikeextractor . Many apps follow what we call the appdoc convention for creating the documents that they create and loading the documents and data that they have generated. This is a convention that have developed relatively recently, and we are in the process of converting all of our included ndi.app objects to use this form. If an app follows ndi.app.appdoc (which means it is a member of the ndi.app.appdoc class), then they will have a set of methods called: Method Description appdoc_description The help information should have a full description of all database documents that are produced by the application. Type help *appname*/appdoc_description . For example, help ndi.app.spikeextractor/appdoc_description add_appdoc Add a new document of a given type to the database, using the app clear_appdoc Delete a document of a given type from the database, using the app find_appdoc Find the NDI document for a given type, using the app loaddata_appdoc Load binary data associated with an NDI document, using the app Let's look at the document types that are written and needed by ndi.app.spikeextractor :","title":"2.3.4 How can we learn about the functionality of ndi.app objects?"},{"location":"tutorials/analyzing_first_physiology_experiment/3_spikesorting/#code-block-2341-type-this-into-matlab","text":"help ndi . app . spikeextractor / appdoc_description You see a long bit of text that describes all of the document types that are generated and calculated by ndi.app.spikeextractor . Here's a table of the document types and their \"about\" info for ndi.app.spikeextractor: Appdoc Type Description EXTRACTION_PARAMETERS EXTRACTION_PARAMETERS documents hold the parameters that are to be used to guide the extraction of spikewaves EXTRACTION_PARAMETERS_MODIFICATION EXTRACTION_PARAMETERS_MODIFICATION documents allow the user to modify the spike extraction parameters for a specific epoch SPIKEWAVES SPIKEWAVES documents store the spike waveforms that are read during a spike extraction. It DEPENDS ON the ndi.time.timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that descibed the extraction SPIKETIMES SPIKETIMES documents store the times spike waveforms that are read during a spike extraction. It DEPENDS ON the ndi.time.timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that descibed the extraction. The times are in the local epoch time units. If the app writer really loves his/her/their users, then he/she/they will create a tutorial. Look for a tutorial, that should be referenced in the Matlab help. We are working on adding tutorials for all of our included applications, but we are not there yet.","title":"Code block 2.3.4.1. Type this into Matlab"},{"location":"tutorials/analyzing_first_physiology_experiment/3_spikesorting/#discussionfeedback-235","text":"Post comments, bugs, questions, or discuss .","title":"Discussion/Feedback 2.3.5"},{"location":"tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/","text":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI \u00b6 2.4 Analyzing stimulus responses \u00b6 In the last tutorial, we saw how to use applications to identify spikes from electrophysiology recordings. Now we will employ another plain app for calculating responses to stimulation. Note that this tutorial requires that you have completed Tutorial 2.3 (the analysis here depends on the spike sorted results of Tutorial 2.3). 2.4.1 Sinusoidal gratings to assess direction and orientation preferences and spatial frequency preferences \u00b6 In this experiment ( Van Hooser et al. 2013 ), we assessed tuning for stimulus direction and spatial frequency with sinusoidal gratings. A series of sinusoidal gratings drifting in different directions are shown here . In the actual experiments, we assessed orientation/direction preferences coarsely, and then found the optimal spatial and temporal frequency for the cell before assessing orientation/direction in a fine manner at the optimal spatial and temporal frequency for the cell. The fine orientation/direction assessment is what is included in this demo. So let's open our demo experiment and get started! We are also going to identify our stimulator (visual stimulus system) so that we can tell NDI to analyze stimuli from this device. Code Block 2.4.1.1. Type this into Matlab. \u00b6 dirname = [ userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2' ]; % change this if you put the example somewhere else ref = 'ts_exper2' ; S = ndi . session . dir ( ref , dirname ); % find out stimulus probe stimprobe = S . getprobes ( 'type' , 'stimulator' ); stimprobe = stimprobe { 1 }; % grab the first one, should be our stimulus monitor 2.4.2 Gathering stimulus information \u00b6 The first step in analyzing stimuli is to gather information about the stimulus presentations that were performed in the experiment. We use a small dedicated app for this purpose called ndi.app.stimulus.decoder . Code Block 2.4.2.1. Type this into Matlab. \u00b6 sapp = ndi . app . stimulus . decoder ( S ); redo = 1 ; [ stim_pres_docs ] = sapp . parse_stimuli ( stimprobe , redo ); Now let's take a look at what has been decoded: Code Block 2.4.2.2. Type this into Matlab. \u00b6 stim_pres_docs { 1 }. document_properties . stimulus_presentation % these are the fields that were decoded by ndi.app.stimulus.decoder % let's take a look % here is information about the presentation time of the first stimulus stim_pres_docs { 1 }. document_properties . stimulus_presentation . presentation_time ( 1 ) % here is information about the presentation order of the first 10 stimuli shown: stim_pres_docs { 1 }. document_properties . stimulus_presentation . presentation_order ( 1 : 10 ) % We see that the first stimulus that was presented was stimulus number 4. Let's take a look at its properties: stim_pres_docs { 1 }. document_properties . stimulus_presentation . stimuli ( 4 ). parameters % We can also take a look at the control or blank stimulus properties: stim_pres_docs { 1 }. document_properties . stimulus_presentation . stimuli ( 17 ). parameters % you can see that there are 4 such documents, one for each stimulus presentation in the experiment stim_pres_docs , 2.4.3 Labeling control stimuli \u00b6 For most turning curve data, we want to compare the response during the time of stimulation to the response of the system during some background time, or some \"control\" stimulus. For visual stimuli, this is often a period where a gray screen is shown that has the same duration as the visual stimuli that may be shown. For an auditory stimulus, it may be a period of time when no specific auditory stimulus is playing and the animal hears the noise of the background environment. Often, stimuli have in their parameters a field that declares that a stimulus is a control or blank stimulus. Our stimuli have such a code as shown above (stimulus 17). Code Block 2.4.3.1. Type this into Matlab. \u00b6 rapp = ndi . app . stimulus . tuning_response ( S ); cs_doc = rapp . label_control_stimuli ( stimprobe , redo ); Let's examine what it did. We see that the ndi.app.stimuli.tuning_response app each of the 85 stimuli with the \"blank\" stimulus that was presented closest in time: Code Block 2.4.3.2. Type this into Matlab. \u00b6 % see the control stimulus identifier for all the stimuli cs_doc { 1 }. document_properties . control_stimulus_ids . control_stimulus_ids % see the method used to identify the control stimulus for each stimulus: cs_doc { 1 }. document_properties . control_stimulus_ids . control_stimulus_id_method % see the help for the label_control_stimuli function: help ndi . app . stimulus . tuning_response . label_control_stimuli 2.4.4 Calculating stimulus responses \u00b6 Once the control stimuli have been labeled (if desired; it is optional), then one can proceed to calcuate the stimulus responses. To do this, we can employ the [ndi.app.stimuli.tuning_response]((https://vh-lab.github.io/NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/) app. This program will calculate the mean response to each stimulus. Because gratings are a periodic stimulus, this function will also calculate the response at the fundamental stimulus temporal frequency (F1 component) and at twice this temporal frequency (F2 component). Code block 2.4.4.1. Type this into Matlab. \u00b6 e = S . getelements ( 'element.type' , 'spikes' ); rdocs { 1 } = rapp . stimulus_responses ( stimprobe , e { 1 }, redo ); rdocs { 2 } = rapp . stimulus_responses ( stimprobe , e { 2 }, redo ); Now we can examine the sets of documents that are produced. We see that there are two sets of 3 documents each: Code block 2.4.4.2. Type this into Matlab. \u00b6 % look at rdocs{1}: rdocs { 1 } % it is a 1x2 cell array, and each of these cell entries is in turn a 1x3 cell array rdocs { 1 }{ 1 } % this reflects the two epochs ('t00001' and 't00002'), and, for each epoch, the analysis of the mean response, the F1 component, and the F2 component % to see this, let's look at the first document rdocs { 1 }{ 1 }{ 1 }. document_properties rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response_scalar % we see that this is the 'mean' response. We can see the responses contained within: rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response_scalar . responses % we can see that each of the 85 presentations includes a response that can possibly have a real and imaginary component, as well as a control response rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response_scalar . responses . response_real ( 1 ) rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response_scalar . responses . control_response_real ( 1 ) 2.4.5 Computing an orientation/direction tuning curve and calculating orientation/direction index values \u00b6 Now that we have all of the responses to the individual stimuli, we can create a tuning curve, which examines how the response of the neuron depends on a particular stimulus parameter. In this case, the stimulus is 'angle', which corresponds to the direction of the sinusoidal grating stimulus. We have built a specific application ndi.app.oridirtuning to process tuning curves in response to oriented stimuli, or stimuli moving in particular directions. After generating the tuning curve, we can calculate many, many index values that characterize the tuning of each cell. The function that calculates the orientation and direction index values pulls up a plot. If you look at the plot that examines the mean response for ctx_1 , you can see that the cell responds strongly to gratings drifting at 120 degrees and 300 degrees (0 degrees is up; 90 degrees is to the right). Code block 2.4.5.1. Type this into Matlab. \u00b6 oapp = ndi . app . oridirtuning ( S ); for i = 1 : 2 , tdoc { i } = oapp . calculate_tuning_curve ( e { i }); oriprops { i } = oapp . calculate_all_oridir_indexes ( e { i }); % this takes a few minutes end ; The program should pop up 6 figures that look like this when they are adjusted to have the same axes: The tuning curves show that cell Ctx 1 has a strong orientation-tuned mean response to bars drifting at an angle of about 90 degrees (vertical bars moving rightward) or 270 degrees (vertical bars moving leftward). The cell LGN 1 does not exhibit strong tuning for orientation or direction, but instead exhibits a strong modulated response (F1) to most directions. Now let's take a look at these index values for the first cell. These index values are described in Mazurek et al. (2014) . Code block 2.4.5.2. Type this into Matlab. \u00b6 % see all the categories oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning % see the property information oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning . properties % see significance. Responses across orientation are very significant: oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning . significance % fit parameters: oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning . fit % vector tuning parameters: oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning . vector Now we have seen how we can analyze stimulus responses and use applications to calculate tuning curves and index values. If you had your own stimulus responses of a different type, you could write functions or apps that analyze the results and calculate the appropriate index values. 2.4.5 Discussion/Feedback \u00b6 Post comments, bugs, questions, or discuss .","title":"2.4 Analyzing spiking responses and tuning curve properties"},{"location":"tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#tutorial-2-analyzing-your-first-electrophysiology-experiment-with-ndi","text":"","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI"},{"location":"tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#24-analyzing-stimulus-responses","text":"In the last tutorial, we saw how to use applications to identify spikes from electrophysiology recordings. Now we will employ another plain app for calculating responses to stimulation. Note that this tutorial requires that you have completed Tutorial 2.3 (the analysis here depends on the spike sorted results of Tutorial 2.3).","title":"2.4 Analyzing stimulus responses"},{"location":"tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#241-sinusoidal-gratings-to-assess-direction-and-orientation-preferences-and-spatial-frequency-preferences","text":"In this experiment ( Van Hooser et al. 2013 ), we assessed tuning for stimulus direction and spatial frequency with sinusoidal gratings. A series of sinusoidal gratings drifting in different directions are shown here . In the actual experiments, we assessed orientation/direction preferences coarsely, and then found the optimal spatial and temporal frequency for the cell before assessing orientation/direction in a fine manner at the optimal spatial and temporal frequency for the cell. The fine orientation/direction assessment is what is included in this demo. So let's open our demo experiment and get started! We are also going to identify our stimulator (visual stimulus system) so that we can tell NDI to analyze stimuli from this device.","title":"2.4.1 Sinusoidal gratings to assess direction and orientation preferences and spatial frequency preferences"},{"location":"tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2411-type-this-into-matlab","text":"dirname = [ userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2' ]; % change this if you put the example somewhere else ref = 'ts_exper2' ; S = ndi . session . dir ( ref , dirname ); % find out stimulus probe stimprobe = S . getprobes ( 'type' , 'stimulator' ); stimprobe = stimprobe { 1 }; % grab the first one, should be our stimulus monitor","title":"Code Block 2.4.1.1. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#242-gathering-stimulus-information","text":"The first step in analyzing stimuli is to gather information about the stimulus presentations that were performed in the experiment. We use a small dedicated app for this purpose called ndi.app.stimulus.decoder .","title":"2.4.2 Gathering stimulus information"},{"location":"tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2421-type-this-into-matlab","text":"sapp = ndi . app . stimulus . decoder ( S ); redo = 1 ; [ stim_pres_docs ] = sapp . parse_stimuli ( stimprobe , redo ); Now let's take a look at what has been decoded:","title":"Code Block 2.4.2.1. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2422-type-this-into-matlab","text":"stim_pres_docs { 1 }. document_properties . stimulus_presentation % these are the fields that were decoded by ndi.app.stimulus.decoder % let's take a look % here is information about the presentation time of the first stimulus stim_pres_docs { 1 }. document_properties . stimulus_presentation . presentation_time ( 1 ) % here is information about the presentation order of the first 10 stimuli shown: stim_pres_docs { 1 }. document_properties . stimulus_presentation . presentation_order ( 1 : 10 ) % We see that the first stimulus that was presented was stimulus number 4. Let's take a look at its properties: stim_pres_docs { 1 }. document_properties . stimulus_presentation . stimuli ( 4 ). parameters % We can also take a look at the control or blank stimulus properties: stim_pres_docs { 1 }. document_properties . stimulus_presentation . stimuli ( 17 ). parameters % you can see that there are 4 such documents, one for each stimulus presentation in the experiment stim_pres_docs ,","title":"Code Block 2.4.2.2. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#243-labeling-control-stimuli","text":"For most turning curve data, we want to compare the response during the time of stimulation to the response of the system during some background time, or some \"control\" stimulus. For visual stimuli, this is often a period where a gray screen is shown that has the same duration as the visual stimuli that may be shown. For an auditory stimulus, it may be a period of time when no specific auditory stimulus is playing and the animal hears the noise of the background environment. Often, stimuli have in their parameters a field that declares that a stimulus is a control or blank stimulus. Our stimuli have such a code as shown above (stimulus 17).","title":"2.4.3 Labeling control stimuli"},{"location":"tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2431-type-this-into-matlab","text":"rapp = ndi . app . stimulus . tuning_response ( S ); cs_doc = rapp . label_control_stimuli ( stimprobe , redo ); Let's examine what it did. We see that the ndi.app.stimuli.tuning_response app each of the 85 stimuli with the \"blank\" stimulus that was presented closest in time:","title":"Code Block 2.4.3.1. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2432-type-this-into-matlab","text":"% see the control stimulus identifier for all the stimuli cs_doc { 1 }. document_properties . control_stimulus_ids . control_stimulus_ids % see the method used to identify the control stimulus for each stimulus: cs_doc { 1 }. document_properties . control_stimulus_ids . control_stimulus_id_method % see the help for the label_control_stimuli function: help ndi . app . stimulus . tuning_response . label_control_stimuli","title":"Code Block 2.4.3.2. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#244-calculating-stimulus-responses","text":"Once the control stimuli have been labeled (if desired; it is optional), then one can proceed to calcuate the stimulus responses. To do this, we can employ the [ndi.app.stimuli.tuning_response]((https://vh-lab.github.io/NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/) app. This program will calculate the mean response to each stimulus. Because gratings are a periodic stimulus, this function will also calculate the response at the fundamental stimulus temporal frequency (F1 component) and at twice this temporal frequency (F2 component).","title":"2.4.4 Calculating stimulus responses"},{"location":"tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2441-type-this-into-matlab","text":"e = S . getelements ( 'element.type' , 'spikes' ); rdocs { 1 } = rapp . stimulus_responses ( stimprobe , e { 1 }, redo ); rdocs { 2 } = rapp . stimulus_responses ( stimprobe , e { 2 }, redo ); Now we can examine the sets of documents that are produced. We see that there are two sets of 3 documents each:","title":"Code block 2.4.4.1. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2442-type-this-into-matlab","text":"% look at rdocs{1}: rdocs { 1 } % it is a 1x2 cell array, and each of these cell entries is in turn a 1x3 cell array rdocs { 1 }{ 1 } % this reflects the two epochs ('t00001' and 't00002'), and, for each epoch, the analysis of the mean response, the F1 component, and the F2 component % to see this, let's look at the first document rdocs { 1 }{ 1 }{ 1 }. document_properties rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response_scalar % we see that this is the 'mean' response. We can see the responses contained within: rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response_scalar . responses % we can see that each of the 85 presentations includes a response that can possibly have a real and imaginary component, as well as a control response rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response_scalar . responses . response_real ( 1 ) rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response_scalar . responses . control_response_real ( 1 )","title":"Code block 2.4.4.2. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#245-computing-an-orientationdirection-tuning-curve-and-calculating-orientationdirection-index-values","text":"Now that we have all of the responses to the individual stimuli, we can create a tuning curve, which examines how the response of the neuron depends on a particular stimulus parameter. In this case, the stimulus is 'angle', which corresponds to the direction of the sinusoidal grating stimulus. We have built a specific application ndi.app.oridirtuning to process tuning curves in response to oriented stimuli, or stimuli moving in particular directions. After generating the tuning curve, we can calculate many, many index values that characterize the tuning of each cell. The function that calculates the orientation and direction index values pulls up a plot. If you look at the plot that examines the mean response for ctx_1 , you can see that the cell responds strongly to gratings drifting at 120 degrees and 300 degrees (0 degrees is up; 90 degrees is to the right).","title":"2.4.5 Computing an orientation/direction tuning curve and calculating orientation/direction index values"},{"location":"tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2451-type-this-into-matlab","text":"oapp = ndi . app . oridirtuning ( S ); for i = 1 : 2 , tdoc { i } = oapp . calculate_tuning_curve ( e { i }); oriprops { i } = oapp . calculate_all_oridir_indexes ( e { i }); % this takes a few minutes end ; The program should pop up 6 figures that look like this when they are adjusted to have the same axes: The tuning curves show that cell Ctx 1 has a strong orientation-tuned mean response to bars drifting at an angle of about 90 degrees (vertical bars moving rightward) or 270 degrees (vertical bars moving leftward). The cell LGN 1 does not exhibit strong tuning for orientation or direction, but instead exhibits a strong modulated response (F1) to most directions. Now let's take a look at these index values for the first cell. These index values are described in Mazurek et al. (2014) .","title":"Code block 2.4.5.1. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2452-type-this-into-matlab","text":"% see all the categories oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning % see the property information oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning . properties % see significance. Responses across orientation are very significant: oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning . significance % fit parameters: oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning . fit % vector tuning parameters: oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning . vector Now we have seen how we can analyze stimulus responses and use applications to calculate tuning curves and index values. If you had your own stimulus responses of a different type, you could write functions or apps that analyze the results and calculate the appropriate index values.","title":"Code block 2.4.5.2. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#245-discussionfeedback","text":"Post comments, bugs, questions, or discuss .","title":"2.4.5 Discussion/Feedback"},{"location":"tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/","text":"2 Analyzing your first electrophysiology experiment with NDI \u00b6 2.5 Understanding and searching the NDI database \u00b6 2.5.1 The ndi.database and ndi.document objects \u00b6 Each ndi.session object has an ndi.database object as one of its properties. This database holds the ndi.document objects that contain the metadata and data results of calculations that apps and programs have performed on the original data. First, let's open the ndi.session that we've been working with. Code block 2.5.1.1. Type this into Matlab. \u00b6 dirname = [ userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2' ]; % change this if you put the example somewhere else ref = 'ts_exper2' ; S = ndi . session . dir ( ref , dirname ); We find documents by searching for them with the ndi.session method database_search() . For example, we can examine all documents that contain stimulus presentation data: Code block 2.5.1.2. Type this into Matlab. \u00b6 stim_pres_doc = S . database_search ( ndi . query ( '' , 'isa' , 'stimulus_presentation' , '' )) % should see: % stim_pres_doc = % 1x4 cell array % {1x1 ndi.document} {1x1 ndi.document} {1x1 ndi.document} {1x1 ndi.document} stim_pres_doc { 1 } % should see: % ans = % document with properties: % document_properties: [1x1 struct] stim_pres_doc { 1 }. document_properties % should see: % ans = % struct with fields: % app: [1x1 struct] % depends_on: [1x1 struct] % document_class: [1x1 struct] % epochid: 't00001' % epochid_fix: [1x1 struct] % ndi_document: [1x1 struct] % stimulus_presentation: [1x1 struct] We have used an ndi.query object to conduct our search, and we will describe those objects a little later. Here we see that ndi.document objects have a property called document_properties that contains all of the text information that is stored in the document. We will look through all of these properties here, and we also direct you to the documentation page for the ndi.document class stimulus_presentation . 2.5.2 All ndi.document objects have the fields document_class and ndi_document . \u00b6 The document_class fields contain critical information about the class, such as the file that contains its definition, its full class name and its short class name. In addition, document types can be composed of multiple document types. The stimulus presentation class has two superclasses: ndi.document and ndi.document_epochid . This means that a stimulus_presentation document has its own fields, plus all of the fields from ndi.document documents and and ndi.document_epochid documents. Let's look at the data that specifies the superclasses: Code block 2.5.1.3. Type this into Matlab. \u00b6 stim_pres_doc { 1 }. document_properties . document_class % % ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/stimulus/stimulus_presentation.json' % validation: '$NDISCHEMAPATH/stimulus/stimulus_presentation_schema.json' % class_name: 'ndi_document_stimulus_stimulus_presentation' % property_list_name: 'stimulus_presentation' % class_version: 1 % superclasses: [3x1 struct] stim_pres_doc { 1 }. document_properties . document_class . superclasses ( 1 ) % ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/ndi_document.json' stim_pres_doc { 1 }. document_properties . document_class . superclasses ( 2 ) % ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/ndi_document_epochid.json' stim_pres_doc { 1 }. document_properties . document_class . superclasses ( 3 ) %ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/ndi_document.json' All documents have ndi_document as a superclass. Note that ndi.document is the name of the software object in Matlab (and Python), whereas ndi_document is the name of the database object type that has the following fields: field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database The most useful item in each ndi.document is its unique identifier id . This is a globally unique identifier, which means that no other ndi.document or corresponding ndi_document anywhere in the universe has the same identifier. It is constructed of two hexidecimal strings: the first is based on the time of creation in Universal Controlled Time (UTC), and the second is created by a random number generator. This constructions means that ndi.document ids are not only unique, but also that sorting them alphabetically will give you the creation order of the documents. This can come in handy from time to time. 2.5.3 Searching for ndi_documents with ndi.query \u00b6 Performing analyses or analyses of analyses in NDI involves searching for previous entries in the database, building upon them, and writing the results back to the database. The object ndi.query allows one to express database searches. Let's learn about ndi.query with a few examples. % search for document classes that contain the string 'stim' q_stim = ndi . query ( 'document_class.class_name' , 'contains_string' , 'stim' , '' ); stim_docs = S . database_search ( q_stim ) % returns 35 matches for me % now suppose we also want to search for documents that were made by % our app ndi_app_stimulus_decoder: q_stim_decoder = ndi . query ( 'app.name' , 'exact_string' , 'ndi_app_stimulus_decoder' , '' ); % we can find based on this criteria alone... stim_decoder_docs = S . database_search ( q_stim_decoder ) % returns 4 matches for me % ...or we can put the search terms together in an AND to demand both queries are satisfied q_stim_and_stim_decoder_docs = S . database_search ( q_stim_decoder & q_stim ); % returns 4 matches for me, because all q_stim_decoder docs have 'stimulus' in the class_name % we can also put queries together into a single variable: q_or = q_stim_decoder | q_stim ; q_and = q_stim_decoder & q_stim ; q_stim_and_stim_decoder_docs = S . database_search ( q_and ) % produces the same as above % now we can inspect these documents: q_stim_and_stim_decoder_docs { 1 }. document_properties % ans = % struct with fields: % app: [1x1 struct] % depends_on: [1x1 struct] % document_class: [1x1 struct] % epochid: 't00001' % epochid_fix: [1x1 struct] % ndi_document: [1x1 struct] % stimulus_presentation: [1x1 struct] q_stim_and_stim_decoder_docs { 1 }. document_properties . app % for me: % ans = % struct with fields: % name: 'ndi_app_stimulus_decoder' % version: 'fa1fa7818b215975c43f68ece523b065852ef891' % url: 'https://github.com/VH-Lab/NDI-matlab' % os: 'MACI64' % os_version: '10.14.6' % interpreter: 'MATLAB' % interpreter_version: '9.8' q_stim_and_stim_decoder_docs { 1 }. document_properties . stimulus_presentation % ans = % struct with fields: % presentation_order: [85x1 double] % presentation_time: [85x1 struct] % stimuli: [17x1 struct] The different possible search terms for ndi.query objects is shown below: NDI_QUERY_OBJ = ndi . query ( FIELD , OPERATION , PARAM1 , PARAM2 ) Operation Description 'regexp' are there any regular expression matches between the field value and 'param1' ? 'exact_string' is the field value an exact string match for 'param1' ? 'contains_string' is the field value a char array that contains 'param1' ? 'exact_number' is the field value exactly 'param1' (same size and values)? 'lessthan' is the field value less than 'param1' (and comparable size) 'lessthaneq' is the field value less than or equal to 'param1' (and comparable size) 'greaterthan' is the field value greater than 'param1' (and comparable size) 'greaterthaneq' is the field value greater than or equal to 'param1' (and comparable size) 'hasfield' is the field present? (no role for 'param1' or 'param2' ) 'hasanysubfield_contains_string' Is the field value an array of structs or cell array of structs such that any has a field named 'param1' with a string that contains the string in 'param2' ? 'or' are any of the searchstruct elements specified in ' param1 ' true? 'isa' is 'param1' either a superclass or the document class itself of the ndi_document? 'depends_on' does the document depend on an item with name 'param1' and value 'param2' ? 2.5.4 The depends_on field and database structure \u00b6 Many analysis procedures or creation procedures are dependent on the results from previous calculations. These dependencies are denoted in a field called depends_on . Let's look at the dependencies for our example stimulus presentation: Code block 2.5.4.1. Type this into Matlab. \u00b6 stim_pres_doc { 1 }. document_properties . depends_on % should see: % ans = % struct with fields: % name: 'stimulus_element_id' % value: '412687d3ae63489a_40d1d65fa08bb81a' % what is this node at 412687d3ae63489a_40d1d65fa08bb81a ? mydoc = S . database_search ( ndi . query ( 'ndi_document.id' , 'exact_string' , ... stim_pres_doc { 1 }. document_properties . depends_on ( 1 ). value , '' )); mydoc { 1 }. document_properties % ans = % struct with fields: % depends_on: [2x1 struct] % document_class: [1x1 struct] % element: [1x1 struct] % ndi_document: [1x1 struct] mydoc { 1 }. document_properties . element % ans = % struct with fields: % ndi_element_class: 'ndi.probe.timeseries.stimulator' % name: 'vhvis_spike2' % reference: 1 % type: 'stimulator' % direct: 1 % We see it is our visual stimulation system Some documents have a lot of depends_on items. Let's examine our ctx_1 neuron that we created in Tutorial 2.3 . Code block 2.5.4.2. Type this into Matlab. \u00b6 e = S . getelements ( 'element.type' , 'spikes' ); spikes_doc = S . database_search ( ndi . query ( 'ndi_document.id' , 'exact_string' , e { 1 }. id (), '' )) spikes_doc = spikes_doc { 1 } for i = 1 : numel ( spikes_doc . document_properties . depends_on ), disp ([ 'Depends on ' spikes_doc . document_properties . depends_on ( i ). name ': ' spikes_doc . document_properties . depends_on ( i ). value ]); end ; % Should see 3 entries, with your own unique IDs: % Depends on underlying_element_id: 412687d3ad57c851_40860c116cfc64c2 % Depends on subject_id: 412687d3ad571d87_c0dac60e10c0f2a5 % Depends on spike_clusters_id: 412687f62d1057b8_40c28348e09e5e9b 2.5.5 Structure of an ndi.database \u00b6 NDI databases (and any analysis project) has a beautiful underlying structure that one can visualize, to get a sense of how the calculations and inferred objects (like neurons that spike) are derived from one another. Code block 2.5.5.1. Type this into Matlab. \u00b6 interactive = 1 ; % set it to zero if you have Matlab 2020a or later for DataTip navigation! Try it! docs = S . database_search ( ndi . query ( 'ndi_document.id' , 'regexp' , '(.*)' , '' )); % this finds ALL documents [ g , nodes , mdigraph ] = ndi . database . fun . docs2graph ( docs ); ndi . database . fun . plotinteractivedocgraph ( docs , g , mdigraph , nodes , 'layered' , interactive ); For this session, the graph should look something like this: You can explore the nodes by clicking next to them. On the command line, a summary of the document will appear. Here is a short video demonstration . If you turn on zooming (either by selecting it from the Tools menu in the figure, typing zoom on on the command line, or by hovering over the figure and then clicking on the magnifying glass that appears in the upper right), you can zoom around the graph. You'll need to turn zoom off to be able to get a summary by clicking near the nodes. You can turn zoom off either by selecting Zoom In again from the Tools menu in the figure to de-select the tool, or by typing zoom off on the command line, or by hovering over the figure and clicking the magnifying glass again. 2.5.6 Discussion/Feedback \u00b6 Post comments, bugs, questions, or discuss . You may find it odd that we haven't told you how to add items to the database here in this tutorial. Instead, we've only told you how to inspect the database. The process of creating and testing a document schema and adding and removing documents are described in a Planned Tutorial. The link will be here when it is created.","title":"2.5 Searching NDI databases"},{"location":"tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#2-analyzing-your-first-electrophysiology-experiment-with-ndi","text":"","title":"2 Analyzing your first electrophysiology experiment with NDI"},{"location":"tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#25-understanding-and-searching-the-ndi-database","text":"","title":"2.5 Understanding and searching the NDI database"},{"location":"tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#251-the-ndidatabase-and-ndidocument-objects","text":"Each ndi.session object has an ndi.database object as one of its properties. This database holds the ndi.document objects that contain the metadata and data results of calculations that apps and programs have performed on the original data. First, let's open the ndi.session that we've been working with.","title":"2.5.1 The ndi.database and ndi.document objects"},{"location":"tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2511-type-this-into-matlab","text":"dirname = [ userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2' ]; % change this if you put the example somewhere else ref = 'ts_exper2' ; S = ndi . session . dir ( ref , dirname ); We find documents by searching for them with the ndi.session method database_search() . For example, we can examine all documents that contain stimulus presentation data:","title":"Code block 2.5.1.1. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2512-type-this-into-matlab","text":"stim_pres_doc = S . database_search ( ndi . query ( '' , 'isa' , 'stimulus_presentation' , '' )) % should see: % stim_pres_doc = % 1x4 cell array % {1x1 ndi.document} {1x1 ndi.document} {1x1 ndi.document} {1x1 ndi.document} stim_pres_doc { 1 } % should see: % ans = % document with properties: % document_properties: [1x1 struct] stim_pres_doc { 1 }. document_properties % should see: % ans = % struct with fields: % app: [1x1 struct] % depends_on: [1x1 struct] % document_class: [1x1 struct] % epochid: 't00001' % epochid_fix: [1x1 struct] % ndi_document: [1x1 struct] % stimulus_presentation: [1x1 struct] We have used an ndi.query object to conduct our search, and we will describe those objects a little later. Here we see that ndi.document objects have a property called document_properties that contains all of the text information that is stored in the document. We will look through all of these properties here, and we also direct you to the documentation page for the ndi.document class stimulus_presentation .","title":"Code block 2.5.1.2. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#252-all-ndidocument-objects-have-the-fields-document_class-and-ndi_document","text":"The document_class fields contain critical information about the class, such as the file that contains its definition, its full class name and its short class name. In addition, document types can be composed of multiple document types. The stimulus presentation class has two superclasses: ndi.document and ndi.document_epochid . This means that a stimulus_presentation document has its own fields, plus all of the fields from ndi.document documents and and ndi.document_epochid documents. Let's look at the data that specifies the superclasses:","title":"2.5.2 All ndi.document objects have the fields document_class and ndi_document."},{"location":"tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2513-type-this-into-matlab","text":"stim_pres_doc { 1 }. document_properties . document_class % % ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/stimulus/stimulus_presentation.json' % validation: '$NDISCHEMAPATH/stimulus/stimulus_presentation_schema.json' % class_name: 'ndi_document_stimulus_stimulus_presentation' % property_list_name: 'stimulus_presentation' % class_version: 1 % superclasses: [3x1 struct] stim_pres_doc { 1 }. document_properties . document_class . superclasses ( 1 ) % ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/ndi_document.json' stim_pres_doc { 1 }. document_properties . document_class . superclasses ( 2 ) % ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/ndi_document_epochid.json' stim_pres_doc { 1 }. document_properties . document_class . superclasses ( 3 ) %ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/ndi_document.json' All documents have ndi_document as a superclass. Note that ndi.document is the name of the software object in Matlab (and Python), whereas ndi_document is the name of the database object type that has the following fields: field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database The most useful item in each ndi.document is its unique identifier id . This is a globally unique identifier, which means that no other ndi.document or corresponding ndi_document anywhere in the universe has the same identifier. It is constructed of two hexidecimal strings: the first is based on the time of creation in Universal Controlled Time (UTC), and the second is created by a random number generator. This constructions means that ndi.document ids are not only unique, but also that sorting them alphabetically will give you the creation order of the documents. This can come in handy from time to time.","title":"Code block 2.5.1.3. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#253-searching-for-ndi_documents-with-ndiquery","text":"Performing analyses or analyses of analyses in NDI involves searching for previous entries in the database, building upon them, and writing the results back to the database. The object ndi.query allows one to express database searches. Let's learn about ndi.query with a few examples. % search for document classes that contain the string 'stim' q_stim = ndi . query ( 'document_class.class_name' , 'contains_string' , 'stim' , '' ); stim_docs = S . database_search ( q_stim ) % returns 35 matches for me % now suppose we also want to search for documents that were made by % our app ndi_app_stimulus_decoder: q_stim_decoder = ndi . query ( 'app.name' , 'exact_string' , 'ndi_app_stimulus_decoder' , '' ); % we can find based on this criteria alone... stim_decoder_docs = S . database_search ( q_stim_decoder ) % returns 4 matches for me % ...or we can put the search terms together in an AND to demand both queries are satisfied q_stim_and_stim_decoder_docs = S . database_search ( q_stim_decoder & q_stim ); % returns 4 matches for me, because all q_stim_decoder docs have 'stimulus' in the class_name % we can also put queries together into a single variable: q_or = q_stim_decoder | q_stim ; q_and = q_stim_decoder & q_stim ; q_stim_and_stim_decoder_docs = S . database_search ( q_and ) % produces the same as above % now we can inspect these documents: q_stim_and_stim_decoder_docs { 1 }. document_properties % ans = % struct with fields: % app: [1x1 struct] % depends_on: [1x1 struct] % document_class: [1x1 struct] % epochid: 't00001' % epochid_fix: [1x1 struct] % ndi_document: [1x1 struct] % stimulus_presentation: [1x1 struct] q_stim_and_stim_decoder_docs { 1 }. document_properties . app % for me: % ans = % struct with fields: % name: 'ndi_app_stimulus_decoder' % version: 'fa1fa7818b215975c43f68ece523b065852ef891' % url: 'https://github.com/VH-Lab/NDI-matlab' % os: 'MACI64' % os_version: '10.14.6' % interpreter: 'MATLAB' % interpreter_version: '9.8' q_stim_and_stim_decoder_docs { 1 }. document_properties . stimulus_presentation % ans = % struct with fields: % presentation_order: [85x1 double] % presentation_time: [85x1 struct] % stimuli: [17x1 struct] The different possible search terms for ndi.query objects is shown below: NDI_QUERY_OBJ = ndi . query ( FIELD , OPERATION , PARAM1 , PARAM2 ) Operation Description 'regexp' are there any regular expression matches between the field value and 'param1' ? 'exact_string' is the field value an exact string match for 'param1' ? 'contains_string' is the field value a char array that contains 'param1' ? 'exact_number' is the field value exactly 'param1' (same size and values)? 'lessthan' is the field value less than 'param1' (and comparable size) 'lessthaneq' is the field value less than or equal to 'param1' (and comparable size) 'greaterthan' is the field value greater than 'param1' (and comparable size) 'greaterthaneq' is the field value greater than or equal to 'param1' (and comparable size) 'hasfield' is the field present? (no role for 'param1' or 'param2' ) 'hasanysubfield_contains_string' Is the field value an array of structs or cell array of structs such that any has a field named 'param1' with a string that contains the string in 'param2' ? 'or' are any of the searchstruct elements specified in ' param1 ' true? 'isa' is 'param1' either a superclass or the document class itself of the ndi_document? 'depends_on' does the document depend on an item with name 'param1' and value 'param2' ?","title":"2.5.3 Searching for ndi_documents with ndi.query"},{"location":"tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#254-the-depends_on-field-and-database-structure","text":"Many analysis procedures or creation procedures are dependent on the results from previous calculations. These dependencies are denoted in a field called depends_on . Let's look at the dependencies for our example stimulus presentation:","title":"2.5.4 The depends_on field and database structure"},{"location":"tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2541-type-this-into-matlab","text":"stim_pres_doc { 1 }. document_properties . depends_on % should see: % ans = % struct with fields: % name: 'stimulus_element_id' % value: '412687d3ae63489a_40d1d65fa08bb81a' % what is this node at 412687d3ae63489a_40d1d65fa08bb81a ? mydoc = S . database_search ( ndi . query ( 'ndi_document.id' , 'exact_string' , ... stim_pres_doc { 1 }. document_properties . depends_on ( 1 ). value , '' )); mydoc { 1 }. document_properties % ans = % struct with fields: % depends_on: [2x1 struct] % document_class: [1x1 struct] % element: [1x1 struct] % ndi_document: [1x1 struct] mydoc { 1 }. document_properties . element % ans = % struct with fields: % ndi_element_class: 'ndi.probe.timeseries.stimulator' % name: 'vhvis_spike2' % reference: 1 % type: 'stimulator' % direct: 1 % We see it is our visual stimulation system Some documents have a lot of depends_on items. Let's examine our ctx_1 neuron that we created in Tutorial 2.3 .","title":"Code block 2.5.4.1. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2542-type-this-into-matlab","text":"e = S . getelements ( 'element.type' , 'spikes' ); spikes_doc = S . database_search ( ndi . query ( 'ndi_document.id' , 'exact_string' , e { 1 }. id (), '' )) spikes_doc = spikes_doc { 1 } for i = 1 : numel ( spikes_doc . document_properties . depends_on ), disp ([ 'Depends on ' spikes_doc . document_properties . depends_on ( i ). name ': ' spikes_doc . document_properties . depends_on ( i ). value ]); end ; % Should see 3 entries, with your own unique IDs: % Depends on underlying_element_id: 412687d3ad57c851_40860c116cfc64c2 % Depends on subject_id: 412687d3ad571d87_c0dac60e10c0f2a5 % Depends on spike_clusters_id: 412687f62d1057b8_40c28348e09e5e9b","title":"Code block 2.5.4.2. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#255-structure-of-an-ndidatabase","text":"NDI databases (and any analysis project) has a beautiful underlying structure that one can visualize, to get a sense of how the calculations and inferred objects (like neurons that spike) are derived from one another.","title":"2.5.5 Structure of an ndi.database"},{"location":"tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2551-type-this-into-matlab","text":"interactive = 1 ; % set it to zero if you have Matlab 2020a or later for DataTip navigation! Try it! docs = S . database_search ( ndi . query ( 'ndi_document.id' , 'regexp' , '(.*)' , '' )); % this finds ALL documents [ g , nodes , mdigraph ] = ndi . database . fun . docs2graph ( docs ); ndi . database . fun . plotinteractivedocgraph ( docs , g , mdigraph , nodes , 'layered' , interactive ); For this session, the graph should look something like this: You can explore the nodes by clicking next to them. On the command line, a summary of the document will appear. Here is a short video demonstration . If you turn on zooming (either by selecting it from the Tools menu in the figure, typing zoom on on the command line, or by hovering over the figure and then clicking on the magnifying glass that appears in the upper right), you can zoom around the graph. You'll need to turn zoom off to be able to get a summary by clicking near the nodes. You can turn zoom off either by selecting Zoom In again from the Tools menu in the figure to de-select the tool, or by typing zoom off on the command line, or by hovering over the figure and clicking the magnifying glass again.","title":"Code block 2.5.5.1. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#256-discussionfeedback","text":"Post comments, bugs, questions, or discuss . You may find it odd that we haven't told you how to add items to the database here in this tutorial. Instead, we've only told you how to inspect the database. The process of creating and testing a document schema and adding and removing documents are described in a Planned Tutorial. The link will be here when it is created.","title":"2.5.6 Discussion/Feedback"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/","text":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI \u00b6 2.1: Reading an example dataset \u00b6 We will start with learning to read an example dataset into NDI. We assume you have already installed NDI and taken the introductory tutorial of the NDI model . These data are available in a compressed folder here . You can put the folder anywhere, but we will assume that you put them in your MATLAB/Documents/NDI folder, where MATLAB is your normal user path in Matlab (usually /Users/username/Documents/MATLAB on a Mac). Normally, we'd use some helper functions to open our data to make this process even easier, but this tutorial takes the user through the full manual process for training purposes. 2.1.1 Introduction to the experiment \u00b6 These data are single neuron recordings made with electrodes in the anesthetized tree shrew visual as a part of Van Hooser et al. 2013 . This example data is a very small subset of the original data for the purposes of illustration. In this experiment, a single unit recording electrode was inserted into either lateral geniculate nucleus or V1. The electrode was connected to an amplifier, and the output signal was recorded by a Cambridge Electronic Design (CED) micro1401 digital acquisition board. A CED Spike2 software script was used that stored 1 recording epoch per folder. In software, the voltage from the electrode was assigned to channel 11. A visual stimulus monitor was set up in front of the animal, and visual stimuli were generated by custom software running on a separate computer. A record of the stimulus parameters was stored in the epoch folder in a file called stims.mat , and stimulus timing information was delievered to the digital inputs of the micro1401 in the form of a stimulus onset trigger and an 8-bit stimulus code signal that were generated by the stimulus computer. 2.1.2 Introduction to the data \u00b6 The data are in a folder called ts_exper1 . It contains recordings of two neurons, an LGN neuron and a V1 neuron, to presentation of sinusoidal gratings that either vary in orientation or in spatial frequency. The data as provided by the host lab are organized into subfolders, named t00001 , t00002 , t00003 , and t00004 . The first two folders are recordings of the LGN neuron, and the second two folders are recordings of the V1 neuron. Each t0000N folder has 3 files: probemap.txt - a file that we made for NDI that describe what probes are recorded in this folder spike2data.smr - a CED Spike2 file that has the raw electrophysiology data and the stimulus timing information stims.mat - A Matlab file that has detailed parameters of the stimuli that were run First, let's list these files using the ls command (that's the letter l followed by the letter s , short for list ) and take a quick look at what is in them. Set up the \"prefix\" path to your data as necessary. (Here, we assume you put the ts_exper1 folder into your Matlab userpath folder but you can put it anywhere. Code block 2.1.2.1. Type this in to Matlab: \u00b6 prefix = [ userpath filesep 'Documents' filesep 'NDI' ]; % or '/Users/yourusername/Desktop/' if you put it on the desktop perhaps ls ([ prefix filesep 'ts_exper1' filesep 't*' ]); % list all the files in the t0000N folders We wrote a short function so that you can see the raw voltage recording and the stimulus timing information. Each stimulus appears as a number and its duration is indicated by the black bar. You can pan with the mouse to scroll through the recording. Code block 2.1.2.2. Type this in to Matlab: \u00b6 my_smr_file = fullfile ( prefix , 'ts_exper1' , 't00001' , 'spike2data.smr' ) ndi . example . tutorial . plottreeshrewdata ( my_smr_file ); You should see a Matlab window that looks like this, and when you hover your mouse over the image, it should turn into a \"hand\" that allows you to drag and pan around. 2.1.3 Specifying the metadata that NDI needs to read the experiment \u00b6 In this example, we have already prepared the metadata files that are necessary for NDI to read the data. Let's look at them in turn. First, we need to tell NDI what probes we have in our experiment. A probe is anything that measures or stimulates; one end of a probe is connected to a subject , and the other end of a probe is connected to a data acquisition device. We tell NDI how the probe is connected by creating an ndi.epoch.epochprobemap . Usually, we do this with a little code that instructs NDI how to read this information directly from the laboratory's own file information, but in this example we will use the generic ndi.epoch.epochprobemap_daqsystem object, which reads in a simple tab-delimited text file. Let's print the probemap.txt file for directory t00001 : Code block 2.1.3.1. Type this in to Matlab: \u00b6 type ( fullfile ( prefix , 'ts_exper1' , 't00001' , 'probemap.txt' )) You will see a tab-delimited text table that looks like the following. In the Matlab command window, the tabs may not line up, so don't be concerned if it doesn't look like a nice formatted table. name reference type devicestring subjectstring ctx 1 n-trode ced_daqsystem:ai11 treeshrew_12345@mylab.org vis_stim 1 stimulator vis_daqsystem:mk30;text30;md1 treeshrew_12345@mylab.org This text file has all of the information to specify the probe and its connections. It has a name for the probe that is meaningful to the user, and the reference specifies an identifier that groups the recordings of the probe. Typically, when the probe is in one physical position, the reference number is kept the same, but when the probe is moved (such as when an electrode is advanced), the reference number is incremented. This tells NDI to try to combine information from recordings that have the same name and reference. type tells NDI what type of probe it is. There are a variety of pre-determined types, and this type instructs NDI (via this file ) which probe object type to create in software. Second, we need to specify the stimulus parameters metadata. Typically, one would create a metadata reader for ones own lab so that the native data can be read directly, but here we have made another tab-delimited text file with the parameters. You can read this for yourself by typing the following: Code block 2.1.3.2. Type this in to Matlab: \u00b6 type ( fullfile ( prefix , 'ts_exper1' , 't00001' , 'stims.tsv' )) 2.1.4 Gaining acess to the data in NDI: ndi.session and ndi.daq.system objects \u00b6 Now all that remains is to open the data directory as an ndi.session object, and make ndi.daq.system objects to read your data. We will use an ndi.session.dir object, which allows us to read information from a directory (folder) on disk. We will create a new ndi.system object by calling the constructor with the reference name we wish to give to the session and the pathname to our data: Code block 2.1.4.1. Type this in to Matlab: \u00b6 S = ndi . session . dir ( 'ts_exper1' ,[ prefix filesep 'ts_exper1' ]) Now you have made a new NDI session. The session is brand new, and doesn't know about any of the devices we used in our experiment. So, if we try to see if there are any probes, we will see that it doesn't know of any: Code block 2.1.4.2. Type this in to Matlab: \u00b6 S . getprobes () Unless you ran this demo before, you won't see any probes here (it will return an empty cell array). We need to make new ndi.daq.system objects for our data acquisition system and our stimulator. Our devices are multifunction data acquisition systems, so we use the ndi.daq.system.mfdaq subtype. An ndi.daq.system object consists of three components: an ndi.file.navigator object whose job it is to find the files or streams associated with each epoch of data, an ndi.daq.reader object whose job it is to read the raw data from the files, and an ndi.daq.metadatareader (optionally) whose job it is to read any metadata associated with the epoch (such as stimulus parameter information). First, we will build an ndi.daq.system.mfdaq object that we will call 'ced_daqsystem' to read the electrode data from our CED SMR files. Code block 2.1.4.3. Type this in to Matlab: \u00b6 ced_filenav = ndi . file . navigator ( S , { '.*\\.smr\\>' , 'probemap.txt' }, ... 'ndi.epoch.epochprobemap_daqsystem' , 'probemap.txt' ); ced_rdr = ndi . daq . reader . mfdaq . cedspike2 (); ced_system = ndi . daq . system . mfdaq ( 'ced_daqsystem' , ced_filenav , ced_rdr ); % if you haven't already added the daq system, you can add it here: S . daqsystem_add ( ced_system ); Note: If you ran the tutorial before, you may have added ced_system to your session S already. That's fine, you'll get an error if you try to do it again. If you want to remove all your daq systems, you can call ndi.session.daqsystem_clear() by typing S.daqsystem_clear() and then you can add them again. Let's look at the epochs that ced_system can find, in order to understand how it searches for epochs: Code block 2.1.4.4 Type this into Matlab \u00b6 % let's look at the epochs the daq.system can find et = ced_system . epochtable () % should see a 4 element answer f = ced_system . filenavigator . getepochfiles ( 1 ) % you should see the files from epoch 1, t00001 Second, we will build an ndi.daq.system.mfdaq for our visual stimulus system. Code block 2.1.4.5. Type this in to Matlab: \u00b6 vis_filenav = ndi . file . navigator ( S , { '.*\\.smr\\>' , 'probemap.txt' , 'stims.tsv' }, ... 'ndi.epoch.epochprobemap_daqsystem' , 'probemap.txt' ); vis_rdr = ndi . daq . reader . mfdaq . cedspike2 (); vis_mdrdr = ndi . daq . metadatareader ( 'stims.tsv' ); vis_system = ndi . daq . system . mfdaq ( 'vis_daqsystem' , vis_filenav , vis_rdr , { vis_mdrdr }); % if you haven't already added the daq system, you can add it here: S . daqsystem_add ( vis_system ); Last, we will tell NDI how these devices are synchronized with each other. These two daq systems have a file in common ( spike2data.smr ), which means that they have a common time base, but NDI doesn't yet know that the two daq systems can be synchronized. Here we add a \"syncrule\" that tells NDI that any daq systems that share at least 2 files per epoch also share a common time clock for that epoch. Code block 2.1.4.6. Type this in to Matlab: \u00b6 nsf = ndi . time . syncrule . filematch ( struct ( 'number_fullpath_matches' , 2 )); S . syncgraph_addrule ( nsf ); 2.1.5 Opening the data in NDI: accessing probes via from ndi.daq.system.mfdaq \u00b6 Now we can use NDI to see the probes that these daq systems can find, and to access the data from those probes. Let's look at the electrode probe data first. Code block 2.1.5.1. Type this in to Matlab: \u00b6 p = S . getprobes () % get all of the probes that are in the ndi.session S for i = 1 : numel ( p ), p { i }, end ; % display the probe information for each probe % look at the number of epochs recorded for probe 1 p_ctx1_list = S . getprobes ( 'name' , 'ctx' , 'reference' , 1 ) % returns a cell array of matches p_ctx1 = p_ctx1_list { 1 }; % take the first one, should be the only one et = p_ctx1 . epochtable () for i = 1 : numel ( et ), et ( i ), end ; % display the epoch table entries epoch_to_read = 1 ; You can see that probe 1 has a name of ctx , a reference of 1 , and it is of type n-trode , or an n-channel electrode. It has a software object type of ndi.probe.timeseries.mfdaq , which simply means it is associated with multifunction DAQ systems and returns timeseries observations. Now let's read data from our probe p_ctx1 and plot the data: Code block 2.1.5.2. Type this into Matlab \u00b6 [ data , t , timeref_p_ctx1 ]= p_ctx1 . readtimeseries ( epoch_to_read , - Inf , Inf ); % read all data from epoch 1 figure ( 100 ); plot ( t , data ); xlabel ( 'Time(s)' ); ylabel ( 'Voltage (V)' ); set ( gca , 'xlim' ,[ t ( 1 ) t ( end )]); box off ; This code calls an important function for reading data from probes: ndi.timeseries.readtimeseries : This code is documentation; do not type into Matlab \u00b6 [ D , T , TIMEREF ] = ndi . timeseries . readtimeseries ( EPOCH_OR_TIMEREF , T0 , T1 ) % Reads data and timestamps from an ndi.timeseries.readtimeseries object with respect % to a specific epoch or an ndi.time.timereference object, from time T0 to T1. When analyzing data or writing apps to analyze data, ndi.timeseries.readtimeseries is one of the most commonly called functions. Now let's also look at our stimulator probe vis_stim . First, let's examine the epochs that are known to vis_stim : Code block 2.1.5.3. Type this in to Matlab: \u00b6 p_visstim_list = S . getprobes ( 'name' , 'vis_stim' , 'reference' , 1 ) % returns a cell array of matches p_visstim = p_visstim_list { 1 }; % take the first one, should be the only one et = p_visstim . epochtable () for i = 1 : numel ( et ), et ( i ), end ; % display the epoch table entries Now let's read the data from our stimulator. To do this, we are going to ask NDI to read the stimulus timing information in the time units of our electrode probe p_ctx . You'll notice that when we read data from p_ctx1 , readtimeseries returned an ndi.time.timereference object timeref_p_ctx1 . Let's examine this quickly: Code block 2.1.5.4. Type this in to Matlab: \u00b6 timeref_p_ctx1 You'll see a structure with the following fields: timeref_p_ctx1 timereference with properties referent [1x1 ndi.probe.timeseries.mfdaq] clocktype [1x1 ndi.time.clocktype] epoch 1 time 0 session_ID '412687ba08e28694_c0d9c07d0b8726cf' In NDI, one can refer to time with respect to a variety of different clocks, which is helpful because daq systems typically do not have access to a global clock. We can now ask for the time of the stimulus presentations with respect to our electrode's clock, and add the onset times to the graph. Code block 2.1.5.5. Type this in to Matlab: \u00b6 [ data , t , timeref_stim ]= p_visstim . readtimeseries ( timeref_p_ctx1 , - Inf , Inf ); % read all data from epoch 1 of p_ctx1 ! figure ( 100 ); hold on ; vlt . neuro . stimulus . plot_stimulus_timeseries ( 7 , t . stimon , t . stimon + 2 , 'stimid' , data . stimid ); Let's look at what readtimeseries returned in the case of a stimulator. It is a little different than when being used with regularly-sampled data. Code block 2.1.5.6. Type this in to Matlab: \u00b6 t , % show timestamps t . stimon , data , % show data data . stimid , data . parameters { 1 } Here we examined several fields of the variables data and t returned from readtimeseries from our ndi.probe.timeseries.stimulator . You can see that t is a structure with 2 fields, stimon and stimoff . Our system kept track of when each stimulus began, but in these recordings, we did not have our data acquisition system keep track of when our stimulus turned off. (For later analysis, we will need to read this from the stimulus parameters.) You can also see that data has some metadata about the stimuli. It has the ID number of each stimulus that was shown ( data.stimid(1) is the stimulus that turned on at t.stimon(1) ), and it has the parameters of each stimulus. data.parameters{1} is the parameters of the stimulus with ID number 1. 2.1.6 Discussion/Feedback \u00b6 This concludes our tutorial on the fully manual way of reading data through NDI. In the next tutorial, we'll explore how to create a couple of code objects that read our data directly from a lab's internal structure. Post comments, bugs, questions, or discuss .","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#tutorial-2-analyzing-your-first-electrophysiology-experiment-with-ndi","text":"","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#21-reading-an-example-dataset","text":"We will start with learning to read an example dataset into NDI. We assume you have already installed NDI and taken the introductory tutorial of the NDI model . These data are available in a compressed folder here . You can put the folder anywhere, but we will assume that you put them in your MATLAB/Documents/NDI folder, where MATLAB is your normal user path in Matlab (usually /Users/username/Documents/MATLAB on a Mac). Normally, we'd use some helper functions to open our data to make this process even easier, but this tutorial takes the user through the full manual process for training purposes.","title":"2.1: Reading an example dataset"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#211-introduction-to-the-experiment","text":"These data are single neuron recordings made with electrodes in the anesthetized tree shrew visual as a part of Van Hooser et al. 2013 . This example data is a very small subset of the original data for the purposes of illustration. In this experiment, a single unit recording electrode was inserted into either lateral geniculate nucleus or V1. The electrode was connected to an amplifier, and the output signal was recorded by a Cambridge Electronic Design (CED) micro1401 digital acquisition board. A CED Spike2 software script was used that stored 1 recording epoch per folder. In software, the voltage from the electrode was assigned to channel 11. A visual stimulus monitor was set up in front of the animal, and visual stimuli were generated by custom software running on a separate computer. A record of the stimulus parameters was stored in the epoch folder in a file called stims.mat , and stimulus timing information was delievered to the digital inputs of the micro1401 in the form of a stimulus onset trigger and an 8-bit stimulus code signal that were generated by the stimulus computer.","title":"2.1.1 Introduction to the experiment"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#212-introduction-to-the-data","text":"The data are in a folder called ts_exper1 . It contains recordings of two neurons, an LGN neuron and a V1 neuron, to presentation of sinusoidal gratings that either vary in orientation or in spatial frequency. The data as provided by the host lab are organized into subfolders, named t00001 , t00002 , t00003 , and t00004 . The first two folders are recordings of the LGN neuron, and the second two folders are recordings of the V1 neuron. Each t0000N folder has 3 files: probemap.txt - a file that we made for NDI that describe what probes are recorded in this folder spike2data.smr - a CED Spike2 file that has the raw electrophysiology data and the stimulus timing information stims.mat - A Matlab file that has detailed parameters of the stimuli that were run First, let's list these files using the ls command (that's the letter l followed by the letter s , short for list ) and take a quick look at what is in them. Set up the \"prefix\" path to your data as necessary. (Here, we assume you put the ts_exper1 folder into your Matlab userpath folder but you can put it anywhere.","title":"2.1.2 Introduction to the data"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-2121-type-this-in-to-matlab","text":"prefix = [ userpath filesep 'Documents' filesep 'NDI' ]; % or '/Users/yourusername/Desktop/' if you put it on the desktop perhaps ls ([ prefix filesep 'ts_exper1' filesep 't*' ]); % list all the files in the t0000N folders We wrote a short function so that you can see the raw voltage recording and the stimulus timing information. Each stimulus appears as a number and its duration is indicated by the black bar. You can pan with the mouse to scroll through the recording.","title":"Code block 2.1.2.1. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-2122-type-this-in-to-matlab","text":"my_smr_file = fullfile ( prefix , 'ts_exper1' , 't00001' , 'spike2data.smr' ) ndi . example . tutorial . plottreeshrewdata ( my_smr_file ); You should see a Matlab window that looks like this, and when you hover your mouse over the image, it should turn into a \"hand\" that allows you to drag and pan around.","title":"Code block 2.1.2.2. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#213-specifying-the-metadata-that-ndi-needs-to-read-the-experiment","text":"In this example, we have already prepared the metadata files that are necessary for NDI to read the data. Let's look at them in turn. First, we need to tell NDI what probes we have in our experiment. A probe is anything that measures or stimulates; one end of a probe is connected to a subject , and the other end of a probe is connected to a data acquisition device. We tell NDI how the probe is connected by creating an ndi.epoch.epochprobemap . Usually, we do this with a little code that instructs NDI how to read this information directly from the laboratory's own file information, but in this example we will use the generic ndi.epoch.epochprobemap_daqsystem object, which reads in a simple tab-delimited text file. Let's print the probemap.txt file for directory t00001 :","title":"2.1.3 Specifying the metadata that NDI needs to read the experiment"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-2131-type-this-in-to-matlab","text":"type ( fullfile ( prefix , 'ts_exper1' , 't00001' , 'probemap.txt' )) You will see a tab-delimited text table that looks like the following. In the Matlab command window, the tabs may not line up, so don't be concerned if it doesn't look like a nice formatted table. name reference type devicestring subjectstring ctx 1 n-trode ced_daqsystem:ai11 treeshrew_12345@mylab.org vis_stim 1 stimulator vis_daqsystem:mk30;text30;md1 treeshrew_12345@mylab.org This text file has all of the information to specify the probe and its connections. It has a name for the probe that is meaningful to the user, and the reference specifies an identifier that groups the recordings of the probe. Typically, when the probe is in one physical position, the reference number is kept the same, but when the probe is moved (such as when an electrode is advanced), the reference number is incremented. This tells NDI to try to combine information from recordings that have the same name and reference. type tells NDI what type of probe it is. There are a variety of pre-determined types, and this type instructs NDI (via this file ) which probe object type to create in software. Second, we need to specify the stimulus parameters metadata. Typically, one would create a metadata reader for ones own lab so that the native data can be read directly, but here we have made another tab-delimited text file with the parameters. You can read this for yourself by typing the following:","title":"Code block 2.1.3.1. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-2132-type-this-in-to-matlab","text":"type ( fullfile ( prefix , 'ts_exper1' , 't00001' , 'stims.tsv' ))","title":"Code block 2.1.3.2. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#214-gaining-acess-to-the-data-in-ndi-ndisession-and-ndidaqsystem-objects","text":"Now all that remains is to open the data directory as an ndi.session object, and make ndi.daq.system objects to read your data. We will use an ndi.session.dir object, which allows us to read information from a directory (folder) on disk. We will create a new ndi.system object by calling the constructor with the reference name we wish to give to the session and the pathname to our data:","title":"2.1.4 Gaining acess to the data in NDI: ndi.session and ndi.daq.system objects"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-2141-type-this-in-to-matlab","text":"S = ndi . session . dir ( 'ts_exper1' ,[ prefix filesep 'ts_exper1' ]) Now you have made a new NDI session. The session is brand new, and doesn't know about any of the devices we used in our experiment. So, if we try to see if there are any probes, we will see that it doesn't know of any:","title":"Code block 2.1.4.1. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-2142-type-this-in-to-matlab","text":"S . getprobes () Unless you ran this demo before, you won't see any probes here (it will return an empty cell array). We need to make new ndi.daq.system objects for our data acquisition system and our stimulator. Our devices are multifunction data acquisition systems, so we use the ndi.daq.system.mfdaq subtype. An ndi.daq.system object consists of three components: an ndi.file.navigator object whose job it is to find the files or streams associated with each epoch of data, an ndi.daq.reader object whose job it is to read the raw data from the files, and an ndi.daq.metadatareader (optionally) whose job it is to read any metadata associated with the epoch (such as stimulus parameter information). First, we will build an ndi.daq.system.mfdaq object that we will call 'ced_daqsystem' to read the electrode data from our CED SMR files.","title":"Code block 2.1.4.2. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-2143-type-this-in-to-matlab","text":"ced_filenav = ndi . file . navigator ( S , { '.*\\.smr\\>' , 'probemap.txt' }, ... 'ndi.epoch.epochprobemap_daqsystem' , 'probemap.txt' ); ced_rdr = ndi . daq . reader . mfdaq . cedspike2 (); ced_system = ndi . daq . system . mfdaq ( 'ced_daqsystem' , ced_filenav , ced_rdr ); % if you haven't already added the daq system, you can add it here: S . daqsystem_add ( ced_system ); Note: If you ran the tutorial before, you may have added ced_system to your session S already. That's fine, you'll get an error if you try to do it again. If you want to remove all your daq systems, you can call ndi.session.daqsystem_clear() by typing S.daqsystem_clear() and then you can add them again. Let's look at the epochs that ced_system can find, in order to understand how it searches for epochs:","title":"Code block 2.1.4.3. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-2144-type-this-into-matlab","text":"% let's look at the epochs the daq.system can find et = ced_system . epochtable () % should see a 4 element answer f = ced_system . filenavigator . getepochfiles ( 1 ) % you should see the files from epoch 1, t00001 Second, we will build an ndi.daq.system.mfdaq for our visual stimulus system.","title":"Code block 2.1.4.4 Type this into Matlab"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-2145-type-this-in-to-matlab","text":"vis_filenav = ndi . file . navigator ( S , { '.*\\.smr\\>' , 'probemap.txt' , 'stims.tsv' }, ... 'ndi.epoch.epochprobemap_daqsystem' , 'probemap.txt' ); vis_rdr = ndi . daq . reader . mfdaq . cedspike2 (); vis_mdrdr = ndi . daq . metadatareader ( 'stims.tsv' ); vis_system = ndi . daq . system . mfdaq ( 'vis_daqsystem' , vis_filenav , vis_rdr , { vis_mdrdr }); % if you haven't already added the daq system, you can add it here: S . daqsystem_add ( vis_system ); Last, we will tell NDI how these devices are synchronized with each other. These two daq systems have a file in common ( spike2data.smr ), which means that they have a common time base, but NDI doesn't yet know that the two daq systems can be synchronized. Here we add a \"syncrule\" that tells NDI that any daq systems that share at least 2 files per epoch also share a common time clock for that epoch.","title":"Code block 2.1.4.5. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-2146-type-this-in-to-matlab","text":"nsf = ndi . time . syncrule . filematch ( struct ( 'number_fullpath_matches' , 2 )); S . syncgraph_addrule ( nsf );","title":"Code block 2.1.4.6. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#215-opening-the-data-in-ndi-accessing-probes-via-from-ndidaqsystemmfdaq","text":"Now we can use NDI to see the probes that these daq systems can find, and to access the data from those probes. Let's look at the electrode probe data first.","title":"2.1.5 Opening the data in NDI: accessing probes via from ndi.daq.system.mfdaq"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-2151-type-this-in-to-matlab","text":"p = S . getprobes () % get all of the probes that are in the ndi.session S for i = 1 : numel ( p ), p { i }, end ; % display the probe information for each probe % look at the number of epochs recorded for probe 1 p_ctx1_list = S . getprobes ( 'name' , 'ctx' , 'reference' , 1 ) % returns a cell array of matches p_ctx1 = p_ctx1_list { 1 }; % take the first one, should be the only one et = p_ctx1 . epochtable () for i = 1 : numel ( et ), et ( i ), end ; % display the epoch table entries epoch_to_read = 1 ; You can see that probe 1 has a name of ctx , a reference of 1 , and it is of type n-trode , or an n-channel electrode. It has a software object type of ndi.probe.timeseries.mfdaq , which simply means it is associated with multifunction DAQ systems and returns timeseries observations. Now let's read data from our probe p_ctx1 and plot the data:","title":"Code block 2.1.5.1. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-2152-type-this-into-matlab","text":"[ data , t , timeref_p_ctx1 ]= p_ctx1 . readtimeseries ( epoch_to_read , - Inf , Inf ); % read all data from epoch 1 figure ( 100 ); plot ( t , data ); xlabel ( 'Time(s)' ); ylabel ( 'Voltage (V)' ); set ( gca , 'xlim' ,[ t ( 1 ) t ( end )]); box off ; This code calls an important function for reading data from probes: ndi.timeseries.readtimeseries :","title":"Code block 2.1.5.2. Type this into Matlab"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#this-code-is-documentation-do-not-type-into-matlab","text":"[ D , T , TIMEREF ] = ndi . timeseries . readtimeseries ( EPOCH_OR_TIMEREF , T0 , T1 ) % Reads data and timestamps from an ndi.timeseries.readtimeseries object with respect % to a specific epoch or an ndi.time.timereference object, from time T0 to T1. When analyzing data or writing apps to analyze data, ndi.timeseries.readtimeseries is one of the most commonly called functions. Now let's also look at our stimulator probe vis_stim . First, let's examine the epochs that are known to vis_stim :","title":"This code is documentation; do not type into Matlab"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-2153-type-this-in-to-matlab","text":"p_visstim_list = S . getprobes ( 'name' , 'vis_stim' , 'reference' , 1 ) % returns a cell array of matches p_visstim = p_visstim_list { 1 }; % take the first one, should be the only one et = p_visstim . epochtable () for i = 1 : numel ( et ), et ( i ), end ; % display the epoch table entries Now let's read the data from our stimulator. To do this, we are going to ask NDI to read the stimulus timing information in the time units of our electrode probe p_ctx . You'll notice that when we read data from p_ctx1 , readtimeseries returned an ndi.time.timereference object timeref_p_ctx1 . Let's examine this quickly:","title":"Code block 2.1.5.3. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-2154-type-this-in-to-matlab","text":"timeref_p_ctx1 You'll see a structure with the following fields: timeref_p_ctx1 timereference with properties referent [1x1 ndi.probe.timeseries.mfdaq] clocktype [1x1 ndi.time.clocktype] epoch 1 time 0 session_ID '412687ba08e28694_c0d9c07d0b8726cf' In NDI, one can refer to time with respect to a variety of different clocks, which is helpful because daq systems typically do not have access to a global clock. We can now ask for the time of the stimulus presentations with respect to our electrode's clock, and add the onset times to the graph.","title":"Code block 2.1.5.4. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-2155-type-this-in-to-matlab","text":"[ data , t , timeref_stim ]= p_visstim . readtimeseries ( timeref_p_ctx1 , - Inf , Inf ); % read all data from epoch 1 of p_ctx1 ! figure ( 100 ); hold on ; vlt . neuro . stimulus . plot_stimulus_timeseries ( 7 , t . stimon , t . stimon + 2 , 'stimid' , data . stimid ); Let's look at what readtimeseries returned in the case of a stimulator. It is a little different than when being used with regularly-sampled data.","title":"Code block 2.1.5.5. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-2156-type-this-in-to-matlab","text":"t , % show timestamps t . stimon , data , % show data data . stimid , data . parameters { 1 } Here we examined several fields of the variables data and t returned from readtimeseries from our ndi.probe.timeseries.stimulator . You can see that t is a structure with 2 fields, stimon and stimoff . Our system kept track of when each stimulus began, but in these recordings, we did not have our data acquisition system keep track of when our stimulus turned off. (For later analysis, we will need to read this from the stimulus parameters.) You can also see that data has some metadata about the stimuli. It has the ID number of each stimulus that was shown ( data.stimid(1) is the stimulus that turned on at t.stimon(1) ), and it has the parameters of each stimulus. data.parameters{1} is the parameters of the stimulus with ID number 1.","title":"Code block 2.1.5.6. Type this in to Matlab:"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#216-discussionfeedback","text":"This concludes our tutorial on the fully manual way of reading data through NDI. In the next tutorial, we'll explore how to create a couple of code objects that read our data directly from a lab's internal structure. Post comments, bugs, questions, or discuss .","title":"2.1.6 Discussion/Feedback"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/2_theautomatedway/","text":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI \u00b6 2.2 Automating the reading of data from your rig or lab or collaborator \u00b6 In the previous tutorial, we reviewed the steps necessary to create ndi.daq.system objects to read in a dataset, and to add the metadata that is necessary to tell NDI about the contents of each epoch. Most labs use the same data acquisition devices and file organization schemes over and over again, and many labs also store the necessary metadata that describes the probes and subjects that are acquired. NDI allows you to create small software objects that read this metadata directly from the laboratory files. Then, opening an experimental session becomes as simple as a one line command such as S = ndi . setup . vhlab ([ reference ],[ foldername ]); Once this command has been run once, the directory can be opened with the standard ndi.session.dir command thereafter (though there is no harm to re-issuing the ndi.setup.* command). It's our guess that many labs have at least one person handy with code, and this task might fall to them. This tutorial is written for people who already have some familiarity with coding. If you'd like help creating these functions for your lab, use the issue tracker to post a question. Creating these automatic readers is the biggest stress point in using NDI. The system is relatively easy to use once you are able to read your data! While there are many ways to organize code for custom setups, we have created a motif that is easy to follow. The ndi package in Matlab has a subpackage called setup . Here, we have placed m-files that create an ndi.session with the default settings for various labs or users. The setup package also has a subpackage structure that mimics the subpackage structure of ndi . In Matlab, packages are denoted by putting a + in the folder name: +ndi/+setup/ +daq/ +metadata/ +metadatareader/ +reader/ +system/ 2.2.1 Download an experiment with all vhlab metadata left intact \u00b6 Please download an example data directory called ts_exper2 . Be sure to unzip the files, and we recommend placing them in your Matlab userpath under 'MATLAB/Documents/NDI/' as before. This directory contains the files that were generated at the time of acquisition on Steve's rig in the Fitzpatrick lab at Duke, which is nearly identical to the format that we use in the vhlab now. You'll see that these directories have a few more files. It's not necessary to follow the identities of the files in detail, but let's look at what is in t00001 as an example: t00001/ filetime.txt - The time of the acquisition beginning in seconds from midnight reference.txt = A file describing the probes that are present in this directory spike2data.S2R - This is an irrelevant file! But it's there every time. spike2data.smr - The raw data file acquired by CED's program Spike2 (data acquired via Micro1401) spike2datalog.txt - A text log file (not relevant) stims.mat - The record of stimulation as produced by the stimulus computer. It uses NewStim stimuli and is written by VH lab's RunExperiment program. stimtimes.txt - A text file where each line contains a) the stimulus onset trigger, b) the stimulus ID number between 1-255, and c) an array of video frame trigger times (when the video frame was changed) twophotontimes.txt - A record of triggers of all 2-photon frames. None in this experiment. verticalblanking.txt - A record of each refresh of the monitor. This was not yet used in these experiments but is now part of the VH lab's suite. vhspike2_channelgrouping.txt - A text file that indicates which acquisition channels of our vhspike2 DAQ system are connected to each probe. 2.2.2 Example NDI-matlab files for vhlab \u00b6 To import data from our lab, we created 4 Matlab files: +ndi/+setup/vhlab.m - A function that builds an ndi.session object with daq systems that read from our lab's major devices. +ndi/+setup/+daq/+metadata/epochprobemap_daqsystem_vhlab.m - A class that examines our lab's metadata files that describe the mapping between probes and data acquisition systems and returns an epochprobemap that NDI can interpret. Overrides the default ndi.epoch.epochprobemap_daqsystem.m class that reads the probemap.txt text files we saw in Tutorial 2.1 . +ndi/+setup/+daq/+reader/+mfdaq/+stimulus/vhlabvisspike2.m - A class that reads stimulus event data from our custom acquisition files. +ndi/+daq/+metadatareader/NewStimStims.m - A class that imports stimulus metadata from our lab's open source NewStim package. (We put it in NDI proper because it is an open source program, not intended solely for our lab.) 2.2.3 Creating a setup file. \u00b6 The setup file accomplishes, in an automated fashion, exactly what we did in Tutorial 2.1 : it opens an ndi.session with a particular reference name and directory path, and adds the daq systems that are necessary to read the probe data. It normally lives in +ndi/+setup/LABORINVESTIGATORNAME.m . We include the code here: Code block 2.2.3.1: Content of +ndi/+setup/vhlab.m . (Do not type into Matlab command line.) \u00b6 function S = vhlab ( ref, dirname ) % ndi.setup.vhlab - initialize an ndi.session.dir with VHLAB devices % % S = ndi.setup.vhlab(REF, DIRNAME) % % Initializes an ndi.session.dir object for the directory % DIRNAME with the standard compliment of VHLAB devices, as % found in ndi.setup.daq.system.vhlab. % % If the devices are already added, they are not re-created. % S = ndi . session . dir ( ref , dirname ); vhlabdevnames = ndi . setup . daq . system . vhlab (); % returns list of daq system names for i = 1 : numel ( vhlabdevnames ), dev = S . daqsystem_load ( 'name' , vhlabdevnames { i }); if isempty ( dev ), S = ndi . setup . daq . system . vhlab ( S , vhlabdevnames { i }); end end % update SYNCGRAPH nsf = ndi . time . syncrule . filematch ( struct ( 'number_fullpath_matches' , 2 )); n_intan2spike2 = ndi . time . syncrule . filefind ( struct ( 'number_fullpath_matches' , 1 , ... 'syncfilename' , 'vhintan_intan2spike2time.txt' , ... 'daqsystem1' , 'vhintan' , 'daqsystem2' , 'vhvis_spike2' )); S . syncgraph_addrule ( nsf ); S . syncgraph_addrule ( n_intan2spike2 ); This function calls another function that we will see in a minute ( ndi.setup.daq.system.vhlab ) that actually builds the daq system objects that we use in our lab. At the end of this function, 2 ndi.time.syncrules are added that describe how synchronization is performed across our devices. If 2 or more of the same files are present in an epoch, then it is assumed that files are from the same underlying device and they are assumed to have the same time clock. Our custom acquisition code also produces a file vhintan_intan2spike2time.txt that has the time shift and scaling between our Intan acquisition system and our CED Spike2 acquisition system, and we instruct NDI to use that file to synchronize the 2 devices using shift and scale in that file. 2.2.4 Creating a function that creates the daq systems for a lab \u00b6 We also write a function that builds the daq systems that we use in our lab. This process involves 1) naming the daq system, 2) specifying the ndi.daq.reader that is used, 3) specifying any ndi.daq.metadatareader if necessary, and 4) specifying the ndi.file.navigator to find the files that comprise each epoch. If this function here is called with 0 input arguments, then it returns a list of all known daq systems objects for our lab ( 'vhintan', 'vhspike2', 'vhvis_spike2' ). Otherwise, if it is called with the name of a daq system that this function knows how to build, it builds it. It adds the appropriate ndi.daq.reader , ndi.daq.metadatareader , and ndi.file.navigator . Code block 2.2.4.1: Content of +ndi/+setup/+daq/+system/vhlab.m . (Do not type into Matlab command line.) \u00b6 function S = vhlab ( S, daqsystemname ) % ndi.setup.daq.system.vhlab - initialize daq systems used by VHLAB % % S = ndi.setup.daq.system.vhlab(S, DEVNAME) % % Creates daq systems that look for files in the VHLAB standard recording % scheme, where data from different epochs are organized into % subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the % name a daq systems in the table below. These daq systems are added to the ndi.session % object S. If DEVNAME is a cell list of strings, then multiple items are added. % % If the function is called with no input arguments, then it returns a list % of all valid device names. % % Each epoch is defined by the presence of a 'reference.txt' file, as well % as specific files that are needed by each device as described below. % % Devices created | Description % |------------------|--------------------------------------------------| % | vhintan | ndi.daq.system.mfdaq that looks for files | % | | 'vhintan_channelgrouping.txt' and '*.rhd' | % | vhspike2 | ndi.daq.system.mfdaq that looks for files | % | | 'vhspike2_channelgrouping.txt' and '*.smr' | % | vhvis_spike2 | ndi.daq.system.mfdaq.stimulus that looks for | % | | files 'stimtimes.txt', 'verticalblanking.txt',| % | | 'stims.mat', and 'spike2data.smr'. | % ----------------------------------------------------------------------- % % See also: ndi.file.navigator.epochdir if nargin == 0 , S = { 'vhintan' , 'vhspike2' , 'vhvis_spike2' }; return ; end ; if iscell ( daqsystemname ), for i = 1 : length ( daqsystemname ), S = ndi . setup . daq . system . vhlab ( S , daqsystemname { i }); end return ; end % all of our daq systems use this custom epochprobemap class epochprobemapclass = 'ndi.setup.daq.metadata.epochprobemap_daqsystem_vhlab' ; switch daqsystemname , case 'vhintan' , fileparameters = { 'reference.txt' , '.*\\.rhd\\>' , 'vhintan_channelgrouping.txt' }; readerobjectclass = [ 'ndi.daq.reader.mfdaq.intan' ]; epochprobemapfileparameters = { 'vhintan_channelgrouping.txt' }; mdr = {}; case 'vhspike2' , fileparameters = { 'reference.txt' , '.*\\.smr\\>' , 'vhspike2_channelgrouping.txt' }; readerobjectclass = [ 'ndi.daq.reader.mfdaq.cedspike2' ]; epochprobemapfileparameters = { 'vhspike2_channelgrouping.txt' }; mdr = {}; case 'vhvis_spike2' fileparameters = { 'reference.txt' , 'stimtimes.txt' , 'verticalblanking.txt' , ... 'stims.mat' , 'spike2data.smr' }; readerobjectclass = [ 'ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2' ]; epochprobemapfileparameters = { 'stimtimes.txt' }; mdr = { ndi . daq . metadatareader . NewStimStims ( 'stims.mat' )}; otherwise , error ([ 'Unknown device requested ' daqsystemname '.' ]); end ft = ndi . file . navigator . epochdir ( S , fileparameters , epochprobemapclass , epochprobemapfileparameters ); eval ([ 'dr = ' readerobjectclass '();' ]); mydev = ndi . daq . system . mfdaq ( daqsystemname , ft , dr , mdr ); % create the daq system object S = S . daqsystem_add ( mydev ); % add the daq system object to our ndi.session Let's look at the creation of these daq system objects in detail. vhintan - This daq system looks for groups of files with one file named reference.txt , a file that ends in .rhd , and another file called vhintan_channelgrouping.txt . These files are produced by the computer that runs our main acquisition on our rigs, when an Intan acquisition device is used. Together, reference.txt and vhintan_channelgrouping.txt have information about the probes that were used in that recording and the channel mapping of those probes. We will look at these in more detail later. We use the reader ndi.daq.reader.mfdaq.intan , which knows how to read channel data from Intan .rhd files. We tell our daq.system object that 'vhintan_channelgrouping.txt' is the file to use to read epochprobemap information (we will instruct it how to interpret the data in a later function), and there is no metadata reader mdr . We also tell ndi.file.navigator that all of these files will appear in subfolders within our main folder by using the ndi.file.navigator.epochdir class. vhspike2 - This daq system is very similar to vhintan , except that it looks for files that end in .smr and looks for a different epochmap metadata file ( vhspike2_channelgrouping.txt ). vhvis_spike2 - This system is more custom. It relies on text files that are generated by our scripts that run on our CED Micro1401 acquisition system: stimtimes.txt , verticalblanking.txt , spike2data.smr , and a file generated by our visual stimulation system called stims.mat . We add a metadatareader ndi.daq.metadatareader.NewStimStims that knows how to interpret the stims.mat file. We will cover this custom ndi.daq.reader next. 2.2.5 Creating a custom ndi.daq.reader.mfdaq.stimulus object: \u00b6 Our visual stimulation system produces a variety of event data, including information about stimulus onset and offset, the vertical refresh signal from the monitor, an 8-bit code for each stimulus ID, a video frame trigger (every time we update the image on the screen), and a signal we call the \"pretime\" trigger that is generally issued 0.5 seconds before a stimulus is begun (used for baseline subtracting in intrinsic signal imaging experiments among other applications). Our acquisition system running on a CED Micro1401 generates text files related to these events, and we propagate them through as a set of event channels. We define 5 fixed channels for our daq system: mk1 : a marker channel that indicates stim ON (+1) or stim OFF (-1) mk2 : a marker channel that indicates the 8-bit stimulus identifier (stimid) mk3 : a marker channel that indicates when the stimulus period opens (+1) and closes (-1); this includes interstimulus \"background\" time e1 : an event channel that indicates each frame trigger / video frame update e2 : an event channel that indicates the vertical refresh times of the stimulus monitor e3 : an event channel that indicates the pre-stimulus trigger (indicates stimulus is upcoming, usually 0.5s away) Rather than copying the entire code here, we will include a link to the file: ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.m . It should be relatively self-explanitory for someone with a coding background to read and mimic this file. 2.2.6 Creating a custom epochprobemap class \u00b6 In Tutorial 2.1 , we saw that each epoch of data had an associated epochprobemap that contained the following fields of information: name reference type devicestring subjectstring ctx 1 n-trode ced_daqsystem:ai11 treeshrew_12345@mylab.org vis_stim 1 stimulator vis_daqsystem:mk30;text30;md1 treeshrew_12345@mylab.org We need to write a substitute class that is a subclass of ndi.epoch.epochprobemap that reads the epoch information and returns all of this same information. In our vhlab session directories, we always have a single subject whose unique identifier is specified in a text file called subject.txt in the top directory. This file is read, and this text is used as the subjectstring for all probes. In each vhlab epoch directory, we have a file called reference.txt that includes the name, reference, and type of recording present in each epoch. Our class's creator reads this file, and uses it to pull out the name and reference number for all electrode (or imaging) probes. If our reference.txt file indicates that our vhlab \"type\" is singleEC (single extracellular) or 'ntrode', then it looks for other text files that contain a mapping between the name and reference of each probe and the channels that were used on a recording device to acquire it. In this experiment, we have vhspike2_channelgrouping.txt that indicates that our probe 'ctx | 1' was acquired on channel 11 of our CED Micro1401/Spike2 system. Finally, if a file named stimtimes.txt exists in the epoch directory, then we add in an epochprobemap entry for our visual stimulator: name reference type devicestring subjectstring vis_stim 1 stimulator vhvis_spike2:mk1-3;e1-3;md1 treeshrew_12345@mylab.org We will not reproduce the code here but refer the reader to the link for the source code of the class ndi.setup.epoch.epochprobemap_daqsystem_vhlab that is a subclass of ndi.epoch.epochprobemap_daqsystem . 2.2.7 Putting it all together \u00b6 Now that we have these pieces together, we can read our example data that we call ts_exper2 . We will pull up the same plots that we pulled up in Tutorial 2.1 . Code block 2.2.7.1 Type this into Matlab \u00b6 prefix = [ userpath filesep 'Documents' filesep 'NDI' ]; % if you put the folder somewhere else, edit this S = ndi . setup . vhlab ( 'ts_exper2' ,[ prefix filesep 'ts_exper2' ]); p_ctx1_list = S . getprobes ( 'name' , 'ctx' , 'reference' , 1 ) % returns a cell array of matches p_ctx1 = p_ctx1_list { 1 }; % take the first one, should be the only one epoch_to_read = 1 ; [ data , t , timeref_p_ctx1 ]= p_ctx1 . readtimeseries ( epoch_to_read , - Inf , Inf ); % read all data from epoch 1 figure ( 100 ); plot ( t , data ); xlabel ( 'Time(s)' ); ylabel ( 'Voltage (V)' ); set ( gca , 'xlim' ,[ t ( 1 ) t ( end )]); box off ; p_visstim_list = S . getprobes ( 'type' , 'stimulator' ) % returns a cell array of matches p_visstim = p_visstim_list { 1 }; % take the first one, should be the only one [ data , t , timeref_stim ]= p_visstim . readtimeseries ( timeref_p_ctx1 , - Inf , Inf ); % read all data from epoch 1 of p_ctx1 ! figure ( 100 ); hold on ; vlt . neuro . stimulus . plot_stimulus_timeseries ( 7 , t . stimon , t . stimoff , 'stimid' , data . stimid ); If you are paying close attention, you'll notice we got a little more information out of the readtimeseries command here. t.stimoff exists (it's extracted from our stimulus metadata), so we don't have to know the stimulus duration from elsewhere. That information is not directly accessible in the event record of the smr file, so there is an advantage to reading all the metadata that is available from all sources with a custom object. 2.2.8 Discussion/Feedback \u00b6 This concludes our tutorial on setting up code files to read one's own data and metadata into NDI. To help make this process clearer, we also include 3 other case studies in reading data (tutorials currently under construction): Alessandra Angelluci lab (reads unpublished recording) Don Katz lab (reads Mukherjee et al., 2019 ) Eve Marder lab (reads Hamood et al., 2015 ) Post comments, bugs, questions, or discuss .","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/2_theautomatedway/#tutorial-2-analyzing-your-first-electrophysiology-experiment-with-ndi","text":"","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/2_theautomatedway/#22-automating-the-reading-of-data-from-your-rig-or-lab-or-collaborator","text":"In the previous tutorial, we reviewed the steps necessary to create ndi.daq.system objects to read in a dataset, and to add the metadata that is necessary to tell NDI about the contents of each epoch. Most labs use the same data acquisition devices and file organization schemes over and over again, and many labs also store the necessary metadata that describes the probes and subjects that are acquired. NDI allows you to create small software objects that read this metadata directly from the laboratory files. Then, opening an experimental session becomes as simple as a one line command such as S = ndi . setup . vhlab ([ reference ],[ foldername ]); Once this command has been run once, the directory can be opened with the standard ndi.session.dir command thereafter (though there is no harm to re-issuing the ndi.setup.* command). It's our guess that many labs have at least one person handy with code, and this task might fall to them. This tutorial is written for people who already have some familiarity with coding. If you'd like help creating these functions for your lab, use the issue tracker to post a question. Creating these automatic readers is the biggest stress point in using NDI. The system is relatively easy to use once you are able to read your data! While there are many ways to organize code for custom setups, we have created a motif that is easy to follow. The ndi package in Matlab has a subpackage called setup . Here, we have placed m-files that create an ndi.session with the default settings for various labs or users. The setup package also has a subpackage structure that mimics the subpackage structure of ndi . In Matlab, packages are denoted by putting a + in the folder name: +ndi/+setup/ +daq/ +metadata/ +metadatareader/ +reader/ +system/","title":"2.2 Automating the reading of data from your rig or lab or collaborator"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/2_theautomatedway/#221-download-an-experiment-with-all-vhlab-metadata-left-intact","text":"Please download an example data directory called ts_exper2 . Be sure to unzip the files, and we recommend placing them in your Matlab userpath under 'MATLAB/Documents/NDI/' as before. This directory contains the files that were generated at the time of acquisition on Steve's rig in the Fitzpatrick lab at Duke, which is nearly identical to the format that we use in the vhlab now. You'll see that these directories have a few more files. It's not necessary to follow the identities of the files in detail, but let's look at what is in t00001 as an example: t00001/ filetime.txt - The time of the acquisition beginning in seconds from midnight reference.txt = A file describing the probes that are present in this directory spike2data.S2R - This is an irrelevant file! But it's there every time. spike2data.smr - The raw data file acquired by CED's program Spike2 (data acquired via Micro1401) spike2datalog.txt - A text log file (not relevant) stims.mat - The record of stimulation as produced by the stimulus computer. It uses NewStim stimuli and is written by VH lab's RunExperiment program. stimtimes.txt - A text file where each line contains a) the stimulus onset trigger, b) the stimulus ID number between 1-255, and c) an array of video frame trigger times (when the video frame was changed) twophotontimes.txt - A record of triggers of all 2-photon frames. None in this experiment. verticalblanking.txt - A record of each refresh of the monitor. This was not yet used in these experiments but is now part of the VH lab's suite. vhspike2_channelgrouping.txt - A text file that indicates which acquisition channels of our vhspike2 DAQ system are connected to each probe.","title":"2.2.1 Download an experiment with all vhlab metadata left intact"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/2_theautomatedway/#222-example-ndi-matlab-files-for-vhlab","text":"To import data from our lab, we created 4 Matlab files: +ndi/+setup/vhlab.m - A function that builds an ndi.session object with daq systems that read from our lab's major devices. +ndi/+setup/+daq/+metadata/epochprobemap_daqsystem_vhlab.m - A class that examines our lab's metadata files that describe the mapping between probes and data acquisition systems and returns an epochprobemap that NDI can interpret. Overrides the default ndi.epoch.epochprobemap_daqsystem.m class that reads the probemap.txt text files we saw in Tutorial 2.1 . +ndi/+setup/+daq/+reader/+mfdaq/+stimulus/vhlabvisspike2.m - A class that reads stimulus event data from our custom acquisition files. +ndi/+daq/+metadatareader/NewStimStims.m - A class that imports stimulus metadata from our lab's open source NewStim package. (We put it in NDI proper because it is an open source program, not intended solely for our lab.)","title":"2.2.2 Example NDI-matlab files for vhlab"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/2_theautomatedway/#223-creating-a-setup-file","text":"The setup file accomplishes, in an automated fashion, exactly what we did in Tutorial 2.1 : it opens an ndi.session with a particular reference name and directory path, and adds the daq systems that are necessary to read the probe data. It normally lives in +ndi/+setup/LABORINVESTIGATORNAME.m . We include the code here:","title":"2.2.3 Creating a setup file."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/2_theautomatedway/#code-block-2231-content-of-ndisetupvhlabm-do-not-type-into-matlab-command-line","text":"function S = vhlab ( ref, dirname ) % ndi.setup.vhlab - initialize an ndi.session.dir with VHLAB devices % % S = ndi.setup.vhlab(REF, DIRNAME) % % Initializes an ndi.session.dir object for the directory % DIRNAME with the standard compliment of VHLAB devices, as % found in ndi.setup.daq.system.vhlab. % % If the devices are already added, they are not re-created. % S = ndi . session . dir ( ref , dirname ); vhlabdevnames = ndi . setup . daq . system . vhlab (); % returns list of daq system names for i = 1 : numel ( vhlabdevnames ), dev = S . daqsystem_load ( 'name' , vhlabdevnames { i }); if isempty ( dev ), S = ndi . setup . daq . system . vhlab ( S , vhlabdevnames { i }); end end % update SYNCGRAPH nsf = ndi . time . syncrule . filematch ( struct ( 'number_fullpath_matches' , 2 )); n_intan2spike2 = ndi . time . syncrule . filefind ( struct ( 'number_fullpath_matches' , 1 , ... 'syncfilename' , 'vhintan_intan2spike2time.txt' , ... 'daqsystem1' , 'vhintan' , 'daqsystem2' , 'vhvis_spike2' )); S . syncgraph_addrule ( nsf ); S . syncgraph_addrule ( n_intan2spike2 ); This function calls another function that we will see in a minute ( ndi.setup.daq.system.vhlab ) that actually builds the daq system objects that we use in our lab. At the end of this function, 2 ndi.time.syncrules are added that describe how synchronization is performed across our devices. If 2 or more of the same files are present in an epoch, then it is assumed that files are from the same underlying device and they are assumed to have the same time clock. Our custom acquisition code also produces a file vhintan_intan2spike2time.txt that has the time shift and scaling between our Intan acquisition system and our CED Spike2 acquisition system, and we instruct NDI to use that file to synchronize the 2 devices using shift and scale in that file.","title":"Code block 2.2.3.1: Content of +ndi/+setup/vhlab.m. (Do not type into Matlab command line.)"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/2_theautomatedway/#224-creating-a-function-that-creates-the-daq-systems-for-a-lab","text":"We also write a function that builds the daq systems that we use in our lab. This process involves 1) naming the daq system, 2) specifying the ndi.daq.reader that is used, 3) specifying any ndi.daq.metadatareader if necessary, and 4) specifying the ndi.file.navigator to find the files that comprise each epoch. If this function here is called with 0 input arguments, then it returns a list of all known daq systems objects for our lab ( 'vhintan', 'vhspike2', 'vhvis_spike2' ). Otherwise, if it is called with the name of a daq system that this function knows how to build, it builds it. It adds the appropriate ndi.daq.reader , ndi.daq.metadatareader , and ndi.file.navigator .","title":"2.2.4 Creating a function that creates the daq systems for a lab"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/2_theautomatedway/#code-block-2241-content-of-ndisetupdaqsystemvhlabm-do-not-type-into-matlab-command-line","text":"function S = vhlab ( S, daqsystemname ) % ndi.setup.daq.system.vhlab - initialize daq systems used by VHLAB % % S = ndi.setup.daq.system.vhlab(S, DEVNAME) % % Creates daq systems that look for files in the VHLAB standard recording % scheme, where data from different epochs are organized into % subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the % name a daq systems in the table below. These daq systems are added to the ndi.session % object S. If DEVNAME is a cell list of strings, then multiple items are added. % % If the function is called with no input arguments, then it returns a list % of all valid device names. % % Each epoch is defined by the presence of a 'reference.txt' file, as well % as specific files that are needed by each device as described below. % % Devices created | Description % |------------------|--------------------------------------------------| % | vhintan | ndi.daq.system.mfdaq that looks for files | % | | 'vhintan_channelgrouping.txt' and '*.rhd' | % | vhspike2 | ndi.daq.system.mfdaq that looks for files | % | | 'vhspike2_channelgrouping.txt' and '*.smr' | % | vhvis_spike2 | ndi.daq.system.mfdaq.stimulus that looks for | % | | files 'stimtimes.txt', 'verticalblanking.txt',| % | | 'stims.mat', and 'spike2data.smr'. | % ----------------------------------------------------------------------- % % See also: ndi.file.navigator.epochdir if nargin == 0 , S = { 'vhintan' , 'vhspike2' , 'vhvis_spike2' }; return ; end ; if iscell ( daqsystemname ), for i = 1 : length ( daqsystemname ), S = ndi . setup . daq . system . vhlab ( S , daqsystemname { i }); end return ; end % all of our daq systems use this custom epochprobemap class epochprobemapclass = 'ndi.setup.daq.metadata.epochprobemap_daqsystem_vhlab' ; switch daqsystemname , case 'vhintan' , fileparameters = { 'reference.txt' , '.*\\.rhd\\>' , 'vhintan_channelgrouping.txt' }; readerobjectclass = [ 'ndi.daq.reader.mfdaq.intan' ]; epochprobemapfileparameters = { 'vhintan_channelgrouping.txt' }; mdr = {}; case 'vhspike2' , fileparameters = { 'reference.txt' , '.*\\.smr\\>' , 'vhspike2_channelgrouping.txt' }; readerobjectclass = [ 'ndi.daq.reader.mfdaq.cedspike2' ]; epochprobemapfileparameters = { 'vhspike2_channelgrouping.txt' }; mdr = {}; case 'vhvis_spike2' fileparameters = { 'reference.txt' , 'stimtimes.txt' , 'verticalblanking.txt' , ... 'stims.mat' , 'spike2data.smr' }; readerobjectclass = [ 'ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2' ]; epochprobemapfileparameters = { 'stimtimes.txt' }; mdr = { ndi . daq . metadatareader . NewStimStims ( 'stims.mat' )}; otherwise , error ([ 'Unknown device requested ' daqsystemname '.' ]); end ft = ndi . file . navigator . epochdir ( S , fileparameters , epochprobemapclass , epochprobemapfileparameters ); eval ([ 'dr = ' readerobjectclass '();' ]); mydev = ndi . daq . system . mfdaq ( daqsystemname , ft , dr , mdr ); % create the daq system object S = S . daqsystem_add ( mydev ); % add the daq system object to our ndi.session Let's look at the creation of these daq system objects in detail. vhintan - This daq system looks for groups of files with one file named reference.txt , a file that ends in .rhd , and another file called vhintan_channelgrouping.txt . These files are produced by the computer that runs our main acquisition on our rigs, when an Intan acquisition device is used. Together, reference.txt and vhintan_channelgrouping.txt have information about the probes that were used in that recording and the channel mapping of those probes. We will look at these in more detail later. We use the reader ndi.daq.reader.mfdaq.intan , which knows how to read channel data from Intan .rhd files. We tell our daq.system object that 'vhintan_channelgrouping.txt' is the file to use to read epochprobemap information (we will instruct it how to interpret the data in a later function), and there is no metadata reader mdr . We also tell ndi.file.navigator that all of these files will appear in subfolders within our main folder by using the ndi.file.navigator.epochdir class. vhspike2 - This daq system is very similar to vhintan , except that it looks for files that end in .smr and looks for a different epochmap metadata file ( vhspike2_channelgrouping.txt ). vhvis_spike2 - This system is more custom. It relies on text files that are generated by our scripts that run on our CED Micro1401 acquisition system: stimtimes.txt , verticalblanking.txt , spike2data.smr , and a file generated by our visual stimulation system called stims.mat . We add a metadatareader ndi.daq.metadatareader.NewStimStims that knows how to interpret the stims.mat file. We will cover this custom ndi.daq.reader next.","title":"Code block 2.2.4.1: Content of +ndi/+setup/+daq/+system/vhlab.m. (Do not type into Matlab command line.)"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/2_theautomatedway/#225-creating-a-custom-ndidaqreadermfdaqstimulus-object","text":"Our visual stimulation system produces a variety of event data, including information about stimulus onset and offset, the vertical refresh signal from the monitor, an 8-bit code for each stimulus ID, a video frame trigger (every time we update the image on the screen), and a signal we call the \"pretime\" trigger that is generally issued 0.5 seconds before a stimulus is begun (used for baseline subtracting in intrinsic signal imaging experiments among other applications). Our acquisition system running on a CED Micro1401 generates text files related to these events, and we propagate them through as a set of event channels. We define 5 fixed channels for our daq system: mk1 : a marker channel that indicates stim ON (+1) or stim OFF (-1) mk2 : a marker channel that indicates the 8-bit stimulus identifier (stimid) mk3 : a marker channel that indicates when the stimulus period opens (+1) and closes (-1); this includes interstimulus \"background\" time e1 : an event channel that indicates each frame trigger / video frame update e2 : an event channel that indicates the vertical refresh times of the stimulus monitor e3 : an event channel that indicates the pre-stimulus trigger (indicates stimulus is upcoming, usually 0.5s away) Rather than copying the entire code here, we will include a link to the file: ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.m . It should be relatively self-explanitory for someone with a coding background to read and mimic this file.","title":"2.2.5 Creating a custom ndi.daq.reader.mfdaq.stimulus object:"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/2_theautomatedway/#226-creating-a-custom-epochprobemap-class","text":"In Tutorial 2.1 , we saw that each epoch of data had an associated epochprobemap that contained the following fields of information: name reference type devicestring subjectstring ctx 1 n-trode ced_daqsystem:ai11 treeshrew_12345@mylab.org vis_stim 1 stimulator vis_daqsystem:mk30;text30;md1 treeshrew_12345@mylab.org We need to write a substitute class that is a subclass of ndi.epoch.epochprobemap that reads the epoch information and returns all of this same information. In our vhlab session directories, we always have a single subject whose unique identifier is specified in a text file called subject.txt in the top directory. This file is read, and this text is used as the subjectstring for all probes. In each vhlab epoch directory, we have a file called reference.txt that includes the name, reference, and type of recording present in each epoch. Our class's creator reads this file, and uses it to pull out the name and reference number for all electrode (or imaging) probes. If our reference.txt file indicates that our vhlab \"type\" is singleEC (single extracellular) or 'ntrode', then it looks for other text files that contain a mapping between the name and reference of each probe and the channels that were used on a recording device to acquire it. In this experiment, we have vhspike2_channelgrouping.txt that indicates that our probe 'ctx | 1' was acquired on channel 11 of our CED Micro1401/Spike2 system. Finally, if a file named stimtimes.txt exists in the epoch directory, then we add in an epochprobemap entry for our visual stimulator: name reference type devicestring subjectstring vis_stim 1 stimulator vhvis_spike2:mk1-3;e1-3;md1 treeshrew_12345@mylab.org We will not reproduce the code here but refer the reader to the link for the source code of the class ndi.setup.epoch.epochprobemap_daqsystem_vhlab that is a subclass of ndi.epoch.epochprobemap_daqsystem .","title":"2.2.6 Creating a custom epochprobemap class"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/2_theautomatedway/#227-putting-it-all-together","text":"Now that we have these pieces together, we can read our example data that we call ts_exper2 . We will pull up the same plots that we pulled up in Tutorial 2.1 .","title":"2.2.7 Putting it all together"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/2_theautomatedway/#code-block-2271-type-this-into-matlab","text":"prefix = [ userpath filesep 'Documents' filesep 'NDI' ]; % if you put the folder somewhere else, edit this S = ndi . setup . vhlab ( 'ts_exper2' ,[ prefix filesep 'ts_exper2' ]); p_ctx1_list = S . getprobes ( 'name' , 'ctx' , 'reference' , 1 ) % returns a cell array of matches p_ctx1 = p_ctx1_list { 1 }; % take the first one, should be the only one epoch_to_read = 1 ; [ data , t , timeref_p_ctx1 ]= p_ctx1 . readtimeseries ( epoch_to_read , - Inf , Inf ); % read all data from epoch 1 figure ( 100 ); plot ( t , data ); xlabel ( 'Time(s)' ); ylabel ( 'Voltage (V)' ); set ( gca , 'xlim' ,[ t ( 1 ) t ( end )]); box off ; p_visstim_list = S . getprobes ( 'type' , 'stimulator' ) % returns a cell array of matches p_visstim = p_visstim_list { 1 }; % take the first one, should be the only one [ data , t , timeref_stim ]= p_visstim . readtimeseries ( timeref_p_ctx1 , - Inf , Inf ); % read all data from epoch 1 of p_ctx1 ! figure ( 100 ); hold on ; vlt . neuro . stimulus . plot_stimulus_timeseries ( 7 , t . stimon , t . stimoff , 'stimid' , data . stimid ); If you are paying close attention, you'll notice we got a little more information out of the readtimeseries command here. t.stimoff exists (it's extracted from our stimulus metadata), so we don't have to know the stimulus duration from elsewhere. That information is not directly accessible in the event record of the smr file, so there is an advantage to reading all the metadata that is available from all sources with a custom object.","title":"Code block 2.2.7.1 Type this into Matlab"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/2_theautomatedway/#228-discussionfeedback","text":"This concludes our tutorial on setting up code files to read one's own data and metadata into NDI. To help make this process clearer, we also include 3 other case studies in reading data (tutorials currently under construction): Alessandra Angelluci lab (reads unpublished recording) Don Katz lab (reads Mukherjee et al., 2019 ) Eve Marder lab (reads Hamood et al., 2015 ) Post comments, bugs, questions, or discuss .","title":"2.2.8 Discussion/Feedback"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/3_spikesorting/","text":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI \u00b6 Tutorial 2.3: Using apps to analyze data (spike sorting) \u00b6 You've seen how to read data from probes in NDI. Now suppose we want to do some analysis of this data? How would we do it? Clearly, one could write functions in Matlab that read the data and perform some sort of analysis. But it would be great to share (or borrow) those functions across the open source community, and to develop \"apps\" that excel at performing specific tasks. NDI allows both approaches. Tutorial 2.3.1: What is an 'app' in NDI? ndi.app objects \u00b6 An app for our purposes is any application program that can read data from NDI and perform some analysis or computation on this data. Some apps exist outside of NDI, and know how to read data from NDI experiments and write results back to NDI experimental sessions. One example of such an app is the spike sorting program JRClust. There is another set of apps that are developed specifically for NDI that are members of a special parent class called ndi.app . This parent class performs some services to help app developers maintain a consistant approach to make it easier for users and programmers that want to use the app to easily figure out what it does and how to use it. Here, we will examine one of these apps that we made for spike extraction. Just like Windows computers come with NotePad and Mac computers come with TextEdit, our ndi.app.spikeextractor is a plain-but-usable program for extracting spike waveforms from voltage records. It is suitable for spike extraction situations where the channel count for each electrode is low, such as single electrodes or tetrodes. It is not suitable for dense, multichannel electrodes like NeuroPixels or dense NeuroNexus probes. We will use the program first as though we knew how to use it by magic, and then we will go through how one could figure out how to use the program if one didn't know. Tutorial 2.3.2: Extracting spikes using ndi.app.spikeextractor \u00b6 Code block 2.3.2.1. Type this into Matlab. \u00b6 dirname = [ userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2' ]; % change this if you put the example somewhere else ref = 'ts_exper2' ; S = ndi . setup . vhlab ( ref , dirname ); % let's find our probes that correspond to extracellular electrodes p = S . getprobes ( 'type' , 'n-trode' ); % make a new app instance se = ndi . app . spikeextractor ( S ); % find out what the spike extraction parameters are extraction_param_struct = se . defaultstruct_appdoc ( 'extraction_parameters' ); % if we wanted to modify these parameters, we could extraction_param_struct . threshold_parameter = 4 ; extraction_param_struct . threshold_sign = 1 ; my_extraction_name { 1 } = 'my_positive_extraction_params' ; extraction_param_doc = se . add_appdoc ( 'extraction_parameters' , extraction_param_struct , 'Replace' , my_extraction_name { 1 }); my_extraction_name { 2 } = 'my_negative_extraction_params' ; extraction_param_struct . threshold_parameter = - 4 ; extraction_param_struct . threshold_sign = - 1 ; extraction_param_doc_2 = se . add_appdoc ( 'extraction_parameters' , extraction_param_struct , 'Replace' , my_extraction_name { 2 }); % we will add a parameter document to our database that our extractor will use % now let's perform the extraction over all epochs redo = 1 ; % redo it if we already did it % we know there are two probes, so do it for both se . extract ( p { 1 },[], my_extraction_name { 1 }, redo ); se . extract ( p { 2 },[], my_extraction_name { 2 }, redo ); Now, let's take a look at what we extracted: Code block 2.3.2.2 Type this into Matlab. \u00b6 % now let's take a look at what we got for the first probe, first epoch epoch_id = 't00001' ; [ spikes , waveparameters , spikewaves_doc ] = se . loaddata_appdoc ( 'spikewaves' , p { 1 }, epoch_id , my_extraction_name { 1 }); % let's plot these waveforms t_spike = [ waveparameters . S0 : waveparameters . S1 ] * 1 / waveparameters . samplerate ; % create a time vector % spikes is a 3-d matrix. % The first dimension has the number of samples per spike. % The second dimension has data from each channel. Because this is a single electrode, there is only one channel. If it were a tetrode, this would be 4. % The third dimension is the number of spikes detected. size ( spikes ) figure ( 101 ); plot ( t_spike , squeeze ( spikes )); xlabel ( 'Time (s)' ); ylabel ( 'Voltage' ); box off ; % We can see how we did by plotting the spike times back with the raw data: [ spiketimes , spiketimes_doc ] = se . loaddata_appdoc ( 'spiketimes' , p { 1 }, epoch_id , my_extraction_name { 1 }); [ d , t ] = readtimeseries ( p { 1 }, epoch_id , - Inf , Inf ); figure ( 102 ); plot ( t , d ); hold on ; samples = round ( vlt . signal . value2sample ( spiketimes , 1 / ( t ( 2 ) - t ( 1 )), 0 )); plot ( t ( samples ), d ( samples ), 'ko' ); % mark each spike peak location with a circle 2.3.3 Spike sorting using ndi.app.spikesorter \u00b6 Now we will feed our results to our plain spikesorting application, which relies on either Kmeans clustering the KlustaKwik clustering tool (Harris KD, J. Neurophys. , 2000). As a first step, we will create a sorting parameters document to specify how we will perform the sorting. This program includes a small graphical user interface to help in choosing the clusters (called in the line that has ssa.spike_sort ). For a quick video demo of how to use this graphical user interface in the context of this tutorial, click here . Code block 2.3.3.1 Type this into Matlab. \u00b6 ssa = ndi . app . spikesorter ( S ); sorting_params_struct = ssa . defaultstruct_appdoc ( 'sorting_parameters' ); my_sorting_name = 'my_sorting_params' ; sorting_param_doc = ssa . add_appdoc ( 'sorting_parameters' , sorting_params_struct , 'Replace' , my_sorting_name ); spike_cluster_doc = ssa . spike_sort ( p { 1 }, my_extraction_name { 1 }, my_sorting_name , redo ) ssa . clusters2neurons ( p { 1 }, my_sorting_name , my_extraction_name { 1 }, redo ) spike_cluster_doc = ssa . spike_sort ( p { 2 }, my_extraction_name { 2 }, my_sorting_name , redo ) ssa . clusters2neurons ( p { 2 }, my_sorting_name , my_extraction_name { 2 }) Now let's check the spike times of the the first neuron Code block 2.3.3.2 Type this into Matlab. \u00b6 e = S . getelements ( 'element.type' , 'spikes' , 'element.name' , 'ctx_1' ) [ D , T ] = e { 1 }. readtimeseries ( 't00001' , - Inf , Inf ); figure ( 102 ); hold on ; samples2 = round ( vlt . signal . value2sample ( T , 1 / ( t ( 2 ) - t ( 1 )), 0 )); plot ( T , d ( samples2 ), 'gs' ); % now spike times from neuron 1 are plotted as green squares You can observe that most of the spiketimes that were detected on the first probe are part of neuron 1, but there are some lower amplitude peaks that are not. 2.3.4 How can we learn about the functionality of ndi.app objects? \u00b6 In section 2.2, we used ndi.app.spikeextractor as though we were born knowning what to do. How could we learn how to use a new app if there isn't a tutorial available? There are three great ways to learn about what apps do and how to use them. Read the main documentation for the app by typing help *appclass* or doc *appclass* into the Matlab command line. For example, try help ndi.app.spikeextractor . Many apps follow what we call the appdoc convention for creating the documents that they create and loading the documents and data that they have generated. This is a convention that have developed relatively recently, and we are in the process of converting all of our included ndi.app objects to use this form. If an app follows ndi.app.appdoc (which means it is a member of the ndi.app.appdoc class), then they will have a set of methods called: Method Description appdoc_description The help information should have a full description of all database documents that are produced by the application. Type help *appname*/appdoc_description . For example, help ndi.app.spikeextractor/appdoc_description add_appdoc Add a new document of a given type to the database, using the app clear_appdoc Delete a document of a given type from the database, using the app find_appdoc Find the NDI document for a given type, using the app loaddata_appdoc Load binary data associated with an NDI document, using the app Let's look at the document types that are written and needed by ndi.app.spikeextractor : Code block 2.3.4.1. Type this into Matlab \u00b6 help ndi . app . spikeextractor / appdoc_description You see a long bit of text that describes all of the document types that are generated and calculated by ndi.app.spikeextractor . Here's a table of the document types and their \"about\" info for ndi.app.spikeextractor: Appdoc Type Description EXTRACTION_PARAMETERS EXTRACTION_PARAMETERS documents hold the parameters that are to be used to guide the extraction of spikewaves EXTRACTION_PARAMETERS_MODIFICATION EXTRACTION_PARAMETERS_MODIFICATION documents allow the user to modify the spike extraction parameters for a specific epoch SPIKEWAVES SPIKEWAVES documents store the spike waveforms that are read during a spike extraction. It DEPENDS ON the ndi.time.timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that descibed the extraction SPIKETIMES SPIKETIMES documents store the times spike waveforms that are read during a spike extraction. It DEPENDS ON the ndi.time.timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that descibed the extraction. The times are in the local epoch time units. If the app writer really loves his/her/their users, then he/she/they will create a tutorial. Look for a tutorial, that should be referenced in the Matlab help. We are working on adding tutorials for all of our included applications, but we are not there yet. Discussion/Feedback 2.3.5 \u00b6 Post comments, bugs, questions, or discuss .","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/3_spikesorting/#tutorial-2-analyzing-your-first-electrophysiology-experiment-with-ndi","text":"","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/3_spikesorting/#tutorial-23-using-apps-to-analyze-data-spike-sorting","text":"You've seen how to read data from probes in NDI. Now suppose we want to do some analysis of this data? How would we do it? Clearly, one could write functions in Matlab that read the data and perform some sort of analysis. But it would be great to share (or borrow) those functions across the open source community, and to develop \"apps\" that excel at performing specific tasks. NDI allows both approaches.","title":"Tutorial 2.3: Using apps to analyze data (spike sorting)"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/3_spikesorting/#tutorial-231-what-is-an-app-in-ndi-ndiapp-objects","text":"An app for our purposes is any application program that can read data from NDI and perform some analysis or computation on this data. Some apps exist outside of NDI, and know how to read data from NDI experiments and write results back to NDI experimental sessions. One example of such an app is the spike sorting program JRClust. There is another set of apps that are developed specifically for NDI that are members of a special parent class called ndi.app . This parent class performs some services to help app developers maintain a consistant approach to make it easier for users and programmers that want to use the app to easily figure out what it does and how to use it. Here, we will examine one of these apps that we made for spike extraction. Just like Windows computers come with NotePad and Mac computers come with TextEdit, our ndi.app.spikeextractor is a plain-but-usable program for extracting spike waveforms from voltage records. It is suitable for spike extraction situations where the channel count for each electrode is low, such as single electrodes or tetrodes. It is not suitable for dense, multichannel electrodes like NeuroPixels or dense NeuroNexus probes. We will use the program first as though we knew how to use it by magic, and then we will go through how one could figure out how to use the program if one didn't know.","title":"Tutorial 2.3.1: What is an 'app' in NDI? ndi.app objects"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/3_spikesorting/#tutorial-232-extracting-spikes-using-ndiappspikeextractor","text":"","title":"Tutorial 2.3.2: Extracting spikes using ndi.app.spikeextractor"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/3_spikesorting/#code-block-2321-type-this-into-matlab","text":"dirname = [ userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2' ]; % change this if you put the example somewhere else ref = 'ts_exper2' ; S = ndi . setup . vhlab ( ref , dirname ); % let's find our probes that correspond to extracellular electrodes p = S . getprobes ( 'type' , 'n-trode' ); % make a new app instance se = ndi . app . spikeextractor ( S ); % find out what the spike extraction parameters are extraction_param_struct = se . defaultstruct_appdoc ( 'extraction_parameters' ); % if we wanted to modify these parameters, we could extraction_param_struct . threshold_parameter = 4 ; extraction_param_struct . threshold_sign = 1 ; my_extraction_name { 1 } = 'my_positive_extraction_params' ; extraction_param_doc = se . add_appdoc ( 'extraction_parameters' , extraction_param_struct , 'Replace' , my_extraction_name { 1 }); my_extraction_name { 2 } = 'my_negative_extraction_params' ; extraction_param_struct . threshold_parameter = - 4 ; extraction_param_struct . threshold_sign = - 1 ; extraction_param_doc_2 = se . add_appdoc ( 'extraction_parameters' , extraction_param_struct , 'Replace' , my_extraction_name { 2 }); % we will add a parameter document to our database that our extractor will use % now let's perform the extraction over all epochs redo = 1 ; % redo it if we already did it % we know there are two probes, so do it for both se . extract ( p { 1 },[], my_extraction_name { 1 }, redo ); se . extract ( p { 2 },[], my_extraction_name { 2 }, redo ); Now, let's take a look at what we extracted:","title":"Code block 2.3.2.1. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/3_spikesorting/#code-block-2322-type-this-into-matlab","text":"% now let's take a look at what we got for the first probe, first epoch epoch_id = 't00001' ; [ spikes , waveparameters , spikewaves_doc ] = se . loaddata_appdoc ( 'spikewaves' , p { 1 }, epoch_id , my_extraction_name { 1 }); % let's plot these waveforms t_spike = [ waveparameters . S0 : waveparameters . S1 ] * 1 / waveparameters . samplerate ; % create a time vector % spikes is a 3-d matrix. % The first dimension has the number of samples per spike. % The second dimension has data from each channel. Because this is a single electrode, there is only one channel. If it were a tetrode, this would be 4. % The third dimension is the number of spikes detected. size ( spikes ) figure ( 101 ); plot ( t_spike , squeeze ( spikes )); xlabel ( 'Time (s)' ); ylabel ( 'Voltage' ); box off ; % We can see how we did by plotting the spike times back with the raw data: [ spiketimes , spiketimes_doc ] = se . loaddata_appdoc ( 'spiketimes' , p { 1 }, epoch_id , my_extraction_name { 1 }); [ d , t ] = readtimeseries ( p { 1 }, epoch_id , - Inf , Inf ); figure ( 102 ); plot ( t , d ); hold on ; samples = round ( vlt . signal . value2sample ( spiketimes , 1 / ( t ( 2 ) - t ( 1 )), 0 )); plot ( t ( samples ), d ( samples ), 'ko' ); % mark each spike peak location with a circle","title":"Code block 2.3.2.2 Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/3_spikesorting/#233-spike-sorting-using-ndiappspikesorter","text":"Now we will feed our results to our plain spikesorting application, which relies on either Kmeans clustering the KlustaKwik clustering tool (Harris KD, J. Neurophys. , 2000). As a first step, we will create a sorting parameters document to specify how we will perform the sorting. This program includes a small graphical user interface to help in choosing the clusters (called in the line that has ssa.spike_sort ). For a quick video demo of how to use this graphical user interface in the context of this tutorial, click here .","title":"2.3.3 Spike sorting using ndi.app.spikesorter"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/3_spikesorting/#code-block-2331-type-this-into-matlab","text":"ssa = ndi . app . spikesorter ( S ); sorting_params_struct = ssa . defaultstruct_appdoc ( 'sorting_parameters' ); my_sorting_name = 'my_sorting_params' ; sorting_param_doc = ssa . add_appdoc ( 'sorting_parameters' , sorting_params_struct , 'Replace' , my_sorting_name ); spike_cluster_doc = ssa . spike_sort ( p { 1 }, my_extraction_name { 1 }, my_sorting_name , redo ) ssa . clusters2neurons ( p { 1 }, my_sorting_name , my_extraction_name { 1 }, redo ) spike_cluster_doc = ssa . spike_sort ( p { 2 }, my_extraction_name { 2 }, my_sorting_name , redo ) ssa . clusters2neurons ( p { 2 }, my_sorting_name , my_extraction_name { 2 }) Now let's check the spike times of the the first neuron","title":"Code block 2.3.3.1 Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/3_spikesorting/#code-block-2332-type-this-into-matlab","text":"e = S . getelements ( 'element.type' , 'spikes' , 'element.name' , 'ctx_1' ) [ D , T ] = e { 1 }. readtimeseries ( 't00001' , - Inf , Inf ); figure ( 102 ); hold on ; samples2 = round ( vlt . signal . value2sample ( T , 1 / ( t ( 2 ) - t ( 1 )), 0 )); plot ( T , d ( samples2 ), 'gs' ); % now spike times from neuron 1 are plotted as green squares You can observe that most of the spiketimes that were detected on the first probe are part of neuron 1, but there are some lower amplitude peaks that are not.","title":"Code block 2.3.3.2 Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/3_spikesorting/#234-how-can-we-learn-about-the-functionality-of-ndiapp-objects","text":"In section 2.2, we used ndi.app.spikeextractor as though we were born knowning what to do. How could we learn how to use a new app if there isn't a tutorial available? There are three great ways to learn about what apps do and how to use them. Read the main documentation for the app by typing help *appclass* or doc *appclass* into the Matlab command line. For example, try help ndi.app.spikeextractor . Many apps follow what we call the appdoc convention for creating the documents that they create and loading the documents and data that they have generated. This is a convention that have developed relatively recently, and we are in the process of converting all of our included ndi.app objects to use this form. If an app follows ndi.app.appdoc (which means it is a member of the ndi.app.appdoc class), then they will have a set of methods called: Method Description appdoc_description The help information should have a full description of all database documents that are produced by the application. Type help *appname*/appdoc_description . For example, help ndi.app.spikeextractor/appdoc_description add_appdoc Add a new document of a given type to the database, using the app clear_appdoc Delete a document of a given type from the database, using the app find_appdoc Find the NDI document for a given type, using the app loaddata_appdoc Load binary data associated with an NDI document, using the app Let's look at the document types that are written and needed by ndi.app.spikeextractor :","title":"2.3.4 How can we learn about the functionality of ndi.app objects?"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/3_spikesorting/#code-block-2341-type-this-into-matlab","text":"help ndi . app . spikeextractor / appdoc_description You see a long bit of text that describes all of the document types that are generated and calculated by ndi.app.spikeextractor . Here's a table of the document types and their \"about\" info for ndi.app.spikeextractor: Appdoc Type Description EXTRACTION_PARAMETERS EXTRACTION_PARAMETERS documents hold the parameters that are to be used to guide the extraction of spikewaves EXTRACTION_PARAMETERS_MODIFICATION EXTRACTION_PARAMETERS_MODIFICATION documents allow the user to modify the spike extraction parameters for a specific epoch SPIKEWAVES SPIKEWAVES documents store the spike waveforms that are read during a spike extraction. It DEPENDS ON the ndi.time.timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that descibed the extraction SPIKETIMES SPIKETIMES documents store the times spike waveforms that are read during a spike extraction. It DEPENDS ON the ndi.time.timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that descibed the extraction. The times are in the local epoch time units. If the app writer really loves his/her/their users, then he/she/they will create a tutorial. Look for a tutorial, that should be referenced in the Matlab help. We are working on adding tutorials for all of our included applications, but we are not there yet.","title":"Code block 2.3.4.1. Type this into Matlab"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/3_spikesorting/#discussionfeedback-235","text":"Post comments, bugs, questions, or discuss .","title":"Discussion/Feedback 2.3.5"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/4_analyzing_tuning_curves/","text":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI \u00b6 2.4 Analyzing stimulus responses \u00b6 In the last tutorial, we saw how to use applications to identify spikes from electrophysiology recordings. Now we will employ another plain app for calculating responses to stimulation. Note that this tutorial requires that you have completed Tutorial 2.3 (the analysis here depends on the spike sorted results of Tutorial 2.3). 2.4.1 Sinusoidal gratings to assess direction and orientation preferences and spatial frequency preferences \u00b6 In this experiment ( Van Hooser et al. 2013 ), we assessed tuning for stimulus direction and spatial frequency with sinusoidal gratings. A series of sinusoidal gratings drifting in different directions are shown here . In the actual experiments, we assessed orientation/direction preferences coarsely, and then found the optimal spatial and temporal frequency for the cell before assessing orientation/direction in a fine manner at the optimal spatial and temporal frequency for the cell. The fine orientation/direction assessment is what is included in this demo. So let's open our demo experiment and get started! We are also going to identify our stimulator (visual stimulus system) so that we can tell NDI to analyze stimuli from this device. Code Block 2.4.1.1. Type this into Matlab. \u00b6 dirname = [ userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2' ]; % change this if you put the example somewhere else ref = 'ts_exper2' ; S = ndi . session . dir ( ref , dirname ); % find out stimulus probe stimprobe = S . getprobes ( 'type' , 'stimulator' ); stimprobe = stimprobe { 1 }; % grab the first one, should be our stimulus monitor 2.4.2 Gathering stimulus information \u00b6 The first step in analyzing stimuli is to gather information about the stimulus presentations that were performed in the experiment. We use a small dedicated app for this purpose called ndi.app.stimulus.decoder . Code Block 2.4.2.1. Type this into Matlab. \u00b6 sapp = ndi . app . stimulus . decoder ( S ); redo = 1 ; [ stim_pres_docs ] = sapp . parse_stimuli ( stimprobe , redo ); Now let's take a look at what has been decoded: Code Block 2.4.2.2. Type this into Matlab. \u00b6 stim_pres_docs { 1 }. document_properties . stimulus_presentation % these are the fields that were decoded by ndi.app.stimulus.decoder % let's take a look % here is information about the presentation time of the first stimulus stim_pres_docs { 1 }. document_properties . stimulus_presentation . presentation_time ( 1 ) % here is information about the presentation order of the first 10 stimuli shown: stim_pres_docs { 1 }. document_properties . stimulus_presentation . presentation_order ( 1 : 10 ) % We see that the first stimulus that was presented was stimulus number 4. Let's take a look at its properties: stim_pres_docs { 1 }. document_properties . stimulus_presentation . stimuli ( 4 ). parameters % We can also take a look at the control or blank stimulus properties: stim_pres_docs { 1 }. document_properties . stimulus_presentation . stimuli ( 17 ). parameters % you can see that there are 4 such documents, one for each stimulus presentation in the experiment stim_pres_docs , 2.4.3 Labeling control stimuli \u00b6 For most turning curve data, we want to compare the response during the time of stimulation to the response of the system during some background time, or some \"control\" stimulus. For visual stimuli, this is often a period where a gray screen is shown that has the same duration as the visual stimuli that may be shown. For an auditory stimulus, it may be a period of time when no specific auditory stimulus is playing and the animal hears the noise of the background environment. Often, stimuli have in their parameters a field that declares that a stimulus is a control or blank stimulus. Our stimuli have such a code as shown above (stimulus 17). Code Block 2.4.3.1. Type this into Matlab. \u00b6 rapp = ndi . app . stimulus . tuning_response ( S ); cs_doc = rapp . label_control_stimuli ( stimprobe , redo ); Let's examine what it did. We see that the ndi.app.stimuli.tuning_response app each of the 85 stimuli with the \"blank\" stimulus that was presented closest in time: Code Block 2.4.3.2. Type this into Matlab. \u00b6 % see the control stimulus identifier for all the stimuli cs_doc { 1 }. document_properties . control_stimulus_ids . control_stimulus_ids % see the method used to identify the control stimulus for each stimulus: cs_doc { 1 }. document_properties . control_stimulus_ids . control_stimulus_id_method % see the help for the label_control_stimuli function: help ndi . app . stimulus . tuning_response . label_control_stimuli 2.4.4 Calculating stimulus responses \u00b6 Once the control stimuli have been labeled (if desired; it is optional), then one can proceed to calcuate the stimulus responses. To do this, we can employ the [ndi.app.stimuli.tuning_response]((https://vh-lab.github.io/NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/) app. This program will calculate the mean response to each stimulus. Because gratings are a periodic stimulus, this function will also calculate the response at the fundamental stimulus temporal frequency (F1 component) and at twice this temporal frequency (F2 component). Code block 2.4.4.1. Type this into Matlab. \u00b6 e = S . getelements ( 'element.type' , 'spikes' ); rdocs { 1 } = rapp . stimulus_responses ( stimprobe , e { 1 }, redo ); rdocs { 2 } = rapp . stimulus_responses ( stimprobe , e { 2 }, redo ); Now we can examine the sets of documents that are produced. We see that there are two sets of 3 documents each: Code block 2.4.4.2. Type this into Matlab. \u00b6 % look at rdocs{1}: rdocs { 1 } % it is a 1x2 cell array, and each of these cell entries is in turn a 1x3 cell array rdocs { 1 }{ 1 } % this reflects the two epochs ('t00001' and 't00002'), and, for each epoch, the analysis of the mean response, the F1 component, and the F2 component % to see this, let's look at the first document rdocs { 1 }{ 1 }{ 1 }. document_properties rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response_scalar % we see that this is the 'mean' response. We can see the responses contained within: rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response_scalar . responses % we can see that each of the 85 presentations includes a response that can possibly have a real and imaginary component, as well as a control response rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response_scalar . responses . response_real ( 1 ) rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response_scalar . responses . control_response_real ( 1 ) 2.4.5 Computing an orientation/direction tuning curve and calculating orientation/direction index values \u00b6 Now that we have all of the responses to the individual stimuli, we can create a tuning curve, which examines how the response of the neuron depends on a particular stimulus parameter. In this case, the stimulus is 'angle', which corresponds to the direction of the sinusoidal grating stimulus. We have built a specific application ndi.app.oridirtuning to process tuning curves in response to oriented stimuli, or stimuli moving in particular directions. After generating the tuning curve, we can calculate many, many index values that characterize the tuning of each cell. The function that calculates the orientation and direction index values pulls up a plot. If you look at the plot that examines the mean response for ctx_1 , you can see that the cell responds strongly to gratings drifting at 120 degrees and 300 degrees (0 degrees is up; 90 degrees is to the right). Code block 2.4.5.1. Type this into Matlab. \u00b6 oapp = ndi . app . oridirtuning ( S ); for i = 1 : 2 , tdoc { i } = oapp . calculate_tuning_curve ( e { i }); oriprops { i } = oapp . calculate_all_oridir_indexes ( e { i }); % this takes a few minutes end ; The program should pop up 6 figures that look like this when they are adjusted to have the same axes: The tuning curves show that cell Ctx 1 has a strong orientation-tuned mean response to bars drifting at an angle of about 90 degrees (vertical bars moving rightward) or 270 degrees (vertical bars moving leftward). The cell LGN 1 does not exhibit strong tuning for orientation or direction, but instead exhibits a strong modulated response (F1) to most directions. Now let's take a look at these index values for the first cell. These index values are described in Mazurek et al. (2014) . Code block 2.4.5.2. Type this into Matlab. \u00b6 % see all the categories oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning % see the property information oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning . properties % see significance. Responses across orientation are very significant: oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning . significance % fit parameters: oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning . fit % vector tuning parameters: oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning . vector Now we have seen how we can analyze stimulus responses and use applications to calculate tuning curves and index values. If you had your own stimulus responses of a different type, you could write functions or apps that analyze the results and calculate the appropriate index values. 2.4.5 Discussion/Feedback \u00b6 Post comments, bugs, questions, or discuss .","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/4_analyzing_tuning_curves/#tutorial-2-analyzing-your-first-electrophysiology-experiment-with-ndi","text":"","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/4_analyzing_tuning_curves/#24-analyzing-stimulus-responses","text":"In the last tutorial, we saw how to use applications to identify spikes from electrophysiology recordings. Now we will employ another plain app for calculating responses to stimulation. Note that this tutorial requires that you have completed Tutorial 2.3 (the analysis here depends on the spike sorted results of Tutorial 2.3).","title":"2.4 Analyzing stimulus responses"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/4_analyzing_tuning_curves/#241-sinusoidal-gratings-to-assess-direction-and-orientation-preferences-and-spatial-frequency-preferences","text":"In this experiment ( Van Hooser et al. 2013 ), we assessed tuning for stimulus direction and spatial frequency with sinusoidal gratings. A series of sinusoidal gratings drifting in different directions are shown here . In the actual experiments, we assessed orientation/direction preferences coarsely, and then found the optimal spatial and temporal frequency for the cell before assessing orientation/direction in a fine manner at the optimal spatial and temporal frequency for the cell. The fine orientation/direction assessment is what is included in this demo. So let's open our demo experiment and get started! We are also going to identify our stimulator (visual stimulus system) so that we can tell NDI to analyze stimuli from this device.","title":"2.4.1 Sinusoidal gratings to assess direction and orientation preferences and spatial frequency preferences"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/4_analyzing_tuning_curves/#code-block-2411-type-this-into-matlab","text":"dirname = [ userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2' ]; % change this if you put the example somewhere else ref = 'ts_exper2' ; S = ndi . session . dir ( ref , dirname ); % find out stimulus probe stimprobe = S . getprobes ( 'type' , 'stimulator' ); stimprobe = stimprobe { 1 }; % grab the first one, should be our stimulus monitor","title":"Code Block 2.4.1.1. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/4_analyzing_tuning_curves/#242-gathering-stimulus-information","text":"The first step in analyzing stimuli is to gather information about the stimulus presentations that were performed in the experiment. We use a small dedicated app for this purpose called ndi.app.stimulus.decoder .","title":"2.4.2 Gathering stimulus information"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/4_analyzing_tuning_curves/#code-block-2421-type-this-into-matlab","text":"sapp = ndi . app . stimulus . decoder ( S ); redo = 1 ; [ stim_pres_docs ] = sapp . parse_stimuli ( stimprobe , redo ); Now let's take a look at what has been decoded:","title":"Code Block 2.4.2.1. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/4_analyzing_tuning_curves/#code-block-2422-type-this-into-matlab","text":"stim_pres_docs { 1 }. document_properties . stimulus_presentation % these are the fields that were decoded by ndi.app.stimulus.decoder % let's take a look % here is information about the presentation time of the first stimulus stim_pres_docs { 1 }. document_properties . stimulus_presentation . presentation_time ( 1 ) % here is information about the presentation order of the first 10 stimuli shown: stim_pres_docs { 1 }. document_properties . stimulus_presentation . presentation_order ( 1 : 10 ) % We see that the first stimulus that was presented was stimulus number 4. Let's take a look at its properties: stim_pres_docs { 1 }. document_properties . stimulus_presentation . stimuli ( 4 ). parameters % We can also take a look at the control or blank stimulus properties: stim_pres_docs { 1 }. document_properties . stimulus_presentation . stimuli ( 17 ). parameters % you can see that there are 4 such documents, one for each stimulus presentation in the experiment stim_pres_docs ,","title":"Code Block 2.4.2.2. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/4_analyzing_tuning_curves/#243-labeling-control-stimuli","text":"For most turning curve data, we want to compare the response during the time of stimulation to the response of the system during some background time, or some \"control\" stimulus. For visual stimuli, this is often a period where a gray screen is shown that has the same duration as the visual stimuli that may be shown. For an auditory stimulus, it may be a period of time when no specific auditory stimulus is playing and the animal hears the noise of the background environment. Often, stimuli have in their parameters a field that declares that a stimulus is a control or blank stimulus. Our stimuli have such a code as shown above (stimulus 17).","title":"2.4.3 Labeling control stimuli"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/4_analyzing_tuning_curves/#code-block-2431-type-this-into-matlab","text":"rapp = ndi . app . stimulus . tuning_response ( S ); cs_doc = rapp . label_control_stimuli ( stimprobe , redo ); Let's examine what it did. We see that the ndi.app.stimuli.tuning_response app each of the 85 stimuli with the \"blank\" stimulus that was presented closest in time:","title":"Code Block 2.4.3.1. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/4_analyzing_tuning_curves/#code-block-2432-type-this-into-matlab","text":"% see the control stimulus identifier for all the stimuli cs_doc { 1 }. document_properties . control_stimulus_ids . control_stimulus_ids % see the method used to identify the control stimulus for each stimulus: cs_doc { 1 }. document_properties . control_stimulus_ids . control_stimulus_id_method % see the help for the label_control_stimuli function: help ndi . app . stimulus . tuning_response . label_control_stimuli","title":"Code Block 2.4.3.2. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/4_analyzing_tuning_curves/#244-calculating-stimulus-responses","text":"Once the control stimuli have been labeled (if desired; it is optional), then one can proceed to calcuate the stimulus responses. To do this, we can employ the [ndi.app.stimuli.tuning_response]((https://vh-lab.github.io/NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/) app. This program will calculate the mean response to each stimulus. Because gratings are a periodic stimulus, this function will also calculate the response at the fundamental stimulus temporal frequency (F1 component) and at twice this temporal frequency (F2 component).","title":"2.4.4 Calculating stimulus responses"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/4_analyzing_tuning_curves/#code-block-2441-type-this-into-matlab","text":"e = S . getelements ( 'element.type' , 'spikes' ); rdocs { 1 } = rapp . stimulus_responses ( stimprobe , e { 1 }, redo ); rdocs { 2 } = rapp . stimulus_responses ( stimprobe , e { 2 }, redo ); Now we can examine the sets of documents that are produced. We see that there are two sets of 3 documents each:","title":"Code block 2.4.4.1. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/4_analyzing_tuning_curves/#code-block-2442-type-this-into-matlab","text":"% look at rdocs{1}: rdocs { 1 } % it is a 1x2 cell array, and each of these cell entries is in turn a 1x3 cell array rdocs { 1 }{ 1 } % this reflects the two epochs ('t00001' and 't00002'), and, for each epoch, the analysis of the mean response, the F1 component, and the F2 component % to see this, let's look at the first document rdocs { 1 }{ 1 }{ 1 }. document_properties rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response_scalar % we see that this is the 'mean' response. We can see the responses contained within: rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response_scalar . responses % we can see that each of the 85 presentations includes a response that can possibly have a real and imaginary component, as well as a control response rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response_scalar . responses . response_real ( 1 ) rdocs { 1 }{ 1 }{ 1 }. document_properties . stimulus_response_scalar . responses . control_response_real ( 1 )","title":"Code block 2.4.4.2. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/4_analyzing_tuning_curves/#245-computing-an-orientationdirection-tuning-curve-and-calculating-orientationdirection-index-values","text":"Now that we have all of the responses to the individual stimuli, we can create a tuning curve, which examines how the response of the neuron depends on a particular stimulus parameter. In this case, the stimulus is 'angle', which corresponds to the direction of the sinusoidal grating stimulus. We have built a specific application ndi.app.oridirtuning to process tuning curves in response to oriented stimuli, or stimuli moving in particular directions. After generating the tuning curve, we can calculate many, many index values that characterize the tuning of each cell. The function that calculates the orientation and direction index values pulls up a plot. If you look at the plot that examines the mean response for ctx_1 , you can see that the cell responds strongly to gratings drifting at 120 degrees and 300 degrees (0 degrees is up; 90 degrees is to the right).","title":"2.4.5 Computing an orientation/direction tuning curve and calculating orientation/direction index values"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/4_analyzing_tuning_curves/#code-block-2451-type-this-into-matlab","text":"oapp = ndi . app . oridirtuning ( S ); for i = 1 : 2 , tdoc { i } = oapp . calculate_tuning_curve ( e { i }); oriprops { i } = oapp . calculate_all_oridir_indexes ( e { i }); % this takes a few minutes end ; The program should pop up 6 figures that look like this when they are adjusted to have the same axes: The tuning curves show that cell Ctx 1 has a strong orientation-tuned mean response to bars drifting at an angle of about 90 degrees (vertical bars moving rightward) or 270 degrees (vertical bars moving leftward). The cell LGN 1 does not exhibit strong tuning for orientation or direction, but instead exhibits a strong modulated response (F1) to most directions. Now let's take a look at these index values for the first cell. These index values are described in Mazurek et al. (2014) .","title":"Code block 2.4.5.1. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/4_analyzing_tuning_curves/#code-block-2452-type-this-into-matlab","text":"% see all the categories oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning % see the property information oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning . properties % see significance. Responses across orientation are very significant: oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning . significance % fit parameters: oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning . fit % vector tuning parameters: oriprops { 1 }{ 1 }. document_properties . orientation_direction_tuning . vector Now we have seen how we can analyze stimulus responses and use applications to calculate tuning curves and index values. If you had your own stimulus responses of a different type, you could write functions or apps that analyze the results and calculate the appropriate index values.","title":"Code block 2.4.5.2. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/4_analyzing_tuning_curves/#245-discussionfeedback","text":"Post comments, bugs, questions, or discuss .","title":"2.4.5 Discussion/Feedback"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/5_searching_ndi_databases/","text":"2 Analyzing your first electrophysiology experiment with NDI \u00b6 2.5 Understanding and searching the NDI database \u00b6 2.5.1 The ndi.database and ndi.document objects \u00b6 Each ndi.session object has an ndi.database object as one of its properties. This database holds the ndi.document objects that contain the metadata and data results of calculations that apps and programs have performed on the original data. First, let's open the ndi.session that we've been working with. Code block 2.5.1.1. Type this into Matlab. \u00b6 dirname = [ userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2' ]; % change this if you put the example somewhere else ref = 'ts_exper2' ; S = ndi . session . dir ( ref , dirname ); We find documents by searching for them with the ndi.session method database_search() . For example, we can examine all documents that contain stimulus presentation data: Code block 2.5.1.2. Type this into Matlab. \u00b6 stim_pres_doc = S . database_search ( ndi . query ( '' , 'isa' , 'stimulus_presentation' , '' )) % should see: % stim_pres_doc = % 1x4 cell array % {1x1 ndi.document} {1x1 ndi.document} {1x1 ndi.document} {1x1 ndi.document} stim_pres_doc { 1 } % should see: % ans = % document with properties: % document_properties: [1x1 struct] stim_pres_doc { 1 }. document_properties % should see: % ans = % struct with fields: % app: [1x1 struct] % depends_on: [1x1 struct] % document_class: [1x1 struct] % epochid: 't00001' % epochid_fix: [1x1 struct] % ndi_document: [1x1 struct] % stimulus_presentation: [1x1 struct] We have used an ndi.query object to conduct our search, and we will describe those objects a little later. Here we see that ndi.document objects have a property called document_properties that contains all of the text information that is stored in the document. We will look through all of these properties here, and we also direct you to the documentation page for the ndi.document class stimulus_presentation . 2.5.2 All ndi.document objects have the fields document_class and ndi_document . \u00b6 The document_class fields contain critical information about the class, such as the file that contains its definition, its full class name and its short class name. In addition, document types can be composed of multiple document types. The stimulus presentation class has two superclasses: ndi.document and ndi.document_epochid . This means that a stimulus_presentation document has its own fields, plus all of the fields from ndi.document documents and and ndi.document_epochid documents. Let's look at the data that specifies the superclasses: Code block 2.5.1.3. Type this into Matlab. \u00b6 stim_pres_doc { 1 }. document_properties . document_class % % ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/stimulus/stimulus_presentation.json' % validation: '$NDISCHEMAPATH/stimulus/stimulus_presentation_schema.json' % class_name: 'ndi_document_stimulus_stimulus_presentation' % property_list_name: 'stimulus_presentation' % class_version: 1 % superclasses: [3x1 struct] stim_pres_doc { 1 }. document_properties . document_class . superclasses ( 1 ) % ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/ndi_document.json' stim_pres_doc { 1 }. document_properties . document_class . superclasses ( 2 ) % ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/ndi_document_epochid.json' stim_pres_doc { 1 }. document_properties . document_class . superclasses ( 3 ) %ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/ndi_document.json' All documents have ndi_document as a superclass. Note that ndi.document is the name of the software object in Matlab (and Python), whereas ndi_document is the name of the database object type that has the following fields: field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database The most useful item in each ndi.document is its unique identifier id . This is a globally unique identifier, which means that no other ndi.document or corresponding ndi_document anywhere in the universe has the same identifier. It is constructed of two hexidecimal strings: the first is based on the time of creation in Universal Controlled Time (UTC), and the second is created by a random number generator. This constructions means that ndi.document ids are not only unique, but also that sorting them alphabetically will give you the creation order of the documents. This can come in handy from time to time. 2.5.3 Searching for ndi_documents with ndi.query \u00b6 Performing analyses or analyses of analyses in NDI involves searching for previous entries in the database, building upon them, and writing the results back to the database. The object ndi.query allows one to express database searches. Let's learn about ndi.query with a few examples. % search for document classes that contain the string 'stim' q_stim = ndi . query ( 'document_class.class_name' , 'contains_string' , 'stim' , '' ); stim_docs = S . database_search ( q_stim ) % returns 35 matches for me % now suppose we also want to search for documents that were made by % our app ndi_app_stimulus_decoder: q_stim_decoder = ndi . query ( 'app.name' , 'exact_string' , 'ndi_app_stimulus_decoder' , '' ); % we can find based on this criteria alone... stim_decoder_docs = S . database_search ( q_stim_decoder ) % returns 4 matches for me % ...or we can put the search terms together in an AND to demand both queries are satisfied q_stim_and_stim_decoder_docs = S . database_search ( q_stim_decoder & q_stim ); % returns 4 matches for me, because all q_stim_decoder docs have 'stimulus' in the class_name % we can also put queries together into a single variable: q_or = q_stim_decoder | q_stim ; q_and = q_stim_decoder & q_stim ; q_stim_and_stim_decoder_docs = S . database_search ( q_and ) % produces the same as above % now we can inspect these documents: q_stim_and_stim_decoder_docs { 1 }. document_properties % ans = % struct with fields: % app: [1x1 struct] % depends_on: [1x1 struct] % document_class: [1x1 struct] % epochid: 't00001' % epochid_fix: [1x1 struct] % ndi_document: [1x1 struct] % stimulus_presentation: [1x1 struct] q_stim_and_stim_decoder_docs { 1 }. document_properties . app % for me: % ans = % struct with fields: % name: 'ndi_app_stimulus_decoder' % version: 'fa1fa7818b215975c43f68ece523b065852ef891' % url: 'https://github.com/VH-Lab/NDI-matlab' % os: 'MACI64' % os_version: '10.14.6' % interpreter: 'MATLAB' % interpreter_version: '9.8' q_stim_and_stim_decoder_docs { 1 }. document_properties . stimulus_presentation % ans = % struct with fields: % presentation_order: [85x1 double] % presentation_time: [85x1 struct] % stimuli: [17x1 struct] The different possible search terms for ndi.query objects is shown below: NDI_QUERY_OBJ = ndi . query ( FIELD , OPERATION , PARAM1 , PARAM2 ) Operation Description 'regexp' are there any regular expression matches between the field value and 'param1' ? 'exact_string' is the field value an exact string match for 'param1' ? 'contains_string' is the field value a char array that contains 'param1' ? 'exact_number' is the field value exactly 'param1' (same size and values)? 'lessthan' is the field value less than 'param1' (and comparable size) 'lessthaneq' is the field value less than or equal to 'param1' (and comparable size) 'greaterthan' is the field value greater than 'param1' (and comparable size) 'greaterthaneq' is the field value greater than or equal to 'param1' (and comparable size) 'hasfield' is the field present? (no role for 'param1' or 'param2' ) 'hasanysubfield_contains_string' Is the field value an array of structs or cell array of structs such that any has a field named 'param1' with a string that contains the string in 'param2' ? 'or' are any of the searchstruct elements specified in ' param1 ' true? 'isa' is 'param1' either a superclass or the document class itself of the ndi_document? 'depends_on' does the document depend on an item with name 'param1' and value 'param2' ? 2.5.4 The depends_on field and database structure \u00b6 Many analysis procedures or creation procedures are dependent on the results from previous calculations. These dependencies are denoted in a field called depends_on . Let's look at the dependencies for our example stimulus presentation: Code block 2.5.4.1. Type this into Matlab. \u00b6 stim_pres_doc { 1 }. document_properties . depends_on % should see: % ans = % struct with fields: % name: 'stimulus_element_id' % value: '412687d3ae63489a_40d1d65fa08bb81a' % what is this node at 412687d3ae63489a_40d1d65fa08bb81a ? mydoc = S . database_search ( ndi . query ( 'ndi_document.id' , 'exact_string' , ... stim_pres_doc { 1 }. document_properties . depends_on ( 1 ). value , '' )); mydoc { 1 }. document_properties % ans = % struct with fields: % depends_on: [2x1 struct] % document_class: [1x1 struct] % element: [1x1 struct] % ndi_document: [1x1 struct] mydoc { 1 }. document_properties . element % ans = % struct with fields: % ndi_element_class: 'ndi.probe.timeseries.stimulator' % name: 'vhvis_spike2' % reference: 1 % type: 'stimulator' % direct: 1 % We see it is our visual stimulation system Some documents have a lot of depends_on items. Let's examine our ctx_1 neuron that we created in Tutorial 2.3 . Code block 2.5.4.2. Type this into Matlab. \u00b6 e = S . getelements ( 'element.type' , 'spikes' ); spikes_doc = S . database_search ( ndi . query ( 'ndi_document.id' , 'exact_string' , e { 1 }. id (), '' )) spikes_doc = spikes_doc { 1 } for i = 1 : numel ( spikes_doc . document_properties . depends_on ), disp ([ 'Depends on ' spikes_doc . document_properties . depends_on ( i ). name ': ' spikes_doc . document_properties . depends_on ( i ). value ]); end ; % Should see 3 entries, with your own unique IDs: % Depends on underlying_element_id: 412687d3ad57c851_40860c116cfc64c2 % Depends on subject_id: 412687d3ad571d87_c0dac60e10c0f2a5 % Depends on spike_clusters_id: 412687f62d1057b8_40c28348e09e5e9b 2.5.5 Structure of an ndi.database \u00b6 NDI databases (and any analysis project) has a beautiful underlying structure that one can visualize, to get a sense of how the calculations and inferred objects (like neurons that spike) are derived from one another. Code block 2.5.5.1. Type this into Matlab. \u00b6 interactive = 1 ; % set it to zero if you have Matlab 2020a or later for DataTip navigation! Try it! docs = S . database_search ( ndi . query ( 'ndi_document.id' , 'regexp' , '(.*)' , '' )); % this finds ALL documents [ g , nodes , mdigraph ] = ndi . database . fun . docs2graph ( docs ); ndi . database . fun . plotinteractivedocgraph ( docs , g , mdigraph , nodes , 'layered' , interactive ); For this session, the graph should look something like this: You can explore the nodes by clicking next to them. On the command line, a summary of the document will appear. Here is a short video demonstration . If you turn on zooming (either by selecting it from the Tools menu in the figure, typing zoom on on the command line, or by hovering over the figure and then clicking on the magnifying glass that appears in the upper right), you can zoom around the graph. You'll need to turn zoom off to be able to get a summary by clicking near the nodes. You can turn zoom off either by selecting Zoom In again from the Tools menu in the figure to de-select the tool, or by typing zoom off on the command line, or by hovering over the figure and clicking the magnifying glass again. 2.5.6 Discussion/Feedback \u00b6 Post comments, bugs, questions, or discuss . You may find it odd that we haven't told you how to add items to the database here in this tutorial. Instead, we've only told you how to inspect the database. The process of creating and testing a document schema and adding and removing documents are described in a Planned Tutorial. The link will be here when it is created.","title":"2 Analyzing your first electrophysiology experiment with NDI"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/5_searching_ndi_databases/#2-analyzing-your-first-electrophysiology-experiment-with-ndi","text":"","title":"2 Analyzing your first electrophysiology experiment with NDI"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/5_searching_ndi_databases/#25-understanding-and-searching-the-ndi-database","text":"","title":"2.5 Understanding and searching the NDI database"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/5_searching_ndi_databases/#251-the-ndidatabase-and-ndidocument-objects","text":"Each ndi.session object has an ndi.database object as one of its properties. This database holds the ndi.document objects that contain the metadata and data results of calculations that apps and programs have performed on the original data. First, let's open the ndi.session that we've been working with.","title":"2.5.1 The ndi.database and ndi.document objects"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/5_searching_ndi_databases/#code-block-2511-type-this-into-matlab","text":"dirname = [ userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2' ]; % change this if you put the example somewhere else ref = 'ts_exper2' ; S = ndi . session . dir ( ref , dirname ); We find documents by searching for them with the ndi.session method database_search() . For example, we can examine all documents that contain stimulus presentation data:","title":"Code block 2.5.1.1. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/5_searching_ndi_databases/#code-block-2512-type-this-into-matlab","text":"stim_pres_doc = S . database_search ( ndi . query ( '' , 'isa' , 'stimulus_presentation' , '' )) % should see: % stim_pres_doc = % 1x4 cell array % {1x1 ndi.document} {1x1 ndi.document} {1x1 ndi.document} {1x1 ndi.document} stim_pres_doc { 1 } % should see: % ans = % document with properties: % document_properties: [1x1 struct] stim_pres_doc { 1 }. document_properties % should see: % ans = % struct with fields: % app: [1x1 struct] % depends_on: [1x1 struct] % document_class: [1x1 struct] % epochid: 't00001' % epochid_fix: [1x1 struct] % ndi_document: [1x1 struct] % stimulus_presentation: [1x1 struct] We have used an ndi.query object to conduct our search, and we will describe those objects a little later. Here we see that ndi.document objects have a property called document_properties that contains all of the text information that is stored in the document. We will look through all of these properties here, and we also direct you to the documentation page for the ndi.document class stimulus_presentation .","title":"Code block 2.5.1.2. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/5_searching_ndi_databases/#252-all-ndidocument-objects-have-the-fields-document_class-and-ndi_document","text":"The document_class fields contain critical information about the class, such as the file that contains its definition, its full class name and its short class name. In addition, document types can be composed of multiple document types. The stimulus presentation class has two superclasses: ndi.document and ndi.document_epochid . This means that a stimulus_presentation document has its own fields, plus all of the fields from ndi.document documents and and ndi.document_epochid documents. Let's look at the data that specifies the superclasses:","title":"2.5.2 All ndi.document objects have the fields document_class and ndi_document."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/5_searching_ndi_databases/#code-block-2513-type-this-into-matlab","text":"stim_pres_doc { 1 }. document_properties . document_class % % ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/stimulus/stimulus_presentation.json' % validation: '$NDISCHEMAPATH/stimulus/stimulus_presentation_schema.json' % class_name: 'ndi_document_stimulus_stimulus_presentation' % property_list_name: 'stimulus_presentation' % class_version: 1 % superclasses: [3x1 struct] stim_pres_doc { 1 }. document_properties . document_class . superclasses ( 1 ) % ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/ndi_document.json' stim_pres_doc { 1 }. document_properties . document_class . superclasses ( 2 ) % ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/ndi_document_epochid.json' stim_pres_doc { 1 }. document_properties . document_class . superclasses ( 3 ) %ans = % struct with fields: % definition: '$NDIDOCUMENTPATH/ndi_document.json' All documents have ndi_document as a superclass. Note that ndi.document is the name of the software object in Matlab (and Python), whereas ndi_document is the name of the database object type that has the following fields: field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database The most useful item in each ndi.document is its unique identifier id . This is a globally unique identifier, which means that no other ndi.document or corresponding ndi_document anywhere in the universe has the same identifier. It is constructed of two hexidecimal strings: the first is based on the time of creation in Universal Controlled Time (UTC), and the second is created by a random number generator. This constructions means that ndi.document ids are not only unique, but also that sorting them alphabetically will give you the creation order of the documents. This can come in handy from time to time.","title":"Code block 2.5.1.3. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/5_searching_ndi_databases/#253-searching-for-ndi_documents-with-ndiquery","text":"Performing analyses or analyses of analyses in NDI involves searching for previous entries in the database, building upon them, and writing the results back to the database. The object ndi.query allows one to express database searches. Let's learn about ndi.query with a few examples. % search for document classes that contain the string 'stim' q_stim = ndi . query ( 'document_class.class_name' , 'contains_string' , 'stim' , '' ); stim_docs = S . database_search ( q_stim ) % returns 35 matches for me % now suppose we also want to search for documents that were made by % our app ndi_app_stimulus_decoder: q_stim_decoder = ndi . query ( 'app.name' , 'exact_string' , 'ndi_app_stimulus_decoder' , '' ); % we can find based on this criteria alone... stim_decoder_docs = S . database_search ( q_stim_decoder ) % returns 4 matches for me % ...or we can put the search terms together in an AND to demand both queries are satisfied q_stim_and_stim_decoder_docs = S . database_search ( q_stim_decoder & q_stim ); % returns 4 matches for me, because all q_stim_decoder docs have 'stimulus' in the class_name % we can also put queries together into a single variable: q_or = q_stim_decoder | q_stim ; q_and = q_stim_decoder & q_stim ; q_stim_and_stim_decoder_docs = S . database_search ( q_and ) % produces the same as above % now we can inspect these documents: q_stim_and_stim_decoder_docs { 1 }. document_properties % ans = % struct with fields: % app: [1x1 struct] % depends_on: [1x1 struct] % document_class: [1x1 struct] % epochid: 't00001' % epochid_fix: [1x1 struct] % ndi_document: [1x1 struct] % stimulus_presentation: [1x1 struct] q_stim_and_stim_decoder_docs { 1 }. document_properties . app % for me: % ans = % struct with fields: % name: 'ndi_app_stimulus_decoder' % version: 'fa1fa7818b215975c43f68ece523b065852ef891' % url: 'https://github.com/VH-Lab/NDI-matlab' % os: 'MACI64' % os_version: '10.14.6' % interpreter: 'MATLAB' % interpreter_version: '9.8' q_stim_and_stim_decoder_docs { 1 }. document_properties . stimulus_presentation % ans = % struct with fields: % presentation_order: [85x1 double] % presentation_time: [85x1 struct] % stimuli: [17x1 struct] The different possible search terms for ndi.query objects is shown below: NDI_QUERY_OBJ = ndi . query ( FIELD , OPERATION , PARAM1 , PARAM2 ) Operation Description 'regexp' are there any regular expression matches between the field value and 'param1' ? 'exact_string' is the field value an exact string match for 'param1' ? 'contains_string' is the field value a char array that contains 'param1' ? 'exact_number' is the field value exactly 'param1' (same size and values)? 'lessthan' is the field value less than 'param1' (and comparable size) 'lessthaneq' is the field value less than or equal to 'param1' (and comparable size) 'greaterthan' is the field value greater than 'param1' (and comparable size) 'greaterthaneq' is the field value greater than or equal to 'param1' (and comparable size) 'hasfield' is the field present? (no role for 'param1' or 'param2' ) 'hasanysubfield_contains_string' Is the field value an array of structs or cell array of structs such that any has a field named 'param1' with a string that contains the string in 'param2' ? 'or' are any of the searchstruct elements specified in ' param1 ' true? 'isa' is 'param1' either a superclass or the document class itself of the ndi_document? 'depends_on' does the document depend on an item with name 'param1' and value 'param2' ?","title":"2.5.3 Searching for ndi_documents with ndi.query"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/5_searching_ndi_databases/#254-the-depends_on-field-and-database-structure","text":"Many analysis procedures or creation procedures are dependent on the results from previous calculations. These dependencies are denoted in a field called depends_on . Let's look at the dependencies for our example stimulus presentation:","title":"2.5.4 The depends_on field and database structure"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/5_searching_ndi_databases/#code-block-2541-type-this-into-matlab","text":"stim_pres_doc { 1 }. document_properties . depends_on % should see: % ans = % struct with fields: % name: 'stimulus_element_id' % value: '412687d3ae63489a_40d1d65fa08bb81a' % what is this node at 412687d3ae63489a_40d1d65fa08bb81a ? mydoc = S . database_search ( ndi . query ( 'ndi_document.id' , 'exact_string' , ... stim_pres_doc { 1 }. document_properties . depends_on ( 1 ). value , '' )); mydoc { 1 }. document_properties % ans = % struct with fields: % depends_on: [2x1 struct] % document_class: [1x1 struct] % element: [1x1 struct] % ndi_document: [1x1 struct] mydoc { 1 }. document_properties . element % ans = % struct with fields: % ndi_element_class: 'ndi.probe.timeseries.stimulator' % name: 'vhvis_spike2' % reference: 1 % type: 'stimulator' % direct: 1 % We see it is our visual stimulation system Some documents have a lot of depends_on items. Let's examine our ctx_1 neuron that we created in Tutorial 2.3 .","title":"Code block 2.5.4.1. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/5_searching_ndi_databases/#code-block-2542-type-this-into-matlab","text":"e = S . getelements ( 'element.type' , 'spikes' ); spikes_doc = S . database_search ( ndi . query ( 'ndi_document.id' , 'exact_string' , e { 1 }. id (), '' )) spikes_doc = spikes_doc { 1 } for i = 1 : numel ( spikes_doc . document_properties . depends_on ), disp ([ 'Depends on ' spikes_doc . document_properties . depends_on ( i ). name ': ' spikes_doc . document_properties . depends_on ( i ). value ]); end ; % Should see 3 entries, with your own unique IDs: % Depends on underlying_element_id: 412687d3ad57c851_40860c116cfc64c2 % Depends on subject_id: 412687d3ad571d87_c0dac60e10c0f2a5 % Depends on spike_clusters_id: 412687f62d1057b8_40c28348e09e5e9b","title":"Code block 2.5.4.2. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/5_searching_ndi_databases/#255-structure-of-an-ndidatabase","text":"NDI databases (and any analysis project) has a beautiful underlying structure that one can visualize, to get a sense of how the calculations and inferred objects (like neurons that spike) are derived from one another.","title":"2.5.5 Structure of an ndi.database"},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/5_searching_ndi_databases/#code-block-2551-type-this-into-matlab","text":"interactive = 1 ; % set it to zero if you have Matlab 2020a or later for DataTip navigation! Try it! docs = S . database_search ( ndi . query ( 'ndi_document.id' , 'regexp' , '(.*)' , '' )); % this finds ALL documents [ g , nodes , mdigraph ] = ndi . database . fun . docs2graph ( docs ); ndi . database . fun . plotinteractivedocgraph ( docs , g , mdigraph , nodes , 'layered' , interactive ); For this session, the graph should look something like this: You can explore the nodes by clicking next to them. On the command line, a summary of the document will appear. Here is a short video demonstration . If you turn on zooming (either by selecting it from the Tools menu in the figure, typing zoom on on the command line, or by hovering over the figure and then clicking on the magnifying glass that appears in the upper right), you can zoom around the graph. You'll need to turn zoom off to be able to get a summary by clicking near the nodes. You can turn zoom off either by selecting Zoom In again from the Tools menu in the figure to de-select the tool, or by typing zoom off on the command line, or by hovering over the figure and clicking the magnifying glass again.","title":"Code block 2.5.5.1. Type this into Matlab."},{"location":"tutorials/analyzing_first_physiology_experiment_detailed/5_searching_ndi_databases/#256-discussionfeedback","text":"Post comments, bugs, questions, or discuss . You may find it odd that we haven't told you how to add items to the database here in this tutorial. Instead, we've only told you how to inspect the database. The process of creating and testing a document schema and adding and removing documents are described in a Planned Tutorial. The link will be here when it is created.","title":"2.5.6 Discussion/Feedback"},{"location":"tutorials/ndimodel/1_intro/","text":"Tutorial 1: Introduction \u00b6 Introduction \u00b6 The Neuroscience Data Interface (NDI) is a software tool for reading neuroscience data and storing analyses and analyses of analyses in a database. Rather than requiring data to be stored in a particular way, NDI allows the user to specify the formats of the data to be read and its organization scheme, and the user retrieves parts of the data through the NDI application program interface. The database stores documents with both human-readable and binary components, so that complex data pipelines (analyses, and analyses of analyses) can be stored and searched. NDI allows an application ecosystem where applications can focus on calculations rather than data format or organization. In order to understand NDI and how to use it, it is important to understand 2 concepts: 1.2 NDI concepts and vocabulary 1.3 NDI software objects (to be built)","title":"1.1 Introduction"},{"location":"tutorials/ndimodel/1_intro/#tutorial-1-introduction","text":"","title":"Tutorial 1: Introduction"},{"location":"tutorials/ndimodel/1_intro/#introduction","text":"The Neuroscience Data Interface (NDI) is a software tool for reading neuroscience data and storing analyses and analyses of analyses in a database. Rather than requiring data to be stored in a particular way, NDI allows the user to specify the formats of the data to be read and its organization scheme, and the user retrieves parts of the data through the NDI application program interface. The database stores documents with both human-readable and binary components, so that complex data pipelines (analyses, and analyses of analyses) can be stored and searched. NDI allows an application ecosystem where applications can focus on calculations rather than data format or organization. In order to understand NDI and how to use it, it is important to understand 2 concepts: 1.2 NDI concepts and vocabulary 1.3 NDI software objects (to be built)","title":"Introduction"},{"location":"tutorials/ndimodel/2_ndimodel_vocabulary/","text":"Tutorial 1: Introduction \u00b6 1.2 NDI Concepts and vocabulary \u00b6 In order to make NDI easy to use, we sought to codify the elements of actual experiments using specific terms, in much the same way that concepts like files, folders, and windows make modern computer operating systems easier to use. Probes, subjects, elements, DAQ systems \u00b6 We define a probe as an instrument that makes a measurement of or produces a stimulus for a subject . In this framework, a variety of experimental apparatus are considered probes . Examples of probes that make measurements include a whole cell pipette, a sharp electrode, a single channel extracellular electrode, multichannel electrodes with either known or unknown geometries, cameras, 2-photon microscopes, fMRI machines, nose-poke detectors, EMG electrodes, and EEG electrodes. Examples of probes that provide stimulation are odor ports, valve-driven interaural cannulae, food reward dispensers, visual stimulus monitors, audio speakers, and stimulating electrodes. A probe requires two important connections. The first connection is with a subject . This subject can be an experimental research animal, a human subject, a set of cells in a dish, a test resistor, the air, a potato, anything, but it must be named and given an identifier in NDI. The second important connection of a probe is to a data acquisition system that stores the measurements or the stimulation history of the probe . We term such a system a DAQ system . Each time a DAQ system is switched into record mode, an epoch of data is recorded. Probes are part of a broader class of experiment items that we term elements , which include not only concrete physical objects like probes but also inferred objects that are not observed directly, such as neurons in an extracellular recording experiment, or abstract quantities, such as simulated data, or a model of the information that an animal has about a stimulus at a given time. Real world vocabulary \u00b6 An example experiment. A probe is any instrument that can make a measurement from or provide stimulation to a subject . In this case, an electrode with an amplifier is monitoring signals in the cerebral cortex of a ferret. The electrode is a probe , and the ferret is a subject . A DAQ system is an instrument that digitally logs the measurements or stimulus history of a probe . In this case, a data acquisition system (DAQ) is logging the voltage values produced by the electrode's amplifier and storing the results in a file on a computer. An epoch is an interval of time during which a DAQ system is switched on and then off to make a recording. In this case, 3 epochs have been sampled. The experiment has additional experiment elements . One of these elements is a filtered version of the electrode data. A second element is a neuron, whose existence and spike times have been inferred by a spike analysis application and recorded in the experiment. Real world vocabulary: elements \u00b6 In NDI, a wide variety of experiment items are called elements , of which probes are a subset. Examples of probes include multi-channel extracellular electrodes, reward wells, 2-photon microscopes, intrinsic signal imaging systems, intracellular or extracellular single electrodes, and visual stimulus monitors. Other elements include items that are directly linked to probes , such as filtered versions of signals, or inferred objects like neurons whose activities are inferred from extracellular recordings or images. Still, other elements have no physical derivation, such as artificial data or purely simulated data; nevertheless, we want to be able to treat these items identically in analysis pipelines. Finally, elements might be the result of complex modeling that depends on many other experiment elements , such as an inferred phenomenological model of the amount of information that an animal has about whether a stimulus is a grating. Real world vocabulary: DAQ systems \u00b6 DAQ systems digitally record probe measurements or histories of stimulator activity. In NDI, DAQ systems are logical entities, which could correspond physically to a single DAQ device made by a particular company (top) or a collection of home-brewed devices that operate together to have the behavior of a single DAQ device (bottom). In the bottom example, information from an electrode probe and digital triggers from a visual stimulation probe are acquired on a single DAQ device, but digital information from both systems (in separate files) is needed to fully describe the activity in each epoch. Discussion/Feedback \u00b6 Post comments, bugs, questions, or discuss .","title":"1.2 Real world vocabulary"},{"location":"tutorials/ndimodel/2_ndimodel_vocabulary/#tutorial-1-introduction","text":"","title":"Tutorial 1: Introduction"},{"location":"tutorials/ndimodel/2_ndimodel_vocabulary/#12-ndi-concepts-and-vocabulary","text":"In order to make NDI easy to use, we sought to codify the elements of actual experiments using specific terms, in much the same way that concepts like files, folders, and windows make modern computer operating systems easier to use.","title":"1.2 NDI Concepts and vocabulary"},{"location":"tutorials/ndimodel/2_ndimodel_vocabulary/#probes-subjects-elements-daq-systems","text":"We define a probe as an instrument that makes a measurement of or produces a stimulus for a subject . In this framework, a variety of experimental apparatus are considered probes . Examples of probes that make measurements include a whole cell pipette, a sharp electrode, a single channel extracellular electrode, multichannel electrodes with either known or unknown geometries, cameras, 2-photon microscopes, fMRI machines, nose-poke detectors, EMG electrodes, and EEG electrodes. Examples of probes that provide stimulation are odor ports, valve-driven interaural cannulae, food reward dispensers, visual stimulus monitors, audio speakers, and stimulating electrodes. A probe requires two important connections. The first connection is with a subject . This subject can be an experimental research animal, a human subject, a set of cells in a dish, a test resistor, the air, a potato, anything, but it must be named and given an identifier in NDI. The second important connection of a probe is to a data acquisition system that stores the measurements or the stimulation history of the probe . We term such a system a DAQ system . Each time a DAQ system is switched into record mode, an epoch of data is recorded. Probes are part of a broader class of experiment items that we term elements , which include not only concrete physical objects like probes but also inferred objects that are not observed directly, such as neurons in an extracellular recording experiment, or abstract quantities, such as simulated data, or a model of the information that an animal has about a stimulus at a given time.","title":"Probes, subjects, elements, DAQ systems"},{"location":"tutorials/ndimodel/2_ndimodel_vocabulary/#real-world-vocabulary","text":"An example experiment. A probe is any instrument that can make a measurement from or provide stimulation to a subject . In this case, an electrode with an amplifier is monitoring signals in the cerebral cortex of a ferret. The electrode is a probe , and the ferret is a subject . A DAQ system is an instrument that digitally logs the measurements or stimulus history of a probe . In this case, a data acquisition system (DAQ) is logging the voltage values produced by the electrode's amplifier and storing the results in a file on a computer. An epoch is an interval of time during which a DAQ system is switched on and then off to make a recording. In this case, 3 epochs have been sampled. The experiment has additional experiment elements . One of these elements is a filtered version of the electrode data. A second element is a neuron, whose existence and spike times have been inferred by a spike analysis application and recorded in the experiment.","title":"Real world vocabulary"},{"location":"tutorials/ndimodel/2_ndimodel_vocabulary/#real-world-vocabulary-elements","text":"In NDI, a wide variety of experiment items are called elements , of which probes are a subset. Examples of probes include multi-channel extracellular electrodes, reward wells, 2-photon microscopes, intrinsic signal imaging systems, intracellular or extracellular single electrodes, and visual stimulus monitors. Other elements include items that are directly linked to probes , such as filtered versions of signals, or inferred objects like neurons whose activities are inferred from extracellular recordings or images. Still, other elements have no physical derivation, such as artificial data or purely simulated data; nevertheless, we want to be able to treat these items identically in analysis pipelines. Finally, elements might be the result of complex modeling that depends on many other experiment elements , such as an inferred phenomenological model of the amount of information that an animal has about whether a stimulus is a grating.","title":"Real world vocabulary: elements"},{"location":"tutorials/ndimodel/2_ndimodel_vocabulary/#real-world-vocabulary-daq-systems","text":"DAQ systems digitally record probe measurements or histories of stimulator activity. In NDI, DAQ systems are logical entities, which could correspond physically to a single DAQ device made by a particular company (top) or a collection of home-brewed devices that operate together to have the behavior of a single DAQ device (bottom). In the bottom example, information from an electrode probe and digital triggers from a visual stimulation probe are acquired on a single DAQ device, but digital information from both systems (in separate files) is needed to fully describe the activity in each epoch.","title":"Real world vocabulary: DAQ systems"},{"location":"tutorials/ndimodel/2_ndimodel_vocabulary/#discussionfeedback","text":"Post comments, bugs, questions, or discuss .","title":"Discussion/Feedback"},{"location":"under_construction/EXAMPLE_USES/","text":"5 examples of recording situations \u00b6 1. Simple: 1 device, 1 probe, 3 things \u00b6 An experimentor records spontaneously generated responses with a single intracellular electrode inserted in visual cortex. The analyst wants to examine the spiking responses of the neuron and the voltage responses of the neuron with the spiking artificially removed. Physical situation : There is a single physical hardware data acquisition system, in this case a system made by Cambridge Electronic Deisgn called the micro1401. A wire connects the electrode to an amplifier, and a wire from the amplifier connects to an input (let's say input 0) on the micro1401. The recording system is turned on to record a bout of spontaneous activity, and then turned off. Each time the recording is turned on, a file (.smr format) is written to disk. The software that manages the recording of the micro1401 is written by CED and is called Spike2. Let's say there are 3 recording epochs. Therefore, we have 3 .smr files (let's say at path epoch1/myfile.smr, epoch2/myotherfile.smr, epoch3/myotherfileagain.smr). NDI configuration : The raw data is managed by a member of the class ndi_daqsystem . There is a subclass, ndi_daqsystem_mfdaq , that implements a generic multi-function data acquisition system, which is a system that has analog inputs, analog outputs (which are records of signals that were output), digital inputs, digital outputs, and a clock. There is an ndi_daqreader_mfdaq class, and a specific subclass ndi_daqreader_mfdaq_cedspike2 that implements the reading of the .smr files. We build an ndi_daqsystem object to add to the ndi_experiment object of this experiment, that we will call vhspike2 (for reading the electrode data). To do so, we need to create the 2 component objects of an ndi_daqsystem : an ndi_daqreader and an ndi_filenavigator . Let's say our experiment is in variable E. fileparams = ; d = ndi_daqsystem_mfdaq(ndi_daqreader_mfdaq_cedspike2(), ndi_filenavigator(fileparams)); Now we can ask the device what epochs it has. et = d.epochtable(); When we do this, the device asks its file_navigator to determine the epochs that it has (calling the file_navigator's epochtable() method), which searches the disk for occurrences of .smr files. If we study the epochtable that is returned, we see that it has 3 entries. et et(1) Each of these entries has a field underlying that allows us to examine the underlying details of the epoch. et(1).underlying The ndi_epochset class defines data structures and methods that manage these interdependent epochs. Each ndi_daqsystem has epochs that depend on the epochs of a file_navigator. ndi_probe objects have epochs that depend on the epochs of the underlying device that recorded the probe. An ndi_thing object is related to the epochs of the probe that provided evidence for it (although in the future we want to be able to define ndi_thing objects that are not necessarily related to a probe). We also create ndi_thing objects that are related to the data that is directly sampled from a probe. In this example, we create a direct thing that is equal to the data sampled from the probe (the raw voltage of the sampled data) and 2 indirect (or not direct ) probes whose epochs are created from data that is derived from the probe. In the first case, we create a list of spike times by detecting the spike events in the waveform, and, in the second, we create filtered version of the data with the spike waveforms clipped out. 2. Typical: 2 devices, 2 probes, 4 things \u00b6 An experimentor records responses to visual stimulation with a single electrode inserted in visual cortex. The analyst wants to examine the responses of single neurons to visual stimulation and the local field potential response to visual stimulation. Physical situation : There is a single physical hardware data acquisition system, in this case a system made by Cambridge Electronic Deisgn called the micro1401. A wire connects the electrode to an amplifier, and a wire from the amplifier connects to an input (let's say input 0) on the micro1401. There is a visual stimulus computer that produces videos on a monitor, and also generates 14 digital timing pulses that are acquired on 14 digital inputs (let's say digital inputs 1..14): Stimulus trigger: trigger generated when a stimulus is shown Prestimulus trigger: trigger generated when system is ready to draw a stimulus (user-specified delay) Frame trigger: trigger generated when system updates the video image on the display Vertical blanking: trigger generated when monitor refreshes 8 digital channels encode the stimulus identity from 0 (no stimulus) to 1..255 The recording system is turned on to record a bout of visual stimulation, and then turned off. Each time the recording is turned on, a file (.smr format) is written to disk, and the visual stimulus computer also writes a detailed stims.mat file to disk that has a big list of parameters for each visual stimulus (how big it was, what its shape was, what its number was, etc). The software that manages the recording of the micro1401 is written by CED and is called Spike2. Let's say there are 3 recording epochs. Therefore, we have 3 .smr files (let's say at path epoch1/myfile.smr, epoch2/myotherfile.smr, epoch3/myotherfileagain.smr), and 3 stims.mat files (let's say at path epoch1/stims.mat, epoch2/stims.mat, epoch3/stims.mat). NDI configuration : We have created 2 ndi_daqsystem classes that assist in processing the data. These abstract classes are ndi_daqsystem_mfdaq , that implements a generic multi-function data acquisition system, and ndi_daqsystem_stimulus that implements a genetic stimulus system. There is an ndi_daqreader_mfdaq class, and a specific subclass ndi_daqreader_mfdaq_cedspike2 that knows how to read the .smr files, and an ndi_daqreader_mfdaq_stimulus_vhlabvisspike2 subclass that reads the timing information from .smr files and the stimulus parameter information from the stims.mat file. We build 2 ndi_daqsystem objects to add to the ndi_experiment object of this experiment, that we will call vhspike2 (for reading the electrode data) and another daq system object vhvis_spike2 that reads the triggers generated from the visual stimulus computer.","title":"EXAMPLE USES"},{"location":"under_construction/EXAMPLE_USES/#5-examples-of-recording-situations","text":"","title":"5 examples of recording situations"},{"location":"under_construction/EXAMPLE_USES/#1-simple-1-device-1-probe-3-things","text":"An experimentor records spontaneously generated responses with a single intracellular electrode inserted in visual cortex. The analyst wants to examine the spiking responses of the neuron and the voltage responses of the neuron with the spiking artificially removed. Physical situation : There is a single physical hardware data acquisition system, in this case a system made by Cambridge Electronic Deisgn called the micro1401. A wire connects the electrode to an amplifier, and a wire from the amplifier connects to an input (let's say input 0) on the micro1401. The recording system is turned on to record a bout of spontaneous activity, and then turned off. Each time the recording is turned on, a file (.smr format) is written to disk. The software that manages the recording of the micro1401 is written by CED and is called Spike2. Let's say there are 3 recording epochs. Therefore, we have 3 .smr files (let's say at path epoch1/myfile.smr, epoch2/myotherfile.smr, epoch3/myotherfileagain.smr). NDI configuration : The raw data is managed by a member of the class ndi_daqsystem . There is a subclass, ndi_daqsystem_mfdaq , that implements a generic multi-function data acquisition system, which is a system that has analog inputs, analog outputs (which are records of signals that were output), digital inputs, digital outputs, and a clock. There is an ndi_daqreader_mfdaq class, and a specific subclass ndi_daqreader_mfdaq_cedspike2 that implements the reading of the .smr files. We build an ndi_daqsystem object to add to the ndi_experiment object of this experiment, that we will call vhspike2 (for reading the electrode data). To do so, we need to create the 2 component objects of an ndi_daqsystem : an ndi_daqreader and an ndi_filenavigator . Let's say our experiment is in variable E. fileparams = ; d = ndi_daqsystem_mfdaq(ndi_daqreader_mfdaq_cedspike2(), ndi_filenavigator(fileparams)); Now we can ask the device what epochs it has. et = d.epochtable(); When we do this, the device asks its file_navigator to determine the epochs that it has (calling the file_navigator's epochtable() method), which searches the disk for occurrences of .smr files. If we study the epochtable that is returned, we see that it has 3 entries. et et(1) Each of these entries has a field underlying that allows us to examine the underlying details of the epoch. et(1).underlying The ndi_epochset class defines data structures and methods that manage these interdependent epochs. Each ndi_daqsystem has epochs that depend on the epochs of a file_navigator. ndi_probe objects have epochs that depend on the epochs of the underlying device that recorded the probe. An ndi_thing object is related to the epochs of the probe that provided evidence for it (although in the future we want to be able to define ndi_thing objects that are not necessarily related to a probe). We also create ndi_thing objects that are related to the data that is directly sampled from a probe. In this example, we create a direct thing that is equal to the data sampled from the probe (the raw voltage of the sampled data) and 2 indirect (or not direct ) probes whose epochs are created from data that is derived from the probe. In the first case, we create a list of spike times by detecting the spike events in the waveform, and, in the second, we create filtered version of the data with the spike waveforms clipped out.","title":"1. Simple: 1 device, 1 probe, 3 things"},{"location":"under_construction/EXAMPLE_USES/#2-typical-2-devices-2-probes-4-things","text":"An experimentor records responses to visual stimulation with a single electrode inserted in visual cortex. The analyst wants to examine the responses of single neurons to visual stimulation and the local field potential response to visual stimulation. Physical situation : There is a single physical hardware data acquisition system, in this case a system made by Cambridge Electronic Deisgn called the micro1401. A wire connects the electrode to an amplifier, and a wire from the amplifier connects to an input (let's say input 0) on the micro1401. There is a visual stimulus computer that produces videos on a monitor, and also generates 14 digital timing pulses that are acquired on 14 digital inputs (let's say digital inputs 1..14): Stimulus trigger: trigger generated when a stimulus is shown Prestimulus trigger: trigger generated when system is ready to draw a stimulus (user-specified delay) Frame trigger: trigger generated when system updates the video image on the display Vertical blanking: trigger generated when monitor refreshes 8 digital channels encode the stimulus identity from 0 (no stimulus) to 1..255 The recording system is turned on to record a bout of visual stimulation, and then turned off. Each time the recording is turned on, a file (.smr format) is written to disk, and the visual stimulus computer also writes a detailed stims.mat file to disk that has a big list of parameters for each visual stimulus (how big it was, what its shape was, what its number was, etc). The software that manages the recording of the micro1401 is written by CED and is called Spike2. Let's say there are 3 recording epochs. Therefore, we have 3 .smr files (let's say at path epoch1/myfile.smr, epoch2/myotherfile.smr, epoch3/myotherfileagain.smr), and 3 stims.mat files (let's say at path epoch1/stims.mat, epoch2/stims.mat, epoch3/stims.mat). NDI configuration : We have created 2 ndi_daqsystem classes that assist in processing the data. These abstract classes are ndi_daqsystem_mfdaq , that implements a generic multi-function data acquisition system, and ndi_daqsystem_stimulus that implements a genetic stimulus system. There is an ndi_daqreader_mfdaq class, and a specific subclass ndi_daqreader_mfdaq_cedspike2 that knows how to read the .smr files, and an ndi_daqreader_mfdaq_stimulus_vhlabvisspike2 subclass that reads the timing information from .smr files and the stimulus parameter information from the stims.mat file. We build 2 ndi_daqsystem objects to add to the ndi_experiment object of this experiment, that we will call vhspike2 (for reading the electrode data) and another daq system object vhvis_spike2 that reads the triggers generated from the visual stimulus computer.","title":"2. Typical: 2 devices, 2 probes, 4 things"},{"location":"under_construction/GLOSSARY/","text":"NDI Glossary \u00b6 Terms and conventions Channels, iodevices, etc are labeled from 1 ndi_iodevicestring - A string that specifies the device name, channel type, and channel numbers that correspond to a particular ndi_epochrecord entry","title":"NDI Glossary"},{"location":"under_construction/GLOSSARY/#ndi-glossary","text":"Terms and conventions Channels, iodevices, etc are labeled from 1 ndi_iodevicestring - A string that specifies the device name, channel type, and channel numbers that correspond to a particular ndi_epochrecord entry","title":"NDI Glossary"},{"location":"under_construction/PROBE-TYPES/","text":"Probe \u00b6 In NDI, a probe is an instrument for observing or manipulating the experimental environment. Types of probes include recording or stimulating electrodes and the display or recording of information (whether visual, auditory, olfactory, gustatory, temperature, etc). Probes are distinct from devices , which are digital input/output devices that perform digital sampling or control of probes. The probes that are acquired or controlled in any device epoch are listed in the ndi_epochcontents object for that epoch. They include the following fields: ndi_epochcontents fields: name : A name for the probe, must start with a letter and contain no whitespace but otherwise unrestricted reference : A reference for the probe; identical reference numbers indicate that NDI should try to combine data; (for example, if you move an electrode, one should change the reference number to indicate that the probe is being used differently); can be any non-negative integer type : The type of probe; must be a string that begins with a letter and has no whitespace; there are standard types (see below) but users can use any valid string for type. devicestring : A string that indicates the device (and channels) that have a digital record of the probe (see ndi_devicestring ) Standard types: Type Description Electrodes 'n-trode' A bundle of N extracellular electrodes that sample overlapping electric fields; the number of channels is calculated from the number of channels specified in the device string 'electrode-SPEC' An electrode of a specification that is contained in a reference SPEC (might contain a means of looking up electrode geometry, impedance / channel quality measurements, etc) 'patch' A whole cell patch electrode (two channels; first is Vm, second is I) 'patch-Vm' A whole cell patch electrode (single channel, specifies voltage recording) 'patch-I' A whole cell patch electrode (single channel, specifies current recording) 'patch-attached' A patch electrode in cell-attached configuration (single channel, specifies voltage recording) 'sharp' A sharp electrode (two channels; first is voltage, second is current) 'sharp-Vm' A sharp electrode (single channel, specifies voltage recording) 'sharp-I' A sharp electrode (single channel, specifies current recording) Imaging 'wide-field-imaging' Wide-field imaging data, as one might acquire with intrinsic signal imaging '2-photon-imaging' 2-photon fluorescent imaging data (laser-scanned or imaged) '1-photon-imaging' 1-photon fluorescent imaging (laser-scanned or imaged) 'brightfield-imaging' Brightfield images Stimulators 'display' An instrument that displays patterns with light 'stim-n-trode' An N-channel extracellular electrode stimulator; the number of channels is calculated from the number of channels specified in the device string 'n-LED' An N-channel LED stimulator; the number of channels is calculated from the number of channels specified in the device string Environment Lick-spout A lick-spout Intraoral-cannula An intraoral cannula Reward-well A reward well","title":"Probe"},{"location":"under_construction/PROBE-TYPES/#probe","text":"In NDI, a probe is an instrument for observing or manipulating the experimental environment. Types of probes include recording or stimulating electrodes and the display or recording of information (whether visual, auditory, olfactory, gustatory, temperature, etc). Probes are distinct from devices , which are digital input/output devices that perform digital sampling or control of probes. The probes that are acquired or controlled in any device epoch are listed in the ndi_epochcontents object for that epoch. They include the following fields: ndi_epochcontents fields: name : A name for the probe, must start with a letter and contain no whitespace but otherwise unrestricted reference : A reference for the probe; identical reference numbers indicate that NDI should try to combine data; (for example, if you move an electrode, one should change the reference number to indicate that the probe is being used differently); can be any non-negative integer type : The type of probe; must be a string that begins with a letter and has no whitespace; there are standard types (see below) but users can use any valid string for type. devicestring : A string that indicates the device (and channels) that have a digital record of the probe (see ndi_devicestring ) Standard types: Type Description Electrodes 'n-trode' A bundle of N extracellular electrodes that sample overlapping electric fields; the number of channels is calculated from the number of channels specified in the device string 'electrode-SPEC' An electrode of a specification that is contained in a reference SPEC (might contain a means of looking up electrode geometry, impedance / channel quality measurements, etc) 'patch' A whole cell patch electrode (two channels; first is Vm, second is I) 'patch-Vm' A whole cell patch electrode (single channel, specifies voltage recording) 'patch-I' A whole cell patch electrode (single channel, specifies current recording) 'patch-attached' A patch electrode in cell-attached configuration (single channel, specifies voltage recording) 'sharp' A sharp electrode (two channels; first is voltage, second is current) 'sharp-Vm' A sharp electrode (single channel, specifies voltage recording) 'sharp-I' A sharp electrode (single channel, specifies current recording) Imaging 'wide-field-imaging' Wide-field imaging data, as one might acquire with intrinsic signal imaging '2-photon-imaging' 2-photon fluorescent imaging data (laser-scanned or imaged) '1-photon-imaging' 1-photon fluorescent imaging (laser-scanned or imaged) 'brightfield-imaging' Brightfield images Stimulators 'display' An instrument that displays patterns with light 'stim-n-trode' An N-channel extracellular electrode stimulator; the number of channels is calculated from the number of channels specified in the device string 'n-LED' An N-channel LED stimulator; the number of channels is calculated from the number of channels specified in the device string Environment Lick-spout A lick-spout Intraoral-cannula An intraoral cannula Reward-well A reward well","title":"Probe"}]}