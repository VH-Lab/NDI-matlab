{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NDI","text":""},{"location":"#about","title":"About","text":"<p>NDI (Neuroscience Data Interface) is a cross-platform interface standard for reading neuroscience data and storing the results of analyses. Who inspires NDI?</p> <ul> <li> <p>As an analyst, I want to quickly open my colleagues' data, regardless of its format and organization, so we can make discoveries.</p> </li> <li> <p>As a researcher, I want my data records and analysis steps to be annotated and both human and machine readable, so I can review my teammates' work and share these annotated results with the world. I want these annotations to occur in situ, not as a separate step that I do later.</p> </li> <li> <p>As a physiologist/imager, I want my analysis routines to have access to my data the instant it is recorded, so I can make choices about how to proceed during my experiment. </p> </li> <li> <p>As an analyst, I want to write one set of analysis routines that do not need to be revised to work with new data formats or new data organizations.</p> </li> <li> <p>As a scientist, I want to search for data or analyses from other researchers.</p> </li> <li> <p>As an amateur, I want to be able to access scientists' raw data to perform my own analyses.</p> </li> </ul> <p>NDI is inspired by FAIR principles.</p>"},{"location":"#availability","title":"Availability","text":"<p>A version of NDI is available in Matlab and a version for Python is well under construction.</p>"},{"location":"#installation","title":"Installation","text":"<p>Check out the Installation Guide.</p>"},{"location":"#publication","title":"Publication","text":"<p>Check out the NDI publication.</p>"},{"location":"#help-and-support","title":"Help and Support","text":"<p>Use the issue tracker to submit questions, bugs, and issues.</p>"},{"location":"#financial-support","title":"Financial Support","text":"<p>Supported by the NIH BRAIN Initiative informatics group, grant MH114678.</p>"},{"location":"NDI-matlab/","title":"NDI","text":""},{"location":"NDI-matlab/#about","title":"About","text":"<p>NDI (Neuroscience Data Interface) is a cross-platform interface standard for reading neuroscience data and storing the results of analyses. Who inspires NDI?</p> <ul> <li> <p>As an analyst, I want to quickly open my colleagues' data, regardless of its format and organization, so we can make discoveries.</p> </li> <li> <p>As a researcher, I want my data records and analysis steps to be annotated and both human and machine readable, so I can review my teammates' work and share these annotated results with the world. I want these annotations to occur in situ, not as a separate step that I do later.</p> </li> <li> <p>As a physiologist/imager, I want my analysis routines to have access to my data the instant it is recorded, so I can make choices about how to proceed during my experiment. </p> </li> <li> <p>As an analyst, I want to write one set of analysis routines that do not need to be revised to work with new data formats or new data organizations.</p> </li> <li> <p>As a scientist, I want to search for data or analyses from other researchers.</p> </li> <li> <p>As an amateur, I want to be able to access scientists' raw data to perform my own analyses.</p> </li> </ul> <p>NDI is inspired by FAIR principles.</p>"},{"location":"NDI-matlab/#availability","title":"Availability","text":"<p>A version of NDI is available in Matlab and a version for Python is well under construction.</p>"},{"location":"NDI-matlab/#installation","title":"Installation","text":"<p>Check out the Installation Guide.</p>"},{"location":"NDI-matlab/#publication","title":"Publication","text":"<p>Check out the NDI publication.</p>"},{"location":"NDI-matlab/#help-and-support","title":"Help and Support","text":"<p>Use the issue tracker to submit questions, bugs, and issues.</p>"},{"location":"NDI-matlab/#financial-support","title":"Financial Support","text":"<p>Supported by the NIH BRAIN Initiative informatics group, grant MH114678.</p>"},{"location":"NDI-matlab/contributing/","title":"Contributing","text":"<p>Anyone with a GitHub account can contribute. Please see the guidelines below!</p>"},{"location":"NDI-matlab/contributing/#tasks","title":"Tasks","text":""},{"location":"NDI-matlab/contributing/#new-file-formats","title":"New file formats","text":"<p>If you want to contribute an ndi.daq.reader for a new file format, please see our new project Neuroscience Data Readers NDR-matlab. We have spun off the job of reading raw neuroscience data files into this project to make it easier to contribute file readers and because some users may want to just use the file reading code without installing all of NDI.</p> <p>At the moment, NDI still uses its native <code>ndi.daq.reader</code> objects but soon it will be able to use any <code>ndr.reader</code> object, which will streamline the addition of new file formats.</p>"},{"location":"NDI-matlab/contributing/#apps","title":"Apps","text":"<p>There are 2 ways to contribute applications. </p>"},{"location":"NDI-matlab/contributing/#ndiapp-applications","title":"ndi.app applications","text":"<p>We have plans to shortly create a developer's guide to creating ndi.app applications that are tightly integrated with NDI's core features. Stay tuned! </p>"},{"location":"NDI-matlab/contributing/#other-applications","title":"Other applications","text":"<p>External applications can use NDI right now. For an example, see our changes to JRClust to make it support NDI: https://github.com/VH-Lab/JRCLUST. Feel free to post an issue to ask questions.</p>"},{"location":"NDI-matlab/contributing/#how-to-contribute","title":"How to contribute","text":"<p>If you have code that you would like to write, do the following.</p> <ol> <li> <p>Press the Fork button in the upper-right corner of the NDI-matlab GitHub repository to make a copy of NDI in your own GitHub space.</p> </li> <li> <p>Make your changes to NDI-matlab.</p> </li> <li> <p>Commit your changes back to your fork.</p> </li> <li> <p>Finally, issue a Pull Request on GitHub from your fork. The request will be received by the NDI development team for integration.</p> </li> </ol>"},{"location":"NDI-matlab/development_order/","title":"NDI Development order","text":""},{"location":"NDI-matlab/development_order/#version-10-released","title":"Version 1.0 (Released)","text":"<ul> <li>DAQ system, DAQ reader, file navigator</li> <li>Syncgraph</li> <li>Elements, probes, neurons</li> <li>Functioning local database</li> <li>Basic Tutorials (Tutorials 1.*, 2.*, 3.*)</li> <li>App API</li> </ul>"},{"location":"NDI-matlab/development_order/#version-12-future","title":"Version 1.2 (Future)","text":"<ul> <li>Support for using NDR as a DAQ reader</li> <li>Add GUI</li> <li>Add support for images</li> <li>Add NDI calculation for advanced pipeline creation</li> <li>Tutorials set 4.*: case studies in reading data</li> <li>Tutorials set 5.*: case studies in data pipelines</li> </ul>"},{"location":"NDI-matlab/development_order/#version-15-future","title":"Version 1.5 (Future)","text":"<ul> <li>Embedded support for a data archive</li> <li>Read/write NWB</li> <li>Use of DID-database (more general database with better version control)</li> <li>Tutorials set 6.*: Using NDI with data archives</li> </ul>"},{"location":"NDI-matlab/faq/","title":"NDI Frequently Asked Questions","text":""},{"location":"NDI-matlab/faq/#q-can-i-use-ndi-to-analyze-data-recorded-in-any-format","title":"Q: Can I use NDI to analyze data recorded in any format?","text":"<p>A: Yes. The NDI system includes pieces of code called <code>ndi.daq.reader</code> objects which interpret data recorded with different acquisition devices. Each <code>ndi.daq.reader</code> is specific to a particular device, and <code>ndi.daq.reader</code> objects already exist for devices by several neuroscience software manufacturers.</p>"},{"location":"NDI-matlab/faq/#q-can-i-use-ndi-if-my-lab-builds-our-own-devices-and-measuring-tools","title":"Q: Can I use NDI if my lab builds our own devices and measuring tools?","text":"<p>A: Yes. You will need to write one piece of code - an <code>ndi.daq.reader</code> object - for each original DAQ system you use. Possibly, you will also need to create an `ndi.daq.metadatareader to read metadata, such as stimulus information for custom stimuli. Once these are created, your data can be read and analyzed with NDI.</p>"},{"location":"NDI-matlab/faq/#q-do-i-need-to-change-the-way-my-lab-organizes-our-data-files-in-order-to-use-ndi","title":"Q: Do I need to change the way my lab organizes our data files in order to use NDI?","text":"<p>A: No - the NDI system is able to retrieve data files organized in any way.  NDI uses pieces of code called <code>ndi.file.navigator</code> objects to locate data from a recording epoch. Each <code>ndi.file.navigator</code> works within a specific organization system, and you can specify the parameters to cause the file navigator to navigate your lab's system.</p>"},{"location":"NDI-matlab/faq/#q-can-i-use-ndi-to-pool-data-from-multiple-labs","title":"Q: Can I use NDI to pool data from multiple labs?","text":"<p>A: Yes. Once each lab has an ndi.daq.system that consists of an <code>ndi.file.navigator</code> that can locate files within its storage system and <code>ndi.daq.reader</code> objects for each their data acquisition systems, NDI can read and analyze datasets from both labs together.</p>"},{"location":"NDI-matlab/glossary/","title":"NDI Glossary","text":""},{"location":"NDI-matlab/glossary/#real-world-vocabulary","title":"Real-world vocabulary","text":"<p>session :  a collection of recordings or measurements taken at one sitting</p> <p>element :  </p> <p>probe : any instrument that makes a measurement or performs stimulation. One kind of element (all probes are elements). Requires a subject and a connection to a DAQ system. Examples of probes include single channel microelectrodes, multi-channel microelectrodes, intrinsic signal imaging systems, 2-photon microscopes, microphones, video cameras, reward wells, levers, visual stimulus systems, and speakers.</p> <p>subject : The object that is being sampled. Examples of subjects are an animal, a human, the air, a potato, and a test resistor.</p>"},{"location":"NDI-matlab/glossary/#_1","title":"NDI Glossary","text":"<p>Software objects</p>"},{"location":"NDI-matlab/goals_dryversion/","title":"NDI","text":""},{"location":"NDI-matlab/goals_dryversion/#goals","title":"Goals","text":"<p>NDI (Neuroscience Data Interface) is a cross-platform interface standard for reading neuroscience data and storing the results of analyses. Its goals include:</p> <ul> <li> <p>Providing a means for specifying and accessing neuroscience data regardless of the format of the files or the organization of the files and data on disk or in the cloud.</p> </li> <li> <p>Allowing the creation of analysis code that is invariant to data format and organization, so the analysis process can be independent of the raw format.</p> </li> <li> <p>Providing a database for storing human- and machine-readable documents that describe analyses, analyses of analyses, etc, that is searchable with or without knowing the formal schema of the documents of interest.</p> </li> <li> <p>Allowing the creation of an application ecosystem where individual applications can read raw data and read from the database, and write results back to the database to participate in analysis pipelines.</p> </li> <li> <p>Eliminating the need for different procedures between online and offline analyses.</p> </li> <li> <p>Maintaining a ready-to-share version of the analysis pipeline at all times, so data can be shared with other groups or archives without additional work.</p> </li> </ul> <p>Analysts can use NDI to quickly gain access to a collaborator's dataset (by specifying the organization and format of the data in a few parameters) and labs can share their data and results with others in a well-described format.</p>"},{"location":"NDI-matlab/installation/","title":"Installation:","text":"<ol> <li> <p>Make sure <code>git</code> is installed on your machine. If it is not, on Windows, go here. On Mac, open a terminal, and type xcode-select --install . Accept the license and wait for install. On Linux, consult your Linux distribution's package manager.</p> </li> <li> <p>Download the file ndi_install.m to your Desktop.</p> </li> <li> <p>Type the following in the Matlab command window: </p> <p><code>cd ~/Desktop</code></p> <p><code>ndi_install</code></p> </li> </ol>"},{"location":"NDI-matlab/installation/#required-matlab-toolboxes","title":"Required Matlab toolboxes","text":"<p>To use all of the NDI tools, the following Matlab toolboxes are required:</p> Toolbox Toolbox Toolbox MATLAB Control System Toolbox Curve Fitting Toolbox Image Processing Toolbox Optimization Toolbox Signal Processing Toolbox Statistics and Machine Learning Toolbox <p>You can use the <code>ver</code> command in Matlab to see which toolboxes you have installed.</p>"},{"location":"NDI-matlab/installation/#notes-for-newbies","title":"Notes for newbies","text":"<ol> <li> <p>To find the program Terminal on a Mac, use the Mac search menu to find it and run it.</p> </li> <li> <p>To download the ndi_install.m file, right click in your browser and choose \"Save as\". Be sure to save the file with a '.m' extension; your browser may try to add '.txt' to the end of the file, but you'll need to remove it for the program to run.</p> </li> <li> <p>If you lack particular Matlab Toolboxes, you can add them by clicking on the Add-On box in Matlab and choose \"Get Add-ons\".</p> </li> </ol>"},{"location":"NDI-matlab/learning_matlab/","title":"Learning Matlab","text":"<p>Currently NDI is available only in Matlab. If you are new to Matlab, there are resources to help you learn.</p>"},{"location":"NDI-matlab/learning_matlab/#short-tutorials","title":"Short tutorials","text":"<ol> <li> <p>https://www.mathworks.com/help/matlab/getting-started-with-matlab.html</p> </li> <li> <p>A very short tutorial Steve made as a TA for Computational Neuroscience in the early 2000s.</p> </li> <li> <p>MathWorks's own onboarding tutorial.</p> </li> </ol>"},{"location":"NDI-matlab/learning_matlab/#for-people-with-no-coding-experience","title":"For people with no coding experience","text":"<p>Some people want to learn to use NDI but do not have coding experience. These resources were suggested by our new users.</p>"},{"location":"NDI-matlab/learning_matlab/#classes-and-objects","title":"Classes and objects","text":"<ol> <li>Mo writes: Learn what a class and object is. I was completely stuck in terms of conceptually understanding what was going on in the code before I knew what classes and objects were. I recommend this video from CSdojo on YouTube.</li> </ol>"},{"location":"NDI-matlab/learning_matlab/#mos-newbie-notes","title":"Mo's newbie notes","text":"<ol> <li> <p>If you see a function that you don't know, it doesn't hurt to try using the <code>help</code> function in the command window. Just type in the word help followed by whatever you don't understand. For example, suppose I don't understand what <code>gca</code> is. I would type <code>help gca</code>.</p> </li> <li> <p>You can double click the things saved in the workspace to see their contents.</p> </li> <li> <p>You can use the editor to write and save code. I used this a lot for just saving all the code from the tutorial on one page. </p> </li> <li> <p>If you remove the semi-colon at the end of a line, Matlab will print out the properties of the object.</p> </li> </ol>"},{"location":"NDI-matlab/learning_matlab/#online-courses","title":"Online courses","text":"<ol> <li>Steve's semester-long course Data Analysis and Statistics Workshop is for new or experienced coders. It has 22 self-paced \"labs\" that are designed to take between 60 - 80 minutes. It is available free to the public.</li> </ol>"},{"location":"NDI-matlab/oldREADME/","title":"NDI","text":"<p>Neuroscience Data Interface - A means of specifying and accessing neuroscience data</p> <p>Available at https://github.com/VH-Lab/NDI-matlab</p> <p>Installation instructions: https://vh-lab.github.io/NDI-matlab/NDI-matlab/installation/</p> <p>Notes for manual installers: </p> <p>NDI depends on functions in vhlab-toolbox-matlab, available at https://github.com/VH-Lab/vhlab-toolbox-matlab Depends on functions in vhlab-thirdparty-matlab, available at https://github.com/VH-Lab/vhlab-thirdparty-matlab It is recommended that the developer also install vhlab_vhtools, available at https://github.com/VH-Lab/vhlab_vhtools</p> <p>It is assumed that the function <code>ndi_Init.m</code> is run at startup. Please add this to your <code>startup.m</code> file. (If you use the http://github.com/VH-Lab/vhlab_vhtools distribution, it will be run automatically.)</p> <p>Documentation is at https://vh-lab.github.io/NDI-matlab/</p> <p>Still in early development</p>"},{"location":"NDI-matlab/oldREADME/#description-of-key-terms","title":"Description of key terms:","text":"<ul> <li> <p>session: A collection of measurements and analysis that are associated with one experimental session. A \"study\" usually consists of several sessions.</p> </li> <li> <p>probe: An instrument that makes a measurement or provides stimulation. Examples include an electrode, a camera, a 2-photon microscope, a visual stimulus monitor, a nose-poke, a feeder.</p> </li> <li> <p>iodvice: An instrument that digitally acquires and stores measurement values or controls a stimulator.</p> </li> <li> <p>epoch: An episode of time during which data from an iodevice is acquired. Each epoch consists of an interval of time between when a data acquisition device was switched on to acquire data and when it was switched off. An epoch on one device may or may not correspond to epochs from other devices, and synchronization can be managed by NDI_SYNCGRAPH.</p> </li> </ul>"},{"location":"NDI-matlab/oldREADME/#description-of-software-objects-that-impliment-the-framework","title":"Description of software objects that impliment the framework:","text":"<ul> <li> <p><code>ndi_session</code>: The class that implements the basic structure of an experiment, including an iodevice list, synggraph, cache, reference, and a unique reference string.</p> </li> <li> <p><code>ndi_session_dir</code>: A session that uses the file system for storage of its parameters and database. This is presently used for all experiments.</p> </li> <li> <p><code>ndi_iodevice</code>: A software object that reads data from files created by hardware data acquisition devices</p> </li> <li> <p><code>ndi_filetree</code>: A file organizing class that traverses any file structure to identify the data files associated with each epoch</p> </li> <li> <p>Required device metadata: Classes (consisting of <code>ndi_iodevicestring</code> and <code>ndi_epochcontents</code>) that describe the probes and channel mappings between the probes and the iodevice objects.</p> </li> <li> <p>Database objects:</p> </li> <li><code>ndi_database</code>: A (mostly) abstract database object that specifies the API for storing and searching documents</li> <li><code>ndi_document</code>: An extensible database document object class that has a name, a unique identifier, and fields that are described in .JSON files.</li> <li><code>ndi_binarydoc</code>: An abstract class that allows binary reading/writing from files associated with <code>ndi_document</code>. Specific implementations can write to a local file system, or a remote file system such as GRID-FS, etc. </li> <li> <p>Implementations: Because <code>ndi_database</code> lacks specific implementation of key methods, one needs to use an implementation. Right now we have the following:</p> <ul> <li><code>ndi_matlabdumbjsondb</code>: A Matlab implementation of a very simple database (<code>dumbjsondb</code> in https://github.com/VH-Lab/vhlab-toolbox-matlab)</li> <li><code>ndi_binarydoc_matfid</code>: A Matlab implementation for reading/writing files that are on the machine's filesystem</li> </ul> </li> <li> <p>Timing objects</p> </li> <li><code>ndi_clocktype</code>: Types of clocks (such as UTC, local, global, global experiment)</li> <li><code>ndi_timemapping</code>: a mapping between epochs and iodevices</li> <li><code>ndi_syncgraph</code>: an object that finds mappings from one device and epoch to another using all known timing relationships among iodevices</li> <li><code>ndi_syncrule</code>: A rule for describing the relationship between data collected on different iodevices</li> <li><code>ndi_syncrule_filematch</code>: A rule that describes a timing relationship as \"equal\" if two epochs contain raw data files in common</li> </ul>"},{"location":"NDI-matlab/oldREADME/#tutorials","title":"Tutorials","text":"<ul> <li>For developers: A tour of ndi_documents and ndi_database: https://github.com/VH-Lab/NDI-matlab/blob/master/demo/documents_database/document_database_demo.ipynb</li> <li>For developers: A tour of epochs, daqsystems, probes, and things: https://github.com/VH-Lab/NDI-matlab/blob/master/demo/epochs_daqsystems_probes_things/epochdemo1.ipynb</li> </ul>"},{"location":"NDI-matlab/oldREADME/#conventions","title":"Conventions","text":"<ul> <li>Channels, samples, and other quantities are numbered from 1..N</li> </ul>"},{"location":"NDI-matlab/oldREADME/#development-conventions","title":"Development conventions","text":"<ul> <li> <p>Documentation of classes should follow the Matlab standard: https://www.mathworks.com/help/matlab/matlab_prog/create-help-for-classes.html</p> </li> <li> <p>In input arguments and documentation, we'll use \"indexes\" instead of \"indices\" and try to keep other English language exceptions to a minimum</p> </li> <li> <p>All error messages should be informative and give specific information about the problem, not just say 'an error occurred.'</p> </li> <li> <p>Most of the time, class names should include the full parentage of the object, starting with the basic classes for NDI: ndi_session, ndi_iodevice, ndi_probe. For example, a class implementing device drivers for a multifunction data aquisition board from mycompany should be called <code>ndi_iodevice_mfdaq_mycompany</code> to indicate that the object is descended from the <code>ndi_iodevice</code> and <code>ndi_iodevice_mfdaq</code> objects. Let's make exceptions if putting the full parentage gets cumbersome without adding clarity. Most users and programmers don't need to think about those classes (but will need to think about the basic classes <code>ndi_session</code>, <code>ndi_database</code>, and <code>ndi_iodevice</code>).</p> </li> </ul>"},{"location":"NDI-matlab/oldREADME/#test-code","title":"Test code","text":"<p>There is a set of test code that one can run all at once using the function <code>ndi_testsuite.m</code>. The directory <code>test</code> contains a number of subdirectories with test code. The file <code>ndi_testsuite_list.txt</code> has an up-to-date list of the test functions that are current.</p>"},{"location":"NDI-matlab/documents/animalsubject/","title":"animalsubject (ndi.document class)","text":""},{"location":"NDI-matlab/documents/animalsubject/#class-definition","title":"Class definition","text":"<p>Class name: animalsubject Short name: animalsubject Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/animalsubject.json Schema for validation: $NDISCHEMAPATH/animalsubject_schema.json Property_list_name: <code>animalsubject</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/animalsubject/#animalsubject-fields","title":"animalsubject fields","text":"<p>Accessed by <code>animalsubject.field</code> where field is one of the field names below</p> field default_value data type description node_at_ontology"},{"location":"NDI-matlab/documents/animalsubject/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/app/","title":"app (ndi.document class)","text":""},{"location":"NDI-matlab/documents/app/#class-definition","title":"Class definition","text":"<p>Class name: app Short name: app Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/app.json Schema for validation: $NDISCHEMAPATH/app_schema.json Property_list_name: <code>app</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/app/#app-fields","title":"app fields","text":"<p>Accessed by <code>app.field</code> where field is one of the field names below</p> field default_value data type description name version url os os_version interpreter interpreter_version"},{"location":"NDI-matlab/documents/app/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/base/","title":"base (ndi.document class)","text":""},{"location":"NDI-matlab/documents/base/#class-definition","title":"Class definition","text":"<p>Class name: base Short name: base Superclasses: none</p> <p>Definition: $DIDDOCUMENT_EX1/base.json Schema for validation: $DIDSCHEMA_EX1/base.schema.json Property_list_name: <code>base</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/base/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description session_id id name datestamp"},{"location":"NDI-matlab/documents/dataset_remote/","title":"dataset_remote (ndi.document class)","text":""},{"location":"NDI-matlab/documents/dataset_remote/#class-definition","title":"Class definition","text":"<p>Class name: dataset_remote Short name: dataset_remote Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/dataset_remote.json Schema for validation: $NDISCHEMAPATH/dataset_remote_schema.json Property_list_name: <code>dataset_remote</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/dataset_remote/#dataset_remote-fields","title":"dataset_remote fields","text":"<p>Accessed by <code>dataset_remote.field</code> where field is one of the field names below</p> field default_value data type description dataset_id organization_id"},{"location":"NDI-matlab/documents/dataset_remote/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/dataset_session_info/","title":"dataset_session_info (ndi.document class)","text":""},{"location":"NDI-matlab/documents/dataset_session_info/#class-definition","title":"Class definition","text":"<p>Class name: dataset_session_info Short name: dataset_session_info Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/dataset_session_info.json Schema for validation: $NDISCHEMAPATH/dataset_session_info.json Property_list_name: <code>dataset_session_info</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/dataset_session_info/#dataset_session_info-fields","title":"dataset_session_info fields","text":"<p>Accessed by <code>dataset_session_info.field</code> where field is one of the field names below</p> field default_value data type description dataset_session_info"},{"location":"NDI-matlab/documents/dataset_session_info/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/demoNDI/","title":"demoNDI (ndi.document class)","text":""},{"location":"NDI-matlab/documents/demoNDI/#class-definition","title":"Class definition","text":"<p>Class name: demoNDI Short name: demoNDI Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/demoNDI.json Schema for validation: $NDISCHEMAPATH/demoNDI_schema.json Property_list_name: <code>demoNDI</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/demoNDI/#demondi-fields","title":"demoNDI fields","text":"<p>Accessed by <code>demoNDI.field</code> where field is one of the field names below</p> field default_value data type description value"},{"location":"NDI-matlab/documents/demoNDI/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/element/","title":"element (ndi.document class)","text":""},{"location":"NDI-matlab/documents/element/#class-definition","title":"Class definition","text":"<p>Class name: element Short name: element Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/element.json Schema for validation: $NDISCHEMAPATH/element_schema.json Property_list_name: <code>element</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/element/#element-fields","title":"element fields","text":"<p>Accessed by <code>element.field</code> where field is one of the field names below</p> field default_value data type description ndi_element_class name reference type direct"},{"location":"NDI-matlab/documents/element/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/element_epoch/","title":"element_epoch (ndi.document class)","text":""},{"location":"NDI-matlab/documents/element_epoch/#class-definition","title":"Class definition","text":"<p>Class name: element_epoch Short name: element_epoch Superclasses: base, epochid</p> <p>Definition: $NDIDOCUMENTPATH/element_epoch.json Schema for validation: $NDISCHEMAPATH/element_epoch_schema.json Property_list_name: <code>element_epoch</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/element_epoch/#element_epoch-fields","title":"element_epoch fields","text":"<p>Accessed by <code>element_epoch.field</code> where field is one of the field names below</p> field default_value data type description epoch_clock t0_t1"},{"location":"NDI-matlab/documents/element_epoch/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/element_epoch/#epochid-fields","title":"epochid fields","text":"<p>Accessed by <code>epochid.field</code> where field is one of the field names below</p> field default_value data type description epochid"},{"location":"NDI-matlab/documents/epochclocktimes/","title":"epochclocktimes (ndi.document class)","text":""},{"location":"NDI-matlab/documents/epochclocktimes/#class-definition","title":"Class definition","text":"<p>Class name: epochclocktimes Short name: epochclocktimes Superclasses: base, epochid</p> <p>Definition: $NDIDOCUMENTPATH/epochclocktimes.json Schema for validation: $NDISCHEMAPATH/epochclocktimes_schema.json Property_list_name: <code>epochclocktimes</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/epochclocktimes/#epochclocktimes-fields","title":"epochclocktimes fields","text":"<p>Accessed by <code>epochclocktimes.field</code> where field is one of the field names below</p> field default_value data type description clocktype t0_t1"},{"location":"NDI-matlab/documents/epochclocktimes/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/epochclocktimes/#epochid-fields","title":"epochid fields","text":"<p>Accessed by <code>epochid.field</code> where field is one of the field names below</p> field default_value data type description epochid"},{"location":"NDI-matlab/documents/epochid/","title":"epochid (ndi.document class)","text":""},{"location":"NDI-matlab/documents/epochid/#class-definition","title":"Class definition","text":"<p>Class name: epochid Short name: epochid Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/epochid.json Schema for validation: $NDISCHEMAPATH/epochid_schema.json Property_list_name: <code>epochid</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/epochid/#epochid-fields","title":"epochid fields","text":"<p>Accessed by <code>epochid.field</code> where field is one of the field names below</p> field default_value data type description epochid"},{"location":"NDI-matlab/documents/epochid/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/mock/","title":"mock (ndi.document class)","text":""},{"location":"NDI-matlab/documents/mock/#class-definition","title":"Class definition","text":"<p>Class name: mock Short name: mock Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/mock.json Schema for validation: $NDISCHEMAPATH/mock_schema.json Property_list_name: <code>mock</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/mock/#mock-fields","title":"mock fields","text":"<p>Accessed by <code>mock.field</code> where field is one of the field names below</p> field default_value data type description ismock"},{"location":"NDI-matlab/documents/mock/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/oneepoch/","title":"oneepoch (ndi.document class)","text":""},{"location":"NDI-matlab/documents/oneepoch/#class-definition","title":"Class definition","text":"<p>Class name: oneepoch Short name: oneepoch Superclasses: base, element_epoch, epochid</p> <p>Definition: $NDIDOCUMENTPATH/oneepoch.json Schema for validation: $NDISCHEMAPATH/oneepoch_schema.json Property_list_name: <code>oneepoch</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/oneepoch/#oneepoch-fields","title":"oneepoch fields","text":"<p>Accessed by <code>oneepoch.field</code> where field is one of the field names below</p> field default_value data type description epoch_ids"},{"location":"NDI-matlab/documents/oneepoch/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/oneepoch/#element_epoch-fields","title":"element_epoch fields","text":"<p>Accessed by <code>element_epoch.field</code> where field is one of the field names below</p> field default_value data type description epoch_clock t0_t1"},{"location":"NDI-matlab/documents/oneepoch/#epochid-fields","title":"epochid fields","text":"<p>Accessed by <code>epochid.field</code> where field is one of the field names below</p> field default_value data type description epochid"},{"location":"NDI-matlab/documents/projectvar/","title":"projectvar (ndi.document class)","text":""},{"location":"NDI-matlab/documents/projectvar/#class-definition","title":"Class definition","text":"<p>Class name: projectvar Short name: projectvar Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/projectvar.json Schema for validation: $NDISCHEMAPATH/projectvar_schema.json Property_list_name: <code>projectvar</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/projectvar/#projectvar-fields","title":"projectvar fields","text":"<p>Accessed by <code>projectvar.field</code> where field is one of the field names below</p> field default_value data type description project type user lab description data"},{"location":"NDI-matlab/documents/projectvar/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/session/","title":"session (ndi.document class)","text":""},{"location":"NDI-matlab/documents/session/#class-definition","title":"Class definition","text":"<p>Class name: session Short name: session Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/session.json Schema for validation: $NDISCHEMAPATH/session.json Property_list_name: <code>session</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/session/#session-fields","title":"session fields","text":"<p>Accessed by <code>session.field</code> where field is one of the field names below</p> field default_value data type description reference"},{"location":"NDI-matlab/documents/session/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/subject/","title":"subject (ndi.document class)","text":""},{"location":"NDI-matlab/documents/subject/#class-definition","title":"Class definition","text":"<p>Class name: subject Short name: subject Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/subject.json Schema for validation: $NDISCHEMAPATH/subject_schema.json Property_list_name: <code>subject</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/subject/#subject-fields","title":"subject fields","text":"<p>Accessed by <code>subject.field</code> where field is one of the field names below</p> field default_value data type description local_identifier description"},{"location":"NDI-matlab/documents/subject/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/subjectmeasurement/","title":"subjectmeasurement (ndi.document class)","text":""},{"location":"NDI-matlab/documents/subjectmeasurement/#class-definition","title":"Class definition","text":"<p>Class name: subjectmeasurement Short name: subjectmeasurement Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/subjectmeasurement.json Schema for validation: $NDISCHEMAPATH/subjectmeasurement_schema.json Property_list_name: <code>subjectmeasurement</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/subjectmeasurement/#subjectmeasurement-fields","title":"subjectmeasurement fields","text":"<p>Accessed by <code>subjectmeasurement.field</code> where field is one of the field names below</p> field default_value data type description measurement value datestamp"},{"location":"NDI-matlab/documents/subjectmeasurement/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/treatment/","title":"treatment (ndi.document class)","text":""},{"location":"NDI-matlab/documents/treatment/#class-definition","title":"Class definition","text":"<p>Class name: treatment Short name: treatment Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/treatment.json Schema for validation: $NDISCHEMAPATH/treatment_schema.json Property_list_name: <code>treatment</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/treatment/#treatment-fields","title":"treatment fields","text":"<p>Accessed by <code>treatment.field</code> where field is one of the field names below</p> field default_value data type description ontologyName name numeric_value string_value"},{"location":"NDI-matlab/documents/treatment/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/apps/calculators/simple_calc/","title":"simple_calc (ndi.document class)","text":""},{"location":"NDI-matlab/documents/apps/calculators/simple_calc/#class-definition","title":"Class definition","text":"<p>Class name: simple_calc Short name: simple_calc Superclasses: app, base</p> <p>Definition: $NDIDOCUMENTPATH/apps/calculations/simple_calc.json Schema for validation: $NDISCHEMAPATH/apps/calculations/simple_calc_schema.json Property_list_name: <code>simple_calc</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/apps/calculators/simple_calc/#simple_calc-fields","title":"simple_calc fields","text":"<p>Accessed by <code>simple_calc.field</code> where field is one of the field names below</p> field default_value data type description input_parameters answer"},{"location":"NDI-matlab/documents/apps/calculators/simple_calc/#app-fields","title":"app fields","text":"<p>Accessed by <code>app.field</code> where field is one of the field names below</p> field default_value data type description name version url os os_version interpreter interpreter_version"},{"location":"NDI-matlab/documents/apps/calculators/simple_calc/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/apps/calculators/tuningcurve_calc/","title":"tuningcurve_calc (ndi.document class)","text":""},{"location":"NDI-matlab/documents/apps/calculators/tuningcurve_calc/#class-definition","title":"Class definition","text":"<p>Class name: tuningcurve_calc Short name: tuningcurve_calc Superclasses: base, stimulus_tuningcurve</p> <p>Definition: $NDIDOCUMENTPATH/apps/calculations/tuningcurve_calc.json Schema for validation: $NDISCHEMAPATH/apps/calculations/tuningcurve_calc_schema.json Property_list_name: <code>tuningcurve_calc</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/apps/calculators/tuningcurve_calc/#tuningcurve_calc-fields","title":"tuningcurve_calc fields","text":"<p>Accessed by <code>tuningcurve_calc.field</code> where field is one of the field names below</p> field default_value data type description input_parameters log depends_on"},{"location":"NDI-matlab/documents/apps/calculators/tuningcurve_calc/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/apps/calculators/tuningcurve_calc/#stimulus_tuningcurve-fields","title":"stimulus_tuningcurve fields","text":"<p>Accessed by <code>stimulus_tuningcurve.field</code> where field is one of the field names below</p> field default_value data type description independent_variable_label independent_variable_value stimid response_mean response_stddev response_stderr individual_responses_real individual_responses_imaginary stimulus_presentation_number control_stimid control_response_mean control_response_stddev control_response_stderr control_individual_responses_real control_individual_responses_imaginary response_units"},{"location":"NDI-matlab/documents/apps/jrclust/jrclust_clusters/","title":"jrclust_clusters (ndi.document class)","text":""},{"location":"NDI-matlab/documents/apps/jrclust/jrclust_clusters/#class-definition","title":"Class definition","text":"<p>Class name: jrclust_clusters Short name: jrclust_clusters Superclasses: app, base</p> <p>Definition: $NDIDOCUMENTPATH/apps/jrclust/jrclust_clusters.json Schema for validation: $NDISCHEMAPATH/apps/jrclust/jrclust_clusters_schema.json Property_list_name: <code>jrclust_clusters</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/apps/jrclust/jrclust_clusters/#jrclust_clusters-fields","title":"jrclust_clusters fields","text":"<p>Accessed by <code>jrclust_clusters.field</code> where field is one of the field names below</p> field default_value data type description res_mat_MD5_checksum"},{"location":"NDI-matlab/documents/apps/jrclust/jrclust_clusters/#app-fields","title":"app fields","text":"<p>Accessed by <code>app.field</code> where field is one of the field names below</p> field default_value data type description name version url os os_version interpreter interpreter_version"},{"location":"NDI-matlab/documents/apps/jrclust/jrclust_clusters/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/apps/markgarbage/valid_interval/","title":"valid_interval (ndi.document class)","text":""},{"location":"NDI-matlab/documents/apps/markgarbage/valid_interval/#class-definition","title":"Class definition","text":"<p>Class name: valid_interval Short name: valid_interval Superclasses: app, base</p> <p>Definition: $NDIDOCUMENTPATH/apps/markgarbage/valid_interval.json Schema for validation: $NDISCHEMAPATH/apps/markgarbage/valid_interval_schema.json Property_list_name: <code>valid_interval</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/apps/markgarbage/valid_interval/#valid_interval-fields","title":"valid_interval fields","text":"<p>Accessed by <code>valid_interval.field</code> where field is one of the field names below</p> field default_value data type description timeref_structt0 t0 timeref_structt1 t1"},{"location":"NDI-matlab/documents/apps/markgarbage/valid_interval/#app-fields","title":"app fields","text":"<p>Accessed by <code>app.field</code> where field is one of the field names below</p> field default_value data type description name version url os os_version interpreter interpreter_version"},{"location":"NDI-matlab/documents/apps/markgarbage/valid_interval/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters/","title":"spike_extraction_parameters (ndi.document class)","text":""},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters/#class-definition","title":"Class definition","text":"<p>Class name: spike_extraction_parameters Short name: spike_extraction_parameters Superclasses: app, base</p> <p>Definition: $NDIDOCUMENTPATH/apps/spikeextractor/spike_extraction_parameters.json Schema for validation: $NDISCHEMAPATH/apps/spikeextractor/spike_extraction_parameters_schema.json Property_list_name: <code>spike_extraction_parameters</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters/#spike_extraction_parameters-fields","title":"spike_extraction_parameters fields","text":"<p>Accessed by <code>spike_extraction_parameters.field</code> where field is one of the field names below</p> field default_value data type description center_range_time overlap read_time refractory_time spike_start_time spike_end_time do_filter filter_type filter_low filter_high filter_order filter_ripple threshold_method threshold_parameter threshold_sign"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters/#app-fields","title":"app fields","text":"<p>Accessed by <code>app.field</code> where field is one of the field names below</p> field default_value data type description name version url os os_version interpreter interpreter_version"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters_modification/","title":"spike_extraction_parameters_modification (ndi.document class)","text":""},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters_modification/#class-definition","title":"Class definition","text":"<p>Class name: spike_extraction_parameters_modification Short name: spike_extraction_parameters_modification Superclasses: app, base</p> <p>Definition: $NDIDOCUMENTPATH/apps/spikeextractor/spike_extraction_parameters_modification.json Schema for validation: $NDISCHEMAPATH/apps/spikeextractor/spike_extraction_parameters_modification_schema.json Property_list_name: <code>spike_extraction_parameters_modification</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters_modification/#spike_extraction_parameters_modification-fields","title":"spike_extraction_parameters_modification fields","text":"<p>Accessed by <code>spike_extraction_parameters_modification.field</code> where field is one of the field names below</p> field default_value data type description center_range_time overlap read_time refractory_time spike_start_time spike_end_time do_filter filter_type filter_low filter_high filter_order filter_ripple threshold_method threshold_parameter threshold_sign"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters_modification/#app-fields","title":"app fields","text":"<p>Accessed by <code>app.field</code> where field is one of the field names below</p> field default_value data type description name version url os os_version interpreter interpreter_version"},{"location":"NDI-matlab/documents/apps/spikeextractor/spike_extraction_parameters_modification/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/apps/spikeextractor/spikewaves/","title":"spikewaves (ndi.document class)","text":""},{"location":"NDI-matlab/documents/apps/spikeextractor/spikewaves/#class-definition","title":"Class definition","text":"<p>Class name: spikewaves Short name: spikewaves Superclasses: app, base, epochid</p> <p>Definition: $NDIDOCUMENTPATH/apps/spikeextractor/spikewaves.json Schema for validation: $NDISCHEMAPATH/apps/spikeextractor/spikewaves_schema.json Property_list_name: <code>spikewaves</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/apps/spikeextractor/spikewaves/#spikewaves-fields","title":"spikewaves fields","text":"<p>Accessed by <code>spikewaves.field</code> where field is one of the field names below</p> field default_value data type description extraction_name"},{"location":"NDI-matlab/documents/apps/spikeextractor/spikewaves/#app-fields","title":"app fields","text":"<p>Accessed by <code>app.field</code> where field is one of the field names below</p> field default_value data type description name version url os os_version interpreter interpreter_version"},{"location":"NDI-matlab/documents/apps/spikeextractor/spikewaves/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/apps/spikeextractor/spikewaves/#epochid-fields","title":"epochid fields","text":"<p>Accessed by <code>epochid.field</code> where field is one of the field names below</p> field default_value data type description epochid"},{"location":"NDI-matlab/documents/apps/spikesorter/sorting_parameters/","title":"sorting_parameters (ndi.document class)","text":""},{"location":"NDI-matlab/documents/apps/spikesorter/sorting_parameters/#class-definition","title":"Class definition","text":"<p>Class name: sorting_parameters Short name: sorting_parameters Superclasses: app, base</p> <p>Definition: $NDIDOCUMENTPATH/apps/spikesorter/sorting_parameters.json Schema for validation: $NDISCHEMAPATH/apps/spikesorter/sorting_parameters_schema.json Property_list_name: <code>sorting_parameters</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/apps/spikesorter/sorting_parameters/#sorting_parameters-fields","title":"sorting_parameters fields","text":"<p>Accessed by <code>sorting_parameters.field</code> where field is one of the field names below</p> field default_value data type description graphical_mode num_pca_features interpolation min_clusters max_clusters num_start"},{"location":"NDI-matlab/documents/apps/spikesorter/sorting_parameters/#app-fields","title":"app fields","text":"<p>Accessed by <code>app.field</code> where field is one of the field names below</p> field default_value data type description name version url os os_version interpreter interpreter_version"},{"location":"NDI-matlab/documents/apps/spikesorter/sorting_parameters/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/apps/spikesorter/spike_clusters/","title":"spike_clusters (ndi.document class)","text":""},{"location":"NDI-matlab/documents/apps/spikesorter/spike_clusters/#class-definition","title":"Class definition","text":"<p>Class name: spike_clusters Short name: spike_clusters Superclasses: app, base</p> <p>Definition: $NDIDOCUMENTPATH/apps/spikesorter/spike_clusters.json Schema for validation: $NDISCHEMAPATH/apps/spikesorter/spike_clusters_schema.json Property_list_name: <code>spike_clusters</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/apps/spikesorter/spike_clusters/#spike_clusters-fields","title":"spike_clusters fields","text":"<p>Accessed by <code>spike_clusters.field</code> where field is one of the field names below</p> field default_value data type description epoch_info clusterinfo waveform_sample_times"},{"location":"NDI-matlab/documents/apps/spikesorter/spike_clusters/#app-fields","title":"app fields","text":"<p>Accessed by <code>app.field</code> where field is one of the field names below</p> field default_value data type description name version url os os_version interpreter interpreter_version"},{"location":"NDI-matlab/documents/apps/spikesorter/spike_clusters/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/","title":"binnedspikeratevm (ndi.document class)","text":""},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/#class-definition","title":"Class definition","text":"<p>Class name: binnedspikeratevm Short name: binnedspikeratevm Superclasses: app, base, epochid</p> <p>Definition: $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/binnedspikeratevm.json Schema for validation: $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/binnedspikeratevm_schema.json Property_list_name: <code>binnedspikeratevm</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/#binnedspikeratevm-fields","title":"binnedspikeratevm fields","text":"<p>Accessed by <code>binnedspikeratevm.field</code> where field is one of the field names below</p> field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use <code>ndi.document</code> methods <code>dependency</code>, <code>dependency_value</code>,<code>add_dependency_value_n</code>,<code>dependency_value_n</code>,<code>remove_dependency_value_n</code>, and <code>set_dependency_value</code> to read and edit <code>depends_on</code> fields of an <code>ndi.document</code>. depends_on: sorting_parameters_id depends_on: element_id parameters parameters.binsize parameters.vm_baseline_correction parameters.vm_baseline_correct_time parameters.vm_baseline_correct_func parameters.number_of_points voltage_observations firingrate_observations stimids timepoints exactbintime"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/#app-fields","title":"app fields","text":"<p>Accessed by <code>app.field</code> where field is one of the field names below</p> field default_value data type description name version url os os_version interpreter interpreter_version"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/binnedspikeratevm/#epochid-fields","title":"epochid fields","text":"<p>Accessed by <code>epochid.field</code> where field is one of the field names below</p> field default_value data type description epochid"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals/","title":"vmneuralresponseresiduals (ndi.document class)","text":""},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals/#class-definition","title":"Class definition","text":"<p>Class name: vmneuralresponseresiduals Short name: vmneuralresponseresiduals Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals.json Schema for validation: $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals_schema.json Property_list_name: <code>vmneuralresponseresiduals</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals/#vmneuralresponseresiduals-fields","title":"vmneuralresponseresiduals fields","text":"<p>Accessed by <code>vmneuralresponseresiduals.field</code> where field is one of the field names below</p> field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use <code>ndi.document</code> methods <code>dependency</code>, <code>dependency_value</code>,<code>add_dependency_value_n</code>,<code>dependency_value_n</code>,<code>remove_dependency_value_n</code>, and <code>set_dependency_value</code> to read and edit <code>depends_on</code> fields of an <code>ndi.document</code>. depends_on: element_id vmneuralresponseresiduals vmneuralresponseresiduals.element_epochid vmneuralresponseresiduals.parameters vmneuralresponseresiduals.parameters.number_traces vmneuralresponseresiduals.parameters.samples_per_trace vmneuralresponseresiduals.parameters.units vmneuralresponseresiduals.column_labels vmneuralresponseresiduals.column_labels.first_column vmneuralresponseresiduals.column_labels.second_column vmneuralresponseresiduals.column_labels.third_column vmneuralresponseresiduals.column_labels.fourth_column vmneuralresponseresiduals.column_labels.fifth_column vmneuralresponseresiduals.goodness_of_fit vmneuralresponseresiduals.total_power vmneuralresponseresiduals.residual_power"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmneuralresponseresiduals/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/","title":"vmspikefilteringparameters (ndi.document class)","text":""},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/#class-definition","title":"Class definition","text":"<p>Class name: vmspikefilteringparameters Short name: vmspikefilteringparameters Superclasses: app, base, epochid</p> <p>Definition: $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmspikefilteringparameters.json Schema for validation: $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmspikefilteringparameters_schema.json Property_list_name: <code>vmspikefilteringparameters</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/#vmspikefilteringparameters-fields","title":"vmspikefilteringparameters fields","text":"<p>Accessed by <code>vmspikefilteringparameters.field</code> where field is one of the field names below</p> field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use <code>ndi.document</code> methods <code>dependency</code>, <code>dependency_value</code>,<code>add_dependency_value_n</code>,<code>dependency_value_n</code>,<code>remove_dependency_value_n</code>, and <code>set_dependency_value</code> to read and edit <code>depends_on</code> fields of an <code>ndi.document</code>. depends_on: element_id sampling_rate new_sampling_rate threshold spiketimes filter_algorithm filter_algorithm_parameters rm60Hz refract"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/#app-fields","title":"app fields","text":"<p>Accessed by <code>app.field</code> where field is one of the field names below</p> field default_value data type description name version url os os_version interpreter interpreter_version"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefilteringparameters/#epochid-fields","title":"epochid fields","text":"<p>Accessed by <code>epochid.field</code> where field is one of the field names below</p> field default_value data type description epochid"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefit/","title":"vmspikefit (ndi.document class)","text":""},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefit/#class-definition","title":"Class definition","text":"<p>Class name: vmspikefit Short name: vmspikefit Superclasses: app, base, epochid</p> <p>Definition: $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmspikefit.json Schema for validation: $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmspikefit_schema.json Property_list_name: <code>vmspikefit</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefit/#vmspikefit-fields","title":"vmspikefit fields","text":"<p>Accessed by <code>vmspikefit.field</code> where field is one of the field names below</p> field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use <code>ndi.document</code> methods <code>dependency</code>, <code>dependency_value</code>,<code>add_dependency_value_n</code>,<code>dependency_value_n</code>,<code>remove_dependency_value_n</code>, and <code>set_dependency_value</code> to read and edit <code>depends_on</code> fields of an <code>ndi.document</code>. depends_on: fit_input_id depends_on: element_id fit_name fit_equation fit_parameters fit_parameter_names fit_sse fit_sse_perpoint fit_constraints"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefit/#app-fields","title":"app fields","text":"<p>Accessed by <code>app.field</code> where field is one of the field names below</p> field default_value data type description name version url os os_version interpreter interpreter_version"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefit/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikefit/#epochid-fields","title":"epochid fields","text":"<p>Accessed by <code>epochid.field</code> where field is one of the field names below</p> field default_value data type description epochid"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikesummary/","title":"vmspikesummary (ndi.document class)","text":""},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikesummary/#class-definition","title":"Class definition","text":"<p>Class name: vmspikesummary Short name: vmspikesummary Superclasses: base, epochid</p> <p>Definition: $NDIDOCUMENTPATH/apps/vhlab_voltage2firingrate/vmspikesummary.json Schema for validation: $NDISCHEMAPATH/apps/vhlab_voltage2firingrate/vmspikesummary_schema.json Property_list_name: <code>vmspikesummary</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikesummary/#vmspikesummary-fields","title":"vmspikesummary fields","text":"<p>Accessed by <code>vmspikesummary.field</code> where field is one of the field names below</p> field default_value data type description depends_on - structure Each document that this document depends on is listed; its document ID is given by the value, and the name indicates the type of dependency that exists. Note that the index for each dependency in the list below is arbitrary and can change. Use <code>ndi.document</code> methods <code>dependency</code>, <code>dependency_value</code>,<code>add_dependency_value_n</code>,<code>dependency_value_n</code>,<code>remove_dependency_value_n</code>, and <code>set_dependency_value</code> to read and edit <code>depends_on</code> fields of an <code>ndi.document</code>. depends_on: element_id depends_on: spike_extraction_id mean_spikewave sample_times number_of_spikes median_spikekink_vm median_voltageofhalfmaximum median_fullwidthhalfmaximum median_presk_halfwidthmaximum median_fullwidthhalfmaximum_1 median_presk_halfwidthmaximum_1 median_max_dvdt median_kink_index slope_criterion"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikesummary/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/apps/vhlab_voltage2firingrate/vmspikesummary/#epochid-fields","title":"epochid fields","text":"<p>Accessed by <code>epochid.field</code> where field is one of the field names below</p> field default_value data type description epochid"},{"location":"NDI-matlab/documents/daq/daqmetadatareader/","title":"daqmetadatareader (ndi.document class)","text":""},{"location":"NDI-matlab/documents/daq/daqmetadatareader/#class-definition","title":"Class definition","text":"<p>Class name: daqmetadatareader Short name: daqmetadatareader Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/daq/daqmetadatareader.json Schema for validation: $NDISCHEMAPATH/daq/daqmetadatareader_schema.json Property_list_name: <code>daqmetadatareader</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/daq/daqmetadatareader/#daqmetadatareader-fields","title":"daqmetadatareader fields","text":"<p>Accessed by <code>daqmetadatareader.field</code> where field is one of the field names below</p> field default_value data type description ndi_daqmetadatareader_class tab_separated_file_parameter"},{"location":"NDI-matlab/documents/daq/daqmetadatareader/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/daq/daqreader/","title":"daqreader (ndi.document class)","text":""},{"location":"NDI-matlab/documents/daq/daqreader/#class-definition","title":"Class definition","text":"<p>Class name: daqreader Short name: daqreader Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/daq/daqreader.json Schema for validation: $NDISCHEMAPATH/daq/daqreader_schema.json Property_list_name: <code>daqreader</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/daq/daqreader/#daqreader-fields","title":"daqreader fields","text":"<p>Accessed by <code>daqreader.field</code> where field is one of the field names below</p> field default_value data type description ndi_daqreader_class"},{"location":"NDI-matlab/documents/daq/daqreader/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/daq/daqreader_ndr/","title":"daqreader_ndr (ndi.document class)","text":""},{"location":"NDI-matlab/documents/daq/daqreader_ndr/#class-definition","title":"Class definition","text":"<p>Class name: daqreader_ndr Short name: daqreader_ndr Superclasses: base, daqreader</p> <p>Definition: $NDIDOCUMENTPATH/daq/daqreader_ndr.json Schema for validation: $NDISCHEMAPATH/daq/daqreader_ndr_schema.json Property_list_name: <code>daqreader_ndr</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/daq/daqreader_ndr/#daqreader_ndr-fields","title":"daqreader_ndr fields","text":"<p>Accessed by <code>daqreader_ndr.field</code> where field is one of the field names below</p> field default_value data type description ndr_reader_string ndi_daqreader_ndr_class"},{"location":"NDI-matlab/documents/daq/daqreader_ndr/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/daq/daqreader_ndr/#daqreader-fields","title":"daqreader fields","text":"<p>Accessed by <code>daqreader.field</code> where field is one of the field names below</p> field default_value data type description ndi_daqreader_class"},{"location":"NDI-matlab/documents/daq/daqsystem/","title":"daqsystem (ndi.document class)","text":""},{"location":"NDI-matlab/documents/daq/daqsystem/#class-definition","title":"Class definition","text":"<p>Class name: daqsystem Short name: daqsystem Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/daq/daqsystem.json Schema for validation: $NDISCHEMAPATH/daq/daqsystem_schema.json Property_list_name: <code>daqsystem</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/daq/daqsystem/#daqsystem-fields","title":"daqsystem fields","text":"<p>Accessed by <code>daqsystem.field</code> where field is one of the field names below</p> field default_value data type description ndi_daqsystem_class"},{"location":"NDI-matlab/documents/daq/daqsystem/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/daq/filenavigator/","title":"filenavigator (ndi.document class)","text":""},{"location":"NDI-matlab/documents/daq/filenavigator/#class-definition","title":"Class definition","text":"<p>Class name: filenavigator Short name: filenavigator Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/daq/filenavigator.json Schema for validation: $NDISCHEMAPATH/daq/filenavigator_schema.json Property_list_name: <code>filenavigator</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/daq/filenavigator/#filenavigator-fields","title":"filenavigator fields","text":"<p>Accessed by <code>filenavigator.field</code> where field is one of the field names below</p> field default_value data type description ndi_filenavigator_class fileparameters epochprobemap_class epochprobemap_fileparameters"},{"location":"NDI-matlab/documents/daq/filenavigator/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/daq/syncgraph/","title":"syncgraph (ndi.document class)","text":""},{"location":"NDI-matlab/documents/daq/syncgraph/#class-definition","title":"Class definition","text":"<p>Class name: syncgraph Short name: syncgraph Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/daq/syncgraph.json Schema for validation: $NDISCHEMAPATH/daq/syncgraph_schema.json Property_list_name: <code>syncgraph</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/daq/syncgraph/#syncgraph-fields","title":"syncgraph fields","text":"<p>Accessed by <code>syncgraph.field</code> where field is one of the field names below</p> field default_value data type description ndi_syncgraph_class"},{"location":"NDI-matlab/documents/daq/syncgraph/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/daq/syncrule/","title":"syncrule (ndi.document class)","text":""},{"location":"NDI-matlab/documents/daq/syncrule/#class-definition","title":"Class definition","text":"<p>Class name: syncrule Short name: syncrule Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/daq/syncrule.json Schema for validation: $NDISCHEMAPATH/daq/syncrule_schema.json Property_list_name: <code>syncrule</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/daq/syncrule/#syncrule-fields","title":"syncrule fields","text":"<p>Accessed by <code>syncrule.field</code> where field is one of the field names below</p> field default_value data type description ndi_syncrule_class parameters"},{"location":"NDI-matlab/documents/daq/syncrule/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/data/binaryseries_parameters/","title":"binaryseries_parameters (ndi.document class)","text":""},{"location":"NDI-matlab/documents/data/binaryseries_parameters/#class-definition","title":"Class definition","text":"<p>Class name: binaryseries_parameters Short name: binaryseries_parameters Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/data/binaryseries_parameters.json Schema for validation: $NDISCHEMAPATH/data/binaryseries_parameters_schema.json Property_list_name: <code>binaryseries_parameters</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/data/binaryseries_parameters/#binaryseries_parameters-fields","title":"binaryseries_parameters fields","text":"<p>Accessed by <code>binaryseries_parameters.field</code> where field is one of the field names below</p> field default_value data type description time_size time_type data_size data_type data_dim samples_regular_intervals"},{"location":"NDI-matlab/documents/data/binaryseries_parameters/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/data/fitcurve/","title":"fitcurve (ndi.document class)","text":""},{"location":"NDI-matlab/documents/data/fitcurve/#class-definition","title":"Class definition","text":"<p>Class name: fitcurve Short name: fitcurve Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/data/fitcurve.json Schema for validation: $NDISCHEMAPATH/data/fitcurve.json Property_list_name: <code>fitcurve</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/data/fitcurve/#fitcurve-fields","title":"fitcurve fields","text":"<p>Accessed by <code>fitcurve.field</code> where field is one of the field names below</p> field default_value data type description fit_name fit_equation fit_parameters fit_parameter_names fit_independent_variable_names fit_dependent_variable_names fit_sse fit_constraints fit_data"},{"location":"NDI-matlab/documents/data/fitcurve/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/data/imageStack_parameters/","title":"imageStack_parameters (ndi.document class)","text":""},{"location":"NDI-matlab/documents/data/imageStack_parameters/#class-definition","title":"Class definition","text":"<p>Class name: imageStack_parameters Short name: imageStack_parameters Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/data/imageStack_parameters.json Schema for validation: $NDISCHEMAPATH/data/imageStack_parameters_schema.json Property_list_name: <code>imageStack_parameters</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/data/imageStack_parameters/#imagestack_parameters-fields","title":"imageStack_parameters fields","text":"<p>Accessed by <code>imageStack_parameters.field</code> where field is one of the field names below</p> field default_value data type description dimension_order dimension_labels dimension_size dimension_scale dimension_scale_units data_type data_limits timestamp clocktype"},{"location":"NDI-matlab/documents/data/imageStack_parameters/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/data/ngrid/","title":"ngrid (ndi.document class)","text":""},{"location":"NDI-matlab/documents/data/ngrid/#class-definition","title":"Class definition","text":"<p>Class name: ngrid Short name: ngrid Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/data/ngrid.json Schema for validation: $NDISCHEMAPATH/data/ngrid_schema.json Property_list_name: <code>ngrid</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/data/ngrid/#ngrid-fields","title":"ngrid fields","text":"<p>Accessed by <code>ngrid.field</code> where field is one of the field names below</p> field default_value data type description data_size data_type data_dim coordinates"},{"location":"NDI-matlab/documents/data/ngrid/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/data/ontologyImage/","title":"ontologyImage (ndi.document class)","text":""},{"location":"NDI-matlab/documents/data/ontologyImage/#class-definition","title":"Class definition","text":"<p>Class name: ontologyImage Short name: ontologyImage Superclasses: base, ngrid</p> <p>Definition: $NDIDOCUMENTPATH/data/ontologyImage.json Schema for validation: $NDISCHEMAPATH/data/ontologyImage_schema.json Property_list_name: <code>ontologyImage</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/data/ontologyImage/#ontologyimage-fields","title":"ontologyImage fields","text":"<p>Accessed by <code>ontologyImage.field</code> where field is one of the field names below</p> field default_value data type description ontologyNode"},{"location":"NDI-matlab/documents/data/ontologyImage/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/data/ontologyImage/#ngrid-fields","title":"ngrid fields","text":"<p>Accessed by <code>ngrid.field</code> where field is one of the field names below</p> field default_value data type description data_size data_type data_dim coordinates"},{"location":"NDI-matlab/documents/data/ontologyTableRow/","title":"ontologyTableRow (ndi.document class)","text":""},{"location":"NDI-matlab/documents/data/ontologyTableRow/#class-definition","title":"Class definition","text":"<p>Class name: ontologyTableRow Short name: ontologyTableRow Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/data/ontologyTableRow.json Schema for validation: $NDISCHEMAPATH/data/ontologyTableRow_schema.json Property_list_name: <code>ontologyTableRow</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/data/ontologyTableRow/#ontologytablerow-fields","title":"ontologyTableRow fields","text":"<p>Accessed by <code>ontologyTableRow.field</code> where field is one of the field names below</p> field default_value data type description names variableNames ontologyNodes data"},{"location":"NDI-matlab/documents/data/ontologyTableRow/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/element/distance_metadata/","title":"distance_metadata (ndi.document class)","text":""},{"location":"NDI-matlab/documents/element/distance_metadata/#class-definition","title":"Class definition","text":"<p>Class name: distance_metadata Short name: distance_metadata Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/element/distance_metadata.json Schema for validation: $NDISCHEMAPATH/element/distance_metadata_schema.json Property_list_name: <code>distance_metadata</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/element/distance_metadata/#distance_metadata-fields","title":"distance_metadata fields","text":"<p>Accessed by <code>distance_metadata.field</code> where field is one of the field names below</p> field default_value data type description ontologyNode_A integerIDs_A ontologyNumericValues_A ontologyStringValues_A ontologyNode_B integerIDs_B ontologyNumericValues_B ontologyStringValues_B units"},{"location":"NDI-matlab/documents/element/distance_metadata/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/element/position_metadata/","title":"position_metadata (ndi.document class)","text":""},{"location":"NDI-matlab/documents/element/position_metadata/#class-definition","title":"Class definition","text":"<p>Class name: position_metadata Short name: position_metadata Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/element/position_metadata.json Schema for validation: $NDISCHEMAPATH/element/position_metadata_schema.json Property_list_name: <code>position_metadata</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/element/position_metadata/#position_metadata-fields","title":"position_metadata fields","text":"<p>Accessed by <code>position_metadata.field</code> where field is one of the field names below</p> field default_value data type description ontologyNode dimensions units"},{"location":"NDI-matlab/documents/element/position_metadata/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/ingestion/daqmetadatareader_epochdata_ingested/","title":"daqmetadatareader_epochdata_ingested (ndi.document class)","text":""},{"location":"NDI-matlab/documents/ingestion/daqmetadatareader_epochdata_ingested/#class-definition","title":"Class definition","text":"<p>Class name: daqmetadatareader_epochdata_ingested Short name: daqmetadatareader_epochdata_ingested Superclasses: base, epochid</p> <p>Definition: $NDIDOCUMENTPATH/ingestion/daqmetadatareader_epochdata_ingested.json Schema for validation: $NDISCHEMAPATH/ingestion/daqmetadatareader_epochdata_ingested_schema.json Property_list_name: <code>daqmetadatareader_epochdata_ingested</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/ingestion/daqmetadatareader_epochdata_ingested/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/ingestion/daqmetadatareader_epochdata_ingested/#epochid-fields","title":"epochid fields","text":"<p>Accessed by <code>epochid.field</code> where field is one of the field names below</p> field default_value data type description epochid"},{"location":"NDI-matlab/documents/ingestion/daqreader_epochdata_ingested/","title":"daqreader_epochdata_ingested (ndi.document class)","text":""},{"location":"NDI-matlab/documents/ingestion/daqreader_epochdata_ingested/#class-definition","title":"Class definition","text":"<p>Class name: daqreader_epochdata_ingested Short name: daqreader_epochdata_ingested Superclasses: base, epochid</p> <p>Definition: $NDIDOCUMENTPATH/ingestion/daqreader_epochdata_ingested.json Schema for validation: $NDISCHEMAPATH/ingestion/daqreader_epochdata_ingested_schema.json Property_list_name: <code>daqreader_epochdata_ingested</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/ingestion/daqreader_epochdata_ingested/#daqreader_epochdata_ingested-fields","title":"daqreader_epochdata_ingested fields","text":"<p>Accessed by <code>daqreader_epochdata_ingested.field</code> where field is one of the field names below</p> field default_value data type description epochtable"},{"location":"NDI-matlab/documents/ingestion/daqreader_epochdata_ingested/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/ingestion/daqreader_epochdata_ingested/#epochid-fields","title":"epochid fields","text":"<p>Accessed by <code>epochid.field</code> where field is one of the field names below</p> field default_value data type description epochid"},{"location":"NDI-matlab/documents/ingestion/daqreader_mfdaq_epochdata_ingested/","title":"daqreader_mfdaq_epochdata_ingested (ndi.document class)","text":""},{"location":"NDI-matlab/documents/ingestion/daqreader_mfdaq_epochdata_ingested/#class-definition","title":"Class definition","text":"<p>Class name: daqreader_mfdaq_epochdata_ingested Short name: daqreader_mfdaq_epochdata_ingested Superclasses: base, epochid, daqreader_epochdata_ingested</p> <p>Definition: $NDIDOCUMENTPATH/ingestion/daqreader_mfdaq_epochdata_ingested.json Schema for validation: $NDISCHEMAPATH/ingestion/daqreader_mfdaq_epochdata_ingested_schema.json Property_list_name: <code>daqreader_mfdaq_epochdata_ingested</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/ingestion/daqreader_mfdaq_epochdata_ingested/#daqreader_mfdaq_epochdata_ingested-fields","title":"daqreader_mfdaq_epochdata_ingested fields","text":"<p>Accessed by <code>daqreader_mfdaq_epochdata_ingested.field</code> where field is one of the field names below</p> field default_value data type description parameters"},{"location":"NDI-matlab/documents/ingestion/daqreader_mfdaq_epochdata_ingested/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/ingestion/daqreader_mfdaq_epochdata_ingested/#epochid-fields","title":"epochid fields","text":"<p>Accessed by <code>epochid.field</code> where field is one of the field names below</p> field default_value data type description epochid"},{"location":"NDI-matlab/documents/ingestion/daqreader_mfdaq_epochdata_ingested/#daqreader_epochdata_ingested-fields","title":"daqreader_epochdata_ingested fields","text":"<p>Accessed by <code>daqreader_epochdata_ingested.field</code> where field is one of the field names below</p> field default_value data type description epochtable"},{"location":"NDI-matlab/documents/ingestion/epochfiles_ingested/","title":"epochfiles_ingested (ndi.document class)","text":""},{"location":"NDI-matlab/documents/ingestion/epochfiles_ingested/#class-definition","title":"Class definition","text":"<p>Class name: epochfiles_ingested Short name: epochfiles_ingested Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/ingestion/epochfiles_ingested.json Schema for validation: $NDISCHEMAPATH/ingestion/epochfiles_ingested_schema.json Property_list_name: <code>epochfiles_ingested</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/ingestion/epochfiles_ingested/#epochfiles_ingested-fields","title":"epochfiles_ingested fields","text":"<p>Accessed by <code>epochfiles_ingested.field</code> where field is one of the field names below</p> field default_value data type description epoch_id files epochprobemap"},{"location":"NDI-matlab/documents/ingestion/epochfiles_ingested/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/ingestion/metadata_editor/","title":"metadata_editor (ndi.document class)","text":""},{"location":"NDI-matlab/documents/ingestion/metadata_editor/#class-definition","title":"Class definition","text":"<p>Class name: metadata_editor Short name: metadata_editor Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/ingestion/metadata_editor.json Schema for validation: $NDISCHEMAPATH/ingestion/metadata_editor_schema.json Property_list_name: <code>metadata_editor</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/ingestion/metadata_editor/#metadata_editor-fields","title":"metadata_editor fields","text":"<p>Accessed by <code>metadata_editor.field</code> where field is one of the field names below</p> field default_value data type description metadata_structure"},{"location":"NDI-matlab/documents/ingestion/metadata_editor/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/ingestion/syncrule_mapping/","title":"syncrule_mapping (ndi.document class)","text":""},{"location":"NDI-matlab/documents/ingestion/syncrule_mapping/#class-definition","title":"Class definition","text":"<p>Class name: syncrule_mapping Short name: syncrule_mapping Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/ingestion/syncrule_mapping.json Schema for validation: $NDISCHEMAPATH/ingestion/syncrule_mapping_schema.json Property_list_name: <code>syncrule_mapping</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/ingestion/syncrule_mapping/#syncrule_mapping-fields","title":"syncrule_mapping fields","text":"<p>Accessed by <code>syncrule_mapping.field</code> where field is one of the field names below</p> field default_value data type description cost mapping epochnode_a epochnode_b"},{"location":"NDI-matlab/documents/ingestion/syncrule_mapping/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/metadata/openminds/","title":"openminds (ndi.document class)","text":""},{"location":"NDI-matlab/documents/metadata/openminds/#class-definition","title":"Class definition","text":"<p>Class name: openminds Short name: openminds Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/metadata/openminds.json Schema for validation: $NDISCHEMAPATH/metadata/openminds.json Property_list_name: <code>openminds</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/metadata/openminds/#openminds-fields","title":"openminds fields","text":"<p>Accessed by <code>openminds.field</code> where field is one of the field names below</p> field default_value data type description openminds_type matlab_type openminds_id fields"},{"location":"NDI-matlab/documents/metadata/openminds/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/metadata/openminds_element/","title":"openminds_element (ndi.document class)","text":""},{"location":"NDI-matlab/documents/metadata/openminds_element/#class-definition","title":"Class definition","text":"<p>Class name: openminds_element Short name: openminds_element Superclasses: base, openminds</p> <p>Definition: $NDIDOCUMENTPATH/metadata/openminds_element.json Schema for validation: $NDISCHEMAPATH/metadata/openminds_element.json Property_list_name: <code>openminds_element</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/metadata/openminds_element/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/metadata/openminds_element/#openminds-fields","title":"openminds fields","text":"<p>Accessed by <code>openminds.field</code> where field is one of the field names below</p> field default_value data type description openminds_type matlab_type openminds_id fields"},{"location":"NDI-matlab/documents/metadata/openminds_stimulus/","title":"openminds_stimulus (ndi.document class)","text":""},{"location":"NDI-matlab/documents/metadata/openminds_stimulus/#class-definition","title":"Class definition","text":"<p>Class name: openminds_stimulus Short name: openminds_stimulus Superclasses: base, epochid, openminds</p> <p>Definition: $NDIDOCUMENTPATH/metadata/openminds_stimulus.json Schema for validation: $NDISCHEMAPATH/metadata/openminds_stimulus.json Property_list_name: <code>openminds_stimulus</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/metadata/openminds_stimulus/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/metadata/openminds_stimulus/#epochid-fields","title":"epochid fields","text":"<p>Accessed by <code>epochid.field</code> where field is one of the field names below</p> field default_value data type description epochid"},{"location":"NDI-matlab/documents/metadata/openminds_stimulus/#openminds-fields","title":"openminds fields","text":"<p>Accessed by <code>openminds.field</code> where field is one of the field names below</p> field default_value data type description openminds_type matlab_type openminds_id fields"},{"location":"NDI-matlab/documents/metadata/openminds_subject/","title":"openminds_subject (ndi.document class)","text":""},{"location":"NDI-matlab/documents/metadata/openminds_subject/#class-definition","title":"Class definition","text":"<p>Class name: openminds_subject Short name: openminds_subject Superclasses: base, openminds</p> <p>Definition: $NDIDOCUMENTPATH/metadata/openminds_subject.json Schema for validation: $NDISCHEMAPATH/metadata/openminds_subject.json Property_list_name: <code>openminds_subject</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/metadata/openminds_subject/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/metadata/openminds_subject/#openminds-fields","title":"openminds fields","text":"<p>Accessed by <code>openminds.field</code> where field is one of the field names below</p> field default_value data type description openminds_type matlab_type openminds_id fields"},{"location":"NDI-matlab/documents/neuron/neuron_extracellular/","title":"neuron_extracellular (ndi.document class)","text":""},{"location":"NDI-matlab/documents/neuron/neuron_extracellular/#class-definition","title":"Class definition","text":"<p>Class name: neuron_extracellular Short name: neuron_extracellular Superclasses: app, base</p> <p>Definition: $NDIDOCUMENTPATH/neuron/neuron_extracellular.json Schema for validation: $NDISCHEMAPATH/neuron/neuron_extracellular_schema.json Property_list_name: <code>neuron_extracellular</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/neuron/neuron_extracellular/#neuron_extracellular-fields","title":"neuron_extracellular fields","text":"<p>Accessed by <code>neuron_extracellular.field</code> where field is one of the field names below</p> field default_value data type description number_of_samples_per_channel number_of_channels mean_waveform waveform_sample_times cluster_index quality_number quality_label"},{"location":"NDI-matlab/documents/neuron/neuron_extracellular/#app-fields","title":"app fields","text":"<p>Accessed by <code>app.field</code> where field is one of the field names below</p> field default_value data type description name version url os os_version interpreter interpreter_version"},{"location":"NDI-matlab/documents/neuron/neuron_extracellular/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/probe/electrode_offset_voltage/","title":"electrode_offset_voltage (ndi.document class)","text":""},{"location":"NDI-matlab/documents/probe/electrode_offset_voltage/#class-definition","title":"Class definition","text":"<p>Class name: electrode_offset_voltage Short name: electrode_offset_voltage Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/probe/electrode_offset_voltage.json Schema for validation: $NDISCHEMAPATH/probe/electrode_offset_voltage_schema.json Property_list_name: <code>electrode_offset_voltage</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/probe/electrode_offset_voltage/#electrode_offset_voltage-fields","title":"electrode_offset_voltage fields","text":"<p>Accessed by <code>electrode_offset_voltage.field</code> where field is one of the field names below</p> field default_value data type description offset temperature"},{"location":"NDI-matlab/documents/probe/electrode_offset_voltage/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/probe/probe_geometry/","title":"probe_geometry (ndi.document class)","text":""},{"location":"NDI-matlab/documents/probe/probe_geometry/#class-definition","title":"Class definition","text":"<p>Class name: probe_geometry Short name: probe_geometry Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/probe/probe_geometry.json Schema for validation: $NDISCHEMAPATH/probe/probe_geometry_schema.json Property_list_name: <code>probe_geometry</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/probe/probe_geometry/#probe_geometry-fields","title":"probe_geometry fields","text":"<p>Accessed by <code>probe_geometry.field</code> where field is one of the field names below</p> field default_value data type description site_locations_leftright site_locations_frontback site_locations_depth shank_id contact_shape contact_shape_width contact_shape_height contact_shape_radius probe_model manufacturer ndim unit has_planar_contour contour_x contour_y"},{"location":"NDI-matlab/documents/probe/probe_geometry/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/probe/probe_location/","title":"probe_location (ndi.document class)","text":""},{"location":"NDI-matlab/documents/probe/probe_location/#class-definition","title":"Class definition","text":"<p>Class name: probe_location Short name: probe_location Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/probe/probe_location.json Schema for validation: $NDISCHEMAPATH/probe/probe_location_schema.json Property_list_name: <code>probe_location</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/probe/probe_location/#probe_location-fields","title":"probe_location fields","text":"<p>Accessed by <code>probe_location.field</code> where field is one of the field names below</p> field default_value data type description ontology_name name"},{"location":"NDI-matlab/documents/probe/probe_location/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/probe/site2channelmap/","title":"site2channelmap (ndi.document class)","text":""},{"location":"NDI-matlab/documents/probe/site2channelmap/#class-definition","title":"Class definition","text":"<p>Class name: site2channelmap Short name: site2channelmap Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/probe/site2channelmap.json Schema for validation: $NDISCHEMAPATH/probe/site2channelmap_schema.json Property_list_name: <code>site2channelmap</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/probe/site2channelmap/#site2channelmap-fields","title":"site2channelmap fields","text":"<p>Accessed by <code>site2channelmap.field</code> where field is one of the field names below</p> field default_value data type description map"},{"location":"NDI-matlab/documents/probe/site2channelmap/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/sorting/SpikeInterfaceSortingOutputs/","title":"SpikeInterfaceSortingOutputs (ndi.document class)","text":""},{"location":"NDI-matlab/documents/sorting/SpikeInterfaceSortingOutputs/#class-definition","title":"Class definition","text":"<p>Class name: SpikeInterfaceSortingOutputs Short name: SpikeInterfaceSortingOutputs Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/sorting/SpikeInterfaceSortingOutputs.json Schema for validation: $NDISCHEMAPATH/sorting/SpikeInterfaceSortingOutputs_schema.json Property_list_name: <code>SpikeInterfaceSortingOutputs</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/sorting/SpikeInterfaceSortingOutputs/#spikeinterfacesortingoutputs-fields","title":"SpikeInterfaceSortingOutputs fields","text":"<p>Accessed by <code>SpikeInterfaceSortingOutputs.field</code> where field is one of the field names below</p> field default_value data type description sorter_name sample_rate unit"},{"location":"NDI-matlab/documents/sorting/SpikeInterfaceSortingOutputs/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/stimulus/control_stimulus_ids/","title":"control_stimulus_ids (ndi.document class)","text":""},{"location":"NDI-matlab/documents/stimulus/control_stimulus_ids/#class-definition","title":"Class definition","text":"<p>Class name: control_stimulus_ids Short name: control_stimulus_ids Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/stimulus/control_stimulus_ids.json Schema for validation: $NDISCHEMAPATH/stimulus/control_stimulus_ids.json Property_list_name: <code>control_stimulus_ids</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/stimulus/control_stimulus_ids/#control_stimulus_ids-fields","title":"control_stimulus_ids fields","text":"<p>Accessed by <code>control_stimulus_ids.field</code> where field is one of the field names below</p> field default_value data type description control_stimulus_ids control_stimulus_id_method"},{"location":"NDI-matlab/documents/stimulus/control_stimulus_ids/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/stimulus/stimulus_bath/","title":"stimulus_bath (ndi.document class)","text":""},{"location":"NDI-matlab/documents/stimulus/stimulus_bath/#class-definition","title":"Class definition","text":"<p>Class name: stimulus_bath Short name: stimulus_bath Superclasses: base, epochid</p> <p>Definition: $NDIDOCUMENTPATH/stimulus/stimulus_bath.json Schema for validation: $NDISCHEMAPATH/stimulus/stimulus_bath_schema.json Property_list_name: <code>stimulus_bath</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/stimulus/stimulus_bath/#stimulus_bath-fields","title":"stimulus_bath fields","text":"<p>Accessed by <code>stimulus_bath.field</code> where field is one of the field names below</p> field default_value data type description location mixture_table"},{"location":"NDI-matlab/documents/stimulus/stimulus_bath/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/stimulus/stimulus_bath/#epochid-fields","title":"epochid fields","text":"<p>Accessed by <code>epochid.field</code> where field is one of the field names below</p> field default_value data type description epochid"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter/","title":"stimulus_parameter (ndi.document class)","text":""},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter/#class-definition","title":"Class definition","text":"<p>Class name: stimulus_parameter Short name: stimulus_parameter Superclasses: base, epochid</p> <p>Definition: $NDIDOCUMENTPATH/stimulus/stimulus_parameter.json Schema for validation: $NDISCHEMAPATH/stimulus/stimulus_parameter_schema.json Property_list_name: <code>stimulus_parameter</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter/#stimulus_parameter-fields","title":"stimulus_parameter fields","text":"<p>Accessed by <code>stimulus_parameter.field</code> where field is one of the field names below</p> field default_value data type description ontology_name name value"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter/#epochid-fields","title":"epochid fields","text":"<p>Accessed by <code>epochid.field</code> where field is one of the field names below</p> field default_value data type description epochid"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter_table/","title":"stimulus_parameter_table (ndi.document class)","text":""},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter_table/#class-definition","title":"Class definition","text":"<p>Class name: stimulus_parameter_table Short name: stimulus_parameter_table Superclasses: base, epochid</p> <p>Definition: $NDIDOCUMENTPATH/stimulus/stimulus_parameter_table.json Schema for validation: $NDISCHEMAPATH/stimulus/stimulus_parameter_table.json Property_list_name: <code>stimulus_parameter_table</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter_table/#stimulus_parameter_table-fields","title":"stimulus_parameter_table fields","text":"<p>Accessed by <code>stimulus_parameter_table.field</code> where field is one of the field names below</p> field default_value data type description string"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter_table/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/stimulus/stimulus_parameter_table/#epochid-fields","title":"epochid fields","text":"<p>Accessed by <code>epochid.field</code> where field is one of the field names below</p> field default_value data type description epochid"},{"location":"NDI-matlab/documents/stimulus/stimulus_presentation/","title":"stimulus_presentation (ndi.document class)","text":""},{"location":"NDI-matlab/documents/stimulus/stimulus_presentation/#class-definition","title":"Class definition","text":"<p>Class name: stimulus_presentation Short name: stimulus_presentation Superclasses: base, epochid</p> <p>Definition: $NDIDOCUMENTPATH/stimulus/stimulus_presentation.json Schema for validation: $NDISCHEMAPATH/stimulus/stimulus_presentation_schema.json Property_list_name: <code>stimulus_presentation</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/stimulus/stimulus_presentation/#stimulus_presentation-fields","title":"stimulus_presentation fields","text":"<p>Accessed by <code>stimulus_presentation.field</code> where field is one of the field names below</p> field default_value data type description presentation_order presentation_time stimuli"},{"location":"NDI-matlab/documents/stimulus/stimulus_presentation/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/stimulus/stimulus_presentation/#epochid-fields","title":"epochid fields","text":"<p>Accessed by <code>epochid.field</code> where field is one of the field names below</p> field default_value data type description epochid"},{"location":"NDI-matlab/documents/stimulus/stimulus_response/","title":"stimulus_response (ndi.document class)","text":""},{"location":"NDI-matlab/documents/stimulus/stimulus_response/#class-definition","title":"Class definition","text":"<p>Class name: stimulus_response Short name: stimulus_response Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/stimulus/stimulus_response.json Schema for validation: $NDISCHEMAPATH/stimulus/stimulus_response_schema.json Property_list_name: <code>stimulus_response</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/stimulus/stimulus_response/#stimulus_response-fields","title":"stimulus_response fields","text":"<p>Accessed by <code>stimulus_response.field</code> where field is one of the field names below</p> field default_value data type description stimulator_epochid element_epochid"},{"location":"NDI-matlab/documents/stimulus/stimulus_response/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar/","title":"stimulus_response_scalar (ndi.document class)","text":""},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar/#class-definition","title":"Class definition","text":"<p>Class name: stimulus_response_scalar Short name: stimulus_response_scalar Superclasses: base, stimulus_response</p> <p>Definition: $NDIDOCUMENTPATH/stimulus/stimulus_response_scalar.json Schema for validation: $NDISCHEMAPATH/stimulus/stimulus_response_scalar_schema.json Property_list_name: <code>stimulus_response_scalar</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar/#stimulus_response_scalar-fields","title":"stimulus_response_scalar fields","text":"<p>Accessed by <code>stimulus_response_scalar.field</code> where field is one of the field names below</p> field default_value data type description response_type responses"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar/#stimulus_response-fields","title":"stimulus_response fields","text":"<p>Accessed by <code>stimulus_response.field</code> where field is one of the field names below</p> field default_value data type description stimulator_epochid element_epochid"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar_parameters/","title":"stimulus_response_scalar_parameters (ndi.document class)","text":""},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar_parameters/#class-definition","title":"Class definition","text":"<p>Class name: stimulus_response_scalar_parameters Short name: stimulus_response_scalar_parameters Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/stimulus/stimulus_response_scalar_parameters.json Schema for validation: $NDISCHEMAPATH/stimulus/stimulus_response_scalar_parameters_schema.json Property_list_name: <code>stimulus_response_scalar_parameters</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar_parameters/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar_parameters_basic/","title":"stimulus_response_scalar_parameters_basic (ndi.document class)","text":""},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar_parameters_basic/#class-definition","title":"Class definition","text":"<p>Class name: stimulus_response_scalar_parameters_basic Short name: stimulus_response_scalar_parameters_basic Superclasses: base, stimulus_response_scalar_parameters</p> <p>Definition: $NDIDOCUMENTPATH/stimulus/stimulus_response_scalar_parameters_basic.json Schema for validation: $NDISCHEMAPATH/stimulus/stimulus_response_scalar_parameters_basic_schema.json Property_list_name: <code>stimulus_response_scalar_parameters_basic</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar_parameters_basic/#stimulus_response_scalar_parameters_basic-fields","title":"stimulus_response_scalar_parameters_basic fields","text":"<p>Accessed by <code>stimulus_response_scalar_parameters_basic.field</code> where field is one of the field names below</p> field default_value data type description temporalfreqfunc freq_response prestimulus_time prestimulus_normalization isspike spiketrain_dt"},{"location":"NDI-matlab/documents/stimulus/stimulus_response_scalar_parameters_basic/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/stimulus/stimulus_tuningcurve/","title":"stimulus_tuningcurve (ndi.document class)","text":""},{"location":"NDI-matlab/documents/stimulus/stimulus_tuningcurve/#class-definition","title":"Class definition","text":"<p>Class name: stimulus_tuningcurve Short name: stimulus_tuningcurve Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/stimulus/stimulus_tuningcurve.json Schema for validation: $NDISCHEMAPATH/stimulus/stimulus_tuningcurve_schema.json Property_list_name: <code>stimulus_tuningcurve</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/stimulus/stimulus_tuningcurve/#stimulus_tuningcurve-fields","title":"stimulus_tuningcurve fields","text":"<p>Accessed by <code>stimulus_tuningcurve.field</code> where field is one of the field names below</p> field default_value data type description independent_variable_label independent_variable_value stimid response_mean response_stddev response_stderr individual_responses_real individual_responses_imaginary stimulus_presentation_number control_stimid control_response_mean control_response_stddev control_response_stderr control_individual_responses_real control_individual_responses_imaginary response_units"},{"location":"NDI-matlab/documents/stimulus/stimulus_tuningcurve/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/stimulus/vision/oridir/orientation_direction_tuning/","title":"orientation_direction_tuning (ndi.document class)","text":""},{"location":"NDI-matlab/documents/stimulus/vision/oridir/orientation_direction_tuning/#class-definition","title":"Class definition","text":"<p>Class name: orientation_direction_tuning Short name: orientation_direction_tuning Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/stimulus/vision/oridir/orientation_direction_tuning.json Schema for validation: $NDISCHEMAPATH/stimulus/vision/oridir/orientation_direction_tuning_schema.json Property_list_name: <code>orientation_direction_tuning</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/stimulus/vision/oridir/orientation_direction_tuning/#orientation_direction_tuning-fields","title":"orientation_direction_tuning fields","text":"<p>Accessed by <code>orientation_direction_tuning.field</code> where field is one of the field names below</p> field default_value data type description properties tuning_curve significance vector fit"},{"location":"NDI-matlab/documents/stimulus/vision/oridir/orientation_direction_tuning/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/treatment/treatment_drug/","title":"treatment_drug (ndi.document class)","text":""},{"location":"NDI-matlab/documents/treatment/treatment_drug/#class-definition","title":"Class definition","text":"<p>Class name: treatment_drug Short name: treatment_drug Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/treatment/treatment_drug.json Schema for validation: $NDISCHEMAPATH/treatment/treatment_drug.json Property_list_name: <code>treatment_drug</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/treatment/treatment_drug/#treatment_drug-fields","title":"treatment_drug fields","text":"<p>Accessed by <code>treatment_drug.field</code> where field is one of the field names below</p> field default_value data type description location_ontologyNode location_name mixture_table administration_onset_time administration_offset_time administration_duration"},{"location":"NDI-matlab/documents/treatment/treatment_drug/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/documents/treatment/virus_injection/","title":"virus_injection (ndi.document class)","text":""},{"location":"NDI-matlab/documents/treatment/virus_injection/#class-definition","title":"Class definition","text":"<p>Class name: virus_injection Short name: virus_injection Superclasses: base</p> <p>Definition: $NDIDOCUMENTPATH/treatment/virus_injection.json Schema for validation: $NDISCHEMAPATH/treatment/virus_injection_schema.json Property_list_name: <code>virus_injection</code> Class_version: <code>1</code></p>"},{"location":"NDI-matlab/documents/treatment/virus_injection/#virus_injection-fields","title":"virus_injection fields","text":"<p>Accessed by <code>virus_injection.field</code> where field is one of the field names below</p> field default_value data type description virus_OntologyName virus_name virusLocation_OntologyName virusLocation_name virus_AdministrationDate virus_AdministrationPND dilution diluent_OntologyName diluent_name"},{"location":"NDI-matlab/documents/treatment/virus_injection/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"NDI-matlab/reference/ndi_toolbox_setup.m/","title":"ndi_toolbox_setup","text":"<pre><code>  1. Check if the user has all the needed toolboxes, and show warning if they do not\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/app.m/","title":"CLASS ndi.app","text":"<pre><code>  ndi.app - create a new ndi.app object\n\n  NDI_APP_OBJ = ndi.app (SESSION)\n\n  Creates a new ndi.app object that operates on the ndi.session\n  object called SESSION.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/app.m/#superclasses","title":"Superclasses","text":"<p>ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/app.m/#properties","title":"Properties","text":"Property Description session the ndi.session object that the app will operate on name the name of the app"},{"location":"NDI-matlab/reference/%2Bndi/app.m/#methods","title":"Methods","text":"Method Description app create a new ndi.app object newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app varappname return the name of the application for use in variable creation version_url return the app version and url"},{"location":"NDI-matlab/reference/%2Bndi/app.m/#methods-help","title":"Methods help","text":"<p>app - create a new ndi.app object</p> <pre><code>NDI_APP_OBJ = ndi.app (SESSION)\n\n  Creates a new ndi.app object that operates on the ndi.session\n  object called SESSION.\n\n    Documentation for ndi.app/app\n       doc ndi.app\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on an app</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ)\n\n  Creates a blank ndi.document object of type 'app'. The 'app.name' field\n  is filled out with the name of NDI_APP_OBJ.VARAPPNAME().\n</code></pre> <p>searchquery - return a search query for an ndi.document related to this app</p> <pre><code>C = SEARCHQUERY(NDI_APP_OBJ)\n\n  Returns a cell array of strings that allow the creation or searching of an\n  ndi.database document for this app with field 'app' that has subfield 'name' equal\n  to the app's VARAPPNAME.\n</code></pre> <p>varappname - return the name of the application for use in variable creation</p> <pre><code>AN = VARAPPNAME(NDI_APP_OBJ)\n\n  Returns the name of the app modified for use as a variable name, either as\n  a Matlab variable or a name in a document.\n</code></pre> <p>version_url - return the app version and url</p> <pre><code>[V, URL] = VERSION_URL(NDI_APP_OBJ)\n\n  Return the version and url for the current app. In the base class,\n  it is assumed that GIT is used and is available from the command line\n  and the version and url are read from the git directory.\n\n  Developers should override this method in their own class if they use a\n  different version control system.\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/cache.m/","title":"CLASS ndi.cache","text":"<pre><code>  NDI.CACHE - Cache class for NDI\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/cache.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/cache.m/#properties","title":"Properties","text":"Property Description maxMemory The maximum memory, in bytes, that can be consumed by an NDI_CACHE before it is emptied replacement_rule The rule to be used to replace entries when memory is exceeded ('FIFO','LIFO','error', etc) table The variable that has the data and metadata for the cache"},{"location":"NDI-matlab/reference/%2Bndi/cache.m/#methods","title":"Methods","text":"Method Description add add data to an NDI.CACHE addlistener addlistener  Add listener for event. bytes memory size of an NDI.CACHE object in bytes cache create a new NDI cache handle clear clear data from an NDI.CACHE delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. freebytes remove the lowest priority entries from the cache to free a certain amount of memory ge &gt;= (GE)   Greater than or equal relation for handles. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lookup retrieve the NDI.CACHE data table corresponding to KEY and TYPE lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. remove remove data from an NDI.CACHE set_replacement_rule set the replacement rule for an NDI_CACHE object"},{"location":"NDI-matlab/reference/%2Bndi/cache.m/#methods-help","title":"Methods help","text":"<p>add - add data to an NDI.CACHE</p> <pre><code>NDI_CACHE_OBJ = ADD(NDI_CACHE_OBJ, KEY, TYPE, DATA, [PRIORITY])\n\n  Adds DATA to the NDI_CACHE_OBJ that is referenced by a KEY and TYPE.\n  If desired, a PRIORITY can be added; items with greatest PRIORITY will be\n  deleted last.\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.cache, matlab.metadata.Property, events\n\nHelp for ndi.cache/addlistener is inherited from superclass handle\n</code></pre> <p>bytes - memory size of an NDI.CACHE object in bytes</p> <pre><code>B = BYTES(NDI_CACHE_OBJ)\n\n  Return the current memory that is occupied by the table of NDI_CACHE_OBJ.\n</code></pre> <p>cache - create a new NDI cache handle</p> <pre><code>NDI_CACHE_OBJ = NDI.CACHE(...)\n\n  Creates a new NDI.CACHE object. Additional arguments can be specified as\n  name value pairs:\n\n  Parameter (default)         | Description\n  ------------------------------------------------------------\n  maxMemory (10e9)            | Max memory for cache, in bytes (10GB default)\n  replacement_rule ('fifo')   | Replacement rule (see NDI_CACHE/SET_REPLACEMENT_RULE\n\n  Note that the cache is not 'secure', any function can query the data added.\n\n  See also: vlt.data.namevaluepair\n\n    Documentation for ndi.cache/cache\n       doc ndi.cache\n</code></pre> <p>clear - clear data from an NDI.CACHE</p> <pre><code>NDI_CACHE_OBJ = CLEAR(NDI_CACHE_OBJ)\n\n  Clears all entries from the NDI.CACHE object NDI_CACHE_OBJ.\n  Also clears all memoized caches (CLEARALLMEMOIZEDCACHES).\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.CACHE, NDI.CACHE/ISVALID, CLEAR\n\nHelp for ndi.cache/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.CACHE, NDI.CACHE/GE, NDI.CACHE/GT, NDI.CACHE/LE, NDI.CACHE/LT, NDI.CACHE/NE\n\nHelp for ndi.cache/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.CACHE\n\nHelp for ndi.cache/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.cache, ndi.cache/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.cache/findprop is inherited from superclass handle\n</code></pre> <p>freebytes - remove the lowest priority entries from the cache to free a certain amount of memory</p> <pre><code>NDI_CACHE_OBJ = FREEBYTES(NDI_CACHE_OBJ, FREEBYTES)\n\n  Remove entries to free at least FREEBYTES memory. Entries will be removed, first by PRIORITY and then by\n  the replacement_rule parameter.\n\n  See also: NDI.CACHE/ADD, NDI.CACHE/SET_REPLACEMENT_RULE\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.CACHE, NDI.CACHE/EQ, NDI.CACHE/GT, NDI.CACHE/LE, NDI.CACHE/LT, NDI.CACHE/NE\n\nHelp for ndi.cache/ge is inherited from superclass handle\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.CACHE, NDI.CACHE/EQ, NDI.CACHE/GE, NDI.CACHE/LE, NDI.CACHE/LT, NDI.CACHE/NE\n\nHelp for ndi.cache/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.CACHE, NDI.CACHE/DELETE\n\nHelp for ndi.cache/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.CACHE, NDI.CACHE/EQ, NDI.CACHE/GE, NDI.CACHE/GT, NDI.CACHE/LT, NDI.CACHE/NE\n\nHelp for ndi.cache/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.cache, matlab.metadata.Property, events\n\nHelp for ndi.cache/listener is inherited from superclass handle\n</code></pre> <p>lookup - retrieve the NDI.CACHE data table corresponding to KEY and TYPE</p> <pre><code>TABLEENTRY = LOOKUP(NDI_CACHE_OBJ, KEY, TYPE)\n\n  Performs a case-sensitive lookup of the NDI_CACHE entry whose key and type\n  match KEY and TYPE. The table entry is returned. The table has fields:\n\n  Fieldname         | Description\n  -----------------------------------------------------\n  key               | The key string\n  type              | The type string\n  timestamp         | The Matlab date stamp (serial date number, see NOW) when data was stored\n  priority          | The priority of maintaining the data (higher is better)\n  bytes             | The size of the data in this entry (bytes)\n  data              | The data stored\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.CACHE, NDI.CACHE/EQ, NDI.CACHE/GE, NDI.CACHE/GT, NDI.CACHE/LE, NDI.CACHE/NE\n\nHelp for ndi.cache/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.CACHE, NDI.CACHE/EQ, NDI.CACHE/GE, NDI.CACHE/GT, NDI.CACHE/LE, NDI.CACHE/LT\n\nHelp for ndi.cache/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.CACHE, NDI.CACHE/ADDLISTENER, NDI.CACHE/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.cache/notify is inherited from superclass handle\n</code></pre> <p>remove - remove data from an NDI.CACHE</p> <pre><code>NDI_CACHE_OBJ = REMOVE(NDI_CACHE_OBJ, KEY, TYPE, ...)\n    or\n  NDI_CACHE_OBJ = REMOVE(NDI_CACHE_OBJ, INDEX, [],  ...)\n\n  Removes the data at table index INDEX or data with KEY and TYPE.\n  INDEX can be a single entry or an array of entries.\n\n  If the data entry to be removed is a handle, the handle\n  will be deleted from memory unless the setting is altered with a NAME/VALUE pair.\n\n  This function can be modified by name/value pairs:\n  Parameter (default)         | Description\n  ----------------------------------------------------------------\n  leavehandle (0)             | If the 'data' field of a cache entry is a handle,\n                              |   leave it in memory.\n\n  See also: vlt.data.namevaluepair\n</code></pre> <p>set_replacement_rule - set the replacement rule for an NDI_CACHE object</p> <pre><code>NDI_CACHE_OBJ = SET_REPLACEMENT_RULE(NDI_CACHE_OBJ, RULE)\n\n  Sets the replacement rule for an NDI.CACHE to be used when a new entry\n  would exceed the allowed memory. The rule may be one of the following strings\n  (case is insensitive and will be stored lower case):\n\n  Rule            | Description\n  ---------------------------------------------------------\n  'fifo'          | First in, first out; discard oldest entries first.\n  'lifo'          | Last in, first out; discard newest entries first.\n  'error'         | Don't discard anything, just produce an error saying cache is full\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/calculator.m/","title":"CLASS ndi.calculator","text":"<pre><code>  CALCULATOR - create an ndi.calculator object\n\n  NDI_CALCULATOR_OBJ = CALCULATOR(SESSION, DOC_TYPE, PATH_TO_DOC_TYPE)\n\n  Creates a new ndi.calculator mini-app for performing\n  a particular calculator. SESSION is the ndi.session object\n  to operate on.\n\n  Classes that override this function should call\n  the creator for ndi.appdoc to record the document type\n  that is used by the ndi.calculator mini-app.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/calculator.m/#superclasses","title":"Superclasses","text":"<p>ndi.app, ndi.documentservice, ndi.app.appdoc, ndi.mock.ctest</p>"},{"location":"NDI-matlab/reference/%2Bndi/calculator.m/#properties","title":"Properties","text":"Property Description fast_start session name doc_types doc_document_types doc_session base_scope"},{"location":"NDI-matlab/reference/%2Bndi/calculator.m/#methods","title":"Methods","text":"Method Description add_appdoc Load data from an application document appdoc_description return documentation for the type of document that is created by this calculator. are_input_parameters_equivalent are two sets of input parameters equivalent? calc_path CALC_PATH return the path to the ndi.calculator object calculate perform calculator and generate an ndi document with the answer calculator create an ndi.calculator object clean_mock_docs remove mock/test documents clear_appdoc remove an ndi.app.appdoc document from a session database compare_mock_docs compare an expected calculation answer with an actual answer default_parameters_query what queries should be used to search for input parameters if none are provided? default_scope default scope types for ndi.mock.ctest object default_search_for_input_parameters default parameters for searching for inputs defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters doc_about return the about information for an NDI calculator docfiletext return the text in the requested documentation file find_appdoc find an ndi.app.appdoc document in the session database generate_mock_docs generate tests for ndi.calc.* objects graphical_edit_calculator create and control a GUI to graphically edit an NDI calculator instance is_valid_dependency_input is a potential dependency input actually valid for this calculator? isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? load_mock_expected_output load expected NDI document answer for a calculation loaddata_appdoc Load data from an application document mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents newdocument return a new database document of type ndi.document based on an app parameter_default return the default parameter code for a given calculator_type parameter_examples return the parameter code examples for a given calculator_type plot provide a diagnostic plot to show the results of the calculator, if appropriate plot_parameters provide a diagnostic plot to show the results of the calculator, if appropriate run run calculator on all possible inputs that match some parameters search_for_calculator_docs search for previous calculators search_for_input_parameters search for valid inputs to the calculator searchquery return a search query for an ndi.document related to this app struct2doc create an ndi.document from an input structure and input parameters test perform a test of an ndi.calculator object varappname return the name of the application for use in variable creation version_url return the app version and url write_mock_expected_output write"},{"location":"NDI-matlab/reference/%2Bndi/calculator.m/#methods-help","title":"Methods help","text":"<p>add_appdoc - Load data from an application document</p> <pre><code>[...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ...\n      APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments])\n\n  Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data\n  specified by APPDOC_STRUCT.  [additional inputs] are used to find or specify the\n  NDI_document in the database. They are passed to the function FIND_APPDOC,\n  so see help FIND_APPDOC for the documentation for each app.\n\n  The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than\n  1 if the document already exists).\n\n  If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is\n  assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it\n  is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT.\n\n  This function also takes a string DOCEXISTSACTION that describes what it should do\n  in the event that the document fitting the [additional inputs] already exists:\n  DOCEXISTACTION value      | Description\n  ----------------------------------------------------------------------------------\n  'Error'                   | An error is generating indicating the document exists.\n  'NoAction'                | The existing document is left alone. The existing ndi.document\n                            |    is returned in DOC.\n  'Replace'                 | Replace the document; note that this deletes all NDI_DOCUMENTS\n                            |    that depend on the original.\n  'ReplaceIfDifferent'      | Conditionally replace the document, but only if the\n                            |    the data structures that define the document are not equal.\n\nHelp for ndi.calculator/add_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>appdoc_description - return documentation for the type of document that is created by this calculator.</p> <pre><code>TEXT = APP_DOC_DESCRIPTION(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n</code></pre> <p>are_input_parameters_equivalent - are two sets of input parameters equivalent?</p> <pre><code>B = ARE_INPUT_PARAMETERS_EQUIVALENT(NDI_CALCULATOR_OBJ, INPUT_PARAMETERS1, INPUT_PARAMETERS2)\n\n  Are two sets of input parameters equivalent? This function is used by\n  SEARCH_FOR_CALCULATOR_DOCS to determine whether potential documents\n  were actually generated by identical input parameters.\n\n  In the base class, the structures are first re-organized so that all one-dimensional\n  substructures are columns and then compared with vlt.data.eqlen(INPUT_PARAMETERS1, INPUT_PARAMETERS2).\n\n  It is necessary to \"columnize\" the substructures because Matlab does not not necessarily preserve that\n  orientation when data is written to or read from JSON.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n</code></pre> <p>calc_path - CALC_PATH return the path to the ndi.calculator object</p> <pre><code>P = CALC_PATH(CTEST_OBJ)\n\n  Return the path of an ndi.calculator object.\n\nHelp for ndi.calculator/calc_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>calculate - perform calculator and generate an ndi document with the answer</p> <pre><code>DOC = CALCULATE(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Perform the calculator and return an ndi.document with the answer.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\n  In the base class, this always returns empty.\n</code></pre> <p>calculator - create an ndi.calculator object</p> <pre><code>NDI_CALCULATOR_OBJ = CALCULATOR(SESSION, DOC_TYPE, PATH_TO_DOC_TYPE)\n\n  Creates a new ndi.calculator mini-app for performing\n  a particular calculator. SESSION is the ndi.session object\n  to operate on.\n\n  Classes that override this function should call\n  the creator for ndi.appdoc to record the document type\n  that is used by the ndi.calculator mini-app.\n\n    Documentation for ndi.calculator/calculator\n       doc ndi.calculator\n</code></pre> <p>clean_mock_docs - remove mock/test documents</p> <pre><code>Help for ndi.calculator/clean_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>clear_appdoc - remove an ndi.app.appdoc document from a session database</p> <pre><code>B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Deletes the app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  B is 1 if the document is found, and 0 otherwise.\n\nHelp for ndi.calculator/clear_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>compare_mock_docs - compare an expected calculation answer with an actual answer</p> <pre><code>[B, ERRORMSG] = COMPARE_MOCK_DOCS(CTEST_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE)\n\n  Given an NDI document with the expected answer to a calculation (EXPECTED_DOC),\n  the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'),\n  this function computes whether the ACTUAL_DOC is within an allowed tolerance of\n  EXPECTED_DOC.\n\n  B is 1 if the differences in the documents are within the tolerance of the class.\n  Otherwise, B is 0.\n  If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance.\n\n  In this abstract class, B is always 1 and ERRORMSG is always an empty string.\n\n  Developer's note: this method should be overridden in each calculator object.\n\nHelp for ndi.calculator/compare_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>default_parameters_query - what queries should be used to search for input parameters if none are provided?</p> <pre><code>QUERY = DEFAULT_PARAMETERS_QUERY(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  When one calls SEARCH_FOR_INPUT_PARAMETERS, it is possible to specify a 'query' structure to\n  select particular documents to be placed into the parameters 'depends_on' specification.\n  If one does not provide any 'query' structure, then the default values here are used.\n\n  The function returns:\n  |-----------------------|----------------------------------------------|\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\n  In the base class, this examines the parameters_specifications for\n  fixed 'depends_on' entries (entries that have both a 'name' and a 'value').\n  If it finds any, it creates a query indicating that the 'depends_on' field\n  must match the specified name and value.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n</code></pre> <p>default_scope - default scope types for ndi.mock.ctest object</p> <pre><code>BASE_SCOPE = ndi.mock.ctest.default_scope();\n\n  Return a default base_scope structure for an ndi.mock.ctest object.\n\nHelp for ndi.calculator.default_scope is inherited from superclass ndi.mock.ctest\n</code></pre> <p>default_search_for_input_parameters - default parameters for searching for inputs</p> <pre><code>PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ)\n\n  Returns a list of the default search parameters for finding appropriate inputs\n  to the calculator.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n</code></pre> <p>defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type</p> <pre><code>APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE)\n\n  Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object.\n\n  In the base class, the blank version of the ndi.document is read in and the\n  default structure is built from the ndi.document's class property list.\n\nHelp for ndi.calculator/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc2struct - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this uses the property info in the ndi.document to load the data structure.\n\nHelp for ndi.calculator/doc2struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc_about - return the about information for an NDI calculator</p> <pre><code>TEXT = DOC_ABOUT(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n</code></pre> <p>docfiletext - return the text in the requested documentation file</p> <pre><code>TEXT = ndi.calculator.docfiletext(CALCULATOR_TYPE, DOC_TYPE)\n\n  Returns the text of the documentation files.\n  CALCULATOR_TYPE should be the full object name of the calculator of interest.\n   (for example: 'ndi.calc.stimulus.tuningcurve' or 'ndi.calc.vis.contrasttuning')\n  DOC_TYPE should be the type of document requested ('general', 'output', 'searching for inputs')\n\n  Example:\n     text = ndi.calculator.docfiletext('ndi.calc.stimulus.tuningcurve','general');\n</code></pre> <p>find_appdoc - find an ndi.app.appdoc document in the session database</p> <pre><code>DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Using search criteria that is supported by [additional inputs], FIND_APPDOC\n  searches the database for the ndi.document object DOC that is\n  described by APPDOC_TYPE.\n\n  DOC is always a cell array of all matching NDI_DOCUMENTs.\n\n  In this superclass, empty is always returned. Subclasses should override\n  this function to search for each document type.\n\n  The documentation for subclasses should be in the overridden function\n  APPDOC_DESCRIPTION.\n\nHelp for ndi.calculator/find_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>generate_mock_docs - generate tests for ndi.calc. objects*</p> <pre><code>[DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(CSTEST_OBJ,...\n     SCOPE, NUMBER_OF_TESTS)\n\n  SCOPE should be one of 'standard', 'low_noise', or 'high_noise'.\n    'standard' performs tests on specific hard-coded inputs.\n    'low_noise' performs tests on specific hard-coded inputs with small amounts\n       of noise added.\n    'high_noise' performs tests on specific hard-coded inputs with large amounts\n       of noise added.\n\n  NUMBER_OF_TESTS is the number of tests to generate.\n\nHelp for ndi.calculator/generate_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>graphical_edit_calculator - create and control a GUI to graphically edit an NDI calculator instance</p> <pre><code>GRAPHICAL_EDIT_CALCULATOR(...)\n\n  Creates and controls a graphical user interface for creating an instance of\n  an ndi.calculator object.\n\n  Usage by the user:\n\n    GRAPHICAL_EDIT_CALCULATOR('command','NEW','type','ndi.calc.TYPE','filename',filename,'name',name)\n       or\n    GRAPHICAL_EDIT_CALCULATOR('command','EDIT','filename',filename)\n</code></pre> <p>is_valid_dependency_input - is a potential dependency input actually valid for this calculator?</p> <pre><code>B = IS_VALID_DEPENDENCY_INPUT(NDI_CALCULATOR_OBJ, NAME, VALUE)\n\n  Tests whether a potential input to a calculator is valid.\n  The potential dependency name is provided in NAME and its ndi.document id is\n  provided in VALUE.\n\n  The base class behavior of this function is simply to return true, but it\n  can be overridden if additional criteria beyond an ndi.query are needed to\n  assess if a document is an appropriate input for the calculator.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n</code></pre> <p>isequal_appdoc_struct - are two APPDOC data structures the same (equal)?</p> <pre><code>B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2)\n\n  Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. This is true if\n  APPDOC_STRUCT2\n  true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is,\n  B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2).\n</code></pre> <p>isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC?</p> <pre><code>[B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT)\n\n  Examines APPDOC_STRUCT and determines whether it is a valid input for creating an\n  ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise.\n\n  In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.'\n\nHelp for ndi.calculator/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>load_mock_expected_output - load expected NDI document answer for a calculation</p> <pre><code>DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N)\n\n  Load the Nth stored ndi.document that contains the expected answer for the\n  Nth standard mock test.\n\nHelp for ndi.calculator/load_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre> <p>loaddata_appdoc - Load data from an application document</p> <pre><code>[...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments])\n\n  Loads the data from app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  In the base class, this always returns empty. This function should be overridden by each\n  subclass.\n\n  The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION.\n\nHelp for ndi.calculator/loaddata_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>mock_expected_filename - file of expected NDI document answer for a calculation</p> <pre><code>FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N)\n\n  Return the filename for the Nth stored ndi.document that contains the expected\n  answer for the Nth standard mock test.\n\nHelp for ndi.calculator/mock_expected_filename is inherited from superclass ndi.mock.ctest\n</code></pre> <p>mock_path - return the path to the stored mock example output documents</p> <pre><code>MP = MOCK_PATH(CTEST_OBJ)\n\n  Returns the path to the mock document example outputs.\n  The returned path ends in a file separator.\n\nHelp for ndi.calculator/mock_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on an app</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ)\n\n  Creates a blank ndi.document object of type 'app'. The 'app.name' field\n  is filled out with the name of NDI_APP_OBJ.VARAPPNAME().\n\nHelp for ndi.calculator/newdocument is inherited from superclass ndi.app\n</code></pre> <p>parameter_default - return the default parameter code for a given calculator_type</p> <pre><code>[CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the default parameter code CONTENTS for a given CALCULATOR_TYPE. CONTENTS is a\n  character string.\n\n  Example:\n    [contents] = ndi.calculator.parameter_default('ndi.calc.stimulus.tuningcurve');\n</code></pre> <p>parameter_examples - return the parameter code examples for a given calculator_type</p> <pre><code>[NAMES, CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the example NAMES and parameter example code CONTENTS for a given CALCULATOR_TYPE.\n\n  NAMES is a cell array of strings with the code example names. CONTENTS is a cell array of strings with\n  the contents of the code examples.\n\n  Example:\n    [names,contents] = ndi.calculator.parameter_examples('ndi.calc.stimulus.tuningcurve');\n</code></pre> <p>plot - provide a diagnostic plot to show the results of the calculator, if appropriate</p> <pre><code>H=PLOT(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a diagnostic plot that can indicate to a reader whether or not\n  the calculator has been performed in a manner that makes sense with\n  its input data. Useful for debugging / validating a calculator.\n\n  This function is intended to be called by external users and code.\n\n  Handles to the figure, the axes, and any objects created are returned in H.\n\n  By default, this plot is made in the current axes.\n\n  This function takes additional input arguments as name/value pairs.\n  See ndi.calculator.plot_parameters for a description of those parameters.\n</code></pre> <p>plot_parameters - provide a diagnostic plot to show the results of the calculator, if appropriate</p> <pre><code>PLOT_PARAMETERS(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a diagnostic plot that can indicate to a reader whether or not\n  the calculator has been performed in a manner that makes sense with\n  its input data. Useful for debugging / validating a calculator.\n\n  By default, this plot is made in the current axes.\n\n  This function takes additional input arguments as name/value pairs:\n  |---------------------------|--------------------------------------|\n  | Parameter (default)       | Description                          |\n  |---------------------------|--------------------------------------|\n  | newfigure (0)             | 0/1 Should we make a new figure?     |\n  | holdstate (0)             | 0/1 Should we preserve the 'hold'    |\n  |                           |   state of the current axes?         |\n  | suppress_x_label (0)      | 0/1 Should we suppress the x label?  |\n  | suppress_y_label (0)      | 0/1 Should we suppress the y label?  |\n  | suppress_z_label (0)      | 0/1 Should we suppress the z label?  |\n  | suppress_title (0)        | 0/1 Should we suppress the title?    |\n  |---------------------------|--------------------------------------|\n</code></pre> <p>run - run calculator on all possible inputs that match some parameters</p> <pre><code>DOCS = RUN(NDI_CALCULATOR_OBJ, DOCEXISTSACTION, PARAMETERS)\n\n  DOCEXISTSACTION can be 'Error', 'NoAction', 'Replace', or 'ReplaceIfDifferent'\n  For calculators, 'ReplaceIfDifferent' is equivalent to 'NoAction' because\n  the input parameters define the calculator.\n\n  This function is primarily intended to be called by external programs and users.\n</code></pre> <p>search_for_calculator_docs - search for previous calculators</p> <pre><code>[DOCS] = SEARCH_FOR_CALCULATOR_DOCS(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Performs a search to find all previously-created calculator\n  documents that this mini-app creates.\n\n  PARAMETERS is a structure with the following fields\n  |------------------------|----------------------------------|\n  | Fieldname              | Description                      |\n  |-----------------------------------------------------------|\n  | input_parameters       | A structure of input parameters  |\n  |                        |  needed by the calculator.       |\n  | depends_on             | A structure with fields 'name'   |\n  |                        |  and 'value' that indicates any  |\n  |                        |  exact matches that should be    |\n  |                        |  satisfied.                      |\n  |------------------------|----------------------------------|\n\n  in the abstract class, this returns empty\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n</code></pre> <p>search_for_input_parameters - search for valid inputs to the calculator</p> <pre><code>PARAMETERS = SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  Identifies all possible sets of specific input PARAMETERS that can be\n  used as inputs to the calculator. PARAMETERS is a cell array of parameter\n  structures with fields 'input_parameters' and 'depends_on'.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\n  PARAMETERS_SPECIFICATION is a structure with the following fields:\n  |----------------------------------------------------------------------|\n  | input_parameters      | A structure of fixed input parameters needed |\n  |                       |   by the calculator. Should not depend on   |\n  |                       |   values in other documents.                 |\n  | depends_on            | A structure with 'name' and 'value' fields   |\n  |                       |   that lists specific inputs that should be  |\n  |                       |   used for the 'depends_on' field in the     |\n  |                       |   PARAMETERS output.                         |\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n</code></pre> <p>searchquery - return a search query for an ndi.document related to this app</p> <pre><code>C = SEARCHQUERY(NDI_APP_OBJ)\n\n  Returns a cell array of strings that allow the creation or searching of an\n  ndi.database document for this app with field 'app' that has subfield 'name' equal\n  to the app's VARAPPNAME.\n\nHelp for ndi.calculator/searchquery is inherited from superclass ndi.app\n</code></pre> <p>struct2doc - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this always returns empty. It must be overridden in subclasses.\n  The documentation for overridden functions should be in the function APPDOC_DESCRIPTION.\n\nHelp for ndi.calculator/struct2doc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>test - perform a test of an ndi.calculator object</p> <pre><code>[B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN)\n\n  Perform tests of the calculator for a certain SCOPE.\n\n  B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons\n    of the expected output of test i and actual output of test j are equal.\n    Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should\n    be 0, although results might be close enough for some comparisons to be\n    equal even if there are no errors. If test indices are\n    specified, B becomes a numel(specific_test_inds) x\n    numel(specific_test_inds) array.\n\n  ERRORMSG{i,j} is any error message given if the comparison between the\n    expected outcome of test i and the actual outcome of test j.\n\n  B_EXPECTED is the result of the comparisons between the expected\n    outcome of test i and the expected outcome of test j. Some tests\n    might have the same expected outcome, which can be useful for\n    interpreting the results in B.\n\n  SCOPE should be one of 'standard', 'low_noise', or 'high_noise'.\n    'standard' performs tests on specific hard-coded inputs.\n    'low_noise' performs tests on specific hard-coded inputs with small amounts\n       of noise added.\n    'high_noise' performs tests on specific hard-coded inputs with large amounts\n       of noise added.\n\n  NUMBER_OF_TESTS indicates the number of tests to perform.\n  PLOT_IT indicates (0/1) whether or not the results should be plotted.\n\n  This function's behavior can be modified by name/value pairs.\n  --------------------------------------------------------------------------------\n  | Parameter (default):     | Description:                                      |\n  |--------------------------|---------------------------------------------------|\n  | specific_test_inds([])   | Should we specify which tests to run?             |\n  |--------------------------|---------------------------------------------------|\n\n  Step 1: generate_mock_docs\n\nHelp for ndi.calculator/test is inherited from superclass ndi.mock.ctest\n</code></pre> <p>varappname - return the name of the application for use in variable creation</p> <pre><code>AN = VARAPPNAME(NDI_APP_OBJ)\n\n  Returns the name of the app modified for use as a variable name, either as\n  a Matlab variable or a name in a document.\n\nHelp for ndi.calculator/varappname is inherited from superclass ndi.app\n</code></pre> <p>version_url - return the app version and url</p> <pre><code>[V, URL] = VERSION_URL(NDI_APP_OBJ)\n\n  Return the version and url for the current app. In the base class,\n  it is assumed that GIT is used and is available from the command line\n  and the version and url are read from the git directory.\n\n  Developers should override this method in their own class if they use a\n  different version control system.\n\nHelp for ndi.calculator/version_url is inherited from superclass ndi.app\n</code></pre> <p>write_mock_expected_output - write</p> <pre><code>B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC)\n\n  Set the expected mock document for mock calculation NUMBER to\n  be the ndi.document DOC.\n\n  This function will not overwrite an existing expected mock document.\n  It must be deleted manually to ensure programmer really wants to overwrite it.\n\nHelp for ndi.calculator/write_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/database.m/","title":"CLASS ndi.database","text":"<pre><code>  A (primarily abstract) database class for NDI that stores and manages virtual documents (NoSQL database)\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/database.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/database.m/#properties","title":"Properties","text":"Property Description path The file system or remote path to the database session_unique_reference The reference string for the database"},{"location":"NDI-matlab/reference/%2Bndi/database.m/#methods","title":"Methods","text":"Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc database create a new ndi.database existbinarydoc check if a binary doc exists for a given document id newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database"},{"location":"NDI-matlab/reference/%2Bndi/database.m/#methods-help","title":"Methods help","text":"<p>add - add an ndi.document to the database at a given path</p> <pre><code>NDI_DATABASE_OBJ = ADD(NDI_DATABASE_OBJ, NDI_DOCUMENT_OBJ, DBPATH, ...)\n\n  Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ.\n\n  This function also accepts name/value pairs that modify its behavior:\n  Parameter (default)      | Description\n  -------------------------------------------------------------------------\n  'Update'  (1)            | If document exists, update it. If 0, an error is\n                           |   generated if a document with the same ID exists\n\n  See also: vlt.data.namevaluepair\n</code></pre> <p>alldocids - return all document unique reference numbers for the database</p> <pre><code>DOCIDS = ALLDOCIDS(NDI_DATABASE_OBJ)\n\n  Return all document unique reference strings as a cell array of strings. If there\n  are no documents, empty is returned.\n</code></pre> <p>clear - remove/delete all records from an ndi.database</p> <pre><code>CLEAR(NDI_DATABASE_OBJ, [AREYOUSURE])\n\n  Removes all documents from the vlt.file.dumbjsondb object.\n\n  Use with care. If AREYOUSURE is 'yes' then the\n  function will proceed. Otherwise, it will not.\n\n  See also: ndi.database/REMOVE\n</code></pre> <p>closebinarydoc - close and unlock an ndi.database.binarydoc</p> <pre><code>[NDI_BINARYDOC_OBJ] = CLOSEBINARYDOC(NDI_DATABASE_OBJ, NDI_BINARYDOC_OBJ)\n\n  Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the\n  database, which is why it is necessary to call this function through the database.\n</code></pre> <p>database - create a new ndi.database</p> <pre><code>NDI_DATABASE_OBJ = ndi.database(PATH, REFERENCE)\n\n  Creates a new ndi.database object with data path PATH\n  and reference REFERENCE.\n\n    Documentation for ndi.database/database\n       doc ndi.database\n</code></pre> <p>existbinarydoc - check if a binary doc exists for a given document id</p> <pre><code>[TF, FILE_PATH] = EXISTBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME)\n\n   Return a boolean flag (TF) indicating if a binary document\n   exists for an ndi.document and, if it exists, the full file\n   path (FILE_PATH) to the file where the binary data is stored.\n</code></pre> <p>newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DATABASE_OBJ [, DOCUMENT_TYPE])\n\n  Creates a new/blank ndi.document document object that can be used with this\n  ndi.database.\n</code></pre> <p>openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id</p> <pre><code>[NDI_BINARYDOC_OBJ] = OPENBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME])\n\n  Return the open ndi.database.binarydoc object and VERSION that corresponds to an ndi.document and\n  the requested version (the latest version is used if the argument is omitted).\n  NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself.\n\n  Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi.database/CLOSEBINARYDOC.\n  The locked nature of the binary doc is a property of the database, not the document, which is why\n  the database is needed.\n</code></pre> <p>read - read an ndi.document from an ndi.database at a given db path</p> <pre><code>NDI_DOCUMENT_OBJ = READ(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID, [VERSION])\n\n  Read the ndi.document object with the document ID specified by NDI_DOCUMENT_ID. If VERSION\n  is provided (an integer) then only the version that is equal to VERSION is returned.\n  Otherwise, the latest version is returned.\n\n  If there is no ndi.document object with that ID, then empty is returned ([]).\n</code></pre> <p>remove - remove a document from an ndi.database</p> <pre><code>NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID)\n      or\n  NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT)\n\n  Removes the ndi.document object with the 'document unique reference' equal\n  to NDI_DOCUMENT_OBJ_ID.\n\n  If an ndi.document is passed, then the NDI_DOCUMENT_ID is extracted using\n  ndi.document/DOC_UNIQUE_ID. If a cell array of ndi.document is passed instead, then\n  all of the documents are removed.\n</code></pre> <p>search - search for an ndi.document from an ndi.database</p> <pre><code>[DOCUMENT_OBJS] = SEARCH(NDI_DATABASE_OBJ, {'PARAM1', VALUE1, 'PARAM2', VALUE2, ... })\n\n  Searches metadata parameters PARAM1, PARAM2, etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ.\n  If VALUEN is a string, then a regular expression is evaluated to determine the match. If VALUEN is not\n  a string, then the items must match exactly.\n  If PARAMN1 begins with a dash, then VALUEN indicates the value of one of these special parameters:\n\n  This function returns a cell array of ndi.document objects. If no documents match the\n  query, then an empty cell array ({}) is returned.\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/dataset.m/","title":"CLASS ndi.dataset","text":"<pre><code>  ndi.dataset - Create a new ndi.dataset object\n\n    NDI_DATASET_OBJ=ndi.dataset(REFERENCE)\n\n  Creates a new ndi.dataset object. The dataset has a unique\n  reference REFERENCE. This class is an abstract class and typically\n  an end user will open a specific subclass such as ndi.dataset.dir.\n\n    ndi.dataset/GETPATH, ndi.dataset/GETREFERENCE\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/dataset.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/dataset.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/dataset.m/#methods","title":"Methods","text":"Method Description add_ingested_session ingets an ndi.session into an ndi.dataset add_linked_session link an ndi.session to an ndi.dataset addlistener addlistener  Add listener for event. database_add Add an ndi.document to an ndi.dataset object database_closebinarydoc close an ndi.database.binarydoc database_existbinarydoc checks if an ndi.database.binarydoc exists for an ndi.document database_openbinarydoc open the ndi.database.binarydoc channel of an ndi.document database_rm Remove an ndi.document with a given document ID from a dataset database_search Search for an ndi.document in a database of an ndi.dataset object dataset Create a new ndi.dataset object delete DELETE   Delete a handle object. document_session DOCUMENT_SESSION return the ndi.session of an ndi.document object in an ndi.dataset eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. getpath Return the path of the dataset gt &gt; (GT)   Greater than relation for handles. id return the identifier of an ndi.dataset object isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. open_session open an ndi.session object from an ndi.dataset reference return the reference string for an ndi.dataset object session_list return the session reference/identifier list for a dataset"},{"location":"NDI-matlab/reference/%2Bndi/dataset.m/#methods-help","title":"Methods help","text":"<p>add_ingested_session - ingets an ndi.session into an ndi.dataset</p> <pre><code>NDI_DATASET_OBJ = ADD_INGESTED_SESSION(NDI_DATASET_OBJ, NDI_SESSION_OBJ)\n\n  Add an ndi.session object to an ndi.dataset, by copying the session\n  documents into the dataset.\n</code></pre> <p>add_linked_session - link an ndi.session to an ndi.dataset</p> <pre><code>NDI_DATASET_OBJ = ADD_LINKED_SESSION(NDI_DATASET_OBJ, NDI_SESSION_OBJ)\n\n  Add an ndi.session object to an ndi.dataset, without ingesting the session\n  into the dataset. Instead, the ndi.session is linked to the dataset, but\n  the session remains where it is.\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.dataset, matlab.metadata.Property, events\n\nHelp for ndi.dataset/addlistener is inherited from superclass handle\n</code></pre> <p>database_add - Add an ndi.document to an ndi.dataset object</p> <pre><code>NDI_DATASET_OBJ = DATABASE_ADD(NDI_DATASET_OBJ, NDI_DOCUMENT_OBJ)\n\n  Adds the ndi.document NDI_DOCUMENT_OBJ to the ndi.dataset NDI_DATASET_OBJ.\n  NDI_DOCUMENT_OBJ can also be a cell array of ndi.document objects, which will\n  all be added in turn.\n\n  If the base.session_id of each NDI_DOCUMENT_OBJ matches one of the sessions\n  in the DATASET, the document will be added to that session. If the base.session_id of\n  the document matches the id of the NDI_DATASET_OBJ, it will be added to the dataset\n  instead of one of the invidiual sessions.\n\n  The database can be queried by calling NDI_DATASET_OBJ/SEARCH\n\n  See also: ndi.dataset/database_search(), ndi.dataset/database_rm()\n</code></pre> <p>database_closebinarydoc - close an ndi.database.binarydoc</p> <pre><code>[NDI_BINARYDOC_OBJ] = DATABASE_CLOSEBINARYDOC(NDI_DATASET_OBJ, NDI_BINARYDOC_OBJ)\n\n  Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the\n  database, which is why it is necessary to call this function through the dataset object.\n</code></pre> <p>database_existbinarydoc - checks if an ndi.database.binarydoc exists for an ndi.document</p> <pre><code>[TF, FILE_PATH] = DATABASE_EXISTBINARYDOC(NDI_DATASET_OBJ, NDI_DOCUMENT_OR_ID, FILENAME)\n\n   Return a boolean flag (TF) indicating if a binary document\n   exists for an ndi.document and, if it exists, the full file\n   path (FILE_PATH) to the file where the binary data is stored.\n</code></pre> <p>database_openbinarydoc - open the ndi.database.binarydoc channel of an ndi.document</p> <pre><code>NDI_BINARYDOC_OBJ = DATABASE_OPENBINARYDOC(NDI_DATASET_OBJ, NDI_DOCUMENT_OR_ID, FILENAME)\n\n   Return the open ndi.database.binarydoc object that corresponds to an ndi.document and\n   NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself.\n   The document is opened for reading only. Document binary streams may not be edited once the\n   document is added to the database.\n\n   Note that this NDI_BINARYDOC_OBJ must be closed with ndi.dataset/CLOSEBINARYDOC.\n</code></pre> <p>database_rm - Remove an ndi.document with a given document ID from a dataset</p> <pre><code>NDI_DATASET_OBJ = DATABASE_RM(NDI_DATASET_OBJ, DOC_UNIQUE_ID)\n    or\n  NDI_DATASET_OBJ = DATABASE_RM(NDI_DATASET_OBJ, DOC)\n\n  Removes an ndi.document with document id DOC_UNIQUE_ID from the\n  NDI_DATASET_OBJ database. In the second form, if an ndi.document or cell array\n  of NDI_DOCUMENTS is passed for DOC, then the document unique ids are retrieved\n  and they are removed in turn.  If DOC/DOC_UNIQUE_ID is empty, no action is\n  taken.\n\n  If the base.session_id of each NDI_DOCUMENT_OBJ matches one of the linked sessions\n  in the DATASET, the document will be removed from the linked session. If the linked\n  session is opened individually, the document will have been removed.\n\n  This function also takes parameters as name/value pairs that modify its behavior:\n  Parameter (default)        | Description\n  --------------------------------------------------------------------------------\n  ErrIfNotFound (false)      | Produce an error if an ID to be deleted is not found.\n\n  See also: ndi.dataset/database_add(), ndi.dataset/database_search()\n</code></pre> <p>database_search - Search for an ndi.document in a database of an ndi.dataset object</p> <pre><code>NDI_DOCUMENT_OBJ = DATABASE_SEARCH(NDI_DATASET_OBJ, SEARCHPARAMETERS)T\n\n  Given search parameters, which is an ndi.query object, the database associated\n  with the ndi.dataset object NDI_DATASET_OBJ is searched.\n\n  Matches are returned in a cell list NDI_DOCUMENT_OBJ.\n\n  See also: ndi.dataset/database_add(), ndi.dataset/database_rm()\n</code></pre> <p>dataset - Create a new ndi.dataset object</p> <pre><code>NDI_DATASET_OBJ=ndi.dataset(REFERENCE)\n\n  Creates a new ndi.dataset object. The dataset has a unique\n  reference REFERENCE. This class is an abstract class and typically\n  an end user will open a specific subclass such as ndi.dataset.dir.\n\n    ndi.dataset/GETPATH, ndi.dataset/GETREFERENCE\n\n    Documentation for ndi.dataset/dataset\n       doc ndi.dataset\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.DATASET, NDI.DATASET/ISVALID, CLEAR\n\nHelp for ndi.dataset/delete is inherited from superclass handle\n</code></pre> <p>document_session - DOCUMENT_SESSION return the ndi.session of an ndi.document object in an ndi.dataset</p> <pre><code>NDI_SESSION_OBJ = DOCUMENT_SESSION(NDI_DATASET_OBJ, NDI_DOCUMENT_OBJ)\n\n  Given an ndi.document, return an open ndi.session object that contains the\n  the document.\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATASET, NDI.DATASET/GE, NDI.DATASET/GT, NDI.DATASET/LE, NDI.DATASET/LT, NDI.DATASET/NE\n\nHelp for ndi.dataset/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATASET\n\nHelp for ndi.dataset/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.dataset, ndi.dataset/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.dataset/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATASET, NDI.DATASET/EQ, NDI.DATASET/GT, NDI.DATASET/LE, NDI.DATASET/LT, NDI.DATASET/NE\n\nHelp for ndi.dataset/ge is inherited from superclass handle\n</code></pre> <p>getpath - Return the path of the dataset</p> <pre><code>P = GETPATH(NDI_DATASET_OBJ)\n\n  Returns the path of an ndi.dataset object.\n\n  The path is some sort of reference to the storage location of\n  the dataset. This might be a URL, or a file directory, depending upon\n  the subclass.\n\n  In the ndi.dataset class, this returns empty.\n\n  See also: ndidataset.\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATASET, NDI.DATASET/EQ, NDI.DATASET/GE, NDI.DATASET/LE, NDI.DATASET/LT, NDI.DATASET/NE\n\nHelp for ndi.dataset/gt is inherited from superclass handle\n</code></pre> <p>id - return the identifier of an ndi.dataset object</p> <pre><code>IDENTIFIER = ID(NDI_DATASET_OBJ)\n\n  Returns the unique identifier of an ndi.dataset object.\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATASET, NDI.DATASET/DELETE\n\nHelp for ndi.dataset/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATASET, NDI.DATASET/EQ, NDI.DATASET/GE, NDI.DATASET/GT, NDI.DATASET/LT, NDI.DATASET/NE\n\nHelp for ndi.dataset/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.dataset, matlab.metadata.Property, events\n\nHelp for ndi.dataset/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATASET, NDI.DATASET/EQ, NDI.DATASET/GE, NDI.DATASET/GT, NDI.DATASET/LE, NDI.DATASET/NE\n\nHelp for ndi.dataset/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATASET, NDI.DATASET/EQ, NDI.DATASET/GE, NDI.DATASET/GT, NDI.DATASET/LE, NDI.DATASET/LT\n\nHelp for ndi.dataset/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATASET, NDI.DATASET/ADDLISTENER, NDI.DATASET/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.dataset/notify is inherited from superclass handle\n</code></pre> <p>open_session - open an ndi.session object from an ndi.dataset</p> <pre><code>NDI_SESSION_OBJ = OPEN_SESSION(NDI_DATASET_OBJ, SESSION_ID)\n\n  Open an ndi.session object with session identifier SESSION_ID that is stored\n  in the ndi.dataset NDI_DATASET_OBJ.\n\n  See also: ndi.session, ndi.dataset/session_list()\n</code></pre> <p>reference - return the reference string for an ndi.dataset object</p> <pre><code>REF_STRING = REFERENCE(NDI_DATASET_OBJ)\n\n  Returns the reference string for an ndi.dataset object. This can be any\n  string, it is not necessarily unique among datasets. The dataset identifier\n  returned by ID is unique.\n\n  See also: ndi.dataset/ID\n</code></pre> <p>session_list - return the session reference/identifier list for a dataset</p> <pre><code>[REF_LIST, ID_LIST] = SESSION_LIST(NDI_DATASET_OBJ)\n\n  Returns information about ndi.session objects contained in an ndi.dataset\n  object NDI_DATASET_OBJ. REF_LIST is a cell array of reference strings, and\n  ID_LIST is a cell array of unique identifier strings. The nth entry of\n  REF_LIST corresponds to the Nth entry of ID_LIST (that is, REF_LIST{n} is the\n  reference that corresponds to the ndi.session with unique identifier ID_LIST{n}.\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/document.m/","title":"CLASS ndi.document","text":"<pre><code> NDI.DOCUMENT - NDI_database storage item, general purpose data and parameter storage\n  The ndi.document datatype for storing results in the ndi.database\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/document.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/document.m/#properties","title":"Properties","text":"Property Description document_properties a struct with the fields for the document"},{"location":"NDI-matlab/reference/%2Bndi/document.m/#methods","title":"Methods","text":"Method Description add_dependency_value_n add a dependency to a named list add_file add a file to a ndi.document current_file_list return the list of files that have been associated with an ndi.document dependency return names and a structure with all dependencies for an ndi.object dependency_value return dependency value given dependency name dependency_value_n return dependency values from list given dependency name doc_class DOC_CLASS what is the document class type of an ndi.document object? doc_isa is an ndi.document a member of a particular document_class? doc_superclass return the document superclasses of an ndi.document object doc_unique_id return the document unique identifier for an ndi.document document create a new ndi.database object eq are two ndi.document objects equal? find_doc_by_id find a doc in an array by ID find_newest find the newest document out an array has_files ndi.document/has_files is a function. id return the document unique identifier for an ndi.document is_in_file_list is a file name in a ndi.document's file list? plus merge two ndi.document objects readblankdefinition read a blank JSON class definitions from a file location string remove_dependency_value_n remove a dependency from a named list remove_file remove file information from a did.document reset_file_info reset the file information parameters for a new did.document session_id return the document session unique identifier for an ndi.document set_dependency_value set the value of a dependency field set_session_id set the session id for an ndi.document object setproperties Set property values of an ndi.document object to_table convert an ndi.document to a table validate 0/1 evaluate whether ndi.document object is valid by its schema"},{"location":"NDI-matlab/reference/%2Bndi/document.m/#methods-help","title":"Methods help","text":"<p>add_dependency_value_n - add a dependency to a named list</p> <pre><code>NDI_DOCUMENT_OBJ = ADD_DEPENDENCY_VALUE_N(NDI_DOCUMENT_OBJ, DEPENDENCY_NAME, VALUE, ...)\n\n  Examines the 'depends_on' field (if it is present) for a given NDI_DOCUMENT_OBJ\n  and adds a dependency name 'dependency_name_(n+1)', where n is the number of entries with\n  the form 'depenency_name_i' that exist presently. If there is no dependency field with that, then\n  an entry is added and i is 1.\n\n  This function accepts name/value pairs that alter its default behavior:\n  Parameter (default)      | Description\n  -----------------------------------------------------------------\n  ErrorIfNotFound (1)      | If 1, generate an error if the entry is\n                           |   not found. Otherwise, generate no error but take no action.\n</code></pre> <p>add_file - add a file to a ndi.document</p> <pre><code>DID_DOCUMENT_OBJ = ADD_FILE(NDI_DOCUMENT_OBJ, NAME, LOCATION, ...)\n\n  Adds a file's information to a ndi.document, for later ingestion into\n  the database. NAME is the name of the file record for the document.\n  LOCATION is a string that identifies the file or URL location on the\n  internet.\n\n  Note: NAME must not include any file separator characters on any\n  platform (':','\\','/') and may not have leading or trailing spaces.\n  Leading or trailing spaces will be trimmed.\n\n  This function accepts name/value pairs that alter its default behavior:\n  Parameter (default)      | Description\n  -----------------------------------------------------------------\n  ingest (1 or 0)          | 0/1 Should the file be copied into the local\n                           |   database by ndi.database.add_doc() ?\n                           |   If LOCATION does not begin with 'http://' or\n                           |   'https://', then ingest is 1 by default.\n                           |   If LOCATION begins with 'http(s)://', then\n                           |   ingest is 0 by default. Note that the file\n                           |   is only copied upon the later call to\n                           |   ndi.database.add_doc(), not at the call to\n                           |   ndi.document.add_file().\n  delete_original (1 or 0) | 0/1 Should we delete the file after ingestion?\n                           |   If LOCATION does not begin with 'http://' or\n                           |   'https://', then delete_original is 1 by default.\n                           |   If LOCATION begins with 'http(s)://', then\n                           |   delete_original is 0 by default. Note that the\n                           |   file is only deleted upon the later call to\n                           |   ndi.database.add_doc(), not at the call to\n                           |   ndi.document.add_file().\n  location_type ('file',   | Can be 'file', 'url' or 'ndicloud'. By default, it \n    'url' or 'ndicloud')   |   is set to 'file' if LOCATION does not begin with\n                           |   'http://', 'https://' or 'ndic://', and 'url' or \n                           |   'ndicloud' otherwise.\n</code></pre> <p>current_file_list - return the list of files that have been associated with an ndi.document</p> <pre><code>FL = CURRENT_FILE_LIST(NDI_DOCUMENT_OBJ)\n\n  Return a cell array of file names that are associated with an ndi.document object.\n\n  This list will be a subset of all files possible to add to the document in\n  ndi_document_obj.document_properties.file.file_list, and only includes files that have actually\n  been added in {ndi_document_obj.document_properties.file.file_info.name}.\n</code></pre> <p>dependency - return names and a structure with all dependencies for an ndi.object</p> <pre><code>[NAMES, DEPEND_STRUCT] = DEPENDENCY(NDI_DOCUMENT_OBJ)\n\n  Returns in the cell array NAMES the 'name' of all 'depends_on' entries in the ndi.document NDI_DOCUMENT_OBJ.\n  Further, this function returns a structure with all 'name' and 'value' entries in DEPEND_STRUCT.\n</code></pre> <p>dependency_value - return dependency value given dependency name</p> <pre><code>D = DEPENDENCY_VALUE(NDI_DOCUMENT_OBJ, DEPENDENCY_NAME, ...)\n\n  Examines the 'depends_on' field (if it is present) for a given NDI_DOCUMENT_OBJ\n  and returns the 'value' associated with the given 'name'. If there is no such\n  field (either 'depends_on' or 'name'), then D is empty and an error is generated.\n\n  This function accepts name/value pairs that alter its default behavior:\n  Parameter (default)      | Description\n  -----------------------------------------------------------------\n  ErrorIfNotFound (1)      | If 1, generate an error if the entry is\n                           |   not found. Otherwise, return empty.\n</code></pre> <p>dependency_value_n - return dependency values from list given dependency name</p> <pre><code>D = DEPENDENCY_VALUE_N(NDI_DOCUMENT_OBJ, DEPENDENCY_NAME, ...)\n\n  Examines the 'depends_on' field (if it is present) for a given NDI_DOCUMENT_OBJ\n  and returns the 'values' associated with the given 'name_i', where i varies from 1 to the\n  maximum number of entries titled 'name_i'. If there is no such field (either\n  'depends_on' or 'name_i'), then D is empty and an error is generated.\n\n  This function accepts name/value pairs that alter its default behavior:\n  Parameter (default)      | Description\n  -----------------------------------------------------------------\n  ErrorIfNotFound (1)      | If 1, generate an error if the entry is\n                           |   not found. Otherwise, return empty.\n</code></pre> <p>doc_class - DOC_CLASS what is the document class type of an ndi.document object?</p> <pre><code>C = DOC_CLASS(NDI_DOCUMENT_OBJ)\n\n  Returns the document class of an ndi.document.\n  (Found at ndi_document_obj.document_properties.document_class.class_name)\n</code></pre> <p>doc_isa - is an ndi.document a member of a particular document_class?</p> <pre><code>B = DOC_ISA(NDI_DOCUMENT_OBJ, DOCUMENT_CLASS)\n\n  Returns 1 if NDI_DOCUMENT_OBJ or one of its superclasses is a match\n  for DOCUMENT_CLASS. Otherwise returns 0.\n</code></pre> <p>doc_superclass - return the document superclasses of an ndi.document object</p> <pre><code>SC = DOC_SUPERCLASS(NDI_DOCUMENT_OBJ)\n\n  Returns the document superclasses of an ndi.document object. SC is a cell\n  array of strings.\n</code></pre> <p>doc_unique_id - return the document unique identifier for an ndi.document</p> <pre><code>UID = DOC_UNIQUE_ID(NDI_DOCUMENT_OBJ)\n\n  Returns the unique id of an ndi.document\n  (Found at NDI_DOCUMENT_OBJ.documentproperties.base.id)\n</code></pre> <p>document - create a new ndi.database object</p> <pre><code>NDI_DOCUMENT_OBJ = ndi.document(DOCUMENT_TYPE, 'PARAM1', VALUE1, ...)\n    or\n  NDI_DOCUMENT_OBJ = ndi.document(MATLAB_STRUCT)\n\n    Documentation for ndi.document/document\n       doc ndi.document\n</code></pre> <p>eq - are two ndi.document objects equal?</p> <pre><code>B = EQ(NDI_DOCUMENT_OBJ1, NDI_DOCUMENT_OBJ2)\n\n  Returns 1 if and only if the objects have identical document_properties.base.id\n  fields.\n</code></pre> <p>find_doc_by_id - find a doc in an array by ID</p> <pre><code>[D,I] = FIND_DOC_BY_ID(DOCARRAY, ID)\n\n  Given a cell array of ndi.document objects and an\n  ID, return the document D that matches and its\n  index I in DOCARRAY.\n\n  If no document matches, empty is returned for D, I.\n</code></pre> <p>find_newest - find the newest document out an array</p> <pre><code>[D,I,T] = FIND_NEWEST(DOCARRAY)\n\n  Find the newest document among an array of ndi.document objects.\n\n  The newest document is returned in D, along with the index I.\n  T is the datestamp of each document as a datetime object.\n</code></pre> <p>has_files - ndi.document/has_files is a function.</p> <pre><code>tf = has_files(ndi_document_obj)\n</code></pre> <p>id - return the document unique identifier for an ndi.document</p> <pre><code>UID = ID (NDI_DOCUMENT_OBJ)\n\n  Returns the unique id of an ndi.document\n  (Found at NDI_DOCUMENT_OBJ.documentproperties.base.id)\n</code></pre> <p>is_in_file_list - is a file name in a ndi.document's file list?</p> <pre><code>[B, MSG, FI_INDEX] = IS_IN_FILE_LIST(NDI_DOCUMENT_OBJ, NAME)\n\n  Is the file NAME a valid named binary file for the ndi.document\n  NDI_DOCUMENT_OBJ? If so, B is 1; else, B is 0.\n\n  A name is a valid name if it appears in NDI_DOCUMENT_OBJ....\n  document_properties.files.file_list or if it is a numbered\n  file with an entry in document_properties.files.file_list\n  as 'filename.ext_#'. (For example, 'filename.ext_1' would\n  be valid if 'filename.ext_# is in the file_list.)\n\n  If the file NAME is not valid, a reason is returned in MSG.\n\n  If it is a valid file NAME, then the index value of NAME\n  in NDI_DOCUMENT_OBJ.DOCUMENT_PROPERTIES.FILES.FILE_INFO is also\n  returned.\n</code></pre> <p>plus - merge two ndi.document objects</p> <pre><code>NDI_DOCUMENT_OBJ_OUT = PLUS(NDI_DOCUMENT_OBJ_A, NDI_DOCUMENT_OBJ_B)\n\n  Merges the ndi.document objects A and B. First, the 'document_class'\n  superclasses are merged. Then, the fields that are in B but are not in A\n  are added to A. The result is returned in NDI_DOCUMENT_OBJ_OUT.\n  Note that any fields that A has that are also in B will be preserved; no elements of\n  those fields of B will be combined with A.\n</code></pre> <p>readblankdefinition - read a blank JSON class definitions from a file location string</p> <pre><code>S = READBLANKDEFINITION(JSONFILELOCATIONSTRING)\n\n  Given a JSONFILELOCATIONSTRING, this function creates a blank document using the JSON definitions.\n\n  A JSONFILELOCATIONSTRING can be:\n     a) a url\n     b) a filename (full path)\n        c) a filename referenced with respect to $NDIDOCUMENTPATH\n\n  See also: DID.DOCUMENT.READJSONFILELOCATION\n</code></pre> <p>remove_dependency_value_n - remove a dependency from a named list</p> <pre><code>NDI_DOCUMENT_OBJ = REMOVE_DEPENDENCY_VALUE_N(NDI_DOCUMENT_OBJ, DEPENDENCY_NAME, VALUE, N, ...)\n\n  Examines the 'depends_on' field (if it is present) for a given NDI_DOCUMENT_OBJ\n  and removes the dependency name 'dependency_name_(n)'.\n\n  This function accepts name/value pairs that alter its default behavior:\n  Parameter (default)      | Description\n  -----------------------------------------------------------------\n  ErrorIfNotFound (1)      | If 1, generate an error if the entry is\n                           |   not found. Otherwise, generate no error but take no action.\n</code></pre> <p>remove_file - remove file information from a did.document</p> <pre><code>DID_DOCUMENT_OBJ = REMOVE_FILE(NDI_DOCUMENT_OBJ, NAME, [LOCATION], ...)\n\n  Removes the file information for a name or a name and location\n  combination from a did.document() object.\n\n  If LOCATION is not specified or is empty, then all locations are removed.\n\n  If NDI_DOCUMENT_OBJ does not have a file NAME in its file_list, then an error is\n  generated.\n\n  This function accepts name/value pairs that alter its default behavior:\n  Parameter (default)      | Description\n  -----------------------------------------------------------------\n  ErrorIfNoFileInfo (0)    | 0/1 If a name is specified and the\n                           |   file info is already empty, should we\n                           |   produce an error?\n</code></pre> <p>reset_file_info - reset the file information parameters for a new did.document</p> <pre><code>NDI_DOCUMENT_OBJ = RESET_FILE_INFO(NDI_DOCUMENT_OBJ)\n\n  Reset (make empty) all file info structures for a new did.document object.\n\n  Sets document_properties.files.file_info to an empty structure\n</code></pre> <p>session_id - return the document session unique identifier for an ndi.document</p> <pre><code>UID = SESSION_ID (NDI_DOCUMENT_OBJ)\n\n  Returns the unique session id of an ndi.document\n  (Found at NDI_DOCUMENT_OBJ.documentproperties.base.session_id)\n</code></pre> <p>set_dependency_value - set the value of a dependency field</p> <pre><code>NDI_DOCUMENT_OBJ = SET_DEPENDENCY_VALUE(NDI_DOCUMENT_OBJ, DEPENDENCY_NAME, VALUE, ...)\n\n  Examines the 'depends_on' field (if it is present) for a given NDI_DOCUMENT_OBJ\n  and, if there is a dependency with a given 'dependency_name', then the value of the\n  dependency is set to DEPENDENCY_VALUE.\n\n  This function accepts name/value pairs that alter its default behavior:\n  Parameter (default)      | Description\n  -----------------------------------------------------------------\n  ErrorIfNotFound (1)      | If 1, generate an error if the entry is\n                           |   not found. Otherwise, add it.\n</code></pre> <p>set_session_id - set the session id for an ndi.document object</p> <pre><code>NDI_DOCUMENT_OBJ = SET_SESSION_ID(NDI_DOCUMENT_OBJ, SESSION_ID)\n\n  Sets the document_properties.base.session_id field to the value indicated.\n</code></pre> <p>setproperties - Set property values of an ndi.document object</p> <pre><code>NDI_DOCUMENT_OBJ = SETPROPERTIES(NDI_DOCUMENT_OBJ, 'PROPERTY1', VALUE1, ...)\n\n  Sets the property values of NDI_DOCUMENT_OBJ.    PROPERTY values should be expressed\n  relative to NDI_DOCUMENT_OBJ.document_properties (see example).\n\n  See also: ndi.document, ndi.document/ndi.document\n\n  Example:\n    mydoc = mydoc.setproperties('base.name','mydoc name');\n</code></pre> <p>to_table - convert an ndi.document to a table</p> <pre><code>T = TO_TABLE(NDI_DOCUMENT_OBJ)\n\n  Convert an ndi.document to a Matlab table.\n\n  Field names are converted to table variable names. If\n  there are substructures, then the variable names\n  have a 'dot' indicating the substructure.\n\n  'depends_on' elements are given their own names.\n  Each dependency has a 'depends_on_NAME' variable name\n  and the value is the dependency value.\n</code></pre> <p>validate - 0/1 evaluate whether ndi.document object is valid by its schema</p> <pre><code>B = VALIDATE(NDI_DOCUMENT_OBJ)\n\n  Checks the fields of the ndi.document object against the schema in\n  NDI_DOCUMENT_OBJ.ndi_core_properties.validation_schema and returns 1\n  if the object is valid and 0 otherwise.\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/documentservice.m/","title":"CLASS ndi.documentservice","text":"<pre><code>  ndi.documentservice - a class of methods that allows objects to interact with ndi.document objects\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/documentservice.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/documentservice.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/documentservice.m/#methods","title":"Methods","text":"Method Description documentservice create an ndi.documentservice object, which is just an abstract class newdocument create a new ndi.document based on information in this object searchquery create a search query to find this object as an ndi.document"},{"location":"NDI-matlab/reference/%2Bndi/documentservice.m/#methods-help","title":"Methods help","text":"<p>documentservice - create an ndi.documentservice object, which is just an abstract class</p> <pre><code>NDI_DOCUMENTSERVICE_OBJ = ndi.documentservice();\n\n    Documentation for ndi.documentservice/documentservice\n       doc ndi.documentservice\n</code></pre> <p>newdocument - create a new ndi.document based on information in this object</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DOCUMENTSERVICE_OBJ)\n\n  Create a new ndi.document based on information in this class.\n\n  The base ndi.documentservice class returns empty.\n</code></pre> <p>searchquery - create a search query to find this object as an ndi.document</p> <pre><code>SQ = SEARCHQUERY(NDI_DOCUMENTSERVICE_OBJ)\n\n  Return a search query that can be used to find this object's representation as an\n  ndi.document.\n\n  The base class ndi.documentservice just returns empty.\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/element.m/","title":"CLASS ndi.element","text":"<pre><code>  ndi.element - define or examine a element in the session\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/element.m/#superclasses","title":"Superclasses","text":"<p>ndi.ido, did.ido, ndi.epoch.epochset, ndi.documentservice, matlab.mixin.Heterogeneous</p>"},{"location":"NDI-matlab/reference/%2Bndi/element.m/#properties","title":"Properties","text":"Property Description session associated ndi_session object name type reference underlying_element does this element depend on underlying element data (epochs)? direct is it direct from the element it underlies, or is it different with its own possibly modified epochs? subject_id ID of the subject that is related to the ndi.element dependencies a structure of name/value pairs of document dependencies (with exception of underlying_element and subject_id) identifier"},{"location":"NDI-matlab/reference/%2Bndi/element.m/#methods","title":"Methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.element cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object element creator for ndi.element elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochsetname the name of the ndi.element object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version newdocument return a new database document of type ndi.document based on a element numepochs Number of epochs of ndi.epoch.epochset resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery return a search query for an ndi.document based on this element t0_t1 underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method)"},{"location":"NDI-matlab/reference/%2Bndi/element.m/#methods-help","title":"Methods help","text":"<p>addepoch - add an epoch to the ndi.element</p> <pre><code>[NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, [ADD_TO_DB], [EPOCHIDS])\n\n  Registers the data for an epoch with the NDI_ELEMENT_OBJ.\n\n  Inputs:\n    NDI_ELEMENT_OBJ: The ndi.element object to modify\n    EPOCHID:       The name of the epoch to add; should match the name of an epoch from the probe\n    EPOCHCLOCK:    The epoch clock; must be a single clock type that matches one of the clock types\n                      of the probe\n    T0_T1:         The starting time and ending time of the existence of information about the ELEMENT on\n                      the probe, in units of the epock clock\n    ADD_TO_DB:     0/1 Should we actually add the epoch document to the database? Default 0.\n    EPOCHIDS:      The epoch ids of the original epochs (used in conjunction with a oneepoch document).\n</code></pre> <p>buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of EPOCHNODES.\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\n  In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with\n  a cost of 1 and a linear mapping rule with shift 1 and offset 0:\n    'utc' -&gt; 'utc'\n    'utc' -&gt; 'approx_utc'\n    'exp_global_time' -&gt; 'exp_global_time'\n    'exp_global_time' -&gt; 'approx_exp_global_time'\n    'dev_global_time' -&gt; 'dev_global_time'\n    'dev_global_time' -&gt; 'approx_dev_global_time'\n\n\n  See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping,\n  ndi.element/EPOCHNODES\n\nHelp for ndi.element/buildepochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>buildepochtable - build the epoch table for an ndi.element</p> <pre><code>ET = BUILDEPOCHTABLE(NDI_ELEMENT_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch (may change)\n  'epoch_id'                | The epoch ID code (will never change once established)\n                            |   This uniquely specifies the epoch (with the session id).\n  'epoch_session_id'           | Session of the epoch\n  'epochprobemap'           | The epochprobemap object from each epoch\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', and 'epoch_id'\n</code></pre> <p>cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache</p> <pre><code>GINFO_BIG = GINFO2CACHE(GINFO_SMALL)\n\nHelp for ndi.element.cache2ginfo is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epoch graph, if it exists and is up-to-date\n  (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ\n  has not changed). If there is no cached version, or if it is not up-to-date,\n  COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date,\n  it is deleted.\n\n  See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH\n\nHelp for ndi.element/cached_epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object</p> <pre><code>[ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epochtable, if it exists, along with its HASHVALUE\n  (a hash number generated from the table). If there is no cached version,\n  ET and HASHVALUE will be empty.\n\nHelp for ndi.element/cached_epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>doc_unique_id - return the document unique reference for an ndi.element object</p> <pre><code>UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ)\n\n  Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated\n  document for the element, then empty is returned.\n</code></pre> <p>element - creator for ndi.element</p> <pre><code>NDI_ELEMENT_OBJ = ndi.element(NDI_SESSION_OBJ, ELEMENT_NAME, ELEMENT_REFERENCE, ...\n         ELEMENT_TYPE, UNDERLYING_EPOCHSET, DIRECT, [SUBJECT_ID], [DEPENDENCIES])\n     or\n  NDI_ELEMENT_OBJ = ndi.element(NDI_SESSION_OBJ, ELEMENT_DOCUMENT)\n\n  Creates an ndi.element object, either from a name and and associated ndi.probe object,\n  or builds the ndi.element in memory from an ndi.document of type 'element'.\n\n  If the UNDERLYING_EPOCHSET has a subject_id, then that subject ID is used for the new\n  element.\n\n    Documentation for ndi.element/element\n       doc ndi.element\n</code></pre> <p>elementstring - Produce a human-readable element string</p> <pre><code>ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ)\n\n  Returns the name as a human-readable string.\n\n  For ndi.element objects, this is the string 'element: ' followed by its name\n</code></pre> <p>epoch2str - convert an epoch number or id to a string</p> <pre><code>S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER)\n\n  Returns the epoch NUMBER in the form of a string. If it is a simple\n  integer, then INT2STR is used to produce a string. If it is an epoch\n  identifier string, then it is returned.\n\nHelp for ndi.element/epoch2str is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_ELEMENT_OBJ, EPOCH_NUMBER)\n\n  Return the clock types available for this epoch.\n\n  The ndi.element class always returns the clock type(s) of the element it is based on\n</code></pre> <p>epochgraph - graph of the mapping and cost of converting time among epochs</p> <pre><code>[COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes).\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\nHelp for ndi.element/epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochid - Get the epoch identifier for a particular epoch</p> <pre><code>ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Returns the epoch identifier string for the epoch EPOCH_NUMBER.\n  If it doesn't exist, it should be created. EPOCH_NUMBER can be\n  a number of an EPOCH ID string.\n\n  The abstract class just queries the EPOCHTABLE.\n  Most classes that manage epochs themselves (ndi.file.navigator,\n  ndi.daq.system) will override this method.\n\nHelp for ndi.element/epochid is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochnodes - return all epoch nodes from an ndi.epoch.epochset object</p> <pre><code>[NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ)\n\n  Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the\n  following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch within the session.\n  'epoch_session_id'           | The ID of the session that contains the epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A SINGLE ndi.time.clocktype entry that describes the clock type of this node.\n  't0_t1'                   | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock'\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_id', and 'epochprobemap'\n  'objectname'              | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no\n                            |   'name' field, then 'unknown' is used.\n  'objectclass'             | The object class name of the NDI_EPOCHSET_OBJ.\n\n  EPOCHNODES are related to EPOCHTABLE entries, except\n     a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains\n        multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids\n        in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another.\n     b) EPOCHNODES contain identifying information (objectname and objectclass) to help\n        in identifying the epoch nodes across ndi.epoch.epochset objects.\n\n  UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs.\n\nHelp for ndi.element/epochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochsetname - the name of the ndi.element object, for EPOCHNODES</p> <pre><code>NAME = EPOCHSETNAME(NDI_ELEMENT_OBJ)\n\n  Returns the object name that is used when creating epoch nodes.\n\n  For ndi.element objects, this is ndi.element/ELEMENTSTRING.\n</code></pre> <p>epochtable - Return an epoch table that relates the current object's epochs to underlying epochs</p> <pre><code>[ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch. The number may change as epochs are added and subtracted.\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch.\n  'epoch_session_id'           | The session ID that contains this epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap'\n\n  HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable\n  has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE.\n\n  After it is read from disk once, the ET is stored in memory and is not re-read from disk\n  unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE.\n\nHelp for ndi.element/epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID</p> <pre><code>ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object\n  that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the\n  epoch or the EPOCHID of the epoch.\n\nHelp for ndi.element/epochtableentry is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>eq - are 2 ndi.probe objects equal?</p> <pre><code>Returns 1 if the objects share an object class, session, and probe string.\n</code></pre> <p>getcache - return the NDI_CACHE and key for ndi.element</p> <pre><code>[CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ)\n\n  Returns the CACHE and KEY for the ndi.element object.\n\n  The CACHE is returned from the associated session.\n  The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT.\n\n  See also: ndi.file.navigator\n</code></pre> <p>getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs</p> <pre><code>EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ)\n\n  Produce an array of ndi.epoch objects from the epoch table of this\n  ndi.epoch.epochset object (NDI_EPOCHSET_OBJ).\n\nHelp for ndi.element/getepocharray is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache</p> <pre><code>GINFO_SMALL = GINFO2CACHE(GINFO)\n\nHelp for ndi.element.ginfo2cache is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>id - return the document unique identifier for an ndi.element object</p> <pre><code>UNIQUE_REF = ID(NDI_ELEMENT_OBJ)\n\n  Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated\n  document for the element, then an error is returned.\n</code></pre> <p>issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph?</p> <pre><code>B = ISSYNCGRAPHROOT(NDI_ELEMENT_OBJ)\n\n  This function tells an ndi.time.syncgraph object whether it should continue\n  adding the 'underlying' epochs to the graph, or whether it should stop at this level.\n\n  For ndi.element objects, this returns 0 so that underlying ndi.probe epochs are added.\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.element.isvalid is inherited from superclass did.ido\n</code></pre> <p>load_all_element_docs - load all of the ndi.element objects from an session database</p> <pre><code>ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ)\n\n  Loads the ndi.document that is based on the ndi.element object and any associated\n  epoch documents.\n</code></pre> <p>load_element_doc - load a element doc from the session database</p> <pre><code>ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ)\n\n  Load an ndi.document that is based on the ndi.element object.\n\n  Returns empty if there is no such document.\n</code></pre> <p>loadaddedepochs - load the added epochs from an ndi.element</p> <pre><code>[ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ)\n\n  Load the EPOCHTABLE that consists of added/registered epochs that provide information\n  about the ndi.element.\n</code></pre> <p>matchedepochtable - compare a hash number from an epochtable to the current version</p> <pre><code>B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE)\n\n  Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE.\n  Otherwise, it returns 0.\n\nHelp for ndi.element/matchedepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on a element</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_ELEMENT_OBJ)\n\n  Fill out the fields of an NDI_DOCUMENT_OBJ of type 'element'\n  with the corresponding 'name' and 'type' fields of the element NDI_ELEMENT_OBJ and the\n  'name', 'type', and 'reference' fields of its underlying NDI_PROBE_OBJ.\n  If EPOCHID is provided, then an EPOCHID field is filled out as well\n  in accordance to 'epochid'.\n\n  When the document is created, it is automatically added to the session.\n</code></pre> <p>numepochs - Number of epochs of ndi.epoch.epochset</p> <pre><code>N = NUMEPOCHS(NDI_EPOCHSET_OBJ)\n\n  Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ.\n\n  See also: EPOCHTABLE\n\nHelp for ndi.element/numepochs is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk</p> <pre><code>NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  This function clears the internal cached memory of the epochtable, forcing it to be re-read from\n  disk at the next request.\n\n  See also: ndi.element/EPOCHTABLE\n\nHelp for ndi.element/resetepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>searchquery - return a search query for an ndi.document based on this element</p> <pre><code>SQ = SEARCHQUERY(NDI_ELEMENT_OBJ, [EPOCHID])\n\n  Returns a search query for the fields of an NDI_DOCUMENT_OBJ of type 'element'\n  with the corresponding 'name' and 'type' fields of the element NDI_ELEMENT_OBJ.\n</code></pre> <p>t0_t1 - **</p> <pre><code>T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch\n\n  T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\n  TODO: this must be a bug, it's just self-referential\n</code></pre> <p>underlyingepochnodes - find all the underlying epochnodes of a given epochnode</p> <pre><code>[UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE)\n\n  Traverse the underlying nodes of a given EPOCHNODE until we get to the roots\n  (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1).\n\n  Note that the EPOCHNODE itself is returned as the first 'underlying' node.\n\n  See also: ISSYNCGRAPHROOT\n\nHelp for ndi.element/underlyingepochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.element.unique_id is inherited from superclass did.ido\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/epoch.m/","title":"CLASS ndi.epoch","text":"<pre><code>  EPOCH Class to represent an epoch, with the following properties:\n\n  'epoch_number'            | The number of the epoch. The number may change as epochs are added and subtracted.\n                            |   0 has a special meaning. It means that the epoch_number is unknown.\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch.\n  'epoch_session_id'        | The session ID that contains this epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | An array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates the start and stop of the epoch for each\n                            |   respective epoch_clock{}. The time units of t0_t1{i} match epoch_clock{i}.\n  'epochset_object'         | The ndi.epochset object that has the epoch\n  'underlying_epochs'       | An array of the ndi.epoch objects that comprise this epochs.\n  'underlying_files'        | Special case. An ndi.file.navigator underlying epoch has files instead of an epochset_object.\n                            |   These are a cell array of file names. These are empty for most epochset objects.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/epoch.m/#superclasses","title":"Superclasses","text":"<p>handle, matlab.mixin.SetGet</p>"},{"location":"NDI-matlab/reference/%2Bndi/epoch.m/#properties","title":"Properties","text":"Property Description epoch_number epoch_id epoch_session_id epochprobemap epoch_clock t0_t1 epochset_object underlying_epochs underlying_files"},{"location":"NDI-matlab/reference/%2Bndi/epoch.m/#methods","title":"Methods","text":"Method Description addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. epoch create an ndi.epoch object eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. get GET    Get MATLAB object properties. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. mustBeEpochOrEmpty validate that a value is either an ndi.epoch or is empty ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. set SET    Set MATLAB object property values."},{"location":"NDI-matlab/reference/%2Bndi/epoch.m/#methods-help","title":"Methods help","text":"<p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.epoch, matlab.metadata.Property, events\n\nHelp for ndi.epoch/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.EPOCH, NDI.EPOCH/ISVALID, CLEAR\n\nHelp for ndi.epoch/delete is inherited from superclass handle\n</code></pre> <p>epoch - create an ndi.epoch object</p> <pre><code>OBJ = EPOCH(...)\n\n  Create an ndi.epoch() object. The properties must be passed as name/value pairs. One may create\n  an empty epoch providing no inputs; otherwise, one must specify all of the property values.\n\n  'epoch_number'            | The number of the epoch. The number may change as epochs are added and subtracted.\n                            |   0 has a special meaning. It means that the epoch_number is unknown.\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch.\n  'epoch_session_id'        | The session ID that contains this epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | An array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates the start and stop of the epoch\n                            |   for each respective epoch_clock{}. The time units of t0_t1{i} match epoch_clock{i}.\n  'epochset_object'         | The ndi.epochset object that has the epoch\n  'underlying_epochs'       | An array of the ndi.epoch objects that comprise this epochs.\n  'underlying_files'        | A file navigator object's underlying epoch objects is a file list as a cell array. Empty for most types.\n\n    Documentation for ndi.epoch/epoch\n       doc ndi.epoch\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.EPOCH, NDI.EPOCH/GE, NDI.EPOCH/GT, NDI.EPOCH/LE, NDI.EPOCH/LT, NDI.EPOCH/NE\n\nHelp for ndi.epoch/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.EPOCH\n\nHelp for ndi.epoch/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.epoch, ndi.epoch/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.epoch/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.EPOCH, NDI.EPOCH/EQ, NDI.EPOCH/GT, NDI.EPOCH/LE, NDI.EPOCH/LT, NDI.EPOCH/NE\n\nHelp for ndi.epoch/ge is inherited from superclass handle\n</code></pre> <p>get - GET    Get MATLAB object properties.</p> <pre><code>V = GET(H, 'PropertyName') returns the value of the specified\n    property for the MATLAB object with handle H.  If H is an array of  \n    handles, GET returns an M-by-1 cell array of values, where M is equal\n    to length(H). If 'PropertyName' is replaced by a 1-by-N or N-by-1\n    cell array of strings containing property names, GET returns an M-by-N\n    cell array of values.  For non-scalar H, if 'PropertyName' is a \n    dynamic  property, GET returns a value only if the property exists in \n    all objects of the array.\n\n    V = GET(H, 'InexactPropertyName') returns the value of the specified\n    property for the MATLAB object with handle H. GET matches partial and \n    case-insensitive names that are not ambiguous. Inexact name matching \n    applies only to class properties. Dynamic properties require exact name matches.\n\n    V = GET(H) returns a structure in which each field name is the name of\n    a user-gettable property of H and each field contains the value of that\n    property.  If H is non-scalar, GET returns a struct array with \n    dimensions M-by-1, where M = numel(H).  If H is non-scalar, GET does \n    not return dynamic properties.\n\n    GET(H) displays the names of all user-gettable properties and their \n    current values for the MATLAB object with handle H.  The class can \n    override the GETDISP method to control how this information is \n    displayed.  H must be scalar.\n\n    See also GET, ndi.epoch, ndi.epoch/GETDISP, HANDLE\n\nHelp for ndi.epoch/get is inherited from superclass matlab.mixin.SetGet\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.EPOCH, NDI.EPOCH/EQ, NDI.EPOCH/GE, NDI.EPOCH/LE, NDI.EPOCH/LT, NDI.EPOCH/NE\n\nHelp for ndi.epoch/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.EPOCH, NDI.EPOCH/DELETE\n\nHelp for ndi.epoch/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.EPOCH, NDI.EPOCH/EQ, NDI.EPOCH/GE, NDI.EPOCH/GT, NDI.EPOCH/LT, NDI.EPOCH/NE\n\nHelp for ndi.epoch/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.epoch, matlab.metadata.Property, events\n\nHelp for ndi.epoch/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.EPOCH, NDI.EPOCH/EQ, NDI.EPOCH/GE, NDI.EPOCH/GT, NDI.EPOCH/LE, NDI.EPOCH/NE\n\nHelp for ndi.epoch/lt is inherited from superclass handle\n</code></pre> <p>mustBeEpochOrEmpty - validate that a value is either an ndi.epoch or is empty</p> <pre><code>Syntax:\n    ndi.epoch.mustBeEpochOrEmpty(value)\n  Inputs: &lt;value&gt;, an input\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.EPOCH, NDI.EPOCH/EQ, NDI.EPOCH/GE, NDI.EPOCH/GT, NDI.EPOCH/LE, NDI.EPOCH/LT\n\nHelp for ndi.epoch/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.EPOCH, NDI.EPOCH/ADDLISTENER, NDI.EPOCH/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.epoch/notify is inherited from superclass handle\n</code></pre> <p>set - SET    Set MATLAB object property values.</p> <pre><code>SET(H,'PropertyName',PropertyValue) sets the value of the specified \n    property for the MATLAB object with handle H.  If H is an array of \n    handles, the specified property's value is set for all objects in H.  \n\n    SET(H,'InexactPropertyName',PropertyValue) sets the value of the specified \n    property for the MATLAB object with handle H. SET matches partial and \n    case-insensitive names that are not ambiguous. Inexact name matching \n    applies only to class properties. Dynamic properties require exact name matches.\n\n    SET(H,'PropertyName1',Value1,'PropertyName2',Value2,...) sets multiple\n    property values with a single statement. \n\n    SET(H,pn,pv) sets the named properties specified in the cell array of\n    strings pn to the corresponding values in the cell array pv for all\n    objects specified in H.  The cell array pn must be 1-by-N, but the cell\n    array pv can be M-by-N where M is equal to length(H), so that each\n    object will be updated with a different set of values for the list of\n    property names contained in pn.\n\n    Given S a structure whose field names are object property names, \n    SET(H,S) sets the properties identified by each field name of S with\n    the values contained in the structure.\n\n    Note that it is permissible to use property/value string pairs, \n    structures, and property/value cell array pairs in the same call to\n    SET.\n\n    A = SET(H, 'PropertyName') returns the possible values for the \n    specified property of the object with handle H.  The returned array\n    is a cell array of possible value strings or an empty cell array if\n    the property does not have a finite set of possible string values.\n\n    SET(H,'PropertyName') displays the possible values for the specified\n    property of object with handle H.\n\n    A = SET(H) returns the names of the user-settable properties and their\n    possible values for the object with handle H.  H must be scalar.  \n    The return value is a  structure whose field names are the names of the\n    user-settable properties of H, and whose values are cell arrays of\n    possible property values or empty cell arrays.\n\n    SET(H) displays the names and possible values for all user-settable\n    properties of scalar object H.  The class can override the SETDISP \n    method to control how this information is displayed. \n\n    See also SET, ndi.epoch, ndi.epoch/SETDISP, HANDLE\n\nHelp for ndi.epoch/set is inherited from superclass matlab.mixin.SetGet\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/filesep.m/","title":"ndi.filesep","text":"<pre><code>  ndi.filesep The file separator for NDI documents\n\n  The ndi.filesep is '/', which may differ from the local user's\n  machine path separator.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/ido.m/","title":"CLASS ndi.ido","text":"<pre><code>  ndi.ido - identifier object class for ndi\n\n  This class creates and retrieves unique identifiers.  The identifier is a hexadecimal string\n   based on both the current date/time and a random number. When identifiers are sorted in\n   alphabetical order, they are also sorted in the order of time of creation.\n\n  **Example**:\n    i = ndi.ido();\n    id = i.id(), % view the id that was created\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/ido.m/#superclasses","title":"Superclasses","text":"<p>did.ido</p>"},{"location":"NDI-matlab/reference/%2Bndi/ido.m/#properties","title":"Properties","text":"Property Description identifier"},{"location":"NDI-matlab/reference/%2Bndi/ido.m/#methods","title":"Methods","text":"Method Description id return the identifier of an DID.IDO object ido identifier object class for ndi isvalid is a unique ID number valid? unique_id Generate a unique ID number for DID databases (Static method)"},{"location":"NDI-matlab/reference/%2Bndi/ido.m/#methods-help","title":"Methods help","text":"<p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.ido/id is inherited from superclass did.ido\n</code></pre> <p>ido - identifier object class for ndi</p> <pre><code>This class creates and retrieves unique identifiers.  The identifier is a hexadecimal string\n   based on both the current date/time and a random number. When identifiers are sorted in\n   alphabetical order, they are also sorted in the order of time of creation.\n\n  **Example**:\n    i = ndi.ido();\n    id = i.id(), % view the id that was created\n\n    Documentation for ndi.ido/ido\n       doc ndi.ido\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.ido.isvalid is inherited from superclass did.ido\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.ido.unique_id is inherited from superclass did.ido\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/neuron.m/","title":"CLASS ndi.neuron","text":"<pre><code>  ndi.neuron - an ndi.element that contains data from a neuron\n\n  An ndi.neuron object is simply an ndi.element.timeseries\n  object that has a different type so that it can be searched easily.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/neuron.m/#superclasses","title":"Superclasses","text":"<p>ndi.element.timeseries, ndi.element, ndi.ido, did.ido, ndi.epoch.epochset, ndi.documentservice, matlab.mixin.Heterogeneous, ndi.time.timeseries</p>"},{"location":"NDI-matlab/reference/%2Bndi/neuron.m/#properties","title":"Properties","text":"Property Description session name type reference underlying_element direct subject_id dependencies identifier"},{"location":"NDI-matlab/reference/%2Bndi/neuron.m/#methods","title":"Methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.element cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochsetname the name of the ndi.element object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version neuron creates an ndi.neuron object newdocument Todo: need docs here numepochs Number of epochs of ndi.epoch.epochset readtimeseries read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery Todo: need docs here t0_t1 times2samples convert from the timeseries time to sample numbers underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method)"},{"location":"NDI-matlab/reference/%2Bndi/neuron.m/#methods-help","title":"Methods help","text":"<p>addepoch - add an epoch to the ndi.element</p> <pre><code>[NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_TIMESERIES_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, TIMEPOINTS, DATAPOINTS)\n\n  Registers the data for an epoch with the NDI_ELEMENT_OBJ.\n\n  Inputs:\n    NDI_ELEMENT_OBJ: The ndi.element object to modify\n    EPOCHID:       The name of the epoch to add; should match the name of an epoch from the probe\n    EPOCHCLOCK:    The epoch clock; must be a single clock type that matches one of the clock types\n                      of the probe\n    T0_T1:         The starting time and ending time of the existence of information about the ELEMENT on\n                      the probe, in units of the epock clock\n    TIMEPOINTS:    the time points to be added to this epoch; can also be the string 'probe' which means the\n                      points are read directly from the probe (must be Tx1). Timepoints must be in the units\n                      of the EPOCHCLOCK.\n    DATAPOINTS:    the data points that accompany each timepoint (must be TxXxY...), or can be 'probe' to\n                      read from the probe\n    EPOCHIDS:      The epoch ids of the original epochs (used in conjunction with a oneepoch document).\n  Outputs:\n     If a second output is requested in EPOCHDOC, then the DOC is NOT added to the database\n\nHelp for ndi.neuron/addepoch is inherited from superclass ndi.element.timeseries\n</code></pre> <p>buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of EPOCHNODES.\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\n  In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with\n  a cost of 1 and a linear mapping rule with shift 1 and offset 0:\n    'utc' -&gt; 'utc'\n    'utc' -&gt; 'approx_utc'\n    'exp_global_time' -&gt; 'exp_global_time'\n    'exp_global_time' -&gt; 'approx_exp_global_time'\n    'dev_global_time' -&gt; 'dev_global_time'\n    'dev_global_time' -&gt; 'approx_dev_global_time'\n\n\n  See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping,\n  ndi.neuron/EPOCHNODES\n\nHelp for ndi.neuron/buildepochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>buildepochtable - build the epoch table for an ndi.element</p> <pre><code>ET = BUILDEPOCHTABLE(NDI_ELEMENT_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch (may change)\n  'epoch_id'                | The epoch ID code (will never change once established)\n                            |   This uniquely specifies the epoch (with the session id).\n  'epoch_session_id'           | Session of the epoch\n  'epochprobemap'           | The epochprobemap object from each epoch\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', and 'epoch_id'\n\nHelp for ndi.neuron/buildepochtable is inherited from superclass ndi.element\n</code></pre> <p>cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache</p> <pre><code>GINFO_BIG = GINFO2CACHE(GINFO_SMALL)\n\nHelp for ndi.neuron.cache2ginfo is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epoch graph, if it exists and is up-to-date\n  (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ\n  has not changed). If there is no cached version, or if it is not up-to-date,\n  COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date,\n  it is deleted.\n\n  See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH\n\nHelp for ndi.neuron/cached_epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object</p> <pre><code>[ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epochtable, if it exists, along with its HASHVALUE\n  (a hash number generated from the table). If there is no cached version,\n  ET and HASHVALUE will be empty.\n\nHelp for ndi.neuron/cached_epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>doc_unique_id - return the document unique reference for an ndi.element object</p> <pre><code>UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ)\n\n  Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated\n  document for the element, then empty is returned.\n\nHelp for ndi.neuron/doc_unique_id is inherited from superclass ndi.element\n</code></pre> <p>elementstring - Produce a human-readable element string</p> <pre><code>ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ)\n\n  Returns the name as a human-readable string.\n\n  For ndi.element objects, this is the string 'element: ' followed by its name\n\nHelp for ndi.neuron/elementstring is inherited from superclass ndi.element\n</code></pre> <p>epoch2str - convert an epoch number or id to a string</p> <pre><code>S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER)\n\n  Returns the epoch NUMBER in the form of a string. If it is a simple\n  integer, then INT2STR is used to produce a string. If it is an epoch\n  identifier string, then it is returned.\n\nHelp for ndi.neuron/epoch2str is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_ELEMENT_OBJ, EPOCH_NUMBER)\n\n  Return the clock types available for this epoch.\n\n  The ndi.element class always returns the clock type(s) of the element it is based on\n\nHelp for ndi.neuron/epochclock is inherited from superclass ndi.element\n</code></pre> <p>epochgraph - graph of the mapping and cost of converting time among epochs</p> <pre><code>[COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes).\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\nHelp for ndi.neuron/epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochid - Get the epoch identifier for a particular epoch</p> <pre><code>ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Returns the epoch identifier string for the epoch EPOCH_NUMBER.\n  If it doesn't exist, it should be created. EPOCH_NUMBER can be\n  a number of an EPOCH ID string.\n\n  The abstract class just queries the EPOCHTABLE.\n  Most classes that manage epochs themselves (ndi.file.navigator,\n  ndi.daq.system) will override this method.\n\nHelp for ndi.neuron/epochid is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochnodes - return all epoch nodes from an ndi.epoch.epochset object</p> <pre><code>[NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ)\n\n  Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the\n  following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch within the session.\n  'epoch_session_id'           | The ID of the session that contains the epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A SINGLE ndi.time.clocktype entry that describes the clock type of this node.\n  't0_t1'                   | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock'\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_id', and 'epochprobemap'\n  'objectname'              | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no\n                            |   'name' field, then 'unknown' is used.\n  'objectclass'             | The object class name of the NDI_EPOCHSET_OBJ.\n\n  EPOCHNODES are related to EPOCHTABLE entries, except\n     a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains\n        multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids\n        in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another.\n     b) EPOCHNODES contain identifying information (objectname and objectclass) to help\n        in identifying the epoch nodes across ndi.epoch.epochset objects.\n\n  UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs.\n\nHelp for ndi.neuron/epochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochsetname - the name of the ndi.element object, for EPOCHNODES</p> <pre><code>NAME = EPOCHSETNAME(NDI_ELEMENT_OBJ)\n\n  Returns the object name that is used when creating epoch nodes.\n\n  For ndi.element objects, this is ndi.element/ELEMENTSTRING.\n\nHelp for ndi.neuron/epochsetname is inherited from superclass ndi.element\n</code></pre> <p>epochtable - Return an epoch table that relates the current object's epochs to underlying epochs</p> <pre><code>[ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch. The number may change as epochs are added and subtracted.\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch.\n  'epoch_session_id'           | The session ID that contains this epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap'\n\n  HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable\n  has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE.\n\n  After it is read from disk once, the ET is stored in memory and is not re-read from disk\n  unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE.\n\nHelp for ndi.neuron/epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID</p> <pre><code>ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object\n  that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the\n  epoch or the EPOCHID of the epoch.\n\nHelp for ndi.neuron/epochtableentry is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>eq - are 2 ndi.probe objects equal?</p> <pre><code>Returns 1 if the objects share an object class, session, and probe string.\n\nHelp for ndi.neuron/eq is inherited from superclass ndi.element\n</code></pre> <p>getcache - return the NDI_CACHE and key for ndi.element</p> <pre><code>[CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ)\n\n  Returns the CACHE and KEY for the ndi.element object.\n\n  The CACHE is returned from the associated session.\n  The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT.\n\n  See also: ndi.file.navigator\n\nHelp for ndi.neuron/getcache is inherited from superclass ndi.element\n</code></pre> <p>getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs</p> <pre><code>EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ)\n\n  Produce an array of ndi.epoch objects from the epoch table of this\n  ndi.epoch.epochset object (NDI_EPOCHSET_OBJ).\n\nHelp for ndi.neuron/getepocharray is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache</p> <pre><code>GINFO_SMALL = GINFO2CACHE(GINFO)\n\nHelp for ndi.neuron.ginfo2cache is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>id - return the document unique identifier for an ndi.element object</p> <pre><code>UNIQUE_REF = ID(NDI_ELEMENT_OBJ)\n\n  Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated\n  document for the element, then an error is returned.\n\nHelp for ndi.neuron/id is inherited from superclass ndi.element\n</code></pre> <p>issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph?</p> <pre><code>B = ISSYNCGRAPHROOT(NDI_ELEMENT_OBJ)\n\n  This function tells an ndi.time.syncgraph object whether it should continue\n  adding the 'underlying' epochs to the graph, or whether it should stop at this level.\n\n  For ndi.element objects, this returns 0 so that underlying ndi.probe epochs are added.\n\nHelp for ndi.neuron/issyncgraphroot is inherited from superclass ndi.element\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.neuron.isvalid is inherited from superclass did.ido\n</code></pre> <p>load_all_element_docs - load all of the ndi.element objects from an session database</p> <pre><code>ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ)\n\n  Loads the ndi.document that is based on the ndi.element object and any associated\n  epoch documents.\n\nHelp for ndi.neuron/load_all_element_docs is inherited from superclass ndi.element\n</code></pre> <p>load_element_doc - load a element doc from the session database</p> <pre><code>ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ)\n\n  Load an ndi.document that is based on the ndi.element object.\n\n  Returns empty if there is no such document.\n\nHelp for ndi.neuron/load_element_doc is inherited from superclass ndi.element\n</code></pre> <p>loadaddedepochs - load the added epochs from an ndi.element</p> <pre><code>[ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ)\n\n  Load the EPOCHTABLE that consists of added/registered epochs that provide information\n  about the ndi.element.\n\nHelp for ndi.neuron/loadaddedepochs is inherited from superclass ndi.element\n</code></pre> <p>matchedepochtable - compare a hash number from an epochtable to the current version</p> <pre><code>B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE)\n\n  Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE.\n  Otherwise, it returns 0.\n\nHelp for ndi.neuron/matchedepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>neuron - creates an ndi.neuron object</p> <pre><code>NDI_NEURON_OBJ = ndi.neuron(...)\n\n  This function takes the same input arguments as\n  ndi.element.timeseries.\n\n  See ndi.element.timeseries/timeseries\n\n    Documentation for ndi.neuron/neuron\n       doc ndi.neuron\n</code></pre> <p>newdocument - Todo: need docs here</p> <pre><code>Help for ndi.neuron/newdocument is inherited from superclass ndi.element.timeseries\n</code></pre> <p>numepochs - Number of epochs of ndi.epoch.epochset</p> <pre><code>N = NUMEPOCHS(NDI_EPOCHSET_OBJ)\n\n  Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ.\n\n  See also: EPOCHTABLE\n\nHelp for ndi.neuron/numepochs is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>readtimeseries - read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch</p> <pre><code>[DATA, T, TIMEREF] = READTIMESERIES(NDI_ELEMENT_TIMESERIES_OBJ, TIMEREF_OR_EPOCH, T0, T1)\n\n   Reads timeseries data from an ndi.element.timeseries object. The DATA and time information T that are\n   returned depend on the the specific subclass of ndi.element.timeseries that is called (see READTIMESERIESEPOCH).\n\n   In the base class, this function merely calls the element's probe's READTIMESERIES function.\n   TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the time reference for\n   T0, T1, or it can be a single number, which will indicate the data are to be read from that\n   epoch.\n\n   DATA is the data for the probe.  T is a time structure, in units of TIMEREF if it is an\n   ndi.time.timereference object or in units of the epoch if an epoch is passed.  The TIMEREF is returned.\n\nHelp for ndi.neuron/readtimeseries is inherited from superclass ndi.element.timeseries\n</code></pre> <p>resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk</p> <pre><code>NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  This function clears the internal cached memory of the epochtable, forcing it to be re-read from\n  disk at the next request.\n\n  See also: ndi.neuron/EPOCHTABLE\n\nHelp for ndi.neuron/resetepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>samplerate - return the sample rate of an ndi.time.timeseries object</p> <pre><code>SR = SAMPLERATE(NDI_TIMESERIES_OBJ, EPOCH)\n\n  Returns the sampling rate of a given ndi.time.timeseries object for the epoch\n  EPOCH. EPOCH can be specified as an index or EPOCH_ID.\n\n  If NDI_TIMESERIES_OBJ is not regularly sampled, then -1 is returned.\n\nHelp for ndi.neuron/samplerate is inherited from superclass ndi.time.timeseries\n</code></pre> <p>samples2times - convert from the timeseries time to sample numbers</p> <pre><code>SAMPLES = SAMPLES2TIMES(NDI_TIMESERIES_OBJ, EPOCH, TIMES)\n\n  For a given ndi.time.timeseries object and a recording epoch EPOCH,\n  return the sample index numbers SAMPLE that corresponds to the times TIMES.\n  The first sample in the epoch is 1.\n  The TIMES requested might be out of bounds of the EPOCH; no checking is performed.\n\n  TODO: convert times to dev_local_clock\n\nHelp for ndi.neuron/samples2times is inherited from superclass ndi.time.timeseries\n</code></pre> <p>searchquery - Todo: need docs here</p> <pre><code>Help for ndi.neuron/searchquery is inherited from superclass ndi.element.timeseries\n</code></pre> <p>t0_t1 - **</p> <pre><code>T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch\n\n  T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\n  TODO: this must be a bug, it's just self-referential\n\nHelp for ndi.neuron/t0_t1 is inherited from superclass ndi.element\n</code></pre> <p>times2samples - convert from the timeseries time to sample numbers</p> <pre><code>SAMPLES = TIMES2SAMPLES(NDI_TIMESERIES_OBJ, EPOCH, TIMES)\n\n  For a given ndi.time.timeseries object and a recording epoch EPOCH,\n  return the sample index numbers SAMPLE that corresponds to the times TIMES.\n  The first sample in the epoch is 1.\n  The TIMES requested might be out of bounds of the EPOCH; no checking is performed.\n\nHelp for ndi.neuron/times2samples is inherited from superclass ndi.time.timeseries\n</code></pre> <p>underlyingepochnodes - find all the underlying epochnodes of a given epochnode</p> <pre><code>[UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE)\n\n  Traverse the underlying nodes of a given EPOCHNODE until we get to the roots\n  (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1).\n\n  Note that the EPOCHNODE itself is returned as the first 'underlying' node.\n\n  See also: ISSYNCGRAPHROOT\n\nHelp for ndi.neuron/underlyingepochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.neuron.unique_id is inherited from superclass did.ido\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/ontology.m/","title":"CLASS ndi.ontology","text":"<pre><code>  Location: +ndi/ontology.m\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/ontology.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/ontology.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/ontology.m/#methods","title":"Methods","text":"Method Description clearCache Clears cached ontology list JSON data and NDIC data. getOntologies Returns the ontology details list from JSON cache. getOntologyNameFromPrefix Extracts prefix, maps to ontology name (case-insensitive). getPrefixOntologyMappings Returns the prefix-&gt;ontology mappings from JSON cache. lookup Look up a term in an ontology using a prefixed string. lookupOBOFile Looks up a term in a parsed OBO file. lookupTermOrID Base implementation for looking up a term within a specific ontology instance. ontology Constructor for the base ontology class. performIriLookup PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI. preprocessLookupInput PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions. searchOLSAndPerformIRILookup SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI."},{"location":"NDI-matlab/reference/%2Bndi/ontology.m/#methods-help","title":"Methods help","text":"<p>clearCache - Clears cached ontology list JSON data and NDIC data.</p> <p>getOntologies - Returns the ontology details list from JSON cache.</p> <p>getOntologyNameFromPrefix - Extracts prefix, maps to ontology name (case-insensitive).</p> <pre><code>[...] = ndi.ontology.getOntologyNameFromPrefix(...)\n</code></pre> <p>getPrefixOntologyMappings - Returns the prefix-&gt;ontology mappings from JSON cache.</p> <pre><code>\n</code></pre> <p>lookup - Look up a term in an ontology using a prefixed string.</p> <pre><code>[ID, NAME, PREFIX, DEFINITION, SYNONYMS, SHORTNAME] = ndi.ontology.lookup(LOOKUPSTRING)\n\n    Looks up a term using a prefixed string (e.g., 'CL:0000000', 'OM:metre').\n    It identifies the ontology from the prefix using the mappings in\n    'ontology_list.json', instantiates the specific ndi.ontology.ONTOLOGYNAME\n    class (e.g., ndi.ontology.CL), and calls its lookupTermOrID instance method,\n    passing the remainder of the string (after the prefix).\n\n    Outputs:\n      ID           - The canonical identifier for the term.\n      NAME         - The primary name or label for the term.\n      PREFIX       - The ontology prefix used in the lookup.\n      DEFINITION   - A textual definition, if available.\n      SYNONYMS     - A cell array of synonyms, if available.\n      SHORTNAME    - The short name for the term.\n\n    Examples:\n        % Lookup neuron in Cell Ontology by ID\n        [id, name, prefix] = ndi.ontology.lookup('CL:0000540');\n        % Expected: id='CL:0000540', name='neuron', prefix='CL'\n\n        % Lookup ethanol in ChEBI by ID\n        [id, name, prefix] = ndi.ontology.lookup('CHEBI:16236');\n        % Expected: id='CHEBI:16236', name='ethanol', prefix='CHEBI'\n\n        % Lookup Heart in NCI Metathesaurus by CUI\n        [id, name, prefix, def] = ndi.ontology.lookup('NCIm:C0018787');\n        % Expected: id='C0018787', name='Heart', prefix='NCIm', def contains definition\n\n        % Lookup Aspirin in PubChem by name\n        [id, name, prefix] = ndi.ontology.lookup('PubChem:Aspirin');\n        % Expected: id='2244', name='aspirin', prefix='PubChem'\n\n        % Lookup Homo sapiens using alternative taxonomy prefix\n        [id, name, prefix] = ndi.ontology.lookup('taxonomy:9606');\n        % Expected: id='9606', name='Homo sapiens', prefix='taxonomy'\n\n        % Example of a failed lookup (non-existent term)\n        try\n            ndi.ontology.lookup('CL:NoSuchTerm');\n        catch ME\n            disp(ME.identifier); % e.g., 'ndi:ontology:lookup_CL:NotFound' or similar\n            disp(ME.message);\n        end\n\n    See also: ndi.ontology.lookupTermOrID (instance method to be overridden)\n</code></pre> <p>lookupOBOFile - Looks up a term in a parsed OBO file.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = ndi.ontology.lookupOBOFile(...\n        OBOFILEPATH, ONTOLOGYPREFIX, TERM_TO_LOOKUP_FRAGMENT)\n\n    Parses an OBO file (if not already cached) and searches for a term.\n    TERM_TO_LOOKUP_FRAGMENT is the part of the term after the prefix\n    (e.g., '0000001' or 'some term name').\n\n    The function caches the parsed OBO data to speed up subsequent lookups\n    for the same file within a MATLAB session. Call ndi.ontology.clearCache()\n    or 'clear functions' to clear this cache.\n\n    Outputs:\n        ID         - The full term ID (e.g., 'EMPTY:0000001').\n        NAME       - The term's primary name.\n        DEFINITION - The term's definition.\n        SYNONYMS   - A cell array of synonym strings (currently basic,\n                     not parsing synonym types).\n\n    Throws:\n        ndi:ontology:lookupOBOFile:FileNotFound\n        ndi:ontology:lookupOBOFile:ParsingError\n        ndi:ontology:lookupOBOFile:InvalidInput\n        ndi:ontology:lookupOBOFile:TermNotFound\n</code></pre> <p>lookupTermOrID - Base implementation for looking up a term within a specific ontology instance.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS, SHORTNAME] = lookupTermOrID(OBJ, TERM_OR_ID_OR_NAME)\n\n    This base class method should be overridden by specific ontology subclasses\n    (e.g., ndi.ontology.CL, ndi.ontology.OM). It defines the standard interface\n    for ontology-specific lookups after the prefix has been removed.\n\n    The TERM_OR_ID_OR_NAME input here is the 'remainder' after the\n    prefix has been stripped by the main static ndi.ontology.lookup function\n    (e.g., '0000000' for CL, 'metre' for OM, 'C0018787' for NCIm).\n\n    This base implementation returns empty values and issues a warning.\n</code></pre> <p>ontology - Constructor for the base ontology class.</p> <pre><code>Does not require arguments. Intended primarily for subclassing.\n\n    Documentation for ndi.ontology/ontology\n       doc ndi.ontology\n</code></pre> <p>performIriLookup - PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI.</p> <pre><code>Used by OLS-based lookup implementations (CL, OM, CHEBI, UBERON).\n    [...] = ndi.ontology.performIriLookup(...)\n</code></pre> <p>preprocessLookupInput - PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions.</p> <pre><code>Handles standard prefix/ID/name logic and OM-specific heuristic.\n    [...] = ndi.ontology.preprocessLookupInput(...)\n</code></pre> <p>searchOLSAndPerformIRILookup - SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI.</p> <pre><code>Handles specific logic for non-exact label searches (needed for OM).\n    [...] = ndi.ontology.searchOLSAndPerformIRILookup(...)\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/pipeline.m/","title":"CLASS ndi.pipeline","text":"<pre><code>  TODO\n  1. Get a calculation type list\n  2. Pipeline edit &amp; run button (edit: ndi.calculator.graphical_edit_calculator, waiting for updates)\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/pipeline.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/pipeline.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/pipeline.m/#methods","title":"Methods","text":"Method Description calculationsToChar edit create and control a GUI to graphically edit a PIPELINE EDITOR instance getCalcFromPipeline getPipelines pipeline TODO pipelineListToChar setDefaultCalc"},{"location":"NDI-matlab/reference/%2Bndi/pipeline.m/#methods-help","title":"Methods help","text":"<p>calculationsToChar - **</p> <pre><code>ndi.pipeline.calculationsToChar - read names of a CALCLIST as a list of strings\n\n  CALCLISTCHAR = ndi.pipeline.calculationsToChar(CALCLIST)\n\n  Input:\n    CALCLIST: a list of calculators\n  Output:\n    CALCLISTCHAR: a list of strings, representing names of calculators in CALCLIST\n</code></pre> <p>edit - create and control a GUI to graphically edit a PIPELINE EDITOR instance</p> <pre><code>ndi.pipeline.edit (...)\n\n  Creates and controls a graphical user interface for creating an instance of\n  an pipeline.editor object.\n\n  Usage by the user:\n\n    S = []; % use an empty session for now\n    ndi.pipeline.edit('command','new','pipelinePath',fullfile(userpath,'tools','NDI-matlab','+ndi','+test','+pipeline','test_pipeline'),'session',S);\n</code></pre> <p>getCalcFromPipeline - **</p> <pre><code>ndi.pipeline.getCalcFromPipeline - read a CALCLIST from PIPELINELIST\n\n  CALCLIST = ndi.pipeline.getCalcFromPipeline(PIPELINELIST, PIPELINE_NAME)\n\n  Input:\n    PIPELINELIST: a list of pipelines\n    PIPELINE_NAME: a name string of a specific pipeline in this pipeline list\n  Output:\n    CALCLIST: a list of calculators\n</code></pre> <p>getPipelines - **</p> <pre><code>ndi.pipeline.getPipelines - read a PIPELINE_LIST from directory READ_DIR\n\n  PIPELINELIST = ndi.pipeline.getPipelines(READ_DIR)\n\n  Input:\n    READ_DIR: a directory where the pipelines are stored as a PIPELINE_LIST\n  Output:\n    PIPELINELIST: a list of pipelines\n</code></pre> <p>pipeline - TODO</p> <pre><code>1. Get a calculation type list\n  2. Pipeline edit &amp; run button (edit: ndi.calculator.graphical_edit_calculator, waiting for updates)\n\n    Documentation for ndi.pipeline/pipeline\n       doc ndi.pipeline\n</code></pre> <p>pipelineListToChar - **</p> <pre><code>ndi.pipeline.pipelineListToChar - read names of a PIPELINELIST as a list of strings\n\n  PIPELINELISTCHAR = ndi.pipeline.pipelineListToChar(PIPELINELIST)\n\n  Input:\n    PIPELINELIST: a list of pipelines\n  Output:\n    PIPELINELISTCHAR: a list of strings, representing names of pipelines in PIPELINELIST\n</code></pre> <p>setDefaultCalc - **</p> <pre><code>ndi.pipeline.setDefaultCalc - set default parameters for a new calculator\n\n  NEWCALC = ndi.pipeline.setDefaultCalc(CALCULATOR, NAME)\n\n  Input\n    CALCULATOR: a type of calculator (EXAMPLE: ndi.calc.stimulus.tuningcurve)\n    NAME: a name string of calculator\n  Output:\n    NEWCALC: a new calculator created by this function\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/probe.m/","title":"CLASS ndi.probe","text":"<pre><code>  ndi.probe - the base class for PROBES -- measurement or stimulation devices\n\n  In NDI, a PROBE is an instance of an instrument that can be used to MEASURE\n  or to STIMULATE.\n\n  Typically, a probe is associated with an ndi.daq.system that performs data acquisition or\n  even control of a stimulator.\n\n  A probe is uniquely identified by 3 fields and an session:\n     session- the session where the probe is used\n     name      - the name of the probe\n     reference - the reference number of the probe\n     type      - the type of probe (see type ndi.fun.probetype2objectinit)\n\n  Examples:\n     A multichannel extracellular electrode might be named 'extra', have a reference of 1, and\n     a type of 'n-trode'.\n\n     If the electrode is moved, one should change the name or the reference to indicate that\n     the data should not be attempted to be combined across the two positions. One might change\n     the reference number to 2.\n\n  How to make a probe:\n     (Talk about epochprobemap records of devices, probes are created from these elements.)\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/probe.m/#superclasses","title":"Superclasses","text":"<p>ndi.element, ndi.ido, did.ido, ndi.epoch.epochset, ndi.documentservice, matlab.mixin.Heterogeneous</p>"},{"location":"NDI-matlab/reference/%2Bndi/probe.m/#properties","title":"Properties","text":"Property Description session name type reference underlying_element direct subject_id dependencies identifier"},{"location":"NDI-matlab/reference/%2Bndi/probe.m/#methods","title":"Methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version newdocument return a new database document of type ndi.document based on a element numepochs Number of epochs of ndi.epoch.epochset probe create a new ndi.probe object probestring Produce a human-readable probe string resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery return a search query for an ndi.document based on this element t0_t1 underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method)"},{"location":"NDI-matlab/reference/%2Bndi/probe.m/#methods-help","title":"Methods help","text":"<p>addepoch - add an epoch to the ndi.element</p> <pre><code>[NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, [ADD_TO_DB], [EPOCHIDS])\n\n  Registers the data for an epoch with the NDI_ELEMENT_OBJ.\n\n  Inputs:\n    NDI_ELEMENT_OBJ: The ndi.element object to modify\n    EPOCHID:       The name of the epoch to add; should match the name of an epoch from the probe\n    EPOCHCLOCK:    The epoch clock; must be a single clock type that matches one of the clock types\n                      of the probe\n    T0_T1:         The starting time and ending time of the existence of information about the ELEMENT on\n                      the probe, in units of the epock clock\n    ADD_TO_DB:     0/1 Should we actually add the epoch document to the database? Default 0.\n    EPOCHIDS:      The epoch ids of the original epochs (used in conjunction with a oneepoch document).\n\nHelp for ndi.probe/addepoch is inherited from superclass ndi.element\n</code></pre> <p>buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of EPOCHNODES.\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\n  In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with\n  a cost of 1 and a linear mapping rule with shift 1 and offset 0:\n    'utc' -&gt; 'utc'\n    'utc' -&gt; 'approx_utc'\n    'exp_global_time' -&gt; 'exp_global_time'\n    'exp_global_time' -&gt; 'approx_exp_global_time'\n    'dev_global_time' -&gt; 'dev_global_time'\n    'dev_global_time' -&gt; 'approx_dev_global_time'\n\n\n  See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping,\n  ndi.probe/EPOCHNODES\n\nHelp for ndi.probe/buildepochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>buildepochtable - build the epoch table for an ndi.probe.*</p> <pre><code>ET = BUILDEPOCHTABLE(NDI_PROBE_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch (may change)\n  'epoch_id'                | The epoch ID code (will never change once established)\n                            |   This uniquely specifies the epoch.\n  'epoch_session_id'           | The ID of the session\n  'epochprobemap'           | The epochprobemap object from each epoch\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', and 'epoch_id'\n</code></pre> <p>cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache</p> <pre><code>GINFO_BIG = GINFO2CACHE(GINFO_SMALL)\n\nHelp for ndi.probe.cache2ginfo is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epoch graph, if it exists and is up-to-date\n  (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ\n  has not changed). If there is no cached version, or if it is not up-to-date,\n  COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date,\n  it is deleted.\n\n  See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH\n\nHelp for ndi.probe/cached_epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object</p> <pre><code>[ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epochtable, if it exists, along with its HASHVALUE\n  (a hash number generated from the table). If there is no cached version,\n  ET and HASHVALUE will be empty.\n\nHelp for ndi.probe/cached_epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>doc_unique_id - return the document unique reference for an ndi.element object</p> <pre><code>UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ)\n\n  Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated\n  document for the element, then empty is returned.\n\nHelp for ndi.probe/doc_unique_id is inherited from superclass ndi.element\n</code></pre> <p>elementstring - Produce a human-readable element string</p> <pre><code>ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ)\n\n  Returns the name as a human-readable string.\n\n  For ndi.element objects, this is the string 'element: ' followed by its name\n\nHelp for ndi.probe/elementstring is inherited from superclass ndi.element\n</code></pre> <p>epoch2str - convert an epoch number or id to a string</p> <pre><code>S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER)\n\n  Returns the epoch NUMBER in the form of a string. If it is a simple\n  integer, then INT2STR is used to produce a string. If it is an epoch\n  identifier string, then it is returned.\n\nHelp for ndi.probe/epoch2str is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_PROBE_OBJ, EPOCH_NUMBER)\n\n  Return the clock types available for this epoch.\n\n  The ndi.probe class always returns the clock type(s) of the device it is based on\n</code></pre> <p>epochgraph - graph of the mapping and cost of converting time among epochs</p> <pre><code>[COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes).\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\nHelp for ndi.probe/epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochid - Get the epoch identifier for a particular epoch</p> <pre><code>ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Returns the epoch identifier string for the epoch EPOCH_NUMBER.\n  If it doesn't exist, it should be created. EPOCH_NUMBER can be\n  a number of an EPOCH ID string.\n\n  The abstract class just queries the EPOCHTABLE.\n  Most classes that manage epochs themselves (ndi.file.navigator,\n  ndi.daq.system) will override this method.\n\nHelp for ndi.probe/epochid is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochnodes - return all epoch nodes from an ndi.epoch.epochset object</p> <pre><code>[NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ)\n\n  Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the\n  following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch within the session.\n  'epoch_session_id'           | The ID of the session that contains the epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A SINGLE ndi.time.clocktype entry that describes the clock type of this node.\n  't0_t1'                   | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock'\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_id', and 'epochprobemap'\n  'objectname'              | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no\n                            |   'name' field, then 'unknown' is used.\n  'objectclass'             | The object class name of the NDI_EPOCHSET_OBJ.\n\n  EPOCHNODES are related to EPOCHTABLE entries, except\n     a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains\n        multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids\n        in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another.\n     b) EPOCHNODES contain identifying information (objectname and objectclass) to help\n        in identifying the epoch nodes across ndi.epoch.epochset objects.\n\n  UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs.\n\nHelp for ndi.probe/epochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochprobemapmatch - does an epochprobemap record match our probe?</p> <pre><code>B = EPOCHPROBEMAPMATCH(NDI_PROBE_OBJ, EPOCHPROBEMAP)\n\n  Returns 1 if the ndi.epoch.epochprobemap object EPOCHPROBEMAP is a match for\n  the NDI_PROBE_OBJ probe and 0 otherwise.\n</code></pre> <p>epochsetname - the name of the ndi.probe. object, for EPOCHNODES*</p> <pre><code>NAME = EPOCHSETNAME(NDI_PROBE_OBJ)\n\n  Returns the object name that is used when creating epoch nodes.\n\n  For ndi.probe objects, this is the string 'probe: ' followed by\n  PROBESTRING(NDI_PROBE_OBJ).\n</code></pre> <p>epochtable - Return an epoch table that relates the current object's epochs to underlying epochs</p> <pre><code>[ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch. The number may change as epochs are added and subtracted.\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch.\n  'epoch_session_id'           | The session ID that contains this epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap'\n\n  HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable\n  has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE.\n\n  After it is read from disk once, the ET is stored in memory and is not re-read from disk\n  unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE.\n\nHelp for ndi.probe/epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID</p> <pre><code>ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object\n  that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the\n  epoch or the EPOCHID of the epoch.\n\nHelp for ndi.probe/epochtableentry is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>eq - are 2 ndi.probe objects equal?</p> <pre><code>Returns 1 if the objects share an object class, session, and probe string.\n</code></pre> <p>getcache - return the NDI_CACHE and key for ndi.element</p> <pre><code>[CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ)\n\n  Returns the CACHE and KEY for the ndi.element object.\n\n  The CACHE is returned from the associated session.\n  The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT.\n\n  See also: ndi.file.navigator\n\nHelp for ndi.probe/getcache is inherited from superclass ndi.element\n</code></pre> <p>getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.*</p> <pre><code>[DEV, DEVNAME, DEVEPOCH, CHANNELTYPE, CHANNELLIST] = GETCHANNELDEVINFO(NDI_PROBE_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Given an ndi.probe.* object and an EPOCH number, this function returns the corresponding channel and device info.\n  Suppose there are C channels corresponding to a probe. Then the outputs are\n    DEV is a 1xC cell array of ndi.daq.system objects for each channel\n    DEVNAME is a 1xC cell array of the names of each device in DEV\n    DEVEPOCH is a 1xC array with the epoch id of the probe's EPOCH on each device\n    CHANNELTYPE is a cell array of the type of each channel\n    CHANNELLIST is the channel number of each channel.\n</code></pre> <p>getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs</p> <pre><code>EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ)\n\n  Produce an array of ndi.epoch objects from the epoch table of this\n  ndi.epoch.epochset object (NDI_EPOCHSET_OBJ).\n\nHelp for ndi.probe/getepocharray is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache</p> <pre><code>GINFO_SMALL = GINFO2CACHE(GINFO)\n\nHelp for ndi.probe.ginfo2cache is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>id - return the document unique identifier for an ndi.element object</p> <pre><code>UNIQUE_REF = ID(NDI_ELEMENT_OBJ)\n\n  Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated\n  document for the element, then an error is returned.\n\nHelp for ndi.probe/id is inherited from superclass ndi.element\n</code></pre> <p>issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph?</p> <pre><code>B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ)\n\n  This function tells an ndi.time.syncgraph object whether it should continue\n  adding the 'underlying' epochs to the graph, or whether it should stop at this level.\n\n  For ndi.epoch.epochset and ndi.probe.* this returns 0 so that the underlying ndi.daq.system epochs are added.\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.probe.isvalid is inherited from superclass did.ido\n</code></pre> <p>load_all_element_docs - load all of the ndi.element objects from an session database</p> <pre><code>ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ)\n\n  Loads the ndi.document that is based on the ndi.element object and any associated\n  epoch documents.\n\nHelp for ndi.probe/load_all_element_docs is inherited from superclass ndi.element\n</code></pre> <p>load_element_doc - load a element doc from the session database</p> <pre><code>ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ)\n\n  Load an ndi.document that is based on the ndi.element object.\n\n  Returns empty if there is no such document.\n\nHelp for ndi.probe/load_element_doc is inherited from superclass ndi.element\n</code></pre> <p>loadaddedepochs - load the added epochs from an ndi.element</p> <pre><code>[ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ)\n\n  Load the EPOCHTABLE that consists of added/registered epochs that provide information\n  about the ndi.element.\n\nHelp for ndi.probe/loadaddedepochs is inherited from superclass ndi.element\n</code></pre> <p>matchedepochtable - compare a hash number from an epochtable to the current version</p> <pre><code>B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE)\n\n  Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE.\n  Otherwise, it returns 0.\n\nHelp for ndi.probe/matchedepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on a element</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_ELEMENT_OBJ)\n\n  Fill out the fields of an NDI_DOCUMENT_OBJ of type 'element'\n  with the corresponding 'name' and 'type' fields of the element NDI_ELEMENT_OBJ and the\n  'name', 'type', and 'reference' fields of its underlying NDI_PROBE_OBJ.\n  If EPOCHID is provided, then an EPOCHID field is filled out as well\n  in accordance to 'epochid'.\n\n  When the document is created, it is automatically added to the session.\n\nHelp for ndi.probe/newdocument is inherited from superclass ndi.element\n</code></pre> <p>numepochs - Number of epochs of ndi.epoch.epochset</p> <pre><code>N = NUMEPOCHS(NDI_EPOCHSET_OBJ)\n\n  Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ.\n\n  See also: EPOCHTABLE\n\nHelp for ndi.probe/numepochs is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>probe - create a new ndi.probe object</p> <pre><code>OBJ = ndi.probe(SESSION, NAME, REFERENCE, TYPE, SUBJECT_ID)\n          or\n   OBJ = ndi.probe(SESSION, NDI_DOCUMENT_OBJ)\n\n   Creates an ndi.probe associated with an ndi.session object SESSION and\n   with name NAME (a string that must start with a letter and contain no white space),\n   reference number equal to REFERENCE (a non-negative integer), the TYPE of the\n   probe (a string that must start with a letter and contain no white space).\n\n   ndi.probe is a essentially an abstract class, and a specific implementation must be called.\n\n    Documentation for ndi.probe/probe\n       doc ndi.probe\n</code></pre> <p>probestring - Produce a human-readable probe string</p> <pre><code>PROBESTR = PROBESTRING(NDI_PROBE_OBJ)\n\n  Returns the name and reference of a probe as a human-readable string.\n\n  This is simply PROBESTR = [NDI_PROBE_OBJ.name ' _ ' in2str(NDI_PROBE_OBJ.reference)]\n</code></pre> <p>resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk</p> <pre><code>NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  This function clears the internal cached memory of the epochtable, forcing it to be re-read from\n  disk at the next request.\n\n  See also: ndi.probe/EPOCHTABLE\n\nHelp for ndi.probe/resetepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>searchquery - return a search query for an ndi.document based on this element</p> <pre><code>SQ = SEARCHQUERY(NDI_ELEMENT_OBJ, [EPOCHID])\n\n  Returns a search query for the fields of an NDI_DOCUMENT_OBJ of type 'element'\n  with the corresponding 'name' and 'type' fields of the element NDI_ELEMENT_OBJ.\n\nHelp for ndi.probe/searchquery is inherited from superclass ndi.element\n</code></pre> <p>t0_t1 - **</p> <pre><code>T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch\n\n  T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\n  TODO: this must be a bug, it's just self-referential\n\nHelp for ndi.probe/t0_t1 is inherited from superclass ndi.element\n</code></pre> <p>underlyingepochnodes - find all the underlying epochnodes of a given epochnode</p> <pre><code>[UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE)\n\n  Traverse the underlying nodes of a given EPOCHNODE until we get to the roots\n  (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1).\n\n  Note that the EPOCHNODE itself is returned as the first 'underlying' node.\n\n  See also: ISSYNCGRAPHROOT\n\nHelp for ndi.probe/underlyingepochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.probe.unique_id is inherited from superclass did.ido\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/query.m/","title":"CLASS ndi.query","text":"<pre><code>  Ensure the did.query class definition is available on the MATLAB path\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/query.m/#superclasses","title":"Superclasses","text":"<p>did.query</p>"},{"location":"NDI-matlab/reference/%2Bndi/query.m/#properties","title":"Properties","text":"Property Description searchstructure"},{"location":"NDI-matlab/reference/%2Bndi/query.m/#methods","title":"Methods","text":"Method Description and add DID.QUERY objects or search for this DID.QUERY object or that DID.QUERY object query create an NDI query object for searching an NDI database searchcellarray2searchstructure convert a search cell array to a search structure searchstruct make a search structure from field, operation, param1, param2 inputs to_searchstructure convert an DID.QUERY object to a set of search structures"},{"location":"NDI-matlab/reference/%2Bndi/query.m/#methods-help","title":"Methods help","text":"<p>and - add DID.QUERY objects</p> <pre><code>C = AND(A,B) or C = A &amp; B\n\n  Produces a new DID.QUERY object C that is true if both DID.QUERY A and DID.QUERY B are true.\n\n  Combines the searches from A and B into a search C. The searchstructure field of\n  C will be a concatenated version of those from A and B. The query C will only pass if\n  all of the characteristics of A and B are satisfied.\n\nHelp for ndi.query/and is inherited from superclass did.query\n</code></pre> <p>or - search for this DID.QUERY object or that DID.QUERY object</p> <pre><code>C = OR(A,B) or C = A | B\n\n  Produces a new DID.QUERY object C that is true if either DID.QUERY A or DID.QUERY B is true.\n\nHelp for ndi.query/or is inherited from superclass did.query\n</code></pre> <p>query - create an NDI query object for searching an NDI database</p> <pre><code>Creates an NDI.QUERY object, which inherits from DID.QUERY.\n  It encapsulates search criteria in a SEARCHSTRUCTURE property\n  appropriate for use with FIELDSEARCH or similar functions used\n  by the NDI database search mechanism.\n\n  The SEARCHSTRUCTURE has the fields:\n  Field:                   | Description\n  ---------------------------------------------------------------------------\n  field                      | A character string of the field to examine (e.g., 'ndi_document_property.name')\n  operation                  | The operation to perform. Most operations can be\n                             |   negated by prefixing with '~'. This operation\n                             |   determines values of fields 'param1' and 'param2'.\n      |----------------------|----------------------------------------------------\n      |   'regexp'             - Regular expression match between field value and 'param1'.\n      |   'exact_string'       - Field value is an exact string match for 'param1'.\n      |   'exact_string_anycase' - Field value is an exact string match for 'param1' (ignoring case).\n      |   'contains_string'    - Field value is a char array that contains 'param1'.\n      |   'exact_number'       - Field value is exactly 'param1' (same size and values).\n      |   'lessthan'           - Field value is less than 'param1'.\n      |   'lessthaneq'         - Field value is less than or equal to 'param1'.\n      |   'greaterthan'        - Field value is greater than 'param1'.\n      |   'greaterthaneq'      - Field value is greater than or equal to 'param1'.\n      |   'hasfield'           - Field is present? (no role for 'param1'/'param2').\n      |   'hasanysubfield_contains_string' - Field is struct/cell array where any element\n      |                                    has subfield 'param1' containing string 'param2'.\n      |   'isa'                - Document class is or inherits from 'param1'.\n      |   'depends_on'         - Document depends on item with name 'param1' and value 'param2'.\n      |   'or'                 - Logical OR of search structures in 'param1' and 'param2'.\n      |   '~...'               - Negation of most operations above (e.g., '~exact_number').\n      |----------------------|----------------------------------------------------\n  param1                     | Search parameter 1. Meaning depends on 'operation' (see above).\n  param2                     | Search parameter 2. Meaning depends on 'operation' (see above).\n  ---------------------------------------------------------------------------\n  See FIELDSEARCH documentation for full details of the search structure.\n\n  Construction options are identical to did.query:\n\n  NDI_QUERY_OBJ = NDI.QUERY(SEARCHSTRUCT) - Accepts a SEARCHSTRUCT.\n  NDI_QUERY_OBJ = NDI.QUERY(SEARCHCELLARRAY) - Accepts {'prop1',val1,...}.\n  NDI_QUERY_OBJ = NDI.QUERY(FIELD, OPERATION, PARAM1, PARAM2) - Specifies components.\n\n  Examples:\n    q = ndi.query('ndi_document_property.id','exact_string','12345678','')\n    q = ndi.query('ndi_document_property.name','exact_string','my_ndi_name')\n    q = ndi.query('ndi_document_property.name','regexp','(.*)') % match any name\n    q = ndi.query('','isa','ndi.document.base') % match any ndi.document.base or subclass\n\n    Documentation for ndi.query/query\n       doc ndi.query\n</code></pre> <p>searchcellarray2searchstructure - convert a search cell array to a search structure</p> <pre><code>SEARCHSTRUCT = SEARCHCELLARRAY2SEARCHSTRUCTURE(SEACHCELLARRAY)\n\n  Converts a cell array with SEARCHCELLARRAY = {'property1',value1,'property2',value2, ...}\n  into a SEARCHSTRUCT with the 'regexp' operator in the case of a character 'value' or the 'exact_number'\n  operator in the case of a non-character value.\n\n  See also: FIELDSEARCH, NDI.QUERY/DID.QUERY\n\nHelp for ndi.query.searchcellarray2searchstructure is inherited from superclass did.query\n</code></pre> <p>searchstruct - make a search structure from field, operation, param1, param2 inputs</p> <pre><code>SEARCHSTRUCT_OUT = SEARCHSTRUCT(FIELD, OPERATION, PARAM1, PARAM2)\n\n  Creates search structure with the given fields FIELD, OPERATION, PARAM1, PARAM2.\n\n  See also: FIELDSEARCH, NDI.QUERY/DID.QUERY\n\nHelp for ndi.query.searchstruct is inherited from superclass did.query\n</code></pre> <p>to_searchstructure - convert an DID.QUERY object to a set of search structures</p> <pre><code>SEARCHSTRUCTURE = TO_SEARCHSTRUCTURE(DID.QUERY_OBJ)\n\n  Converts an DID.QUERY object to a set of search structures without any\n  DID.QUERY dependencies (see FIELDSEARCH).\n\n  See also: FIELDSEARCH\n\nHelp for ndi.query/to_searchstructure is inherited from superclass did.query\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/session.m/","title":"CLASS ndi.session","text":"<pre><code>  NDI.SESSION - NDI.SESSION object class\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/session.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/session.m/#properties","title":"Properties","text":"Property Description reference A string reference for the session identifier A unique identifier syncgraph An ndi.time.syncgraph object related to this session cache An ndi.cache object for the session's use"},{"location":"NDI-matlab/reference/%2Bndi/session.m/#methods","title":"Methods","text":"Method Description addlistener addlistener  Add listener for event. all_docs_in_session determines if a set of ndi documents are in a session creator_args return the arguments needed to build an ndi.session object daqsystem_add Add a sampling device to a ndi.session object daqsystem_clear remove all DAQSYSTEM objects from an ndi.session daqsystem_load Load daqsystem objects from an ndi.session daqsystem_rm Remove a sampling device from an ndi.session object database_add Add an ndi.document to an ndi.session object database_clear deletes/removes all entries from the database associated with an session database_closebinarydoc close an ndi.database.binarydoc database_existbinarydoc checks if an ndi.database.binarydoc exists for an ndi.document database_openbinarydoc open the ndi.database.binarydoc channel of an ndi.document database_rm Remove an ndi.document with a given document ID from an ndi.session object database_search Search for an ndi.document in a database of an ndi.session object delete DELETE   Delete a handle object. docinput2docs convert an array of ndi.documents or doc_ids to documents eq are 2 NDI_SESSIONS equal? findexpobj search an ndi.session for a specific object given name and classname findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. get_ingested_docs get all ndi.documents related to ingested data getelements Return all ndi.element objects that are found in session database getpath Return the path of the session getprobes Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries gt &gt; (GT)   Greater than relation for handles. id return the identifier of an ndi.session object ingest ingest the raw data and synchronization information into the database is_fully_ingested is an ndi.session object fully ingested? isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. newdocument create a new ndi.database document of type ndi.document notify NOTIFY   Notify listeners of event. searchquery return a search query for database objects in this session session Create a new ndi.session object syncgraph_addrule add an ndi.time.syncrule to the syncgraph syncgraph_rmrule remove an ndi.time.syncrule from the syncgraph unique_reference_string return the unique reference string for this session validate_documents validate whether documents belong to a session"},{"location":"NDI-matlab/reference/%2Bndi/session.m/#methods-help","title":"Methods help","text":"<p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.session, matlab.metadata.Property, events\n\nHelp for ndi.session/addlistener is inherited from superclass handle\n</code></pre> <p>all_docs_in_session - determines if a set of ndi documents are in a session</p> <pre><code>[B,ERRMSG] = ALL_DOCS_IN_SESSION(DOCS, SESSION_ID)\n\n  B is 1 if the base.session_id field of all ndi.document objects in the cell\n  array DOCS match session_id. If so, ERRMSG is empty. Otherwise, ERRMSG lists\n  the documents that are not in the session.\n</code></pre> <p>creator_args - return the arguments needed to build an ndi.session object</p> <pre><code>INPUTS = CREATOR_ARGS(NDI_SESSION_OBJ)\n\n  Return the inputs necessary to create an ndi.session object. Each input\n  argument is returned as an entry in the cell array INPUTS.\n\n  Example:\n  INPUTS = ndi_session_obj.creator_args();\n  ndi_session_copy = ndi.session(INPUTS{:});\n</code></pre> <p>daqsystem_add - Add a sampling device to a ndi.session object</p> <pre><code>NDI_SESSION_OBJ = DAQSYSTEM_ADD(NDI_SESSION_OBJ, DEV)\n\n  Adds the device DEV to the ndi.session NDI_SESSION_OBJ\n\n  The devices can be accessed by referencing NDI_SESSION_OBJ.device\n\n  See also: DAQSYSTEM_RM, ndi.session\n</code></pre> <p>daqsystem_clear - remove all DAQSYSTEM objects from an ndi.session</p> <pre><code>NDI_SESSION_OBJ = DAQSYSTEM_CLEAR(NDI_SESSION_OBJ)\n\n  Permanently removes all ndi.daq.system objects from an ndi.session.\n\n  Be sure you mean it!\n</code></pre> <p>daqsystem_load - Load daqsystem objects from an ndi.session</p> <pre><code>DEV = DAQSYSTEM_LOAD(NDI_SESSION_OBJ, PARAM1, VALUE1, PARAM2, VALUE2, ...)\n          or\n  DEV = DAQSYSTEM_LOAD(NDI_SESSION_OBJ)\n\n  Returns the ndi.daq.system objects in the ndi.session with metadata parameters PARAMS1 that matches\n  VALUE1, PARAMS2 that matches VALUE2, etc.\n\n  One can also search for 'name' as a parameter; this will be automatically changed to search\n  for database documents with fields 'base.name' equal to the corresponding value.\n\n  If more than one object is requested, then DEV will be a cell list of matching objects.\n  Otherwise, the object will be a single element. If there are no matches, empty ([]) is returned.\n</code></pre> <p>daqsystem_rm - Remove a sampling device from an ndi.session object</p> <pre><code>NDI_SESSION_OBJ = DAQSYSTEM_RM(NDI_SESSION_OBJ, DEV)\n\n  Removes the device DEV from the device list.\n\n  See also: DAQSYSTEM_ADD, ndi.session\n</code></pre> <p>database_add - Add an ndi.document to an ndi.session object</p> <pre><code>NDI_SESSION_OBJ = DATABASE_ADD(NDI_SESSION_OBJ, NDI_DOCUMENT_OBJ)\n\n  Adds the ndi.document NDI_DOCUMENT_OBJ to the ndi.session NDI_SESSION_OBJ.\n  NDI_DOCUMENT_OBJ can also be a cell array of ndi.document objects, which will all be added\n  in turn.\n\n  The database can be queried by calling NDI_SESSION_OBJ/SEARCH\n\n  See also: DATABASE_RM, ndi.session, ndi.database, ndi.session/SEARCH\n</code></pre> <p>database_clear - deletes/removes all entries from the database associated with an session</p> <pre><code>DATABASE_CLEAR(NDI_SESSION_OBJ, AREYOUSURE)\n\n    Removes all documents from the NDI_SESSION_OBJ object.\n\n  Use with care. If AREYOUSURE is 'yes' then the\n  function will proceed. Otherwise, it will not.\n</code></pre> <p>database_closebinarydoc - close an ndi.database.binarydoc</p> <pre><code>[NDI_BINARYDOC_OBJ] = DATABASE_CLOSEBINARYDOC(NDI_SESSION_OBJ, NDI_BINARYDOC_OBJ)\n\n  Close an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be closed in the\n  database, which is why it is necessary to call this function through the session object.\n</code></pre> <p>database_existbinarydoc - checks if an ndi.database.binarydoc exists for an ndi.document</p> <pre><code>[TF, FILE_PATH] = DATABASE_EXISTBINARYDOC(NDI_SESSION_OBJ, NDI_DOCUMENT_OR_ID, FILENAME)\n\n   Return a boolean flag (TF) indicating if a binary document\n   exists for an ndi.document and, if it exists, the full file\n   path (FILE_PATH) to the file where the binary data is stored.\n</code></pre> <p>database_openbinarydoc - open the ndi.database.binarydoc channel of an ndi.document</p> <pre><code>NDI_BINARYDOC_OBJ = DATABASE_OPENBINARYDOC(NDI_SESSION_OBJ, NDI_DOCUMENT_OR_ID, FILENAME)\n\n   Return the open ndi.database.binarydoc object that corresponds to an ndi.document and\n   NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself.\n   The document is opened for reading only. Document binary streams may not be edited once the\n   document is added to the database.\n\n   Note that this NDI_BINARYDOC_OBJ must be closed with ndi.session/CLOSEBINARYDOC.\n</code></pre> <p>database_rm - Remove an ndi.document with a given document ID from an ndi.session object</p> <pre><code>NDI_SESSION_OBJ = DATABASE_RM(NDI_SESSION_OBJ, DOC_UNIQUE_ID)\n    or\n  NDI_SESSION_OBJ = DATABASE_RM(NDI_SESSION_OBJ, DOC)\n\n  Removes an ndi.document with document id DOC_UNIQUE_ID from the\n  NDI_SESSION_OBJ.database. In the second form, if an ndi.document or cell array of\n  NDI_DOCUMENTS is passed for DOC, then the document unique ids are retrieved and they\n  are removed in turn.  If DOC/DOC_UNIQUE_ID is empty, no action is taken.\n\n  This function also takes parameters as name/value pairs that modify its behavior:\n  Parameter (default)        | Description\n  --------------------------------------------------------------------------------\n  ErrIfNotFound (0)          | Produce an error if an ID to be deleted is not found.\n\n  See also: DATABASE_ADD, ndi.session\n</code></pre> <p>database_search - Search for an ndi.document in a database of an ndi.session object</p> <pre><code>NDI_DOCUMENT_OBJ = DATABASE_SEARCH(NDI_SESSION_OBJ, SEARCHPARAMETERS)\n\n  Given search parameters, which are a cell list {'PARAM1', VALUE1, 'PARAM2, VALUE2, ...},\n  the database associated with the ndi.session object is searched.\n\n  Matches are returned in a cell list NDI_DOCUMENT_OBJ.\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.SESSION, NDI.SESSION/ISVALID, CLEAR\n\nHelp for ndi.session/delete is inherited from superclass handle\n</code></pre> <p>docinput2docs - convert an array of ndi.documents or doc_ids to documents</p> <pre><code>[DOC_LIST,B,ERRMSG] = DOCINPUT2DOCS(NDI_SESSION_OBJ, DOC_INPUT)\n\n  Given an input DOC_INPUT that specifies ndi.document objects,\n  return the list of ndi.document objects.\n\n  DOC_INPUT can be a single document id (character array), or a single\n  ndi.document, or a cell array of document ids or a cell array of ndi.documents,\n  or a mixed cell array of ndi.document objects and ids.\n\n  If all documents are found, then B is 1 and ERRMSG is ''. If a document ID\n  does not exist in the database, then one occurrence is noted in ERRMSG and B is 0.\n</code></pre> <p>eq - are 2 NDI_SESSIONS equal?</p> <pre><code>B = EQ(E1, E2)\n\n  Returns 1 if and only if the sessions have the same unique reference number.\n</code></pre> <p>findexpobj - search an ndi.session for a specific object given name and classname</p> <pre><code>OBJ = FINDEXPOBJ(NDI_EXPERIMNENT_OBJ, OBJ_NAME, OBJ_CLASSNAME)\n\n  Examines the DAQSYSTEM list, DATABASE, and PROBELIST for an object with name OBJ_NAME\n  and classname OBJ_CLASSNAME. If no object is found, OBJ will be empty ([]).\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.SESSION\n\nHelp for ndi.session/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.session, ndi.session/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.session/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SESSION, NDI.SESSION/EQ, NDI.SESSION/GT, NDI.SESSION/LE, NDI.SESSION/LT, NDI.SESSION/NE\n\nHelp for ndi.session/ge is inherited from superclass handle\n</code></pre> <p>get_ingested_docs - get all ndi.documents related to ingested data</p> <pre><code>D = GET_INGESTED_DOCS(NDI_SESSION_OBJ)\n\n  Return all documents related to ingested data. Be careful; if the raw data\n  is not available on the path, then the ingested data is the only record of it.\n</code></pre> <p>getelements - Return all ndi.element objects that are found in session database</p> <pre><code>ELEMENTS = GETELEMENTS(NDI_SESSION_OBJ, ...)\n\n  Examines all the database of NDI_SESSION_OBJ and returns all ndi.element\n  entries.\n\n  ELEMENTS is a cell array of ndi.element.* objects.\n\n  ELEMENTS = GETELEMENTS(NDI_SESSION_OBJ, 'PROP1', VALUE1, 'PROP2', VALUE2...)\n\n  returns only those probes for which 'PROP1' has a value of VALUE1, 'PROP2'\n  has a value of VALUE2, etc. Properties of elements are 'element.name', 'element.type',\n  'element.direct', and 'probe.name', 'probe.type', and 'probe.reference'.\n</code></pre> <p>getpath - Return the path of the session</p> <pre><code>P = GETPATH(NDI_SESSION_OBJ)\n\n  Returns the path of an ndi.session object.\n\n  The path is some sort of reference to the storage location of\n  the session. This might be a URL, or a file directory, depending upon\n  the subclass.\n\n  In the ndi.session class, this returns empty.\n\n  See also: ndi.session\n</code></pre> <p>getprobes - Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries</p> <pre><code>PROBES = GETPROBES(NDI_SESSION_OBJ, ...)\n\n  Examines all ndi.daq.system entries in the NDI_SESSION_OBJ's device array\n  and returns all ndi.probe.* entries that can be constructed from each device's\n  ndi.epoch.epochprobemap entries.\n\n  PROBES is a cell array of ndi.probe.* objects.\n\n  One can pass additional arguments that specify the classnames of the probes\n  that are returned:\n\n  PROBES = GETPROBES(NDI_SESSION_OBJ, CLASSMATCH )\n\n  only probes that are members of the classes CLASSMATCH etc., are\n  returned.\n\n  PROBES = GETPROBES(NDI_SESSION_OBJ, 'PROP1', VALUE1, 'PROP2', VALUE2...)\n\n  returns only those probes for which 'PROP1' has a value of VALUE1, 'PROP2'\n  has a value of VALUE2, etc. Properties of probes are 'name', 'reference', and 'type', and 'subject_id'.\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SESSION, NDI.SESSION/EQ, NDI.SESSION/GE, NDI.SESSION/LE, NDI.SESSION/LT, NDI.SESSION/NE\n\nHelp for ndi.session/gt is inherited from superclass handle\n</code></pre> <p>id - return the identifier of an ndi.session object</p> <pre><code>IDENTIFIER = ID(NDI_SESSION_OBJ)\n\n  Returns the unique identifier of an ndi.session object.\n</code></pre> <p>ingest - ingest the raw data and synchronization information into the database</p> <pre><code>[B,ERRMSG] = INGEST(NDI_SESSION_OBJ)\n\n  Ingest all raw data and synchronization information into the database.\n</code></pre> <p>is_fully_ingested - is an ndi.session object fully ingested?</p> <pre><code>B = IS_FULLY_INGESTED(NDI_SESSION_OBJ)\n\n  Returns 1 if the ndi.session object NDI_SESSION_OBJ is fully\n  ingested and 0 if there are still elements on disk that would\n  need to be ingested by NDI_SESSION_OBJ.ingest() in order to\n  be fully ingested.\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.SESSION, NDI.SESSION/DELETE\n\nHelp for ndi.session/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SESSION, NDI.SESSION/EQ, NDI.SESSION/GE, NDI.SESSION/GT, NDI.SESSION/LT, NDI.SESSION/NE\n\nHelp for ndi.session/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.session, matlab.metadata.Property, events\n\nHelp for ndi.session/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SESSION, NDI.SESSION/EQ, NDI.SESSION/GE, NDI.SESSION/GT, NDI.SESSION/LE, NDI.SESSION/NE\n\nHelp for ndi.session/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.SESSION, NDI.SESSION/EQ, NDI.SESSION/GE, NDI.SESSION/GT, NDI.SESSION/LE, NDI.SESSION/LT\n\nHelp for ndi.session/ne is inherited from superclass handle\n</code></pre> <p>newdocument - create a new ndi.database document of type ndi.document</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_SESSION_OBJ, [DOCUMENT_TYPE], 'PROPERTY1', VALUE1, ...)\n\n  Creates an empty database document NDI_DOCUMENT_OBJ. DOCUMENT_TYPE is\n  an optional argument and can be any type that confirms to the .json\n  files in $NDI_COMMON/database_documents/*, a URL to such a file, or\n  a full path filename. If DOCUMENT_TYPE is not specified, it is taken\n  to be 'base'.\n\n  If additional PROPERTY values are specified, they are set to the VALUES indicated.\n\n  Example: mydoc = ndi_session_obj.newdocument('base','base.name','myname');\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.SESSION, NDI.SESSION/ADDLISTENER, NDI.SESSION/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.session/notify is inherited from superclass handle\n</code></pre> <p>searchquery - return a search query for database objects in this session</p> <pre><code>SQ = SEARCHQUERY(NDI_SESSION_OBJ)\n\n  Returns a search query that will match all ndi.document objects that were generated\n  by this session.\n\n  SQ = {'base.session_id', ndi_session_obj.id()};\n\n  Example: mydoc = ndi_session_obj.newdocument('base','base.name','myname');\n</code></pre> <p>session - Create a new ndi.session object</p> <pre><code>NDI_SESSION_OBJ=ndi.session(REFERENCE)\n\n  Creates a new ndi.session object. The session has a unique\n  reference REFERENCE. This class is an abstract class and typically\n  an end user will open a specific subclass such as ndi.session.dir.\n\n  ndi.session objects can access 0 or more ndi.daq.system objects.\n\n  See also: ndi.session/DAQSYSTEM_ADD, ndi.session/DAQSYSTEM_RM,\n    ndi.session/GETPATH, ndi.session/GETREFERENCE\n\n    Documentation for ndi.session/session\n       doc ndi.session\n</code></pre> <p>syncgraph_addrule - add an ndi.time.syncrule to the syncgraph</p> <pre><code>NDI_SESSION_OBJ = SYNCGRAPH_ADDRULE(NDI_SESSION_OBJ, RULE)\n\n  Adds the ndi.time.syncrule RULE to the ndi.time.syncgraph of the ndi.session\n  object NDI_SESSION_OBJ.\n</code></pre> <p>syncgraph_rmrule - remove an ndi.time.syncrule from the syncgraph</p> <pre><code>NDI_SESSION_OBJ = SYNCGRAPH_RMRULE(NDI_SESSION_OBJ, INDEX)\n\n  Removes the INDEXth ndi.time.syncrule from the ndi.time.syncgraph of the ndi.session\n  object NDI_SESSION_OBJ.\n</code></pre> <p>unique_reference_string - return the unique reference string for this session</p> <pre><code>REFSTR = UNIQUE_REFERENCE_STRING(NDI_SESSION_OBJ)\n\n  Returns the unique reference string for the ndi.session.\n  REFSTR is a combination of the REFERENCE property of NDI_SESSION_OBJ\n  and the UNIQUE_REFERENCE property of NDI_SESSION_OBJ, joined with a '_'.\n\n  If you just want the reference (not unique) just access the reference\n  property (NDI_SESSION_OBJ.reference).\n</code></pre> <p>validate_documents - validate whether documents belong to a session</p> <pre><code>[B, ERRMSG] = VALIDATE_DOCUMENTS(NDI_SESSION_OBJ, DOCUMENT)\n\n  Given an ndi.document DOCUMENT or a cell array of ndi.documents DOCUMENT,\n  determines whether all document session_ids match the sessions's id.\n  An 'empty' session_id (all 0s, ndi.session.empty_id() ) also matches.\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/subject.m/","title":"CLASS ndi.subject","text":"<pre><code>  ndi.subject - an object describing the subject of a measurement or stimulation\n\n  ndi.subject is an object that stores information about the subject of an ndi.element.\n    Each ndi.element object must have a subject; the subject associated with the element\n    is a key defining feature of an ndi.element object.\n\n  ndi.subject Properties:\n   local_identifier - A string that is a unique global identifier but that also has meaning within an individual\n                      lab. Must include an '@' character that identifies the lab. For example: anteater23@nosuchlab.org\n   description - A string of description that is free for the user to choose.\n\n  ndi.subject Methods:\n   subject - Create a new ndi.subject object\n   newdocument - Create an ndi.document based on an ndi.subject\n   searchquery - Search for an ndi.document representation of an ndi.subject\n   isvalidlocalidentifierstring - Is a string a valid local_identifier string? (Static)\n   does_subjectstring_match_session_document - Does an ndi.subject object already have a representation in an ndi.database? (Static)\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/subject.m/#superclasses","title":"Superclasses","text":"<p>ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/subject.m/#properties","title":"Properties","text":"Property Description local_identifier A string that is a local identifier in the lab, e.g. anteater23@nosuchlab.org description A string description identifier A string that is a local identifier in the lab, e.g. anteater23@nosuchlab.org"},{"location":"NDI-matlab/reference/%2Bndi/subject.m/#methods","title":"Methods","text":"Method Description does_subjectstring_match_session_document does a subject string match a document? id return the identifier of an DID.IDO object isvalid is a unique ID number valid? isvalidlocalidentifierstring is this a valid local identifier string? newdocument return a new database document of type ndi.document based on a subject searchquery return a search query for an ndi.document based on this element subject create a new ndi.subject object unique_id Generate a unique ID number for DID databases (Static method)"},{"location":"NDI-matlab/reference/%2Bndi/subject.m/#methods-help","title":"Methods help","text":"<p>does_subjectstring_match_session_document - does a subject string match a document?</p> <pre><code>[B, SUBJECT_ID] = DOES_SUBJECTSTRING_MATCH_SESSION_DOCUMENT(NDI_SESSION_OBJ, ...\n     SUBJECTSTRING, MAKEIT)\n\n  Given a SUBJECTSTRING, which is either the local identifier for a subject in the\n  ndi.session object, or a document ID in the database, determine if the SUBJECTSTRING\n  corresponds to an ndi.document already in the database. If so, then the ID of that document\n  is returned in SUBJECT_ID and B is 1. If it is not there, and if MAKEIT is 1, then\n  a new entry is made and the document id is returned in SUBJECT_ID. If MAKEIT is 0, and it is\n  not there, then B is 0 and SUBJECT_ID is empty.\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.subject/id is inherited from superclass did.ido\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.subject.isvalid is inherited from superclass did.ido\n</code></pre> <p>isvalidlocalidentifierstring - is this a valid local identifier string?</p> <pre><code>[B,MSG] = ISVALIDLOCALIDENTIFIERSTRING(LOCAL_IDENTIFIER)\n\n  Returns 1 if the input LOCAL_IDENTIFIER is a character string and\n  if it has an '@' in it. If B is 0, then an error message string is returned\n  in MSG.\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on a subject</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_SUBJECT_OBJ)\n\n  Creates a new ndi.document of type 'subject'.\n</code></pre> <p>searchquery - return a search query for an ndi.document based on this element</p> <pre><code>SQ = SEARCHQUERY(NDI_SUBJECT_OBJ)\n</code></pre> <p>subject - create a new ndi.subject object</p> <pre><code>NDI_SUBJECT_OBJ = ndi.subject(LOCAL_IDENTIFIER, DESCRIPTION)\n    or\n  NDI_SUBJECT_OBJ = ndi.subject(NDI_SESSION_OBJ, NDI_SUBJECT_DOCUMENT)\n\n  Creates an ndi.subject object, either from a local identifier name or\n  an ndi.session object and an ndi.document that describes the ndi.subject object.\n\n    Documentation for ndi.subject/subject\n       doc ndi.subject\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.subject.unique_id is inherited from superclass did.ido\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/toolboxdir.m/","title":"ndi.toolboxdir","text":"<pre><code>  TOOLBOXDIR Returns the root directory of the NDI toolbox\n\n  FOLDERPATH = TOOLBOXDIR()\n\n  Returns the absolute path to the root directory of the NDI toolbox.\n  This function is useful for locating resources within the toolbox\n  structure regardless of the current working directory.\n\n  Outputs:\n    FOLDERPATH - A string containing the absolute path to the root\n                 directory of the NDI toolbox\n\n  Example:\n    root_dir = ndi.toolboxdir();\n    disp(['NDI toolbox is installed at: ' root_dir]);\n\n  See also:\n    FILEPARTS, MFILENAME\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/validate.m/","title":"CLASS ndi.validate","text":"<pre><code>  Validate a ndi_document to ensure that the type of its properties\n  match with the expected type according to its schema. Most of the logic\n  behind is implemented by Java using everit-org's json-schema library:\n  https://github.com/everit-org/json-schema, a JSON Schema Validator\n  for Java, based on org.json API. It implements the DRAFT 7 version\n  of the JSON Schema: https://json-schema.org/\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/validate.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/validate.m/#properties","title":"Properties","text":"Property Description validators reports is_valid is the ndi.document valid or not errormsg errormsg_this errormsg_super errormsg_depends_on"},{"location":"NDI-matlab/reference/%2Bndi/validate.m/#methods","title":"Methods","text":"Method Description checkJavaPath Check that ndi-validator is on the java class path extract_schema Extract the content of the ndi.document's extractnamefromdefinition File name contains \".json\" extension load_format_validator readHashMap an instance of java.util.HashMAP replace_ndipath ndi.validate.replace_ndipath is a function. throw_error ndi.validate/throw_error is a function. validate Validate a ndi_document to ensure that the type of its properties"},{"location":"NDI-matlab/reference/%2Bndi/validate.m/#methods-help","title":"Methods help","text":"<p>checkJavaPath - Check that ndi-validator is on the java class path</p> <p>extract_schema - Extract the content of the ndi.document's</p> <pre><code>corresponding schema\n\n    SCHEMA_JSON = EXTRACT_SCHEMA(NDI_DOCUMENT_OBJ)\n</code></pre> <p>extractnamefromdefinition - File name contains \".json\" extension</p> <pre><code>Remove the file extension\n\n    NAME = NDI.VALIDATE.EXTRACTNAMEFROMDEFINITION(STR)\n</code></pre> <p>load_format_validator - **</p> <pre><code>LOAD the the list of FormatValidator configured based on\n   the JSON file ndi_validate_config.json\n</code></pre> <p>readHashMap - an instance of java.util.HashMAP</p> <pre><code>turn an instance of java.util.hashmap into string useful\n    for displaying the error messages\n\n    STR = READHASHMAP(JAVA_HASHMAP)\n</code></pre> <p>replace_ndipath - ndi.validate.replace_ndipath is a function.</p> <pre><code>new_path = ndi.validate.replace_ndipath(path)\n</code></pre> <p>throw_error - ndi.validate/throw_error is a function.</p> <pre><code>throw_error(ndi_validate_obj)\n</code></pre> <p>validate - Validate a ndi_document to ensure that the type of its properties</p> <pre><code>match with the expected type according to its schema. Most of the logic\n  behind is implemented by Java using everit-org's json-schema library:\n  https://github.com/everit-org/json-schema, a JSON Schema Validator\n  for Java, based on org.json API. It implements the DRAFT 7 version\n  of the JSON Schema: https://json-schema.org/\n\n    Documentation for ndi.validate/validate\n       doc ndi.validate\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/version.m/","title":"ndi.version","text":"<pre><code>  VERSION - return the version string for NDI\n\n  [V, URL] = ndi.version()\n\n  Return the Git version string V for the currently installed\n  version of NDI. URL is the url of the NDI distribution.\n\n  Example:\n    v = ndi.version()\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/appdoc.m/","title":"CLASS ndi.app.appdoc","text":"<pre><code>  ndi.app.appdoc - create a new ndi.app.appdoc document\n\n  NDI_APPDOC_OBJ = ndi.app.appdoc(DOC_TYPES, DOC_DOCUMENT_TYPES, DOC_SESSION)\n\n  Creates and initializes a new ndi.app.appdoc object.\n\n  DOC_TYPES should be a cell array of strings describing the internal names\n     of the document types.\n  DOC_DOCUMENT_TYPES should be a cell array of strings describing the\n     NDI_document datatypes for each parameter document.\n  NOC_SESSION should be an ndi.session object that is used to access the\n     connected database.\n\n  Example:\n    ndi_app_appdoc_obj = ndi.app.appdoc({'extraction_doc'},{'spike_extraction_parameters'});\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/appdoc.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/appdoc.m/#properties","title":"Properties","text":"Property Description doc_types types of the parameter documents; the app developer can choose (cell array) doc_document_types NDI_document datatypes for each doc doc_session session to use to access the database"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/appdoc.m/#methods","title":"Methods","text":"Method Description add_appdoc Load data from an application document appdoc create a new ndi.app.appdoc document appdoc_description a function that prints a description of all appdoc types clear_appdoc remove an ndi.app.appdoc document from a session database defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters find_appdoc find an ndi.app.appdoc document in the session database isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? loaddata_appdoc Load data from an application document struct2doc create an ndi.document from an input structure and input parameters"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/appdoc.m/#methods-help","title":"Methods help","text":"<p>add_appdoc - Load data from an application document</p> <pre><code>[...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ...\n      APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments])\n\n  Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data\n  specified by APPDOC_STRUCT.  [additional inputs] are used to find or specify the\n  NDI_document in the database. They are passed to the function FIND_APPDOC,\n  so see help FIND_APPDOC for the documentation for each app.\n\n  The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than\n  1 if the document already exists).\n\n  If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is\n  assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it\n  is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT.\n\n  This function also takes a string DOCEXISTSACTION that describes what it should do\n  in the event that the document fitting the [additional inputs] already exists:\n  DOCEXISTACTION value      | Description\n  ----------------------------------------------------------------------------------\n  'Error'                   | An error is generating indicating the document exists.\n  'NoAction'                | The existing document is left alone. The existing ndi.document\n                            |    is returned in DOC.\n  'Replace'                 | Replace the document; note that this deletes all NDI_DOCUMENTS\n                            |    that depend on the original.\n  'ReplaceIfDifferent'      | Conditionally replace the document, but only if the\n                            |    the data structures that define the document are not equal.\n</code></pre> <p>appdoc - create a new ndi.app.appdoc document</p> <pre><code>NDI_APPDOC_OBJ = ndi.app.appdoc(DOC_TYPES, DOC_DOCUMENT_TYPES, DOC_SESSION)\n\n  Creates and initializes a new ndi.app.appdoc object.\n\n  DOC_TYPES should be a cell array of strings describing the internal names\n     of the document types.\n  DOC_DOCUMENT_TYPES should be a cell array of strings describing the\n     NDI_document datatypes for each parameter document.\n  NOC_SESSION should be an ndi.session object that is used to access the\n     connected database.\n\n  Example:\n    ndi_app_appdoc_obj = ndi.app.appdoc({'extraction_doc'},{'spike_extraction_parameters'});\n\n    Documentation for ndi.app.appdoc/appdoc\n       doc ndi.app.appdoc\n</code></pre> <p>appdoc_description - a function that prints a description of all appdoc types</p> <pre><code>Every subclass should override this function to describe the APPDOC types available\n  to the subclass. It should follow the following form.\n\n  --------------------\n\n  The APPDOCs available to this class are the following:\n\n  APPDOC_TYPE               | Description\n  ----------------------------------------------------------------------------------------------\n  'doctype1'                | The first app document type.\n  (in the base class, there are no APPDOCS; in subclasses, the document types should appear here)\n  (here, 'doctype1' is a dummy example.)\n\n  ----------------------------------------------------------------------------------------------\n  APPDOC 1: DOCTYPE1\n  ----------------------------------------------------------------------------------------------\n\n    ---------------------\n    | DOCTYPE1 -- ABOUT |\n    ---------------------\n\n    DOCTYPE documents store X. It DEPENDS ON documents Y and Z.\n\n    Definition: app/myapp/doctype1\n\n    --------------------------\n    | DOCTYPE1 -- CREATION |\n    --------------------------\n\n    DOC = STRUCT2DOC(NDI_APPDOC_OBJ, 'doctype1', DOCTYPE1PARAMS, ...)\n\n    DOCTYPE1PARAMS should contain the following fields:\n    Fieldname                 | Description\n    -------------------------------------------------------------------------\n    field1                    | field1 description\n    overlap                   | field2 description\n\n    ------------------------\n    | DOCTYPE1 - FINDING |\n    ------------------------\n\n    [DOCTYPE1_DOC] = FIND_APPDOC(NDI_APPDOC_OBJ, 'doctype1', INPUT1, INPUT2, ...)\n\n    INPUTS:\n       INPUT1 - first input needed to find doctype1 documents\n       INPUT2 - the second input needed to find doctype1 documents\n    OUTPUT:\n       DOCTYPE1_DOC - the ndi.document of the application document DOCTYPE1\n\n    ------------------------\n    | DOCTYPE1 - LOADING |\n    ------------------------\n\n    [OUTPUT1,OUTPUT2,...,DOCTYPE1_DOC] = LOADDOC_APPDOC(NDI_APPDOC_OBJ, ...\n        'doctype1', INPUT1, INPUT2,...);\n\n    INPUTS:\n       INPUT1 - first input needed to find doctype1 documents\n       INPUT2 - the second input needed to find doctype1 documents\n    OUTPUT:\n       OUTPUT1 - the first type of loaded data contained in DOCTYPE1 documents\n       OUTPUT2 - the second type of loaded data contained in DOCTYPE1 documents\n\n  (If there were more appdoc types, list them here...)\n</code></pre> <p>clear_appdoc - remove an ndi.app.appdoc document from a session database</p> <pre><code>B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Deletes the app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  B is 1 if the document is found, and 0 otherwise.\n</code></pre> <p>defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type</p> <pre><code>APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE)\n\n  Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object.\n\n  In the base class, the blank version of the ndi.document is read in and the\n  default structure is built from the ndi.document's class property list.\n</code></pre> <p>doc2struct - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this uses the property info in the ndi.document to load the data structure.\n</code></pre> <p>find_appdoc - find an ndi.app.appdoc document in the session database</p> <pre><code>DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Using search criteria that is supported by [additional inputs], FIND_APPDOC\n  searches the database for the ndi.document object DOC that is\n  described by APPDOC_TYPE.\n\n  DOC is always a cell array of all matching NDI_DOCUMENTs.\n\n  In this superclass, empty is always returned. Subclasses should override\n  this function to search for each document type.\n\n  The documentation for subclasses should be in the overridden function\n  APPDOC_DESCRIPTION.\n</code></pre> <p>isequal_appdoc_struct - are two APPDOC data structures the same (equal)?</p> <pre><code>B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2)\n\n  Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. In the base class, this is\n  true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is,\n  B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2).\n</code></pre> <p>isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC?</p> <pre><code>[B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT)\n\n  Examines APPDOC_STRUCT and determines whether it is a valid input for creating an\n  ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise.\n\n  In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.'\n</code></pre> <p>loaddata_appdoc - Load data from an application document</p> <pre><code>[...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments])\n\n  Loads the data from app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  In the base class, this always returns empty. This function should be overridden by each\n  subclass.\n\n  The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION.\n</code></pre> <p>struct2doc - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this always returns empty. It must be overridden in subclasses.\n  The documentation for overridden functions should be in the function APPDOC_DESCRIPTION.\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/markgarbage.m/","title":"CLASS ndi.app.markgarbage","text":"<pre><code>  ndi.app.markgarbage - an application for marking portions of recordings as \"garbage\" that shouldn't be analyzed\n\n  **Example 1**: Mark a time period as VALID (the rest of the interval is \"garbage\"), on an ndi.element E from ndi.session S\n\n    G = ndi.app.markgarbage(S); % create app instance\n    epoch_id = 'myepochid';\n    timeref = ndi.time.timereference(E, 'dev_local_time', epoch_id, 0); % time reference is local time on ndi.element E\n    t0 = 10; t1 = 100; % mark from 10 to 100 seconds as valid\n    G.markvalidinterval(E, t0, timeref, t1, timeref);\n\n  **Example 2**: Clear previously marked garbage periods on an ndi.element E from ndi.session S\n\n    G = ndi.app.markgarbage(S); % create app instance\n    G.clearvalidinterval(E);\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/markgarbage.m/#superclasses","title":"Superclasses","text":"<p>ndi.app, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/markgarbage.m/#properties","title":"Properties","text":"Property Description session name"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/markgarbage.m/#methods","title":"Methods","text":"Method Description clearvalidinterval clear all 'valid_interval' records for an ndi.epoch.epochset from session database identifyvalidintervals identify valid region within an interval loadvalidinterval Load all valid interval records from session database markgarbage an app to help exclude garbage data from sessions markvalidinterval mark a valid intervalin an epoch (all else is garbage) newdocument return a new database document of type ndi.document based on an app savevalidinterval save a valid interval structure to the session database searchquery return a search query for an ndi.document related to this app varappname return the name of the application for use in variable creation version_url return the app version and url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/markgarbage.m/#methods-help","title":"Methods help","text":"<p>clearvalidinterval - clear all 'valid_interval' records for an ndi.epoch.epochset from session database</p> <pre><code>B = CLEARVALIDINTERVAL(NDI_APP_MARKGARBAGE_OBJ, NDI_EPOCHSET_OBJ)\n\n  Clears all valid interval entries from the session database for object NDI_EPOCHSET_OBJ.\n\n  Returns 1 on success, 0 otherwise.\n\n  See also: ndi.app.markgarbage/MARKVALIDINTERVAL, ndi.app.markgarbage/SAVEALIDINTERVAL, ...\n       ndi.app.markgarbage/LOADVALIDINTERVAL\n</code></pre> <p>identifyvalidintervals - identify valid region within an interval</p> <pre><code>INTERVALS = IDENTIFYVALIDINTERVALS(NDI_APP_MARKGARBAGE_OBJ, NDI_EPOCHSET_OBJ, TIMEREF, T0, T1)\n\n  Examines whether there is a stored 'validinterval' variable by the app 'ndi.app.markgarbage' for\n  this NDI_EPOCHSET_OBJ, and, if so, returns valid intervals [t1_0 t1_1; t2_0 t2_1; ...] indicating\n  valid snips of data within the range T0 T1 (with respect to ndi.time.timereference object TIMEREF).\n  INTERVALS has time with respect to TIMEREF.\n\n  disp(['Call of identifyvalidintervals..']);\n</code></pre> <p>loadvalidinterval - Load all valid interval records from session database</p> <pre><code>[VI,MYDOC] = LOADVALIDINTERVAL(NDI_APP_MARKGARBAGE_OBJ, NDI_EPOCHSET_OBJ)\n\n  Loads stored valid interval records generated by ndi.app.markgarbage/MAKEVALIDINTERVAL\n\n  MYDOC is the ndi.document that was loaded.\n</code></pre> <p>markgarbage - an app to help exclude garbage data from sessions</p> <pre><code>NDI_APP_MARKGARBAGE_OBJ = ndi.app.markgarbage(SESSION)\n\n  Creates a new ndi.app.markgarbage object that can operate on\n  NDI_SESSIONS. The app is named 'ndi.app.markgarbage'.\n\n    Documentation for ndi.app.markgarbage/markgarbage\n       doc ndi.app.markgarbage\n</code></pre> <p>markvalidinterval - mark a valid intervalin an epoch (all else is garbage)</p> <pre><code>B = MARKVALIDINTERVAL(NDI_APP_MARKGARBAGE_APP, NDI_EPOCHSET_OBJ, T0, TIMEREF_T0, ...\n     T1, TIMEREF_T1)\n\n  Saves a variable marking a valid interval from T0 to T1 with respect\n  to an ndi.time.timereference object TIMEREF_T0 (for T0) and TIMEREF_T1 (for T1) for\n  an ndi.epoch.epochset object NDI_EPOCHSET_OBJ.  Examples of ndi.epoch.epochset objects include\n  ndi.daq.system and ndi.probe and their subclasses.\n\n  TIMEREF_T0 and TIMEREF_T1 are saved as a name and type for looking up later.\n\n  developer note: might be good idea to make sure these times exist at saving\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on an app</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ)\n\n  Creates a blank ndi.document object of type 'app'. The 'app.name' field\n  is filled out with the name of NDI_APP_OBJ.VARAPPNAME().\n\nHelp for ndi.app.markgarbage/newdocument is inherited from superclass ndi.app\n</code></pre> <p>savevalidinterval - save a valid interval structure to the session database</p> <pre><code>B = SAVEVALIDINTERVAL(NDI_APP_MARKGARBAGE_OBJ, NDI_EPOCHSET_OBJ, VALIDINTERVALSTRUCT)\n\n  Saves a VALIDINTERVALSTRUCT to an experiment database, in the appropriate place for\n  the NDI_EPOCHSET_OBJ data.\n\n  If the entry is a duplicate, it is not saved but b is still 1.\n</code></pre> <p>searchquery - return a search query for an ndi.document related to this app</p> <pre><code>C = SEARCHQUERY(NDI_APP_OBJ)\n\n  Returns a cell array of strings that allow the creation or searching of an\n  ndi.database document for this app with field 'app' that has subfield 'name' equal\n  to the app's VARAPPNAME.\n\nHelp for ndi.app.markgarbage/searchquery is inherited from superclass ndi.app\n</code></pre> <p>varappname - return the name of the application for use in variable creation</p> <pre><code>AN = VARAPPNAME(NDI_APP_OBJ)\n\n  Returns the name of the app modified for use as a variable name, either as\n  a Matlab variable or a name in a document.\n\nHelp for ndi.app.markgarbage/varappname is inherited from superclass ndi.app\n</code></pre> <p>version_url - return the app version and url</p> <pre><code>[V, URL] = VERSION_URL(NDI_APP_OBJ)\n\n  Return the version and url for the current app. In the base class,\n  it is assumed that GIT is used and is available from the command line\n  and the version and url are read from the git directory.\n\n  Developers should override this method in their own class if they use a\n  different version control system.\n\nHelp for ndi.app.markgarbage/version_url is inherited from superclass ndi.app\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/oridirtuning.m/","title":"CLASS ndi.app.oridirtuning","text":"<pre><code>  ndi.app.oridirtuning - an app to calculate and analyze orientation/direction tuning curves\n\n  NDI_APP_ORIDIRTUNING_OBJ = ndi.app.oridirtuning(SESSION)\n\n  Creates a new ndi.app.oridirtuning object that can operate on\n  NDI_SESSIONS. The app is named 'ndi.app.oridirtuning'.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/oridirtuning.m/#superclasses","title":"Superclasses","text":"<p>ndi.app, ndi.documentservice, ndi.app.appdoc</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/oridirtuning.m/#properties","title":"Properties","text":"Property Description session name doc_types doc_document_types doc_session"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/oridirtuning.m/#methods","title":"Methods","text":"Method Description add_appdoc Load data from an application document appdoc_description a function that prints a description of all appdoc types calculate_all_oridir_indexes ndi.app.oridirtuning/calculate_all_oridir_indexes is a function. calculate_all_tuning_curves ndi.app.oridirtuning/calculate_all_tuning_curves is a function. calculate_oridir_indexes CALCULATE_ORIDIR_INDEXES calculate_tuning_curve calculate an orientation/direction tuning curve from stimulus responses clear_appdoc remove an ndi.app.appdoc document from a session database defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters find_appdoc find an ndi_app_appdoc document in the session database is_oridir_stimulus_response ndi.app.oridirtuning/is_oridir_stimulus_response is a function. isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? loaddata_appdoc Load data from an application document newdocument return a new database document of type ndi.document based on an app oridirtuning an app to calculate and analyze orientation/direction tuning curves plot_oridir_response ndi.app.oridirtuning/plot_oridir_response is a function. searchquery return a search query for an ndi.document related to this app struct2doc create an ndi.document from an input structure and input parameters varappname return the name of the application for use in variable creation version_url return the app version and url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/oridirtuning.m/#methods-help","title":"Methods help","text":"<p>add_appdoc - Load data from an application document</p> <pre><code>[...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ...\n      APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments])\n\n  Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data\n  specified by APPDOC_STRUCT.  [additional inputs] are used to find or specify the\n  NDI_document in the database. They are passed to the function FIND_APPDOC,\n  so see help FIND_APPDOC for the documentation for each app.\n\n  The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than\n  1 if the document already exists).\n\n  If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is\n  assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it\n  is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT.\n\n  This function also takes a string DOCEXISTSACTION that describes what it should do\n  in the event that the document fitting the [additional inputs] already exists:\n  DOCEXISTACTION value      | Description\n  ----------------------------------------------------------------------------------\n  'Error'                   | An error is generating indicating the document exists.\n  'NoAction'                | The existing document is left alone. The existing ndi.document\n                            |    is returned in DOC.\n  'Replace'                 | Replace the document; note that this deletes all NDI_DOCUMENTS\n                            |    that depend on the original.\n  'ReplaceIfDifferent'      | Conditionally replace the document, but only if the\n                            |    the data structures that define the document are not equal.\n\nHelp for ndi.app.oridirtuning/add_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>appdoc_description - a function that prints a description of all appdoc types</p> <pre><code>For ndi_app_oridirtuning, there are the following types:\n  APPDOC_TYPE                   | Description\n  ----------------------------------------------------------------------------------------------\n  'orientation_direction_tuning'| A document that describes the parameters for orientation and\n                                | direction tuning curves\n  'tuningcurve'                 | A document that describes the parameters for a stimulus tuning\n                                | curves\n  ----------------------------------------------------------------------------------------------\n\n  ----------------------------------------------------------------------------------------------\n  APPDOC 1: ORIENTATION_DIRECTION_TUNING\n  ----------------------------------------------------------------------------------------------\n\n    -----------------------------------------\n    | ORIENTATION_DIRECTION_TUNING -- ABOUT |\n    -----------------------------------------\n\n    ORIENTATION_TUNING_DIRECTION documents parameters for the orientation and direction tuning curves.\n    Depends on element_id and stimulus_tuningcurve_id.\n\n    Definition:\n    stimulus/vision/oridir/orientation_direction_tuning.json\n\n    --------------------------------------------\n    | ORIENTATION_DIRECTION_TUNING -- CREATION |\n    --------------------------------------------\n\n    DOC = STRUCT2DOC(NDI_APP_ORIDIRTUNING_OBJ, 'orientation_direction_tuning', APPDOC_STRUCT, ...)\n\n    APPDOC_STRUCT should contain the following fields:\n    Fieldname                 | Description\n    -------------------------------------------------------------------------\n    tuning_doc_id             | stimulus_tuningcurve_id of document\n\n    ------------------------------------------\n    | ORIENTATION_DIRECTION_TUNING - FINDING |\n    ------------------------------------------\n\n    [ORIENTATION_DIRECTION_TUNING_DOC] = FIND_APPDOC(NDI_APP_ORIDIRTUNING_OBJ, 'orientation_direction_tuning', TUNING_DOC, ELEMENT_ID, ...)\n\n    INPUTS:\n       TUNING_DOC - tuning document\n       ELEMENT_ID - spike element id\n    OUTPUT:\n       ORIENTATION_DIRECTION_TUNING - The ndi.document(s) of the calculated orientation and direction tuning curves\n\n  ----------------------------------------------------------------------------------------------\n  APPDOC 2: STIMULUS_TUNINGCURVE\n  ----------------------------------------------------------------------------------------------\n\n    ---------------------------------\n    | STIMULUS_TUNINGCURVE -- ABOUT |\n    ---------------------------------\n\n    STIMULUS_TUNINGCURVE that has response values as a function of stimulus direction or orientation\n\n    Definition: stimulus/stimulus_tuningcurve.json\n\n    ------------------------------------\n    | STIMULUS_TUNINGCURVE -- CREATION |\n    ------------------------------------\n\n    DOC = STRUCT2DOC(NDI_APP_ORIDIRTUNING_OBJ, 'stimulus_tuningcurve', APPDOC_STRUCT, ...)\n\n    APPDOC_STRUCT should contain the following fields:\n    Fieldname                 | Description\n    -------------------------------------------------------------------------\n    element_id                | spike element id of document\n\n    ----------------------------------\n    | STIMULUS_TUNINGCURVE - FINDING |\n    ----------------------------------\n\n    [STIMULUS_TUNINGCURVE_DOC] = FIND_APPDOC(NDI_APP_ORIDIRTUNING_OBJ, 'stimulus_tuningcurve', ELEMENT, ...)\n\n    INPUTS:\n       ELEMENT - first input needed to find doctype1 documents\n    OUTPUT:\n       STIMULUS_TUNINGCURVE - The ndi.document(s) of the specified spike element's stimulus tuning curve\n</code></pre> <p>calculate_all_oridir_indexes - ndi.app.oridirtuning/calculate_all_oridir_indexes is a function.</p> <pre><code>oriprops = calculate_all_oridir_indexes(ndi_app_oridirtuning_obj, ndi_element_obj, docexistsaction)\n</code></pre> <p>calculate_all_tuning_curves - ndi.app.oridirtuning/calculate_all_tuning_curves is a function.</p> <pre><code>tuning_doc = calculate_all_tuning_curves(ndi_app_oridirtuning_obj, ndi_element_obj, docexistsaction)\n</code></pre> <p>calculate_oridir_indexes - CALCULATE_ORIDIR_INDEXES</p> <pre><code>\n</code></pre> <p>calculate_tuning_curve - calculate an orientation/direction tuning curve from stimulus responses</p> <pre><code>TUNING_DOC = CALCULATE_TUNING_CURVE(NDI_APP_ORIDIRTUNING_OBJ, NDI_ELEMENT_OBJ, NDI_RESPONSE_DOC)\n</code></pre> <p>clear_appdoc - remove an ndi.app.appdoc document from a session database</p> <pre><code>B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Deletes the app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  B is 1 if the document is found, and 0 otherwise.\n\nHelp for ndi.app.oridirtuning/clear_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type</p> <pre><code>APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE)\n\n  Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object.\n\n  In the base class, the blank version of the ndi.document is read in and the\n  default structure is built from the ndi.document's class property list.\n\nHelp for ndi.app.oridirtuning/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc2struct - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  The ndi.document is created according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this uses the property info in the ndi.document to load the data structure.\n</code></pre> <p>find_appdoc - find an ndi_app_appdoc document in the session database</p> <pre><code>See ndi_app_oridirtuning/APPDOC_DESCRIPTION for documentation.\n</code></pre> <p>is_oridir_stimulus_response - ndi.app.oridirtuning/is_oridir_stimulus_response is a function.</p> <pre><code>b = is_oridir_stimulus_response(ndi_app_oridirtuning_obj, response_doc)\n</code></pre> <p>isequal_appdoc_struct - are two APPDOC data structures the same (equal)?</p> <pre><code>B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2)\n\n  Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. In the base class, this is\n  true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is,\n  B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2).\n\nHelp for ndi.app.oridirtuning/isequal_appdoc_struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC?</p> <pre><code>[B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT)\n\n  Examines APPDOC_STRUCT and determines whether it is a valid input for creating an\n  ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise.\n\n  In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.'\n\nHelp for ndi.app.oridirtuning/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>loaddata_appdoc - Load data from an application document</p> <pre><code>[...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments])\n\n  Loads the data from app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  In the base class, this always returns empty. This function should be overridden by each\n  subclass.\n\n  The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION.\n\nHelp for ndi.app.oridirtuning/loaddata_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on an app</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ)\n\n  Creates a blank ndi.document object of type 'app'. The 'app.name' field\n  is filled out with the name of NDI_APP_OBJ.VARAPPNAME().\n\nHelp for ndi.app.oridirtuning/newdocument is inherited from superclass ndi.app\n</code></pre> <p>oridirtuning - an app to calculate and analyze orientation/direction tuning curves</p> <pre><code>NDI_APP_ORIDIRTUNING_OBJ = ndi.app.oridirtuning(SESSION)\n\n  Creates a new ndi.app.oridirtuning object that can operate on\n  NDI_SESSIONS. The app is named 'ndi.app.oridirtuning'.\n\n    Documentation for ndi.app.oridirtuning/oridirtuning\n       doc ndi.app.oridirtuning\n</code></pre> <p>plot_oridir_response - ndi.app.oridirtuning/plot_oridir_response is a function.</p> <pre><code>plot_oridir_response(ndi_app_oridirtuning_obj, oriprops_doc)\n</code></pre> <p>searchquery - return a search query for an ndi.document related to this app</p> <pre><code>C = SEARCHQUERY(NDI_APP_OBJ)\n\n  Returns a cell array of strings that allow the creation or searching of an\n  ndi.database document for this app with field 'app' that has subfield 'name' equal\n  to the app's VARAPPNAME.\n\nHelp for ndi.app.oridirtuning/searchquery is inherited from superclass ndi.app\n</code></pre> <p>struct2doc - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APP_ORIDIRTUNING_OBJ, APPDOC_TYPE, APPDOC_STRUCT, ...)\n\n  For ndi_app_oridirtuning, one can use an APPDOC_TYPE of the following:\n  APPDOC_TYPE                   | Description\n  ----------------------------------------------------------------------------------------------\n  'orientation_tuning_direction'| A document that describes the parameters to be used for\n                                | spike element's orientation tuning direction\n  'stimulus_tuningcurve'        | A document that describes the parameters to be used for\n                                | spike element's tuning curve\n\n  See APPDOC_DESCRIPTION for a list of the parameters.\n</code></pre> <p>varappname - return the name of the application for use in variable creation</p> <pre><code>AN = VARAPPNAME(NDI_APP_OBJ)\n\n  Returns the name of the app modified for use as a variable name, either as\n  a Matlab variable or a name in a document.\n\nHelp for ndi.app.oridirtuning/varappname is inherited from superclass ndi.app\n</code></pre> <p>version_url - return the app version and url</p> <pre><code>[V, URL] = VERSION_URL(NDI_APP_OBJ)\n\n  Return the version and url for the current app. In the base class,\n  it is assumed that GIT is used and is available from the command line\n  and the version and url are read from the git directory.\n\n  Developers should override this method in their own class if they use a\n  different version control system.\n\nHelp for ndi.app.oridirtuning/version_url is inherited from superclass ndi.app\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikeextractor.m/","title":"CLASS ndi.app.spikeextractor","text":"<pre><code>  ndi.app.spikeextractor - an app to extract elements found in sessions\n\n  NDI_APP_SPIKEEXTRACTOR_OBJ = ndi.app.spikeextractor(SESSION)\n\n  Creates a new ndi_app_spikeextractor object that can operate on\n  NDI_SESSIONS. The app is named 'ndi_app_spikeextractor'.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikeextractor.m/#superclasses","title":"Superclasses","text":"<p>ndi.app, ndi.documentservice, ndi.app.appdoc</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikeextractor.m/#properties","title":"Properties","text":"Property Description session name doc_types doc_document_types doc_session"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikeextractor.m/#methods","title":"Methods","text":"Method Description add_appdoc Load data from an application document appdoc_description a function that prints a description of all appdoc types clear_appdoc remove an ndi.app.appdoc document from a session database defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters extract method that extracts spikes from epochs of an NDI_ELEMENT_TIMESERIES_OBJ filter filter data based on a filter structure find_appdoc find an ndi_app_appdoc document in the session database isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? loaddata_appdoc load data from an application document makefilterstruct make a filter structure for a given sampling rate and extraction parameters newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app spikeextractor an app to extract elements found in sessions struct2doc create an ndi.document from an input structure and input parameters varappname return the name of the application for use in variable creation version_url return the app version and url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikeextractor.m/#methods-help","title":"Methods help","text":"<p>add_appdoc - Load data from an application document</p> <pre><code>[...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ...\n      APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments])\n\n  Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data\n  specified by APPDOC_STRUCT.  [additional inputs] are used to find or specify the\n  NDI_document in the database. They are passed to the function FIND_APPDOC,\n  so see help FIND_APPDOC for the documentation for each app.\n\n  The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than\n  1 if the document already exists).\n\n  If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is\n  assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it\n  is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT.\n\n  This function also takes a string DOCEXISTSACTION that describes what it should do\n  in the event that the document fitting the [additional inputs] already exists:\n  DOCEXISTACTION value      | Description\n  ----------------------------------------------------------------------------------\n  'Error'                   | An error is generating indicating the document exists.\n  'NoAction'                | The existing document is left alone. The existing ndi.document\n                            |    is returned in DOC.\n  'Replace'                 | Replace the document; note that this deletes all NDI_DOCUMENTS\n                            |    that depend on the original.\n  'ReplaceIfDifferent'      | Conditionally replace the document, but only if the\n                            |    the data structures that define the document are not equal.\n\nHelp for ndi.app.spikeextractor/add_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>appdoc_description - a function that prints a description of all appdoc types</p> <pre><code>For ndi_app_spikeextractor, there are the following types:\n  APPDOC_TYPE                 | Description\n  ----------------------------------------------------------------------------------------------\n  'extraction_parameters'     | A document that describes the parameters to be used for extraction\n  ['extraction_parameters'... | A document that describes modifications to the parameters to be used for extracting\n      '_modification']        |    a particular epoch.\n  'spikewaves'                | A document that stores spike waves and spike times found by the extractor in an epoch\n  ----------------------------------------------------------------------------------------------\n\n  ----------------------------------------------------------------------------------------------\n  APPDOC 1: EXTRACTION_PARAMETERS\n  ----------------------------------------------------------------------------------------------\n\n    ----------------------------------\n    | EXTRACTION_PARAMETERS -- ABOUT |\n    ----------------------------------\n\n    EXTRACTION_PARAMETERS documents hold the parameters that are to be used to guide the extraction of\n    spikewaves.\n\n    Definition: app/spikeextractor/extraction_parameters\n\n    -------------------------------------\n    | EXTRACTION_PARAMETERS -- CREATION |\n    -------------------------------------\n\n    DOC = STRUCT2DOC(NDI_APP_SPIKEEXTRACTOR_OBJ, 'extraction_parameters', EXTRACTION_PARAMS, EXTRACTION_NAME)\n\n    EXTRACTION_NAME is a string containing the name of the extraction document.\n\n    EXTRACTION_PARAMS should contain the following fields:\n    Fieldname                 | Description\n    -------------------------------------------------------------------------\n    center_range (10)         | Range in samples to find spike center\n    overlap (0.5)             | Overlap allowed\n    read_time (30)            | Number of seconds to read in at a single time\n    refractory_samples (10)   | Number of samples to use as a refractory period\n    spike_sample_start (-9)   | Samples before the threshold to include % unclear if time or sample\n    spike_sample_stop (20)    | Samples after the threshold to include % unclear if time or sample\n    start_time (1)            | First sample to read\n    do_filter (1)             | Should we perform a filter? (0/1)\n    filter_type               | What filter? Default is 'cheby1high' but can also be 'none'\n     ('cheby1high')           |\n    filter_low (0)            | Low filter frequency\n    filter_high (300)         | Filter high frequency\n    filter_order (4)          | Filter order\n    filter_ripple (0.8)       | Filter ripple parameter\n    threshold_method          | Threshold method. Can be \"standard_deviation\" or \"absolute\"\n    threshold_parameter       | Threshold parameter. If threshold_method is \"standard_deviation\" then\n       ('standard_deviation') |    this parameter is multiplied by the empirical standard deviation.\n                              |    If \"absolute\", then this value is taken to be the absolute threshold.\n    threshold_sign (-1)       | Threshold crossing sign (-1 means high-to-low, 1 means low-to-high)\n\n    ------------------------------------\n    | EXTRACTION_PARAMETERS -- FINDING |\n    ------------------------------------\n\n    [EXTRACTION_PARAMETERS_DOC] = FIND_APPDOC(NDI_APP_SPIKEEXTRACTOR_OBJ, ...\n         'extraction_parameters', EXTRACTION_PARAMETERS_NAME)\n\n    INPUTS:\n      EXTRACTION_PARAMETERS_NAME - the name of the extraction parameter document\n    OUTPUT:\n      Returns the extraction parameters ndi.document with the name EXTRACTION_NAME.\n\n    ------------------------------------\n    | EXTRACTION_PARAMETERS -- LOADING |\n    ------------------------------------\n\n    [EXTRACTION_PARAMETERS_DOC] = LOADDATA_APPDOC(NDI_APP_SPIKEEXTRACTOR_OBJ, ...\n         'extraction_parameters', EXTRACTION_NAME)\n\n    INPUTS:\n      EXTRACTION_PARAMETERS_NAME - the name of the extraction parameter document\n    OUTPUT:\n      Returns the extraction parameters ndi.document with the name EXTRACTION_NAME.\n\n\n  ----------------------------------------------------------------------------------------------\n  APPDOC 2: EXTRACTION_PARAMETERS_MODIFICATION\n  ----------------------------------------------------------------------------------------------\n\n    -----------------------------------------------\n    | EXTRACTION_PARAMETERS_MODIFICATION -- ABOUT |\n    -----------------------------------------------\n\n    EXTRACTION_PARAMETERS_MODIFICATION documents allow the user to modify the spike extraction\n    parameters for a specific epoch.\n\n    Definition: app/spikeextractor/extraction_parameters_modification\n\n    --------------------------------------------------\n    | EXTRACTION_PARAMETERS_MODIFICATION -- CREATION |\n    --------------------------------------------------\n\n    DOC = STRUCT2DOC(NDI_APP_SPIKEEXTRACTOR_OBJ, 'extraction_parameters_modification',  ...\n       EXTRACTION_PARAMS, EXTRACTION_NAME)\n\n    EXTRACTION_NAME is a string containing the name of the extraction document.\n\n    EXTRACTION_PARAMS should contain the following fields:\n    Fieldname                 | Description\n    -------------------------------------------------------------------------\n    center_range (10)         | Range in samples to find spike center\n    overlap (0.5)             | Overlap allowed\n    read_time (30)            | Number of seconds to read in at a single time\n    refractory_samples (10)   | Number of samples to use as a refractory period\n    spike_sample_start (-9)   | Samples before the threshold to include % unclear if time or sample\n    spike_sample_stop (20)    | Samples after the threshold to include % unclear if time or sample\n    start_time (1)            | First sample to read\n    do_filter (1)             | Should we perform a filter? (0/1)\n    filter_type               | What filter? Default is 'cheby1high' but can also be 'none'\n     ('cheby1high')           |\n    filter_low (0)            | Low filter frequency\n    filter_high (300)         | Filter high frequency\n    filter_order (4)          | Filter order\n    filter_ripple (0.8)       | Filter ripple parameter\n    threshold_method          | Threshold method. Can be \"standard_deviation\" or \"absolute\"\n    threshold_parameter       | Threshold parameter. If threshold_method is \"standard_deviation\" then\n       ('standard_deviation') |    this parameter is multiplied by the empirical standard deviation.\n                              |    If \"absolute\", then this value is taken to be the absolute threshold.\n    threshold_sign (-1)       | Threshold crossing sign (-1 means high-to-low, 1 means low-to-high)\n\n    -------------------------------------------------\n    | EXTRACTION_PARAMETERS_MODIFICATION -- FINDING |\n    -------------------------------------------------\n\n    [EXTRACTION_PARAMETERS_MODIFICATION_DOC] = FIND_APPDOC(NDI_APP_SPIKEEXTRACTOR_OBJ, ...\n         'extraction_parameters_modification', NDI_TIMESERIES_OBJ, EPOCHID, EXTRACTION_NAME)\n\n    INPUTS:\n       NDI_TIMESERIES_OBJ - the ndi.time.timeseries object that was used in the extraction\n       EPOCH - the epoch identifier to be accessed\n       EXTRACTION_NAME - the name of the extraction parameters document used in the extraction\n    OUTPUT:\n      Returns the extraction parameters modification ndi.document with the name EXTRACTION_NAME\n       for the named EPOCHID and NDI_TIMESERIES_OBJ.\n\n    -------------------------------------------------\n    | EXTRACTION_PARAMETERS_MODIFICATION -- LOADING |\n    -------------------------------------------------\n\n    [EXTRACTION_PARAMETERS_DOC] = LOADDATA_APPDOC(NDI_APP_SPIKEEXTRACTOR_OBJ, ...\n         'extraction_parameters_modification', NDI_TIMESERIES_OBJ, EPOCHID, EXTRACTION_NAME)\n\n    INPUTS:\n       NDI_TIMESERIES_OBJ - the ndi.time.timeseries object that was used in the extraction\n       EPOCH - the epoch identifier to be accessed\n       EXTRACTION_PARAMETERS_NAME - the name of the extraction parameter document\n    OUTPUT:\n      Returns the extraction parameters modification ndi.document with the name EXTRACTION_NAME.\n\n  ----------------------------------------------------------------------------------------------\n  APPDOC 3: SPIKEWAVES\n  ----------------------------------------------------------------------------------------------\n\n    -----------------------\n    | SPIKEWAVES -- ABOUT |\n    -----------------------\n\n    SPIKEWAVES documents store the spike waveforms that are read during a spike extraction and the\n    time of each spike in the epoch's local time. It DEPENDS ON the ndi.time.timeseries object on\n    which the extraction is performed and the EXTRACTION_PARAMETERS that described the extraction.\n\n    Definition: app/spikeextractor/spikewaves\n\n    --------------------------\n    | SPIKEWAVES -- CREATION |\n    --------------------------\n\n    Spikewaves documents are created internally by the EXTRACT function\n\n    ------------------------\n    | SPIKEWAVES - FINDING |\n    ------------------------\n\n    [SPIKEWAVES_DOC] = FIND_APPDOC(NDI_APP_SPIKEEXTRACTOR_OBJ, 'spikewaves', ...\n                                NDI_TIMESERIES_OBJ, EPOCH, EXTRACTION_NAME)\n\n    INPUTS:\n       NDI_TIMESERIES_OBJ - the ndi.time.timeseries object that was used in the extraction\n       EPOCH - the epoch identifier to be accessed\n       EXTRACTION_NAME - the name of the extraction parameters document used in the extraction\n    OUTPUT:\n       SPIKEWAVES_DOC - the ndi.document of the extracted spike waves.\n\n    ------------------------\n    | SPIKEWAVES - LOADING |\n    ------------------------\n\n    [CONCATENATED_SPIKES, WAVEPARAMETERS, SPIKETIMES, SPIKEWAVES_DOC] = LOADDATA_APPDOC(NDI_APP_SPIKEEXTRACTOR_OBJ, 'spikewaves', ...\n                                NDI_TIMESERIES_OBJ, EPOCH, EXTRACTION_NAME)\n\n    INPUTS:\n       NDI_TIMESERIES_OBJ - the ndi.time.timeseries object that was used in the extraction\n       EPOCH - the epoch identifier to be accessed\n       EXTRACTION_NAME - the name of the extraction parameters document used in the extraction\n\n    OUTPUTS:\n       CONCATENATED_SPIKES - an array of spike waveforms SxDxN, where S is the number of samples per channel of each waveform,\n          D is the number of channels (dimension), and N is the number of spike waveforms\n       WAVEPARAMETERS - a structure with the following fields:\n         Field              | Description\n         --------------------------------------------------------\n         numchannels        | Number of channels in each spike\n         S0                 | Number of samples before spike center\n                            |    (usually negative)\n         S1                 | Number of samples after spike center\n                            |    (usually positive)\n         samplerate         | The sampling rate\n       SPIKETIMES - the time of each spike wave, in local epoch time coordinates\n       SPIKEWAVES_DOC - the ndi.document of the extracted spike waves.\n</code></pre> <p>clear_appdoc - remove an ndi.app.appdoc document from a session database</p> <pre><code>B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Deletes the app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  B is 1 if the document is found, and 0 otherwise.\n\nHelp for ndi.app.spikeextractor/clear_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type</p> <pre><code>APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE)\n\n  Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object.\n\n  In the base class, the blank version of the ndi.document is read in and the\n  default structure is built from the ndi.document's class property list.\n\nHelp for ndi.app.spikeextractor/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc2struct - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this uses the property info in the ndi.document to load the data structure.\n\nHelp for ndi.app.spikeextractor/doc2struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>extract - method that extracts spikes from epochs of an NDI_ELEMENT_TIMESERIES_OBJ</p> <pre><code>EXTRACT(NDI_APP_SPIKEEXTRACTOR_OBJ, NDI_TIMESERIES_OBJ, EPOCH, EXTRACTION_NAME, [REDO], [T0 T1])\n  TYPE is the type of probe if any\n  combination of NAME and TYPE must return at least one probe from session\n  EPOCH is an index number or id to select epoch to extract, or can be a cell array of epoch number/ids\n  EXTRACTION_NAME name given to find ndi_doc in database\n  REDO - if 1, then extraction is re-done for epochs even if it has been done before with same extraction parameters\n  [T0 T1] - if given, then restricts the extraction to be between times t0 and t1; default is [-Inf Inf]\n</code></pre> <p>filter - filter data based on a filter structure</p> <pre><code>DATA_OUT = FILTER(NDI_APP_SPIKEEXTRACTOR_OBJ, DATA_IN, FILTERSTRUCT)\n\n  Filters data based on FILTERSTRUCT (see ndi_app_spikeextractor/MAKEFILTERSTRUCT)\n</code></pre> <p>find_appdoc - find an ndi_app_appdoc document in the session database</p> <pre><code>See ndi_app_spikeextractor/APPDOC_DESCRIPTION for documentation.\n\n  See also: ndi_app_spikeextractor/APPDOC_DESCRIPTION\n</code></pre> <p>isequal_appdoc_struct - are two APPDOC data structures the same (equal)?</p> <pre><code>B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2)\n\n  Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. In the base class, this is\n  true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is,\n  B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2).\n\nHelp for ndi.app.spikeextractor/isequal_appdoc_struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC?</p> <pre><code>[B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APP_SPIKEEXTRACTOR_OBJ, APPDOC_TYPE, APPDOC_STRUCT)\n\n  Examines APPDOC_STRUCT and determines whether it is a valid input for creating an\n  ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise.\n\n  For ndi_app_spikeextractor, one can use an APPDOC_TYPE of the following:\n  APPDOC_TYPE               | Description\n  ----------------------------------------------------------------------------------------------\n  'extraction_parameters'   | A document that describes the parameters to be used for extraction\n</code></pre> <p>loaddata_appdoc - load data from an application document</p> <pre><code>See ndi_app_spikeextractor/APPDOC_DESCRIPTION for documentation.\n\n  See also: ndi_app_spikeextractor/APPDOC_DESCRIPTION\n</code></pre> <p>makefilterstruct - make a filter structure for a given sampling rate and extraction parameters</p> <pre><code>FILTERSTRUCT = MAKEFILTERSTRUCT(NDI_APP_SPIKEEXTRACTOR_OBJ, EXTRACTION_DOC, SAMPLE_RATE)\n\n  Given an EXTRACTION_DOC of parameters and a sampling rate SAMPLE_RATE, make a filter\n  structure for passing to FILTERDATA.\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on an app</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ)\n\n  Creates a blank ndi.document object of type 'app'. The 'app.name' field\n  is filled out with the name of NDI_APP_OBJ.VARAPPNAME().\n\nHelp for ndi.app.spikeextractor/newdocument is inherited from superclass ndi.app\n</code></pre> <p>searchquery - return a search query for an ndi.document related to this app</p> <pre><code>C = SEARCHQUERY(NDI_APP_OBJ)\n\n  Returns a cell array of strings that allow the creation or searching of an\n  ndi.database document for this app with field 'app' that has subfield 'name' equal\n  to the app's VARAPPNAME.\n\nHelp for ndi.app.spikeextractor/searchquery is inherited from superclass ndi.app\n</code></pre> <p>spikeextractor - an app to extract elements found in sessions</p> <pre><code>NDI_APP_SPIKEEXTRACTOR_OBJ = ndi.app.spikeextractor(SESSION)\n\n  Creates a new ndi_app_spikeextractor object that can operate on\n  NDI_SESSIONS. The app is named 'ndi_app_spikeextractor'.\n\n    Documentation for ndi.app.spikeextractor/spikeextractor\n       doc ndi.app.spikeextractor\n</code></pre> <p>struct2doc - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APP_SPIKEEXTRACTOR_OBJ, APPDOC_TYPE, APPDOC_STRUCT, ...)\n\n  For ndi_app_spikeextractor, one can use an APPDOC_TYPE of the following:\n  APPDOC_TYPE                 | Description\n  ----------------------------------------------------------------------------------------------\n  'extraction_parameters'     | A document that describes the parameters to be used for extraction\n  ['extraction_parameters'... | A document that modifies the parameters to be used for extraction for a single epoch\n    '_modification']          |\n\n  See APPDOC_DESCRIPTION for a list of the parameters.\n</code></pre> <p>varappname - return the name of the application for use in variable creation</p> <pre><code>AN = VARAPPNAME(NDI_APP_OBJ)\n\n  Returns the name of the app modified for use as a variable name, either as\n  a Matlab variable or a name in a document.\n\nHelp for ndi.app.spikeextractor/varappname is inherited from superclass ndi.app\n</code></pre> <p>version_url - return the app version and url</p> <pre><code>[V, URL] = VERSION_URL(NDI_APP_OBJ)\n\n  Return the version and url for the current app. In the base class,\n  it is assumed that GIT is used and is available from the command line\n  and the version and url are read from the git directory.\n\n  Developers should override this method in their own class if they use a\n  different version control system.\n\nHelp for ndi.app.spikeextractor/version_url is inherited from superclass ndi.app\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikesorter.m/","title":"CLASS ndi.app.spikesorter","text":"<pre><code>  NDI.APP.spikesorter - an app to sort spikewaves found in sessions\n\n  NDI.APP.spikesorter_OBJ = ndi.app.spikesorter(SESSION)\n\n  Creates a new NDI_APP_spikesorter object that can operate on\n  NDI_SESSIONS. The app is named 'ndi_app_spikesorter'.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikesorter.m/#superclasses","title":"Superclasses","text":"<p>ndi.app, ndi.documentservice, ndi.app.appdoc</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikesorter.m/#properties","title":"Properties","text":"Property Description session name doc_types doc_document_types doc_session"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikesorter.m/#methods","title":"Methods","text":"Method Description add_appdoc Load data from an application document appdoc_description a function that prints a description of all appdoc types check_sorting_parameters check sorting parameters for validity clear_appdoc remove an ndi.app.appdoc document from a session database clusters2neurons create ndi.neuron objects from spike clusterings defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters find_appdoc find an ndi_app_appdoc document in the session database isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? loaddata_appdoc load data from an application document loadwaveforms load extracted spike waveforms for an ndi_timeseries_obj newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app spike_sort method that sorts spikes from specific probes in session to ndi_doc spikesorter an app to sort spikewaves found in sessions struct2doc create an ndi.document from an input structure and input parameters varappname return the name of the application for use in variable creation version_url return the app version and url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/spikesorter.m/#methods-help","title":"Methods help","text":"<p>add_appdoc - Load data from an application document</p> <pre><code>[...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ...\n      APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments])\n\n  Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data\n  specified by APPDOC_STRUCT.  [additional inputs] are used to find or specify the\n  NDI_document in the database. They are passed to the function FIND_APPDOC,\n  so see help FIND_APPDOC for the documentation for each app.\n\n  The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than\n  1 if the document already exists).\n\n  If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is\n  assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it\n  is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT.\n\n  This function also takes a string DOCEXISTSACTION that describes what it should do\n  in the event that the document fitting the [additional inputs] already exists:\n  DOCEXISTACTION value      | Description\n  ----------------------------------------------------------------------------------\n  'Error'                   | An error is generating indicating the document exists.\n  'NoAction'                | The existing document is left alone. The existing ndi.document\n                            |    is returned in DOC.\n  'Replace'                 | Replace the document; note that this deletes all NDI_DOCUMENTS\n                            |    that depend on the original.\n  'ReplaceIfDifferent'      | Conditionally replace the document, but only if the\n                            |    the data structures that define the document are not equal.\n\nHelp for ndi.app.spikesorter/add_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>appdoc_description - a function that prints a description of all appdoc types</p> <pre><code>For ndi_app_spikeextractor, there are the following types:\n  APPDOC_TYPE                 | Description\n  ----------------------------------------------------------------------------------------------\n  'sorting_parameters'        | A document that describes the parameters to be used for sorting\n  'spike_clusters'            | A document that contains the assignment of a set of spikes to clusters\n  ----------------------------------------------------------------------------------------------\n\n  ----------------------------------------------------------------------------------------------\n  APPDOC 1: SORTING_PARAMETERS\n  ----------------------------------------------------------------------------------------------\n\n    ----------------------------------\n    | SORTING_PARAMETERS -- ABOUT |\n    ----------------------------------\n\n    SORTING_PARAMETERS documents hold the parameters that are to be used to guide the extraction of\n    spikewaves.\n\n    Definition: apps/spikesorter/sorting_parameters.json\n\n    -------------------------------------\n    | SORTING_PARAMETERS -- CREATION |\n    -------------------------------------\n\n    DOC = STRUCT2DOC(NDI_APP_SPIKESORTER_OBJ, 'sorting_parameters', SORTING_PARAMS, SORTING_PARAMETERS_NAME)\n\n    SORTING_NAME is a string containing the name of the extraction document.\n\n    SORTING_PARAMS should contain the following fields:\n    Fieldname                 | Description\n    -------------------------------------------------------------------------\n    graphical_mode (1)        | Should we use graphical mode (1) or automatic mode (0)?\n    num_pca_features (10)     | Number of pca-driven features to use in the clustering calculation in automatic mode\n    interpolation (3)         | By how many times should we oversample the spikes, interpolating by splines?\n    min_clusters (3)          | Minimum clusters parameter for KlustaKwik in automatic mode\n    max_clusters (10)         | Maximum clusters parameter for KlustaKwik in automatic mode\n    num_start (5)             | Number of random starting positions in automatic mode\n\n\n    ------------------------------------\n    | SORTING_PARAMETERS -- FINDING |\n    ------------------------------------\n\n    [SORTING_PARAMETERS_DOC] = FIND_APPDOC(NDI_APP_SPIKESORTER_OBJ, ...\n         'sorting_parameters', SORTING_PARAMETERS_NAME)\n\n    INPUTS:\n      SORTING_PARAMETERS_NAME - the name of the sorting parameter document\n    OUTPUT:\n      Returns the sorting parameters ndi.document with the name SORTING_PARAMETERS_NAME.\n\n    ------------------------------------\n    | SORTING_PARAMETERS -- LOADING |\n    ------------------------------------\n\n    [SORTING_PARAMETERS_DOC] = LOADDATA_APPDOC(NDI_APP_SPIKESORTER_OBJ, ...\n         'sorting_parameters', SORTING_PARAMETERS_NAME)\n\n    INPUTS:\n      SORTING_PARAMETERS_NAME - the name of the sorting parameter document\n    OUTPUT:\n      Returns the sorting parameters ndi.document with the name SORTING_PARAMETERS_NAME.\n\n  ----------------------------------------------------------------------------------------------\n  APPDOC 2: SPIKE_CLUSTERS\n  ----------------------------------------------------------------------------------------------\n\n    ---------------------------\n    | SPIKE_CLUSTERS -- ABOUT |\n    ---------------------------\n\n    SPIKEWAVES documents store the spike waveforms that are read during a spike extraction. It\n    DEPENDS ON the ndi.time.timeseries object on which the extraction is performed and the SORTING_PARAMETERS\n    that described the extraction.\n\n    Definition: apps/spikesorter/spike_clusters\n\n    ------------------------------\n    | SPIKE_CLUSTERS -- CREATION |\n    ------------------------------\n\n    Spike cluster documents are created internally by the SORT function\n\n    ----------------------------\n    | SPIKE_CLUSTERS - FINDING |\n    ----------------------------\n\n    [SPIKE_CLUSTERS_DOC] = FIND_APPDOC(NDI_APP_SPIKESORTER_OBJ, 'spike_clusters', ...\n                                NDI_TIMESERIES_OBJ, SORTING_PARAMETERS_NAME)\n\n    INPUTS:\n       NDI_TIMESERIES_OBJ - the ndi.time.timeseries object that was used in the extraction\n       SORTING_PARAMETERS_NAME - the name of the sorting parameters document used in the sorting\n    OUTPUT:\n       SPIKECLUSTERS_DOC - the ndi.document of the cluster information\n\n    ----------------------------\n    | SPIKE_CLUSTERS - LOADING |\n    ----------------------------\n\n    [CLUSTERIDS, SPIKE_CLUSTERS_DOC] = LOADDATA_APPDOC(NDI_APP_SPIKESORTER_OBJ, 'spike_clusters', ...\n                                NDI_TIMESERIES_OBJ, SORTING_PARAMETERS_NAME, EXTRACTION_PARAMETERS_NAME)\n\n    INPUTS:\n       NDI_TIMESERIES_OBJ - the ndi.time.timeseries object that was used in the extraction\n       SORTING_PARAMETERS_NAME - the name of the sorting parameters document used in the sorting\n       EXTRACTION_NAME - the name of the extraction parameters document used in the extraction\n\n    OUTPUTS:\n       CLUSTERIDS: the cluster id number of each spike\n       SPIKE_CLUSTERS_DOC - the ndi.document of the clusters, which includes detailed cluster information.\n</code></pre> <p>check_sorting_parameters - check sorting parameters for validity</p> <pre><code>SORTING_PARAMETERS_STRUCT = CHECK_SORTING_PARAMETERS(NDI_APP_SPIKESORTER_OBJ, SORTING_PARAMETERS_STRUCT)\n\n  Given a sorting parameters structure (see help ndi.app.spikesorter/appdoc_description), check that the\n  parameters are provided and are in appropriate ranges.\n\n  interpolation\n</code></pre> <p>clear_appdoc - remove an ndi.app.appdoc document from a session database</p> <pre><code>B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Deletes the app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  B is 1 if the document is found, and 0 otherwise.\n\nHelp for ndi.app.spikesorter/clear_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>clusters2neurons - create ndi.neuron objects from spike clusterings</p> <pre><code>CLUSTERS2NEURONS(NDI_APP_SPIKESORTER_OBJ, NDI_TIMESERIES_OBJ, SORTING_PARAMETER_NAME, EXTRACTION_PARAMETERS_NAME, REDO)\n\n  Generates ndi.neuron objects for each spike cluster represented in the\n</code></pre> <p>defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type</p> <pre><code>APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE)\n\n  Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object.\n\n  In the base class, the blank version of the ndi.document is read in and the\n  default structure is built from the ndi.document's class property list.\n\nHelp for ndi.app.spikesorter/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc2struct - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this uses the property info in the ndi.document to load the data structure.\n\nHelp for ndi.app.spikesorter/doc2struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>find_appdoc - find an ndi_app_appdoc document in the session database</p> <pre><code>See ndi_app_spikesorter/APPDOC_DESCRIPTION for documentation.\n</code></pre> <p>isequal_appdoc_struct - are two APPDOC data structures the same (equal)?</p> <pre><code>B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2)\n\n  Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. In the base class, this is\n  true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is,\n  B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2).\n\nHelp for ndi.app.spikesorter/isequal_appdoc_struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC?</p> <pre><code>[B,ERRORMSG] = ISVALID_APPDOC_STRUCT(ndi.app.spikeextractor_OBJ, APPDOC_TYPE, APPDOC_STRUCT)\n\n  Examines APPDOC_STRUCT and determines whether it is a valid input for creating an\n  ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise.\n\n  For ndi_app_spikesorter, one can use an APPDOC_TYPE of the following:\n  APPDOC_TYPE               | Description\n  ----------------------------------------------------------------------------------------------\n  'sorting_parameters'   | A document that describes the parameters to be used for sorting\n  'spike_clusters'       | A document that describes the\n</code></pre> <p>loaddata_appdoc - load data from an application document</p> <pre><code>See ndi_app_spikesorter/APPDOC_DESCRIPTION for documentation.\n</code></pre> <p>loadwaveforms - load extracted spike waveforms for an ndi_timeseries_obj</p> <pre><code>[WAVEFORMS, WAVEFORMPARAMS, SPIKETIMES, EPOCHINFO, EXTRACTION_PARAMS_DOC, WAVEFORM_DOCS] = LOADWAVEFORMS(...\n          NDI_APP_SPIKESORTER_OBJ, NDI_TIMESERIES_OBJ,EXTRACTION_NAME)\n\n  Loads extracted spike WAVEFORMS from an NDI_TIMESERIERS_OBJ with extraction name EXTRACTION_NAME.\n\n  WAVEFORMS is a NumSamples x NumChannels x NumSpikes representation of each spike waveform.\n  WAVEFORMPARAMS is the set of waveform parameters from ndi.app.spikeextractor that includes information\n     such as the sample dimensions and the sampling rate of the underlying data.\n     See help ndi.app.spikeextractor.appdoc_description.\n  SPIKTIMES is time of each spike waveform.\n  EPOCHINFO - a structure with fields EpochStartSamples that indicates the waveform sample that begins each new\n     epoch from the NDI_TIMESERIES_OBJ and EpochNames that is a cell array of the epoch ID of each epoch.\n  EXTRACTION_PARAMS_DOC is the ndi.document for the extraction parameters.\n  WAVEFORM_DOCS is a cell array of ndi.documents for each extracted spike waveform document.\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on an app</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ)\n\n  Creates a blank ndi.document object of type 'app'. The 'app.name' field\n  is filled out with the name of NDI_APP_OBJ.VARAPPNAME().\n\nHelp for ndi.app.spikesorter/newdocument is inherited from superclass ndi.app\n</code></pre> <p>searchquery - return a search query for an ndi.document related to this app</p> <pre><code>C = SEARCHQUERY(NDI_APP_OBJ)\n\n  Returns a cell array of strings that allow the creation or searching of an\n  ndi.database document for this app with field 'app' that has subfield 'name' equal\n  to the app's VARAPPNAME.\n\nHelp for ndi.app.spikesorter/searchquery is inherited from superclass ndi.app\n</code></pre> <p>spike_sort - method that sorts spikes from specific probes in session to ndi_doc</p> <pre><code>SPIKE_CLUSTER_DOC = SPIKE_SORT(SPIKEWAVES, SORT_NAME, SORTING_PARAMS)\n %%%%%%%%%%%%\n  SORT_NAME name given to save sort to ndi_doc\n</code></pre> <p>spikesorter - an app to sort spikewaves found in sessions</p> <pre><code>NDI.APP.spikesorter_OBJ = ndi.app.spikesorter(SESSION)\n\n  Creates a new NDI_APP_spikesorter object that can operate on\n  NDI_SESSIONS. The app is named 'ndi_app_spikesorter'.\n\n    Documentation for ndi.app.spikesorter/spikesorter\n       doc ndi.app.spikesorter\n</code></pre> <p>struct2doc - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APP_SPIKESORTER_OBJ, APPDOC_TYPE, APPDOC_STRUCT, ...)\n\n  For ndi.app.spikesorter, one can use an APPDOC_TYPE of the following:\n  APPDOC_TYPE                 | Description\n  ----------------------------------------------------------------------------------------------\n  'sorting_parameters'  | A document that describes the parameters to be used for sorting\n\n\n  See APPDOC_DESCRIPTION for a list of the parameters.\n</code></pre> <p>varappname - return the name of the application for use in variable creation</p> <pre><code>AN = VARAPPNAME(NDI_APP_OBJ)\n\n  Returns the name of the app modified for use as a variable name, either as\n  a Matlab variable or a name in a document.\n\nHelp for ndi.app.spikesorter/varappname is inherited from superclass ndi.app\n</code></pre> <p>version_url - return the app version and url</p> <pre><code>[V, URL] = VERSION_URL(NDI_APP_OBJ)\n\n  Return the version and url for the current app. In the base class,\n  it is assumed that GIT is used and is available from the command line\n  and the version and url are read from the git directory.\n\n  Developers should override this method in their own class if they use a\n  different version control system.\n\nHelp for ndi.app.spikesorter/version_url is inherited from superclass ndi.app\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/decoder.m/","title":"CLASS ndi.app.stimulus.decoder","text":"<pre><code>  ndi.app.stimulus.decoder - an app to decode stimulus information from NDI_PROBE_STIMULUS objects\n\n  NDI_APP_STIMULUS_DECODER_OBJ = ndi.app.stimulus.decoder(SESSION)\n\n  Creates a new ndi_app_stimulus.decoder object that can operate on\n  NDI_SESSIONS. The app is named 'ndi.app.stimulus_decoder'.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/decoder.m/#superclasses","title":"Superclasses","text":"<p>ndi.app, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/decoder.m/#properties","title":"Properties","text":"Property Description session name"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/decoder.m/#methods","title":"Methods","text":"Method Description decoder an app to decode stimulus information from NDI_PROBE_STIMULUS objects load_presentation_time read the presentation_time structure from binary portion newdocument return a new database document of type ndi.document based on an app parse_stimuli write stimulus records for all stimulus epochs of an ndi.element stimulus probe searchquery return a search query for an ndi.document related to this app varappname return the name of the application for use in variable creation version_url return the app version and url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/decoder.m/#methods-help","title":"Methods help","text":"<p>decoder - an app to decode stimulus information from NDI_PROBE_STIMULUS objects</p> <pre><code>NDI_APP_STIMULUS_DECODER_OBJ = ndi.app.stimulus.decoder(SESSION)\n\n  Creates a new ndi_app_stimulus.decoder object that can operate on\n  NDI_SESSIONS. The app is named 'ndi.app.stimulus_decoder'.\n\n    Documentation for ndi.app.stimulus.decoder/decoder\n       doc ndi.app.stimulus.decoder\n</code></pre> <p>load_presentation_time - read the presentation_time structure from binary portion</p> <pre><code>PRESENTATION_TIME = LOAD_PRESENTATION_TIME(NDI_APP_STIMULUS_DECODER_OBJ, ...\n       STIMULUS_PRESENTATION_DOC)\n\n  Given a 'stimulus_presentation' type ndi.document, loads the presentation_time data from\n  the binary portion.\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on an app</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ)\n\n  Creates a blank ndi.document object of type 'app'. The 'app.name' field\n  is filled out with the name of NDI_APP_OBJ.VARAPPNAME().\n\nHelp for ndi.app.stimulus.decoder/newdocument is inherited from superclass ndi.app\n</code></pre> <p>parse_stimuli - write stimulus records for all stimulus epochs of an ndi.element stimulus probe</p> <pre><code>[NEWDOCS, EXISITINGDOCS] = PARSE_STIMULI(NDI_APP_STIMULUS_DECODER_OBJ, NDI_ELEMENT_STIM, [RESET])\n\n  Examines a the ndi.session associated with NDI_APP_STIMULUS_DECODER_OBJ and the stimulus\n  probe NDI_STIM_PROBE, and creates documents of type NDI_DOCUMENT_STIMULUS and NDI_DOCUMENT_STIMULUS_TUNINGCURVE\n  for all stimulus epochs.\n\n  If NDI_DOCUMENT_STIMULUS and NDI_DOCUMENT_STIMULUS_TUNINGCURVE documents already exist for a given\n  stimulus run, then they are returned in EXISTINGDOCS. Any new documents are returned in NEWDOCS.\n\n  If the input argument RESET is given and is 1, then all existing documents for this probe are\n  removed and all documents are recalculated. The default for RESET is 0 (if it is not provided).\n\n  Note that this function DOES add the new documents to the database.\n</code></pre> <p>searchquery - return a search query for an ndi.document related to this app</p> <pre><code>C = SEARCHQUERY(NDI_APP_OBJ)\n\n  Returns a cell array of strings that allow the creation or searching of an\n  ndi.database document for this app with field 'app' that has subfield 'name' equal\n  to the app's VARAPPNAME.\n\nHelp for ndi.app.stimulus.decoder/searchquery is inherited from superclass ndi.app\n</code></pre> <p>varappname - return the name of the application for use in variable creation</p> <pre><code>AN = VARAPPNAME(NDI_APP_OBJ)\n\n  Returns the name of the app modified for use as a variable name, either as\n  a Matlab variable or a name in a document.\n\nHelp for ndi.app.stimulus.decoder/varappname is inherited from superclass ndi.app\n</code></pre> <p>version_url - return the app version and url</p> <pre><code>[V, URL] = VERSION_URL(NDI_APP_OBJ)\n\n  Return the version and url for the current app. In the base class,\n  it is assumed that GIT is used and is available from the command line\n  and the version and url are read from the git directory.\n\n  Developers should override this method in their own class if they use a\n  different version control system.\n\nHelp for ndi.app.stimulus.decoder/version_url is inherited from superclass ndi.app\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/","title":"CLASS ndi.app.stimulus.tuning_response","text":"<pre><code>  ndi.app.stimulus.tuning_response - an app to decode stimulus information from NDI_PROBE_STIMULUS objects\n\n  NDI_APP_TUNING_RESPONSE_OBJ = ndi.app.stimulus.tuning_response(SESSION)\n\n  Creates a new ndi.app.stimulus.tuning_response object that can operate on\n  NDI_SESSIONS. The app is named 'ndi_app_stimulus_response'.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/#superclasses","title":"Superclasses","text":"<p>ndi.app, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/#properties","title":"Properties","text":"Property Description session name"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/#methods","title":"Methods","text":"Method Description compute_stimulus_response_scalar compute responses to a stimulus set control_stimulus determine the control stimulus ID for each stimulus in a stimulus set find_tuningcurve_document find a tuning curve document of a particular element, epochid, etc... label_control_stimuli label control stimuli for all stimulus presentation documents for a given stimulator make_1d_tuning create 1d tuning documents out of stimulus responses that covary in 2 parameters modulated_or_mean is the response stronger in modulation or mean? newdocument return a new database document of type ndi.document based on an app searchquery return a search query for an ndi.document related to this app stimulus_responses write stimulus records for all stimulus epochs of an ndi.element stimulus object tuning_curve compute a tuning curve from stimulus responses tuning_response an app to decode stimulus information from NDI_PROBE_STIMULUS objects tuningcurvedoc2vhlabrespstruct convert between a tuning curve document and the VH lab response structure tuningdoc_fixcellarrays make sure fields that are supposed to be cell arrays are cell arrays in TUNINGCURVE document tuningdoc_fixcellarrays_static make sure fields that are supposed to be cell arrays are cell arrays in TUNINGCURVE document varappname return the name of the application for use in variable creation version_url return the app version and url"},{"location":"NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/#methods-help","title":"Methods help","text":"<p>compute_stimulus_response_scalar - compute responses to a stimulus set</p> <pre><code>RESPONSE_DOC = COMPUTE_STIMULUS_RESPONSE_SCALAR(NDI_APP_TUNING_RESPONSE_OBJ, NDI_TIMESERIES_OBJ, STIM_DOC, ...)\n\n  Given an NDI_TIMESERIES_OBJ, a STIM_DOC (an ndi.document of class 'stimulus_presentation'), and a\n  CONTROL_DOC (an ndi.document of class 'control_stimulus_ids'), this\n  function computes the stimulus responses of NDI_TIMESERIES_OBJ and stores the results as an\n  ndi.document of class 'stimulus_response_scalar'. In this app, by default, mean responses and responses at the\n  fundamental stimulus frequency are calculated. Note that this function may generate multiple documents (for mean responses,\n  F1, F2).\n\n  Note that we recommend making a new app subclass if one wants to write additional classes of analysis procedures.\n\n  This function also takes name/value pairs that alter the behavior:\n  Parameter (default)                  | Description\n  ---------------------------------------------------------------------------------\n  temporalfreqfunc                     |\n    ('ndi.fun.stimulustemporalfrequency')  |\n  freq_response ([])                   | Frequency response to measure. If empty, then the function is\n                                       |   called 3 times with values 0, 1, and 2 times the fundamental frequency.\n  prestimulus_time ([])                | Calculate a baseline using a certain amount of TIMESERIES signal during\n                                       |     the pre-stimulus time given here\n  prestimulus_normalization ([])       | Normalize the stimulus response based on the prestimulus measurement.\n                                       | [] or 0) No normalization\n                                       |       1) Subtract: Response := Response - PrestimResponse\n                                       |       2) Fractional change Response:= ((Response-PrestimResponse)/PrestimResponse)\n                                       |       3) Divide: Response:= Response ./ PreStimResponse\n  isspike (0)                          | 0/1 Is the signal a spike process? If so, timestamps correspond to spike events.\n  spiketrain_dt (0.001)                | Resolution to use for spike train reconstruction if computing Fourier transform\n</code></pre> <p>control_stimulus - determine the control stimulus ID for each stimulus in a stimulus set</p> <pre><code>[CS_IDS, CS_DOC] = CONTROL_STIMULUS(NDI_APP_TUNING_RESPONSE_OBJ, STIM_DOC, ...)\n\n  For a given set of stimuli described in ndi.document of type 'stimulus',\n  this function returns the control stimulus ID for each stimulus in the vector CS_IDS\n  and a corresponding ndi.document of type control_stimulus_ids that describes this relationship.\n\n\n  This function accepts parameters in the form of NAME/VALUE pairs:\n  Parameter (default)              | Description\n  ------------------------------------------------------------------------\n  control_stim_method              | The method to be used to find the control stimulu for\n   ('pseudorandom')                |    each stimulus:\n                        -----------|\n                        |   pseudorandom: Find the stimulus with a parameter\n                        |      'controlid' that is in the same pseudorandom trial. In the\n                        |      event that there is no match that divides evenly into\n                        |      complete repetitions of the stimulus set, then the\n                        |      closest stimulus with field 'controlid' is chosen.\n                        |\n                        |   hasfield: Find stimuli that have a parameter with the name\n                        |      passed in 'controlid'\n                        |\n                        -----------|\n  controlid ('isblank')            | For some methods, the parameter that defines whether\n                                   |    a stimulus is a 'control' stimulus or not.\n  controlid_value (1)              | For some methods, the parameter value of 'controlid' that\n                                   |    defines whether a stimulus is a control stimulus or not.\n</code></pre> <p>find_tuningcurve_document - find a tuning curve document of a particular element, epochid, etc...</p> <pre><code>[TC_DOC, SRS_DOC] = FIND_TUNINGCURVE_DOCUMENT(NDI_APP_TUNING_RESPONSE_OBJ, ELEMENT_OBJ, EPOCHID, RESPONSE_TYPE)\n</code></pre> <p>label_control_stimuli - label control stimuli for all stimulus presentation documents for a given stimulator</p> <pre><code>CS_DOC = LABEL_CONTROL_STIMULI(NDI_APP_TUNING_RESPONSE_OBJ, STIMULUS_ELEMENT_OBJ, RESET, ...)\n\n  Thus function will look for all 'stimulus_presentation' documents for STIMULUS_PROBE_OBJ,\n  compute the corresponding control stimuli, and save them as an 'control_stimulus_ids'\n  document that is also returned as a cell list in CS_DOC.\n\n  If RESET is 1, then any existing documents of this type are first removed. If RESET is not provided or is\n  empty, then it is taken to be 0.\n\n  The method of finding the control stimulus can be provided by providing extra name/value pairs.\n  See ndi.app.stimulus.tuning_response/CONTROL_STIMULUS for parameters.\n</code></pre> <p>make_1d_tuning - create 1d tuning documents out of stimulus responses that covary in 2 parameters</p> <pre><code>TUNING_DOCS = MAKE_1D_TUNING(NDI_APP_TUNING_RESPONSE_OBJ, STIM_RESPONSE_DOC, PARAM_TO_VARY, PARAM_TO_VARY_LABEL,\n    PARAM_TO_FIX)\n\n  This function examines a stimulus response doc that covaries in 2 parameters, and \"deals\" the responses into several tuning\n  curves where the parameter with name PARAM_TO_VARY varies across stimuli and the stimulus parameter with name\n  PARAM_TO_FIX is fixed for each tuning doc.\n</code></pre> <p>modulated_or_mean - is the response stronger in modulation or mean?</p> <pre><code>[B,ratio,mean_response,modulated_response,mean_index,modulated_index] = ...\n      MODULATED_OR_MEAN(STIMULUS_RESPONSE_SCALAR_DOCS, ...)\n\n  Given a cell array of STIMULUS_RESPONSE_SCALAR documents that\n  correspond to different response types to the same stimulus, this\n  function examines whether the best modulated response\n  is greater than the best mean response.\n\n  B is 1 if the modulated response is greater, and 0 if the mean response is greater.\n  If there is no basis for the comparison, then -1 is returned.\n\n  MEAN_RESPONSE is the mean response for the stimulus that has the largest\n  response (this largest response could be the mean or the modulated response).\n  MODULATED_RESPONSE is the modulated response for the stimulus that has the largest\n  response (this largest response could be the mean or the modulated response).\n  RATIO is the ratio of these two values (MODULATED_RESPONSE / MEAN_RESPONSE).\n\n  MEAN_INDEX is the index number of the stimulus response scalar document with the\n  mean response. MODULATED_INDEX is the index number of the stimulus\n  response scalar document with the modulated response.\n\n  This function examines the empirical responses and does not do any\n  fitting.\n\n  This function also takes name/value pairs that modify the default behavior.\n\n  |--------------------------------------------------------------------------------|\n  | Parameter (default)          | Description                                     |\n  |--------------------------------------------------------------------------------|\n  |  modulated_response_names    | Possible matches for the modulated responses    |\n  |  ({'F1','modulated'})        |   in the 'response_type' field of the           |\n  |                              |   STIMULUS_RESPONSE_SCALAR documents.           |\n  |  mean_response_names         | Possible matches for the mean responses         |\n  |  ({'F0','mean'})             |   in the 'response_type' field of the           |\n  |                              |   STIMULUS_RESPONSE_SCALAR documents.           |\n  |------------------------------|-------------------------------------------------|\n\n  Step 0: initialize parameters\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on an app</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ)\n\n  Creates a blank ndi.document object of type 'app'. The 'app.name' field\n  is filled out with the name of NDI_APP_OBJ.VARAPPNAME().\n\nHelp for ndi.app.stimulus.tuning_response/newdocument is inherited from superclass ndi.app\n</code></pre> <p>searchquery - return a search query for an ndi.document related to this app</p> <pre><code>C = SEARCHQUERY(NDI_APP_OBJ)\n\n  Returns a cell array of strings that allow the creation or searching of an\n  ndi.database document for this app with field 'app' that has subfield 'name' equal\n  to the app's VARAPPNAME.\n\nHelp for ndi.app.stimulus.tuning_response/searchquery is inherited from superclass ndi.app\n</code></pre> <p>stimulus_responses - write stimulus records for all stimulus epochs of an ndi.element stimulus object</p> <pre><code>[RDOCS] = STIMULUS_RESPONSES(NDI_APP_TUNING_RESPONSE_OBJ, NDI_ELEMENT_STIM, NDI_TIMESERIES_OBJ, [RESET], DO_MEAN_ONLY)\n\n  Examines a the ndi.session associated with NDI_APP_TUNING_RESPONSE_OBJ and the stimulus\n  probe NDI_STIM_PROBE, and creates documents of type STIMULUS/STIMULUS_RESPONSE_SCALAR for all\n  stimulus epochs.\n  (NDI2: docs say it creates  and STIMULUS/STIMULUS_TUNINGCURVE but it does not seem to do that)\n\n  If STIMULUS_PRESENTATION and STIMULUS_TUNINGCURVE documents already exist for a given\n  stimulus run, then they are returned in EXISTINGDOCS. Any new documents are returned in NEWDOCS.\n\n  If the input argument RESET is given and is 1, then all existing tuning curve documents for this\n  NDI_TIMESERIES_OBJ are removed. The default for RESET is 0 (if it is not provided).\n\n  If the input argument DO_MEAN_ONLY is given and is 1, then the function only computes the mean responses.\n  No F1 or F2 responses will be calculated.\n\n\n  Note that this function DOES add the new documents RDOCS to the database.\n</code></pre> <p>tuning_curve - compute a tuning curve from stimulus responses</p> <pre><code>TUNING_DOC = TUNING_CURVE(NDI_APP_TUNING_RESPONSE_OBJ, STIM_RESOPNSE_DOC, ...)\n\n\n  This function accepts name/value pairs that modifies its basic operation:\n\n  Parameter (default)         | Description\n  -----------------------------------------------------------------------\n  response_units ('Spikes/s') | Response units to pass along\n  independent_label {'label1'}| Independent parameter axis label\n  independent_parameter {}    | Independent parameters to search for in stimuli.\n                              |   Can be multi-dimensional to create multi-variate\n                              |   tuning curves. Only stimuli that contain these fields\n                              |   will be included.\n                              |   Examples: {'angle'}  {'angle','sFrequency'}\n  constraint ([])             | Constraints in the form of a vlt.data.fieldsearch structure.\n                              |   Example: struct('field','sFrequency','operation',...\n                              |              'exact_number','param1',1,'param2','')\n  do_Add (1)                  | Should we actually add this to the database?\n\n  See also: vlt.data.fieldsearch\n</code></pre> <p>tuning_response - an app to decode stimulus information from NDI_PROBE_STIMULUS objects</p> <pre><code>NDI_APP_TUNING_RESPONSE_OBJ = ndi.app.stimulus.tuning_response(SESSION)\n\n  Creates a new ndi.app.stimulus.tuning_response object that can operate on\n  NDI_SESSIONS. The app is named 'ndi_app_stimulus_response'.\n\n    Documentation for ndi.app.stimulus.tuning_response/tuning_response\n       doc ndi.app.stimulus.tuning_response\n</code></pre> <p>tuningcurvedoc2vhlabrespstruct - convert between a tuning curve document and the VH lab response structure</p> <pre><code>RESPSTRUCT = TUNINGCURVEDOC2VHLABRESPSTRUCT(TUNINGCURVE_DOC)\n\n  Converts entries from an NDI TUNINGCURVE document to a VH-lab response structure.\n  This function is generally used when one wants to call the VH lab libraries.\n\n    RESPSTRUCT is a structure  of response properties with fields:\n    curve    |    4xnumber of directions tested,\n             |      curve(1,:) is directions tested (degrees, compass coords.)\n             |      curve(2,:) is mean responses, with control subtracted\n             |      curve(3,:) is standard deviation\n             |      curve(4,:) is standard error\n    ind      |    cell list of individual trial responses for each direction\n    spont    |    control responses [mean stddev stderr]\n    spontind |    individual control responses\n    Optionally:\n    blankresp|    response to a control trial: [mean stddev stderr]\n    blankind |    individual responses to control\n</code></pre> <p>tuningdoc_fixcellarrays - make sure fields that are supposed to be cell arrays are cell arrays in TUNINGCURVE document</p> <pre><code>DEPRECATED - will cause an error\n</code></pre> <p>tuningdoc_fixcellarrays_static - make sure fields that are supposed to be cell arrays are cell arrays in TUNINGCURVE document</p> <pre><code>\n</code></pre> <p>varappname - return the name of the application for use in variable creation</p> <pre><code>AN = VARAPPNAME(NDI_APP_OBJ)\n\n  Returns the name of the app modified for use as a variable name, either as\n  a Matlab variable or a name in a document.\n\nHelp for ndi.app.stimulus.tuning_response/varappname is inherited from superclass ndi.app\n</code></pre> <p>version_url - return the app version and url</p> <pre><code>[V, URL] = VERSION_URL(NDI_APP_OBJ)\n\n  Return the version and url for the current app. In the base class,\n  it is assumed that GIT is used and is available from the command line\n  and the version and url are read from the git directory.\n\n  Developers should override this method in their own class if they use a\n  different version control system.\n\nHelp for ndi.app.stimulus.tuning_response/version_url is inherited from superclass ndi.app\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bexample/simple.m/","title":"CLASS ndi.calc.example.simple","text":"<pre><code>  SIMPLE - a simple demonstration of an ndi.calculator object\n\n  SIMPLE_OBJ = SIMPLE(SESSION)\n\n  Creates a SIMPLE ndi.calculator object\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bexample/simple.m/#superclasses","title":"Superclasses","text":"<p>ndi.calculator, ndi.app, ndi.documentservice, ndi.app.appdoc, ndi.mock.ctest</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bexample/simple.m/#properties","title":"Properties","text":"Property Description fast_start session name doc_types doc_document_types doc_session base_scope"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bexample/simple.m/#methods","title":"Methods","text":"Method Description add_appdoc Load data from an application document appdoc_description return documentation for the type of document that is created by this calculator. are_input_parameters_equivalent are two sets of input parameters equivalent? calc_path CALC_PATH return the path to the ndi.calculator object calculate perform the calculator for ndi.calc.example.simple clean_mock_docs remove mock/test documents clear_appdoc remove an ndi.app.appdoc document from a session database compare_mock_docs compare an expected calculation answer with an actual answer default_parameters_query what queries should be used to search for input parameters if none are provided? default_scope default scope types for ndi.mock.ctest object default_search_for_input_parameters default parameters for searching for inputs defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters doc_about --------------------------------------------------------------------------------------------- docfiletext return the text in the requested documentation file find_appdoc find an ndi.app.appdoc document in the session database generate_mock_docs generate tests for ndi.calc.* objects graphical_edit_calculator create and control a GUI to graphically edit an NDI calculator instance is_valid_dependency_input is a potential dependency input actually valid for this calculator? isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? load_mock_expected_output load expected NDI document answer for a calculation loaddata_appdoc Load data from an application document mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents newdocument return a new database document of type ndi.document based on an app parameter_default return the default parameter code for a given calculator_type parameter_examples return the parameter code examples for a given calculator_type plot provide a diagnostic plot to show the results of the calculator, if appropriate plot_parameters provide a diagnostic plot to show the results of the calculator, if appropriate run run calculator on all possible inputs that match some parameters search_for_calculator_docs search for previous calculators search_for_input_parameters search for valid inputs to the calculator searchquery return a search query for an ndi.document related to this app simple a simple demonstration of an ndi.calculator object struct2doc create an ndi.document from an input structure and input parameters test perform a test of an ndi.calculator object varappname return the name of the application for use in variable creation version_url return the app version and url write_mock_expected_output write"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bexample/simple.m/#methods-help","title":"Methods help","text":"<p>add_appdoc - Load data from an application document</p> <pre><code>[...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ...\n      APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments])\n\n  Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data\n  specified by APPDOC_STRUCT.  [additional inputs] are used to find or specify the\n  NDI_document in the database. They are passed to the function FIND_APPDOC,\n  so see help FIND_APPDOC for the documentation for each app.\n\n  The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than\n  1 if the document already exists).\n\n  If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is\n  assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it\n  is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT.\n\n  This function also takes a string DOCEXISTSACTION that describes what it should do\n  in the event that the document fitting the [additional inputs] already exists:\n  DOCEXISTACTION value      | Description\n  ----------------------------------------------------------------------------------\n  'Error'                   | An error is generating indicating the document exists.\n  'NoAction'                | The existing document is left alone. The existing ndi.document\n                            |    is returned in DOC.\n  'Replace'                 | Replace the document; note that this deletes all NDI_DOCUMENTS\n                            |    that depend on the original.\n  'ReplaceIfDifferent'      | Conditionally replace the document, but only if the\n                            |    the data structures that define the document are not equal.\n\nHelp for ndi.calc.example.simple/add_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>appdoc_description - return documentation for the type of document that is created by this calculator.</p> <pre><code>TEXT = APP_DOC_DESCRIPTION(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n\nHelp for ndi.calc.example.simple/appdoc_description is inherited from superclass ndi.calculator\n</code></pre> <p>are_input_parameters_equivalent - are two sets of input parameters equivalent?</p> <pre><code>B = ARE_INPUT_PARAMETERS_EQUIVALENT(NDI_CALCULATOR_OBJ, INPUT_PARAMETERS1, INPUT_PARAMETERS2)\n\n  Are two sets of input parameters equivalent? This function is used by\n  SEARCH_FOR_CALCULATOR_DOCS to determine whether potential documents\n  were actually generated by identical input parameters.\n\n  In the base class, the structures are first re-organized so that all one-dimensional\n  substructures are columns and then compared with vlt.data.eqlen(INPUT_PARAMETERS1, INPUT_PARAMETERS2).\n\n  It is necessary to \"columnize\" the substructures because Matlab does not not necessarily preserve that\n  orientation when data is written to or read from JSON.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.example.simple/are_input_parameters_equivalent is inherited from superclass ndi.calculator\n</code></pre> <p>calc_path - CALC_PATH return the path to the ndi.calculator object</p> <pre><code>P = CALC_PATH(CTEST_OBJ)\n\n  Return the path of an ndi.calculator object.\n\nHelp for ndi.calc.example.simple/calc_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>calculate - perform the calculator for ndi.calc.example.simple</p> <pre><code>DOC = CALCULATE(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Creates a simple_calc document given input parameters.\n\n  The document that is created simple has an 'answer' that is given\n  by the input parameters.\n  check inputs\n</code></pre> <p>clean_mock_docs - remove mock/test documents</p> <pre><code>Help for ndi.calc.example.simple/clean_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>clear_appdoc - remove an ndi.app.appdoc document from a session database</p> <pre><code>B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Deletes the app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  B is 1 if the document is found, and 0 otherwise.\n\nHelp for ndi.calc.example.simple/clear_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>compare_mock_docs - compare an expected calculation answer with an actual answer</p> <pre><code>[B, ERRORMSG] = COMPARE_MOCK_DOCS(CTEST_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE)\n\n  Given an NDI document with the expected answer to a calculation (EXPECTED_DOC),\n  the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'),\n  this function computes whether the ACTUAL_DOC is within an allowed tolerance of\n  EXPECTED_DOC.\n\n  B is 1 if the differences in the documents are within the tolerance of the class.\n  Otherwise, B is 0.\n  If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance.\n\n  In this abstract class, B is always 1 and ERRORMSG is always an empty string.\n\n  Developer's note: this method should be overridden in each calculator object.\n\nHelp for ndi.calc.example.simple/compare_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>default_parameters_query - what queries should be used to search for input parameters if none are provided?</p> <pre><code>QUERY = DEFAULT_PARAMETERS_QUERY(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  When one calls SEARCH_FOR_INPUT_PARAMETERS, it is possible to specify a 'query' structure to\n  select particular documents to be placed into the parameters 'depends_on' specification.\n  If one does not provide any 'query' structure, then the default values here are used.\n\n  The function returns:\n  |-----------------------|----------------------------------------------|\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\n  In the base class, this examines the parameters_specifications for\n  fixed 'depends_on' entries (entries that have both a 'name' and a 'value').\n  If it finds any, it creates a query indicating that the 'depends_on' field\n  must match the specified name and value.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.example.simple/default_parameters_query is inherited from superclass ndi.calculator\n</code></pre> <p>default_scope - default scope types for ndi.mock.ctest object</p> <pre><code>BASE_SCOPE = ndi.mock.ctest.default_scope();\n\n  Return a default base_scope structure for an ndi.mock.ctest object.\n\nHelp for ndi.calc.example.simple.default_scope is inherited from superclass ndi.mock.ctest\n</code></pre> <p>default_search_for_input_parameters - default parameters for searching for inputs</p> <pre><code>PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ)\n\n  Returns a list of the default search parameters for finding appropriate inputs\n  to the calculator.\n</code></pre> <p>defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type</p> <pre><code>APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE)\n\n  Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object.\n\n  In the base class, the blank version of the ndi.document is read in and the\n  default structure is built from the ndi.document's class property list.\n\nHelp for ndi.calc.example.simple/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc2struct - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this uses the property info in the ndi.document to load the data structure.\n\nHelp for ndi.calc.example.simple/doc2struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc_about - ---------------------------------------------------------------------------------------------</p> <pre><code>NDI_CALCULATOR: SIMPLE_CALC\n  ----------------------------------------------------------------------------------------------\n\n    ------------------------\n    | SIMPLE_CALC -- ABOUT |\n    ------------------------\n\n    SIMPLE_CALC is a demonstration document. It simply produces the 'answer' that\n    is provided in the input parameters. Each SIMPLE_CALC document 'depends_on' an\n    NDI daq system.\n\n    Definition: apps/simple_calc.json\n</code></pre> <p>docfiletext - return the text in the requested documentation file</p> <pre><code>TEXT = ndi.calculator.docfiletext(CALCULATOR_TYPE, DOC_TYPE)\n\n  Returns the text of the documentation files.\n  CALCULATOR_TYPE should be the full object name of the calculator of interest.\n   (for example: 'ndi.calc.stimulus.tuningcurve' or 'ndi.calc.vis.contrasttuning')\n  DOC_TYPE should be the type of document requested ('general', 'output', 'searching for inputs')\n\n  Example:\n     text = ndi.calculator.docfiletext('ndi.calc.stimulus.tuningcurve','general');\n\nHelp for ndi.calc.example.simple.docfiletext is inherited from superclass ndi.calculator\n</code></pre> <p>find_appdoc - find an ndi.app.appdoc document in the session database</p> <pre><code>DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Using search criteria that is supported by [additional inputs], FIND_APPDOC\n  searches the database for the ndi.document object DOC that is\n  described by APPDOC_TYPE.\n\n  DOC is always a cell array of all matching NDI_DOCUMENTs.\n\n  In this superclass, empty is always returned. Subclasses should override\n  this function to search for each document type.\n\n  The documentation for subclasses should be in the overridden function\n  APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.example.simple/find_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>generate_mock_docs - generate tests for ndi.calc. objects*</p> <pre><code>[DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(CSTEST_OBJ,...\n     SCOPE, NUMBER_OF_TESTS)\n\n  SCOPE should be one of 'standard', 'low_noise', or 'high_noise'.\n    'standard' performs tests on specific hard-coded inputs.\n    'low_noise' performs tests on specific hard-coded inputs with small amounts\n       of noise added.\n    'high_noise' performs tests on specific hard-coded inputs with large amounts\n       of noise added.\n\n  NUMBER_OF_TESTS is the number of tests to generate.\n\nHelp for ndi.calc.example.simple/generate_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>graphical_edit_calculator - create and control a GUI to graphically edit an NDI calculator instance</p> <pre><code>GRAPHICAL_EDIT_CALCULATOR(...)\n\n  Creates and controls a graphical user interface for creating an instance of\n  an ndi.calculator object.\n\n  Usage by the user:\n\n    GRAPHICAL_EDIT_CALCULATOR('command','NEW','type','ndi.calc.TYPE','filename',filename,'name',name)\n       or\n    GRAPHICAL_EDIT_CALCULATOR('command','EDIT','filename',filename)\n\nHelp for ndi.calc.example.simple.graphical_edit_calculator is inherited from superclass ndi.calculator\n</code></pre> <p>is_valid_dependency_input - is a potential dependency input actually valid for this calculator?</p> <pre><code>B = IS_VALID_DEPENDENCY_INPUT(NDI_CALCULATOR_OBJ, NAME, VALUE)\n\n  Tests whether a potential input to a calculator is valid.\n  The potential dependency name is provided in NAME and its ndi.document id is\n  provided in VALUE.\n\n  The base class behavior of this function is simply to return true, but it\n  can be overridden if additional criteria beyond an ndi.query are needed to\n  assess if a document is an appropriate input for the calculator.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.example.simple/is_valid_dependency_input is inherited from superclass ndi.calculator\n</code></pre> <p>isequal_appdoc_struct - are two APPDOC data structures the same (equal)?</p> <pre><code>B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2)\n\n  Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. This is true if\n  APPDOC_STRUCT2\n  true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is,\n  B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2).\n\nHelp for ndi.calc.example.simple/isequal_appdoc_struct is inherited from superclass ndi.calculator\n</code></pre> <p>isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC?</p> <pre><code>[B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT)\n\n  Examines APPDOC_STRUCT and determines whether it is a valid input for creating an\n  ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise.\n\n  In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.'\n\nHelp for ndi.calc.example.simple/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>load_mock_expected_output - load expected NDI document answer for a calculation</p> <pre><code>DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N)\n\n  Load the Nth stored ndi.document that contains the expected answer for the\n  Nth standard mock test.\n\nHelp for ndi.calc.example.simple/load_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre> <p>loaddata_appdoc - Load data from an application document</p> <pre><code>[...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments])\n\n  Loads the data from app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  In the base class, this always returns empty. This function should be overridden by each\n  subclass.\n\n  The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.example.simple/loaddata_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>mock_expected_filename - file of expected NDI document answer for a calculation</p> <pre><code>FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N)\n\n  Return the filename for the Nth stored ndi.document that contains the expected\n  answer for the Nth standard mock test.\n\nHelp for ndi.calc.example.simple/mock_expected_filename is inherited from superclass ndi.mock.ctest\n</code></pre> <p>mock_path - return the path to the stored mock example output documents</p> <pre><code>MP = MOCK_PATH(CTEST_OBJ)\n\n  Returns the path to the mock document example outputs.\n  The returned path ends in a file separator.\n\nHelp for ndi.calc.example.simple/mock_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on an app</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ)\n\n  Creates a blank ndi.document object of type 'app'. The 'app.name' field\n  is filled out with the name of NDI_APP_OBJ.VARAPPNAME().\n\nHelp for ndi.calc.example.simple/newdocument is inherited from superclass ndi.app\n</code></pre> <p>parameter_default - return the default parameter code for a given calculator_type</p> <pre><code>[CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the default parameter code CONTENTS for a given CALCULATOR_TYPE. CONTENTS is a\n  character string.\n\n  Example:\n    [contents] = ndi.calculator.parameter_default('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.example.simple.parameter_default is inherited from superclass ndi.calculator\n</code></pre> <p>parameter_examples - return the parameter code examples for a given calculator_type</p> <pre><code>[NAMES, CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the example NAMES and parameter example code CONTENTS for a given CALCULATOR_TYPE.\n\n  NAMES is a cell array of strings with the code example names. CONTENTS is a cell array of strings with\n  the contents of the code examples.\n\n  Example:\n    [names,contents] = ndi.calculator.parameter_examples('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.example.simple.parameter_examples is inherited from superclass ndi.calculator\n</code></pre> <p>plot - provide a diagnostic plot to show the results of the calculator, if appropriate</p> <pre><code>H=PLOT(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a diagnostic plot that can indicate to a reader whether or not\n  the calculator has been performed in a manner that makes sense with\n  its input data. Useful for debugging / validating a calculator.\n\n  This function is intended to be called by external users and code.\n\n  Handles to the figure, the axes, and any objects created are returned in H.\n\n  By default, this plot is made in the current axes.\n\n  This function takes additional input arguments as name/value pairs.\n  See ndi.calculator.plot_parameters for a description of those parameters.\n\nHelp for ndi.calc.example.simple/plot is inherited from superclass ndi.calculator\n</code></pre> <p>plot_parameters - provide a diagnostic plot to show the results of the calculator, if appropriate</p> <pre><code>PLOT_PARAMETERS(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a diagnostic plot that can indicate to a reader whether or not\n  the calculator has been performed in a manner that makes sense with\n  its input data. Useful for debugging / validating a calculator.\n\n  By default, this plot is made in the current axes.\n\n  This function takes additional input arguments as name/value pairs:\n  |---------------------------|--------------------------------------|\n  | Parameter (default)       | Description                          |\n  |---------------------------|--------------------------------------|\n  | newfigure (0)             | 0/1 Should we make a new figure?     |\n  | holdstate (0)             | 0/1 Should we preserve the 'hold'    |\n  |                           |   state of the current axes?         |\n  | suppress_x_label (0)      | 0/1 Should we suppress the x label?  |\n  | suppress_y_label (0)      | 0/1 Should we suppress the y label?  |\n  | suppress_z_label (0)      | 0/1 Should we suppress the z label?  |\n  | suppress_title (0)        | 0/1 Should we suppress the title?    |\n  |---------------------------|--------------------------------------|\n\nHelp for ndi.calc.example.simple.plot_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>run - run calculator on all possible inputs that match some parameters</p> <pre><code>DOCS = RUN(NDI_CALCULATOR_OBJ, DOCEXISTSACTION, PARAMETERS)\n\n  DOCEXISTSACTION can be 'Error', 'NoAction', 'Replace', or 'ReplaceIfDifferent'\n  For calculators, 'ReplaceIfDifferent' is equivalent to 'NoAction' because\n  the input parameters define the calculator.\n\n  This function is primarily intended to be called by external programs and users.\n\nHelp for ndi.calc.example.simple/run is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_calculator_docs - search for previous calculators</p> <pre><code>[DOCS] = SEARCH_FOR_CALCULATOR_DOCS(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Performs a search to find all previously-created calculator\n  documents that this mini-app creates.\n\n  PARAMETERS is a structure with the following fields\n  |------------------------|----------------------------------|\n  | Fieldname              | Description                      |\n  |-----------------------------------------------------------|\n  | input_parameters       | A structure of input parameters  |\n  |                        |  needed by the calculator.       |\n  | depends_on             | A structure with fields 'name'   |\n  |                        |  and 'value' that indicates any  |\n  |                        |  exact matches that should be    |\n  |                        |  satisfied.                      |\n  |------------------------|----------------------------------|\n\n  in the abstract class, this returns empty\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.example.simple/search_for_calculator_docs is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_input_parameters - search for valid inputs to the calculator</p> <pre><code>PARAMETERS = SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  Identifies all possible sets of specific input PARAMETERS that can be\n  used as inputs to the calculator. PARAMETERS is a cell array of parameter\n  structures with fields 'input_parameters' and 'depends_on'.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\n  PARAMETERS_SPECIFICATION is a structure with the following fields:\n  |----------------------------------------------------------------------|\n  | input_parameters      | A structure of fixed input parameters needed |\n  |                       |   by the calculator. Should not depend on   |\n  |                       |   values in other documents.                 |\n  | depends_on            | A structure with 'name' and 'value' fields   |\n  |                       |   that lists specific inputs that should be  |\n  |                       |   used for the 'depends_on' field in the     |\n  |                       |   PARAMETERS output.                         |\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\nHelp for ndi.calc.example.simple/search_for_input_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>searchquery - return a search query for an ndi.document related to this app</p> <pre><code>C = SEARCHQUERY(NDI_APP_OBJ)\n\n  Returns a cell array of strings that allow the creation or searching of an\n  ndi.database document for this app with field 'app' that has subfield 'name' equal\n  to the app's VARAPPNAME.\n\nHelp for ndi.calc.example.simple/searchquery is inherited from superclass ndi.app\n</code></pre> <p>simple - a simple demonstration of an ndi.calculator object</p> <pre><code>SIMPLE_OBJ = SIMPLE(SESSION)\n\n  Creates a SIMPLE ndi.calculator object\n\n    Documentation for ndi.calc.example.simple/simple\n       doc ndi.calc.example.simple\n</code></pre> <p>struct2doc - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this always returns empty. It must be overridden in subclasses.\n  The documentation for overridden functions should be in the function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.example.simple/struct2doc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>test - perform a test of an ndi.calculator object</p> <pre><code>[B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN)\n\n  Perform tests of the calculator for a certain SCOPE.\n\n  B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons\n    of the expected output of test i and actual output of test j are equal.\n    Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should\n    be 0, although results might be close enough for some comparisons to be\n    equal even if there are no errors. If test indices are\n    specified, B becomes a numel(specific_test_inds) x\n    numel(specific_test_inds) array.\n\n  ERRORMSG{i,j} is any error message given if the comparison between the\n    expected outcome of test i and the actual outcome of test j.\n\n  B_EXPECTED is the result of the comparisons between the expected\n    outcome of test i and the expected outcome of test j. Some tests\n    might have the same expected outcome, which can be useful for\n    interpreting the results in B.\n\n  SCOPE should be one of 'standard', 'low_noise', or 'high_noise'.\n    'standard' performs tests on specific hard-coded inputs.\n    'low_noise' performs tests on specific hard-coded inputs with small amounts\n       of noise added.\n    'high_noise' performs tests on specific hard-coded inputs with large amounts\n       of noise added.\n\n  NUMBER_OF_TESTS indicates the number of tests to perform.\n  PLOT_IT indicates (0/1) whether or not the results should be plotted.\n\n  This function's behavior can be modified by name/value pairs.\n  --------------------------------------------------------------------------------\n  | Parameter (default):     | Description:                                      |\n  |--------------------------|---------------------------------------------------|\n  | specific_test_inds([])   | Should we specify which tests to run?             |\n  |--------------------------|---------------------------------------------------|\n\n  Step 1: generate_mock_docs\n\nHelp for ndi.calc.example.simple/test is inherited from superclass ndi.mock.ctest\n</code></pre> <p>varappname - return the name of the application for use in variable creation</p> <pre><code>AN = VARAPPNAME(NDI_APP_OBJ)\n\n  Returns the name of the app modified for use as a variable name, either as\n  a Matlab variable or a name in a document.\n\nHelp for ndi.calc.example.simple/varappname is inherited from superclass ndi.app\n</code></pre> <p>version_url - return the app version and url</p> <pre><code>[V, URL] = VERSION_URL(NDI_APP_OBJ)\n\n  Return the version and url for the current app. In the base class,\n  it is assumed that GIT is used and is available from the command line\n  and the version and url are read from the git directory.\n\n  Developers should override this method in their own class if they use a\n  different version control system.\n\nHelp for ndi.calc.example.simple/version_url is inherited from superclass ndi.app\n</code></pre> <p>write_mock_expected_output - write</p> <pre><code>B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC)\n\n  Set the expected mock document for mock calculation NUMBER to\n  be the ndi.document DOC.\n\n  This function will not overwrite an existing expected mock document.\n  It must be deleted manually to ensure programmer really wants to overwrite it.\n\nHelp for ndi.calc.example.simple/write_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bstimulus/tuningcurve.m/","title":"CLASS ndi.calc.stimulus.tuningcurve","text":"<pre><code>  TUNINGCURVE - a tuningcurve demonstration of an ndi.calculator object\n\n  TUNINGCURVE_OBJ = TUNINGCURVE(SESSION)\n\n  Creates a TUNINGCURVE ndi.calculator object\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bstimulus/tuningcurve.m/#superclasses","title":"Superclasses","text":"<p>ndi.calculator, ndi.app, ndi.documentservice, ndi.app.appdoc, ndi.mock.ctest</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bstimulus/tuningcurve.m/#properties","title":"Properties","text":"Property Description fast_start session name doc_types doc_document_types doc_session base_scope"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bstimulus/tuningcurve.m/#methods","title":"Methods","text":"Method Description add_appdoc Load data from an application document appdoc_description return documentation for the type of document that is created by this calculator. are_input_parameters_equivalent are two sets of input parameters equivalent? best_value calculate the stimulus with the \"best\" response best_value_empirical find the best response value for a given stimulus property calc_path CALC_PATH return the path to the ndi.calculator object calculate perform the calculator for ndi.calc.example.tuningcurve clean_mock_docs remove mock/test documents clear_appdoc remove an ndi.app.appdoc document from a session database compare_mock_docs compare an expected calculation answer with an actual answer default_parameters_query what queries should be used to search for input parameters if none are provided? default_scope default scope types for ndi.mock.ctest object default_search_for_input_parameters default parameters for searching for inputs defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters doc_about --------------------------------------------------------------------------------------------- docfiletext return the text in the requested documentation file find_appdoc find an ndi.app.appdoc document in the session database generate_mock_docs generate tests for ndi.calc.* objects graphical_edit_calculator create and control a GUI to graphically edit an NDI calculator instance is_valid_dependency_input is a potential dependency input actually valid for this calculator? isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? load_mock_expected_output load expected NDI document answer for a calculation loaddata_appdoc Load data from an application document mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents newdocument return a new database document of type ndi.document based on an app parameter_default return the default parameter code for a given calculator_type parameter_examples return the parameter code examples for a given calculator_type plot provide a diagnostic plot to show the results of the calculator plot_parameters provide a diagnostic plot to show the results of the calculator, if appropriate property_value_array find all values of a stimulus property run run calculator on all possible inputs that match some parameters search_for_calculator_docs search for previous calculators search_for_input_parameters search for valid inputs to the calculator searchquery return a search query for an ndi.document related to this app struct2doc create an ndi.document from an input structure and input parameters test perform a test of an ndi.calculator object tuningcurve a tuningcurve demonstration of an ndi.calculator object varappname return the name of the application for use in variable creation version_url return the app version and url write_mock_expected_output write"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcalc/%2Bstimulus/tuningcurve.m/#methods-help","title":"Methods help","text":"<p>add_appdoc - Load data from an application document</p> <pre><code>[...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ...\n      APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments])\n\n  Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data\n  specified by APPDOC_STRUCT.  [additional inputs] are used to find or specify the\n  NDI_document in the database. They are passed to the function FIND_APPDOC,\n  so see help FIND_APPDOC for the documentation for each app.\n\n  The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than\n  1 if the document already exists).\n\n  If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is\n  assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it\n  is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT.\n\n  This function also takes a string DOCEXISTSACTION that describes what it should do\n  in the event that the document fitting the [additional inputs] already exists:\n  DOCEXISTACTION value      | Description\n  ----------------------------------------------------------------------------------\n  'Error'                   | An error is generating indicating the document exists.\n  'NoAction'                | The existing document is left alone. The existing ndi.document\n                            |    is returned in DOC.\n  'Replace'                 | Replace the document; note that this deletes all NDI_DOCUMENTS\n                            |    that depend on the original.\n  'ReplaceIfDifferent'      | Conditionally replace the document, but only if the\n                            |    the data structures that define the document are not equal.\n\nHelp for ndi.calc.stimulus.tuningcurve/add_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>appdoc_description - return documentation for the type of document that is created by this calculator.</p> <pre><code>TEXT = APP_DOC_DESCRIPTION(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n\nHelp for ndi.calc.stimulus.tuningcurve/appdoc_description is inherited from superclass ndi.calculator\n</code></pre> <p>are_input_parameters_equivalent - are two sets of input parameters equivalent?</p> <pre><code>B = ARE_INPUT_PARAMETERS_EQUIVALENT(NDI_CALCULATOR_OBJ, INPUT_PARAMETERS1, INPUT_PARAMETERS2)\n\n  Are two sets of input parameters equivalent? This function is used by\n  SEARCH_FOR_CALCULATOR_DOCS to determine whether potential documents\n  were actually generated by identical input parameters.\n\n  In the base class, the structures are first re-organized so that all one-dimensional\n  substructures are columns and then compared with vlt.data.eqlen(INPUT_PARAMETERS1, INPUT_PARAMETERS2).\n\n  It is necessary to \"columnize\" the substructures because Matlab does not not necessarily preserve that\n  orientation when data is written to or read from JSON.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.stimulus.tuningcurve/are_input_parameters_equivalent is inherited from superclass ndi.calculator\n</code></pre> <p>best_value - calculate the stimulus with the \"best\" response</p> <pre><code>[N,V,PROPERTY_VALUE] = ndi.calc.stimulus.tuningcurve.best_value(NDI_CALC_STIMULUS_TUNINGCURVE, ALGORITHM, ...\n    STIM_RESPONSE_DOC, PROPERTY)\n\n  Given an ndi.document of type STIMULUS_RESPONSE_SCALAR, return the stimulus presentation number N with\n  the \"best\" response, as determined by ALGORITHM, for any stimulus that has the property PROPERTY.\n\n  N is the stimulus number that meets the criteria. V is the best response value. PROPERTY_VALUE\n  is the value of the PROPERTY of stimulus N.\n\n  The algorithms known are:\n  -------------------------------------------------------------------------------------\n  'empirical_maximum'      | Use the stimulus with the empirically largest mean value.\n</code></pre> <p>best_value_empirical - find the best response value for a given stimulus property</p> <pre><code>[N, V, PROPERTY_VALUE] = ndi.calc.stimulus.tuningcurve.best_value_empirical(NDI_CALC_STIMULUS_TUNINGCURVE_OBJ, STIM_RESPONSE_DOC, PROPERTY)\n\n  Given an ndi.document of type STIMULUS_RESPONSE_SCALAR, return the stimulus presentation number N with\n  largest mean response for any stimulus that has the property PROPERTY.  If the value is complex-valued,\n  then the largest absolute value is used.\n\n  N is the stimulus number that meets the criteria. V is the best response value. PROPERTY_VALUE\n  is the value of the PROPERTY of stimulus N.\n\n  If this function cannot find a stimulus presentation document for the STIM_RESPONSE_DOC, it produces\n  an error.\n</code></pre> <p>calc_path - CALC_PATH return the path to the ndi.calculator object</p> <pre><code>P = CALC_PATH(CTEST_OBJ)\n\n  Return the path of an ndi.calculator object.\n\nHelp for ndi.calc.stimulus.tuningcurve/calc_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>calculate - perform the calculator for ndi.calc.example.tuningcurve</p> <pre><code>DOC = CALCULATE(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Creates a tuningcurve_calc document given input parameters.\n\n  The document that is created tuningcurve\n  by the input parameters.\n  check inputs\n</code></pre> <p>clean_mock_docs - remove mock/test documents</p> <pre><code>Help for ndi.calc.stimulus.tuningcurve/clean_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>clear_appdoc - remove an ndi.app.appdoc document from a session database</p> <pre><code>B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Deletes the app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  B is 1 if the document is found, and 0 otherwise.\n\nHelp for ndi.calc.stimulus.tuningcurve/clear_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>compare_mock_docs - compare an expected calculation answer with an actual answer</p> <pre><code>[B, ERRORMSG] = COMPARE_MOCK_DOCS(CTEST_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE)\n\n  Given an NDI document with the expected answer to a calculation (EXPECTED_DOC),\n  the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'),\n  this function computes whether the ACTUAL_DOC is within an allowed tolerance of\n  EXPECTED_DOC.\n\n  B is 1 if the differences in the documents are within the tolerance of the class.\n  Otherwise, B is 0.\n  If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance.\n\n  In this abstract class, B is always 1 and ERRORMSG is always an empty string.\n\n  Developer's note: this method should be overridden in each calculator object.\n\nHelp for ndi.calc.stimulus.tuningcurve/compare_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>default_parameters_query - what queries should be used to search for input parameters if none are provided?</p> <pre><code>QUERY = DEFAULT_PARAMETERS_QUERY(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  When one calls SEARCH_FOR_INPUT_PARAMETERS, it is possible to specify a 'query' structure to\n  select particular documents to be placed into the parameters 'depends_on' specification.\n  If one does not provide any 'query' structure, then the default values here are used.\n\n  The function returns:\n  |-----------------------|----------------------------------------------|\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\n  For the ndi.calc.stimulus.tuningcurve_calc class, this first checks to see if\n  fixed dependencies are already specified. If not, then it looks for\n  documents of type 'stimulus_response_scalar' with 'response_type' fields\n  the contain 'mean' or 'F1'.\n</code></pre> <p>default_scope - default scope types for ndi.mock.ctest object</p> <pre><code>BASE_SCOPE = ndi.mock.ctest.default_scope();\n\n  Return a default base_scope structure for an ndi.mock.ctest object.\n\nHelp for ndi.calc.stimulus.tuningcurve.default_scope is inherited from superclass ndi.mock.ctest\n</code></pre> <p>default_search_for_input_parameters - default parameters for searching for inputs</p> <pre><code>PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ)\n\n  Returns a list of the default search parameters for finding appropriate inputs\n  to the calculator. For tuningcurve_calc, there is no appropriate default parameters\n  so this search will yield empty.\n</code></pre> <p>defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type</p> <pre><code>APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE)\n\n  Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object.\n\n  In the base class, the blank version of the ndi.document is read in and the\n  default structure is built from the ndi.document's class property list.\n\nHelp for ndi.calc.stimulus.tuningcurve/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc2struct - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this uses the property info in the ndi.document to load the data structure.\n\nHelp for ndi.calc.stimulus.tuningcurve/doc2struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc_about - ---------------------------------------------------------------------------------------------</p> <pre><code>NDI_CALCULATOR: TUNINGCURVE_CALC\n  ----------------------------------------------------------------------------------------------\n\n    ------------------------\n    | TUNINGCURVE_CALC -- ABOUT |\n    ------------------------\n\n    TUNINGCURVE_CALC is a demonstration document. It simply produces the 'answer' that\n    is provided in the input parameters. Each TUNINGCURVE_CALC document 'depends_on' an\n    NDI daq system.\n\n    Definition: apps/tuningcurve_calc.json\n</code></pre> <p>docfiletext - return the text in the requested documentation file</p> <pre><code>TEXT = ndi.calculator.docfiletext(CALCULATOR_TYPE, DOC_TYPE)\n\n  Returns the text of the documentation files.\n  CALCULATOR_TYPE should be the full object name of the calculator of interest.\n   (for example: 'ndi.calc.stimulus.tuningcurve' or 'ndi.calc.vis.contrasttuning')\n  DOC_TYPE should be the type of document requested ('general', 'output', 'searching for inputs')\n\n  Example:\n     text = ndi.calculator.docfiletext('ndi.calc.stimulus.tuningcurve','general');\n\nHelp for ndi.calc.stimulus.tuningcurve.docfiletext is inherited from superclass ndi.calculator\n</code></pre> <p>find_appdoc - find an ndi.app.appdoc document in the session database</p> <pre><code>DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Using search criteria that is supported by [additional inputs], FIND_APPDOC\n  searches the database for the ndi.document object DOC that is\n  described by APPDOC_TYPE.\n\n  DOC is always a cell array of all matching NDI_DOCUMENTs.\n\n  In this superclass, empty is always returned. Subclasses should override\n  this function to search for each document type.\n\n  The documentation for subclasses should be in the overridden function\n  APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.stimulus.tuningcurve/find_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>generate_mock_docs - generate tests for ndi.calc. objects*</p> <pre><code>[DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(CSTEST_OBJ,...\n     SCOPE, NUMBER_OF_TESTS)\n\n  SCOPE should be one of 'standard', 'low_noise', or 'high_noise'.\n    'standard' performs tests on specific hard-coded inputs.\n    'low_noise' performs tests on specific hard-coded inputs with small amounts\n       of noise added.\n    'high_noise' performs tests on specific hard-coded inputs with large amounts\n       of noise added.\n\n  NUMBER_OF_TESTS is the number of tests to generate.\n\nHelp for ndi.calc.stimulus.tuningcurve/generate_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>graphical_edit_calculator - create and control a GUI to graphically edit an NDI calculator instance</p> <pre><code>GRAPHICAL_EDIT_CALCULATOR(...)\n\n  Creates and controls a graphical user interface for creating an instance of\n  an ndi.calculator object.\n\n  Usage by the user:\n\n    GRAPHICAL_EDIT_CALCULATOR('command','NEW','type','ndi.calc.TYPE','filename',filename,'name',name)\n       or\n    GRAPHICAL_EDIT_CALCULATOR('command','EDIT','filename',filename)\n\nHelp for ndi.calc.stimulus.tuningcurve.graphical_edit_calculator is inherited from superclass ndi.calculator\n</code></pre> <p>is_valid_dependency_input - is a potential dependency input actually valid for this calculator?</p> <pre><code>B = IS_VALID_DEPENDENCY_INPUT(NDI_CALCULATOR_OBJ, NAME, VALUE)\n\n  Tests whether a potential input to a calculator is valid.\n  The potential dependency name is provided in NAME and its base id is\n  provided in VALUE.\n\n  The base class behavior of this function is simply to return true, but it\n  can be overridden if additional criteria beyond an ndi.query are needed to\n  assess if a document is an appropriate input for the calculator.\n</code></pre> <p>isequal_appdoc_struct - are two APPDOC data structures the same (equal)?</p> <pre><code>B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2)\n\n  Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. This is true if\n  APPDOC_STRUCT2\n  true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is,\n  B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2).\n\nHelp for ndi.calc.stimulus.tuningcurve/isequal_appdoc_struct is inherited from superclass ndi.calculator\n</code></pre> <p>isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC?</p> <pre><code>[B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT)\n\n  Examines APPDOC_STRUCT and determines whether it is a valid input for creating an\n  ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise.\n\n  In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.'\n\nHelp for ndi.calc.stimulus.tuningcurve/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>load_mock_expected_output - load expected NDI document answer for a calculation</p> <pre><code>DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N)\n\n  Load the Nth stored ndi.document that contains the expected answer for the\n  Nth standard mock test.\n\nHelp for ndi.calc.stimulus.tuningcurve/load_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre> <p>loaddata_appdoc - Load data from an application document</p> <pre><code>[...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments])\n\n  Loads the data from app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  In the base class, this always returns empty. This function should be overridden by each\n  subclass.\n\n  The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.stimulus.tuningcurve/loaddata_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>mock_expected_filename - file of expected NDI document answer for a calculation</p> <pre><code>FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N)\n\n  Return the filename for the Nth stored ndi.document that contains the expected\n  answer for the Nth standard mock test.\n\nHelp for ndi.calc.stimulus.tuningcurve/mock_expected_filename is inherited from superclass ndi.mock.ctest\n</code></pre> <p>mock_path - return the path to the stored mock example output documents</p> <pre><code>MP = MOCK_PATH(CTEST_OBJ)\n\n  Returns the path to the mock document example outputs.\n  The returned path ends in a file separator.\n\nHelp for ndi.calc.stimulus.tuningcurve/mock_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on an app</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ)\n\n  Creates a blank ndi.document object of type 'app'. The 'app.name' field\n  is filled out with the name of NDI_APP_OBJ.VARAPPNAME().\n\nHelp for ndi.calc.stimulus.tuningcurve/newdocument is inherited from superclass ndi.app\n</code></pre> <p>parameter_default - return the default parameter code for a given calculator_type</p> <pre><code>[CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the default parameter code CONTENTS for a given CALCULATOR_TYPE. CONTENTS is a\n  character string.\n\n  Example:\n    [contents] = ndi.calculator.parameter_default('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.stimulus.tuningcurve.parameter_default is inherited from superclass ndi.calculator\n</code></pre> <p>parameter_examples - return the parameter code examples for a given calculator_type</p> <pre><code>[NAMES, CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the example NAMES and parameter example code CONTENTS for a given CALCULATOR_TYPE.\n\n  NAMES is a cell array of strings with the code example names. CONTENTS is a cell array of strings with\n  the contents of the code examples.\n\n  Example:\n    [names,contents] = ndi.calculator.parameter_examples('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.stimulus.tuningcurve.parameter_examples is inherited from superclass ndi.calculator\n</code></pre> <p>plot - provide a diagnostic plot to show the results of the calculator</p> <pre><code>H=PLOT(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a plot of the tuning curve.\n\n  Handles to the figure, the axes, and any objects created are returned in H.\n\n  This function takes additional input arguments as name/value pairs.\n  See ndi.calculator.plot_parameters for a description of those parameters.\n</code></pre> <p>plot_parameters - provide a diagnostic plot to show the results of the calculator, if appropriate</p> <pre><code>PLOT_PARAMETERS(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a diagnostic plot that can indicate to a reader whether or not\n  the calculator has been performed in a manner that makes sense with\n  its input data. Useful for debugging / validating a calculator.\n\n  By default, this plot is made in the current axes.\n\n  This function takes additional input arguments as name/value pairs:\n  |---------------------------|--------------------------------------|\n  | Parameter (default)       | Description                          |\n  |---------------------------|--------------------------------------|\n  | newfigure (0)             | 0/1 Should we make a new figure?     |\n  | holdstate (0)             | 0/1 Should we preserve the 'hold'    |\n  |                           |   state of the current axes?         |\n  | suppress_x_label (0)      | 0/1 Should we suppress the x label?  |\n  | suppress_y_label (0)      | 0/1 Should we suppress the y label?  |\n  | suppress_z_label (0)      | 0/1 Should we suppress the z label?  |\n  | suppress_title (0)        | 0/1 Should we suppress the title?    |\n  |---------------------------|--------------------------------------|\n\nHelp for ndi.calc.stimulus.tuningcurve.plot_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>property_value_array - find all values of a stimulus property</p> <pre><code>[PVA] = ndi.calc.stimulus.tuningcurve.property_value_array(NDI_CALC_STIMULUS_TUNINGCURVE_OBJ, STIM_RESPONSE_DOC, PROPERTY)\n\n  Given an ndi.document of type STIMULUS_RESPONSE_SCALAR, return all values of the parameter PROPERTY that were\n  used in the stimulus.\n\n  Values will be returned in a cell array.\n\n  If this function cannot find a stimulus presentation document for the STIM_RESPONSE_DOC, it produces\n  an error.\n</code></pre> <p>run - run calculator on all possible inputs that match some parameters</p> <pre><code>DOCS = RUN(NDI_CALCULATOR_OBJ, DOCEXISTSACTION, PARAMETERS)\n\n  DOCEXISTSACTION can be 'Error', 'NoAction', 'Replace', or 'ReplaceIfDifferent'\n  For calculators, 'ReplaceIfDifferent' is equivalent to 'NoAction' because\n  the input parameters define the calculator.\n\n  This function is primarily intended to be called by external programs and users.\n\nHelp for ndi.calc.stimulus.tuningcurve/run is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_calculator_docs - search for previous calculators</p> <pre><code>[DOCS] = SEARCH_FOR_CALCULATOR_DOCS(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Performs a search to find all previously-created calculator\n  documents that this mini-app creates.\n\n  PARAMETERS is a structure with the following fields\n  |------------------------|----------------------------------|\n  | Fieldname              | Description                      |\n  |-----------------------------------------------------------|\n  | input_parameters       | A structure of input parameters  |\n  |                        |  needed by the calculator.       |\n  | depends_on             | A structure with fields 'name'   |\n  |                        |  and 'value' that indicates any  |\n  |                        |  exact matches that should be    |\n  |                        |  satisfied.                      |\n  |------------------------|----------------------------------|\n\n  in the abstract class, this returns empty\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.stimulus.tuningcurve/search_for_calculator_docs is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_input_parameters - search for valid inputs to the calculator</p> <pre><code>PARAMETERS = SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  Identifies all possible sets of specific input PARAMETERS that can be\n  used as inputs to the calculator. PARAMETERS is a cell array of parameter\n  structures with fields 'input_parameters' and 'depends_on'.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\n  PARAMETERS_SPECIFICATION is a structure with the following fields:\n  |----------------------------------------------------------------------|\n  | input_parameters      | A structure of fixed input parameters needed |\n  |                       |   by the calculator. Should not depend on   |\n  |                       |   values in other documents.                 |\n  | depends_on            | A structure with 'name' and 'value' fields   |\n  |                       |   that lists specific inputs that should be  |\n  |                       |   used for the 'depends_on' field in the     |\n  |                       |   PARAMETERS output.                         |\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\nHelp for ndi.calc.stimulus.tuningcurve/search_for_input_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>searchquery - return a search query for an ndi.document related to this app</p> <pre><code>C = SEARCHQUERY(NDI_APP_OBJ)\n\n  Returns a cell array of strings that allow the creation or searching of an\n  ndi.database document for this app with field 'app' that has subfield 'name' equal\n  to the app's VARAPPNAME.\n\nHelp for ndi.calc.stimulus.tuningcurve/searchquery is inherited from superclass ndi.app\n</code></pre> <p>struct2doc - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this always returns empty. It must be overridden in subclasses.\n  The documentation for overridden functions should be in the function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.stimulus.tuningcurve/struct2doc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>test - perform a test of an ndi.calculator object</p> <pre><code>[B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN)\n\n  Perform tests of the calculator for a certain SCOPE.\n\n  B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons\n    of the expected output of test i and actual output of test j are equal.\n    Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should\n    be 0, although results might be close enough for some comparisons to be\n    equal even if there are no errors. If test indices are\n    specified, B becomes a numel(specific_test_inds) x\n    numel(specific_test_inds) array.\n\n  ERRORMSG{i,j} is any error message given if the comparison between the\n    expected outcome of test i and the actual outcome of test j.\n\n  B_EXPECTED is the result of the comparisons between the expected\n    outcome of test i and the expected outcome of test j. Some tests\n    might have the same expected outcome, which can be useful for\n    interpreting the results in B.\n\n  SCOPE should be one of 'standard', 'low_noise', or 'high_noise'.\n    'standard' performs tests on specific hard-coded inputs.\n    'low_noise' performs tests on specific hard-coded inputs with small amounts\n       of noise added.\n    'high_noise' performs tests on specific hard-coded inputs with large amounts\n       of noise added.\n\n  NUMBER_OF_TESTS indicates the number of tests to perform.\n  PLOT_IT indicates (0/1) whether or not the results should be plotted.\n\n  This function's behavior can be modified by name/value pairs.\n  --------------------------------------------------------------------------------\n  | Parameter (default):     | Description:                                      |\n  |--------------------------|---------------------------------------------------|\n  | specific_test_inds([])   | Should we specify which tests to run?             |\n  |--------------------------|---------------------------------------------------|\n\n  Step 1: generate_mock_docs\n\nHelp for ndi.calc.stimulus.tuningcurve/test is inherited from superclass ndi.mock.ctest\n</code></pre> <p>tuningcurve - a tuningcurve demonstration of an ndi.calculator object</p> <pre><code>TUNINGCURVE_OBJ = TUNINGCURVE(SESSION)\n\n  Creates a TUNINGCURVE ndi.calculator object\n\n    Documentation for ndi.calc.stimulus.tuningcurve/tuningcurve\n       doc ndi.calc.stimulus.tuningcurve\n</code></pre> <p>varappname - return the name of the application for use in variable creation</p> <pre><code>AN = VARAPPNAME(NDI_APP_OBJ)\n\n  Returns the name of the app modified for use as a variable name, either as\n  a Matlab variable or a name in a document.\n\nHelp for ndi.calc.stimulus.tuningcurve/varappname is inherited from superclass ndi.app\n</code></pre> <p>version_url - return the app version and url</p> <pre><code>[V, URL] = VERSION_URL(NDI_APP_OBJ)\n\n  Return the version and url for the current app. In the base class,\n  it is assumed that GIT is used and is available from the command line\n  and the version and url are read from the git directory.\n\n  Developers should override this method in their own class if they use a\n  different version control system.\n\nHelp for ndi.calc.stimulus.tuningcurve/version_url is inherited from superclass ndi.app\n</code></pre> <p>write_mock_expected_output - write</p> <pre><code>B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC)\n\n  Set the expected mock document for mock calculation NUMBER to\n  be the ndi.document DOC.\n\n  This function will not overwrite an existing expected mock document.\n  It must be deleted manually to ensure programmer really wants to overwrite it.\n\nHelp for ndi.calc.stimulus.tuningcurve/write_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/authenticate.m/","title":"ndi.cloud.authenticate","text":"<pre><code>  authenticate - Authenticate using secret, environment variables or GUI Form\n\n  Syntax:\n    ndi.cloud.authenticate() will attempt authentication in the following\n        order:\n        1) If MATLAB Vault for storing secrets is available, will check if\n           credentials already exist. If credentials exist, they will be used for\n           logging in to NDI cloud. If they don't exist, used will be prompted\n           to add their credentials to the vault.\n        2) If the following variables are present in the environment\n           variables, they will be used for logging in:\n            - NDI_CLOUD_USERNAME\n            - NDI_CLOUD_PASSWORD\n        3) If none of the above results in successful authentication, user\n           will be prompted for username (email) and password in a login\n           dialog.\n\n    ndi.cloud.authenticate(\"UserName\", anotherUserName) to force\n    authentication with new/different credentials\n\n  Input Arguments:\n    options (optional name, value pairs)\n        - UserName (string) : Username to use for login. If a token already\n        exists and the provided username is different than the username the\n        token was issued for, this function will force a re-login.\n        - InteractionDisabled (matlab.lang.OnOffSwitchState) : On/off switch \n        state to control whether interactive steps are enabled or not \n        (i.e for disabling during tesing)\n\n  Output Arguments: (optional)\n    token - The authentication token retrieved after successful authentication.\n    organizationID - The organization ID fetched from the environment variable.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/downloadDataset.m/","title":"ndi.cloud.downloadDataset","text":"<pre><code>  DOWNLOADDATASET - Downloads a dataset from the NDI Cloud to a local folder.\n\n  Syntax:\n    NDIDATASET = ndi.cloud.downloadDataset(CLOUD_DATASET_ID, TARGET_FOLDER, OPTIONS)\n    Downloads a dataset specified by CLOUD_DATASET_ID to TARGET_FOLDER,\n    with additional options for controlling synchronization mode.\n\n  Inputs:\n    CLOUD_DATASET_ID (string)       - Identifier for the dataset in the cloud.\n    TARGET_FOLDER (string)          - Local folder to save the downloaded dataset.\n    OPTIONS (name, value pairs)     - Optional synchronization options:\n        - SyncFiles (logical)       - If true, files will be synced (default: false).\n        - Verbose (logical)         - If true, verbose output is printed (default: true).\n\n  Outputs:\n    NDIDATASET - An ndi.dataset object representing the downloaded dataset.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/syncDataset.m/","title":"ndi.cloud.syncDataset","text":"<pre><code>  SYNCDATASET Synchronizes an NDI dataset with cloud storage.\n\n    ndi.cloud.syncDataset(NDIDATASET, Name, Value, ...)\n\n    This function serves as the primary entry point for synchronizing an NDI\n    dataset with its corresponding cloud storage. It supports various\n    synchronization modes to control how data is transferred and reconciled\n    between the local dataset and the remote cloud representation.\n\n    Inputs:\n        ndiDataset (1,1) ndi.dataset - The local NDI dataset object to be\n            synchronized. \n\n        Name-Value Pair Arguments:\n        'SyncMode' (1,1) ndi.cloud.sync.enum.SyncMode - Specifies the\n            synchronization strategy to use. Default is \"DownloadNew\".\n            Available modes are:\n            - \"DownloadNew\": Downloads documents (and associated data files)\n              that are present on the remote cloud storage but not yet in the\n              local NDI dataset. No local or remote documents are deleted or\n              modified if they already exist.\n            - \"UploadNew\": Uploads documents (and associated data files)\n              that are present in the local NDI dataset but not yet on the\n              remote cloud storage. No local or remote documents are deleted\n              or modified if they already exist.\n            - \"MirrorFromRemote\": Makes the local NDI dataset an exact\n              mirror of the remote cloud storage. This involves:\n                1. Downloading documents from remote that are not local.\n                2. Deleting local documents that are not present on remote.\n              The remote dataset is not modified.\n            - \"MirrorToRemote\": Makes the remote cloud storage an exact\n              mirror of the local NDI dataset. This involves:\n                1. Uploading local documents that are not on remote.\n                2. Deleting remote documents that are not present locally.\n              The local dataset is not modified.\n            - \"TwoWaySync\": Performs a bidirectional additive synchronization.\n              This involves:\n                1. Uploading local documents not on remote.\n                2. Downloading remote documents not present locally.\n              No documents are deleted from either local or remote.\n\n        Additional options are derived from ndi.cloud.sync.SyncOptions and\n        can be provided as name-value pairs, which are then passed to the\n        specific sync mode function:\n        'SyncFiles' (1,1) logical - If true, the binary data (file portion)\n            of documents will also be synchronized. Default is true (as per\n            SyncOptions class).\n        'Verbose' (1,1) logical - If true, detailed progress messages are\n            printed to the console. Default is true (as per SyncOptions class).\n        'DryRun' (1,1) logical - If true, synchronization actions are\n            simulated (logged if Verbose is true) but not actually executed.\n            Default is false (as per SyncOptions class).\n        'FileUploadStrategy' (1,1) (string) - \"serial\" to upload files one by one or\n            \"batch\" (default) to upload a bundles of files using zip files. \n            The \"batch\" option is recommended when uploading many files,\n            and the serial option can be used as a fallback if batch upload fails.\n\n    The function determines the cloud dataset identifier associated with the\n    local NDI dataset and relies on the individual sync mode functions to manage\n    a sync index file (typically located at\n    [NDIDATASET.path]/.ndi/sync/index.json) for tracking synchronization states.\n\n    Example:\n        % Assuming 'mySession' is an existing ndi.session object\n        myDataset = ndi.dataset('Path', mySession.path);\n\n        % Download new documents from the cloud\n        ndi.cloud.syncDataset(myDataset, 'SyncMode', \"DownloadNew\");\n\n        % Mirror the local dataset to the remote, without syncing file data\n        ndi.cloud.syncDataset(myDataset, 'SyncMode', \"MirrorToRemote\", 'SyncFiles', false);\n\n        % Perform a two-way sync with verbose output, simulating actions\n        ndi.cloud.syncDataset(myDataset, 'SyncMode', \"TwoWaySync\", 'Verbose', true, 'DryRun', true);\n\n    See also:\n        ndi.cloud.sync.downloadNew, ndi.cloud.sync.uploadNew,\n        ndi.cloud.sync.mirrorFromRemote, ndi.cloud.sync.mirrorToRemote,\n        ndi.cloud.sync.twoWaySync, ndi.cloud.sync.SyncOptions,\n        ndi.cloud.sync.enum.SyncMode\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/uilogin.m/","title":"ndi.cloud.uilogin","text":"<pre><code>  uilogin - Retrieves the token from a ui dialog\n\n    [TOKEN, ORGANIZATION_ID] = UILOGIN([FORCE_RELOGIN])\n\n    Note: When the token is retrieved for the first time, it is stored in\n    an environment variable. This function will try to first retrieve the\n    token from the environment variable, and if the variable does not\n    exist, the ui dialog is opened for user to enter username and password.\n\n    Also, if the token exists, but has expired, the dialog will open for\n    user to re-enter username and password.\n\n    If FORCE_RELOGIN is 1 or true, then the user is prompted to log in\n    again.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/uploadDataset.m/","title":"ndi.cloud.uploadDataset","text":"<pre><code>  UPLOADDATASET - upload a dataset to NDI cloud\n\n  DATASETID = ndi.cloud.UPLOADDATASET(ndiDataset)\n\n  Upload an ndi.dataset object to NDI Cloud. The DATASETID on\n  NDI Cloud is returned.\n\n  Example:\n    ndi.cloud.upload.new_dataset(ndiDataset)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Badmin/checkSubmission.m/","title":"ndi.cloud.admin.checkSubmission","text":"<pre><code>  checkSubmission - Check status of a deposited submission\n\n  Syntax:\n    checkSubmission(filename, dataType, options) checks the status (result) or\n    content of a metadata submission\n\n  Input Arguments:\n    filename (string) - The name of the file to check submission status for\n    dataType (string) - The type of data to check, either \"contents\" or \"result\"\n    options (name-value pairs) - Optional name-value pairs\n      UseTestSystem (logical) - Flag indicating whether to use the test system\n\n  NB: Requires crossref credentials being set as environment variables:\n    CROSSREF_USERNAME, CROSSREF_PASSWORD\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Badmin/createNewDOI.m/","title":"ndi.cloud.admin.createNewDOI","text":"<pre><code>  createNewDOI - Create a doi string using a random and opaque DOI Suffix\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Badmin/registerDatasetDOI.m/","title":"ndi.cloud.admin.registerDatasetDOI","text":"<pre><code>  registerDatasetDOI - Register a Dataset DOI via crossref\n\n  Syntax:\n    registerDatasetDOI(cloudDatasetID, options) submit dataset metadata to\n    crossref for DOI registration\n\n  Input Arguments:\n    cloudDatasetID (string) - The ID of the dataset in the cloud.\n    options (name-value pairs) - Optional name-value pairs\n        - OutputFile (string) - The file path to save the XML output.\n        - ShowXML (logical) - Flag to display the XML string in the console (default: true).\n        - UseTestSystem (logical) - Flag to use the test system for submission (default: false).\n\n  NB: Requires crossref credentials being set as environment variables:\n    CROSSREF_USERNAME, CROSSREF_PASSWORD\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Badmin/%2Bcrossref/Constants.m/","title":"CLASS ndi.cloud.admin.crossref.Constants","text":"<pre><code>ndi.cloud.admin.crossref.Constants is a class.\n    obj = ndi.cloud.admin.crossref.Constants\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Badmin/%2Bcrossref/Constants.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Badmin/%2Bcrossref/Constants.m/#properties","title":"Properties","text":"Property Description DOIPrefix DatabaseURL DatabaseDOI DatabaseTitle DatabaseDescription DatabaseOrganization DatabaseCreationDate NDIDatasetBaseURL"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Badmin/%2Bcrossref/Constants.m/#methods","title":"Methods","text":"Method Description Constants ndi.cloud.admin.crossref.Constants/Constants is a constructor."},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Badmin/%2Bcrossref/Constants.m/#methods-help","title":"Methods help","text":"<p>Constants - ndi.cloud.admin.crossref.Constants/Constants is a constructor.</p> <pre><code>obj = ndi.cloud.admin.crossref.Constants\n\n    Documentation for ndi.cloud.admin.crossref.Constants/Constants\n       doc ndi.cloud.admin.crossref.Constants\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Badmin/%2Bcrossref/convertCloudDatasetToCrossrefDataset.m/","title":"ndi.cloud.admin.crossref.convertCloudDatasetToCrossrefDataset","text":"<pre><code>  Todos (crossref best practice recommendations):\n  - include all relevant\n    [ish] funding\n    [v]\u00a0license\n    [\u00a0] relationship metadata\n  - include all contributors\n    [v] names\n    [v] ORCID\n  - include relevant dates (supported date types are creation, publication, and update dates)\n  - provide\n    [v] description\n    [\u00a0]\u00a0format\n    [\u00a0]\u00a0citation metadata\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Badmin/%2Bcrossref/createDatabaseMetadata.m/","title":"ndi.cloud.admin.crossref.createDatabaseMetadata","text":"<pre><code>  createDatabaseMetadata - Create database metadata for NDI Cloud\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Badmin/%2Bcrossref/createDoiBatchHeadElement.m/","title":"ndi.cloud.admin.crossref.createDoiBatchHeadElement","text":"<pre><code>  createDoiBatchHeadElement - Create a structure representing the head element\n  of the doi_batch element of the metadata record submission xml\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Badmin/%2Bcrossref/createDoiBatchSubmission.m/","title":"ndi.cloud.admin.crossref.createDoiBatchSubmission","text":"<pre><code>  Create database object % Todo: Support multiple datasets?\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Badmin/%2Bcrossref/%2Bconversion/convertContributors.m/","title":"ndi.cloud.admin.crossref.conversion.convertContributors","text":"<pre><code>  Create person_name objects for contributors\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Badmin/%2Bcrossref/%2Bconversion/convertDatasetDate.m/","title":"ndi.cloud.admin.crossref.conversion.convertDatasetDate","text":"<pre><code>  Parse dates from ISO format\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Badmin/%2Bcrossref/%2Bconversion/convertFunding.m/","title":"ndi.cloud.admin.crossref.conversion.convertFunding","text":"<pre><code>ndi.cloud.admin.crossref.conversion.convertFunding is a function.\n    fundingObj = ndi.cloud.admin.crossref.conversion.convertFunding(cloudDataset)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Badmin/%2Bcrossref/%2Bconversion/convertLicense.m/","title":"ndi.cloud.admin.crossref.conversion.convertLicense","text":"<pre><code>ndi.cloud.admin.crossref.conversion.convertLicense is a function.\n    licenseObj = ndi.cloud.admin.crossref.conversion.convertLicense(cloudDataset)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Badmin/%2Bcrossref/%2Bconversion/convertRelatedPublications.m/","title":"ndi.cloud.admin.crossref.conversion.convertRelatedPublications","text":"<pre><code>ndi.cloud.admin.crossref.conversion.convertRelatedPublications is a function.\n    relProgramObj = ndi.cloud.admin.crossref.conversion.convertRelatedPublications(cloudDataset)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/url.m/","title":"ndi.cloud.api.url","text":"<pre><code> URL - a function that returns the URL for a named api endpoint\n\n  URL = ndi.cloud.api.URL(TYPE) returns the URL for the api\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/change_password.m/","title":"ndi.cloud.api.auth.change_password","text":"<pre><code>  CHANGE_PASSWORD - Change a user's password\n\n  RESPONSE = ndi.cloud.api.auth.CHANGE_PASSWORD(OLDPASSWORD, NEWPASSWORD)\n\n  Inputs:\n    OLDPASSWORD - a string representing the old password\n    NEWPASSWORD - a string representing the new password\n\n  Outputs:\n    RESPONSE - the response summary\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/login.m/","title":"ndi.cloud.api.auth.login","text":"<pre><code>  LOGIN - logs in a user\n\n  [AUTH_TOKEN,ORGANIZATION_ID] = ndi.cloud.api.auth.LOGIN(EMAIL, PASSWORD)\n\n  Inputs:\n    EMAIL - a string representing the user's e-mail\n    PASSWORD - a string representing the user's password\n\n  Outputs:\n    AUTH_TOKEN - bearer token\n    ORGANIZATION_ID - the organization id that the user belongs to\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/logout.m/","title":"ndi.cloud.api.auth.logout","text":"<pre><code>  LOGOUT - logs a user out and invalidates their token\n\n  RESPONSE = ndi.cloud.api.auth.LOGOUT()\n\n  Inputs:\n\n  Outputs:\n    RESPONSE - the response summary\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/resend_confirmation.m/","title":"ndi.cloud.api.auth.resend_confirmation","text":"<pre><code>  RESEND_CONFIRMATION - Resends the verification code via email\n\n  RESPONSE = ndi.cloud.api.auth.resend_confirmation(EMAIL)\n\n  Inputs:\n    EMAIL - a string representing the email address used to send the\n    verification\n\n  Outputs:\n    RESPONSE - the response summary\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/reset_password.m/","title":"ndi.cloud.api.auth.reset_password","text":"<pre><code>  RESET_PASSWORD - sends a password reset e-mail\n\n  RESPONSE = ndi.cloud.api.auth.reset_password(EMAIL)\n\n  Inputs:\n    EMAIL - a string representing the email address used to send the\n    e-mail\n\n  Outputs:\n    RESPONSE - the response summary\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bauth/verify_user.m/","title":"ndi.cloud.api.auth.verify_user","text":"<pre><code>  VERIFY_USER - verifies a user via the confirmation code sent in e-mail\n\n  RESPONSE = ndi.cloud.api.auth.verify_user(EMAIL, CONFIRMATION_CODE)\n\n  Inputs:\n    EMAIL - a string representing the email address used to verify\n    CONFIRMATION_CODE - the code send to the email\n\n  Outputs:\n    RESPONSE - the response summary\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/bulk_delete_documents.m/","title":"ndi.cloud.api.datasets.bulk_delete_documents","text":"<pre><code> BULK_DELETE_DOCUMENTS - Delete a set of documents from the dataset\n\n  RESPONSE = ndi.cloud.api.datasets.BULK_DELETE_DOCUMENTS(DATASET_ID, DOCUMENT_IDS)\n\n  Inputs:\n    DATASET_ID - an id of the dataset\n    DOCUMENT_IDS - a cell array of document ids to delete\n\n  Outputs:\n    response - the post request response\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/create_dataset.m/","title":"ndi.cloud.api.datasets.create_dataset","text":"<pre><code>  CREATE_DATASET - Create a new dataset\n\n  RESPONSE = ndi.cloud.api.datasets.CREATE_DATASET(DATASET)\n\n  Inputs:\n    DATASET - a JSON object representing the dataset\n\n  Outputs:\n    RESPONSE - the new dataset summary\n    DATASET_ID - the id of the newly created dataset\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/create_dataset_branch.m/","title":"ndi.cloud.api.datasets.create_dataset_branch","text":"<pre><code>  CREATE_DATASET_BRANCH - branch a given dataset\n\n  RESPONSE = ndi.cloud.api.datasets.CREATE_DATASET_BRANCH(DATASET_ID, BRANCH_NAME)\n\n  Inputs:\n    DATASET_ID - a string representing the id of the dataset\n    BRANCH_NAME - a string representing the branch name\n\n  Outputs:\n    RESPONSE - the updated dataset summary\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/delete_dataset.m/","title":"ndi.cloud.api.datasets.delete_dataset","text":"<pre><code>  DELETE_DATASET - Delete a dataset. Datasets cannot be deleted if they\n  have been branched off of\n\n  RESPONSE = ndi.cloud.api.datasets.DELETE_DATASET(DATASET_ID)\n\n  Inputs:\n    DATASET_ID - a string representing the dataset id\n\n  Outputs:\n    RESPONSE - the delete confirmation\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_branches.m/","title":"ndi.cloud.api.datasets.get_branches","text":"<pre><code>  GET_BRANCHES - get the branches of a dataset\n\n  [RESPONSE,BRANCHES] = ndi.cloud.api.datasets.GET_BRANCHES(DATASET_ID)\n\n  Inputs:\n    DATASET_ID - a string representing the dataset id\n\n  Outputs:\n    RESPONSE - the get request summary\n    BRANCHES - the branches required by the user\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_dataset.m/","title":"ndi.cloud.api.datasets.get_dataset","text":"<pre><code>  GET_DATASET - Get a dataset given it's dataset id\n\n  [DATASET, RESPONSE] = ndi.cloud.api.datasets.GET_DATASET(DATASET_ID)\n\n  Inputs:\n    DATASET_ID - a string representing the dataset id\n\n  Outputs:\n    DATASET - the dataset required by the user\n    RESPONSE - the response from the server\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_file_collection_upload_url.m/","title":"ndi.cloud.api.datasets.get_file_collection_upload_url","text":"<pre><code> GET_FILE_COLLECTION_UPLOAD_URL - get an upload URL for all file that will be published to the NDI Cloud\n\n  [RESPONSE,URL] = ndi.cloud.api.datasets.GET_FILE_COLLECTION_UPLOAD_URL(DATASET_ID)\n\n  Inputs:\n    DATASET_ID - a string representing the id of the dataset\n\n  Outputs:\n    RESPONSE - the get request summary\n    URL - the upload URL to PUT the file to\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_file_details.m/","title":"ndi.cloud.api.datasets.get_file_details","text":"<pre><code>  GET_FILE_DETAILS - Get the details, including the download url, for a individual file\n\n  [FILE_DETAIL, DOWNLOADURL, RESPONSE] = ndi.cloud.api.datasets.GET_FILE_DETAILS(DATASET_ID,UID)\n\n  Inputs:\n    DATASET_ID - a string representing the dataset id\n    UID - a string representing the file uid\n\n  Outputs:\n    FILE_DETAIL - the details of the file\n    DOWNLOADURL - the download url for the file\n    RESPONSE - the response from the server\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_file_upload_url.m/","title":"ndi.cloud.api.datasets.get_file_upload_url","text":"<pre><code>  GET_FILE_UPLOAD_URL - get an upload URL for an artifact file that will be published\n  to the NDI Cloud\n  Same functionality as ndi.cloud.api.files.GET_FILE_UPLOAD_URL\n\n  [RESPONSE,URL] = ndi.cloud.api.datasets.GET_FILE_UPLOAD_URL(DATASET_ID, UID)\n\n  Inputs:\n    DATASET_ID - a string representing the id of the dataset\n    UID - a string representing a unique identifier that can be used to\n    reference the file in documents\n\n  Outputs:\n    RESPONSE - the get request summary\n    URL - the upload URL to PUT the file to\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_published.m/","title":"ndi.cloud.api.datasets.get_published","text":"<pre><code>  GET_PUBLISHED - get all published datasets\n\n  [RESPONSE,DATASETS] = ndi.cloud.api.datasets.GET_PUBLISHED(PAGE, PAGE_SIZE)\n\n  Inputs:\n    PAGE - an integer representing the page of result to get\n    DATASET - an integer representing the number of results per page\n\n  Outputs:\n    RESPONSE - the get request summary\n    DATASETS - a high level summary of all published datasets\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_raw_file_upload_url.m/","title":"ndi.cloud.api.datasets.get_raw_file_upload_url","text":"<pre><code>  GET_RAW_FILE_UPLOAD_URL - Get an upload URL for a raw data file that will be\n  published to AWS Open Data after review\n  Same functionality as ndi.cloud.api.files.GET_RAW_FILE_UPLOAD_URL\n\n  [RESPONSE,URL] = ndi.cloud.api.datasets.GET_RAW_FILE_UPLOAD_URL(DATASET_ID, UID)\n\n  Inputs:\n    DATASET_ID - a string representing the id of the dataset\n    UID - a string representing a unique identifier that can be used to\n    reference the file in documents\n\n  Outputs:\n    RESPONSE - the get request summary\n    URL - the upload URL to PUT the file to\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/get_unpublished.m/","title":"ndi.cloud.api.datasets.get_unpublished","text":"<pre><code>  GET_UNPUBLISHED - get all submitted but unpublished datasets\n\n  RESPONSE = ndi.cloud.api.datasets.GET_UNPUBLISHED(PAGE, PAGE_SIZE)\n\n  Inputs:\n    PAGE - an integer representing the page of result to get\n    DATASET - an integer representing the number of results per page\n\n  Outputs:\n    RESPONSE - the updated dataset summary\n    DATASETS - a high level summary of all unpublished datasets\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/list_datasets.m/","title":"ndi.cloud.api.datasets.list_datasets","text":"<pre><code>  LIST_DATASETS - Get a list of all datasets in an organization\n\n  [RESPONSE, DATASETS] = ndi.cloud.api.datasets.LIST_DATASETS()\n\n  Outputs:\n    RESPONSE - the get request summary\n    DATASETS - A high level summary of all datasets in the organization\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/publish_dataset.m/","title":"ndi.cloud.api.datasets.publish_dataset","text":"<pre><code>  PUBLISH_DATASET - publish a dataset\n\n  RESPONSE = ndi.cloud.api.datasets.PUBLISH_DATASET(DATASET_ID)\n\n  Inputs:\n    DATASET_ID - an id of the dataset\n\n  Outputs:\n    RESPONSE - the dataset was published\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/submit_dataset.m/","title":"ndi.cloud.api.datasets.submit_dataset","text":"<pre><code>  SUBMIT_DATASET - submit a dataset for review\n\n  RESPONSE = ndi.cloud.api.datasets.SUBMIT_DATASET(DATASET_ID)\n\n  Inputs:\n    DATASET_ID - an id of the dataset\n\n  Outputs:\n    RESPONSE - the dataset was submitted\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/unpublish_dataset.m/","title":"ndi.cloud.api.datasets.unpublish_dataset","text":"<pre><code>  UNPUBLISH_DATASET - unpublish a dataset\n\n  RESPONSE = ndi.cloud.api.datasets.UNPUBLISH_DATASET(DATASET_ID)\n\n  Inputs:\n    DATASET_ID - an id of the dataset\n\n  Outputs:\n    RESPONSE - the dataset was unpublished\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdatasets/update_dataset.m/","title":"ndi.cloud.api.datasets.update_dataset","text":"<pre><code>  UPDATE_DATASET - update a dataset to NDI Cloud\n\n  RESPONSE = ndi.cloud.api.datasets.UPDATE_DATASET(DATASET_ID, DATASET)\n\n  Inputs:\n    DATASET_ID - an id of the dataset\n    DATASET - the updated version of the dataset in JSON-formatted text\n\n  Outputs:\n    RESPONSE - the updated dataset summary\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/add_document.m/","title":"ndi.cloud.api.documents.add_document","text":"<pre><code>  ADD_DOCUMENT - Add a document to a dataset\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/add_document_as_file.m/","title":"ndi.cloud.api.documents.add_document_as_file","text":"<pre><code>  ADD_DOCUMENT - add a document to the dataset using a file for upload\n\n  [RESPONSE, DOCUMENT_ID] = ndi.cloud.api.documents.ADD_DOCUMENT(DATASET_ID, DOCUMENT)\n\n  Inputs:\n    DATASET_ID - a string representing the dataset id\n    DOCUMENT - a string of JSON object representing the new document\n\n  Outputs:\n    RESPONSE - the new document summary\n\n  Note: use this function if documents are too large to send as json\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/delete_document.m/","title":"ndi.cloud.api.documents.delete_document","text":"<pre><code>  DELETE_DOCUMENT - delete a document from the dataset\n\n  RESPONSE = ndi.cloud.api.documents.DELETE_DOCUMENT(DATASET_ID, DOCUMENT_ID)\n\n  Inputs:\n    DATASET_ID - a string representing the dataset id\n    DOCUMENT_ID -  a string representing the document id\n\n  Outputs:\n    RESPONSE - a message saying if the document was deleted or not\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/get_bulk_download_url.m/","title":"ndi.cloud.api.documents.get_bulk_download_url","text":"<pre><code>  get_bulk_download_url - Get URL for downloading documents in bulk\n\n  downloadUrl = get_bulk_download_url(dataset_id) returns a signed url to\n    download a zip file containing all the json files containing document\n    data (as a root-level array) for the specified dataset\n\n  downloadUrl = get_bulk_download_url(dataset_id, document_ids) returns a \n    signed url to download a zip file containing a subset of documents for\n    the specified dataset. The document_ids is a string array of\n    document ids (NB: cloud ids, not NDI ids) representing documents to\n    download.\n\n  Inputs:\n    dataset_id - string representing a dataset id\n    document_ids - string array \n\n  Outputs:\n    downloadUrl - string representing a download url\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/get_bulk_upload_url.m/","title":"ndi.cloud.api.documents.get_bulk_upload_url","text":"<pre><code>  get_bulk_upload_url - Get URL for uploading documents in bulk\n\n  uploadUrl = get_bulk_upload_url(dataset_id) returns a signed url to\n    upload a zip file containing one or more json files containing document\n    data (as a root-level array) for the specified dataset\n\n  Inputs:\n    dataset_id - string representing a dataset id\n\n  Outputs:\n    uploadUrl - string representing a upload url\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/get_document.m/","title":"ndi.cloud.api.documents.get_document","text":"<pre><code>  GET_DOCUMENT - get a document\n\n  [RESPONSE,DOCUMENT] = ndi.cloud.api.documents.GET_DOCUMENT(DATASET_ID, DOCUMENT_ID)\n\n  Inputs:\n    DATASET_ID - a string representing the dataset id\n    DOCUMENT_ID -  a string representing the document id\n\n  Outputs:\n    RESPONSE - the updated dataset summary\n    DOCUMENT - A document object required by the user\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/list_dataset_documents.m/","title":"ndi.cloud.api.documents.list_dataset_documents","text":"<pre><code>  LIST_DATASET_DOCUMENTS - Get a list of summaries for all documents of a dataset.\n\n  [RESPONSE, SUMMARY] = ndi.cloud.api.documents.list_dataset_documents(DATASET_ID, options)\n\n  Inputs:\n    DATASET_ID - (1,1) string\n                 A string representing the dataset id.\n    options.page - (1,1) double\n                   The page number of results to retrieve. Defaults to 1.\n    options.pageSize - (1,1) double\n                       The number of results to retrieve per page.\n                       Defaults to 1000.\n\n  Outputs:\n    RESPONSE - The full HTTP response object.\n    SUMMARY  - A list of document summaries from the dataset.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/list_dataset_documents_all.m/","title":"ndi.cloud.api.documents.list_dataset_documents_all","text":"<pre><code>  LIST_DATASET_DOCUMENTS_ALL - Get summaries for ALL documents in a dataset.\n\n  [b, summary] = list_dataset_documents_all(cloudDatasetId, options)\n  This function retrieves all document summaries from a dataset by making repeated\n  paginated calls to ndi.cloud.api.documents.list_dataset_documents.\n\n  Inputs:\n    cloudDatasetId - (1,1) string\n                     A string representing the dataset id as it exists on the cloud.\n    options.pageSize - (1,1) double\n                       The number of results to retrieve per page.\n                       Defaults to 1000.\n    options.retries - (1,1) double\n                      The number of times to retry a failed page read\n                      before giving up. Defaults to 10.\n\n  Outputs:\n    b        - (1,1) logical\n               True if all pages were read successfully (retries are okay),\n               false if any page failed after all retry attempts.\n    summary  - (:,1) struct array\n               A struct array containing the concatenated list of document\n               summaries from all successful page reads.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bdocuments/update_document.m/","title":"ndi.cloud.api.documents.update_document","text":"<pre><code>  UPDATE_DOCUMENT - update a document\n\n  RESPONSE = ndi.cloud.api.documents.UPDATE_DOCUMENT(FILE_PATH, DATASET_ID, DOCUMENT_ID, DOCUMENT)\n\n  Inputs:\n    FILE_PATH - a string representing the file path\n    DATASET_ID - a string representing the dataset id\n    DOCUMENT_ID -  a string representing the document id\n    DOCUMENT - a JSON object representing the updated version of the\n    document\n\n  Outputs:\n    RESPONSE - the updated document summary\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bfiles/get_file_details.m/","title":"ndi.cloud.api.files.get_file_details","text":"<pre><code>  GET_FILE_DETAILS - Get the details, including the download url, for a individual file\n\n  [FILE_DETAIL, DOWNLOADURL, RESPONSE] = ndi.cloud.api.files.GET_FILE_DETAILS(DATASET_ID,UID)\n\n  Inputs:\n    DATASET_ID - a string representing the dataset id\n    UID - a string representing the file uid\n\n  Outputs:\n    FILE_DETAIL - the details of the file\n    DOWNLOADURL - the download url for the file\n    RESPONSE - the response from the server\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bfiles/get_file_upload_url.m/","title":"ndi.cloud.api.files.get_file_upload_url","text":"<pre><code>  GET_FILE_UPLOAD_URL - get an upload URL for an artifact file that will be\n  published to NDI Cloud\n  Same functionality as ndi.cloud.api.datasets.GET_FILE_UPLOAD_URL\n\n  [RESPONSE,UPLOAD_URL] = ndi.cloud.api.files.GET_FILE_UPLOAD_URL(DATASET_ID, UID)\n\n  Inputs:\n    DATASET_ID - a string representing the dataset id\n    UID -  a string representing the unique identifier that can be used to\n    reference the file in document\n\n  Outputs:\n    RESPONSE - the upload summary\n    UPLOAD_URL - the upload URL to put the file to\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bfiles/get_raw_file_upload_url.m/","title":"ndi.cloud.api.files.get_raw_file_upload_url","text":"<pre><code>  GET_RAW_FILE_UPLOAD_URL - get an upload URL for a raw data file that will be\n  published to AWS Open Data after review.\n  Same functionality as ndi.cloud.api.datasets.GET_RAW_FILE_UPLOAD_URL\n\n  [RESPONSE,UPLOAD_URL] = ndi.cloud.api.files.GET_RAW_FILE_UPLOAD_URL(DATASET_ID, UID)\n\n  Inputs:\n    DATASET_ID - a string representing the dataset id\n    UID -  a string representing the unique identifier that can be used to\n    reference the file in document\n\n  Outputs:\n    RESPONSE - the upload summary\n    UPLOAD_URL - the upload URL to put the file to\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Bfiles/put_files.m/","title":"ndi.cloud.api.files.put_files","text":"<pre><code>  PUT_FILES - upload the file at FILE_PATH to the presigned url\n\n  RESPONSE = ndi.cloud.api.files.PUT_FILES(PRESIGNED_URL, FILE_PATH)\n\n  Inputs:\n    PRESIGNED_URL - a string representing the url obtained from ndi.cloud.api.files.get_file_upload_url or get_raw_file_upload_url\n    FILE_PATH - a string representing the path to the file to be uploaded\n\n  Outputs:\n    RESPONSE - the response of the upload\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Busers/create_user.m/","title":"ndi.cloud.api.users.create_user","text":"<pre><code>  CREATE_USER - create a new user\n\n  RESPONSE = ndi.cloud.user.create_user(EMAIL, NAME, PASSWORD)\n\n  Inputs:\n    EMAIL - a string representing the user's e-mail\n    NAME -  a string representing the username\n    PASSWORD - a string representing the user's password\n\n  Outputs:\n    RESPONSE - a message indicates if the user is created or not\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bapi/%2Busers/get_user.m/","title":"ndi.cloud.api.users.get_user","text":"<pre><code>  GET_USER - get a user\n\n  [RESPONSE, NAME, EMAIL, ORGANIZATIONS] = ndi.cloud.user.get_user(USER_ID, AUTH_TOKEN)\n\n  Inputs:\n    USER_ID - a string representing the user's id\n    AUTH_TOKEN - a string representing the authentication token\n\n  Outputs:\n    RESPONSE - a message indicates if the user is found\n    NAME - a string representing the user's name\n    EMAIL - a string representing the user's e-mail\n    ORGANIZATIONS - a json object representing the organization information\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdownload/dataset.m/","title":"ndi.cloud.download.dataset","text":"<pre><code> DATASET download a dataset from NDI Cloud\n\n  [B, MSG] = ndi.cloud.download.dataset(DATASET_ID, MODE, [OUTPUT_PATH])\n\n  Inputs:\n    DATASET_ID  - The dataset ID to download\n    MODE        - 'local' to download all files locally,\n                  'hybrid' to leave binary files in cloud\n    OUTPUT_PATH - The path to download the dataset to. If not\n                  provided, the user will be prompted.\n\n  Outputs:\n    B - did the download work? 0 for no, 1 for yes\n    MSG - An error message if the download failed; otherwise ''\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdownload/dataset_documents.m/","title":"ndi.cloud.download.dataset_documents","text":"<pre><code> DATASET_DOCUMENTS download dataset documents from NDI Cloud\n\n  [B, MSG] = ndi.cloud.download.dataset_documents(DATASET, JSONPATH, ...])\n\n  Inputs:\n    DATASET     - The dataset structure returned from ndi.cloud.api.datasets.get_dataset\n    MODE        - 'local' to download all files locally,\n                  'hybrid' to leave binary files in cloud    \n    JSONPATH    - location to save documents\n    FILEPATH    - location to save files\n  Optional inputs (as name/value pairs):\n    verbose     - Should output be verbose? (default: true)\n\n  Outputs:\n    B - did the download work? 0 for no, 1 for yes\n    MSG - An error message if the download failed; otherwise ''\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdownload/download_dataset_files.m/","title":"ndi.cloud.download.download_dataset_files","text":"<pre><code>  DOWNLOAD_DATASET_FILES - Downloads dataset files from a cloud dataset.\n\n  Syntax:\n    ndi.cloud.download.download_dataset_files(CLOUDDATASETID, TARGETFOLDER, [FILEUUIDS], [OPTIONS])\n    Downloads specified files or all files from a cloud dataset to the target\n    folder.\n\n  Inputs:\n    CLOUDDATASETID (1,1) string     - The identifier of the cloud dataset.\n    TARGETFOLDER (1,1) string       - The folder where files will be downloaded. \n                                      Must be a valid folder path.\n    FILEUUIDS (1,:) string          - (Optional) The unique identifiers of the\n                                      files to download. Default is missing, which \n                                      indicates all files will be downloaded.\n    OPTIONS.Verbose (1,1) logical   - (Optional) Flag to enable verbose \n                                      output. Default is true.\n    OPTIONS.AbortOnError (1,1) logical - (Optional) Flag to control whether to \n                                      abort on download errors. Default is true.\n\n  Outputs:\n    None\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdownload/download_document_collection.m/","title":"ndi.cloud.download.download_document_collection","text":"<pre><code>  DOWNLOAD_DOCUMENT_COLLECTION - Download a collection of documents using bulk download\n\n    documents = ndi.cloud.download.download_document_collection(datasetId) \n     downloads a collection of documents from a specified dataset using a bulk\n     download mechanism. It retrieves a bulk download URL via the \n     ndi.cloud.api.documents.get_bulk_download_url API call, downloads the \n     corresponding ZIP file, and then extracts and decodes the JSON content\n     into a MATLAB struct.\n\n  INPUTS:\n     datasetId    - (1,1) string\n                    Unique identifier for the dataset from which documents are \n                    to be downloaded.\n\n     documentIds  - (1,:) string, optional\n                    Array of document identifiers to download. Default is an empty string (\"\"),\n                    which indicates that all documents in the dataset will be downloaded.\n\n     options.Timeout - (1,1) double, optional\n                    Optional name-value argument. Default is 10 (seconds)\n\n  OUTPUTS:\n     documents    - Cell\n                    A cell array of ndi.document objects.\n\n  EXAMPLE:\n     % Download all documents from a dataset:\n     docs = ndi.cloud.download.download_document_collection(\"dataset123\");\n\n     % Download specific documents with a custom timeout:\n     docs = ndi.cloud.download.download_document_collection(\"dataset123\", [\"doc1\", \"doc2\"]);\n\n  See also: ndi.cloud.api.documents.get_bulk_download_url\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdownload/jsons2documents.m/","title":"ndi.cloud.download.jsons2documents","text":"<pre><code>\n  [NDIDOCUMENTS] = JSONS2DOCUMENTS(JSONPATH)\n\n  Load a set of NDI documents from a set of downloaded JSON files\n  at JSONPATH. Provides improved error reporting for JSON decoding issues,\n  treating unreadable or invalid files as errors. Execution halts on the first file error.\n  Excludes files starting with '._'.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdownload/%2Binternal/set_file_info.m/","title":"ndi.cloud.download.internal.set_file_info","text":"<pre><code>  SET_FILE_INFO - set file info parameters for different modes\n\n  NEWDOCSTRUCT = SET_FILE_INFO(DOCSTRUCT, MODE, FILEPATH)\n\n  Given a document structure downloaded from ndi.cloud.api.documents.get_document,\n  set the 'delete_original' and 'ingest' fields as appropriate to the mode.\n\n  The MODE can be 'local' or 'hybrid'. If MODE is 'local', then\n    'delete_original' and 'ingest' are set to 1. Otherwise,\n    the are set to 0.\n\n  FILEPATH is the location of any locally downloaded files (for 'local' MODE).\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bdownload/%2Binternal/structs_to_ndi_documents.m/","title":"ndi.cloud.download.internal.structs_to_ndi_documents","text":"<pre><code>  STRUCTS_TO_NDI_DOCUMENTS - Convert downloaded ndi document structures to ndi documents\n\n    Utility function for creating a set of ndi.documents from a set of structures\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/create_remote_dataset_doc.m/","title":"ndi.cloud.internal.create_remote_dataset_doc","text":"<pre><code>  create_remote_dataset_doc - Create NDI document with remote dataset details.\n\n  Syntax:\n    remoteDatasetDoc = create_remote_dataset_doc(cloudDatasetId) \n    This function retrieves a remote dataset from the cloud and creates \n    a \"dataset remote\" NDI document for that dataset.\n\n  Input Arguments:\n    cloudDatasetId - The unique identifier for the cloud dataset to be \n                     retrieved.\n\n  Output Arguments:\n    remoteDatasetDoc - A document object containing the remote dataset \n                       ID and organization ID.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/decode_jwt.m/","title":"ndi.cloud.internal.decode_jwt","text":"<pre><code>  decode_jwt - Decode a JSON Web token\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/getCloudDatasetIdForLocalDataset.m/","title":"ndi.cloud.internal.getCloudDatasetIdForLocalDataset","text":"<pre><code>ndi.cloud.internal.getCloudDatasetIdForLocalDataset is a function.\n    cloudDatasetId = ndi.cloud.internal.getCloudDatasetIdForLocalDataset(ndiDataset)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/get_active_token.m/","title":"ndi.cloud.internal.get_active_token","text":"<pre><code>ndi.cloud.internal.get_active_token is a function.\n    [token, organization_id] = ndi.cloud.internal.get_active_token\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/get_token_expiration.m/","title":"ndi.cloud.internal.get_token_expiration","text":"<pre><code>  GET_TOKEN_EXPIRATION - Return token expiration time in local time zone\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/get_uploaded_document_ids.m/","title":"ndi.cloud.internal.get_uploaded_document_ids","text":"<pre><code>  get_uploaded_document_ids - Get cell array of uploaded document ids.\n\n    Use api endpoint to get ids for all remote (cloud) documents\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/get_uploaded_file_ids.m/","title":"ndi.cloud.internal.get_uploaded_file_ids","text":"<pre><code>  get_uploaded_file_ids - Get cell array of uploaded file ids.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Binternal/get_weboptions_with_auth_header.m/","title":"ndi.cloud.internal.get_weboptions_with_auth_header","text":"<pre><code>ndi.cloud.internal.get_weboptions_with_auth_header is a function.\n    opts = ndi.cloud.internal.get_weboptions_with_auth_header\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/SyncOptions.m/","title":"CLASS ndi.cloud.sync.SyncOptions","text":"<pre><code>  SyncOptions  Options class for controlling sync behavior\n\n    This class defines a set of configurable options used when performing\n    dataset synchronization tasks, i.e document synchronization.\n\n    This class is meant to be used in argument blocks of various sync\n    functions in order to provide a reusable set of sync options.\n\n    Available options:\n      SyncFiles (logical) - If true, files will be synced (default: false).\n      Verbose (logical) - If true, verbose output is printed (default: true).\n      DryRun (logical) - If true, actions are simulated but not performed (default: false).\n      FileUploadStrategy (string) - \"serial\" to upload files one by one or\n            \"batch\" (default) to upload a bundles of files using zip files. \n            The \"batch\" option is recommended when uploading many files,\n            and the serial option can be used as a fallback if batch upload fails.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/SyncOptions.m/#superclasses","title":"Superclasses","text":"<p>matlab.mixin.SetGet, handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/SyncOptions.m/#properties","title":"Properties","text":"Property Description SyncFiles Verbose DryRun FileUploadStrategy"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/SyncOptions.m/#methods","title":"Methods","text":"Method Description SyncOptions SyncOptions Construct a new SyncOptions object addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. get GET    Get MATLAB object properties. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. set SET    Set MATLAB object property values. toCell value pairs"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/SyncOptions.m/#methods-help","title":"Methods help","text":"<p>SyncOptions - SyncOptions Construct a new SyncOptions object</p> <pre><code>obj = SyncOptions() creates a SyncOptions object with default values.\n\n    obj = SyncOptions(options) initializes properties from the given struct.\n    Each field in the struct must correspond to a property name.\n\n    Documentation for ndi.cloud.sync.SyncOptions/SyncOptions\n       doc ndi.cloud.sync.SyncOptions\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.cloud.sync.syncoptions, matlab.metadata.Property, events\n\nHelp for ndi.cloud.sync.SyncOptions/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.CLOUD.SYNC.SYNCOPTIONS, NDI.CLOUD.SYNC.SYNCOPTIONS/ISVALID, CLEAR\n\nHelp for ndi.cloud.sync.SyncOptions/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.CLOUD.SYNC.SYNCOPTIONS, NDI.CLOUD.SYNC.SYNCOPTIONS/GE, NDI.CLOUD.SYNC.SYNCOPTIONS/GT, NDI.CLOUD.SYNC.SYNCOPTIONS/LE, NDI.CLOUD.SYNC.SYNCOPTIONS/LT, NDI.CLOUD.SYNC.SYNCOPTIONS/NE\n\nHelp for ndi.cloud.sync.SyncOptions/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.CLOUD.SYNC.SYNCOPTIONS\n\nHelp for ndi.cloud.sync.SyncOptions/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.cloud.sync.syncoptions, ndi.cloud.sync.syncoptions/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.cloud.sync.SyncOptions/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.CLOUD.SYNC.SYNCOPTIONS, NDI.CLOUD.SYNC.SYNCOPTIONS/EQ, NDI.CLOUD.SYNC.SYNCOPTIONS/GT, NDI.CLOUD.SYNC.SYNCOPTIONS/LE, NDI.CLOUD.SYNC.SYNCOPTIONS/LT, NDI.CLOUD.SYNC.SYNCOPTIONS/NE\n\nHelp for ndi.cloud.sync.SyncOptions/ge is inherited from superclass handle\n</code></pre> <p>get - GET    Get MATLAB object properties.</p> <pre><code>V = GET(H, 'PropertyName') returns the value of the specified\n    property for the MATLAB object with handle H.  If H is an array of  \n    handles, GET returns an M-by-1 cell array of values, where M is equal\n    to length(H). If 'PropertyName' is replaced by a 1-by-N or N-by-1\n    cell array of strings containing property names, GET returns an M-by-N\n    cell array of values.  For non-scalar H, if 'PropertyName' is a \n    dynamic  property, GET returns a value only if the property exists in \n    all objects of the array.\n\n    V = GET(H, 'InexactPropertyName') returns the value of the specified\n    property for the MATLAB object with handle H. GET matches partial and \n    case-insensitive names that are not ambiguous. Inexact name matching \n    applies only to class properties. Dynamic properties require exact name matches.\n\n    V = GET(H) returns a structure in which each field name is the name of\n    a user-gettable property of H and each field contains the value of that\n    property.  If H is non-scalar, GET returns a struct array with \n    dimensions M-by-1, where M = numel(H).  If H is non-scalar, GET does \n    not return dynamic properties.\n\n    GET(H) displays the names of all user-gettable properties and their \n    current values for the MATLAB object with handle H.  The class can \n    override the GETDISP method to control how this information is \n    displayed.  H must be scalar.\n\n    See also GET, ndi.cloud.sync.SyncOptions, ndi.cloud.sync.SyncOptions/GETDISP, HANDLE\n\nHelp for ndi.cloud.sync.SyncOptions/get is inherited from superclass matlab.mixin.SetGet\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.CLOUD.SYNC.SYNCOPTIONS, NDI.CLOUD.SYNC.SYNCOPTIONS/EQ, NDI.CLOUD.SYNC.SYNCOPTIONS/GE, NDI.CLOUD.SYNC.SYNCOPTIONS/LE, NDI.CLOUD.SYNC.SYNCOPTIONS/LT, NDI.CLOUD.SYNC.SYNCOPTIONS/NE\n\nHelp for ndi.cloud.sync.SyncOptions/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.CLOUD.SYNC.SYNCOPTIONS, NDI.CLOUD.SYNC.SYNCOPTIONS/DELETE\n\nHelp for ndi.cloud.sync.SyncOptions/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.CLOUD.SYNC.SYNCOPTIONS, NDI.CLOUD.SYNC.SYNCOPTIONS/EQ, NDI.CLOUD.SYNC.SYNCOPTIONS/GE, NDI.CLOUD.SYNC.SYNCOPTIONS/GT, NDI.CLOUD.SYNC.SYNCOPTIONS/LT, NDI.CLOUD.SYNC.SYNCOPTIONS/NE\n\nHelp for ndi.cloud.sync.SyncOptions/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.cloud.sync.syncoptions, matlab.metadata.Property, events\n\nHelp for ndi.cloud.sync.SyncOptions/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.CLOUD.SYNC.SYNCOPTIONS, NDI.CLOUD.SYNC.SYNCOPTIONS/EQ, NDI.CLOUD.SYNC.SYNCOPTIONS/GE, NDI.CLOUD.SYNC.SYNCOPTIONS/GT, NDI.CLOUD.SYNC.SYNCOPTIONS/LE, NDI.CLOUD.SYNC.SYNCOPTIONS/NE\n\nHelp for ndi.cloud.sync.SyncOptions/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.CLOUD.SYNC.SYNCOPTIONS, NDI.CLOUD.SYNC.SYNCOPTIONS/EQ, NDI.CLOUD.SYNC.SYNCOPTIONS/GE, NDI.CLOUD.SYNC.SYNCOPTIONS/GT, NDI.CLOUD.SYNC.SYNCOPTIONS/LE, NDI.CLOUD.SYNC.SYNCOPTIONS/LT\n\nHelp for ndi.cloud.sync.SyncOptions/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.CLOUD.SYNC.SYNCOPTIONS, NDI.CLOUD.SYNC.SYNCOPTIONS/ADDLISTENER, NDI.CLOUD.SYNC.SYNCOPTIONS/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.cloud.sync.SyncOptions/notify is inherited from superclass handle\n</code></pre> <p>set - SET    Set MATLAB object property values.</p> <pre><code>SET(H,'PropertyName',PropertyValue) sets the value of the specified \n    property for the MATLAB object with handle H.  If H is an array of \n    handles, the specified property's value is set for all objects in H.  \n\n    SET(H,'InexactPropertyName',PropertyValue) sets the value of the specified \n    property for the MATLAB object with handle H. SET matches partial and \n    case-insensitive names that are not ambiguous. Inexact name matching \n    applies only to class properties. Dynamic properties require exact name matches.\n\n    SET(H,'PropertyName1',Value1,'PropertyName2',Value2,...) sets multiple\n    property values with a single statement. \n\n    SET(H,pn,pv) sets the named properties specified in the cell array of\n    strings pn to the corresponding values in the cell array pv for all\n    objects specified in H.  The cell array pn must be 1-by-N, but the cell\n    array pv can be M-by-N where M is equal to length(H), so that each\n    object will be updated with a different set of values for the list of\n    property names contained in pn.\n\n    Given S a structure whose field names are object property names, \n    SET(H,S) sets the properties identified by each field name of S with\n    the values contained in the structure.\n\n    Note that it is permissible to use property/value string pairs, \n    structures, and property/value cell array pairs in the same call to\n    SET.\n\n    A = SET(H, 'PropertyName') returns the possible values for the \n    specified property of the object with handle H.  The returned array\n    is a cell array of possible value strings or an empty cell array if\n    the property does not have a finite set of possible string values.\n\n    SET(H,'PropertyName') displays the possible values for the specified\n    property of object with handle H.\n\n    A = SET(H) returns the names of the user-settable properties and their\n    possible values for the object with handle H.  H must be scalar.  \n    The return value is a  structure whose field names are the names of the\n    user-settable properties of H, and whose values are cell arrays of\n    possible property values or empty cell arrays.\n\n    SET(H) displays the names and possible values for all user-settable\n    properties of scalar object H.  The class can override the SETDISP \n    method to control how this information is displayed. \n\n    See also SET, ndi.cloud.sync.SyncOptions, ndi.cloud.sync.SyncOptions/SETDISP, HANDLE\n\nHelp for ndi.cloud.sync.SyncOptions/set is inherited from superclass matlab.mixin.SetGet\n</code></pre> <p>toCell - value pairs</p> <pre><code>nvPairs = obj.toCell() returns a 1-by-2N cell array containing\n    the property names and values of the object, suitable for use\n    as name-value pair arguments in other functions.\n\n    Example:\n      args = opts.toCell();\n      someFunction(args{:});\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/downloadNew.m/","title":"ndi.cloud.sync.downloadNew","text":"<pre><code> DOWNLOADNEW Download new documents (and associated data files) from remote to local.\n\n  Syntax:\n    ndi.cloud.sync.downloadNew(NDIDATASET, SYNCOPTIONS)\n\n    This function implements the \"DownloadNew\" synchronization mode.\n    It identifies documents present on the remote cloud storage that are\n    not present in the local NDI dataset and downloads them.\n\n    No local documents are deleted or modified.\n    No remote documents are deleted or modified.\n\n    It relies on a sync index file ([NDIDATASET.path]/.ndi/sync/index.json)\n    to keep track of previously synced states, though for \"DownloadNew\"\n    mode, it compares the current remote state to the remote state from the\n    last sync (from the index) to identify newly added remote documents.\n    The index is updated after the operation.\n\n    Inputs:\n        ndiDataset (1,1) ndi.dataset - The local NDI dataset object.\n        syncOptions (name, value pairs) - Optional synchronization options:\n        - SyncFiles (logical) - If true, files will be synced (default: true).\n        - Verbose (logical) - If true, verbose output is printed (default: true).\n        - DryRun (logical) - If true, actions are simulated but not performed (default: false).\n\n    See also:\n        ndi.cloud.syncDataset\n        ndi.cloud.sync.SyncOptions,\n        ndi.cloud.sync.enum.SyncMode\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/mirrorFromRemote.m/","title":"ndi.cloud.sync.mirrorFromRemote","text":"<pre><code> MIRRORFROMREMOTE Mirrors the remote dataset to the local dataset.\n\n  Syntax:\n    ndi.cloud.sync.mirrorFromRemote(NDIDATASET, SYNCOPTIONS)\n\n    This function implements the \"MirrorFromRemote\" synchronization mode.\n    It ensures the local dataset becomes an exact representation of the\n    remote dataset by:\n    1. Downloading any documents present on the remote but not locally.\n    2. Deleting any local documents that are not present on the remote.\n\n    The remote dataset is not modified by this operation.\n    The local dataset is modified (additions and deletions).\n\n    It relies on a sync index file ([NDIDATASET.path]/.ndi/sync/index.json)\n    and updates it after the operation.\n\n    Inputs:\n        ndiDataset (1,1) ndi.dataset - The local NDI dataset object.\n        syncOptions (name, value pairs) - Optional synchronization options:\n        - SyncFiles (logical) - If true, files will be synced (default: true).\n        - Verbose (logical) - If true, verbose output is printed (default: true).\n        - DryRun (logical) - If true, actions are simulated but not performed (default: false).\n\n    See also:\n        ndi.cloud.syncDataset\n        ndi.cloud.sync.SyncOptions,\n        ndi.cloud.sync.enum.SyncMode\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/mirrorToRemote.m/","title":"ndi.cloud.sync.mirrorToRemote","text":"<pre><code> MIRRORTOREMOTE Mirrors the local dataset to the remote dataset.\n\n  Syntax:\n    ndi.cloud.sync.mirrorToRemote(NDIDATASET, SYNCOPTIONS)\n\n    This function implements the \"MirrorToRemote\" synchronization mode.\n    It ensures the remote dataset becomes an exact representation of the\n    local dataset by:\n    1. Uploading any documents present locally but not on the remote.\n    2. Deleting any remote documents that are not present locally.\n\n    The local dataset is not modified by this operation.\n    The remote dataset is modified (additions and deletions).\n\n    It relies on a sync index file ([NDIDATASET.path]/.ndi/sync/index.json)\n    and updates it after the operation.\n\n    Inputs:\n        ndiDataset (1,1) ndi.dataset - The local NDI dataset object.\n        syncOptions (name, value pairs) - Optional synchronization options:\n        - SyncFiles (logical) - If true, files will be synced (default: true).\n        - Verbose (logical) - If true, verbose output is printed (default: true).\n        - DryRun (logical) - If true, actions are simulated but not performed (default: false).\n\n    See also:\n        ndi.cloud.syncDataset\n        ndi.cloud.sync.SyncOptions,\n        ndi.cloud.sync.enum.SyncMode\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/twoWaySync.m/","title":"ndi.cloud.sync.twoWaySync","text":"<pre><code> TWOWAYSYNC Performs a bidirectional additive synchronization.\n\n  Syntax:\n    ndi.cloud.sync.twoWaySync(NDIDATASET, SYNCOPTIONS)\n\n    This function implements the \"TwoWaySync\" synchronization mode.\n    It ensures that both local and remote datasets are updated with\n    documents from the other, without deleting any documents.\n    1. Uploads any documents present locally but not on the remote.\n    2. Downloads any documents present on the remote but not locally.\n\n    Both local and remote datasets may be modified (additions only).\n\n    It relies on a sync index file ([NDIDATASET.path]/.ndi/sync/index.json)\n    and updates it after the operation.\n\n    Inputs:\n        ndiDataset (1,1) ndi.dataset - The local NDI dataset object.\n        syncOptions (name, value pairs) - Optional synchronization options:\n        - SyncFiles (logical) - If true, files will be synced (default: true).\n        - Verbose (logical) - If true, verbose output is printed (default: true).\n        - DryRun (logical) - If true, actions are simulated but not performed (default: false).\n\n    See also:\n        ndi.cloud.syncDataset\n        ndi.cloud.sync.SyncOptions,\n        ndi.cloud.sync.enum.SyncMode\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/uploadNew.m/","title":"ndi.cloud.sync.uploadNew","text":"<pre><code> UPLOADNEW Upload new local documents (and associated files) to remote.\n\n  Syntax:\n    ndi.cloud.sync.uploadNew(NDI_DATASET, SYNC_OPTIONS)\n\n    This function implements the \"UploadNew\" synchronization mode.\n    mode, it compares the current local state to the local state from the\n    last sync (from a sync index) to identify newly added local documents,\n    which are then uploaded.\n\n    No remote documents are deleted by this mode.\n    No local documents are deleted by this mode.\n\n    It relies on a sync index file ([NDIDATASET.path]/.ndi/sync/index.json)\n    to keep track of previously synced states and updates it after the operation.\n\n    Inputs:\n        ndiDataset (1,1) ndi.dataset - The local NDI dataset object.\n        syncOptions (name, value pairs) - Optional synchronization options:\n        - SyncFiles (logical) - If true, files will be synced (default: true).\n        - Verbose (logical) - If true, verbose output is printed (default: true).\n        - DryRun (logical) - If true, actions are simulated but not performed (default: false).\n\n    See also:\n        ndi.cloud.syncDataset\n        ndi.cloud.sync.SyncOptions,\n        ndi.cloud.sync.enum.SyncMode\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Benum/SyncMode.m/","title":"CLASS ndi.cloud.sync.enum.SyncMode","text":"<pre><code>  SyncMode - Enumeration of supported dataset synchronization modes\n\n  Defines modes for unidirectional and bidirectional sync operations\n  between a local and a remote (NDI Cloud) dataset, with or without mirroring.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Benum/SyncMode.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Benum/SyncMode.m/#properties","title":"Properties","text":"Property Description Function"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Benum/SyncMode.m/#methods","title":"Methods","text":"Method Description SyncMode Enumeration of supported dataset synchronization modes cellstr Cellstr conversion for enumeration classes char Char conversion for enumeration classes eq Determine equality execute ndi.cloud.sync.enum.SyncMode/execute is a function. intersect intersect for enumeration classes isequal isequal for enumerations, including support for string/char vector/cellstr comparisons isequaln isequaln for enumerations, including support for string/char vector/cellstr comparisons ismember ismember for enumeration classes ne Determine inequality setdiff setdiff for enumeration classes setxor setxor for enumeration classes strcmp strcmp for enumeration classes strcmpi strcmpi for enumeration classes string string conversion for enumeration classes strncmp strncmp for enumeration classes strncmpi strncmpi for enumeration classes union union for enumeration classes"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Benum/SyncMode.m/#methods-help","title":"Methods help","text":"<p>SyncMode - Enumeration of supported dataset synchronization modes</p> <pre><code>Defines modes for unidirectional and bidirectional sync operations\n  between a local and a remote (NDI Cloud) dataset, with or without mirroring.\n\n    Documentation for ndi.cloud.sync.enum.SyncMode/SyncMode\n       doc ndi.cloud.sync.enum.SyncMode\n</code></pre> <p>cellstr - Cellstr conversion for enumeration classes</p> <pre><code>\n</code></pre> <p>char - Char conversion for enumeration classes</p> <pre><code>\n</code></pre> <p>eq - Determine equality</p> <pre><code>This MATLAB function returns a logical array or a table of logical\n    values with elements set to logical 1 (true) where inputs A and B are\n    equal; otherwise, the element is logical 0 (false).\n\n    Syntax\n      A == B\n      eq(A,B)\n\n    Input Arguments\n      A - Operands\n        scalars | vectors | matrices | multidimensional arrays | tables |\n        timetables\n      B - Operands\n        scalars | vectors | matrices | multidimensional arrays | tables |\n        timetables\n\n    Examples\n      openExample('matlab/EqualityOfTwoVectorsExample')\n      openExample('matlab/FindCharactersInStringExample')\n      openExample('matlab/FindValuesInCategoricalArrayExample')\n      openExample('matlab/CompareFloatingPointNumbersExample')\n      openExample('matlab/CompareDatetimeValuesExample')\n      openExample('matlab/CompareTablesExample')\n\n    See also isapprox, ge, gt, le, lt, ne\n\n    Introduced in MATLAB before R2006a\n    Documentation for eq\n       doc eq\n</code></pre> <p>execute - ndi.cloud.sync.enum.SyncMode/execute is a function.</p> <pre><code>execute(obj, ndiDataset, syncOptions)\n</code></pre> <p>intersect - intersect for enumeration classes</p> <pre><code>\n</code></pre> <p>isequal - isequal for enumerations, including support for string/char vector/cellstr comparisons</p> <pre><code>\n</code></pre> <p>isequaln - isequaln for enumerations, including support for string/char vector/cellstr comparisons</p> <pre><code>\n</code></pre> <p>ismember - ismember for enumeration classes</p> <pre><code>\n</code></pre> <p>ne - Determine inequality</p> <pre><code>This MATLAB function returns a logical array or a table of logical\n    values with elements set to logical 1 (true) where inputs A and B are\n    not equal; otherwise, the element is logical 0 (false).\n\n    Syntax\n      A ~= B\n      ne(A,B)\n\n    Input Arguments\n      A - Operands\n        scalars | vectors | matrices | multidimensional arrays | tables |\n        timetables\n      B - Operands\n        scalars | vectors | matrices | multidimensional arrays | tables |\n        timetables\n\n    Examples\n      openExample('matlab/InequalityOfTwoVectorsExample')\n      openExample('matlab/FindCharactersInStringNotEqualExample')\n      openExample('matlab/FindValuesInCategoricalArrayNotEqualExample')\n      openExample('matlab/CompareFloatingPointNumbersNotEqualExample')\n      openExample('matlab/InequalityOfTwoDatetimeArraysExample')\n      openExample('matlab/CompareTablesNEExample')\n\n    See also ge, gt, le, lt, eq\n\n    Introduced in MATLAB before R2006a\n    Documentation for ne\n       doc ne\n</code></pre> <p>setdiff - setdiff for enumeration classes</p> <pre><code>\n</code></pre> <p>setxor - setxor for enumeration classes</p> <pre><code>\n</code></pre> <p>strcmp - strcmp for enumeration classes</p> <pre><code>\n</code></pre> <p>strcmpi - strcmpi for enumeration classes</p> <pre><code>\n</code></pre> <p>string - string conversion for enumeration classes</p> <pre><code>\n</code></pre> <p>strncmp - strncmp for enumeration classes</p> <pre><code>\n</code></pre> <p>strncmpi - strncmpi for enumeration classes</p> <pre><code>\n</code></pre> <p>union - union for enumeration classes</p> <pre><code>\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Binternal/Constants.m/","title":"CLASS ndi.cloud.sync.internal.Constants","text":"<pre><code>ndi.cloud.sync.internal.Constants is a class.\n    obj = ndi.cloud.sync.internal.Constants\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Binternal/Constants.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Binternal/Constants.m/#properties","title":"Properties","text":"Property Description FileSyncLocation"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Binternal/Constants.m/#methods","title":"Methods","text":"Method Description Constants ndi.cloud.sync.internal.Constants/Constants is a constructor."},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Binternal/Constants.m/#methods-help","title":"Methods help","text":"<p>Constants - ndi.cloud.sync.internal.Constants/Constants is a constructor.</p> <pre><code>obj = ndi.cloud.sync.internal.Constants\n\n    Documentation for ndi.cloud.sync.internal.Constants/Constants\n       doc ndi.cloud.sync.internal.Constants\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Binternal/deleteLocalDocuments.m/","title":"ndi.cloud.sync.internal.deleteLocalDocuments","text":"<pre><code>  DELETELOCALDOCUMENTS Deletes specified documents from the local NDI dataset.\n\n    ndi.cloud.sync.internal.DELETELOCALDOCUMENTS(NDIDATASET, LOCALIDSTODELETE, SYNCOPTIONS)\n\n    Inputs:\n        ndiDataset (1,1) ndi.dataset - The local NDI dataset object.\n        localIdsToDelete (1,:) string - A string array of NDI document UUIDs\n            to delete from the local dataset.\n        syncOptions (1,1) ndi.cloud.sync.SyncOptions - Synchronization options,\n            primarily for DryRun and Verbose flags.\n\n    This function iterates through the provided document IDs, searches for them\n    in the local dataset, and removes them if found. It respects the\n    DryRun option in syncOptions.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Binternal/deleteRemoteDocuments.m/","title":"ndi.cloud.sync.internal.deleteRemoteDocuments","text":"<pre><code>  DELETEREMOTEDOCUMENTS Deletes specified documents from the remote cloud storage.\n\n    ndi.cloud.sync.internal.DELETEREMOTEDOCUMENTS(CLOUDDATASETID, REMOTEAPIIDSTODELETE, SYNCOPTIONS)\n\n    Inputs:\n        cloudDatasetId (1,1) string - The ID of the NDI dataset on the cloud.\n        remoteApiIdsToDelete (1,:) string - A string array of cloud-provider-specific\n            API document IDs to delete from the remote storage.\n        syncOptions (1,1) ndi.cloud.sync.SyncOptions - Synchronization options,\n            primarily for DryRun and Verbose flags.\n\n    This function iterates through the provided API document IDs and calls\n    an NDI cloud API function (assumed to be ndi.cloud.api.documents.delete)\n    to remove each document from the remote storage. It respects the\n    DryRun option in syncOptions.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Binternal/downloadNdiDocuments.m/","title":"ndi.cloud.sync.internal.downloadNdiDocuments","text":"<pre><code>  DOWNLOADNDIDOCUMENTS Downloads a collection of NDI documents and their files.\n\n    ndi.cloud.sync.internal.DOWNLOADEDNDIDOCUMENTS = ndi.cloud.sync.internal.DOWNLOADNDIDOCUMENTS(...\n        CLOUDDATASETID, CLOUDDOCUMENTIDS, NDIDATASET, SYNCOPTIONS)\n\n    This function downloads document metadata from the cloud, and if\n    syncOptions.SyncFiles is true, it also downloads the associated data files\n    to a local staging location and updates document file information.\n    Finally, it adds the documents to the local NDI dataset if provided\n\n    Inputs:\n        cloudDatasetId (1,1) string - The ID of the dataset on the cloud.\n        cloudDocumentIds (cellstr or string array) - A list of\n            cloud-specific document IDs to download.\n        ndiDataset (1,1) ndi.dataset - Optional: The local NDI dataset object.\n        syncOptions (1,1) ndi.cloud.sync.SyncOptions - Synchronization options.\n\n    Outputs:\n        downloadedNdiDocuments (cell): A cell array of the ndi.document objects\n            that were downloaded and added to the dataset.\n\n    See also: ndi.cloud.download.download_document_collection,\n              ndi.cloud.sync.internal.getFileUidsFromDocuments,\n              ndi.cloud.download.download_dataset_files,\n              ndi.cloud.sync.internal.updateFileInfoForRemoteFiles,\n              ndi.cloud.sync.internal.updateFileInfoForLocalFiles\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Binternal/getFileUidsFromDocuments.m/","title":"ndi.cloud.sync.internal.getFileUidsFromDocuments","text":"<pre><code>  GETFILEUIDSFROMDOCUMENTS Extracts all unique file UIDs from a cell array of NDI documents.\n\n    FILEUIDS = ndi.cloud.sync.internal.GETFILEUIDSFROMDOCUMENTS(NDIDOCUMENTS)\n\n    Inputs:\n        ndiDocuments (cell): A cell array of ndi.document objects.\n\n    Outputs:\n        fileUids (cellstr): A cell array of unique file UIDs found in the\n            documents. Returns an empty cell array if no files are found or\n            if ndiDocuments is empty.\n\n    This function iterates through each document, and if the document has files,\n    it extracts the UIDs from the file_info.locations.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Binternal/listLocalDocuments.m/","title":"ndi.cloud.sync.internal.listLocalDocuments","text":"<pre><code>  listLocalDocuments - List documents in local dataset\n\n  Utility function to retrieve all documents from a local dataset and\n  optionally also return their document ids.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Binternal/listRemoteDocumentIds.m/","title":"ndi.cloud.sync.internal.listRemoteDocumentIds","text":"<pre><code>  listRemoteDocumentIds - Retrieves document IDs from a remote cloud dataset\n\n  Syntax:\n    documentIds = ndi.cloud.sync.internal.listRemoteDocumentIds(cloudDatasetId) \n    This function retrieves the NDI and API document IDs associated with \n    a specified cloud dataset ID and returns them in a table format.\n\n  Input Arguments:\n    cloudDatasetId (1,1) string - The ID of the cloud dataset from which to \n    retrieve document IDs.\n\n  Output Arguments:\n    documentIds - A table containing the NDI and API document IDs with \n    variable names 'ndiId' and 'apiId'.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Binternal/updateFileInfoForLocalFiles.m/","title":"ndi.cloud.sync.internal.updateFileInfoForLocalFiles","text":"<pre><code>  updateFileInfoForLocalFiles - Update file info of document for local files\n\n  Syntax:\n    document = ndi.cloud.sync.internal.updateFileInfoForLocalFiles(document, fileDirectory)\n        updates the file info of the document to point to a file in the\n        provided (local) file directory\n\n  Input Arguments:\n    document - The document object that contains file info to be updated\n    fileDirectory - The directory where local files are stored\n\n  Output Arguments:\n    document - The updated document object with new file info\n\n  See also:\n    ndi.cloud.sync.internal.updateFileInfoForRemoteFiles\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Binternal/updateFileInfoForRemoteFiles.m/","title":"ndi.cloud.sync.internal.updateFileInfoForRemoteFiles","text":"<pre><code>  updateFileInfoForRemoteFiles - Update file info of document for remote (cloud-only) files\n\n  Syntax:\n    document = ndi.cloud.sync.internal.updateFileInfoForRemoteFiles(document, cloudDatasetId)\n    This function updates the file information in the provided document\n    object for files that are stored remotely in NDI cloud.\n\n    The following changes are made to the file location structure:\n        1. set the 'delete_original' and 'ingest' fields to false.\n        2. set the location field using the template \"ndic://{dataset_id}/{file_uid}\"\n        3. set the location_type field to \"ndicloud\"\n\n  Input Arguments:\n    document          - The document object containing file information.\n    cloudDatasetId    - The unique identifier for the cloud dataset.\n\n  Output Arguments:\n    document          - The updated document object with modified file info.\n\n  See also:\n    ndi.cloud.sync.internal.updateFileInfoForLocalFiles\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Binternal/upload_files_for_dataset_documents.m/","title":"ndi.cloud.sync.internal.upload_files_for_dataset_documents","text":"<pre><code>  upload_files_for_dataset_documents - Upload a set of files belonging to a set of dataset documents\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Binternal/%2Bindex/createSyncIndexStruct.m/","title":"ndi.cloud.sync.internal.index.createSyncIndexStruct","text":"<pre><code>  CREATESYNCINDEXSTRUCT Creates the MATLAB structure for the NDI sync index.\n\n    INDEXSTRUCT = ndi.cloud.sync.internal.CREATESYNCINDEXSTRUCT(LOCALNDIIDS, REMOTENDIIDS)\n    creates a structure that can be serialized to JSON for the sync index file.\n\n    Inputs:\n        localNdiIds (string array): A list of NDI document UUIDs\n            that are present in the local NDI dataset.\n        remoteNdiIds (string array): A list of NDI document UUIDs\n            that are present on the remote cloud storage.\n\n    Outputs:\n        indexStruct (struct): A structure with the following fields:\n            localDocumentIdsLastSync (string): String array of local NDI IDs.\n            remoteDocumentIdsLastSync (string): String array of remote NDI IDs.\n            lastSyncTimestamp (string): Current timestamp in ISO 8601 format.\n\n    Example:\n        local_ids = {\"uuid-doc-A\", \"uuid-doc-B\"};\n        remote_ids = {\"uuid-doc-A\", \"uuid-doc-C\"};\n        idx_struct = ndi.cloud.sync.internal.index.createSyncIndexStruct(local_ids, remote_ids);\n        % idx_struct can then be passed to a JSON writing function.\n\n    See also: ndi.cloud.sync.internal.index.readSyncIndex\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Binternal/%2Bindex/getIndexFilepath.m/","title":"ndi.cloud.sync.internal.index.getIndexFilepath","text":"<pre><code>ndi.cloud.sync.internal.index.getIndexFilepath is a function.\n    indexPath = ndi.cloud.sync.internal.index.getIndexFilepath(ndiDatasetPath, mode, options)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Binternal/%2Bindex/readSyncIndex.m/","title":"ndi.cloud.sync.internal.index.readSyncIndex","text":"<pre><code>ndi.cloud.sync.internal.index.readSyncIndex is a function.\n    syncIndex = ndi.cloud.sync.internal.index.readSyncIndex(ndiDataset, options)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Binternal/%2Bindex/updateSyncIndex.m/","title":"ndi.cloud.sync.internal.index.updateSyncIndex","text":"<pre><code>  updateSyncIndex - Updates synchronization index for the dataset.\n\n  Syntax:\n    updateSynchIndex(ndiDataset, cloudDatasetId, indexData) updates the\n        synchronization index for the specified dataset using the provided\n        index data.\n\n  Input Arguments:\n    ndiDataset (1,1) ndi.dataset - The dataset to be updated.\n    cloudDatasetId (1,1) string - The identifier for the cloud dataset.\n    indexData.LocalDocumentIds (1,:) string - Local document IDs (optional).\n    indexData.RemoteDocumentIds (1,:) string - Remote document IDs (optional).\n\n  Output Arguments:\n    None - This function does not return any outputs; it saves an updated sync\n    index to the dataset.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bsync/%2Binternal/%2Bindex/writeSyncIndex.m/","title":"ndi.cloud.sync.internal.index.writeSyncIndex","text":"<pre><code>ndi.cloud.sync.internal.index.writeSyncIndex is a function.\n    ndi.cloud.sync.internal.index.writeSyncIndex(ndiDataset, syncIndex, options)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bui/%2Bdialog/selectCloudDataset.m/","title":"ndi.cloud.ui.dialog.selectCloudDataset","text":"<pre><code>  SELECTCLOUDDATASET - Open a dialog to select a dataset from cloud\n\n  CLOUDDATASETID = ndi.cloud.ui.dialog.SELECTCLOUDDATASET(ACCESS)\n\n  Inputs:\n    ACCESS          - Access level for which to select dataset from. Must\n                      be \"public\" or \"private\"\n\n  Outputs:\n    CLOUDDATASETID  - The identifier of the selected cloud dataset\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/new_dataset.m/","title":"ndi.cloud.upload.new_dataset","text":"<pre><code>  NEW_DATASET - upload a new dataset to NDI cloud\n\n  DATASETID = NEW_DATASET(D)\n\n  Upload an ndi.dataset object to NDI Cloud. The DATASETID on\n  NDI Cloud is returned.\n\n  Example:\n    ndi.cloud.upload.new_dataset(D)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/scan_for_upload.m/","title":"ndi.cloud.upload.scan_for_upload","text":"<pre><code> SCAN_FOR_UPLOAD - Scans the session for documents and files to upload. Calculate the size of the files.\n\n  [DOC_JSON_STRUCT,DOC_FILE_STRUCT] = ndi.cloud.upload.scan_for_upload(S, d, new, DATASET_ID)\n\n  Inputs:\n   S - an ndi.session object\n   d - documents returned by searching the session using database_search\n   NEW - 1 if this is a new dataset with empty documents and files, 0 otherwise\n   DATASET_ID - The dataset id. dataset_id = '' if it is a new dataset\n\n  Outputs:\n   DOC_JSON_STRUCT - A structure with the following fields:\n     'docid' - The document id\n     'is_uploaded' - A flag indicating if the document is uploaded\n   DOC_FILE_STRUCT - A structure with the following fields:\n     'uid' - The uid of the file\n     'name' - The name of the file\n     'docid' - The document id that the file is associated with\n     'bytes' - The size of the file in bytes\n     'is_uploaded' - A flag indicating if the file is uploaded\n   TOTAL_SIZE - The total size of the files to upload in KB\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/upload_document_collection.m/","title":"ndi.cloud.upload.upload_document_collection","text":"<pre><code>  UPLOAD_DOCUMENT_COLLECTION - Upload a collection of documents using bulk or serial upload.\n\n    [b, report] = ndi.cloud.upload.upload_document_collection(datasetId, documentList, options)\n    performs an upload of documents to a specified dataset. The method (batch vs. serial)\n    and batch size can be controlled.\n\n    By default, it uses a bulk upload process. It creates ZIP archives from the\n    document list, retrieves bulk upload URLs, and uploads the ZIP files to the cloud.\n    This process can be broken into chunks using the 'maxDocumentChunk' option.\n\n    If the environment variable 'NDI_CLOUD_UPLOAD_NO_ZIP' is set to 'true',\n    the documents are uploaded one at a time via a slower serial process.\n\n  INPUTS:\n    datasetId      - (1,1) string\n                     The unique identifier for the target NDI Cloud dataset.\n\n    documentList   - (1,:) cell\n                     A cell array of ndi.document objects to be uploaded.\n\n    options.maxDocumentChunk - (1,1) double\n                     The maximum number of documents to include in a single ZIP\n                     archive for batch uploads. Defaults to Inf (all documents\n                     in one batch).\n\n  OUTPUTS:\n    b              - (1,1) logical\n                     A boolean that is true if the entire upload operation\n                     succeeded and false otherwise.\n\n    report         - (1,1) struct\n                     A structure containing a report of the upload operation.\n                     It will have the following fields:\n                     'uploadType': 'batch' or 'serial'.\n                     'manifest': For 'batch' type, a cell array where each entry\n                                 is a cell array of document IDs in that batch.\n                                 For 'serial' type, this is a cell array of\n                                 individual document IDs.\n                     'status': A cell array with 'success' or 'failure' for\n                               each corresponding entry in the manifest.\n\n  EXAMPLE:\n    % Upload a collection of documents in chunks of 100\n    docs = {doc_obj1, doc_obj2, ..., doc_obj250};\n    [success, uploadReport] = ndi.cloud.upload.upload_document_collection(\"dataset123\", docs, maxDocumentChunk=100);\n\n  See also:\n    ndi.cloud.api.documents.get_bulk_upload_url\n    ndi.cloud.upload.internal.zip_documents_for_upload\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/upload_to_NDI_cloud.m/","title":"ndi.cloud.upload.upload_to_NDI_cloud","text":"<pre><code>  UPLOAD_TO_NDI_CLOUD - upload an NDI database to NDI Cloud\n\n  [B,MSG] = ndi.cloud.upload.upload_to_NDI_cloud(S, DATASET_ID, VARARGIN)\n\n  Inputs:\n   S - an ndi.session object\n   DATASET_ID - the dataset id for the NDI Cloud\n\n  Outputs:\n    B - did the upload work? 0 for no, 1 for yes\n    MSG - An error message if the upload failed; otherwise ''\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/zip_for_upload.m/","title":"ndi.cloud.upload.zip_for_upload","text":"<pre><code>  ZIP_FOR_UPLOAD - Create a zip file for uploading to the NDI cloud\n    [B, MSG] = ndi.cloud.upload.ZIP_FOR_UPLOAD(D, DOC_FILE_STRUCT, TOTAL_SIZE, DATASET_ID)\n\n  Inputs:\n   D - the ndi.database object\n   DOC_FILE_STRUCT - A structure with the following fields:\n   'uid' - The uid of the file\n   'name' - The name of the file\n   'docid' - The document id that the file is associated with\n   'bytes' - The size of the file in bytes\n   'is_uploaded' - A flag indicating if the file is uploaded\n   TOTAL_SIZE - The total size of the files to be uploaded\n   DATASET_ID - The dataset id\n\n  Outputs:\n    B - did the upload work? 0 for no, 1 for yes\n    MSG - An error message if the upload failed; otherwise ''\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/%2Binternal/zip_documents_for_upload.m/","title":"ndi.cloud.upload.internal.zip_documents_for_upload","text":"<pre><code>  ZIP_DOCUMENTS_FOR_UPLOAD - Serializes and zips a list of documents for upload.\n\n  This function takes a cell array of ndi.document objects, converts them into a \n  single JSON string, saves this string to a temporary file, and then compresses \n  this file into a zip archive. It returns the path to the zip archive and a \n  manifest of the document IDs included.\n\n  Arguments:\n    documentList (1,:) cell - A cell array of ndi.document objects to be included\n        in the zip file.\n    cloudDatasetId (1,:) char - A character array with the cloud dataset id\n    options.TargetFolder (1,1) string {mustBeFolder} - An optional name-value\n        argument specifying the folder where the zip file will be created. \n        Defaults to the system's temporary folder as defined by \n        ndi.common.PathConstants.TempFolder.\n\n  Returns:\n    zipFilePath (string) - The full path to the generated .zip file.\n    idManifest (cell array) - A cell array of strings containing the unique\n        identifiers of the documents included in the archive.\n\n  Important:\n    The user is responsible for deleting the file at zipFilePath once it is no\n    longer needed to prevent clutter in the target folder.\n\n  Example:\n    % Assuming doc1 and doc2 are valid ndi.document objects\n    myDocs = {doc1, doc2};\n    [zipPath, idList] = zip_documents_for_upload(myDocs);\n    % ... code to upload the file at zipPath ...\n    delete(zipPath); % Clean up the created zip file\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/for_deletion/update_cloud_metadata.m/","title":"ndi.cloud.upload/for_deletion.update_cloud_metadata","text":"<pre><code>  UPDATE_CLOUD_METADATA - upload metadata to the NDI Cloud\n\n  [STATUS, DATASET] = ndi.cloud.upload.UPDATE_CLOUD_METADATA(DATASETID, S)\n\n  Inputs:\n    DATASETID - the dataset ID to update\n    S - an ndi.session object with the metadata to upload\n\n  Outputs:\n    STATUS - did the upload work? 0 for no, 1 for yes\n    DATASET - The updated dataset\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/for_deletion/update_cloud_metadata_struct.m/","title":"ndi.cloud.upload/for_deletion.update_cloud_metadata_struct","text":"<pre><code>  UPDATE_CLOUD_METADATA_STRUCT - upload metadata to the NDI Cloud\n\n  [STATUS, DATASET] = ndi.cloud.upload.UPDATE_CLOUD_METADATA_STRUCT(DATASETID, S, SIZE)\n\n  Inputs:\n    DATASETID - the dataset ID to update\n    S - a struct with the metadata to upload\n    SIZE - a float representing the size of this dataset in kilobytes\n\n  Outputs:\n    STATUS - did the upload work? 0 for no, 1 for yes\n    DATASET - The updated dataset\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/old/test_upload.m/","title":"ndi.cloud.upload/old.test_upload","text":"<pre><code> TEST_UPLOAD - upload a test dataset to the cloud\n  [B, MSG, DATASET_ID] = ndi.cloud.test_upload(S, TEST_NAME)\n\n  inputs:\n    S - ndi.session object\n    TEST_NAME - the name of the test\n\n  outputs:\n    B - 1 if the upload was successful, 0 if not\n    MSG - a message about the upload\n    DATASET_ID - the dataset id of the uploaded dataset\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/old/test_upload_old.m/","title":"ndi.cloud.upload/old.test_upload_old","text":"<pre><code>  tutorial 2.1\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/old/upload_dataset_database.m/","title":"ndi.cloud.upload/old.upload_dataset_database","text":"<pre><code>  UPLOAD_DATASET_DATABASE - Upload the complete database of a dataset\n\n    Syntax:\n        ndi.cloud.upload_dataset_database(NDI_DATASET, CLOUD_DATASET_ID)\n        uploads all the documents and associated binary files for a dataset\n        to an NDI Cloud Dataset.\n\n    Input arguments:\n        NDI_DATASET : string\n            an ndi.dataset object\n\n        CLOUD_DATASET_ID : string\n            an id for a dataset on NDI cloud to upload documents and files to\n\n    Options (Name - Value pairs)\n        verbose : logical\n            Whether to display status updates. Default is true\n\n        show_ui : logical\n            Whether to display progress in a gui. Default is true\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Bupload/old/upload_to_NDI_cloud_bulk.m/","title":"ndi.cloud.upload/old.upload_to_NDI_cloud_bulk","text":"<pre><code>  upload_to_NDI_cloud_bulk - upload an NDI database to NDI Cloud\n\n  [B,MSG] = ndi.database.fun.upload_to_NDI_cloud_bulk(S, DATASET_ID, VARARGIN)\n\n  Inputs:\n   S - an ndi.session object\n   DATASET_ID - the dataset id for the NDI Cloud\n\n  Outputs:\n    B - did the upload work? 0 for no, 1 for yes\n    MSG - An error message if the upload failed; otherwise ''\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Butility/create_cloud_metadata_struct.m/","title":"ndi.cloud.utility.create_cloud_metadata_struct","text":"<pre><code>  CREATE_CLOUD_METADATA_STRUCT - upload metadata to the NDI Cloud\n\n  [STATUS, DATASET] = ndi.cloud.upload.CREATE_CLOUD_METADATA_STRUCT(S)\n\n  Applies the MetaDataEditorApp data structure to\n    a) create a new dataset\n    b) add metadata for the dataset to the cloud API\n\n  Note: This function does not create any ndi.document representations\n  of the metadata, but only edits the metadata in the cloud API.\n\n  Inputs:\n    S - a struct with the metadata to create\n\n  Outputs:\n    STATUS - did the upload work? 0 for no, 1 for yes\n    RESPONSE - The post request summary\n    DATASET_ID - The created dataset id\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcloud/%2Butility/mustBeValidMetadata.m/","title":"ndi.cloud.utility.mustBeValidMetadata","text":"<pre><code>ndi.cloud.utility.mustBeValidMetadata is a function.\n    ndi.cloud.utility.mustBeValidMetadata(metadata_struct)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/PathConstants.m/","title":"CLASS ndi.common.PathConstants","text":"<pre><code>  PathConstants - A set of path constants referenced by the NDI toolbox\n\n    RootFolder              | The path of the NDI distribution on this machine.\n    CommonFolder            | The path to the package ndi_common\n    DocumentFolder          | The path of the NDI document definitions\n    DocumentSchemaFolder    | The path of the NDI document validation schema\n    ExampleDataFolder       | The path to the NDI example sessions\n    Preferences             | A path to a directory of preferences files\n    FileCacheFolder         | A path where files may be cached (not deleted every time)\n    TempFolder              | The path to a directory that may be used for temporary files\n    TestFolder              | A path to a safe place to run test code\n    CalcDoc                 | A cell array of paths to NDI calculator document definitions\n    CalcDocSchema           | A cell array of paths to NDI calculator document schemas\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/PathConstants.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/PathConstants.m/#properties","title":"Properties","text":"Property Description RootFolder CommonFolder DocumentFolder DocumentSchemaFolder ExampleDataFolder TempFolder TestFolder FileCacheFolder LogFolder Preferences CalcDoc CalcDocSchema"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/PathConstants.m/#methods","title":"Methods","text":"Method Description PathConstants A set of path constants referenced by the NDI toolbox getNdiPathPlaceholderName ndi.common.PathConstants.getNdiPathPlaceholderName is a function. updateDIDConstants ndi.common.PathConstants.updateDIDConstants is a function."},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/PathConstants.m/#methods-help","title":"Methods help","text":"<p>PathConstants - A set of path constants referenced by the NDI toolbox</p> <pre><code>RootFolder              | The path of the NDI distribution on this machine.\n    CommonFolder            | The path to the package ndi_common\n    DocumentFolder          | The path of the NDI document definitions\n    DocumentSchemaFolder    | The path of the NDI document validation schema\n    ExampleDataFolder       | The path to the NDI example sessions\n    Preferences             | A path to a directory of preferences files\n    FileCacheFolder         | A path where files may be cached (not deleted every time)\n    TempFolder              | The path to a directory that may be used for temporary files\n    TestFolder              | A path to a safe place to run test code\n    CalcDoc                 | A cell array of paths to NDI calculator document definitions\n    CalcDocSchema           | A cell array of paths to NDI calculator document schemas\n\n    Documentation for ndi.common.PathConstants/PathConstants\n       doc ndi.common.PathConstants\n</code></pre> <p>getNdiPathPlaceholderName - ndi.common.PathConstants.getNdiPathPlaceholderName is a function.</p> <pre><code>placeholder = ndi.common.PathConstants.getNdiPathPlaceholderName(name)\n</code></pre> <p>updateDIDConstants - ndi.common.PathConstants.updateDIDConstants is a function.</p> <pre><code>\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/assertDIDInstalled.m/","title":"ndi.common.assertDIDInstalled","text":"<pre><code>ndi.common.assertDIDInstalled is a function.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/getCache.m/","title":"ndi.common.getCache","text":"<pre><code>ndi.common.getCache is a function.\n    cache = ndi.common.getCache\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/getDatabaseHierarchy.m/","title":"ndi.common.getDatabaseHierarchy","text":"<pre><code>ndi.common.getDatabaseHierarchy is a function.\n    databaseHierarchy = ndi.common.getDatabaseHierarchy\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bcommon/getLogger.m/","title":"ndi.common.getLogger","text":"<pre><code>ndi.common.getLogger is a function.\n    logger = ndi.common.getLogger\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/daqsystemstring.m/","title":"CLASS ndi.daq.daqsystemstring","text":"<pre><code>  NDI_DAQSYSTEMSTRING - a class for describing the device and channels that correspond to an NDI_EPOCHPROBEMAP_DAQSYSTEM\n\n   ndi.daq.daqsystemstring\n\n   A 'devicestring' is a part of an ndi.epoch.epochprobemap_daqsystem that indicates the channel types and\n   channel numbers that correspond to a particular record.\n\n   For example, one may specify that a 4-channel extracellular recording with name\n   'ctx' and reference 1 was recorded on a device called 'mydevice' via analog input\n   on channels 27-28 and 45 and 88 with the following ndi.epoch.epochprobemap_daqsystem entry:\n            name: 'ctx'\n       reference: 1\n            type: 'extracellular_electrode-4'\n    devicestring: 'mydevice:ai27-28,45,88\n\n   The form of a device string is DEVICENAME:CT####, where DEVICENAME is the name of\n   ndi.daq.system object, CT is the channel type identifier, and #### is a list of channels.\n   The #### list of channels should be numbered from 1, and can use the symbols '-' to\n   indicate a sequential run of channels, and ',' to separate channels.\n   Use a semicolon to separate channel types (e.g., 'ai27-28;di1')\n\n   For example:\n      '1-5,10,17'      corresponds to [1 2 3 4 5 10 17]\n      '2,5,11-12,8     corresponds to [2 5 11 12 8]\n      ''               corresponds to []  % if the device doesn't have channels\n\n\n   See also: ndi.daq.daqsystemstring/NDI_DEVICESTRING, NDI_DEVICESTRING/DEVICESTRING\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/daqsystemstring.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/daqsystemstring.m/#properties","title":"Properties","text":"Property Description devicename The name of the device channeltype The type of channels that are used by the device channellist An array of the channels that are referred to by the devicestring"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/daqsystemstring.m/#methods","title":"Methods","text":"Method Description daqsystemstring Create an NDI_DEVICESTRING object from a string or from a device name, channel type, and channel list devicestring Produce an ndi.daq.daqsystemstring character string ndi_daqsystemstring2channel Convert an ndi.daq.daqsystemstring to device, channel type, channel list"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/daqsystemstring.m/#methods-help","title":"Methods help","text":"<p>daqsystemstring - Create an NDI_DEVICESTRING object from a string or from a device name, channel type, and channel list</p> <pre><code>DEVSTR = ndi.daq.daqsystemstring(DEVICENAME, CHANNELTYPE, CHANNELLIST)\n     or DEVSTR = ndi.daq.daqsystemstring(DEVSTRING)\n\n  Creates a device string suitable for a ndi.epoch.epochprobemap_daqsystem from a DEVICENAME,\n  a cell array of strings CHANNELTYPE (such as 'ai', 'di', 'ao'), and a CHANNELLIST.\n\n  Inputs:\n     In the first form:\n       DEVICENAME should be the name of an ndi.daq.system\n       CHANNEL_PREFIX should be the prefix for a particular type of channel. These channel type will vary from\n           device to device. For example, a NDI_DAQSYSTEM_MULTICHANNELDAQ might use:\n             'ai' - analog input\n             'ao' - analog output (it is an 'o' like 'oh', not 0)\n             'di' - digital input\n             'do' - digital output\n       CHANNELLIST should be an array of channel numbers, which must start from 1 (that is,\n             the first channel is 1).\n     In the second form:\n       DEVSTRING should be in the form: 'devicename:ct#,#-#,#,#'\n         where devicename is the name of the device, ct is a string that corresponds to the channel type, and\n         the numbers and separators specify the channel numbers to be accessed.\n\n  Examples:\n\n       myndi_daqsystemstring1 = ndi_devicestring('mydevice','ai',[1:5 7 23])\n       myndi_daqsystemstring2 = ndi_devicestring('mydevice:ai1-5,7,23');\n\n  See also: ndi.daq.daqsystemstring\n\n    Documentation for ndi.daq.daqsystemstring/daqsystemstring\n       doc ndi.daq.daqsystemstring\n</code></pre> <p>devicestring - Produce an ndi.daq.daqsystemstring character string</p> <pre><code>DEVSTR = DEVICESTRING(SELF)\n\n  Creates a device string suitable for a ndi.epoch.epochprobemap_daqsystem from an ndi.daq.daqsystemstring object.\n\n  Inputs:\n     SELF - an ndi.daq.daqsystemstring object\n  Outputs:\n     DEVSTR - the device string; e.g., 'mydevice:ai1-5,10,11-23'\n\n\n  See also: ndi.daq.daqsystemstring\n</code></pre> <p>ndi_daqsystemstring2channel - Convert an ndi.daq.daqsystemstring to device, channel type, channel list</p> <pre><code>[DEVICENAME, CHANNELTYPE, CHANNELLIST] = NDI_DAQSYSTEMSTRING2CHANNEL(SELF, DEVSTR)\n\n  Returns the device name (DEVICENAME), channel type (CHANNELTYPE), and channel list\n  (CHANNEL) of a device string.\n\n  Inputs:\n     DEVSTR should be an NDI devicestring in the form: devicename:ct#,#-#,#,#\n  Outputs:\n     DEVICENAME is the string corresponding to the device name\n     CHANNELTYPE is a cell array of strings with channel types\n     CHANNELLIST is an array of the channel numbers\n\n  Example:\n     devstr = ndi.daq.daqsystemstring('mydevice:ai1-5,13,18');\n     [devicename, channeltype, channel] = ndi_daqsystemstring2channel(devstr);\n     % devicename == 'mydevice', channelype = 'ai', channel == [1 2 3 4 5 13 18]\n\n  See also: ndi.daq.daqsystemstring, NDI_DEVICESTRING/DEVICESTRING\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/metadatareader.m/","title":"CLASS ndi.daq.metadatareader","text":"<pre><code>  NDI.DAQ.METADATAREADER.BASE - a class for reading metadata related to data acquisition, such as stimulus parameter information\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/metadatareader.m/#superclasses","title":"Superclasses","text":"<p>ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/metadatareader.m/#properties","title":"Properties","text":"Property Description tab_separated_file_parameter regular expression to search within epochfiles for a identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/metadatareader.m/#methods","title":"Methods","text":"Method Description eq are 2 ndi.daq.metadatareader objects equal? get_ingested_document get an ingested document for a set of epochfiles id return the identifier of an DID.IDO object ingest_epochfiles create an ndi.document that describes the data that is read by an ndi.daq.metadatareader isvalid is a unique ID number valid? metadatareader Create a new multifunction DAQ object newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata Read metadata parameters readmetadata_ingested Read metadata parameters from a session database readmetadatafromfile Read metadata parameters from file searchquery create a search for this ndi.daq.reader object unique_id Generate a unique ID number for DID databases (Static method)"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/metadatareader.m/#methods-help","title":"Methods help","text":"<p>eq - are 2 ndi.daq.metadatareader objects equal?</p> <pre><code>TF = EQ(NDI_DAQMETADATAREADER_OBJ_A, NDI_DAQMETADATAREADER_OBJ_B)\n\n  TF is 1 if the two objects are of the same class and have the same properties.\n  TF is 0 otherwise.\n</code></pre> <p>get_ingested_document - get an ingested document for a set of epochfiles</p> <pre><code>D = GET_INGESTED_DOCUMENT(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES, S)\n\n  Returns empty if there is no such document or the single document if\n  there is such a document.\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.daq.metadatareader/id is inherited from superclass did.ido\n</code></pre> <p>ingest_epochfiles - create an ndi.document that describes the data that is read by an ndi.daq.metadatareader</p> <pre><code>D = INGEST_EPOCHFILES(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES)\n\n  Creates an ndi.document of type 'daqmetadatareader_epochdata_ingested' that contains the data\n  for an ndi.daq.metadatareaderobject. The document D is not added to any database.\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.daq.metadatareader.isvalid is inherited from superclass did.ido\n</code></pre> <p>metadatareader - Create a new multifunction DAQ object</p> <pre><code>D = ndi.daq.metadatareader()\n   or\n   D = ndi.daq.metadatareader(TSVFILE_REGEXPRESSION)\n\n   Creates a new ndi.daq.metadatareader object. If TSVFILE_REGEXPRESSION\n   is given, it indicates a regular expression to use to search EPOCHFILES\n   for a tab-separated-value text file that describes stimulus parameters.\n\n    Documentation for ndi.daq.metadatareader/metadatareader\n       doc ndi.daq.metadatareader\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.daq.metadatareader object</p> <pre><code>DOC = NEWDOCUMENT(ndi.daq.metadatareader OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.daq.reader object.\n</code></pre> <p>readmetadata - Read metadata parameters</p> <pre><code>PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES)\n\n  Returns the parameters (cell array of structures) associated with the\n  stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES.\n\n  If the property 'tab_separated_file_parameter' is not empty, then EPOCHFILES will be searched for\n  files that match the regular expression in 'tab_separated_file_parameter'. The tab-separated-value\n  file should have the form:\n\n  STIMID&lt;tab&gt;PARAMETER1&lt;tab&gt;PARAMETER2&lt;tab&gt;PARAMETER3 (etc) &lt;newline&gt;\n  1&lt;tab&gt;VALUE1&lt;tab&gt;VALUE2&lt;tab&gt;VALUE3 (etc) &lt;newline&gt;\n  2&lt;tab&gt;VALUE1&lt;tab&gt;VALUE2&lt;tab&gt;VALUE3 (etc) &lt;newline&gt;\n   (etc)\n\n  For example, a stimulus file for an interoral cannula might be:\n  stimid&lt;tab&gt;substance1&lt;tab&gt;substance1_concentration&lt;newline&gt;\n  1&lt;tab&gt;Sodium chloride&lt;tab&gt;30e-3&lt;newline&gt;\n  2&lt;tab&gt;Sodium chloride&lt;tab&gt;300e-3&lt;newline&gt;\n  3&lt;tab&gt;Quinine&lt;tab&gt;30e-6&lt;newline&gt;\n  4&lt;tab&gt;Quinine&lt;tab&gt;300e-6&lt;newline&gt;\n\n  This function can be overridden in more specialized stimulus classes.\n</code></pre> <p>readmetadata_ingested - Read metadata parameters from a session database</p> <pre><code>PARAMETERS = READMETADATA_INGESTED(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES, S)\n\n  Returns the parameters (cell array of structures) associated with the\n  stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES.\n  S is the ndi.session object associated with the data.\n</code></pre> <p>readmetadatafromfile - Read metadata parameters from file</p> <pre><code>PARAMETERS = READMETADATAFROMFILE - read in metadata from the file that is identified\n\n  PARAMETERS = READMETADATAFROMFILE(NDI_DAQMETADATAREADER_OBJ, FILE)\n\n  Given a file that matches the metadata search criteria for an ndi.daq.metadatareader\n  document, this function loads in the metadata.\n</code></pre> <p>searchquery - create a search for this ndi.daq.reader object</p> <pre><code>SQ = SEARCHQUERY(NDI_DAQMETADATAREADER_OBJ)\n\n  Creates a search query for the ndi.daq.metadatareader object.\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.daq.metadatareader.unique_id is inherited from superclass did.ido\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/reader.m/","title":"CLASS ndi.daq.reader","text":"<pre><code>  NDI_DAQREADER - A class for objects that read samples for NDI_DAQSYSTEM objects\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/reader.m/#superclasses","title":"Superclasses","text":"<p>ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/reader.m/#properties","title":"Properties","text":"Property Description identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/reader.m/#methods","title":"Methods","text":"Method Description epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create a document that describes data read by an ndi.daq.reader ingested2epochs_t0t1_epochclock make a map of all ingested epochs to t0t1 and epochclock isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.reader object reader create a new ndi.daq.reader object searchquery create a search for this ndi.daq.reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies EPOCHPROBEMAP is compatible with device and data on disk"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/reader.m/#methods-help","title":"Methods help","text":"<p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_DAQREADER_OBJ, EPOCHFILES)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  For the generic ndi.daq.reader, this returns a single clock\n  type 'no_time';\n\n  See also: ndi.time.clocktype\n</code></pre> <p>epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch</p> <pre><code>EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  See also: ndi.time.clocktype\n</code></pre> <p>eq - tests whether 2 ndi.daq.reader objects are equal</p> <pre><code>B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2)\n\n  Examines whether or not the ndi.daq.reader objects are equal.\n</code></pre> <p>getingesteddocument - return the ndi.document with the data for an ingested epoch</p> <pre><code>D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S)\n\n  Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for\n  the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch.\n  S is the ndi.session for the dataset.\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.daq.reader/id is inherited from superclass did.ido\n</code></pre> <p>ingest_epochfiles - create a document that describes data read by an ndi.daq.reader</p> <pre><code>D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES)\n\n  Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data\n  for an ndi.daq.reader object. The document D is not added to any database.\n\n  Example:\n     D = mydaqreader.ingest_epochfiles(epochfiles);\n</code></pre> <p>ingested2epochs_t0t1_epochclock - make a map of all ingested epochs to t0t1 and epochclock</p> <pre><code>M = ingested2epochs_epochprobemaps_t0t1_epochclock(NDI_DAQREADER_OBJ, S)\n\n  Examines the ingested epochfiles and returns a structure of maps:\n    M.t0t1 maps epochid to t0t1\n    M.epochclock maps epochid to epochclock\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.daq.reader.isvalid is inherited from superclass did.ido\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.daq.reader object</p> <pre><code>DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.daq.reader object.\n</code></pre> <p>reader - create a new ndi.daq.reader object</p> <pre><code>OBJ = ndi.daq.reader()\n\n   Creates an ndi.daq.reader.\n\n   OBJ = ndi.daq.reader(NDI_SESSION_OBJ, NDI_DOCUMENT_OBJ)\n\n   Creates an ndi.daq.reader from an NDI_DOCUMENT_OBJ.\n\n   ndi.daq.reader has mostly abstract methods, it is made to be overridden.\n\n    Documentation for ndi.daq.reader/reader\n       doc ndi.daq.reader\n</code></pre> <p>searchquery - create a search for this ndi.daq.reader object</p> <pre><code>SQ = SEARCHQUERY(NDI_DAQREADER_OBJ)\n\n  Creates a search query for the ndi.daq.reader object.\n</code></pre> <p>t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch</p> <pre><code>T0T1 = T0_T1(NDI_DAQREADER_OBJ, EPOCH_NUMBER)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n</code></pre> <p>t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch</p> <pre><code>T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.daq.reader.unique_id is inherited from superclass did.ido\n</code></pre> <p>verifyepochprobemap - Verifies EPOCHPROBEMAP is compatible with device and data on disk</p> <pre><code>B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_OBJ, EPOCHPROBEMAP, NUMBER)\n\n  Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is\n  valid for the given device epoch NUMBER.\n\n  For the abstract class ndi.daq.reader, EPOCHPROBEMAP is always valid as long as\n  EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object.\n\n  See also: ndi.daq.reader, ndi.epoch.epochprobemap_daqsystem\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/system.m/","title":"CLASS ndi.daq.system","text":"<pre><code>  ndi.daq.system - Create a new NDI_DEVICE class handle object\n\n   D = ndi.daq.system(NAME, THEFILENAVIGATOR)\n\n   Creates a new ndi.daq.system object with name and specific data tree object.\n   This is an abstract class that is overridden by specific devices.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/system.m/#superclasses","title":"Superclasses","text":"<p>ndi.ido, did.ido, ndi.epoch.epochset.param, ndi.epoch.epochset, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/system.m/#properties","title":"Properties","text":"Property Description name The name of the daq system filenavigator The ndi.file.navigator associated with this device daqreader The ndi.daq.reader associated with this device daqmetadatareader The ndi.daq.metadatareader associated with this device (cell array) identifier epochprobemap_class"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/system.m/#methods","title":"Methods","text":"Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build the epochtable for an ndi.daq.system object cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object deleteepoch Delete an epoch and an epoch record from a device epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid return the epoch id string for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq are two ndi.daq.system objects equal? getcache return the NDI_CACHE and key for ndi.daq.system getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs getepochprobemap Return the epoch record for an ndi.daq.system object getepochtag Get tag(s) from an epoch getmetadata get metadata for an epoch getprobes GETPROBES = Return all of the probes associated with an ndi.daq.system object ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the identifier of an DID.IDO object ingest ingest the data from an ndi.daq.system into the database issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? matchedepochtable compare a hash number from an epochtable to the current version ndi_daqsystem_gui_edit function for editing an ndi.daq.system object newdocument create a new document set for ndi.daq.system objects numepochs Number of epochs of ndi.epoch.epochset removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery search for an ndi.daq.system session return the ndi.session object associated with the ndi.daq.system object set_daqmetadatareader set the cell array of ndi.daq.metadatareader objects setepochprobemap Sets the epoch record of a particular epoch setepochtag Set tag(s) for an epoch setsession set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system) system create a new NDI_DEVICE object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/system.m/#methods-help","title":"Methods help","text":"<p>addepochtag - Add tag(s) for an epoch</p> <pre><code>ADDEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. These tags will be added to any\n  tags in the epoch EPOCHNUMBER. If tags with the same names as those in TAG\n  already exist, they will be overwritten. If there is no epoch\n  EPOCHNUMBER, then an error is returned.\n\nHelp for ndi.daq.system/addepochtag is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of EPOCHNODES.\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\n  In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with\n  a cost of 1 and a linear mapping rule with shift 1 and offset 0:\n    'utc' -&gt; 'utc'\n    'utc' -&gt; 'approx_utc'\n    'exp_global_time' -&gt; 'exp_global_time'\n    'exp_global_time' -&gt; 'approx_exp_global_time'\n    'dev_global_time' -&gt; 'dev_global_time'\n    'dev_global_time' -&gt; 'approx_dev_global_time'\n\n\n  See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping,\n  ndi.daq.system/EPOCHNODES\n\nHelp for ndi.daq.system/buildepochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>buildepochtable - Build the epochtable for an ndi.daq.system object</p> <pre><code>ET = BUILDEPOCHTABLE(NDI_DAQSYSTEM_OBJ)\n\n  Returns the epoch table for NDI_DAQSYSTEM_OBJ\n</code></pre> <p>cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache</p> <pre><code>GINFO_BIG = GINFO2CACHE(GINFO_SMALL)\n\nHelp for ndi.daq.system.cache2ginfo is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epoch graph, if it exists and is up-to-date\n  (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ\n  has not changed). If there is no cached version, or if it is not up-to-date,\n  COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date,\n  it is deleted.\n\n  See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH\n\nHelp for ndi.daq.system/cached_epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object</p> <pre><code>[ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epochtable, if it exists, along with its HASHVALUE\n  (a hash number generated from the table). If there is no cached version,\n  ET and HASHVALUE will be empty.\n\nHelp for ndi.daq.system/cached_epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>deleteepoch - Delete an epoch and an epoch record from a device</p> <pre><code>DELETEEPOCH(NDI_DAQSYSTEM_OBJ, NUMBER ... [REMOVEDATA])\n\n  Deletes the data and ndi.epoch.epochprobemap_daqsystem and epoch data for epoch NUMBER.\n  If REMOVEDATA is present and is 1, the data and record are physically deleted.\n  If REMOVEDATA is omitted or is 0, the data and record are renamed but not deleted from disk.\n\n  In the abstract class, this command takes no action.\n\n  See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem\n</code></pre> <p>epoch2str - convert an epoch number or id to a string</p> <pre><code>S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER)\n\n  Returns the epoch NUMBER in the form of a string. If it is a simple\n  integer, then INT2STR is used to produce a string. If it is an epoch\n  identifier string, then it is returned.\n\nHelp for ndi.daq.system/epoch2str is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_DAQSYSTEM_OBJ, EPOCH_NUMBER)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  For the generic ndi.daq.system, this returns a single clock\n  type 'no_time';\n\n  See also: ndi.time.clocktype\n</code></pre> <p>epochgraph - graph of the mapping and cost of converting time among epochs</p> <pre><code>[COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes).\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\nHelp for ndi.daq.system/epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochid - return the epoch id string for an epoch</p> <pre><code>EID = EOPCHID(NDI_DAQSYSTEM_OBJ, EPOCH_NUMBER)\n\n  Returns the EPOCHID for epoch with number EPOCH_NUMBER.\n  In ndi.daq.system, this is determined by the associated\n  ndi.file.navigator object.\n</code></pre> <p>epochnodes - return all epoch nodes from an ndi.epoch.epochset object</p> <pre><code>[NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ)\n\n  Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the\n  following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch within the session.\n  'epoch_session_id'           | The ID of the session that contains the epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A SINGLE ndi.time.clocktype entry that describes the clock type of this node.\n  't0_t1'                   | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock'\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_id', and 'epochprobemap'\n  'objectname'              | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no\n                            |   'name' field, then 'unknown' is used.\n  'objectclass'             | The object class name of the NDI_EPOCHSET_OBJ.\n\n  EPOCHNODES are related to EPOCHTABLE entries, except\n     a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains\n        multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids\n        in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another.\n     b) EPOCHNODES contain identifying information (objectname and objectclass) to help\n        in identifying the epoch nodes across ndi.epoch.epochset objects.\n\n  UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs.\n\nHelp for ndi.daq.system/epochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochprobemapfilename - return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch</p> <pre><code>ECFNAME = EPOCHPROBEMAPFILENAME(NDI_DAQSYSTEM_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Returns the EPOCHPROBEMAPFILENAME for the ndi.daq.system epoch EPOCH_NUMBER_OR_ID.\n  If there is no epoch NUMBER, an error is generated. The file name is returned with\n  a full path.\n</code></pre> <p>epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES</p> <pre><code>NAME = EPOCHSETNAME(NDI_EPOCHSET_OBJ)\n\n  Returns the object name that is used when creating epoch nodes.\n\n  If the class has a 'name' property, that property is used.\n  Otherwise, 'unknown' is used.\n\nHelp for ndi.daq.system/epochsetname is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtable - Return an epoch table that relates the current object's epochs to underlying epochs</p> <pre><code>[ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch. The number may change as epochs are added and subtracted.\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch.\n  'epoch_session_id'           | The session ID that contains this epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap'\n\n  HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable\n  has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE.\n\n  After it is read from disk once, the ET is stored in memory and is not re-read from disk\n  unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE.\n\nHelp for ndi.daq.system/epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID</p> <pre><code>ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object\n  that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the\n  epoch or the EPOCHID of the epoch.\n\nHelp for ndi.daq.system/epochtableentry is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtagfilename - return the file path for the tag file for an epoch</p> <pre><code>ETFNAME = EPOCHTAGFILENAME(NDI_FILENAVIGATOR_OBJ, EPOCHNUMBER)\n\n  In this base class, empty is returned because it is an abstract class.\n</code></pre> <p>eq - are two ndi.daq.system objects equal?</p> <pre><code>B = EQ(NDI_DAQSYSTEM_OBJ_A, NDI_DAQSYSTEM_OBJ_B)\n\n  Returns 1 if the ndi.daq.system objects have the same name and class type.\n  The objects do not have to be the same handle or have the same space in memory.\n  Otherwise, returns 0.\n</code></pre> <p>getcache - return the NDI_CACHE and key for ndi.daq.system</p> <pre><code>[CACHE,KEY] = GETCACHE(NDI_DAQSYSTEM_OBJ)\n\n  Returns the CACHE and KEY for the ndi.daq.system object.\n\n  The CACHE is returned from the associated session.\n  The KEY is the string 'daqsystem_' followed by the object's id.\n\n  See also: ndi.daq.system, NDI_BASE\n</code></pre> <p>getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs</p> <pre><code>EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ)\n\n  Produce an array of ndi.epoch objects from the epoch table of this\n  ndi.epoch.epochset object (NDI_EPOCHSET_OBJ).\n\nHelp for ndi.daq.system/getepocharray is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>getepochprobemap - Return the epoch record for an ndi.daq.system object</p> <pre><code>EPOCHPROBEMAP = GETEPOCHPROBEMAP(NDI_DAQSYSTEM_OBJ, EPOCH)\n\n  Inputs:\n      NDI_EPOCHSET_PARAM_OBJ - the ndi.epoch.epochset.param object\n      EPOCH - the epoch number or identifier\n\n  Output:\n      EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME\n\n\n  The ndi.daq.system GETEPOCHPROBEMAP checks its DAQREADER object to see if it has a method called\n  'GETEPOCHPROBEMAP' that accepts the EPOCHPROBEMAP filename and the EPOCHFILES for that epoch.\n  If it does have a method by that name, it is called and the output returned. If it does not, then the FILENAVIGATOR\n  parameter's method is called.\n</code></pre> <p>getepochtag - Get tag(s) from an epoch</p> <pre><code>TAG = GETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. If there are no files in\n  EPOCHNUMBER then an error is returned.\n\nHelp for ndi.daq.system/getepochtag is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>getmetadata - get metadata for an epoch</p> <pre><code>METADATA = GETMETADATA(NDI_DAQSYSTEM_OBJ, EPOCH, CHANNEL)\n\n  Returns the metadata (cell array of entries) for EPOCH for metadata channel\n  CHANNEL. CHANNEL indicates the number of the ndi.daq.metadatareader to use\n  to obtain the data.\n</code></pre> <p>getprobes - GETPROBES = Return all of the probes associated with an ndi.daq.system object</p> <pre><code>PROBES_STRUCT = GETPROBES(NDI_DAQSYSTEM_OBJ)\n\n  Returns all probes associated with the ndi.daq.system object NDI_DEVICE_OBJ\n\n  This function returns a structure with fields of all unique probes across\n  all EPOCHPROBEMAP objects returned in ndi.daq.system/GETEPOCHPROBEMAP.\n  The fields are 'name', 'reference', and 'type'.\n</code></pre> <p>ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache</p> <pre><code>GINFO_SMALL = GINFO2CACHE(GINFO)\n\nHelp for ndi.daq.system.ginfo2cache is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.daq.system/id is inherited from superclass did.ido\n</code></pre> <p>ingest - ingest the data from an ndi.daq.system into the database</p> <pre><code>[B,D] = INGEST(NDI_DAQSYSTEM_OBJ)\n\n  Ingest any uningested epochs from an ndi.daq.system object into the database.\n  B is 1 if the operation is successful. D is a cell array of new ndi.document objects\n  that were created and added to the database.\n</code></pre> <p>issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph?</p> <pre><code>B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ)\n\n  This function tells an ndi.time.syncgraph object whether it should continue\n  adding the 'underlying' epochs to the graph, or whether it should stop at this level.\n\n  For ndi.epoch.epochset objects, this returns 1. For some object types (ndi.probe.*, for example)\n  this will return 0 so that the underlying ndi.daq.system epochs are added.\n\nHelp for ndi.daq.system/issyncgraphroot is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.daq.system.isvalid is inherited from superclass did.ido\n</code></pre> <p>matchedepochtable - compare a hash number from an epochtable to the current version</p> <pre><code>B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE)\n\n  Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE.\n  Otherwise, it returns 0.\n\nHelp for ndi.daq.system/matchedepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>ndi_daqsystem_gui_edit - function for editing an ndi.daq.system object</p> <pre><code>OBJ = NDI_DAQSYSTEM_GUI_EDIT(NDI_DAQSYSTEM_OBJ)\n\n  This function will bring up a graphical window to prompt the user to input\n  parameters that edit the NDI_DAQSYSTEM_OBJ and return a new object.\n</code></pre> <p>newdocument - create a new document set for ndi.daq.system objects</p> <pre><code>NDI_DOCUMENT_OBJ_SET = NEWDOCUMENT(NDI_DAQSYSTEM_OBJ)\n\n  Creates a set of documents that describe an ndi.daq.system.\n</code></pre> <p>numepochs - Number of epochs of ndi.epoch.epochset</p> <pre><code>N = NUMEPOCHS(NDI_EPOCHSET_OBJ)\n\n  Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ.\n\n  See also: EPOCHTABLE\n\nHelp for ndi.daq.system/numepochs is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>removeepochtag - Remove tag(s) for an epoch</p> <pre><code>REMOVEEPOCHTAG(NDI_EPOCH_PARAM_OBJ, EPOCHNUMBER, NAME)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. Any tags with name 'NAME' will\n  be removed from the tags in the epoch EPOCHNUMBER.\n  tags in the epoch directory. If tags with the same names as those in TAG\n  already exist, they will be overwritten. If there is no epoch\n  EPOCHNUMBER, then an error is returned.\n\n  NAME can be a single string, or it can be a cell array of strings\n  (which will result in the removal of multiple tags).\n\nHelp for ndi.daq.system/removeepochtag is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk</p> <pre><code>NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  This function clears the internal cached memory of the epochtable, forcing it to be re-read from\n  disk at the next request.\n\n  See also: ndi.daq.system/EPOCHTABLE\n\nHelp for ndi.daq.system/resetepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>searchquery - search for an ndi.daq.system</p> <pre><code>SQ = SEARCHQUERY(NDI_DAQSYSTEM_OBJ)\n\n  Returns SQ, an ndi.query object that searches the database for the ndi.daq.system object\n</code></pre> <p>session - return the ndi.session object associated with the ndi.daq.system object</p> <pre><code>EXP = SESSION(NDI_DAQSYSTEM_OBJ)\n\n  Return the ndi.session object associated with the ndi.daq.system of the\n  ndi.daq.system object.\n</code></pre> <p>set_daqmetadatareader - set the cell array of ndi.daq.metadatareader objects</p> <pre><code>NDI_DAQSYSTEM_OBJ = SET_DAQMETADATAREADER(NDI_DAQSYSTEM_OBJ, NEWDAQMETADATAREADERS)\n\n  Sets the 'daqmetadatareader' property of an ndi.daq.system object.\n  NEWDAQMETADATAREADERS should be a cell array of objects that have\n  ndi.daq.metadatareader as a superclass.\n</code></pre> <p>setepochprobemap - Sets the epoch record of a particular epoch</p> <pre><code>SETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, EPOCHPROBEMAP, NUMBER, [OVERWRITE])\n\n  Sets or replaces the ndi.epoch.epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch\n  numbered NUMBER.  If OVERWRITE is present and is 1, then any existing epoch record is overwritten.\n  Otherwise, an error is given if there is an existing epoch record.\n\n  See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem\n\nHelp for ndi.daq.system/setepochprobemap is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>setepochtag - Set tag(s) for an epoch</p> <pre><code>SETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. These tags will replace any\n  tags in the epoch directory. If there is no epoch EPOCHNUMBER, then\n  an error is returned.\n\nHelp for ndi.daq.system/setepochtag is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>setsession - set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system)</p> <pre><code>NDI_DAQSYSTEM_OBJ = SETSESSION(NDI_DEVICE_OBJ, SESSION)\n\n  Set the SESSION property of an ndi.daq.system object's ndi.daq.system object\n</code></pre> <p>system - create a new NDI_DEVICE object</p> <pre><code>OBJ = ndi.daq.system(NAME, THEFILENAVIGATOR, THEDAQREADER)\n\n   Creates an ndi.daq.system with name NAME, NDI_FILENAVIGTOR THEFILENAVIGATOR and\n   and ndi.daq.reader THEDAQREADER.\n\n   An ndi.file.navigator is an interface object to the raw data files\n   on disk that are read by the ndi.daq.reader object.\n\n   ndi.daq.system is an abstract class, and a specific implementation must be called.\n\n    Documentation for ndi.daq.system/system\n       doc ndi.daq.system\n</code></pre> <p>t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch</p> <pre><code>T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n</code></pre> <p>underlyingepochnodes - find all the underlying epochnodes of a given epochnode</p> <pre><code>[UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE)\n\n  Traverse the underlying nodes of a given EPOCHNODE until we get to the roots\n  (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1).\n\n  Note that the EPOCHNODE itself is returned as the first 'underlying' node.\n\n  See also: ISSYNCGRAPHROOT\n\nHelp for ndi.daq.system/underlyingepochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.daq.system.unique_id is inherited from superclass did.ido\n</code></pre> <p>verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk</p> <pre><code>B = VERIFYEPOCHPROBEMAP(NDI_DAQSYSTEM_OBJ, EPOCHPROBEMAP, EPOCH)\n\n  Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device\n  epoch EPOCH.\n\n  For the abstract class ndi.daq.system, EPOCHPROBEMAP is always valid as long as\n  EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object.\n\n  See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NewStimStims.m/","title":"CLASS ndi.daq.metadatareader.NewStimStims","text":"<pre><code>  NDI_DAQMETADATAREADER_NEWSTIMSTIMS - a class for reading NewStim metadata\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NewStimStims.m/#superclasses","title":"Superclasses","text":"<p>ndi.daq.metadatareader, ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NewStimStims.m/#properties","title":"Properties","text":"Property Description tab_separated_file_parameter identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NewStimStims.m/#methods","title":"Methods","text":"Method Description NewStimStims Create a new multifunction DAQ object eq are 2 ndi.daq.metadatareader objects equal? get_ingested_document get an ingested document for a set of epochfiles id return the identifier of an DID.IDO object ingest_epochfiles create an ndi.document that describes the data that is read by an ndi.daq.metadatareader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata Read metadata parameters readmetadata_ingested Read metadata parameters from a session database readmetadatafromfile read in metadata from the file that is identified searchquery create a search for this ndi.daq.reader object unique_id Generate a unique ID number for DID databases (Static method)"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NewStimStims.m/#methods-help","title":"Methods help","text":"<p>NewStimStims - Create a new multifunction DAQ object</p> <pre><code>D = ndi.daq.metadatareader.NewStimStims()\n   or\n   D = ndi.daq.metadatareader(TSVFILE_REGEXPRESSION)\n\n   Creates a new ndi.daq.metadatareader object. If TSVFILE_REGEXPRESSION\n   is given, it indicates a regular expression to use to search EPOCHFILES\n   for a tab-separated-value text file that describes stimulus parameters.\n\n    Documentation for ndi.daq.metadatareader.NewStimStims/NewStimStims\n       doc ndi.daq.metadatareader.NewStimStims\n</code></pre> <p>eq - are 2 ndi.daq.metadatareader objects equal?</p> <pre><code>TF = EQ(NDI_DAQMETADATAREADER_OBJ_A, NDI_DAQMETADATAREADER_OBJ_B)\n\n  TF is 1 if the two objects are of the same class and have the same properties.\n  TF is 0 otherwise.\n\nHelp for ndi.daq.metadatareader.NewStimStims/eq is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>get_ingested_document - get an ingested document for a set of epochfiles</p> <pre><code>D = GET_INGESTED_DOCUMENT(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES, S)\n\n  Returns empty if there is no such document or the single document if\n  there is such a document.\n\nHelp for ndi.daq.metadatareader.NewStimStims/get_ingested_document is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.daq.metadatareader.NewStimStims/id is inherited from superclass did.ido\n</code></pre> <p>ingest_epochfiles - create an ndi.document that describes the data that is read by an ndi.daq.metadatareader</p> <pre><code>D = INGEST_EPOCHFILES(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES)\n\n  Creates an ndi.document of type 'daqmetadatareader_epochdata_ingested' that contains the data\n  for an ndi.daq.metadatareaderobject. The document D is not added to any database.\n\nHelp for ndi.daq.metadatareader.NewStimStims/ingest_epochfiles is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.daq.metadatareader.NewStimStims.isvalid is inherited from superclass did.ido\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.daq.metadatareader object</p> <pre><code>DOC = NEWDOCUMENT(ndi.daq.metadatareader OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.daq.reader object.\n\nHelp for ndi.daq.metadatareader.NewStimStims/newdocument is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>readmetadata - Read metadata parameters</p> <pre><code>PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES)\n\n  Returns the parameters (cell array of structures) associated with the\n  stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES.\n\n  If the property 'tab_separated_file_parameter' is not empty, then EPOCHFILES will be searched for\n  files that match the regular expression in 'tab_separated_file_parameter'. The tab-separated-value\n  file should have the form:\n\n  STIMID&lt;tab&gt;PARAMETER1&lt;tab&gt;PARAMETER2&lt;tab&gt;PARAMETER3 (etc) &lt;newline&gt;\n  1&lt;tab&gt;VALUE1&lt;tab&gt;VALUE2&lt;tab&gt;VALUE3 (etc) &lt;newline&gt;\n  2&lt;tab&gt;VALUE1&lt;tab&gt;VALUE2&lt;tab&gt;VALUE3 (etc) &lt;newline&gt;\n   (etc)\n\n  For example, a stimulus file for an interoral cannula might be:\n  stimid&lt;tab&gt;substance1&lt;tab&gt;substance1_concentration&lt;newline&gt;\n  1&lt;tab&gt;Sodium chloride&lt;tab&gt;30e-3&lt;newline&gt;\n  2&lt;tab&gt;Sodium chloride&lt;tab&gt;300e-3&lt;newline&gt;\n  3&lt;tab&gt;Quinine&lt;tab&gt;30e-6&lt;newline&gt;\n  4&lt;tab&gt;Quinine&lt;tab&gt;300e-6&lt;newline&gt;\n\n  This function can be overridden in more specialized stimulus classes.\n\nHelp for ndi.daq.metadatareader.NewStimStims/readmetadata is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>readmetadata_ingested - Read metadata parameters from a session database</p> <pre><code>PARAMETERS = READMETADATA_INGESTED(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES, S)\n\n  Returns the parameters (cell array of structures) associated with the\n  stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES.\n  S is the ndi.session object associated with the data.\n\nHelp for ndi.daq.metadatareader.NewStimStims/readmetadata_ingested is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>readmetadatafromfile - read in metadata from the file that is identified</p> <pre><code>PARAMETERS = READMETADATAFROMFILE(NDI_DAQMETADATAREADER_NEWSTIMSTIMS_OBJ, FILE)\n\n  Given a file that matches the metadata search criteria for an ndi.daq.metadatareader.NewStimStims\n  document, this function loads in the metadata.\n</code></pre> <p>searchquery - create a search for this ndi.daq.reader object</p> <pre><code>SQ = SEARCHQUERY(NDI_DAQMETADATAREADER_OBJ)\n\n  Creates a search query for the ndi.daq.metadatareader object.\n\nHelp for ndi.daq.metadatareader.NewStimStims/searchquery is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.daq.metadatareader.NewStimStims.unique_id is inherited from superclass did.ido\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NielsenLabStims.m/","title":"CLASS ndi.daq.metadatareader.NielsenLabStims","text":"<pre><code>  NDI_DAQMETADATAREADER_NIELSENLABSTIMS - a class for reading NielsenLabStim metadata\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NielsenLabStims.m/#superclasses","title":"Superclasses","text":"<p>ndi.daq.metadatareader, ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NielsenLabStims.m/#properties","title":"Properties","text":"Property Description tab_separated_file_parameter identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NielsenLabStims.m/#methods","title":"Methods","text":"Method Description NielsenLabStims Create a new multifunction DAQ object eq are 2 ndi.daq.metadatareader objects equal? get_ingested_document get an ingested document for a set of epochfiles id return the identifier of an DID.IDO object ingest_epochfiles create an ndi.document that describes the data that is read by an ndi.daq.metadatareader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata Read metadata parameters readmetadata_ingested Read metadata parameters from a session database readmetadatafromfile read in metadata from the file that is identified searchquery create a search for this ndi.daq.reader object unique_id Generate a unique ID number for DID databases (Static method)"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bmetadatareader/NielsenLabStims.m/#methods-help","title":"Methods help","text":"<p>NielsenLabStims - Create a new multifunction DAQ object</p> <pre><code>D = ndi.daq.metadatareader.NielsenLabStims()\n   or\n   D = ndi.daq.metadatareader(TSVFILE_REGEXPRESSION)\n\n   Creates a new ndi.daq.metadatareader object. If TSVFILE_REGEXPRESSION\n   is given, it indicates a regular expression to use to search EPOCHFILES\n   for a tab-separated-value text file that describes stimulus parameters.\n\n    Documentation for ndi.daq.metadatareader.NielsenLabStims/NielsenLabStims\n       doc ndi.daq.metadatareader.NielsenLabStims\n</code></pre> <p>eq - are 2 ndi.daq.metadatareader objects equal?</p> <pre><code>TF = EQ(NDI_DAQMETADATAREADER_OBJ_A, NDI_DAQMETADATAREADER_OBJ_B)\n\n  TF is 1 if the two objects are of the same class and have the same properties.\n  TF is 0 otherwise.\n\nHelp for ndi.daq.metadatareader.NielsenLabStims/eq is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>get_ingested_document - get an ingested document for a set of epochfiles</p> <pre><code>D = GET_INGESTED_DOCUMENT(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES, S)\n\n  Returns empty if there is no such document or the single document if\n  there is such a document.\n\nHelp for ndi.daq.metadatareader.NielsenLabStims/get_ingested_document is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.daq.metadatareader.NielsenLabStims/id is inherited from superclass did.ido\n</code></pre> <p>ingest_epochfiles - create an ndi.document that describes the data that is read by an ndi.daq.metadatareader</p> <pre><code>D = INGEST_EPOCHFILES(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES)\n\n  Creates an ndi.document of type 'daqmetadatareader_epochdata_ingested' that contains the data\n  for an ndi.daq.metadatareaderobject. The document D is not added to any database.\n\nHelp for ndi.daq.metadatareader.NielsenLabStims/ingest_epochfiles is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.daq.metadatareader.NielsenLabStims.isvalid is inherited from superclass did.ido\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.daq.metadatareader object</p> <pre><code>DOC = NEWDOCUMENT(ndi.daq.metadatareader OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.daq.reader object.\n\nHelp for ndi.daq.metadatareader.NielsenLabStims/newdocument is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>readmetadata - Read metadata parameters</p> <pre><code>PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES)\n\n  Returns the parameters (cell array of structures) associated with the\n  stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES.\n\n  If the property 'tab_separated_file_parameter' is not empty, then EPOCHFILES will be searched for\n  files that match the regular expression in 'tab_separated_file_parameter'. The tab-separated-value\n  file should have the form:\n\n  STIMID&lt;tab&gt;PARAMETER1&lt;tab&gt;PARAMETER2&lt;tab&gt;PARAMETER3 (etc) &lt;newline&gt;\n  1&lt;tab&gt;VALUE1&lt;tab&gt;VALUE2&lt;tab&gt;VALUE3 (etc) &lt;newline&gt;\n  2&lt;tab&gt;VALUE1&lt;tab&gt;VALUE2&lt;tab&gt;VALUE3 (etc) &lt;newline&gt;\n   (etc)\n\n  For example, a stimulus file for an interoral cannula might be:\n  stimid&lt;tab&gt;substance1&lt;tab&gt;substance1_concentration&lt;newline&gt;\n  1&lt;tab&gt;Sodium chloride&lt;tab&gt;30e-3&lt;newline&gt;\n  2&lt;tab&gt;Sodium chloride&lt;tab&gt;300e-3&lt;newline&gt;\n  3&lt;tab&gt;Quinine&lt;tab&gt;30e-6&lt;newline&gt;\n  4&lt;tab&gt;Quinine&lt;tab&gt;300e-6&lt;newline&gt;\n\n  This function can be overridden in more specialized stimulus classes.\n\nHelp for ndi.daq.metadatareader.NielsenLabStims/readmetadata is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>readmetadata_ingested - Read metadata parameters from a session database</p> <pre><code>PARAMETERS = READMETADATA_INGESTED(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES, S)\n\n  Returns the parameters (cell array of structures) associated with the\n  stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES.\n  S is the ndi.session object associated with the data.\n\nHelp for ndi.daq.metadatareader.NielsenLabStims/readmetadata_ingested is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>readmetadatafromfile - read in metadata from the file that is identified</p> <pre><code>PARAMETERS = READMETADATAFROMFILE(NDI_DAQMETADATAREADER_NIELSENLABSTIMS_OBJ, FILE)\n\n  Given a file that matches the metadata search criteria for an ndi.daq.metadatareader.NielsenLabStims\n  document, this function loads in the metadata.\n</code></pre> <p>searchquery - create a search for this ndi.daq.reader object</p> <pre><code>SQ = SEARCHQUERY(NDI_DAQMETADATAREADER_OBJ)\n\n  Creates a search query for the ndi.daq.metadatareader object.\n\nHelp for ndi.daq.metadatareader.NielsenLabStims/searchquery is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.daq.metadatareader.NielsenLabStims.unique_id is inherited from superclass did.ido\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/mfdaq.m/","title":"CLASS ndi.daq.reader.mfdaq","text":"<pre><code>  NDI.DAQ.READER.MFDAQ - Multifunction DAQ reader class\n\n  The ndi.daq.reader.mfdaq object class.\n\n  This object allows one to address multifunction data acquisition systems that\n  sample a variety of data types potentially simultaneously.\n\n  The channel types that are supported are the following:\n  Channel type (string):      | Description\n  -------------------------------------------------------------\n  'analog_in'   or 'ai'       | Analog input\n  'analog_out'  or 'ao'       | Analog output\n  'digital_in'  or 'di'       | Digital input\n  'digital_out' or 'do'       | Digital output\n  'time'        or 't'        | Time\n  'auxiliary_in','aux' or 'ax'| Auxiliary channels\n  'event', or 'e'             | Event trigger (returns times of event trigger activation)\n  'mark', or 'mk'             | Mark channel (contains int16 value at specified times)\n  'text', or 'tx'             | Text mark channel (contains character string at specified time)\n\n\n  See also: ndi.daq.reader.mfdaq/ndi.daq.reader.mfdaq\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/mfdaq.m/#superclasses","title":"Superclasses","text":"<p>ndi.daq.reader, ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/mfdaq.m/#properties","title":"Properties","text":"Property Description identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/mfdaq.m/#methods","title":"Methods","text":"Method Description channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal getchannelsepoch List the channels that were sampled for this epoch getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader ingested2epochs_t0t1_epochclock make a map of all ingested epochs to t0t1 and epochclock isvalid is a unique ID number valid? mfdaq Create a new multifunction DAQ object newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies EPOCHPROBEMAP is compatible with device and data on disk"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/mfdaq.m/#methods-help","title":"Methods help","text":"<p>channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ?</p> <pre><code>[TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types()\n\n   Returns a cell array of possible channel types in TYPES, and a corresponding\n   short abbreviation in the cell array ABBREV.\n\n  ----------------------------------------------------------------------------\n  | CHANNEL TYPE       | ABBREV  | Description                               |\n  |--------------------|---------|-------------------------------------------|\n  | 'analog_in'        | 'ai'    | Analog input                              |\n  | 'analog_out'       | 'ao'    | Analog output                             |\n  | 'auxiliary_in'     | 'ax'    | Auxiliary channels                        |\n  | 'digital_in'       | 'di'    | Digital input                             |\n  | 'digital_out'      | 'do'    | Digital output                            |\n  | 'event'            | 'e'     | Event trigger (returns times, codes of    |\n  |                    |         |    event trigger activation)              |\n  | 'marker'           | 'mk'    | Mark channel (contains value at specified |\n  |                    |         |    times)                                 |\n  | 'text'             | 'tx'    | Text channel (contains text at specified  |\n  |                    |         |    times)\n  | 'time'             | 't'     | Time samples                              |\n  |--------------------|---------|-------------------------------------------|\n</code></pre> <p>channelsepoch2timechannelinfo - look up time channel info</p> <pre><code>TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER)\n\n  Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time\n  channel number that corresponds to the channel specified by CHANNELTYPE and\n  CHANNELNUMBER.\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  For the generic ndi.daq.reader.mfdaq, this returns a single clock\n  type 'dev_local'time';\n\n  See also: ndi.time.clocktype\n</code></pre> <p>epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch</p> <pre><code>EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  See also: ndi.time.clocktype\n\nHelp for ndi.daq.reader.mfdaq/epochclock_ingested is inherited from superclass ndi.daq.reader\n</code></pre> <p>eq - tests whether 2 ndi.daq.reader objects are equal</p> <pre><code>B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2)\n\n  Examines whether or not the ndi.daq.reader objects are equal.\n\nHelp for ndi.daq.reader.mfdaq/eq is inherited from superclass ndi.daq.reader\n</code></pre> <p>getchannelsepoch - List the channels that were sampled for this epoch</p> <pre><code>CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES)\n\n   Returns the channel list of acquired channels in these EPOCHFILES\n\n   The channels are of different types. In the below,\n   'n' is replaced with the channel number.\n   Type       | Description\n   ------------------------------------------------------\n   ain        | Analog input (e.g., ai1 is the first input channel)\n   din        | Digital input (e.g., di1 is the first input channel)\n   t          | Time - a time channel\n   axn        | Auxiliary inputs\n\n  CHANNELS is a structure list of all channels with fields:\n  -------------------------------------------------------\n  'name'             | The name of the channel (e.g., 'ai1')\n  'type'             | The type of data stored in the channel\n                     |    (e.g., 'analog_input', 'digital_input', 'image', 'timestamp')\n  'time_channel'     | The number of the time channel that contains the time information\n                     |    for the channel. Can be NaN when not applicable.\n</code></pre> <p>getchannelsepoch_ingested - List the channels that were sampled for this epoch</p> <pre><code>CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S)\n\n   Returns the channel list of acquired channels in these EPOCHFILES\n\n   The channels are of different types. In the below,\n   'n' is replaced with the channel number.\n   Type       | Description\n   ------------------------------------------------------\n   ain        | Analog input (e.g., ai1 is the first input channel)\n   din        | Digital input (e.g., di1 is the first input channel)\n   t          | Time - a time channel\n   axn        | Auxiliary inputs\n\n  CHANNELS is a structure list of all channels with fields:\n  -------------------------------------------------------\n  'name'             | The name of the channel (e.g., 'ai1')\n  'type'             | The type of data stored in the channel\n                     |    (e.g., 'analog_input', 'digital_input', 'image', 'timestamp')\n  'time_channel'     | The number of the time channel that contains the time information\n                     |    for the channel. Can be NaN when not applicable.\n</code></pre> <p>getingesteddocument - return the ndi.document with the data for an ingested epoch</p> <pre><code>D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S)\n\n  Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for\n  the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch.\n  S is the ndi.session for the dataset.\n\nHelp for ndi.daq.reader.mfdaq/getingesteddocument is inherited from superclass ndi.daq.reader\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.daq.reader.mfdaq/id is inherited from superclass did.ido\n</code></pre> <p>ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader</p> <pre><code>D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID)\n\n  Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data\n  for an ndi.daq.reader object. The document D is not added to any database.\n\n  Example:\n     D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id);\n</code></pre> <p>ingested2epochs_t0t1_epochclock - make a map of all ingested epochs to t0t1 and epochclock</p> <pre><code>M = ingested2epochs_epochprobemaps_t0t1_epochclock(NDI_DAQREADER_OBJ, S)\n\n  Examines the ingested epochfiles and returns a structure of maps:\n    M.t0t1 maps epochid to t0t1\n    M.epochclock maps epochid to epochclock\n\nHelp for ndi.daq.reader.mfdaq/ingested2epochs_t0t1_epochclock is inherited from superclass ndi.daq.reader\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.daq.reader.mfdaq.isvalid is inherited from superclass did.ido\n</code></pre> <p>mfdaq - Create a new multifunction DAQ object</p> <pre><code>D = ndi.daq.reader.mfdaq()\n\n   Creates a new ndi.daq.reader.mfdaq object.\n   This is an abstract class that is overridden by specific devices.\n\n    Documentation for ndi.daq.reader.mfdaq/mfdaq\n       doc ndi.daq.reader.mfdaq\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.daq.reader object</p> <pre><code>DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.daq.reader object.\n\nHelp for ndi.daq.reader.mfdaq/newdocument is inherited from superclass ndi.daq.reader\n</code></pre> <p>readchannels_epochsamples - read the data based on specified channels</p> <pre><code>DATA = READCHANNELS_EPOCHSAMPLES(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, CHANNEL, ...\n     EPOCHFILES, S0, S1)\n\n   CHANNELTYPE is the type of channel to read. It can either be a single string or a cell\n     array with one entry per channel.\n\n   CHANNEL is a vector of the channel numbers to read, beginning from 1\n\n   EPOCHFILES is the set of epochfiles to read from\n\n   S0 is the sample where reading should start, and S1 is sample where reading should end.\n\n   DATA will have one column per channel.\n</code></pre> <p>readchannels_epochsamples_ingested - read the data based on specified channels</p> <pre><code>DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ...\n     CHANNEL, EPOCHFILES, S0, S1, S)\n\n   CHANNELTYPE is the type of channel to read\n\n   CHANNEL is a vector of the channel numbers to read, beginning from 1\n\n   EPOCHFILES is the set of epochfiles to read from\n\n   S0 is the sample where reading should start, and S1 is sample where reading should end.\n\n   DATA will have one column per channel.\n</code></pre> <p>readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ...\n      EPOCHFILES, T0, T1)\n\n   Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number\n   of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is\n   also a column of a type that depends on the type of event that is read.  If the number\n   of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell\n   arrays, with 1 column per channel.\n\n   CHANNELTYPE is a cell array of strings, describing the type of each channel to read:\n       'event'  - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for\n                     each timestamp\n       'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the\n                     data associated with the marker (type double)\n       'text'   - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of\n                     character arrays, 1 per event\n       'dep'    - Create events from a digital channel with positive transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are 1\n       'dimp'   - Create events from a digital channel by finding impulses that exhibit\n                     positive then negative transitions. TIMESTAMPS mark the occurrence\n                     of each event, and DATA indicates whether the event is a positive\n                     transition (1) or negative (-1) transition.\n       'den'    - Create events from a digital channel with negative transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are -1.\n       'dimn'   - Create events from a digital channel by finding impulses that exhibit\n                     negative then positive transitions. TIMESTAMPS mark the occurrence of\n                     each event, and DATA indicates whether the event is a negative\n                     transition (1) or a positive transition (-1).\n\n   CHANNEL is a vector with the identity(ies) of the channel(s) to be read.\n\n   EPOCHSFILES is a cell array of full path file names\n</code></pre> <p>readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ...\n      CHANNEL, EPOCHFILES, T0, T1)\n\n   Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number\n   of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is\n   also a column of a type that depends on the type of event that is read.  If the number\n   of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell\n   arrays, with 1 column per channel.\n\n   CHANNELTYPE is a cell array of strings, describing the type of each channel to read:\n       'event'  - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for\n                     each timestamp\n       'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the\n                     data associated with the marker (type double)\n       'text'   - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of\n                     character arrays, 1 per event\n       'dep'    - Create events from a digital channel with positive transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are 1\n       'dimp'   - Create events from a digital channel by finding impulses that exhibit\n                     positive then negative transitions. TIMESTAMPS mark the occurrence\n                     of each event, and DATA indicates whether the event is a positive\n                     transition (1) or negative (-1) transition.\n       'den'    - Create events from a digital channel with negative transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are -1.\n       'dimn'   - Create events from a digital channel by finding impulses that exhibit\n                     negative then positive transitions. TIMESTAMPS mark the occurrence of\n                     each event, and DATA indicates whether the event is a negative\n                     transition (1) or a positive transition (-1).\n\n   CHANNEL is a vector with the identity(ies) of the channel(s) to be read.\n\n   EPOCHSFILES is a cell array of full path file names\n</code></pre> <p>readevents_epochsamples_native - read events or markers of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(MYDEV, CHANNELTYPE, CHANNEL, ...\n      EPOCHFILES, T0, T1)\n\n   CHANNELTYPE is the type of channel to read\n   ('event','marker', etc). It must be a string (not a cell array of strings).\n\n   CHANNEL is a vector with the identity of the channel(s) to be read.\n\n   EPOCH is the epoch number or epochID\n\n   T is a two-column vector; the first column has the time of the event. The second\n   column indicates the marker code. In the case of 'events', this is just 1. If more\n   than one channel is requested, DATA is returned as a cell array, one entry per channel.\n\n   TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to\n   epoch N at time 0 as the reference.\n</code></pre> <p>samplerate - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL</p> <pre><code>SR = SAMPLERATE(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL)\n\n  SR is an array of sample rates from the specified channels\n\n  CHANNELTYPE can be either a string or a cell array of\n  strings the same length as the vector CHANNEL.\n  If CHANNELTYPE is a single string, then it is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n</code></pre> <p>samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL</p> <pre><code>SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S)\n\n  SR is an array of sample rates from the specified channels\n\n  CHANNELTYPE can be either a string or a cell array of\n  strings the same length as the vector CHANNEL.\n  If CHANNELTYPE is a single string, then it is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n</code></pre> <p>searchquery - create a search for this ndi.daq.reader object</p> <pre><code>SQ = SEARCHQUERY(NDI_DAQREADER_OBJ)\n\n  Creates a search query for the ndi.daq.reader object.\n\nHelp for ndi.daq.reader.mfdaq/searchquery is inherited from superclass ndi.daq.reader\n</code></pre> <p>standardize_channel_types - return standard channel type names</p> <pre><code>STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES)\n\n  Given a cell array of strings of CHANNELTYPES, replace any abbreviations with\n  with the standard channel type name in ndi.daq.reader.mfdaq.channel_types()\n</code></pre> <p>t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch</p> <pre><code>T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES)\n\n  Return the beginning (t0) and end (t1) times of the epoch defined by EPOCHFILES.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n</code></pre> <p>t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch</p> <pre><code>T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\nHelp for ndi.daq.reader.mfdaq/t0_t1_ingested is inherited from superclass ndi.daq.reader\n</code></pre> <p>underlying_datatype - get the underlying data type for a channel in an epoch</p> <pre><code>[DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL)\n\n  Return the underlying datatype for the requested channel.\n\n  DATATYPE is a type that is suitable for passing to FREAD or FWRITE\n   (e.g., 'float64', 'uint16', etc. See help fread.)\n\n  P is a ,atrix of polynomials that converts between the double data that is returned by\n  READCHANNEL. RETURNED_DATA = (RAW_DATA+P(i,1))*P(i,2)+(RAW_DATA+P(i,1))*P(i,3) ...\n  There is one row of P for each entry of CHANNEL.\n\n  DATASIZE is the sample size in bits.\n\n  CHANNELTYPE must be a string. It is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.daq.reader.mfdaq.unique_id is inherited from superclass did.ido\n</code></pre> <p>verifyepochprobemap - Verifies EPOCHPROBEMAP is compatible with device and data on disk</p> <pre><code>B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_OBJ, EPOCHPROBEMAP, NUMBER)\n\n  Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is\n  valid for the given device epoch NUMBER.\n\n  For the abstract class ndi.daq.reader, EPOCHPROBEMAP is always valid as long as\n  EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object.\n\n  See also: ndi.daq.reader.mfdaq, ndi.epoch.epochprobemap_daqsystem\n\nHelp for ndi.daq.reader.mfdaq/verifyepochprobemap is inherited from superclass ndi.daq.reader\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/blackrock.m/","title":"CLASS ndi.daq.reader.mfdaq.blackrock","text":"<pre><code>  NDI_DAQREADER_MFDAQ_BLACKROCK - Device driver for Blackrock Microsystems NSx/NEV file format\n\n  This class reads data from Blackrock Microsystems NSx/NEV file format.\n\n  Blackrock Microsystems: https://www.blackrockmicro.com/\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/blackrock.m/#superclasses","title":"Superclasses","text":"<p>ndi.daq.reader.mfdaq, ndi.daq.reader, ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/blackrock.m/#properties","title":"Properties","text":"Property Description identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/blackrock.m/#methods","title":"Methods","text":"Method Description blackrock Create a new NDI_DEVICE_MFDAQ_BLACKROCK object channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles return the file name that corresponds to the NEV/NSV files getchannelsepoch List the channels that are available on this Blackrock device for a given set of files getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader ingested2epochs_t0t1_epochclock make a map of all ingested epochs to t0t1 and epochclock isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.reader object read_blackrock_headers read information from Blackrock Micro header files readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/blackrock.m/#methods-help","title":"Methods help","text":"<p>blackrock - Create a new NDI_DEVICE_MFDAQ_BLACKROCK object</p> <pre><code>D = ndi.daq.reader.mfdaq.blackrock()\n\n   Creates a new ndi.daq.reader.mfdaq.blackrock object\n\n    Documentation for ndi.daq.reader.mfdaq.blackrock/blackrock\n       doc ndi.daq.reader.mfdaq.blackrock\n</code></pre> <p>channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ?</p> <pre><code>[TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types()\n\n   Returns a cell array of possible channel types in TYPES, and a corresponding\n   short abbreviation in the cell array ABBREV.\n\n  ----------------------------------------------------------------------------\n  | CHANNEL TYPE       | ABBREV  | Description                               |\n  |--------------------|---------|-------------------------------------------|\n  | 'analog_in'        | 'ai'    | Analog input                              |\n  | 'analog_out'       | 'ao'    | Analog output                             |\n  | 'auxiliary_in'     | 'ax'    | Auxiliary channels                        |\n  | 'digital_in'       | 'di'    | Digital input                             |\n  | 'digital_out'      | 'do'    | Digital output                            |\n  | 'event'            | 'e'     | Event trigger (returns times, codes of    |\n  |                    |         |    event trigger activation)              |\n  | 'marker'           | 'mk'    | Mark channel (contains value at specified |\n  |                    |         |    times)                                 |\n  | 'text'             | 'tx'    | Text channel (contains text at specified  |\n  |                    |         |    times)\n  | 'time'             | 't'     | Time samples                              |\n  |--------------------|---------|-------------------------------------------|\n\nHelp for ndi.daq.reader.mfdaq.blackrock.channel_types is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>channelsepoch2timechannelinfo - look up time channel info</p> <pre><code>TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER)\n\n  Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time\n  channel number that corresponds to the channel specified by CHANNELTYPE and\n  CHANNELNUMBER.\n\nHelp for ndi.daq.reader.mfdaq.blackrock.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  For the generic ndi.daq.reader.mfdaq, this returns a single clock\n  type 'dev_local'time';\n\n  See also: ndi.time.clocktype\n\nHelp for ndi.daq.reader.mfdaq.blackrock/epochclock is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch</p> <pre><code>EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  See also: ndi.time.clocktype\n\nHelp for ndi.daq.reader.mfdaq.blackrock/epochclock_ingested is inherited from superclass ndi.daq.reader\n</code></pre> <p>eq - tests whether 2 ndi.daq.reader objects are equal</p> <pre><code>B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2)\n\n  Examines whether or not the ndi.daq.reader objects are equal.\n\nHelp for ndi.daq.reader.mfdaq.blackrock/eq is inherited from superclass ndi.daq.reader\n</code></pre> <p>filenamefromepochfiles - return the file name that corresponds to the NEV/NSV files</p> <pre><code>[NEVFILES, NSVFILES] = FILENAMEFROMEPOCHFILES(FILENAME_ARRAY)\n\n  Examines the list of filenames in FILENAME_ARRAY (cell array of full path file strings) and determines which\n  ones have the extension '.nev' (neuro event file) and which have the extension '.ns#', where # is a number, or the source\n  data files.\n</code></pre> <p>getchannelsepoch - List the channels that are available on this Blackrock device for a given set of files</p> <pre><code>CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ, EPOCHFILES)\n\n   Returns the channel list of acquired channels in this session\n\n  CHANNELS is a structure list of all channels with fields:\n  -------------------------------------------------------\n  'name'             | The name of the channel (e.g., 'ai1')\n  'type'             | The type of data stored in the channel\n                     |    (e.g., 'analogin', 'digitalin', 'image', 'timestamp')\n</code></pre> <p>getchannelsepoch_ingested - List the channels that were sampled for this epoch</p> <pre><code>CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S)\n\n   Returns the channel list of acquired channels in these EPOCHFILES\n\n   The channels are of different types. In the below,\n   'n' is replaced with the channel number.\n   Type       | Description\n   ------------------------------------------------------\n   ain        | Analog input (e.g., ai1 is the first input channel)\n   din        | Digital input (e.g., di1 is the first input channel)\n   t          | Time - a time channel\n   axn        | Auxiliary inputs\n\n  CHANNELS is a structure list of all channels with fields:\n  -------------------------------------------------------\n  'name'             | The name of the channel (e.g., 'ai1')\n  'type'             | The type of data stored in the channel\n                     |    (e.g., 'analog_input', 'digital_input', 'image', 'timestamp')\n  'time_channel'     | The number of the time channel that contains the time information\n                     |    for the channel. Can be NaN when not applicable.\n\nHelp for ndi.daq.reader.mfdaq.blackrock/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>getingesteddocument - return the ndi.document with the data for an ingested epoch</p> <pre><code>D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S)\n\n  Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for\n  the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch.\n  S is the ndi.session for the dataset.\n\nHelp for ndi.daq.reader.mfdaq.blackrock/getingesteddocument is inherited from superclass ndi.daq.reader\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.daq.reader.mfdaq.blackrock/id is inherited from superclass did.ido\n</code></pre> <p>ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader</p> <pre><code>D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID)\n\n  Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data\n  for an ndi.daq.reader object. The document D is not added to any database.\n\n  Example:\n     D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id);\n\nHelp for ndi.daq.reader.mfdaq.blackrock/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>ingested2epochs_t0t1_epochclock - make a map of all ingested epochs to t0t1 and epochclock</p> <pre><code>M = ingested2epochs_epochprobemaps_t0t1_epochclock(NDI_DAQREADER_OBJ, S)\n\n  Examines the ingested epochfiles and returns a structure of maps:\n    M.t0t1 maps epochid to t0t1\n    M.epochclock maps epochid to epochclock\n\nHelp for ndi.daq.reader.mfdaq.blackrock/ingested2epochs_t0t1_epochclock is inherited from superclass ndi.daq.reader\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.daq.reader.mfdaq.blackrock.isvalid is inherited from superclass did.ido\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.daq.reader object</p> <pre><code>DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.daq.reader object.\n\nHelp for ndi.daq.reader.mfdaq.blackrock/newdocument is inherited from superclass ndi.daq.reader\n</code></pre> <p>read_blackrock_headers - read information from Blackrock Micro header files</p> <pre><code>[NS_H, NEV_H, HEADERS] = READ_BLACKROCK_HEADERS(NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ, EPOCHFILES, [CHANNELTYPE, CHANNELS])\n</code></pre> <p>readchannels_epochsamples - read the data based on specified channels</p> <pre><code>DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1)\n\n   CHANNELTYPE is the type of channel to read (cell array of strings, one per channel)\n\n   CHANNEL is a vector of the channel numbers to read, beginning from 1\n\n   EPOCH is set of epoch files\n\n   DATA is the channel data (each column contains data from an individual channel)\n</code></pre> <p>readchannels_epochsamples_ingested - read the data based on specified channels</p> <pre><code>DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ...\n     CHANNEL, EPOCHFILES, S0, S1, S)\n\n   CHANNELTYPE is the type of channel to read\n\n   CHANNEL is a vector of the channel numbers to read, beginning from 1\n\n   EPOCHFILES is the set of epochfiles to read from\n\n   S0 is the sample where reading should start, and S1 is sample where reading should end.\n\n   DATA will have one column per channel.\n\nHelp for ndi.daq.reader.mfdaq.blackrock/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ...\n      EPOCHFILES, T0, T1)\n\n   Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number\n   of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is\n   also a column of a type that depends on the type of event that is read.  If the number\n   of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell\n   arrays, with 1 column per channel.\n\n   CHANNELTYPE is a cell array of strings, describing the type of each channel to read:\n       'event'  - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for\n                     each timestamp\n       'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the\n                     data associated with the marker (type double)\n       'text'   - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of\n                     character arrays, 1 per event\n       'dep'    - Create events from a digital channel with positive transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are 1\n       'dimp'   - Create events from a digital channel by finding impulses that exhibit\n                     positive then negative transitions. TIMESTAMPS mark the occurrence\n                     of each event, and DATA indicates whether the event is a positive\n                     transition (1) or negative (-1) transition.\n       'den'    - Create events from a digital channel with negative transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are -1.\n       'dimn'   - Create events from a digital channel by finding impulses that exhibit\n                     negative then positive transitions. TIMESTAMPS mark the occurrence of\n                     each event, and DATA indicates whether the event is a negative\n                     transition (1) or a positive transition (-1).\n\n   CHANNEL is a vector with the identity(ies) of the channel(s) to be read.\n\n   EPOCHSFILES is a cell array of full path file names\n\nHelp for ndi.daq.reader.mfdaq.blackrock/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ...\n      CHANNEL, EPOCHFILES, T0, T1)\n\n   Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number\n   of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is\n   also a column of a type that depends on the type of event that is read.  If the number\n   of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell\n   arrays, with 1 column per channel.\n\n   CHANNELTYPE is a cell array of strings, describing the type of each channel to read:\n       'event'  - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for\n                     each timestamp\n       'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the\n                     data associated with the marker (type double)\n       'text'   - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of\n                     character arrays, 1 per event\n       'dep'    - Create events from a digital channel with positive transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are 1\n       'dimp'   - Create events from a digital channel by finding impulses that exhibit\n                     positive then negative transitions. TIMESTAMPS mark the occurrence\n                     of each event, and DATA indicates whether the event is a positive\n                     transition (1) or negative (-1) transition.\n       'den'    - Create events from a digital channel with negative transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are -1.\n       'dimn'   - Create events from a digital channel by finding impulses that exhibit\n                     negative then positive transitions. TIMESTAMPS mark the occurrence of\n                     each event, and DATA indicates whether the event is a negative\n                     transition (1) or a positive transition (-1).\n\n   CHANNEL is a vector with the identity(ies) of the channel(s) to be read.\n\n   EPOCHSFILES is a cell array of full path file names\n\nHelp for ndi.daq.reader.mfdaq.blackrock/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples_native - read events or markers of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(MYDEV, CHANNELTYPE, CHANNEL, ...\n      EPOCHFILES, T0, T1)\n\n   CHANNELTYPE is the type of channel to read\n   ('event','marker', etc). It must be a string (not a cell array of strings).\n\n   CHANNEL is a vector with the identity of the channel(s) to be read.\n\n   EPOCH is the epoch number or epochID\n\n   T is a two-column vector; the first column has the time of the event. The second\n   column indicates the marker code. In the case of 'events', this is just 1. If more\n   than one channel is requested, DATA is returned as a cell array, one entry per channel.\n\n   TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to\n   epoch N at time 0 as the reference.\n\nHelp for ndi.daq.reader.mfdaq.blackrock/readevents_epochsamples_native is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL</p> <pre><code>SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL)\n  CHANNELTYPE can be either a string or a cell array of\n  strings the same length as the vector CHANNEL.\n  If CHANNELTYPE is a single string, then it is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n\n  SR is the list of sample rate from specified channels\n</code></pre> <p>samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL</p> <pre><code>SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S)\n\n  SR is an array of sample rates from the specified channels\n\n  CHANNELTYPE can be either a string or a cell array of\n  strings the same length as the vector CHANNEL.\n  If CHANNELTYPE is a single string, then it is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n\nHelp for ndi.daq.reader.mfdaq.blackrock/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>searchquery - create a search for this ndi.daq.reader object</p> <pre><code>SQ = SEARCHQUERY(NDI_DAQREADER_OBJ)\n\n  Creates a search query for the ndi.daq.reader object.\n\nHelp for ndi.daq.reader.mfdaq.blackrock/searchquery is inherited from superclass ndi.daq.reader\n</code></pre> <p>standardize_channel_types - return standard channel type names</p> <pre><code>STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES)\n\n  Given a cell array of strings of CHANNELTYPES, replace any abbreviations with\n  with the standard channel type name in ndi.daq.reader.mfdaq.channel_types()\n\nHelp for ndi.daq.reader.mfdaq.blackrock.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch</p> <pre><code>T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n</code></pre> <p>t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch</p> <pre><code>T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\nHelp for ndi.daq.reader.mfdaq.blackrock/t0_t1_ingested is inherited from superclass ndi.daq.reader\n</code></pre> <p>underlying_datatype - get the underlying data type for a channel in an epoch</p> <pre><code>[DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL)\n\n  Return the underlying datatype for the requested channel.\n\n  DATATYPE is a type that is suitable for passing to FREAD or FWRITE\n   (e.g., 'float64', 'uint16', etc. See help fread.)\n\n  P is a ,atrix of polynomials that converts between the double data that is returned by\n  READCHANNEL. RETURNED_DATA = (RAW_DATA+P(i,1))*P(i,2)+(RAW_DATA+P(i,1))*P(i,3) ...\n  There is one row of P for each entry of CHANNEL.\n\n  DATASIZE is the sample size in bits.\n\n  CHANNELTYPE must be a string. It is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n\nHelp for ndi.daq.reader.mfdaq.blackrock/underlying_datatype is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.daq.reader.mfdaq.blackrock.unique_id is inherited from superclass did.ido\n</code></pre> <p>verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk</p> <pre><code>B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ, EPOCHPROBEMAP, EPOCHFILES)\n\n  Examines the NDI_EPOCHPROBEMAP_DAQREADER EPOCHPROBEMAP and determines if it is valid for the given device\n  with epoch files EPOCHFILES.\n\n  See also: ndi.daq.reader, NDI_EPOCHPROBEMAP_DAQREADER\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/cedspike2.m/","title":"CLASS ndi.daq.reader.mfdaq.cedspike2","text":"<pre><code>  NDI.DAQ.READER.MFDAQ.CEDSPIKE2 - Device driver for CED Spike2\n\n  This class reads data from CED Spike2 .SMR or .SON file formats.\n\n  It depends on sigTOOL by Malcolm Lidierth (http://sigtool.sourceforge.net).\n\n  sigTOOL is also included in the https://github.com/VH-Lab/vhlab-thirdparty-matlab bundle and\n  can be installed with instructions at http://code.vhlab.org.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/cedspike2.m/#superclasses","title":"Superclasses","text":"<p>ndi.daq.reader.mfdaq, ndi.daq.reader, ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/cedspike2.m/#properties","title":"Properties","text":"Property Description identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/cedspike2.m/#methods","title":"Methods","text":"Method Description cedspike2 Create a new NDI_DEVICE_MFDAQ_CEDSPIKE2 object cedspike2filelist2smrfile Identify the .SMR file out of a file list cedspike2headertype2mfdaqchanneltype Convert between Intan headers and the ndi.daq.system.mfdaq channel types channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal getchannelsepoch List the channels that are available on this device getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader ingested2epochs_t0t1_epochclock make a map of all ingested epochs to t0t1 and epochclock isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/cedspike2.m/#methods-help","title":"Methods help","text":"<p>cedspike2 - Create a new NDI_DEVICE_MFDAQ_CEDSPIKE2 object</p> <pre><code>D = NDI.DAQ.READER.MFDAQ.CEDSPIKE2(NAME,THEFILENAVIGATOR)\n\n   Creates a new NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2 object with name NAME and associated\n   filenavigator THEFILENAVIGATOR.\n\n    Documentation for ndi.daq.reader.mfdaq.cedspike2/cedspike2\n       doc ndi.daq.reader.mfdaq.cedspike2\n</code></pre> <p>cedspike2filelist2smrfile - Identify the .SMR file out of a file list</p> <pre><code>FILENAME = CEDSPIKE2FILELIST2SMRFILE(FILELIST)\n\n  Given a cell array of strings FILELIST with full-path file names,\n  this function identifies the first file with an extension '.smr' (case insensitive)\n  and returns the result in FILENAME (full-path file name).\n</code></pre> <p>cedspike2headertype2mfdaqchanneltype - Convert between Intan headers and the ndi.daq.system.mfdaq channel types</p> <pre><code>CHANNELTYPE = CEDSPIKE2HEADERTYPE2MFDAQCHANNELTYPE(CEDSPIKE2CHANNELTYPE)\n\n  Given an Intan header file type, returns the standard ndi.daq.system.mfdaq channel type\n</code></pre> <p>channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ?</p> <pre><code>[TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types()\n\n   Returns a cell array of possible channel types in TYPES, and a corresponding\n   short abbreviation in the cell array ABBREV.\n\n  ----------------------------------------------------------------------------\n  | CHANNEL TYPE       | ABBREV  | Description                               |\n  |--------------------|---------|-------------------------------------------|\n  | 'analog_in'        | 'ai'    | Analog input                              |\n  | 'analog_out'       | 'ao'    | Analog output                             |\n  | 'auxiliary_in'     | 'ax'    | Auxiliary channels                        |\n  | 'digital_in'       | 'di'    | Digital input                             |\n  | 'digital_out'      | 'do'    | Digital output                            |\n  | 'event'            | 'e'     | Event trigger (returns times, codes of    |\n  |                    |         |    event trigger activation)              |\n  | 'marker'           | 'mk'    | Mark channel (contains value at specified |\n  |                    |         |    times)                                 |\n  | 'text'             | 'tx'    | Text channel (contains text at specified  |\n  |                    |         |    times)\n  | 'time'             | 't'     | Time samples                              |\n  |--------------------|---------|-------------------------------------------|\n\nHelp for ndi.daq.reader.mfdaq.cedspike2.channel_types is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>channelsepoch2timechannelinfo - look up time channel info</p> <pre><code>TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER)\n\n  Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time\n  channel number that corresponds to the channel specified by CHANNELTYPE and\n  CHANNELNUMBER.\n\nHelp for ndi.daq.reader.mfdaq.cedspike2.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  For the generic ndi.daq.reader.mfdaq, this returns a single clock\n  type 'dev_local'time';\n\n  See also: ndi.time.clocktype\n\nHelp for ndi.daq.reader.mfdaq.cedspike2/epochclock is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch</p> <pre><code>EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  See also: ndi.time.clocktype\n\nHelp for ndi.daq.reader.mfdaq.cedspike2/epochclock_ingested is inherited from superclass ndi.daq.reader\n</code></pre> <p>eq - tests whether 2 ndi.daq.reader objects are equal</p> <pre><code>B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2)\n\n  Examines whether or not the ndi.daq.reader objects are equal.\n\nHelp for ndi.daq.reader.mfdaq.cedspike2/eq is inherited from superclass ndi.daq.reader\n</code></pre> <p>getchannelsepoch - List the channels that are available on this device</p> <pre><code>CHANNELS = GETCHANNELSEPOCH(THEDEV, EPOCHFILES)\n\n   Returns the channel list of acquired channels in this session\n\n  CHANNELS is a structure list of all channels with fields:\n  -------------------------------------------------------\n  'name'             | The name of the channel (e.g., 'ai1')\n  'type'             | The type of data stored in the channel\n                     |    (e.g., 'analogin', 'digitalin', 'image', 'timestamp')\n  'time_channel'     | The channel number that has the time information for that channel\n</code></pre> <p>getchannelsepoch_ingested - List the channels that were sampled for this epoch</p> <pre><code>CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S)\n\n   Returns the channel list of acquired channels in these EPOCHFILES\n\n   The channels are of different types. In the below,\n   'n' is replaced with the channel number.\n   Type       | Description\n   ------------------------------------------------------\n   ain        | Analog input (e.g., ai1 is the first input channel)\n   din        | Digital input (e.g., di1 is the first input channel)\n   t          | Time - a time channel\n   axn        | Auxiliary inputs\n\n  CHANNELS is a structure list of all channels with fields:\n  -------------------------------------------------------\n  'name'             | The name of the channel (e.g., 'ai1')\n  'type'             | The type of data stored in the channel\n                     |    (e.g., 'analog_input', 'digital_input', 'image', 'timestamp')\n  'time_channel'     | The number of the time channel that contains the time information\n                     |    for the channel. Can be NaN when not applicable.\n\nHelp for ndi.daq.reader.mfdaq.cedspike2/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>getingesteddocument - return the ndi.document with the data for an ingested epoch</p> <pre><code>D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S)\n\n  Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for\n  the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch.\n  S is the ndi.session for the dataset.\n\nHelp for ndi.daq.reader.mfdaq.cedspike2/getingesteddocument is inherited from superclass ndi.daq.reader\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.daq.reader.mfdaq.cedspike2/id is inherited from superclass did.ido\n</code></pre> <p>ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader</p> <pre><code>D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID)\n\n  Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data\n  for an ndi.daq.reader object. The document D is not added to any database.\n\n  Example:\n     D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id);\n\nHelp for ndi.daq.reader.mfdaq.cedspike2/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>ingested2epochs_t0t1_epochclock - make a map of all ingested epochs to t0t1 and epochclock</p> <pre><code>M = ingested2epochs_epochprobemaps_t0t1_epochclock(NDI_DAQREADER_OBJ, S)\n\n  Examines the ingested epochfiles and returns a structure of maps:\n    M.t0t1 maps epochid to t0t1\n    M.epochclock maps epochid to epochclock\n\nHelp for ndi.daq.reader.mfdaq.cedspike2/ingested2epochs_t0t1_epochclock is inherited from superclass ndi.daq.reader\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.daq.reader.mfdaq.cedspike2.isvalid is inherited from superclass did.ido\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.daq.reader object</p> <pre><code>DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.daq.reader object.\n\nHelp for ndi.daq.reader.mfdaq.cedspike2/newdocument is inherited from superclass ndi.daq.reader\n</code></pre> <p>readchannels_epochsamples - read the data based on specified channels</p> <pre><code>DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES, S0, S1)\n\n   CHANNELTYPE is the type of channel to read (cell array of strings, one per\n      channel, or single string for all channels)\n\n   CHANNEL is a vector of the channel numbers to read, beginning from 1\n\n   EPOCHFILES is the cell array of full path filenames for this epoch\n\n   DATA is the channel data (each column contains data from an individual channel)\n</code></pre> <p>readchannels_epochsamples_ingested - read the data based on specified channels</p> <pre><code>DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ...\n     CHANNEL, EPOCHFILES, S0, S1, S)\n\n   CHANNELTYPE is the type of channel to read\n\n   CHANNEL is a vector of the channel numbers to read, beginning from 1\n\n   EPOCHFILES is the set of epochfiles to read from\n\n   S0 is the sample where reading should start, and S1 is sample where reading should end.\n\n   DATA will have one column per channel.\n\nHelp for ndi.daq.reader.mfdaq.cedspike2/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ...\n      EPOCHFILES, T0, T1)\n\n   Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number\n   of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is\n   also a column of a type that depends on the type of event that is read.  If the number\n   of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell\n   arrays, with 1 column per channel.\n\n   CHANNELTYPE is a cell array of strings, describing the type of each channel to read:\n       'event'  - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for\n                     each timestamp\n       'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the\n                     data associated with the marker (type double)\n       'text'   - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of\n                     character arrays, 1 per event\n       'dep'    - Create events from a digital channel with positive transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are 1\n       'dimp'   - Create events from a digital channel by finding impulses that exhibit\n                     positive then negative transitions. TIMESTAMPS mark the occurrence\n                     of each event, and DATA indicates whether the event is a positive\n                     transition (1) or negative (-1) transition.\n       'den'    - Create events from a digital channel with negative transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are -1.\n       'dimn'   - Create events from a digital channel by finding impulses that exhibit\n                     negative then positive transitions. TIMESTAMPS mark the occurrence of\n                     each event, and DATA indicates whether the event is a negative\n                     transition (1) or a positive transition (-1).\n\n   CHANNEL is a vector with the identity(ies) of the channel(s) to be read.\n\n   EPOCHSFILES is a cell array of full path file names\n\nHelp for ndi.daq.reader.mfdaq.cedspike2/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ...\n      CHANNEL, EPOCHFILES, T0, T1)\n\n   Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number\n   of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is\n   also a column of a type that depends on the type of event that is read.  If the number\n   of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell\n   arrays, with 1 column per channel.\n\n   CHANNELTYPE is a cell array of strings, describing the type of each channel to read:\n       'event'  - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for\n                     each timestamp\n       'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the\n                     data associated with the marker (type double)\n       'text'   - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of\n                     character arrays, 1 per event\n       'dep'    - Create events from a digital channel with positive transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are 1\n       'dimp'   - Create events from a digital channel by finding impulses that exhibit\n                     positive then negative transitions. TIMESTAMPS mark the occurrence\n                     of each event, and DATA indicates whether the event is a positive\n                     transition (1) or negative (-1) transition.\n       'den'    - Create events from a digital channel with negative transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are -1.\n       'dimn'   - Create events from a digital channel by finding impulses that exhibit\n                     negative then positive transitions. TIMESTAMPS mark the occurrence of\n                     each event, and DATA indicates whether the event is a negative\n                     transition (1) or a positive transition (-1).\n\n   CHANNEL is a vector with the identity(ies) of the channel(s) to be read.\n\n   EPOCHSFILES is a cell array of full path file names\n\nHelp for ndi.daq.reader.mfdaq.cedspike2/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples_native - read events or markers of specified channels for a specified epoch</p> <pre><code>DATA = READEVENTS_EPOCHSAMPLES_NATIVE(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1)\n\n   CHANNELTYPE is the type of channel to read\n   ('event','marker', etc)\n\n   CHANNEL is a vector with the identity of the channel(s) to be read.\n\n   EPOCH is the set of epoch files\n\n   DATA is a two-column vector; the first column has the time of the event. The second\n   column indicates the marker code. In the case of 'events', this is just 1. If more than one channel\n   is requested, DATA is returned as a cell array, one entry per channel.\n\n  disp('reading here')\n</code></pre> <p>samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL</p> <pre><code>SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL)\n\n  SR is the list of sample rate from specified channels\n</code></pre> <p>samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL</p> <pre><code>SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S)\n\n  SR is an array of sample rates from the specified channels\n\n  CHANNELTYPE can be either a string or a cell array of\n  strings the same length as the vector CHANNEL.\n  If CHANNELTYPE is a single string, then it is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n\nHelp for ndi.daq.reader.mfdaq.cedspike2/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>searchquery - create a search for this ndi.daq.reader object</p> <pre><code>SQ = SEARCHQUERY(NDI_DAQREADER_OBJ)\n\n  Creates a search query for the ndi.daq.reader object.\n\nHelp for ndi.daq.reader.mfdaq.cedspike2/searchquery is inherited from superclass ndi.daq.reader\n</code></pre> <p>standardize_channel_types - return standard channel type names</p> <pre><code>STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES)\n\n  Given a cell array of strings of CHANNELTYPES, replace any abbreviations with\n  with the standard channel type name in ndi.daq.reader.mfdaq.channel_types()\n\nHelp for ndi.daq.reader.mfdaq.cedspike2.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch</p> <pre><code>T0T1 = T0_T1(NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ, EPOCHFILES)\n\n  Return the beginning (t0) and end (t1) times of the EPOCHFILES that define this\n  epoch in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n</code></pre> <p>t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch</p> <pre><code>T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\nHelp for ndi.daq.reader.mfdaq.cedspike2/t0_t1_ingested is inherited from superclass ndi.daq.reader\n</code></pre> <p>underlying_datatype - get the underlying data type for a channel in an epoch</p> <pre><code>[DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL)\n\n  Return the underlying datatype for the requested channel.\n\n  DATATYPE is a type that is suitable for passing to FREAD or FWRITE\n   (e.g., 'float64', 'uint16', etc. See help fread.)\n\n  P is a polynomial that converts between the double data that is returned by\n  READCHANNEL. RETURNED_DATA = (RAW_DATA+P(1))*P(2)+(RAW_DATA+P(1))*P(3) ...\n\n  DATASIZE is the sample size in bits.\n\n  CHANNELTYPE must be a string. It is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.daq.reader.mfdaq.cedspike2.unique_id is inherited from superclass did.ido\n</code></pre> <p>verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk</p> <pre><code>B = VERIFYEPOCHPROBEMAP(NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ, EPOCHPROBEMAP, EPOCHFILES)\n\n  Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device\n  epoch NUMBER.\n\n  For the abstract class ndi.daq.system, EPOCHPROBEMAP is always valid as long as\n  EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object.\n\n  See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/intan.m/","title":"CLASS ndi.daq.reader.mfdaq.intan","text":"<pre><code>  NDI_DAQREADER_MFDAQ_INTAN - Device driver for Intan Technologies RHD file forma\n\n  This class reads data from Intan Technologies .RHD file format.\n\n  Intan Technologies: http://intantech.com/\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/intan.m/#superclasses","title":"Superclasses","text":"<p>ndi.daq.reader.mfdaq, ndi.daq.reader, ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/intan.m/#properties","title":"Properties","text":"Property Description identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/intan.m/#methods","title":"Methods","text":"Method Description channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles return the file name that corresponds to the RHD file, or directory in case of directory getchannelsepoch List the channels that are available on this Intan device for a given set of files getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader ingested2epochs_t0t1_epochclock make a map of all ingested epochs to t0t1 and epochclock intan Create a new NDI_DEVICE_MFDAQ_INTAN object intanheadertype2mfdaqchanneltype Convert between Intan headers and the ndi.daq.reader.mfdaq channel types intanname2mfdaqname Converts a channel name from Intan native format to ndi.daq.reader.mfdaq format. isvalid is a unique ID number valid? mfdaqchanneltype2intanchanneltype convert the channel type from generic format of multifuncdaqchannel mfdaqchanneltype2intanfreqheader Return header name with frequency information for channel type mfdaqchanneltype2intanheadertype Convert between the ndi.daq.reader.mfdaq channel types and Intan headers newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/intan.m/#methods-help","title":"Methods help","text":"<p>channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ?</p> <pre><code>[TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types()\n\n   Returns a cell array of possible channel types in TYPES, and a corresponding\n   short abbreviation in the cell array ABBREV.\n\n  ----------------------------------------------------------------------------\n  | CHANNEL TYPE       | ABBREV  | Description                               |\n  |--------------------|---------|-------------------------------------------|\n  | 'analog_in'        | 'ai'    | Analog input                              |\n  | 'analog_out'       | 'ao'    | Analog output                             |\n  | 'auxiliary_in'     | 'ax'    | Auxiliary channels                        |\n  | 'digital_in'       | 'di'    | Digital input                             |\n  | 'digital_out'      | 'do'    | Digital output                            |\n  | 'event'            | 'e'     | Event trigger (returns times, codes of    |\n  |                    |         |    event trigger activation)              |\n  | 'marker'           | 'mk'    | Mark channel (contains value at specified |\n  |                    |         |    times)                                 |\n  | 'text'             | 'tx'    | Text channel (contains text at specified  |\n  |                    |         |    times)\n  | 'time'             | 't'     | Time samples                              |\n  |--------------------|---------|-------------------------------------------|\n\nHelp for ndi.daq.reader.mfdaq.intan.channel_types is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>channelsepoch2timechannelinfo - look up time channel info</p> <pre><code>TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER)\n\n  Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time\n  channel number that corresponds to the channel specified by CHANNELTYPE and\n  CHANNELNUMBER.\n\nHelp for ndi.daq.reader.mfdaq.intan.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  For the generic ndi.daq.reader.mfdaq, this returns a single clock\n  type 'dev_local'time';\n\n  See also: ndi.time.clocktype\n\nHelp for ndi.daq.reader.mfdaq.intan/epochclock is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch</p> <pre><code>EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  See also: ndi.time.clocktype\n\nHelp for ndi.daq.reader.mfdaq.intan/epochclock_ingested is inherited from superclass ndi.daq.reader\n</code></pre> <p>eq - tests whether 2 ndi.daq.reader objects are equal</p> <pre><code>B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2)\n\n  Examines whether or not the ndi.daq.reader objects are equal.\n\nHelp for ndi.daq.reader.mfdaq.intan/eq is inherited from superclass ndi.daq.reader\n</code></pre> <p>filenamefromepochfiles - return the file name that corresponds to the RHD file, or directory in case of directory</p> <pre><code>[FILENAME, PARENTDIR, ISDIRECTORY] = FILENAMEFROMEPOCHFILES(NDI_DAQREADER_MFDAQ_INTAN_OBJ, FILENAME_ARRAY)\n\n  Examines the list of filenames in FILENAME_ARRAY (cell array of full path file strings) and determines which\n  one is an RHD data file. If the 1-file-per-channel mode is used, then PARENTDIR is the name of the directory\n  that holds the data files and ISDIRECTORY is 1.\n</code></pre> <p>getchannelsepoch - List the channels that are available on this Intan device for a given set of files</p> <pre><code>CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_INTAN_OBJ, EPOCHFILES)\n\n   Returns the channel list of acquired channels in this session\n\n  CHANNELS is a structure list of all channels with fields:\n  -------------------------------------------------------\n  'name'             | The name of the channel (e.g., 'ai1')\n  'type'             | The type of data stored in the channel\n                     |    (e.g., 'analogin', 'digitalin', 'image', 'timestamp')\n  'time_channel'     | The channel number that contains the time information for\n                     |    each channel.\n</code></pre> <p>getchannelsepoch_ingested - List the channels that were sampled for this epoch</p> <pre><code>CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S)\n\n   Returns the channel list of acquired channels in these EPOCHFILES\n\n   The channels are of different types. In the below,\n   'n' is replaced with the channel number.\n   Type       | Description\n   ------------------------------------------------------\n   ain        | Analog input (e.g., ai1 is the first input channel)\n   din        | Digital input (e.g., di1 is the first input channel)\n   t          | Time - a time channel\n   axn        | Auxiliary inputs\n\n  CHANNELS is a structure list of all channels with fields:\n  -------------------------------------------------------\n  'name'             | The name of the channel (e.g., 'ai1')\n  'type'             | The type of data stored in the channel\n                     |    (e.g., 'analog_input', 'digital_input', 'image', 'timestamp')\n  'time_channel'     | The number of the time channel that contains the time information\n                     |    for the channel. Can be NaN when not applicable.\n\nHelp for ndi.daq.reader.mfdaq.intan/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>getingesteddocument - return the ndi.document with the data for an ingested epoch</p> <pre><code>D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S)\n\n  Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for\n  the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch.\n  S is the ndi.session for the dataset.\n\nHelp for ndi.daq.reader.mfdaq.intan/getingesteddocument is inherited from superclass ndi.daq.reader\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.daq.reader.mfdaq.intan/id is inherited from superclass did.ido\n</code></pre> <p>ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader</p> <pre><code>D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID)\n\n  Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data\n  for an ndi.daq.reader object. The document D is not added to any database.\n\n  Example:\n     D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id);\n\nHelp for ndi.daq.reader.mfdaq.intan/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>ingested2epochs_t0t1_epochclock - make a map of all ingested epochs to t0t1 and epochclock</p> <pre><code>M = ingested2epochs_epochprobemaps_t0t1_epochclock(NDI_DAQREADER_OBJ, S)\n\n  Examines the ingested epochfiles and returns a structure of maps:\n    M.t0t1 maps epochid to t0t1\n    M.epochclock maps epochid to epochclock\n\nHelp for ndi.daq.reader.mfdaq.intan/ingested2epochs_t0t1_epochclock is inherited from superclass ndi.daq.reader\n</code></pre> <p>intan - Create a new NDI_DEVICE_MFDAQ_INTAN object</p> <pre><code>D = ndi.daq.reader.mfdaq.intan(NAME,THEFILENAVIGATOR)\n\n   Creates a new ndi.daq.reader.mfdaq.intan object with name NAME and associated\n   filenavigator THEFILENAVIGATOR.\n\n    Documentation for ndi.daq.reader.mfdaq.intan/intan\n       doc ndi.daq.reader.mfdaq.intan\n</code></pre> <p>intanheadertype2mfdaqchanneltype - Convert between Intan headers and the ndi.daq.reader.mfdaq channel types</p> <pre><code>CHANNELTYPE = INTANHEADERTYPE2MFDAQCHANNELTYPE(INTANCHANNELTYPE)\n\n  Given an Intan header file type, returns the standard ndi.daq.reader.mfdaq channel type\n</code></pre> <p>intanname2mfdaqname - Converts a channel name from Intan native format to ndi.daq.reader.mfdaq format.</p> <pre><code>MFDAQNAME = INTANNAME2MFDAQNAME(ndi.daq.reader.mfdaq.intan, MFDAQTYPE, NAME)\n\n  Given an Intan native channel name (e.g., 'A-000') in NAME and a\n  ndi.daq.reader.mfdaq channel type string (see NDI_DEVICE_MFDAQ), this function\n  produces an ndi.daq.reader.mfdaq channel name (e.g., 'ai1').\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.daq.reader.mfdaq.intan.isvalid is inherited from superclass did.ido\n</code></pre> <p>mfdaqchanneltype2intanchanneltype - convert the channel type from generic format of multifuncdaqchannel</p> <pre><code>to the specific intan channel type\n\n     INTANCHANNELTYPE = MFDAQCHANNELTYPE2INTANCHANNELTYPE(CHANNELTYPE)\n\n      the intanchanneltype is a string of the specific channel type for intan\n</code></pre> <p>mfdaqchanneltype2intanfreqheader - Return header name with frequency information for channel type</p> <pre><code>HEADERNAME = MFDAQCHANNELTYPE2INTANFREQHEADER(CHANNELTYPE)\n\n   Given an NDI_DEV_MFDAQ channel type string, this function returns the associated fieldname\n</code></pre> <p>mfdaqchanneltype2intanheadertype - Convert between the ndi.daq.reader.mfdaq channel types and Intan headers</p> <pre><code>INTANCHANHEADERTYPE = MFDAQCHANNELTYPE2INTANHEADERTYPE(CHANNELTYPE)\n\n  Given a standard ndi.daq.reader.mfdaq channel type, returns the name of the type as\n  indicated in Intan header files.\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.daq.reader object</p> <pre><code>DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.daq.reader object.\n\nHelp for ndi.daq.reader.mfdaq.intan/newdocument is inherited from superclass ndi.daq.reader\n</code></pre> <p>readchannels_epochsamples - read the data based on specified channels</p> <pre><code>DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1)\n\n   CHANNELTYPE is the type of channel to read (cell array of strings, one per\n      channel, or single string for all channels)\n\n   CHANNEL is a vector of the channel numbers to read, beginning from 1\n\n   EPOCH is set of epoch files\n\n   DATA is the channel data (each column contains data from an individual channel)\n</code></pre> <p>readchannels_epochsamples_ingested - read the data based on specified channels</p> <pre><code>DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ...\n     CHANNEL, EPOCHFILES, S0, S1, S)\n\n   CHANNELTYPE is the type of channel to read\n\n   CHANNEL is a vector of the channel numbers to read, beginning from 1\n\n   EPOCHFILES is the set of epochfiles to read from\n\n   S0 is the sample where reading should start, and S1 is sample where reading should end.\n\n   DATA will have one column per channel.\n\nHelp for ndi.daq.reader.mfdaq.intan/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ...\n      EPOCHFILES, T0, T1)\n\n   Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number\n   of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is\n   also a column of a type that depends on the type of event that is read.  If the number\n   of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell\n   arrays, with 1 column per channel.\n\n   CHANNELTYPE is a cell array of strings, describing the type of each channel to read:\n       'event'  - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for\n                     each timestamp\n       'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the\n                     data associated with the marker (type double)\n       'text'   - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of\n                     character arrays, 1 per event\n       'dep'    - Create events from a digital channel with positive transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are 1\n       'dimp'   - Create events from a digital channel by finding impulses that exhibit\n                     positive then negative transitions. TIMESTAMPS mark the occurrence\n                     of each event, and DATA indicates whether the event is a positive\n                     transition (1) or negative (-1) transition.\n       'den'    - Create events from a digital channel with negative transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are -1.\n       'dimn'   - Create events from a digital channel by finding impulses that exhibit\n                     negative then positive transitions. TIMESTAMPS mark the occurrence of\n                     each event, and DATA indicates whether the event is a negative\n                     transition (1) or a positive transition (-1).\n\n   CHANNEL is a vector with the identity(ies) of the channel(s) to be read.\n\n   EPOCHSFILES is a cell array of full path file names\n\nHelp for ndi.daq.reader.mfdaq.intan/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ...\n      CHANNEL, EPOCHFILES, T0, T1)\n\n   Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number\n   of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is\n   also a column of a type that depends on the type of event that is read.  If the number\n   of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell\n   arrays, with 1 column per channel.\n\n   CHANNELTYPE is a cell array of strings, describing the type of each channel to read:\n       'event'  - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for\n                     each timestamp\n       'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the\n                     data associated with the marker (type double)\n       'text'   - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of\n                     character arrays, 1 per event\n       'dep'    - Create events from a digital channel with positive transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are 1\n       'dimp'   - Create events from a digital channel by finding impulses that exhibit\n                     positive then negative transitions. TIMESTAMPS mark the occurrence\n                     of each event, and DATA indicates whether the event is a positive\n                     transition (1) or negative (-1) transition.\n       'den'    - Create events from a digital channel with negative transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are -1.\n       'dimn'   - Create events from a digital channel by finding impulses that exhibit\n                     negative then positive transitions. TIMESTAMPS mark the occurrence of\n                     each event, and DATA indicates whether the event is a negative\n                     transition (1) or a positive transition (-1).\n\n   CHANNEL is a vector with the identity(ies) of the channel(s) to be read.\n\n   EPOCHSFILES is a cell array of full path file names\n\nHelp for ndi.daq.reader.mfdaq.intan/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples_native - read events or markers of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(MYDEV, CHANNELTYPE, CHANNEL, ...\n      EPOCHFILES, T0, T1)\n\n   CHANNELTYPE is the type of channel to read\n   ('event','marker', etc). It must be a string (not a cell array of strings).\n\n   CHANNEL is a vector with the identity of the channel(s) to be read.\n\n   EPOCH is the epoch number or epochID\n\n   T is a two-column vector; the first column has the time of the event. The second\n   column indicates the marker code. In the case of 'events', this is just 1. If more\n   than one channel is requested, DATA is returned as a cell array, one entry per channel.\n\n   TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to\n   epoch N at time 0 as the reference.\n\nHelp for ndi.daq.reader.mfdaq.intan/readevents_epochsamples_native is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL</p> <pre><code>SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL)\n  CHANNELTYPE can be either a string or a cell array of\n  strings the same length as the vector CHANNEL.\n  If CHANNELTYPE is a single string, then it is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n\n  SR is the list of sample rate from specified channels\n</code></pre> <p>samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL</p> <pre><code>SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S)\n\n  SR is an array of sample rates from the specified channels\n\n  CHANNELTYPE can be either a string or a cell array of\n  strings the same length as the vector CHANNEL.\n  If CHANNELTYPE is a single string, then it is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n\nHelp for ndi.daq.reader.mfdaq.intan/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>searchquery - create a search for this ndi.daq.reader object</p> <pre><code>SQ = SEARCHQUERY(NDI_DAQREADER_OBJ)\n\n  Creates a search query for the ndi.daq.reader object.\n\nHelp for ndi.daq.reader.mfdaq.intan/searchquery is inherited from superclass ndi.daq.reader\n</code></pre> <p>standardize_channel_types - return standard channel type names</p> <pre><code>STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES)\n\n  Given a cell array of strings of CHANNELTYPES, replace any abbreviations with\n  with the standard channel type name in ndi.daq.reader.mfdaq.channel_types()\n\nHelp for ndi.daq.reader.mfdaq.intan.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch</p> <pre><code>T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n</code></pre> <p>t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch</p> <pre><code>T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\nHelp for ndi.daq.reader.mfdaq.intan/t0_t1_ingested is inherited from superclass ndi.daq.reader\n</code></pre> <p>underlying_datatype - get the underlying data type for a channel in an epoch</p> <pre><code>[DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL)\n\n  Return the underlying datatype for the requested channel.\n\n  DATATYPE is a type that is suitable for passing to FREAD or FWRITE\n   (e.g., 'float64', 'uint16', etc. See help fread.)\n\n  P is a polynomial that converts between the double data that is returned by\n  READCHANNEL. RETURNED_DATA = (RAW_DATA+P(1))*P(2)+(RAW_DATA+P(1))*P(3) ...\n\n  DATASIZE is the sample size in bits.\n\n  CHANNELTYPE must be a string. It is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.daq.reader.mfdaq.intan.unique_id is inherited from superclass did.ido\n</code></pre> <p>verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk</p> <pre><code>B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_MFDAQ_INTAN_OBJ, EPOCHPROBEMAP, EPOCHFILES)\n\n  Examines the NDI_EPOCHPROBEMAP_DAQREADER EPOCHPROBEMAP and determines if it is valid for the given device\n  with epoch files EPOCHFILES.\n\n  See also: ndi.daq.reader, NDI_EPOCHPROBEMAP_DAQREADER\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/ndr.m/","title":"CLASS ndi.daq.reader.mfdaq.ndr","text":"<pre><code>  ndi.daq.reader.mfdaq.ndr - Allows NDI to use NDR readers\n\n  This class reads data using NDR-matlab ndr.reader objects.\n\n  NDR-MATLAB must be installed: https://github.com/VH-Lab/NDR-matlab/\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/ndr.m/#superclasses","title":"Superclasses","text":"<p>ndi.daq.reader.mfdaq, ndi.daq.reader, ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/ndr.m/#properties","title":"Properties","text":"Property Description ndr_reader_string identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/ndr.m/#methods","title":"Methods","text":"Method Description channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal getchannelsepoch List the channels that are available for this epoch for the NDR daq reader getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader ingested2epochs_t0t1_epochclock make a map of all ingested epochs to t0t1 and epochclock isvalid is a unique ID number valid? ndr create a new ndi.daq.reader.mfdaq.ndr object newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies EPOCHPROBEMAP is compatible with device and data on disk"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/ndr.m/#methods-help","title":"Methods help","text":"<p>channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ?</p> <pre><code>[TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types()\n\n   Returns a cell array of possible channel types in TYPES, and a corresponding\n   short abbreviation in the cell array ABBREV.\n\n  ----------------------------------------------------------------------------\n  | CHANNEL TYPE       | ABBREV  | Description                               |\n  |--------------------|---------|-------------------------------------------|\n  | 'analog_in'        | 'ai'    | Analog input                              |\n  | 'analog_out'       | 'ao'    | Analog output                             |\n  | 'auxiliary_in'     | 'ax'    | Auxiliary channels                        |\n  | 'digital_in'       | 'di'    | Digital input                             |\n  | 'digital_out'      | 'do'    | Digital output                            |\n  | 'event'            | 'e'     | Event trigger (returns times, codes of    |\n  |                    |         |    event trigger activation)              |\n  | 'marker'           | 'mk'    | Mark channel (contains value at specified |\n  |                    |         |    times)                                 |\n  | 'text'             | 'tx'    | Text channel (contains text at specified  |\n  |                    |         |    times)\n  | 'time'             | 't'     | Time samples                              |\n  |--------------------|---------|-------------------------------------------|\n\nHelp for ndi.daq.reader.mfdaq.ndr.channel_types is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>channelsepoch2timechannelinfo - look up time channel info</p> <pre><code>TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER)\n\n  Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time\n  channel number that corresponds to the channel specified by CHANNELTYPE and\n  CHANNELNUMBER.\n\nHelp for ndi.daq.reader.mfdaq.ndr.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  See also: ndi.time.clocktype\n</code></pre> <p>epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch</p> <pre><code>EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  See also: ndi.time.clocktype\n\nHelp for ndi.daq.reader.mfdaq.ndr/epochclock_ingested is inherited from superclass ndi.daq.reader\n</code></pre> <p>eq - tests whether 2 ndi.daq.reader objects are equal</p> <pre><code>B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2)\n\n  Examines whether or not the ndi.daq.reader objects are equal.\n\nHelp for ndi.daq.reader.mfdaq.ndr/eq is inherited from superclass ndi.daq.reader\n</code></pre> <p>getchannelsepoch - List the channels that are available for this epoch for the NDR daq reader</p> <pre><code>CHANNELS = GETCHANNELSEPOCH(NDI_DAQ_READER_MFDAQ_NDR_OBJ, EPOCHFILES)\n\n   Returns the channel list of acquired channels in this session\n\n  CHANNELS is a structure list of all channels with fields:\n  -------------------------------------------------------\n  'name'             | The name of the channel (e.g., 'ai1')\n  'type'             | The type of data stored in the channel\n                     |    (e.g., 'analogin', 'digitalin', 'image', 'timestamp')\n  'time_channel'     | The channel number that has the time information for that channel\n</code></pre> <p>getchannelsepoch_ingested - List the channels that were sampled for this epoch</p> <pre><code>CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S)\n\n   Returns the channel list of acquired channels in these EPOCHFILES\n\n   The channels are of different types. In the below,\n   'n' is replaced with the channel number.\n   Type       | Description\n   ------------------------------------------------------\n   ain        | Analog input (e.g., ai1 is the first input channel)\n   din        | Digital input (e.g., di1 is the first input channel)\n   t          | Time - a time channel\n   axn        | Auxiliary inputs\n\n  CHANNELS is a structure list of all channels with fields:\n  -------------------------------------------------------\n  'name'             | The name of the channel (e.g., 'ai1')\n  'type'             | The type of data stored in the channel\n                     |    (e.g., 'analog_input', 'digital_input', 'image', 'timestamp')\n  'time_channel'     | The number of the time channel that contains the time information\n                     |    for the channel. Can be NaN when not applicable.\n\nHelp for ndi.daq.reader.mfdaq.ndr/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>getingesteddocument - return the ndi.document with the data for an ingested epoch</p> <pre><code>D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S)\n\n  Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for\n  the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch.\n  S is the ndi.session for the dataset.\n\nHelp for ndi.daq.reader.mfdaq.ndr/getingesteddocument is inherited from superclass ndi.daq.reader\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.daq.reader.mfdaq.ndr/id is inherited from superclass did.ido\n</code></pre> <p>ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader</p> <pre><code>D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID)\n\n  Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data\n  for an ndi.daq.reader object. The document D is not added to any database.\n\n  Example:\n     D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id);\n\nHelp for ndi.daq.reader.mfdaq.ndr/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>ingested2epochs_t0t1_epochclock - make a map of all ingested epochs to t0t1 and epochclock</p> <pre><code>M = ingested2epochs_epochprobemaps_t0t1_epochclock(NDI_DAQREADER_OBJ, S)\n\n  Examines the ingested epochfiles and returns a structure of maps:\n    M.t0t1 maps epochid to t0t1\n    M.epochclock maps epochid to epochclock\n\nHelp for ndi.daq.reader.mfdaq.ndr/ingested2epochs_t0t1_epochclock is inherited from superclass ndi.daq.reader\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.daq.reader.mfdaq.ndr.isvalid is inherited from superclass did.ido\n</code></pre> <p>ndr - create a new ndi.daq.reader.mfdaq.ndr object</p> <pre><code>OBJ = NDR(READER_STRING)\n\n  Creates a new ndi.daq.reader.mfdaq.ndr object\n  for reading files with ndr.reader objects.\n\n  READER_STRING should be a string that specifies\n  a file type, such as 'RHD', 'sev', 'som', etc.\n\n  A list of valid strings may be obtained from\n    reader_string = ndr.known_readers()\n\n    Documentation for ndi.daq.reader.mfdaq.ndr/ndr\n       doc ndi.daq.reader.mfdaq.ndr\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.daq.reader object</p> <pre><code>DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.daq.reader object.\n</code></pre> <p>readchannels_epochsamples - read the data based on specified channels</p> <pre><code>DATA = READCHANNELS_EPOCHSAMPLES(NDI_DAQREADER_MFDAQ_NDR_OBJ, CHANNELTYPE, CHANNEL, EPOCHFILES, S0, S1)\n\n   CHANNELTYPE is the type of channel to read (cell array of strings, one per\n      channel, or single string for all channels)\n\n   CHANNEL is a vector of the channel numbers to read, beginning from 1\n\n   EPOCHFILES is the cell array of full path filenames for this epoch\n\n   DATA is the channel data (each column contains data from an individual channel)\n</code></pre> <p>readchannels_epochsamples_ingested - read the data based on specified channels</p> <pre><code>DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ...\n     CHANNEL, EPOCHFILES, S0, S1, S)\n\n   CHANNELTYPE is the type of channel to read\n\n   CHANNEL is a vector of the channel numbers to read, beginning from 1\n\n   EPOCHFILES is the set of epochfiles to read from\n\n   S0 is the sample where reading should start, and S1 is sample where reading should end.\n\n   DATA will have one column per channel.\n\nHelp for ndi.daq.reader.mfdaq.ndr/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ...\n      EPOCHFILES, T0, T1)\n\n   Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number\n   of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is\n   also a column of a type that depends on the type of event that is read.  If the number\n   of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell\n   arrays, with 1 column per channel.\n\n   CHANNELTYPE is a cell array of strings, describing the type of each channel to read:\n       'event'  - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for\n                     each timestamp\n       'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the\n                     data associated with the marker (type double)\n       'text'   - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of\n                     character arrays, 1 per event\n       'dep'    - Create events from a digital channel with positive transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are 1\n       'dimp'   - Create events from a digital channel by finding impulses that exhibit\n                     positive then negative transitions. TIMESTAMPS mark the occurrence\n                     of each event, and DATA indicates whether the event is a positive\n                     transition (1) or negative (-1) transition.\n       'den'    - Create events from a digital channel with negative transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are -1.\n       'dimn'   - Create events from a digital channel by finding impulses that exhibit\n                     negative then positive transitions. TIMESTAMPS mark the occurrence of\n                     each event, and DATA indicates whether the event is a negative\n                     transition (1) or a positive transition (-1).\n\n   CHANNEL is a vector with the identity(ies) of the channel(s) to be read.\n\n   EPOCHSFILES is a cell array of full path file names\n\nHelp for ndi.daq.reader.mfdaq.ndr/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ...\n      CHANNEL, EPOCHFILES, T0, T1)\n\n   Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number\n   of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is\n   also a column of a type that depends on the type of event that is read.  If the number\n   of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell\n   arrays, with 1 column per channel.\n\n   CHANNELTYPE is a cell array of strings, describing the type of each channel to read:\n       'event'  - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for\n                     each timestamp\n       'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the\n                     data associated with the marker (type double)\n       'text'   - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of\n                     character arrays, 1 per event\n       'dep'    - Create events from a digital channel with positive transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are 1\n       'dimp'   - Create events from a digital channel by finding impulses that exhibit\n                     positive then negative transitions. TIMESTAMPS mark the occurrence\n                     of each event, and DATA indicates whether the event is a positive\n                     transition (1) or negative (-1) transition.\n       'den'    - Create events from a digital channel with negative transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are -1.\n       'dimn'   - Create events from a digital channel by finding impulses that exhibit\n                     negative then positive transitions. TIMESTAMPS mark the occurrence of\n                     each event, and DATA indicates whether the event is a negative\n                     transition (1) or a positive transition (-1).\n\n   CHANNEL is a vector with the identity(ies) of the channel(s) to be read.\n\n   EPOCHSFILES is a cell array of full path file names\n\nHelp for ndi.daq.reader.mfdaq.ndr/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples_native - read events or markers of specified channels for a specified epoch</p> <pre><code>DATA = READEVENTS_EPOCHSAMPLES_NATIVE(NDR_DAQREADER_MFDAQ_NDR_OBJ, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1)\n\n   CHANNELTYPE is the type of channel to read\n   ('event','marker', etc)\n\n   CHANNEL is a vector with the identity of the channel(s) to be read.\n\n   EPOCH is the set of epoch files\n\n   DATA is a two-column vector; the first column has the time of the event. The second\n   column indicates the marker code. In the case of 'events', this is just 1. If more than one channel\n   is requested, DATA is returned as a cell array, one entry per channel.\n</code></pre> <p>samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL</p> <pre><code>SR = SAMPLERATE(NDI_DAQREADER_MFDAQ_NDR_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL)\n\n  SR is the list of sample rate from specified channels in samples/sec.\n</code></pre> <p>samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL</p> <pre><code>SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S)\n\n  SR is an array of sample rates from the specified channels\n\n  CHANNELTYPE can be either a string or a cell array of\n  strings the same length as the vector CHANNEL.\n  If CHANNELTYPE is a single string, then it is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n\nHelp for ndi.daq.reader.mfdaq.ndr/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>searchquery - create a search for this ndi.daq.reader object</p> <pre><code>SQ = SEARCHQUERY(NDI_DAQREADER_OBJ)\n\n  Creates a search query for the ndi.daq.reader object.\n\nHelp for ndi.daq.reader.mfdaq.ndr/searchquery is inherited from superclass ndi.daq.reader\n</code></pre> <p>standardize_channel_types - return standard channel type names</p> <pre><code>STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES)\n\n  Given a cell array of strings of CHANNELTYPES, replace any abbreviations with\n  with the standard channel type name in ndi.daq.reader.mfdaq.channel_types()\n\nHelp for ndi.daq.reader.mfdaq.ndr.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch</p> <pre><code>T0T1 = T0_T1(NDI_DAQSYSTEM_MFDAQ_NDR_OBJ, EPOCHFILES)\n\n  Return the beginning (t0) and end (t1) times of the EPOCHFILES that define this\n  epoch in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n</code></pre> <p>t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch</p> <pre><code>T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\nHelp for ndi.daq.reader.mfdaq.ndr/t0_t1_ingested is inherited from superclass ndi.daq.reader\n</code></pre> <p>underlying_datatype - get the underlying data type for a channel in an epoch</p> <pre><code>[DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(NDI_DAQSYSTEM_MFDAQ_NDR_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL)\n\n  Return the underlying datatype for the requested channel.\n\n  DATATYPE is a type that is suitable for passing to FREAD or FWRITE\n   (e.g., 'float64', 'uint16', etc. See help fread.)\n\n  P is a matrix of polynomials that converts between the double data that is returned by\n  READCHANNEL. RETURNED_DATA = (RAW_DATA+P(i,1))*P(i,2)+(RAW_DATA+P(i,1))*P(i,3) ...\n  There is one row of P for each entry of CHANNEL.\n\n  DATASIZE is the sample size in bits.\n\n  CHANNELTYPE must be a string. It is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.daq.reader.mfdaq.ndr.unique_id is inherited from superclass did.ido\n</code></pre> <p>verifyepochprobemap - Verifies EPOCHPROBEMAP is compatible with device and data on disk</p> <pre><code>B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_OBJ, EPOCHPROBEMAP, NUMBER)\n\n  Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is\n  valid for the given device epoch NUMBER.\n\n  For the abstract class ndi.daq.reader, EPOCHPROBEMAP is always valid as long as\n  EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object.\n\n  See also: ndi.daq.reader.mfdaq.ndr, ndi.epoch.epochprobemap_daqsystem\n\nHelp for ndi.daq.reader.mfdaq.ndr/verifyepochprobemap is inherited from superclass ndi.daq.reader\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/spikegadgets.m/","title":"CLASS ndi.daq.reader.mfdaq.spikegadgets","text":"<pre><code>  NDI.DAQ.READER.MFDAQ.SPIKEGADGETS - Device driver for SpikeGadgets .rec video file format\n\n  This class reads data from video files .rec that spikegadgets use\n\n  Spike Gadgets: http://spikegadgets.com/\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/spikegadgets.m/#superclasses","title":"Superclasses","text":"<p>ndi.daq.reader.mfdaq, ndi.daq.reader, ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/spikegadgets.m/#properties","title":"Properties","text":"Property Description identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/spikegadgets.m/#methods","title":"Methods","text":"Method Description channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles ndi.daq.reader.mfdaq.spikegadgets/filenamefromepochfiles is a function. getchannelsepoch GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER getchannelsepoch_ingested List the channels that were sampled for this epoch getchannelsepochdetailed GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER WITH EXTRA DETAILS getepochprobemap GETEPOCHPROBEMAP returns struct with probe information getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader ingested2epochs_t0t1_epochclock make a map of all ingested epochs to t0t1 and epochclock isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object spikegadgets Create a new NDI_DEVICE_MFDAQ_SPIKEGADGETS object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies EPOCHPROBEMAP is compatible with device and data on disk"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Breader/%2Bmfdaq/spikegadgets.m/#methods-help","title":"Methods help","text":"<p>channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ?</p> <pre><code>[TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types()\n\n   Returns a cell array of possible channel types in TYPES, and a corresponding\n   short abbreviation in the cell array ABBREV.\n\n  ----------------------------------------------------------------------------\n  | CHANNEL TYPE       | ABBREV  | Description                               |\n  |--------------------|---------|-------------------------------------------|\n  | 'analog_in'        | 'ai'    | Analog input                              |\n  | 'analog_out'       | 'ao'    | Analog output                             |\n  | 'auxiliary_in'     | 'ax'    | Auxiliary channels                        |\n  | 'digital_in'       | 'di'    | Digital input                             |\n  | 'digital_out'      | 'do'    | Digital output                            |\n  | 'event'            | 'e'     | Event trigger (returns times, codes of    |\n  |                    |         |    event trigger activation)              |\n  | 'marker'           | 'mk'    | Mark channel (contains value at specified |\n  |                    |         |    times)                                 |\n  | 'text'             | 'tx'    | Text channel (contains text at specified  |\n  |                    |         |    times)\n  | 'time'             | 't'     | Time samples                              |\n  |--------------------|---------|-------------------------------------------|\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets.channel_types is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>channelsepoch2timechannelinfo - look up time channel info</p> <pre><code>TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER)\n\n  Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time\n  channel number that corresponds to the channel specified by CHANNELTYPE and\n  CHANNELNUMBER.\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  For the generic ndi.daq.reader.mfdaq, this returns a single clock\n  type 'dev_local'time';\n\n  See also: ndi.time.clocktype\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets/epochclock is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch</p> <pre><code>EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  See also: ndi.time.clocktype\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets/epochclock_ingested is inherited from superclass ndi.daq.reader\n</code></pre> <p>eq - tests whether 2 ndi.daq.reader objects are equal</p> <pre><code>B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2)\n\n  Examines whether or not the ndi.daq.reader objects are equal.\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets/eq is inherited from superclass ndi.daq.reader\n</code></pre> <p>filenamefromepochfiles - ndi.daq.reader.mfdaq.spikegadgets/filenamefromepochfiles is a function.</p> <pre><code>filename = filenamefromepochfiles(ndi_daqreader_mfdaq_spikegadgets_obj, filename)\n</code></pre> <p>getchannelsepoch - GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER</p> <pre><code>CHANNELS = GETCHANNELSEPOCH(NDI_DAQREADER_MFDAQ_SPIKEGADGETS_OBJ)\n\n  CHANNELS is a STRUCT\n</code></pre> <p>getchannelsepoch_ingested - List the channels that were sampled for this epoch</p> <pre><code>CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S)\n\n   Returns the channel list of acquired channels in these EPOCHFILES\n\n   The channels are of different types. In the below,\n   'n' is replaced with the channel number.\n   Type       | Description\n   ------------------------------------------------------\n   ain        | Analog input (e.g., ai1 is the first input channel)\n   din        | Digital input (e.g., di1 is the first input channel)\n   t          | Time - a time channel\n   axn        | Auxiliary inputs\n\n  CHANNELS is a structure list of all channels with fields:\n  -------------------------------------------------------\n  'name'             | The name of the channel (e.g., 'ai1')\n  'type'             | The type of data stored in the channel\n                     |    (e.g., 'analog_input', 'digital_input', 'image', 'timestamp')\n  'time_channel'     | The number of the time channel that contains the time information\n                     |    for the channel. Can be NaN when not applicable.\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>getchannelsepochdetailed - GET THE CHANNELS AVAILABLE FROM .REC FILE HEADER WITH EXTRA DETAILS</p> <pre><code>CHANNELS = GETCHANNELSEPOCHDETAILED(NDI_DAQREADER_MFDAQ_SPIKEGADGETS_OBJ)\n\n  CHANNELS is a STRUCT\n</code></pre> <p>getepochprobemap - GETEPOCHPROBEMAP returns struct with probe information</p> <pre><code>name, reference, n-trode, channels\n</code></pre> <p>getingesteddocument - return the ndi.document with the data for an ingested epoch</p> <pre><code>D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S)\n\n  Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for\n  the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch.\n  S is the ndi.session for the dataset.\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets/getingesteddocument is inherited from superclass ndi.daq.reader\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets/id is inherited from superclass did.ido\n</code></pre> <p>ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader</p> <pre><code>D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID)\n\n  Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data\n  for an ndi.daq.reader object. The document D is not added to any database.\n\n  Example:\n     D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id);\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>ingested2epochs_t0t1_epochclock - make a map of all ingested epochs to t0t1 and epochclock</p> <pre><code>M = ingested2epochs_epochprobemaps_t0t1_epochclock(NDI_DAQREADER_OBJ, S)\n\n  Examines the ingested epochfiles and returns a structure of maps:\n    M.t0t1 maps epochid to t0t1\n    M.epochclock maps epochid to epochclock\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets/ingested2epochs_t0t1_epochclock is inherited from superclass ndi.daq.reader\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets.isvalid is inherited from superclass did.ido\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.daq.reader object</p> <pre><code>DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.daq.reader object.\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets/newdocument is inherited from superclass ndi.daq.reader\n</code></pre> <p>readchannels_epochsamples - read the data based on specified channels</p> <pre><code>DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1)\n\n  CHANNELTYPE is the type of channel to read\n  'digital_in', 'digital_out', 'analog_in', 'analog_out' or 'auxiliary'\n\n  CHANNEL is a vector of the channel numbers to\n  read beginning from 1 if 'etrodeftrode' is channeltype,\n  if channeltype is 'analog_in' channel is an array with the\n  string names of analog channels 'Ain1'through 8\n\n  EPOCH is set of files in the epoch\n\n  DATA is the channel data (each column contains data from an individual channel)\n</code></pre> <p>readchannels_epochsamples_ingested - read the data based on specified channels</p> <pre><code>DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ...\n     CHANNEL, EPOCHFILES, S0, S1, S)\n\n   CHANNELTYPE is the type of channel to read\n\n   CHANNEL is a vector of the channel numbers to read, beginning from 1\n\n   EPOCHFILES is the set of epochfiles to read from\n\n   S0 is the sample where reading should start, and S1 is sample where reading should end.\n\n   DATA will have one column per channel.\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ...\n      EPOCHFILES, T0, T1)\n\n   Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number\n   of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is\n   also a column of a type that depends on the type of event that is read.  If the number\n   of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell\n   arrays, with 1 column per channel.\n\n   CHANNELTYPE is a cell array of strings, describing the type of each channel to read:\n       'event'  - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for\n                     each timestamp\n       'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the\n                     data associated with the marker (type double)\n       'text'   - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of\n                     character arrays, 1 per event\n       'dep'    - Create events from a digital channel with positive transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are 1\n       'dimp'   - Create events from a digital channel by finding impulses that exhibit\n                     positive then negative transitions. TIMESTAMPS mark the occurrence\n                     of each event, and DATA indicates whether the event is a positive\n                     transition (1) or negative (-1) transition.\n       'den'    - Create events from a digital channel with negative transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are -1.\n       'dimn'   - Create events from a digital channel by finding impulses that exhibit\n                     negative then positive transitions. TIMESTAMPS mark the occurrence of\n                     each event, and DATA indicates whether the event is a negative\n                     transition (1) or a positive transition (-1).\n\n   CHANNEL is a vector with the identity(ies) of the channel(s) to be read.\n\n   EPOCHSFILES is a cell array of full path file names\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ...\n      CHANNEL, EPOCHFILES, T0, T1)\n\n   Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number\n   of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is\n   also a column of a type that depends on the type of event that is read.  If the number\n   of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell\n   arrays, with 1 column per channel.\n\n   CHANNELTYPE is a cell array of strings, describing the type of each channel to read:\n       'event'  - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for\n                     each timestamp\n       'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the\n                     data associated with the marker (type double)\n       'text'   - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of\n                     character arrays, 1 per event\n       'dep'    - Create events from a digital channel with positive transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are 1\n       'dimp'   - Create events from a digital channel by finding impulses that exhibit\n                     positive then negative transitions. TIMESTAMPS mark the occurrence\n                     of each event, and DATA indicates whether the event is a positive\n                     transition (1) or negative (-1) transition.\n       'den'    - Create events from a digital channel with negative transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are -1.\n       'dimn'   - Create events from a digital channel by finding impulses that exhibit\n                     negative then positive transitions. TIMESTAMPS mark the occurrence of\n                     each event, and DATA indicates whether the event is a negative\n                     transition (1) or a positive transition (-1).\n\n   CHANNEL is a vector with the identity(ies) of the channel(s) to be read.\n\n   EPOCHSFILES is a cell array of full path file names\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples_native - read events or markers of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(MYDEV, CHANNELTYPE, CHANNEL, ...\n      EPOCHFILES, T0, T1)\n\n   CHANNELTYPE is the type of channel to read\n   ('event','marker', etc). It must be a string (not a cell array of strings).\n\n   CHANNEL is a vector with the identity of the channel(s) to be read.\n\n   EPOCH is the epoch number or epochID\n\n   T is a two-column vector; the first column has the time of the event. The second\n   column indicates the marker code. In the case of 'events', this is just 1. If more\n   than one channel is requested, DATA is returned as a cell array, one entry per channel.\n\n   TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to\n   epoch N at time 0 as the reference.\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets/readevents_epochsamples_native is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL</p> <pre><code>SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL)\n\n  SR is the list of sample rate from specified channels\n\n  CHANNELTYPE and CHANNEL not used in this case since it is the\n  same for all channels in this device\n</code></pre> <p>samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL</p> <pre><code>SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S)\n\n  SR is an array of sample rates from the specified channels\n\n  CHANNELTYPE can be either a string or a cell array of\n  strings the same length as the vector CHANNEL.\n  If CHANNELTYPE is a single string, then it is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>searchquery - create a search for this ndi.daq.reader object</p> <pre><code>SQ = SEARCHQUERY(NDI_DAQREADER_OBJ)\n\n  Creates a search query for the ndi.daq.reader object.\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets/searchquery is inherited from superclass ndi.daq.reader\n</code></pre> <p>spikegadgets - Create a new NDI_DEVICE_MFDAQ_SPIKEGADGETS object</p> <pre><code>D = NDI.DAQ.READER.MFDAQ.SPIKEGADGETS(NAME,THEFILENAVIGATOR)\n\n   Creates a new NDI_DAQREADER_MFDAQ_SPIKEGADGETS object with name NAME and associated\n   filenavigator THEFILENAVIGATOR.\n\n    Documentation for ndi.daq.reader.mfdaq.spikegadgets/spikegadgets\n       doc ndi.daq.reader.mfdaq.spikegadgets\n</code></pre> <p>standardize_channel_types - return standard channel type names</p> <pre><code>STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES)\n\n  Given a cell array of strings of CHANNELTYPES, replace any abbreviations with\n  with the standard channel type name in ndi.daq.reader.mfdaq.channel_types()\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch</p> <pre><code>T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n</code></pre> <p>t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch</p> <pre><code>T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets/t0_t1_ingested is inherited from superclass ndi.daq.reader\n</code></pre> <p>underlying_datatype - get the underlying data type for a channel in an epoch</p> <pre><code>[DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL)\n\n  Return the underlying datatype for the requested channel.\n\n  DATATYPE is a type that is suitable for passing to FREAD or FWRITE\n   (e.g., 'float64', 'uint16', etc. See help fread.)\n\n  P is a ,atrix of polynomials that converts between the double data that is returned by\n  READCHANNEL. RETURNED_DATA = (RAW_DATA+P(i,1))*P(i,2)+(RAW_DATA+P(i,1))*P(i,3) ...\n  There is one row of P for each entry of CHANNEL.\n\n  DATASIZE is the sample size in bits.\n\n  CHANNELTYPE must be a string. It is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets/underlying_datatype is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets.unique_id is inherited from superclass did.ido\n</code></pre> <p>verifyepochprobemap - Verifies EPOCHPROBEMAP is compatible with device and data on disk</p> <pre><code>B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_OBJ, EPOCHPROBEMAP, NUMBER)\n\n  Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is\n  valid for the given device epoch NUMBER.\n\n  For the abstract class ndi.daq.reader, EPOCHPROBEMAP is always valid as long as\n  EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object.\n\n  See also: ndi.daq.reader.mfdaq.spikegadgets, ndi.epoch.epochprobemap_daqsystem\n\nHelp for ndi.daq.reader.mfdaq.spikegadgets/verifyepochprobemap is inherited from superclass ndi.daq.reader\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bsystem/mfdaq.m/","title":"CLASS ndi.daq.system.mfdaq","text":"<pre><code>  NDI_DAQSYSTEM_MFDAQ - Multifunction DAQ object class\n\n  The ndi.daq.system.mfdaq object class.\n\n  This object allows one to address multifunction data acquisition systems that\n  sample a variety of data types potentially simultaneously.\n\n  The channel types that are supported are the following:\n  Channel type (string):      | Description\n  -------------------------------------------------------------\n  'analog_in'   or 'ai'       | Analog input\n  'analog_out'  or 'ao'       | Analog output\n  'digital_in'  or 'di'       | Digital input\n  'digital_out' or 'do'       | Digital output\n  'time'        or 't'        | Time\n  'auxiliary_in','aux' or 'ax'| Auxiliary channels\n  'event', or 'e'             | Event trigger (returns times of event trigger activation)\n  'mark', or 'mk'             | Mark channel (contains value at specified times)\n\n\n  See also: ndi.daq.system.mfdaq/ndi.daq.system.mfdaq\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bsystem/mfdaq.m/#superclasses","title":"Superclasses","text":"<p>ndi.daq.system, ndi.ido, did.ido, ndi.epoch.epochset.param, ndi.epoch.epochset, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bsystem/mfdaq.m/#properties","title":"Properties","text":"Property Description name filenavigator daqreader daqmetadatareader identifier epochprobemap_class"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bsystem/mfdaq.m/#methods","title":"Methods","text":"Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build the epochtable for an ndi.daq.system object cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object deleteepoch Delete an epoch and an epoch record from a device epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid return the epoch id string for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq are two ndi.daq.system objects equal? getcache return the NDI_CACHE and key for ndi.daq.system getchannels List the channels that are available on this device getchannelsepoch List the channels that are available on this device for an epoch getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs getepochprobemap Return the epoch record for an ndi.daq.system object getepochtag Get tag(s) from an epoch getmetadata get metadata for an epoch getprobes GETPROBES = Return all of the probes associated with an ndi.daq.system object ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the identifier of an DID.IDO object ingest ingest the data from an ndi.daq.system into the database issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? matchedepochtable compare a hash number from an epochtable to the current version mfdaq Create a new multifunction DAQ object mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type ndi_daqsystem_gui_edit function for editing an ndi.daq.system object newdocument create a new document set for ndi.daq.system objects numepochs Number of epochs of ndi.epoch.epochset readchannels read the data based on specified channels readchannels_epochsamples read the data based on specified channels readevents read events or markers of specified channels readevents_epochsamples read events or markers of specified channels for a specified epoch removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery search for an ndi.daq.system session return the ndi.session object associated with the ndi.daq.system object set_daqmetadatareader set the cell array of ndi.daq.metadatareader objects setepochprobemap Sets the epoch record of a particular epoch setepochtag Set tag(s) for an epoch setsession set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system) t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/%2Bsystem/mfdaq.m/#methods-help","title":"Methods help","text":"<p>addepochtag - Add tag(s) for an epoch</p> <pre><code>ADDEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. These tags will be added to any\n  tags in the epoch EPOCHNUMBER. If tags with the same names as those in TAG\n  already exist, they will be overwritten. If there is no epoch\n  EPOCHNUMBER, then an error is returned.\n\nHelp for ndi.daq.system.mfdaq/addepochtag is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of EPOCHNODES.\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\n  In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with\n  a cost of 1 and a linear mapping rule with shift 1 and offset 0:\n    'utc' -&gt; 'utc'\n    'utc' -&gt; 'approx_utc'\n    'exp_global_time' -&gt; 'exp_global_time'\n    'exp_global_time' -&gt; 'approx_exp_global_time'\n    'dev_global_time' -&gt; 'dev_global_time'\n    'dev_global_time' -&gt; 'approx_dev_global_time'\n\n\n  See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping,\n  ndi.daq.system.mfdaq/EPOCHNODES\n\nHelp for ndi.daq.system.mfdaq/buildepochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>buildepochtable - Build the epochtable for an ndi.daq.system object</p> <pre><code>ET = BUILDEPOCHTABLE(NDI_DAQSYSTEM_OBJ)\n\n  Returns the epoch table for NDI_DAQSYSTEM_OBJ\n\nHelp for ndi.daq.system.mfdaq/buildepochtable is inherited from superclass ndi.daq.system\n</code></pre> <p>cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache</p> <pre><code>GINFO_BIG = GINFO2CACHE(GINFO_SMALL)\n\nHelp for ndi.daq.system.mfdaq.cache2ginfo is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epoch graph, if it exists and is up-to-date\n  (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ\n  has not changed). If there is no cached version, or if it is not up-to-date,\n  COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date,\n  it is deleted.\n\n  See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH\n\nHelp for ndi.daq.system.mfdaq/cached_epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object</p> <pre><code>[ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epochtable, if it exists, along with its HASHVALUE\n  (a hash number generated from the table). If there is no cached version,\n  ET and HASHVALUE will be empty.\n\nHelp for ndi.daq.system.mfdaq/cached_epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>deleteepoch - Delete an epoch and an epoch record from a device</p> <pre><code>DELETEEPOCH(NDI_DAQSYSTEM_OBJ, NUMBER ... [REMOVEDATA])\n\n  Deletes the data and ndi.epoch.epochprobemap_daqsystem and epoch data for epoch NUMBER.\n  If REMOVEDATA is present and is 1, the data and record are physically deleted.\n  If REMOVEDATA is omitted or is 0, the data and record are renamed but not deleted from disk.\n\n  In the abstract class, this command takes no action.\n\n  See also: ndi.daq.system.mfdaq, ndi.epoch.epochprobemap_daqsystem\n\nHelp for ndi.daq.system.mfdaq/deleteepoch is inherited from superclass ndi.daq.system\n</code></pre> <p>epoch2str - convert an epoch number or id to a string</p> <pre><code>S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER)\n\n  Returns the epoch NUMBER in the form of a string. If it is a simple\n  integer, then INT2STR is used to produce a string. If it is an epoch\n  identifier string, then it is returned.\n\nHelp for ndi.daq.system.mfdaq/epoch2str is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_DAQSYSTEM_MFDAQ_OBJ, EPOCH)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  For the generic ndi.daq.system.mfdaq, this returns a single clock\n  type 'dev_local'time';\n\n  See also: ndi.time.clocktype\n</code></pre> <p>epochgraph - graph of the mapping and cost of converting time among epochs</p> <pre><code>[COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes).\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\nHelp for ndi.daq.system.mfdaq/epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochid - return the epoch id string for an epoch</p> <pre><code>EID = EOPCHID(NDI_DAQSYSTEM_OBJ, EPOCH_NUMBER)\n\n  Returns the EPOCHID for epoch with number EPOCH_NUMBER.\n  In ndi.daq.system, this is determined by the associated\n  ndi.file.navigator object.\n\nHelp for ndi.daq.system.mfdaq/epochid is inherited from superclass ndi.daq.system\n</code></pre> <p>epochnodes - return all epoch nodes from an ndi.epoch.epochset object</p> <pre><code>[NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ)\n\n  Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the\n  following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch within the session.\n  'epoch_session_id'           | The ID of the session that contains the epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A SINGLE ndi.time.clocktype entry that describes the clock type of this node.\n  't0_t1'                   | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock'\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_id', and 'epochprobemap'\n  'objectname'              | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no\n                            |   'name' field, then 'unknown' is used.\n  'objectclass'             | The object class name of the NDI_EPOCHSET_OBJ.\n\n  EPOCHNODES are related to EPOCHTABLE entries, except\n     a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains\n        multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids\n        in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another.\n     b) EPOCHNODES contain identifying information (objectname and objectclass) to help\n        in identifying the epoch nodes across ndi.epoch.epochset objects.\n\n  UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs.\n\nHelp for ndi.daq.system.mfdaq/epochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochprobemapfilename - return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch</p> <pre><code>ECFNAME = EPOCHPROBEMAPFILENAME(NDI_DAQSYSTEM_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Returns the EPOCHPROBEMAPFILENAME for the ndi.daq.system epoch EPOCH_NUMBER_OR_ID.\n  If there is no epoch NUMBER, an error is generated. The file name is returned with\n  a full path.\n\nHelp for ndi.daq.system.mfdaq/epochprobemapfilename is inherited from superclass ndi.daq.system\n</code></pre> <p>epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES</p> <pre><code>NAME = EPOCHSETNAME(NDI_EPOCHSET_OBJ)\n\n  Returns the object name that is used when creating epoch nodes.\n\n  If the class has a 'name' property, that property is used.\n  Otherwise, 'unknown' is used.\n\nHelp for ndi.daq.system.mfdaq/epochsetname is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtable - Return an epoch table that relates the current object's epochs to underlying epochs</p> <pre><code>[ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch. The number may change as epochs are added and subtracted.\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch.\n  'epoch_session_id'           | The session ID that contains this epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap'\n\n  HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable\n  has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE.\n\n  After it is read from disk once, the ET is stored in memory and is not re-read from disk\n  unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE.\n\nHelp for ndi.daq.system.mfdaq/epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID</p> <pre><code>ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object\n  that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the\n  epoch or the EPOCHID of the epoch.\n\nHelp for ndi.daq.system.mfdaq/epochtableentry is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtagfilename - return the file path for the tag file for an epoch</p> <pre><code>ETFNAME = EPOCHTAGFILENAME(NDI_FILENAVIGATOR_OBJ, EPOCHNUMBER)\n\n  In this base class, empty is returned because it is an abstract class.\n\nHelp for ndi.daq.system.mfdaq/epochtagfilename is inherited from superclass ndi.daq.system\n</code></pre> <p>eq - are two ndi.daq.system objects equal?</p> <pre><code>B = EQ(NDI_DAQSYSTEM_OBJ_A, NDI_DAQSYSTEM_OBJ_B)\n\n  Returns 1 if the ndi.daq.system objects have the same name and class type.\n  The objects do not have to be the same handle or have the same space in memory.\n  Otherwise, returns 0.\n\nHelp for ndi.daq.system.mfdaq/eq is inherited from superclass ndi.daq.system\n</code></pre> <p>getcache - return the NDI_CACHE and key for ndi.daq.system</p> <pre><code>[CACHE,KEY] = GETCACHE(NDI_DAQSYSTEM_OBJ)\n\n  Returns the CACHE and KEY for the ndi.daq.system object.\n\n  The CACHE is returned from the associated session.\n  The KEY is the string 'daqsystem_' followed by the object's id.\n\n  See also: ndi.daq.system.mfdaq, NDI_BASE\n\nHelp for ndi.daq.system.mfdaq/getcache is inherited from superclass ndi.daq.system\n</code></pre> <p>getchannels - List the channels that are available on this device</p> <pre><code>CHANNELS = GETCHANNELS(NDI_DAQSYSTEM_MFDAQ_OBJ)\n\n   Returns the channel list of acquired channels in this session\n\n   The channels are of different types. In the below,\n   'n' is replaced with the channel number.\n   Type       | Description\n   ------------------------------------------------------\n   ain        | Analog input (e.g., ai1 is the first input channel)\n   din        | Digital input (e.g., di1 is the first input channel)\n   t          | Time - a time channel\n   axn        | Auxiliary inputs\n\n  CHANNELS is a structure list of all channels with fields:\n  -------------------------------------------------------\n  'name'             | The name of the channel (e.g., 'ai1')\n  'type'             | The type of data stored in the channel\n                     |    (e.g., 'analog_input', 'digital_input', 'image', 'timestamp')\n  'time_channel'     | The time channel that has timing information for that channel\n</code></pre> <p>getchannelsepoch - List the channels that are available on this device for an epoch</p> <pre><code>CHANNELS = GETCHANNELSEPOCH(NDI_DAQSYSTEM_MFDAQ_OBJ, EPOCH)\n\n   Returns the channel list of acquired channels in this session\n   for a given EPOCH (can be epochid or number)\n\n   The channels are of different types. In the below,\n   'n' is replaced with the channel number.\n   Type       | Description\n   ------------------------------------------------------\n   ain        | Analog input (e.g., ai1 is the first input channel)\n   din        | Digital input (e.g., di1 is the first input channel)\n   t          | Time - a time channel\n   axn        | Auxiliary inputs\n\n  CHANNELS is a structure list of all channels with fields:\n  -------------------------------------------------------\n  'name'             | The name of the channel (e.g., 'ai1')\n  'type'             | The type of data stored in the channel\n                     |    (e.g., 'analog_input', 'digital_input', 'image', 'timestamp')\n  'time_channel'     | The time channel that has timing information for that channel\n</code></pre> <p>getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs</p> <pre><code>EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ)\n\n  Produce an array of ndi.epoch objects from the epoch table of this\n  ndi.epoch.epochset object (NDI_EPOCHSET_OBJ).\n\nHelp for ndi.daq.system.mfdaq/getepocharray is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>getepochprobemap - Return the epoch record for an ndi.daq.system object</p> <pre><code>EPOCHPROBEMAP = GETEPOCHPROBEMAP(NDI_DAQSYSTEM_OBJ, EPOCH)\n\n  Inputs:\n      NDI_EPOCHSET_PARAM_OBJ - the ndi.epoch.epochset.param object\n      EPOCH - the epoch number or identifier\n\n  Output:\n      EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME\n\n\n  The ndi.daq.system GETEPOCHPROBEMAP checks its DAQREADER object to see if it has a method called\n  'GETEPOCHPROBEMAP' that accepts the EPOCHPROBEMAP filename and the EPOCHFILES for that epoch.\n  If it does have a method by that name, it is called and the output returned. If it does not, then the FILENAVIGATOR\n  parameter's method is called.\n\nHelp for ndi.daq.system.mfdaq/getepochprobemap is inherited from superclass ndi.daq.system\n</code></pre> <p>getepochtag - Get tag(s) from an epoch</p> <pre><code>TAG = GETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. If there are no files in\n  EPOCHNUMBER then an error is returned.\n\nHelp for ndi.daq.system.mfdaq/getepochtag is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>getmetadata - get metadata for an epoch</p> <pre><code>METADATA = GETMETADATA(NDI_DAQSYSTEM_OBJ, EPOCH, CHANNEL)\n\n  Returns the metadata (cell array of entries) for EPOCH for metadata channel\n  CHANNEL. CHANNEL indicates the number of the ndi.daq.metadatareader to use\n  to obtain the data.\n\nHelp for ndi.daq.system.mfdaq/getmetadata is inherited from superclass ndi.daq.system\n</code></pre> <p>getprobes - GETPROBES = Return all of the probes associated with an ndi.daq.system object</p> <pre><code>PROBES_STRUCT = GETPROBES(NDI_DAQSYSTEM_OBJ)\n\n  Returns all probes associated with the ndi.daq.system object NDI_DEVICE_OBJ\n\n  This function returns a structure with fields of all unique probes across\n  all EPOCHPROBEMAP objects returned in ndi.daq.system/GETEPOCHPROBEMAP.\n  The fields are 'name', 'reference', and 'type'.\n\nHelp for ndi.daq.system.mfdaq/getprobes is inherited from superclass ndi.daq.system\n</code></pre> <p>ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache</p> <pre><code>GINFO_SMALL = GINFO2CACHE(GINFO)\n\nHelp for ndi.daq.system.mfdaq.ginfo2cache is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.daq.system.mfdaq/id is inherited from superclass did.ido\n</code></pre> <p>ingest - ingest the data from an ndi.daq.system into the database</p> <pre><code>[B,D] = INGEST(NDI_DAQSYSTEM_OBJ)\n\n  Ingest any uningested epochs from an ndi.daq.system object into the database.\n  B is 1 if the operation is successful. D is a cell array of new ndi.document objects\n  that were created and added to the database.\n\nHelp for ndi.daq.system.mfdaq/ingest is inherited from superclass ndi.daq.system\n</code></pre> <p>issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph?</p> <pre><code>B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ)\n\n  This function tells an ndi.time.syncgraph object whether it should continue\n  adding the 'underlying' epochs to the graph, or whether it should stop at this level.\n\n  For ndi.epoch.epochset objects, this returns 1. For some object types (ndi.probe.*, for example)\n  this will return 0 so that the underlying ndi.daq.system epochs are added.\n\nHelp for ndi.daq.system.mfdaq/issyncgraphroot is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.daq.system.mfdaq.isvalid is inherited from superclass did.ido\n</code></pre> <p>matchedepochtable - compare a hash number from an epochtable to the current version</p> <pre><code>B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE)\n\n  Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE.\n  Otherwise, it returns 0.\n\nHelp for ndi.daq.system.mfdaq/matchedepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>mfdaq - Create a new multifunction DAQ object</p> <pre><code>D = ndi.daq.system.mfdaq(NAME, THEFILENAVIGATOR)\n\n   Creates a new ndi.daq.system.mfdaq object with NAME, and FILENAVIGATOR.\n   This is an abstract class that is overridden by specific devices.\n\n    Documentation for ndi.daq.system.mfdaq/mfdaq\n       doc ndi.daq.system.mfdaq\n</code></pre> <p>mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects</p> <pre><code>CT = MFDAQ_CHANNELTYPES - channel types for ndi.daq.system.mfdaq objects\n\n   Returns a cell array of strings of supported channels of the\n   ndi.daq.system.mfdaq class. These are the following:\n\n   Channel type:       | Description:\n   -------------------------------------------------------------\n   analog_in           | Analog input channel\n   aux_in              | Auxiliary input\n   analog_out          | Analog output channel\n   digital_in          | Digital input channel\n   digital_out         | Digital output channel\n   marker              |\n\n  See also: ndi.daq.system.mfdaq/MFDAQ_TYPE\n</code></pre> <p>mfdaq_prefix - Give the channel prefix for a channel type</p> <pre><code>PREFIX = MFDAQ_PREFIX(CHANNELTYPE)\n\n   Produces the channel name prefix for a given CHANNELTYPE.\n\n  Channel type:               | MFDAQ_PREFIX:\n  ---------------------------------------------------------\n  'analog_in',       'ai'     | 'ai'\n  'analog_out',      'ao'     | 'ao'\n  'digital_in',      'di'     | 'di'\n  'digital_out',     'do'     | 'do'\n  'time','timestamp','t'      | 't'\n  'auxiliary','aux','ax',     | 'ax'\n     'auxiliary_in'           |\n  'mark', 'marker', or 'mk'   | 'mk'\n  'event' or 'e'              | 'e'\n  'metadata' or 'md'          | 'md'\n  'digital_in_event', 'de',   | 'dep'\n  'digital_in_event_pos','dep'|\n  'digital_in_event_neg','den'| 'den'\n  'digital_in_mark','dimp',   | 'dimp'\n  'digital_in_mark_pos','dim' |\n  'digital_in_mark_neg','dimn'| 'dimn'\n  'text'                      | 'tx'\n\n  See also: ndi.daq.system.mfdaq/MFDAQ_TYPE\n</code></pre> <p>mfdaq_type - Give the preferred long channel type for a channel type</p> <pre><code>TYPE = MFDAQ_TYPE(CHANNELTYPE)\n\n   Produces the preferred long channel type name for a given CHANNELTYPE.\n\n  Channel type:               | MFDAQ_TYPE:\n  ---------------------------------------------------------\n  'analog_in',       'ai'     | 'analog_in'\n  'analog_out',      'ao'     | 'analog_out'\n  'digital_in',      'di'     | 'digital_in'\n  'digital_out',     'do'     | 'digital_out'\n  'time','timestamp','t'      | 'time'\n  'auxiliary','aux','ax',     | 'auxiliary'\n     'auxiliary_in'           |\n  'mark', 'marker', or 'mk'   | 'mark'\n  'event' or 'e'              | 'event'\n\n  See also: ndi.daq.system.mfdaq/MFDAQ_PREFIX\n</code></pre> <p>ndi_daqsystem_gui_edit - function for editing an ndi.daq.system object</p> <pre><code>OBJ = NDI_DAQSYSTEM_GUI_EDIT(NDI_DAQSYSTEM_OBJ)\n\n  This function will bring up a graphical window to prompt the user to input\n  parameters that edit the NDI_DAQSYSTEM_OBJ and return a new object.\n\nHelp for ndi.daq.system.mfdaq/ndi_daqsystem_gui_edit is inherited from superclass ndi.daq.system\n</code></pre> <p>newdocument - create a new document set for ndi.daq.system objects</p> <pre><code>NDI_DOCUMENT_OBJ_SET = NEWDOCUMENT(NDI_DAQSYSTEM_OBJ)\n\n  Creates a set of documents that describe an ndi.daq.system.\n\nHelp for ndi.daq.system.mfdaq/newdocument is inherited from superclass ndi.daq.system\n</code></pre> <p>numepochs - Number of epochs of ndi.epoch.epochset</p> <pre><code>N = NUMEPOCHS(NDI_EPOCHSET_OBJ)\n\n  Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ.\n\n  See also: EPOCHTABLE\n\nHelp for ndi.daq.system.mfdaq/numepochs is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>readchannels - read the data based on specified channels</p> <pre><code>NB: because this is an abstract class, only empty records are returned\n\n   DATA = READCHANNELS(MYDEV, CHANNELTYPE, CHANNEL, TIMEREF_OR_EPOCH, T0, T1)\n\n   CHANNELTYPE is the type of channel to read\n   ('analog','digitalin','digitalout', etc)\n\n   CHANNEL is a vector with the identity of the channels to be read.\n\n   TIMEREF_OR_EPOCH is either an NDI_CLOCK object indicating the clock for T0, T1, or\n   it can be a single number, which will indicate the data are to be read from that epoch.\n\n   DATA is the data collection for specific channels\n</code></pre> <p>readchannels_epochsamples - read the data based on specified channels</p> <pre><code>DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCH ,S0, S1)\n\n   CHANNELTYPE is the type of channel to read\n\n   CHANNEL is a vector of the channel numbers to read, beginning from 1\n\n   EPOCH is the epoch number to read from.\n\n   DATA will have one column per channel.\n</code></pre> <p>readevents - read events or markers of specified channels</p> <pre><code>[TIMESTAMPS,DATA] = READEVENTS(MYDEV, CHANNELTYPE, CHANNEL, TIMEREF_OR_EPOCH, T0, T1)\n\n   CHANNELTYPE is the type of channel to read\n   ('event','marker', etc)\n\n   CHANNEL is a vector with the identity of the channel(s) to be read.\n\n   TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the clock for T0, T1, or\n   it can be a single number, which will indicate the data are to be read from that epoch.\n\n   TIMESTAMPS is an array of the timestamps read. If more than one channel is requested, then TIMESTAMPS\n   will be a cell array of timestamp arrays, one per channel.\n\n   DATA is an array of the event data. If more than one channel is requested, then DATA will be a cell array of\n   data arrays, one per channel.\n</code></pre> <p>readevents_epochsamples - read events or markers of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA, TIMEREF] = READEVENTS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCH, T0, T1)\n\n   CHANNELTYPE is the type of channel to read\n   ('event','marker', etc)\n\n   CHANNEL is a vector with the identity of the channel(s) to be read.\n\n   EPOCH is the epoch number or epochID\n\n   TIMESTAMPS is an array of the timestamps read. If more than one channel is requested, then TIMESTAMPS\n   will be a cell array of timestamp arrays, one per channel.\n\n   DATA is an is an array of the event data. For events, values are always 1. If more than one channel\n   is requested, then DATA will be a cell array of data arrays, one per channel.\n\n   TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to epoch N at time 0 as the reference.\n</code></pre> <p>removeepochtag - Remove tag(s) for an epoch</p> <pre><code>REMOVEEPOCHTAG(NDI_EPOCH_PARAM_OBJ, EPOCHNUMBER, NAME)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. Any tags with name 'NAME' will\n  be removed from the tags in the epoch EPOCHNUMBER.\n  tags in the epoch directory. If tags with the same names as those in TAG\n  already exist, they will be overwritten. If there is no epoch\n  EPOCHNUMBER, then an error is returned.\n\n  NAME can be a single string, or it can be a cell array of strings\n  (which will result in the removal of multiple tags).\n\nHelp for ndi.daq.system.mfdaq/removeepochtag is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk</p> <pre><code>NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  This function clears the internal cached memory of the epochtable, forcing it to be re-read from\n  disk at the next request.\n\n  See also: ndi.daq.system.mfdaq/EPOCHTABLE\n\nHelp for ndi.daq.system.mfdaq/resetepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>samplerate - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL</p> <pre><code>SR = SAMPLERATE(DEV, EPOCH, CHANNELTYPE, CHANNEL)\n\n  SR is an array of sample rates from the specified channels\n\n  CHANNELTYPE can be either a string or a cell array of\n  strings the same length as the vector CHANNEL.\n  If CHANNELTYPE is a single string, then it is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n</code></pre> <p>searchquery - search for an ndi.daq.system</p> <pre><code>SQ = SEARCHQUERY(NDI_DAQSYSTEM_OBJ)\n\n  Returns SQ, an ndi.query object that searches the database for the ndi.daq.system object\n\nHelp for ndi.daq.system.mfdaq/searchquery is inherited from superclass ndi.daq.system\n</code></pre> <p>session - return the ndi.session object associated with the ndi.daq.system object</p> <pre><code>EXP = SESSION(NDI_DAQSYSTEM_OBJ)\n\n  Return the ndi.session object associated with the ndi.daq.system of the\n  ndi.daq.system object.\n\nHelp for ndi.daq.system.mfdaq/session is inherited from superclass ndi.daq.system\n</code></pre> <p>set_daqmetadatareader - set the cell array of ndi.daq.metadatareader objects</p> <pre><code>NDI_DAQSYSTEM_OBJ = SET_DAQMETADATAREADER(NDI_DAQSYSTEM_OBJ, NEWDAQMETADATAREADERS)\n\n  Sets the 'daqmetadatareader' property of an ndi.daq.system object.\n  NEWDAQMETADATAREADERS should be a cell array of objects that have\n  ndi.daq.metadatareader as a superclass.\n\nHelp for ndi.daq.system.mfdaq/set_daqmetadatareader is inherited from superclass ndi.daq.system\n</code></pre> <p>setepochprobemap - Sets the epoch record of a particular epoch</p> <pre><code>SETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, EPOCHPROBEMAP, NUMBER, [OVERWRITE])\n\n  Sets or replaces the ndi.epoch.epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch\n  numbered NUMBER.  If OVERWRITE is present and is 1, then any existing epoch record is overwritten.\n  Otherwise, an error is given if there is an existing epoch record.\n\n  See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem\n\nHelp for ndi.daq.system.mfdaq/setepochprobemap is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>setepochtag - Set tag(s) for an epoch</p> <pre><code>SETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. These tags will replace any\n  tags in the epoch directory. If there is no epoch EPOCHNUMBER, then\n  an error is returned.\n\nHelp for ndi.daq.system.mfdaq/setepochtag is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>setsession - set the SESSION for an ndi.daq.system object's filenavigator (type ndi.daq.system)</p> <pre><code>NDI_DAQSYSTEM_OBJ = SETSESSION(NDI_DEVICE_OBJ, SESSION)\n\n  Set the SESSION property of an ndi.daq.system object's ndi.daq.system object\n\nHelp for ndi.daq.system.mfdaq/setsession is inherited from superclass ndi.daq.system\n</code></pre> <p>t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch</p> <pre><code>T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n</code></pre> <p>underlyingepochnodes - find all the underlying epochnodes of a given epochnode</p> <pre><code>[UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE)\n\n  Traverse the underlying nodes of a given EPOCHNODE until we get to the roots\n  (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1).\n\n  Note that the EPOCHNODE itself is returned as the first 'underlying' node.\n\n  See also: ISSYNCGRAPHROOT\n\nHelp for ndi.daq.system.mfdaq/underlyingepochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.daq.system.mfdaq.unique_id is inherited from superclass did.ido\n</code></pre> <p>verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk</p> <pre><code>B = VERIFYEPOCHPROBEMAP(NDI_DAQSYSTEM_OBJ, EPOCHPROBEMAP, EPOCH)\n\n  Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device\n  epoch EPOCH.\n\n  For the abstract class ndi.daq.system, EPOCHPROBEMAP is always valid as long as\n  EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object.\n\n  See also: ndi.daq.system.mfdaq, ndi.epoch.epochprobemap_daqsystem\n\nHelp for ndi.daq.system.mfdaq/verifyepochprobemap is inherited from superclass ndi.daq.system\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_daqsystem_image.m/","title":"CLASS ndi.daq/premature.ndi_daqsystem_image","text":"<pre><code> This is an abstract superclass of all imaging device drivers\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_daqsystem_image.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_daqsystem_image.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_daqsystem_image.m/#methods","title":"Methods","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_daqsystem_image_tiffstack.m/","title":"CLASS ndi.daq/premature.ndi_daqsystem_image_tiffstack","text":"<pre><code> ndi_daqsystem_image_tiffstack is a driver used to read images from a tif\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_daqsystem_image_tiffstack.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_daqsystem_image_tiffstack.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_daqsystem_image_tiffstack.m/#methods","title":"Methods","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_image.m/","title":"CLASS ndi.daq/premature.ndi_image","text":"<pre><code>  An abstract class defining the main functions of the device image drivers. (frame and numframe)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_image.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_image.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_image.m/#methods","title":"Methods","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_image_tiffstack.m/","title":"CLASS ndi.daq/premature.ndi_image_tiffstack","text":"<pre><code>  function d = sAPI_image_tiffstack(name,thefilenavigator, exp)\n\n  sAPI_image_tiffstack_struct = struct([]);\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_image_tiffstack.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_image_tiffstack.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdaq/premature/ndi_image_tiffstack.m/#methods","title":"Methods","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdata/evaluate_fitcurve.m/","title":"ndi.data.evaluate_fitcurve","text":"<pre><code>  EVALUATE_FITCURVE - evaluate a fitcurve (the standard fitcurve type)\n\n  Y = EVALUATE_FITCURVE(FITCURVE_DOC, X, ...)\n\n  Evaluate an FITCURVE document function for indicated values of X.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/binarydoc.m/","title":"CLASS ndi.database.binarydoc","text":"<pre><code>  NDI_BINARYDOC - a binary file class that handles reading/writing\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/binarydoc.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/binarydoc.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/binarydoc.m/#methods","title":"Methods","text":"Method Description addlistener addlistener  Add listener for event. binarydoc a binary file class that handles reading/writing delete close an ndi.database.binarydoc and delete its handle eq == (EQ)   Test handle equality. fclose Close one or all open files feof Test for end of file findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. fopen Open file or obtain information about open files fread Read data from binary file fseek Move file position pointer to specified position in file ftell Current location of file position pointer in file fwrite Write data to binary file ge &gt;= (GE)   Greater than or equal relation for handles. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event."},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/binarydoc.m/#methods-help","title":"Methods help","text":"<p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.database.binarydoc, matlab.metadata.Property, events\n\nHelp for ndi.database.binarydoc/addlistener is inherited from superclass handle\n</code></pre> <p>binarydoc - a binary file class that handles reading/writing</p> <pre><code>Documentation for ndi.database.binarydoc/binarydoc\n       doc ndi.database.binarydoc\n</code></pre> <p>delete - close an ndi.database.binarydoc and delete its handle</p> <pre><code>DELETE(NDI_BINARYDOC_OBJ)\n\n  Closes an ndi.database.binarydoc (if necessary) and then deletes the handle.\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/GE, NDI.DATABASE.BINARYDOC/GT, NDI.DATABASE.BINARYDOC/LE, NDI.DATABASE.BINARYDOC/LT, NDI.DATABASE.BINARYDOC/NE\n\nHelp for ndi.database.binarydoc/eq is inherited from superclass handle\n</code></pre> <p>fclose - Close one or all open files</p> <pre><code>This MATLAB function closes an open file.\n\n    Syntax\n      fclose(fileID)\n      fclose('all')\n      status = fclose(___)\n\n    Input Arguments\n      fileID - File identifier\n        integer\n\n    Examples\n      openExample('matlab/ReadFileEx28668493Example')\n\n    See also ferror, fopen, frewind, fseek, ftell, feof, fscanf, fprintf,\n      fread, fwrite\n\n    Introduced in MATLAB before R2006a\n    Documentation for fclose\n       doc fclose\n</code></pre> <p>feof - Test for end of file</p> <pre><code>This MATLAB function returns a 1 if the end of the file specified by\n    fileID was reached by a previous operation.\n\n    Syntax\n      status = feof(fileID)\n\n    Input Arguments\n      fileID - File identifier\n        integer\n\n    Examples\n      openExample('matlab/ReadUntilEndOfFileEx74121020Example')\n\n    See also fclose, ferror, fopen, frewind, fseek, ftell\n\n    Introduced in MATLAB before R2006a\n    Documentation for feof\n       doc feof\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATABASE.BINARYDOC\n\nHelp for ndi.database.binarydoc/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.database.binarydoc, ndi.database.binarydoc/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.database.binarydoc/findprop is inherited from superclass handle\n</code></pre> <p>fopen - Open file or obtain information about open files</p> <pre><code>This MATLAB function opens the file, filename, for binary read access,\n    and returns an integer file identifier equal to or greater than 3.\n\n    Syntax\n      fileID = fopen(filename)\n      fileID = fopen(filename,permission)\n      fileID = fopen(filename,permission,machinefmt,encodingIn)\n      [fileID,errmsg] = fopen(___)\n\n      filename = fopen(fileID)\n      [filename,permission,machinefmt,encodingOut] = fopen(fileID)\n\n    Input Arguments\n      filename - Name of file to open\n        string scalar | character vector\n      permission - File access type\n        'r' (default) | 'w' | 'a' | 'r+' | 'w+' | 'a+' | 'A' | 'W' | ...\n      machinefmt - Order for reading or writing bytes or bits\n        'n' (default) | 'b' | 'l' | 's' | 'a' | ...\n      encodingIn - Character encoding\n        'UTF-8' | 'ISO-8859-1' | 'windows-1251' | 'windows-1252' | ...\n      fileID - File identifier of an open file\n        integer\n\n    Examples\n      web /Applications/MATLAB_R2024b.app/help/matlab/ref/fopen.html#btrnibo-2\n      web /Applications/MATLAB_R2024b.app/help/matlab/ref/fopen.html#btrnoom-1\n      web /Applications/MATLAB_R2024b.app/help/matlab/ref/fopen.html#btrnoon-1\n      web /Applications/MATLAB_R2024b.app/help/matlab/ref/fopen.html#btrnooo-1\n\n    See also fclose, openedFiles, ferror, fseek, ftell, feof, fscanf,\n      fprintf, fread, fwrite, frewind\n\n    Introduced in MATLAB before R2006a\n    Documentation for fopen\n       doc fopen\n</code></pre> <p>fread - Read data from binary file</p> <pre><code>This MATLAB function reads data from an open binary file into column\n    vector A and positions the file pointer at the end-of-file marker.\n\n    Syntax\n      A = fread(fileID)\n      A = fread(fileID,sizeA)\n      A = fread(fileID,precision)\n      A = fread(fileID,sizeA,precision)\n      A = fread(___,skip)\n      A = fread(___,machinefmt)\n      [A,count] = fread(___)\n\n    Input Arguments\n      fileID - File identifier\n        integer\n      sizeA - Dimensions of output array\n        Inf (default) | integer | two-element row vector\n      precision - Class and size of values to read\n        'uint8=&gt;double' (default) | character vector or string scalar\n      skip - Number of bytes to skip\n        0 (default) | scalar\n      machinefmt - Order for reading bytes\n        'n' (default) | 'b' | 'l' | 's' | 'a' | ...\n\n    Output Arguments\n      A - File data\n        column vector | matrix\n      count - Number of characters read\n        scalar\n\n    Examples\n      openExample('matlab/ReadEntireFileofuint8DataExample')\n      openExample('matlab/ReadEntireFileofDoublePrecisionDataExample')\n      openExample('matlab/ReadSelectedRowsorColumnsfromFileExample')\n      openExample('matlab/ReadDigitsofBinaryCodedDecimalValuesExample')\n\n    See also fclose, fgetl, fopen, fscanf, fprintf, fwrite, fseek, ftell\n\n    Introduced in MATLAB before R2006a\n    Documentation for fread\n       doc fread\n</code></pre> <p>fseek - Move file position pointer to specified position in file</p> <pre><code>This MATLAB function sets the file position indicator offset bytes from\n    origin in the specified file.\n\n    Syntax\n      fseek(fileID,offset,origin)\n      status = fseek(___)\n\n    Input Arguments\n      fileID - File identifier\n        integer\n      offset - Number of bytes\n        integer\n      origin - Starting location\n        integer | character vector | string\n\n    Examples\n      openExample('matlab/SeekToNewPositionInFileEx03609470Example')\n\n    See also fclose, feof, ferror, fopen, frewind, ftell, fscanf, fprintf,\n      fread, fwrite\n\n    Introduced in MATLAB before R2006a\n    Documentation for fseek\n       doc fseek\n</code></pre> <p>ftell - Current location of file position pointer in file</p> <pre><code>This MATLAB function returns the current location of the position\n    pointer in the specified file.\n\n    Syntax\n      position = ftell(fileID)\n\n    Input Arguments\n      fileID - File identifier\n        integer\n\n    Examples\n      openExample('matlab/FindCurrentFilePositionEx71849017Example')\n\n    See also fclose, feof, ferror, fopen, frewind, fseek, fscanf, fprintf,\n      fread, fwrite\n\n    Introduced in MATLAB before R2006a\n    Documentation for ftell\n       doc ftell\n</code></pre> <p>fwrite - Write data to binary file</p> <pre><code>This MATLAB function writes the elements of array A as 8-bit unsigned\n    integers to a binary file in column order.\n\n    Syntax\n      fwrite(fileID,A)\n      fwrite(fileID,A,precision)\n      fwrite(fileID,A,precision,skip)\n      fwrite(fileID,A,precision,skip,machinefmt)\n\n      count = fwrite(___)\n\n    Input Arguments\n      fileID - File identifier\n        integer | 1 | 2\n      A - Data to write\n        numeric array | character array | string array\n      precision - Class and size of values to write\n        'uint8' (default) | character vector | string scalar\n      skip - Number of bytes to skip\n        0 (default) | scalar\n      machinefmt - Order for writing bytes\n        'n' (default) | 'b' | 'l' | 's' | 'a'\n\n    Examples\n      openExample('matlab/WriteUint8DataToFileExample')\n      openExample('matlab/Write4byteIntegersToFileExample')\n      openExample('matlab/AppendDataToBinaryFileExample')\n      openExample('matlab/WriteBinaryFileWithBigendianByteOrderingExample')\n\n    See also fclose, ferror, fopen, fprintf, fread, fscanf, fseek, ftell\n\n    Introduced in MATLAB before R2006a\n    Documentation for fwrite\n       doc fwrite\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/EQ, NDI.DATABASE.BINARYDOC/GT, NDI.DATABASE.BINARYDOC/LE, NDI.DATABASE.BINARYDOC/LT, NDI.DATABASE.BINARYDOC/NE\n\nHelp for ndi.database.binarydoc/ge is inherited from superclass handle\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/EQ, NDI.DATABASE.BINARYDOC/GE, NDI.DATABASE.BINARYDOC/LE, NDI.DATABASE.BINARYDOC/LT, NDI.DATABASE.BINARYDOC/NE\n\nHelp for ndi.database.binarydoc/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/DELETE\n\nHelp for ndi.database.binarydoc/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/EQ, NDI.DATABASE.BINARYDOC/GE, NDI.DATABASE.BINARYDOC/GT, NDI.DATABASE.BINARYDOC/LT, NDI.DATABASE.BINARYDOC/NE\n\nHelp for ndi.database.binarydoc/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.database.binarydoc, matlab.metadata.Property, events\n\nHelp for ndi.database.binarydoc/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/EQ, NDI.DATABASE.BINARYDOC/GE, NDI.DATABASE.BINARYDOC/GT, NDI.DATABASE.BINARYDOC/LE, NDI.DATABASE.BINARYDOC/NE\n\nHelp for ndi.database.binarydoc/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/EQ, NDI.DATABASE.BINARYDOC/GE, NDI.DATABASE.BINARYDOC/GT, NDI.DATABASE.BINARYDOC/LE, NDI.DATABASE.BINARYDOC/LT\n\nHelp for ndi.database.binarydoc/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATABASE.BINARYDOC, NDI.DATABASE.BINARYDOC/ADDLISTENER, NDI.DATABASE.BINARYDOC/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.database.binarydoc/notify is inherited from superclass handle\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/ingestion_help.m/","title":"CLASS ndi.database.ingestion_help","text":"<pre><code>  A class that provides helper methods for ingesting raw data files into the database\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/ingestion_help.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/ingestion_help.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/ingestion_help.m/#methods","title":"Methods","text":"Method Description ingest create new documents that produce the ingestion of an ingestion_help_obj ingestion_class the name of the ingestion class for this object ingestion_help helper class with methods to help ingest raw data files"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/ingestion_help.m/#methods-help","title":"Methods help","text":"<p>ingest - create new documents that produce the ingestion of an ingestion_help_obj</p> <pre><code>[DOCS_OUT, DOC_IDS_REMOVE] = INGEST(INGESTION_HELP_OBJ)\n\n  Perform the actions necessary to make a database-ingested representation of\n  an INGESTION_HELP_OBJ object.\n\n  DOCS_OUT is a cell array of ndi.document objects that comprise the new representation.\n  DOCS_IDS_REMOVE are a cell array of ndi.document id numbers that should be removed\n  (or not copied) from the existing database when creating the ingested version.\n\n  In the abstract class, an empty cell array is returned for all outputs.\n</code></pre> <p>ingestion_class - the name of the ingestion class for this object</p> <pre><code>CNAME = INGESTION_CLASS(INGESTION_HELP_OBJ)\n\n  Returns the class name of the object that should be created if this\n  object class is ingested into the database (and won't have access to any raw\n  data).\n\n  For the base class, this simply returns empty.\n</code></pre> <p>ingestion_help - helper class with methods to help ingest raw data files</p> <pre><code>OBJ = ndi.database.ingestion_help()\n\n    Documentation for ndi.database.ingestion_help/ingestion_help\n       doc ndi.database.ingestion_help\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bapp/%2Bdataset_viewer/%2Butility/listLocalDatasets.m/","title":"ndi.database.app.dataset_viewer.utility.listLocalDatasets","text":"<pre><code>  listLocalDatasets Load table (inventory) of local datasets.\n\n    Syntax:\n    datasets = listLocalDatasets() returns a table containing details about\n    local datasets. The function reads information from a session table file\n    and extracts dataset names based on the last folder name in the dataset\n    path.\n\n    Output:\n    datasets - A table with columns representing dataset details such as\n               the dataset path and name.\n\n    Example:\n    datasets = ndi.database.dataset_viewer.utility.listLocalDatasets();\n    disp(datasets);\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bapp/%2Bdataset_viewer/%2Butility/listRemoteDatasets.m/","title":"ndi.database.app.dataset_viewer.utility.listRemoteDatasets","text":"<pre><code>  Note: Function is not complete\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/copy_session_to_dataset.m/","title":"ndi.database.fun.copy_session_to_dataset","text":"<pre><code>  COPY_SESSION_TO_DATASET - copy an ingested ndi.session object to ndi.dataset object\n\n  [B,ERRMSG] = COPY_SESSION_TO_DATASET(NDI_SESSION_OBJ, NDI_DATASET_OBJ)\n\n  Copy the database documents of an ndi.session object to an ndi.dataset object.\n\n  B is 1 if the operation succeeds and 0 otherwise. The copying process\n  temporarily requires 2 times the total disk space occupied by NDI_SESSION_OBJ,\n  and, long-term, requires 1 times the total disk space occupied by\n  NDI_SESSION_OBJ, which is stored in NDI_DATASET_OBJ.\n\n  If\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/copydocfile2temp.m/","title":"ndi.database.fun.copydocfile2temp","text":"<pre><code>  COPYDOCFILE2TEMP - copy a file from an ndi.document to the file system\n\n  [TNAME,TNAME_WITHOUT_EXT] = COPYDOCFILE2TEMP(DOC, S, FILENAME, EXTENSION)\n\n  Copies a file associated with an ndi.document to the file system.\n\n  Note: This function (at present) assumes the entire file can be read into\n  memory at once.\n\n  Inputs:\n    DOC - the ndi.document that has the file to be copied\n    S   - the ndi.session that the document belongs to\n    FILENAME - the file of DOC to be copied\n    EXTENSION - the extension of the filename. Should include the leading period.\n\n  Output:\n    TNAME - the temporary filename that is created.\n    TNAME_WITHOUT_EXT - the temporary filename without the extension.\n\n  The calling program should delete the file TNAME when finished using delete(TNAME).\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/createGenBankControlledVocabulary.m/","title":"ndi.database.fun.createGenBankControlledVocabulary","text":"<pre><code>  CREATEGENBANKCONTROLLEDVOCABULARY - create the controlled vocabulary dictionary for animals\n\n  ndi.database.fun.createGenBankControlledVocabulary(DIRNAME, ...)\n\n  This function examines the name file 'names.dmp' and node file 'nodes.dmp' from\n  the GenBank taxonomy database in the directory DIRNAME. It generates a new text file\n  called 'GenBankControlledVocabulary.tsv' with the following structure:\n\n  Header row:\n    'Scientific_Name&lt;tab&gt;GenBank_Common_Name&lt;tab&gt;Synonyms&lt;tab&gt;&lt;Other_Common_Name'\n    and then 1 entry per organism.\n\n  This function also takes name/value pairs that modify the behavior.\n  Parameter (default)     | Description\n  ---------------------------------------------------------------------------\n  root_node ('Bilateria') | Root scientific name to start with; usually 'Bilateria' to\n                          |  include most research organisms but not cell lines,\n                          |  bacteria, viruses, etc (everything not 'Bilateria').\n                          |  Use 'Root' for everything.\n  nodefile ('nodes.dmp')  | File name of the node file within DIRNAME\n  namefile ('names.dmp')  | File name of the name file with DIRNAME\n  outname (...            | Output filen name of the file written to disk\n  ['GenBankControlled'... |\n    'Vocabulary.tsv'])\n\n  The taxonomy data is available at https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump.tar.gz.\n\n  This function usually takes a couple of hours to run and shows 3 progress bars\n  (the first one is faster than the second).\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/createNIFbrainareas.m/","title":"ndi.database.fun.createNIFbrainareas","text":"<pre><code>  CREATENIFBRAINAREAS - create a list of allowable brain areas from the NIF-Ontology\n\n  BA = ndi.database.fun.createNIFbrainareas(...)\n\n  Creates a list of 'controlled' brain area labels and the corresponding nodes in the NIF-Ontology.\n\n  Traces all areas that make up a part of the UBERON node 'nervous system', excluding those in the\n  first level of depth (which are all relatively vague descriptors). This is then written to a file\n  'NIFBrainAreaControlledVocabulary.tsv' with a string id that describes the NIF-Ontology node ID\n  and a string lbl that describes the NIF-Ontology label:\n\n  Header row:\n    'ID&lt;tab&gt;LABEL&lt;tab&gt;Synonyms&lt;tab&gt;&lt;Other_Common_Name'\n    and then 1 entry per anatomical node.\n\n  This function also takes name/value pairs that modify the behavior.\n  Parameter (default)     | Description\n  ---------------------------------------------------------------------------\n  root ('UBERON:'...      | Root node for establishing the controlled vocabulary.\n   '0001016')             |  (Default is 'nervous system' in Uberon ontology.)\n  depth (1000)            | How deep past \"nervous system\" to look\n  depth_exclude (1)       | The depths to exclude from the list\n  exclude_ontologies ({...| Ontologies to exclude\n   'CL'})                 |\n  outname (...            | Output filen name of the file written to disk\n  ['NIFBrainAreaContr'... |\n   'olledVocabulary.tsv'])|\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/create_new_database.m/","title":"ndi.database.fun.create_new_database","text":"<pre><code>  c = uicontrol('Style','edit');\n  c.Callback = @userInput;\n      function userInput(src, event)\n          val = c.String;\n          disp(['input: ' val]);\n      end\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/database2json.m/","title":"ndi.database.fun.database2json","text":"<pre><code>  DATABASE2JSON - output contents of an ndi.session database to JSON files\n\n  DATABASE2JSON(S, OUTPUT_PATH)\n\n  Finds all documents in the database of an ndi.session object S\n  and writes them to the folder OUTPUT_PATH (full path).\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/databasehierarchyinit.m/","title":"ndi.database.fun.databasehierarchyinit","text":"<pre><code>  DATABASEHIERARCHYINIT - Initializes the list of databases to try\n\n  ndi.database.fun.databasehierarchyinit\n\n  Use TYPE ndi.probe.fun.probetype2objectinit to see the structure\n  Question: What is the above command?\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/dataset_metadata.m/","title":"ndi.database.fun.dataset_metadata","text":"<pre><code>  DATASET_METADATA - opens a MATLAB app for users to enter metadata\n  information\n\n  ndi.database.fun.dataset_metadata(S, NEW)\n\n  Inputs:\n    S - an ndi.session object\n    NEW - create a new metadata form enter 1. Otherwise enter 0.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/docs2graph.m/","title":"ndi.database.fun.docs2graph","text":"<pre><code>  DOCS2GRAPH - create a directed graph from a cell array of NDI_DOCUMENT objects\n\n  [G,NODES,MDIGRAPH] = ndi.database.fun.docs2graph(NDI_DOCUMENT_OBJ)\n\n  Given a cell array of ndi.document objects, this function creates a directed graph with the\n  'depends_on' relationships. If an object A 'depends on' another object B, there will be an edge from B to A.\n  The adjacency matrix G, the node names (document ids) NODES, and the Matlab directed graph object MDIGRAPH are\n  all returned.\n\n  See also: DIGRAPH\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/docs_from_ids.m/","title":"ndi.database.fun.docs_from_ids","text":"<pre><code>  DOCS_FROM_IDS - read ndi.document objects given an array of IDs in a single query\n\n  DOCS = DOCS_FROM_IDS(D_OR_S, DOCUMENT_IDS)\n\n  Retrieve a set of documents that correspond to a cell array of DOCUMENT_IDS.\n  This function is faster than similar code that searches for each document one\n  at a time because it combines the search into a single query.\n\n  D_OR_S is an ndi.dataset or ndi.session object.\n\n  DOCS is a cell array the same size as DOCUMENT_IDS. If the document is found, it\n  is provided in DOCS{i}. Otherwise, DOCS{i} is empty.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/extract_docs_files.m/","title":"ndi.database.fun.extract_docs_files","text":"<pre><code>  EXTRACT_DOC_FILES - extract a copy of all ndi.documents and files to path\n\n  [DOCS,TARGET_PATH] = EXTRACT_DOC_FILES(NDI_SESSION_OBJ, TARGET_PATH)\n\n  Copies the ndi.document objects from an ndi.session object or an\n  ndi.dataset object. The files associated with the documents DOCS\n  will be placed in the directory TARGET_PATH.\n\n  If TARGE_TPATH is not given, then a subdirectory inside\n  ndi.common.PathConstants.TempFolder is used and the path is returned as\n  an output.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/find_ingested_docs.m/","title":"ndi.database.fun.find_ingested_docs","text":"<pre><code>  FIND_INGESTED_DOCS - find ingested documents from an ndi.session\n\n  D = FIND_INGESTED_DOCS(S)\n\n  Return all documents in ndi.session S that correspond to ingested data.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/findallantecedents.m/","title":"ndi.database.fun.findallantecedents","text":"<pre><code>  FINDALLANTECEDENTS - find documents that have the provided documents as dependencies\n\n  [D] = ndi.database.fun.findallantecedents(E, VISITED, DOC1, DOC2, ...)\n\n  Searches the database of session or dataset E and returns all documents for which\n  DOC1, DOC2, etc have a dependency. That is, this function crawls up the list of\n  'depends_on' fields to find all documents that DOC1, DOC2 etc. depend on.\n  If any DOCS do not need to be searched, provide them in VISITED.  Otherwise, provide\n  empty for VISITED.\n\n  D is always a cell array of NDI_DOCUMENTS (perhaps empty, {}).\n\n  See also: ndi.database.fun.findalldependencies()\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/findalldependencies.m/","title":"ndi.database.fun.findalldependencies","text":"<pre><code>  FINDALLDEPENDENCIES- find documents that have dependencies on provided documents\n\n  [D] = ndi.database.fun.findalldependencies(E, VISITED, DOC1, DOC2, ...)\n\n  Searches the database of session E and returns all documents that have a\n  dependency ('depends_on') field for which the 'value' field corresponds to the\n  id of DOC1 or DOC2, etc. If any DOCS do not need to be searched, provide them in VISITED.\n  Otherwise, provide empty for VISITED.\n\n  D is always a cell array of NDI_DOCUMENTS (perhaps empty, {}).\n\n  See also: ndi.database.fun.findallantecedents()\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/finddocs_elementEpochType.m/","title":"ndi.database.fun.finddocs_elementEpochType","text":"<pre><code> FINDDOCS_ELEMENTEPOCHTYPE Searches for documents in the NDI database.\n\n    Syntax:\n        docs = FINDDOCS_ELEMENTEPOCHTYPE(sessionObj,elementID,epochID,documentType)\n\n    Description:\n        This function constructs database queries using `ndi.query` based\n        on the provided session object, element ID, epoch ID, and document\n        type. It then combines these queries and executes a search to \n        retrieve matching documents.\n\n    Input Arguments:\n        S (ndi.session | ndi.dataset object)\n        elementID (char vector | string scalar) - The ndi.element id\n        epochID (char vector | string scalar) - The ndi.element epoch_id\n        documentType (char vector | string scalar) - The type of document\n            to search for (e.g., 'spectrogram').\n\n    Output Arguments:\n        docs - The document(s) matching the search criteria.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/finddocs_missing_dependencies.m/","title":"ndi.database.fun.finddocs_missing_dependencies","text":"<pre><code>  FINDDOCS_MISSING_DEPENDENCIES - find documents that have dependencies on documents that do not exist\n\n  D = ndi.database.fun.finddocs_missing_dependencies(E)\n\n  Searches the database of session E and returns all documents that have a\n  dependency ('depends_on') field for which the 'value' field does not\n  correspond to an existing document.\n\n  The following form:\n\n  D = ndi.database.fun.finddocs_missing_dependencies(E, NAME1, NAME2, ...)\n\n  works similarly except that it only examines variables with depends_on\n  fields with names NAME1, NAME2, etc.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/lookup_uberon_term.m/","title":"ndi.database.fun.lookup_uberon_term","text":"<pre><code> LOOKUP_UBERON_TERM  Looks up a term in the UBERON ontology using the OLS API.\n\n    [labels, docs] = LOOKUP_UBERON_TERM(term_name, ...) \n    searches for the specified term in the UBERON ontology and returns \n    information about the matching terms.\n\n    Inputs:\n        term_name: The name or description of the term to search for.\n        ontology: The ontology to search in (default: 'uberon').\n        type: The type of term to search for (default: 'class').\n        exact: Whether to perform an exact match (default: false).\n        queryFields: The field to search in (default: 'label').\n\n    Outputs:\n        labels: A cell array of labels for the matching terms.\n        docs: The complete response.response.docs structure from the OLS API.\n\n    Example:\n        [labels, docs] = lookup_uberon_term('lateral gastric nerve');\n        [labels, docs] = lookup_uberon_term('heart', 'queryFields','description');\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/ndi_document2ndi_object.m/","title":"ndi.database.fun.ndi_document2ndi_object","text":"<pre><code>  NDI_DOCUMENT2NDI_OBJECT - create an NDI object from an NDI_DOCUMENT\n\n  O = ndi.database.fun.ndi_document2ndi_object(NDI_DOCUMENT_OBJ, NDI_SESSION_OBJ)\n\n  Create an NDI object O from an ndi.document object and a related\n  ndi.session object.\n\n  ndi.document can also be an ndi.document ID number that will be looked up\n  in the session.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/ndicloud_ontology_lookup.m/","title":"ndi.database.fun.ndicloud_ontology_lookup","text":"<pre><code>  NDICLOUD_ONTOLOGY_LOOKUP - look up an entry in NDI Cloud Ontology (deprecated)\n\n  NOTE: deprecated, use ndi.ontology.lookup() now\n\n  [ITEM] = NDICLOUD_ONTOLOGY_LOOKUP('field',value)\n\n  Look up entries in the NDI Cloud Ontology.\n\n  Search for 'Name','Identifier', or 'Description'. This function\n  only finds exact matches.\n\n\n  Example:\n    item = ndi.database.fun.ndicloud_ontology_lookup(...\n      'Name','Left eye view blocked');\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/openMINDSobj2ndi_document.m/","title":"ndi.database.fun.openMINDSobj2ndi_document","text":"<pre><code>  OPENMINDSOBJ2NDI_DOCUMENT - openMinds objects to set of ndi.document objects\n\n  D = ndi.database.fun.openMINDSobj2ndi_document(OPENMINDS_OBJ, SESSION_ID, [DEPENDENCY_TYPE], [DEPENDENCY_VALUE])\n\n  Convert a cell array of openMINDS objects to a set of ndi.document objects.\n  D is a cell array of ndi.document objects. If the document is requested to be of a particular\n  DEPENDENCY_TYPE ('subject', 'element'), then the corresponding dependency is set to\n  DEPENDENCY_VALUE.\n\n  Example 1:\n    p = personWithTwoAffiliations(); % openMINDS library function\n    session_id = S.id(); % get the id of an ndi.session S\n    d = ndi.database.fun.openMINDSobj2ndi_document(p, session_id);\n\n  Example 2:\n    s = openminds.controlledterms.Species('name','Mustela putorius furo','preferredOntologyIdentifier','NCBI:txid9669');\n    session_id = S.id(); % get the id of an ndi.session S\n    subject_docs = S.database_search(ndi.query('','isa','subject'));\n    d = ndi.database.fun.openMINDSobj2ndi_document(s, session_id, 'subject', subject_docs{1}.id());\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/openMINDSobj2struct.m/","title":"ndi.database.fun.openMINDSobj2struct","text":"<pre><code>  OPENMINDSOBJ2STRUCT - convert an openMINDS object to a Matlab structure for creating an NDI document\n\n  S = ndi.database.fun.openMINDSobj2struct(OPENMINDSOBJ)\n\n  Given a cell array of openminds objects, returns a set of Matlab structures for each object.\n\n  Requires:  https://github.com/openMetadataInitiative/openMINDS_MATLAB\n\n  Example:\n   p = personWithTwoAffiliations();\n   s = ndi.database.fun.openMINDSobj2struct(p);\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/opendatabase.m/","title":"ndi.database.fun.opendatabase","text":"<pre><code>  OPENDATABASE - open the database associated with an session\n\n  DB = ndi.database.fun.opendatabase(DATABASE_PATH, SESSION_UNIQUE_REFERENCE)\n\n  Searches the file path DATABASE_PATH for any known databases\n  in NDI_DATABASEHIERACHY. If it finds a database of subtype ndi.database,\n  then it is opened and returned in DB.\n\n  If it finds no databases, then it tries to create a new database following\n  the order in the hierarchy.\n\n  Otherwise, DB is empty.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/plotinteractivedocgraph.m/","title":"ndi.database.fun.plotinteractivedocgraph","text":"<pre><code>\n  ndi.database.fun.plotinteractivedocgraph(DOCS, G, MDIGRAPH, NODES, LAYOUT,INTERACTIVE)\n\n  Given a cell array of NDI_DOCUMENTs DOCS, a connectivity matrix\n  G, a DIGRAPH object MDIGRAPH, a cell array of node names NODES,\n  and a type of DIGRAPH/PLOT layout LAYOUT, this plots a graph\n  of the graph of the NDI_DOCUMENTS. Usually, G, MDIGRAPH, and NODES\n  are the output of ndi.database.fun.docs2graph\n\n  If INTERACTIVE is 1, then the plot is made interactive, in that the\n  closest node to any clicked point will be displayed on the command line,\n  and a global variable 'clicked_node' will be set to the ndi.document of\n  the closest node to the clicked point. The user should click nearby but\n  not directly on the node to reveal it.\n\n  If INTERACTIVE is 0, then some data about each document node is shown as a data\n  tip when the user hovers over the node.\n\n  Example values of LAYOUT include 'force', 'layered', 'auto', and\n  others. See HELP DIGRAPH/PLOT for all options.\n\n  See also: DIGRAPH/PLOT, ndi.database.fun.docs2graph\n\n  Example: % Given session E, plot a graph of all documents.\n    docs = E.database_search({'document_class.class_name','(.*)'});\n    [G,nodes,mdigraph] = ndi.database.fun.docs2graph(docs);\n    ndi.database.fun.plotinteractivedocgraph(docs,G,mdigraph,nodes,'layered');\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/projectvardef.m/","title":"ndi.database.fun.projectvardef","text":"<pre><code>  PROJECTVARDEF - shorthand function for building an 'projectvar' document\n\n  PVD = ndi.database.fun.projectvardef(NAME, TYPE, DESCRIPTION, DATA)\n\n  Makes a cell array definition of the fields for an 'projectvar' document.\n\n  Creates a set of name/value pairs in a 1x4 cell list:\n  Name:                   | Value\n  ------------------------------------------------------\n  'base.name'             | NAME\n  'projectvar.type'       | TYPE\n  'projectvar.description'| DESCRIPTION\n  'projectvar.data'       | DATA\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/queryNCIm.m/","title":"ndi.database.fun.queryNCIm","text":"<pre><code>  queryNCIm Queries the NCI Metathesaurus API.\n\n    data = queryNCIm(term) sends a request to the NCI\n    Metathesaurus API to search for the given term and returns the \n    response data.\n\n    Inputs:\n        term: The search term (string).\n\n    Output:\n        data: The API response data (struct).\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/readGenBankNames.m/","title":"ndi.database.fun.readGenBankNames","text":"<pre><code>  READGENBANKNAMES - read the GenBank names from the 'names.dmp' file\n\n  GENBANK_NAMES = ndi.database.fun.readGenBankNames(FILENAME)\n\n  Given a 'names.dmp' file from a GenBank taxonomy data dump,\n  this function produces a Matlab structure with the following fields:\n\n  fieldname            | Description\n  -----------------------------------------------------------------\n  genbank_commonname   | The genbank common name of the organism\n                       |   (cell array of strings, 1 entry per node)\n                       |   genbank_commonname{i} is the entry for node i.\n  scientific_name      | The genbank scientific name\n                       |   (cell array of strings, 1 entry per node)\n                       |   scientific_name{i} is the entry for node i.\n  synonym              | A cell array of strings with scientific name synonyms\n                       |   (cell array of strings, potentially many entries per node)\n                       |   synonym{i}{j} is the jth synonym for node i\n  other_commonname     | A cell array of strings with the other common names\n                       |   (cell array of strings, potentially many entries per node)\n                       |   other_commonname{i}{j} is the jth other common name for node i\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/readGenBankNodes.m/","title":"ndi.database.fun.readGenBankNodes","text":"<pre><code>  READGENBANKNODES - read the node tree from GenBank data dump\n\n  G = ndi.database.fun.readGenBankNodes(FILENAME)\n\n  Given a 'nodes.dmp' file from a GenBank taxonomy data dump,\n  this function produces a sparse connectivity matrix G such that\n  G(i,j) = 1 iff node number i is a parent of node j.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/read_presentation_time_structure.m/","title":"ndi.database.fun.read_presentation_time_structure","text":"<pre><code>  READ_PRESENTATION_TIME_STRUCTURE - read the binary file from N0 to N1 that contains\n  presentation time structure information and output it to a struct. If N0\n  and N1 are not provided, return all the entries.\n\n  [HEADER,PRESENTATION_TIME] = ndi.database.fun.read_presentation_time_structure(FILENAME, N0, N1)\n\n  Inputs:\n    FILENAME - a string representing the file name of the binary file\n    N0 -  an integer representing the starting entry to read the data\n    N1 - an integer representing the ending entry to read the data\n\n  Outputs:\n    HEADER - description of the data\n    PRESENTATION_TIME - presentation time structure data\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/readtablechar.m/","title":"ndi.database.fun.readtablechar","text":"<pre><code>  readtablechar - read a table from a character array\n\n  t = readtablechar(C,EXT, ...)\n\n  Read a Matlab table object from a character array C that would have the file\n  extension EXT if it were a file. Passes extra arguments\n  to readtable() so that all the arguments to readtable() can be used to\n  readtablechar.\n\n  Example:\n    t = array2table(rand(10,3))\n    c = ndi.database.fun.writetablechar(t,...\n       'Delimiter','\\t','WriteVariableNames',false);\n    t2 = ndi.database.fun.readtablechar(c,'.txt','Delimiter','\\t');\n    diffs = abs(t{:,:}-t2{:,:});\n    does_it_match = all(diffs(:)&lt;1e-15) % does it meet tolerance?\n\n  See also: writetable, readtable, ndi.database.fun.writetablechar\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/uberon_ontology_lookup.m/","title":"ndi.database.fun.uberon_ontology_lookup","text":"<pre><code>  UBERON_ONTOLOGY_LOOKUP - look up an entry in NDI Cloud Ontology\n\n  [ITEM] = UBERON_ONTOLOGY_LOOKUP('field',value)\n\n  Look up entries in the UBERON ontology\n\n  This is current a placeholder to help us look up terms we've requested\n  but that are not there yet.\n\n  Search for 'Name','Identifier', or 'Description'. This function\n  only finds exact matches.\n\n  Example:\n    item = ndi.database.fun.uberon_ontology_lookup(...\n      'Name','lateral ventricular nerve (sensu Cancer borealis)');\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/write_presentation_time_structure.m/","title":"ndi.database.fun.write_presentation_time_structure","text":"<pre><code>  WRITE_PRESENTATION_TIME_STRUCTURE - write the presentation time structure to a binary file\n\n  ndi.database.fun.write_presentation_time_structure(FILENAME,PRESENTATION_TIME)\n\n  Inputs:\n    FILENAME - a string representing the file name of the binary file\n    PRESENTATION_TIME -  presentation time structure data\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bfun/writetablechar.m/","title":"ndi.database.fun.writetablechar","text":"<pre><code>  writetablechar - write a table to a character array\n\n  C = writetablechar(T, ...)\n\n  Write a Matlab table object to a character array. Passes extra arguments\n  to writetable() so that all the arguments to writetable() can be used to\n  writetablechar.\n\n  Example:\n    t = array2table(rand(10,3))\n    c = ndi.database.fun.writetablechar(t,...\n       'Delimiter','\\t','WriteVariableNames',false);\n    t2 = ndi.database.fun.readtablechar(c,'.txt','Delimiter','\\t')\n    diffs = abs(t{:,:}-t2{:,:});\n    does_it_match = all(diffs(:)&lt;1e-15) % does it meet tolerance?\n\n  See also: writetable, readtable, ndi.database.fun.readtablechar\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bbinarydoc/matfid.m/","title":"CLASS ndi.database.implementations.binarydoc.matfid","text":"<pre><code>  ndi.database.implementations.binarydoc.matfid - create a new ndi.database.implementations.binarydoc.matfid object\n\n  NDI_BINARYDOC_MATFID_OBJ = ndi.database.implementations.binarydoc.matfid(PARAM1,VALUE1, ...)\n\n  Follows same arguments as vlt.file.fileobj\n\n  See also: vlt.file.fileobj, vlt.file.fileobj/FILEOBJ\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bbinarydoc/matfid.m/#superclasses","title":"Superclasses","text":"<p>ndi.database.binarydoc, handle, vlt.file.fileobj</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bbinarydoc/matfid.m/#properties","title":"Properties","text":"Property Description key The key that is created when the binary doc is locked doc_unique_id The document unique id fullpathfilename fid permission machineformat"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bbinarydoc/matfid.m/#methods","title":"Methods","text":"Method Description addlistener addlistener  Add listener for event. delete close an ndi.database.binarydoc and delete its handle eq == (EQ)   Test handle equality. fclose close an ndi.database.implementations.binarydoc.matfid object feof test to see if a FILEOBJ is at END-OF-FILE ferror return the last file error message for FILEOBJ fgetl get a line from a FILEOBJ fgets get a line from a FILEOBJ fileparts return filename parts for the file associated with FILEOBJ findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. fopen open a FILEOBJ fprintf print data to a FILEOBJ_OBJ fread read data from a FILEOBJ frewind 'rewind' a FILEOBJ back to the beginning fscanf scan data from a FILEOBJ_OBJ fseek seek to a location within a FILEOBJ ftell find current location within a FILEOBJ fwrite write data to a FILEOBJ ge &gt;= (GE)   Greater than or equal relation for handles. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. matfid create a new ndi.database.implementations.binarydoc.matfid object ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. setproperties set the properties of a FILEOBJ"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bbinarydoc/matfid.m/#methods-help","title":"Methods help","text":"<p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.database.implementations.binarydoc.matfid, matlab.metadata.Property, events\n\nHelp for ndi.database.implementations.binarydoc.matfid/addlistener is inherited from superclass handle\n</code></pre> <p>delete - close an ndi.database.binarydoc and delete its handle</p> <pre><code>DELETE(NDI_BINARYDOC_OBJ)\n\n  Closes an ndi.database.binarydoc (if necessary) and then deletes the handle.\n\nHelp for ndi.database.implementations.binarydoc.matfid/delete is inherited from superclass ndi.database.binarydoc\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/NE\n\nHelp for ndi.database.implementations.binarydoc.matfid/eq is inherited from superclass handle\n</code></pre> <p>fclose - close an ndi.database.implementations.binarydoc.matfid object</p> <pre><code>Closes the file, but also clears the fullpathfilename and other fields so the\n  user cannot reuse the object without checking out another binary document from\n  the database.\n</code></pre> <p>feof - test to see if a FILEOBJ is at END-OF-FILE</p> <pre><code>B = FEOF(FILEOBJ_OBJ)\n\n  Returns 1 if FILEOBJ_OBJ is at its end of file, 0 otherwise.\n\n  See also: FSEEK, FILEOBJ/FSEEK, FTELL\n\nHelp for ndi.database.implementations.binarydoc.matfid/feof is inherited from superclass vlt.file.fileobj\n</code></pre> <p>ferror - return the last file error message for FILEOBJ</p> <pre><code>[MESSAGE, ERRORNUM] = FERROR(FILEOBJ_OBJ, COMMAND)\n\n  Return the most recent file error MESSAGE and ERRORNUM for\n  the file associated with FERROR.\n\nHelp for ndi.database.implementations.binarydoc.matfid/ferror is inherited from superclass vlt.file.fileobj\n</code></pre> <p>fgetl - get a line from a FILEOBJ</p> <pre><code>TLINE = FGETL(FILEOBJ_OBJ)\n\n  Returns the next line (not including NEWLINE character) just like FGETL.\n\n  See also: FGETL\n\nHelp for ndi.database.implementations.binarydoc.matfid/fgetl is inherited from superclass vlt.file.fileobj\n</code></pre> <p>fgets - get a line from a FILEOBJ</p> <pre><code>TLINE = FGETS(FILEOBJ_OBJ, [NCHAR])\n\n  Returns the next line (including NEWLINE character) just like FGETS.\n\n  See also: FGETS\n\nHelp for ndi.database.implementations.binarydoc.matfid/fgets is inherited from superclass vlt.file.fileobj\n</code></pre> <p>fileparts - return filename parts for the file associated with FILEOBJ</p> <pre><code>[PATHSTR,NAME,EXT] = FILEPARTS(FILEOBJ_OBJ)\n\n  Returns FILEPARTS of the 'fullpathfilename' field of FILEOBJ.\n\nHelp for ndi.database.implementations.binarydoc.matfid/fileparts is inherited from superclass vlt.file.fileobj\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID\n\nHelp for ndi.database.implementations.binarydoc.matfid/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.database.implementations.binarydoc.matfid, ndi.database.implementations.binarydoc.matfid/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.database.implementations.binarydoc.matfid/findprop is inherited from superclass handle\n</code></pre> <p>fopen - open a FILEOBJ</p> <pre><code>FILEOBJ_OBJ = FOPEN(FILEOBJ_OBJ, [ , PERMISSION], [MACHINEFORMAT],[FILENAME])\n\n  Opens the file associated with a FILEOBJ_OBJ object. If FILENAME, PERMISSION, \n  and MACHINEFORMAT are given, then those variables of FILEOBJ_OBJ are updated. If they\n  are not given, then the existing values in the FILEOBJ_OBJ are used.\n\n  Note that the order of the input arguments differs from FOPEN, so that the object\n  can be called in place of an FID (e.g., fid=fopen(myvariable), where myvariable is\n  either a file name or a FILEOBJ object).\n\n  If the operation is successful, then FILEOBJ_OBJ.fid is greater than 3. Otherwise,\n  FILEOBJ_OBJ.fid is -1.\n\n  See also: FOPEN, FILEOBJ/FCLOSE, FCLOSE\n\nHelp for ndi.database.implementations.binarydoc.matfid/fopen is inherited from superclass vlt.file.fileobj\n</code></pre> <p>fprintf - print data to a FILEOBJ_OBJ</p> <pre><code>[COUNT] = FPRINTF(FID,FORMAT,A, ...)\n\n  Call FPRINTF (see FPRINTF for inputs) for the file associated with\n  FILEOBJ_OBJ.\n\nHelp for ndi.database.implementations.binarydoc.matfid/fprintf is inherited from superclass vlt.file.fileobj\n</code></pre> <p>fread - read data from a FILEOBJ</p> <pre><code>COUNT = FWRITE(FILEOBJ_OBJ, COUNT, [PRECISION], [SKIP], [MACHINEFORMAT])\n\n  Attempts to read COUNT elements with resolution PRECISION. If PRECISION is not \n  provided, then 'char' is assumed. If SKIP is provided, then SKIP is in number of bytes, unless\n  PRECISION is in bits, in which case SKIP is in bits. MACHINEFORMAT is the machine format to use.\n\n  See FREAD for a full description of these input arguments.\n\n  See also: FREAD\n\nHelp for ndi.database.implementations.binarydoc.matfid/fread is inherited from superclass vlt.file.fileobj\n</code></pre> <p>frewind - 'rewind' a FILEOBJ back to the beginning</p> <pre><code>FREWIND(FILEOBJ_OBJ)\n\n  Seeks to the beginning of the file.\n\n  See also: FSEEK, FILEOBJ/FSEEK, FTELL\n\nHelp for ndi.database.implementations.binarydoc.matfid/frewind is inherited from superclass vlt.file.fileobj\n</code></pre> <p>fscanf - scan data from a FILEOBJ_OBJ</p> <pre><code>[A,COUNT] = FSCANF(FID,FORMAT,[SIZEA])\n\n  Call FSCANF (see FSCANF for inputs) for the file associated with\n  FILEOBJ_OBJ.\n\nHelp for ndi.database.implementations.binarydoc.matfid/fscanf is inherited from superclass vlt.file.fileobj\n</code></pre> <p>fseek - seek to a location within a FILEOBJ</p> <pre><code>B = FSEEK(FILEOBJ_OBJ, OFFSET, REFERENCE)\n\n  Seeks the file to the location OFFSET (in bytes) relative to\n  REFERENCE. REFERENCE can be \n      'bof' or -1   Beginning of file\n      'cof' or  0   Current position in file\n      'eof' or  1   End of file\n\n  B is 0 on success and -1 on failure.\n\n  See also: FSEEK, FILEOBJ/FTELL\n\nHelp for ndi.database.implementations.binarydoc.matfid/fseek is inherited from superclass vlt.file.fileobj\n</code></pre> <p>ftell - find current location within a FILEOBJ</p> <pre><code>LOCATION = FTELL(FILEOBJ_OBJ)\n\n  Returns the current location (in bytes) relative to the beginning of the\n  file. If the query fails, -1 is returned.\n\n  See also: FSEEK, FILEOBJ/FSEEK, FTELL\n\nHelp for ndi.database.implementations.binarydoc.matfid/ftell is inherited from superclass vlt.file.fileobj\n</code></pre> <p>fwrite - write data to a FILEOBJ</p> <pre><code>COUNT = FWRITE(FILEOBJ_OBJ, DATA, [PRECISION], [SKIP], [MACHINEFORMAT])\n\n  Attempts to write DATA elements with resolution PRECISION. If PRECISION is not \n  provided, then 'char' is assumed. If SKIP is provided, then SKIP is in number of bytes, unless\n  PRECISION is in bits, in which case SKIP is in bits. MACHINEFORMAT is the machine format to use.\n\n  See FWRITE for a full description of these input arguments.\n\n  See also: FWRITE\n\nHelp for ndi.database.implementations.binarydoc.matfid/fwrite is inherited from superclass vlt.file.fileobj\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/EQ, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/NE\n\nHelp for ndi.database.implementations.binarydoc.matfid/ge is inherited from superclass handle\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/EQ, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/NE\n\nHelp for ndi.database.implementations.binarydoc.matfid/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/DELETE\n\nHelp for ndi.database.implementations.binarydoc.matfid/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/EQ, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/NE\n\nHelp for ndi.database.implementations.binarydoc.matfid/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.database.implementations.binarydoc.matfid, matlab.metadata.Property, events\n\nHelp for ndi.database.implementations.binarydoc.matfid/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/EQ, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/NE\n\nHelp for ndi.database.implementations.binarydoc.matfid/lt is inherited from superclass handle\n</code></pre> <p>matfid - create a new ndi.database.implementations.binarydoc.matfid object</p> <pre><code>NDI_BINARYDOC_MATFID_OBJ = ndi.database.implementations.binarydoc.matfid(PARAM1,VALUE1, ...)\n\n  Follows same arguments as vlt.file.fileobj\n\n  See also: vlt.file.fileobj, vlt.file.fileobj/FILEOBJ\n\n    Documentation for ndi.database.implementations.binarydoc.matfid/matfid\n       doc ndi.database.implementations.binarydoc.matfid\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/EQ, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/GT, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LE, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LT\n\nHelp for ndi.database.implementations.binarydoc.matfid/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/ADDLISTENER, NDI.DATABASE.IMPLEMENTATIONS.BINARYDOC.MATFID/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.database.implementations.binarydoc.matfid/notify is inherited from superclass handle\n</code></pre> <p>setproperties - set the properties of a FILEOBJ</p> <pre><code>FILEOBJ_OBJ = SETPROPERTIES(FILEOBJ_OBJ, 'PROPERTY1',VALUE1, ...)\n\n  Sets the properties of a FILEOBJ with name/value pairs.\n\n  Properties are:\n    fullpathfilename; % the full path file name of the file\n    fid;              % The Matlab file identifier\n    permission;       % The file permission\n    machineformat     % big-endian ('b'), little-endian ('l'), or native ('n')\n\nHelp for ndi.database.implementations.binarydoc.matfid/setproperties is inherited from superclass vlt.file.fileobj\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/didsqlite.m/","title":"CLASS ndi.database.implementations.database.didsqlite","text":"<pre><code>  didsqlite - a database based on sqlite\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/didsqlite.m/#superclasses","title":"Superclasses","text":"<p>ndi.database</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/didsqlite.m/#properties","title":"Properties","text":"Property Description db did.sqlitedb path session_unique_reference"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/didsqlite.m/#methods","title":"Methods","text":"Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc didsqlite ndi.database.implementations.database.didsqlite make a new ndi.database.implementations.database.didsqlite object existbinarydoc check if a binary doc exists for a given document id newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/didsqlite.m/#methods-help","title":"Methods help","text":"<p>add - add an ndi.document to the database at a given path</p> <pre><code>NDI_DATABASE_OBJ = ADD(NDI_DATABASE_OBJ, NDI_DOCUMENT_OBJ, DBPATH, ...)\n\n  Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ.\n\n  This function also accepts name/value pairs that modify its behavior:\n  Parameter (default)      | Description\n  -------------------------------------------------------------------------\n  'Update'  (1)            | If document exists, update it. If 0, an error is\n                           |   generated if a document with the same ID exists\n\n  See also: vlt.data.namevaluepair\n\nHelp for ndi.database.implementations.database.didsqlite/add is inherited from superclass ndi.database\n</code></pre> <p>alldocids - return all document unique reference numbers for the database</p> <pre><code>DOCIDS = ALLDOCIDS(NDI_DIDSQLITE_OBJ)\n\n  Return all document unique reference strings as a cell array of strings. If there\n  are no documents, empty is returned.\n</code></pre> <p>clear - remove/delete all records from an ndi.database</p> <pre><code>CLEAR(NDI_DATABASE_OBJ, [AREYOUSURE])\n\n  Removes all documents from the vlt.file.dumbjsondb object.\n\n  Use with care. If AREYOUSURE is 'yes' then the\n  function will proceed. Otherwise, it will not.\n\n  See also: ndi.database.implementations.database.didsqlite/REMOVE\n\nHelp for ndi.database.implementations.database.didsqlite/clear is inherited from superclass ndi.database\n</code></pre> <p>closebinarydoc - close and unlock an ndi.database.binarydoc</p> <pre><code>[NDI_BINARYDOC_OBJ] = CLOSEBINARYDOC(NDI_DATABASE_OBJ, NDI_BINARYDOC_OBJ)\n\n  Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the\n  database, which is why it is necessary to call this function through the database.\n\nHelp for ndi.database.implementations.database.didsqlite/closebinarydoc is inherited from superclass ndi.database\n</code></pre> <p>didsqlite - ndi.database.implementations.database.didsqlite make a new ndi.database.implementations.database.didsqlite object</p> <pre><code>NDI_DIDSQLITE_OBJ = ndi.database.implementation.database.didsqlite(...\n      PATH, SESSION_UNIQUE_REFERENCE, COMMAND, ...)\n\n  Creates a new ndi.database.implementations.database.didsqlite object.\n\n  COMMAND can either be 'Load' or 'New'. The second argument\n  should be the full pathname of the location where the files\n  should be stored on disk.\n\n  See also: did.database, did.implementations.sqlitedb\n\n    Documentation for ndi.database.implementations.database.didsqlite/didsqlite\n       doc ndi.database.implementations.database.didsqlite\n</code></pre> <p>existbinarydoc - check if a binary doc exists for a given document id</p> <pre><code>[TF, FILE_PATH] = EXISTBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME)\n\n   Return a boolean flag (TF) indicating if a binary document\n   exists for an ndi.document and, if it exists, the full file\n   path (FILE_PATH) to the file where the binary data is stored.\n\nHelp for ndi.database.implementations.database.didsqlite/existbinarydoc is inherited from superclass ndi.database\n</code></pre> <p>newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DATABASE_OBJ [, DOCUMENT_TYPE])\n\n  Creates a new/blank ndi.document document object that can be used with this\n  ndi.database.\n\nHelp for ndi.database.implementations.database.didsqlite/newdocument is inherited from superclass ndi.database\n</code></pre> <p>openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id</p> <pre><code>[NDI_BINARYDOC_OBJ] = OPENBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME])\n\n  Return the open ndi.database.binarydoc object and VERSION that corresponds to an ndi.document and\n  the requested version (the latest version is used if the argument is omitted).\n  NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself.\n\n  Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi.database/CLOSEBINARYDOC.\n  The locked nature of the binary doc is a property of the database, not the document, which is why\n  the database is needed.\n\nHelp for ndi.database.implementations.database.didsqlite/openbinarydoc is inherited from superclass ndi.database\n</code></pre> <p>read - read an ndi.document from an ndi.database at a given db path</p> <pre><code>NDI_DOCUMENT_OBJ = READ(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID, [VERSION])\n\n  Read the ndi.document object with the document ID specified by NDI_DOCUMENT_ID. If VERSION\n  is provided (an integer) then only the version that is equal to VERSION is returned.\n  Otherwise, the latest version is returned.\n\n  If there is no ndi.document object with that ID, then empty is returned ([]).\n\nHelp for ndi.database.implementations.database.didsqlite/read is inherited from superclass ndi.database\n</code></pre> <p>remove - remove a document from an ndi.database</p> <pre><code>NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID)\n      or\n  NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT)\n\n  Removes the ndi.document object with the 'document unique reference' equal\n  to NDI_DOCUMENT_OBJ_ID.\n\n  If an ndi.document is passed, then the NDI_DOCUMENT_ID is extracted using\n  ndi.document/DOC_UNIQUE_ID. If a cell array of ndi.document is passed instead, then\n  all of the documents are removed.\n\nHelp for ndi.database.implementations.database.didsqlite/remove is inherited from superclass ndi.database\n</code></pre> <p>search - search for an ndi.document from an ndi.database</p> <pre><code>[DOCUMENT_OBJS] = SEARCH(NDI_DATABASE_OBJ, {'PARAM1', VALUE1, 'PARAM2', VALUE2, ... })\n\n  Searches metadata parameters PARAM1, PARAM2, etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ.\n  If VALUEN is a string, then a regular expression is evaluated to determine the match. If VALUEN is not\n  a string, then the items must match exactly.\n  If PARAMN1 begins with a dash, then VALUEN indicates the value of one of these special parameters:\n\n  This function returns a cell array of ndi.document objects. If no documents match the\n  query, then an empty cell array ({}) is returned.\n\nHelp for ndi.database.implementations.database.didsqlite/search is inherited from superclass ndi.database\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb.m/","title":"CLASS ndi.database.implementations.database.matlabdumbjsondb","text":"<pre><code>  ndi.database.implementations.database.matlabdumbjsondb make a new ndi.database.implementations.database.matlabdumbjsondb object\n\n  NDI_MATLABDUMBJSONDB_OBJ = ndi.database.implementation.database.matlabdumbjsondb(PATH, SESSION_UNIQUE_REFERENCE, COMMAND, ...)\n\n  Creates a new ndi.database.implementations.database.matlabdumbjsondb object.\n\n  COMMAND can either be 'Load' or 'New'. The second argument\n  should be the full pathname of the location where the files\n  should be stored on disk.\n\n  See also: vlt.file.dumbjsondb, vlt.file.dumbjsondb/DUMBJSONDB\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb.m/#superclasses","title":"Superclasses","text":"<p>ndi.database</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb.m/#properties","title":"Properties","text":"Property Description db vlt.file.dumbjsondb object path session_unique_reference"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb.m/#methods","title":"Methods","text":"Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc existbinarydoc check if a binary doc exists for a given document id matlabdumbjsondb ndi.database.implementations.database.matlabdumbjsondb make a new ndi.database.implementations.database.matlabdumbjsondb object newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb.m/#methods-help","title":"Methods help","text":"<p>add - add an ndi.document to the database at a given path</p> <pre><code>NDI_DATABASE_OBJ = ADD(NDI_DATABASE_OBJ, NDI_DOCUMENT_OBJ, DBPATH, ...)\n\n  Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ.\n\n  This function also accepts name/value pairs that modify its behavior:\n  Parameter (default)      | Description\n  -------------------------------------------------------------------------\n  'Update'  (1)            | If document exists, update it. If 0, an error is\n                           |   generated if a document with the same ID exists\n\n  See also: vlt.data.namevaluepair\n\nHelp for ndi.database.implementations.database.matlabdumbjsondb/add is inherited from superclass ndi.database\n</code></pre> <p>alldocids - return all document unique reference numbers for the database</p> <pre><code>DOCIDS = ALLDOCIDS(NDI_MATLABDUMBJSONDB_OBJ)\n\n  Return all document unique reference strings as a cell array of strings. If there\n  are no documents, empty is returned.\n</code></pre> <p>clear - remove/delete all records from an ndi.database</p> <pre><code>CLEAR(NDI_DATABASE_OBJ, [AREYOUSURE])\n\n  Removes all documents from the vlt.file.dumbjsondb object.\n\n  Use with care. If AREYOUSURE is 'yes' then the\n  function will proceed. Otherwise, it will not.\n\n  See also: ndi.database.implementations.database.matlabdumbjsondb/REMOVE\n\nHelp for ndi.database.implementations.database.matlabdumbjsondb/clear is inherited from superclass ndi.database\n</code></pre> <p>closebinarydoc - close and unlock an ndi.database.binarydoc</p> <pre><code>[NDI_BINARYDOC_OBJ] = CLOSEBINARYDOC(NDI_DATABASE_OBJ, NDI_BINARYDOC_OBJ)\n\n  Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the\n  database, which is why it is necessary to call this function through the database.\n\nHelp for ndi.database.implementations.database.matlabdumbjsondb/closebinarydoc is inherited from superclass ndi.database\n</code></pre> <p>existbinarydoc - check if a binary doc exists for a given document id</p> <pre><code>[TF, FILE_PATH] = EXISTBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME)\n\n   Return a boolean flag (TF) indicating if a binary document\n   exists for an ndi.document and, if it exists, the full file\n   path (FILE_PATH) to the file where the binary data is stored.\n\nHelp for ndi.database.implementations.database.matlabdumbjsondb/existbinarydoc is inherited from superclass ndi.database\n</code></pre> <p>matlabdumbjsondb - ndi.database.implementations.database.matlabdumbjsondb make a new ndi.database.implementations.database.matlabdumbjsondb object</p> <pre><code>NDI_MATLABDUMBJSONDB_OBJ = ndi.database.implementation.database.matlabdumbjsondb(PATH, SESSION_UNIQUE_REFERENCE, COMMAND, ...)\n\n  Creates a new ndi.database.implementations.database.matlabdumbjsondb object.\n\n  COMMAND can either be 'Load' or 'New'. The second argument\n  should be the full pathname of the location where the files\n  should be stored on disk.\n\n  See also: vlt.file.dumbjsondb, vlt.file.dumbjsondb/DUMBJSONDB\n\n    Documentation for ndi.database.implementations.database.matlabdumbjsondb/matlabdumbjsondb\n       doc ndi.database.implementations.database.matlabdumbjsondb\n</code></pre> <p>newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DATABASE_OBJ [, DOCUMENT_TYPE])\n\n  Creates a new/blank ndi.document document object that can be used with this\n  ndi.database.\n\nHelp for ndi.database.implementations.database.matlabdumbjsondb/newdocument is inherited from superclass ndi.database\n</code></pre> <p>openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id</p> <pre><code>[NDI_BINARYDOC_OBJ] = OPENBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME])\n\n  Return the open ndi.database.binarydoc object and VERSION that corresponds to an ndi.document and\n  the requested version (the latest version is used if the argument is omitted).\n  NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself.\n\n  Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi.database/CLOSEBINARYDOC.\n  The locked nature of the binary doc is a property of the database, not the document, which is why\n  the database is needed.\n\nHelp for ndi.database.implementations.database.matlabdumbjsondb/openbinarydoc is inherited from superclass ndi.database\n</code></pre> <p>read - read an ndi.document from an ndi.database at a given db path</p> <pre><code>NDI_DOCUMENT_OBJ = READ(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID, [VERSION])\n\n  Read the ndi.document object with the document ID specified by NDI_DOCUMENT_ID. If VERSION\n  is provided (an integer) then only the version that is equal to VERSION is returned.\n  Otherwise, the latest version is returned.\n\n  If there is no ndi.document object with that ID, then empty is returned ([]).\n\nHelp for ndi.database.implementations.database.matlabdumbjsondb/read is inherited from superclass ndi.database\n</code></pre> <p>remove - remove a document from an ndi.database</p> <pre><code>NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID)\n      or\n  NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT)\n\n  Removes the ndi.document object with the 'document unique reference' equal\n  to NDI_DOCUMENT_OBJ_ID.\n\n  If an ndi.document is passed, then the NDI_DOCUMENT_ID is extracted using\n  ndi.document/DOC_UNIQUE_ID. If a cell array of ndi.document is passed instead, then\n  all of the documents are removed.\n\nHelp for ndi.database.implementations.database.matlabdumbjsondb/remove is inherited from superclass ndi.database\n</code></pre> <p>search - search for an ndi.document from an ndi.database</p> <pre><code>[DOCUMENT_OBJS] = SEARCH(NDI_DATABASE_OBJ, {'PARAM1', VALUE1, 'PARAM2', VALUE2, ... })\n\n  Searches metadata parameters PARAM1, PARAM2, etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ.\n  If VALUEN is a string, then a regular expression is evaluated to determine the match. If VALUEN is not\n  a string, then the items must match exactly.\n  If PARAMN1 begins with a dash, then VALUEN indicates the value of one of these special parameters:\n\n  This function returns a cell array of ndi.document objects. If no documents match the\n  query, then an empty cell array ({}) is returned.\n\nHelp for ndi.database.implementations.database.matlabdumbjsondb/search is inherited from superclass ndi.database\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb2.m/","title":"CLASS ndi.database.implementations.database.matlabdumbjsondb2","text":"<pre><code>  matlabdumbjsondb2 - with enhanced file management\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb2.m/#superclasses","title":"Superclasses","text":"<p>ndi.database</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb2.m/#properties","title":"Properties","text":"Property Description db vlt.file.dumbjsondb object path session_unique_reference"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb2.m/#methods","title":"Methods","text":"Method Description add add an ndi.document to the database at a given path alldocids return all document unique reference numbers for the database clear remove/delete all records from an ndi.database closebinarydoc close and unlock an ndi.database.binarydoc existbinarydoc check if a binary doc exists for a given document id matlabdumbjsondb2 ndi.database.implementations.database.matlabdumbjsondb2 make a new ndi.database.implementations.database.matlabdumbjsondb object newdocument obtain a new/blank ndi.document object that can be used with a ndi.database openbinarydoc open and lock an ndi.database.binarydoc that corresponds to a document id read read an ndi.document from an ndi.database at a given db path remove remove a document from an ndi.database search search for an ndi.document from an ndi.database"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bdatabase/matlabdumbjsondb2.m/#methods-help","title":"Methods help","text":"<p>add - add an ndi.document to the database at a given path</p> <pre><code>NDI_DATABASE_OBJ = ADD(NDI_DATABASE_OBJ, NDI_DOCUMENT_OBJ, DBPATH, ...)\n\n  Adds the document NDI_DOCUMENT_OBJ to the database NDI_DATABASE_OBJ.\n\n  This function also accepts name/value pairs that modify its behavior:\n  Parameter (default)      | Description\n  -------------------------------------------------------------------------\n  'Update'  (1)            | If document exists, update it. If 0, an error is\n                           |   generated if a document with the same ID exists\n\n  See also: vlt.data.namevaluepair\n\nHelp for ndi.database.implementations.database.matlabdumbjsondb2/add is inherited from superclass ndi.database\n</code></pre> <p>alldocids - return all document unique reference numbers for the database</p> <pre><code>DOCIDS = ALLDOCIDS(NDI_MATLABDUMBJSONDB_OBJ)\n\n  Return all document unique reference strings as a cell array of strings. If there\n  are no documents, empty is returned.\n</code></pre> <p>clear - remove/delete all records from an ndi.database</p> <pre><code>CLEAR(NDI_DATABASE_OBJ, [AREYOUSURE])\n\n  Removes all documents from the vlt.file.dumbjsondb object.\n\n  Use with care. If AREYOUSURE is 'yes' then the\n  function will proceed. Otherwise, it will not.\n\n  See also: ndi.database.implementations.database.matlabdumbjsondb2/REMOVE\n\nHelp for ndi.database.implementations.database.matlabdumbjsondb2/clear is inherited from superclass ndi.database\n</code></pre> <p>closebinarydoc - close and unlock an ndi.database.binarydoc</p> <pre><code>[NDI_BINARYDOC_OBJ] = CLOSEBINARYDOC(NDI_DATABASE_OBJ, NDI_BINARYDOC_OBJ)\n\n  Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the\n  database, which is why it is necessary to call this function through the database.\n\nHelp for ndi.database.implementations.database.matlabdumbjsondb2/closebinarydoc is inherited from superclass ndi.database\n</code></pre> <p>existbinarydoc - check if a binary doc exists for a given document id</p> <pre><code>[TF, FILE_PATH] = EXISTBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME)\n\n   Return a boolean flag (TF) indicating if a binary document\n   exists for an ndi.document and, if it exists, the full file\n   path (FILE_PATH) to the file where the binary data is stored.\n\nHelp for ndi.database.implementations.database.matlabdumbjsondb2/existbinarydoc is inherited from superclass ndi.database\n</code></pre> <p>matlabdumbjsondb2 - ndi.database.implementations.database.matlabdumbjsondb2 make a new ndi.database.implementations.database.matlabdumbjsondb object</p> <pre><code>NDI_MATLABDUMBJSONDB_OBJ = ndi.database.implementation.database.matlabdumbjsondb2(...\n      PATH, SESSION_UNIQUE_REFERENCE, COMMAND, ...)\n\n  Creates a new ndi.database.implementations.database.matlabdumbjsondb2 object.\n\n  COMMAND can either be 'Load' or 'New'. The second argument\n  should be the full pathname of the location where the files\n  should be stored on disk.\n\n  See also: vlt.file.dumbjsondb, vlt.file.dumbjsondb/DUMBJSONDB\n\n    Documentation for ndi.database.implementations.database.matlabdumbjsondb2/matlabdumbjsondb2\n       doc ndi.database.implementations.database.matlabdumbjsondb2\n</code></pre> <p>newdocument - obtain a new/blank ndi.document object that can be used with a ndi.database</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DATABASE_OBJ [, DOCUMENT_TYPE])\n\n  Creates a new/blank ndi.document document object that can be used with this\n  ndi.database.\n\nHelp for ndi.database.implementations.database.matlabdumbjsondb2/newdocument is inherited from superclass ndi.database\n</code></pre> <p>openbinarydoc - open and lock an ndi.database.binarydoc that corresponds to a document id</p> <pre><code>[NDI_BINARYDOC_OBJ] = OPENBINARYDOC(NDI_DATABASE_OBJ, NDI_DOCUMENT_OR_ID, FILENAME])\n\n  Return the open ndi.database.binarydoc object and VERSION that corresponds to an ndi.document and\n  the requested version (the latest version is used if the argument is omitted).\n  NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself.\n\n  Note that this NDI_BINARYDOC_OBJ must be closed and unlocked with ndi.database/CLOSEBINARYDOC.\n  The locked nature of the binary doc is a property of the database, not the document, which is why\n  the database is needed.\n\nHelp for ndi.database.implementations.database.matlabdumbjsondb2/openbinarydoc is inherited from superclass ndi.database\n</code></pre> <p>read - read an ndi.document from an ndi.database at a given db path</p> <pre><code>NDI_DOCUMENT_OBJ = READ(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID, [VERSION])\n\n  Read the ndi.document object with the document ID specified by NDI_DOCUMENT_ID. If VERSION\n  is provided (an integer) then only the version that is equal to VERSION is returned.\n  Otherwise, the latest version is returned.\n\n  If there is no ndi.document object with that ID, then empty is returned ([]).\n\nHelp for ndi.database.implementations.database.matlabdumbjsondb2/read is inherited from superclass ndi.database\n</code></pre> <p>remove - remove a document from an ndi.database</p> <pre><code>NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT_ID)\n      or\n  NDI_DATABASE_OBJ = REMOVE(NDI_DATABASE_OBJ, NDI_DOCUMENT)\n\n  Removes the ndi.document object with the 'document unique reference' equal\n  to NDI_DOCUMENT_OBJ_ID.\n\n  If an ndi.document is passed, then the NDI_DOCUMENT_ID is extracted using\n  ndi.document/DOC_UNIQUE_ID. If a cell array of ndi.document is passed instead, then\n  all of the documents are removed.\n\nHelp for ndi.database.implementations.database.matlabdumbjsondb2/remove is inherited from superclass ndi.database\n</code></pre> <p>search - search for an ndi.document from an ndi.database</p> <pre><code>[DOCUMENT_OBJS] = SEARCH(NDI_DATABASE_OBJ, {'PARAM1', VALUE1, 'PARAM2', VALUE2, ... })\n\n  Searches metadata parameters PARAM1, PARAM2, etc of NDS_DOCUMENT entries within an NDI_DATABASE_OBJ.\n  If VALUEN is a string, then a regular expression is evaluated to determine the match. If VALUEN is not\n  a string, then the items must match exactly.\n  If PARAMN1 begins with a dash, then VALUEN indicates the value of one of these special parameters:\n\n  This function returns a cell array of ndi.document objects. If no documents match the\n  query, then an empty cell array ({}) is returned.\n\nHelp for ndi.database.implementations.database.matlabdumbjsondb2/search is inherited from superclass ndi.database\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bfun/doc2ingesteddbfilename.m/","title":"ndi.database.implementations.fun.doc2ingesteddbfilename","text":"<pre><code>\n  DBFILENAME = DOC2INGESTEDDBFILENAME(NDI_DOCUMENT_OBJ, FILENAME)\n\n  Given an ndi.document object and its internal binary FILENAME, and if the\n  file exists in an ingested form, return the full path filename in the database.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bfun/expell.m/","title":"ndi.database.implementations.fun.expell","text":"<pre><code>  EXPELL - actually expell files from an ndi_document file_info from a database\n\n  [B,MSG] = ndi.database.implementations.fun.ingest(TO_DELETE_LIST]);\n\n  Expell files from a database. TO_DELETE_LIST is a list of files to be deleted.\n\n  B is 1 if the operation is successful, 0 otherwise. MSG is empty ('') if there is no error and\n  contains a description of the error that occurred if there was an error.\n\n  See also: ndi.database.implementations.fun.expell_plan()\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bfun/expell_plan.m/","title":"ndi.database.implementations.fun.expell_plan","text":"<pre><code>  EXPELL_PLAN - prepare to remove files from an ndi_document file_info from a database\n\n  [TO_DELETE_LIST] = ndi.database.implementations.fun.expell_plan(NDI_DOCUMENT_OBJ, INGESTION_DIRECTORY)\n\n  Plan to expell all of the files from an ndi.document NDI_DOCUMENT_OBJ from the directory INGESTION_DIRECTORY.\n\n  A list of files (full path) to be deleted is returned in the cell array TO_DELETE_LIST.\n\n  See also: ndi.database.implementations.fun.ingest_plan\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bfun/ingest.m/","title":"ndi.database.implementations.fun.ingest","text":"<pre><code>  INGEST - actually ingest files from an ndi_document file_info into a database\n\n  [B,MSG] = ndi.database.implementations.fun.ingest(SOURCE_FILENAME_LIST, ...\n      DESTINATION_FILENAME_LIST, TO_DELETE_LIST]);\n\n  Ingest files into a database. SOURCE_FILENAME_LIST, DESTINATION_FILENAME_LIST, and\n  TO_DELETE_LIST are typically returned from ndi.database.implementations.fun.ingest_plan().\n  SOURCE_FILENAME_LIST are a list of the source files to be copied, and DESTINATION_FILENAME_LIST\n  are a list of locations to be written to. TO_DELETE_LIST is a list of files to be deleted.\n\n  B is 1 if the operation is successful, 0 otherwise. MSG is empty ('') if there is no error and\n  contains a description of the error that occurred if there was an error.\n\n  See also: ndi.database.implementations.fun.ingest_plan()\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bimplementations/%2Bfun/ingest_plan.m/","title":"ndi.database.implementations.fun.ingest_plan","text":"<pre><code>  INGEST_PLAN - ingest files from an ndi_document file_info into a database\n\n  [SOURCE_FILENAME_LIST, DESTINATION_FILENAME_LIST, TO_DELETE_LIST] = ...\n    ndi.database.implementations.fun.ingest_plan(NDI_DOCUMENT_OBJ, INGESTION_DIRECTORY)\n\n  Plan to ingest all of the files from an ndi.document NDI_DOCUMENT_OBJ into the directory INGESTION_DIRECTORY.\n  The source files to be copied are returned in a cell array SOURCE_FILENAME_LIST, and the\n  corresponding destination where each file should be copied is returned in a cell array\n  DESINATION_FILENAME_LIST.\n\n  A list of files (full path) to be deleted after successful addition of the document to the\n  database is returned in the cell array TO_DELETE_LIST.\n\n  See also: ndi.database.implementations.fun.ingest\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Binternal/list_binary_files.m/","title":"ndi.database.internal.list_binary_files","text":"<pre><code> LIST_BINARY_FILES - Scans a dataset for binary files of documents\n\n  FILE_MANIFEST = ndi.database.internal.list_binary_files(NDI_DATASET, DATABASE_DOCUMENTS)\n\n  Inputs:\n    NDI_DATASET - an ndi.dataset object\n    DATABASE_DOCUMENTS - documents returned by searching the dataset using database_search\n\n  Outputs:\n    FILE_MANIFEST - A structure with the following fields:\n        'name' - The name of the file\n        'file_path' - The full (absolute) pathname of the file\n        'docid' - The document id that the file is associated with\n        'bytes' - The size of the file in bytes\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata/table2treatment.m/","title":"ndi.database.metadata.table2treatment","text":"<pre><code>  TABLE2TREATMENT - read in treatments for a session from a table\n\n  D = TABLE2TREATMENT(S, TABLEFILE, SUBJECTID, ...)\n     or\n  D = TABLE2TREATMENT(S, TABLE, SUBJECTID ...)\n\n  Reads in table of treatment types and creates ndi.document objects of type\n  'treatment'. \n\n  The table should have the following columns:\n     ontologyName - the ontology name for the manipulation\n             name - the name of the manipulation (from the ontology)\n    numeric_value - a numeric value \n     string_value - a string value \n            group - a group number for the manipulation\n\n  All manipulations of the same group will have 'manipulation_id' set\n  to the first manipulation listed. The first manipulation in each group\n  will have 'manipulation_id' unset.\n\n  This function takes name/value pairs:\n  ---------------------------------------------------------------------------\n  | Parameter (default)     | Description                                   |\n  |-------------------------|-----------------------------------------------|\n  | delimiter (',')         | Delmiter for the table file                   |\n  | doNotAdd (false)        | If true, do not add documents to database     |\n  ---------------------------------------------------------------------------\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bchecker/subject.m/","title":"ndi.database.metadata_app.checker.subject","text":"<pre><code> SUBJECT Summary of this function goes here\n    Detailed explanation goes here\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Affiliation.m/","title":"CLASS ndi.database.metadata_app.class.Affiliation","text":"<pre><code> AFFILIATION Summary of this class goes here\n    Detailed explanation goes here\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Affiliation.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Affiliation.m/#properties","title":"Properties","text":"Property Description memberOf"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Affiliation.m/#methods","title":"Methods","text":"Method Description Affiliation AFFILIATION Construct an instance of this class getName getName Get the value in a field getTableStruct getTableStruct Get the value in a field updateIdentifier updateIdentifier Update the value in a field updateName updateName Update the value in a field"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Affiliation.m/#methods-help","title":"Methods help","text":"<p>Affiliation - AFFILIATION Construct an instance of this class</p> <pre><code>Detailed explanation goes here\n\n    Documentation for ndi.database.metadata_app.class.Affiliation/Affiliation\n       doc ndi.database.metadata_app.class.Affiliation\n</code></pre> <p>getName - getName Get the value in a field</p> <pre><code>\n</code></pre> <p>getTableStruct - getTableStruct Get the value in a field</p> <pre><code>\n</code></pre> <p>updateIdentifier - updateIdentifier Update the value in a field</p> <pre><code>\n</code></pre> <p>updateName - updateName Update the value in a field</p> <pre><code>\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AffiliationData.m/","title":"CLASS ndi.database.metadata_app.class.AffiliationData","text":"<pre><code> AffiliationData A utility class for storing and retrieving information about affiliations.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AffiliationData.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AffiliationData.m/#properties","title":"Properties","text":"Property Description AffiliationList"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AffiliationData.m/#methods","title":"Methods","text":"Method Description AffiliationData AffiliationData A utility class for storing and retrieving information about affiliations. addItem ndi.database.metadata_app.class.AffiliationData/addItem is a function. addlistener addlistener  Add listener for event. checkName ndi.database.metadata_app.class.AffiliationData/checkName is a function. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. getAffiliationList getAffiliationList Same as S = AffiliationData.AffiliationList getAffiliationName getAffiliationName Get the full name for the given affiliation getDefaultAffiliationItem ndi.database.metadata_app.class.AffiliationData.getDefaultAffiliationItem is a function. getItem getItem Get a struct with affiliation details for the given index getSize ndi.database.metadata_app.class.AffiliationData/getSize is a function. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. removeItem removeItem Remove the specified author form the list. setAffiliationList setAffiliationList Same as AffiliationData.AffiliationList = S updateIdentifier updateIdentifier Update the value in a field updateName updateName Update the value in a field updateProperty updateProperty Update the value in a field for the given"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AffiliationData.m/#methods-help","title":"Methods help","text":"<p>AffiliationData - AffiliationData A utility class for storing and retrieving information about affiliations.</p> <pre><code>Documentation for ndi.database.metadata_app.class.AffiliationData/AffiliationData\n       doc ndi.database.metadata_app.class.AffiliationData\n</code></pre> <p>addItem - ndi.database.metadata_app.class.AffiliationData/addItem is a function.</p> <pre><code>addItem(obj, af)\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.database.metadata_app.class.affiliationdata, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.AffiliationData/addlistener is inherited from superclass handle\n</code></pre> <p>checkName - ndi.database.metadata_app.class.AffiliationData/checkName is a function.</p> <pre><code>checkName(obj, ror, affiliationIndex)\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/ISVALID, CLEAR\n\nHelp for ndi.database.metadata_app.class.AffiliationData/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/NE\n\nHelp for ndi.database.metadata_app.class.AffiliationData/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA\n\nHelp for ndi.database.metadata_app.class.AffiliationData/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.database.metadata_app.class.affiliationdata, ndi.database.metadata_app.class.affiliationdata/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.database.metadata_app.class.AffiliationData/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/NE\n\nHelp for ndi.database.metadata_app.class.AffiliationData/ge is inherited from superclass handle\n</code></pre> <p>getAffiliationList - getAffiliationList Same as S = AffiliationData.AffiliationList</p> <pre><code>\n</code></pre> <p>getAffiliationName - getAffiliationName Get the full name for the given affiliation</p> <pre><code>\n</code></pre> <p>getDefaultAffiliationItem - ndi.database.metadata_app.class.AffiliationData.getDefaultAffiliationItem is a function.</p> <pre><code>S = ndi.database.metadata_app.class.AffiliationData.getDefaultAffiliationItem\n</code></pre> <p>getItem - getItem Get a struct with affiliation details for the given index</p> <pre><code>\n</code></pre> <p>getSize - ndi.database.metadata_app.class.AffiliationData/getSize is a function.</p> <pre><code>size = getSize(obj)\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/NE\n\nHelp for ndi.database.metadata_app.class.AffiliationData/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/DELETE\n\nHelp for ndi.database.metadata_app.class.AffiliationData/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/NE\n\nHelp for ndi.database.metadata_app.class.AffiliationData/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.database.metadata_app.class.affiliationdata, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.AffiliationData/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/NE\n\nHelp for ndi.database.metadata_app.class.AffiliationData/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LT\n\nHelp for ndi.database.metadata_app.class.AffiliationData/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.AFFILIATIONDATA/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.database.metadata_app.class.AffiliationData/notify is inherited from superclass handle\n</code></pre> <p>removeItem - removeItem Remove the specified author form the list.</p> <pre><code>Usage:\n    AffiliationData.removeItem(affiliationIndex) removes the affiliation from the\n    list where affiliationIndex is the index in the struct.\n</code></pre> <p>setAffiliationList - setAffiliationList Same as AffiliationData.AffiliationList = S</p> <pre><code>\n</code></pre> <p>updateIdentifier - updateIdentifier Update the value in a field</p> <pre><code>\n</code></pre> <p>updateName - updateName Update the value in a field</p> <pre><code>\n</code></pre> <p>updateProperty - updateProperty Update the value in a field for the given</p> <pre><code>affiliationIndex\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AuthorData.m/","title":"CLASS ndi.database.metadata_app.class.AuthorData","text":"<pre><code> AuthorData A utility class for storing and retrieving information about authors.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AuthorData.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AuthorData.m/#properties","title":"Properties","text":"Property Description AuthorList"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AuthorData.m/#methods","title":"Methods","text":"Method Description AuthorData AuthorData A utility class for storing and retrieving information about authors. addAffiliation ndi.database.metadata_app.class.AuthorData/addAffiliation is a function. addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. getAuthorList getAuthorList Same as S = authorData.AuthorList getAuthorName getAuthorName Get the full name for the given author getDefaultAuthorItem ndi.database.metadata_app.class.AuthorData.getDefaultAuthorItem is a function. getItem getItem Get a struct with author details for the given index gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. removeAffiliation ndi.database.metadata_app.class.AuthorData/removeAffiliation is a function. removeItem removeItem Remove the specified author from the list. reorderItems ndi.database.metadata_app.class.AuthorData/reorderItems is a function. setAuthorList setAuthorList Same as authorData.AuthorList = S updateProperty updateProperty Update the value in a field for the given"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/AuthorData.m/#methods-help","title":"Methods help","text":"<p>AuthorData - AuthorData A utility class for storing and retrieving information about authors.</p> <pre><code>Documentation for ndi.database.metadata_app.class.AuthorData/AuthorData\n       doc ndi.database.metadata_app.class.AuthorData\n</code></pre> <p>addAffiliation - ndi.database.metadata_app.class.AuthorData/addAffiliation is a function.</p> <pre><code>addAffiliation(obj, organizationName, authorIndex)\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.database.metadata_app.class.authordata, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.AuthorData/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/ISVALID, CLEAR\n\nHelp for ndi.database.metadata_app.class.AuthorData/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/NE\n\nHelp for ndi.database.metadata_app.class.AuthorData/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA\n\nHelp for ndi.database.metadata_app.class.AuthorData/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.database.metadata_app.class.authordata, ndi.database.metadata_app.class.authordata/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.database.metadata_app.class.AuthorData/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/NE\n\nHelp for ndi.database.metadata_app.class.AuthorData/ge is inherited from superclass handle\n</code></pre> <p>getAuthorList - getAuthorList Same as S = authorData.AuthorList</p> <pre><code>\n</code></pre> <p>getAuthorName - getAuthorName Get the full name for the given author</p> <pre><code>\n</code></pre> <p>getDefaultAuthorItem - ndi.database.metadata_app.class.AuthorData.getDefaultAuthorItem is a function.</p> <pre><code>S = ndi.database.metadata_app.class.AuthorData.getDefaultAuthorItem\n</code></pre> <p>getItem - getItem Get a struct with author details for the given index</p> <pre><code>\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/NE\n\nHelp for ndi.database.metadata_app.class.AuthorData/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/DELETE\n\nHelp for ndi.database.metadata_app.class.AuthorData/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/NE\n\nHelp for ndi.database.metadata_app.class.AuthorData/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.database.metadata_app.class.authordata, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.AuthorData/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/NE\n\nHelp for ndi.database.metadata_app.class.AuthorData/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LT\n\nHelp for ndi.database.metadata_app.class.AuthorData/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.AUTHORDATA/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.database.metadata_app.class.AuthorData/notify is inherited from superclass handle\n</code></pre> <p>removeAffiliation - ndi.database.metadata_app.class.AuthorData/removeAffiliation is a function.</p> <pre><code>removeAffiliation(obj, authorIndex, affiliationIndex)\n</code></pre> <p>removeItem - removeItem Remove the specified author from the list.</p> <pre><code>Usage:\n    authorData.removeItem(authorIndex) removes the author from the\n    list where authorIndex is the index in the struct.\n</code></pre> <p>reorderItems - ndi.database.metadata_app.class.AuthorData/reorderItems is a function.</p> <pre><code>reorderItems(obj, newIndex, oldIndex)\n</code></pre> <p>setAuthorList - setAuthorList Same as authorData.AuthorList = S</p> <pre><code>\n</code></pre> <p>updateProperty - updateProperty Update the value in a field for the given</p> <pre><code>authorIndex\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetData.m/","title":"CLASS ndi.database.metadata_app.class.DatasetData","text":"<pre><code> AuthorData A utility class for storing and retrieving information about Dataset.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetData.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetData.m/#properties","title":"Properties","text":"Property Description DatasetInfo"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetData.m/#methods","title":"Methods","text":"Method Description DatasetData AuthorData A utility class for storing and retrieving information about Dataset. addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. getDataset Same as S = datasetData.DatasetInfo getDefaultDatasetItem ndi.database.metadata_app.class.DatasetData.getDefaultDatasetItem is a function. getItem getItem Get a struct with dataset details for the given index gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. setDataset Same as datasetData.DatasetInfo = S updateProperty updateProperty Update the value in a field"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetData.m/#methods-help","title":"Methods help","text":"<p>DatasetData - AuthorData A utility class for storing and retrieving information about Dataset.</p> <pre><code>Documentation for ndi.database.metadata_app.class.DatasetData/DatasetData\n       doc ndi.database.metadata_app.class.DatasetData\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.database.metadata_app.class.datasetdata, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.DatasetData/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/ISVALID, CLEAR\n\nHelp for ndi.database.metadata_app.class.DatasetData/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/NE\n\nHelp for ndi.database.metadata_app.class.DatasetData/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA\n\nHelp for ndi.database.metadata_app.class.DatasetData/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.database.metadata_app.class.datasetdata, ndi.database.metadata_app.class.datasetdata/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.database.metadata_app.class.DatasetData/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/NE\n\nHelp for ndi.database.metadata_app.class.DatasetData/ge is inherited from superclass handle\n</code></pre> <p>getDataset - Same as S = datasetData.DatasetInfo</p> <pre><code>\n</code></pre> <p>getDefaultDatasetItem - ndi.database.metadata_app.class.DatasetData.getDefaultDatasetItem is a function.</p> <pre><code>S = ndi.database.metadata_app.class.DatasetData.getDefaultDatasetItem\n</code></pre> <p>getItem - getItem Get a struct with dataset details for the given index</p> <pre><code>\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/NE\n\nHelp for ndi.database.metadata_app.class.DatasetData/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/DELETE\n\nHelp for ndi.database.metadata_app.class.DatasetData/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/NE\n\nHelp for ndi.database.metadata_app.class.DatasetData/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.database.metadata_app.class.datasetdata, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.DatasetData/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/NE\n\nHelp for ndi.database.metadata_app.class.DatasetData/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LT\n\nHelp for ndi.database.metadata_app.class.DatasetData/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.DATASETDATA/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.database.metadata_app.class.DatasetData/notify is inherited from superclass handle\n</code></pre> <p>setDataset - Same as datasetData.DatasetInfo = S</p> <pre><code>\n</code></pre> <p>updateProperty - updateProperty Update the value in a field</p> <pre><code>\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetVersionData.m/","title":"CLASS ndi.database.metadata_app.class.DatasetVersionData","text":"<pre><code> AuthorData A utility class for storing and retrieving information about Dataset version.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetVersionData.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetVersionData.m/#properties","title":"Properties","text":"Property Description DatasetVersionInfo"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetVersionData.m/#methods","title":"Methods","text":"Method Description DatasetVersionData AuthorData A utility class for storing and retrieving information about Dataset version. addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. getDataset ndi.database.metadata_app.class.DatasetVersionData/getDataset is a function. getDefaultDatasetItem ndi.database.metadata_app.class.DatasetVersionData.getDefaultDatasetItem is a function. getItem getItem Get a struct with datasetversion details for the given index gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. setDataset ndi.database.metadata_app.class.DatasetVersionData/setDataset is a function. updateProperty updateProperty Update the value in a field"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DatasetVersionData.m/#methods-help","title":"Methods help","text":"<p>DatasetVersionData - AuthorData A utility class for storing and retrieving information about Dataset version.</p> <pre><code>Documentation for ndi.database.metadata_app.class.DatasetVersionData/DatasetVersionData\n       doc ndi.database.metadata_app.class.DatasetVersionData\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.database.metadata_app.class.datasetversiondata, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.DatasetVersionData/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/ISVALID, CLEAR\n\nHelp for ndi.database.metadata_app.class.DatasetVersionData/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/NE\n\nHelp for ndi.database.metadata_app.class.DatasetVersionData/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA\n\nHelp for ndi.database.metadata_app.class.DatasetVersionData/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.database.metadata_app.class.datasetversiondata, ndi.database.metadata_app.class.datasetversiondata/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.database.metadata_app.class.DatasetVersionData/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/NE\n\nHelp for ndi.database.metadata_app.class.DatasetVersionData/ge is inherited from superclass handle\n</code></pre> <p>getDataset - ndi.database.metadata_app.class.DatasetVersionData/getDataset is a function.</p> <pre><code>S = getDataset(obj)\n</code></pre> <p>getDefaultDatasetItem - ndi.database.metadata_app.class.DatasetVersionData.getDefaultDatasetItem is a function.</p> <pre><code>S = ndi.database.metadata_app.class.DatasetVersionData.getDefaultDatasetItem\n</code></pre> <p>getItem - getItem Get a struct with datasetversion details for the given index</p> <pre><code>\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/NE\n\nHelp for ndi.database.metadata_app.class.DatasetVersionData/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/DELETE\n\nHelp for ndi.database.metadata_app.class.DatasetVersionData/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/NE\n\nHelp for ndi.database.metadata_app.class.DatasetVersionData/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.database.metadata_app.class.datasetversiondata, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.DatasetVersionData/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/NE\n\nHelp for ndi.database.metadata_app.class.DatasetVersionData/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LT\n\nHelp for ndi.database.metadata_app.class.DatasetVersionData/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.DATASETVERSIONDATA/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.database.metadata_app.class.DatasetVersionData/notify is inherited from superclass handle\n</code></pre> <p>setDataset - ndi.database.metadata_app.class.DatasetVersionData/setDataset is a function.</p> <pre><code>setDataset(obj, S)\n</code></pre> <p>updateProperty - updateProperty Update the value in a field</p> <pre><code>\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DeviceType.m/","title":"CLASS ndi.database.metadata_app.class.DeviceType","text":"<pre><code> DEVICETYPE Summary of this class goes here\n    Detailed explanation goes here\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DeviceType.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DeviceType.m/#properties","title":"Properties","text":"Property Description Name Definition Description Synonym"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DeviceType.m/#methods","title":"Methods","text":"Method Description DeviceType DEVICETYPE Summary of this class goes here addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. getProperties ndi.database.metadata_app.class.DeviceType/getProperties is a function. getProperty ndi.database.metadata_app.class.DeviceType/getProperty is a function. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. updateProperty ndi.database.metadata_app.class.DeviceType/updateProperty is a function."},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/DeviceType.m/#methods-help","title":"Methods help","text":"<p>DeviceType - DEVICETYPE Summary of this class goes here</p> <pre><code>Detailed explanation goes here\n\n    Documentation for ndi.database.metadata_app.class.DeviceType/DeviceType\n       doc ndi.database.metadata_app.class.DeviceType\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.database.metadata_app.class.devicetype, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.DeviceType/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/ISVALID, CLEAR\n\nHelp for ndi.database.metadata_app.class.DeviceType/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/NE\n\nHelp for ndi.database.metadata_app.class.DeviceType/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE\n\nHelp for ndi.database.metadata_app.class.DeviceType/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.database.metadata_app.class.devicetype, ndi.database.metadata_app.class.devicetype/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.database.metadata_app.class.DeviceType/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/EQ, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/NE\n\nHelp for ndi.database.metadata_app.class.DeviceType/ge is inherited from superclass handle\n</code></pre> <p>getProperties - ndi.database.metadata_app.class.DeviceType/getProperties is a function.</p> <pre><code>properties = getProperties(obj)\n</code></pre> <p>getProperty - ndi.database.metadata_app.class.DeviceType/getProperty is a function.</p> <pre><code>Property = getProperty(obj, name)\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/EQ, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/NE\n\nHelp for ndi.database.metadata_app.class.DeviceType/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/DELETE\n\nHelp for ndi.database.metadata_app.class.DeviceType/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/EQ, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/NE\n\nHelp for ndi.database.metadata_app.class.DeviceType/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.database.metadata_app.class.devicetype, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.DeviceType/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/EQ, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/NE\n\nHelp for ndi.database.metadata_app.class.DeviceType/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/EQ, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/GT, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LT\n\nHelp for ndi.database.metadata_app.class.DeviceType/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.DEVICETYPE/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.database.metadata_app.class.DeviceType/notify is inherited from superclass handle\n</code></pre> <p>updateProperty - ndi.database.metadata_app.class.DeviceType/updateProperty is a function.</p> <pre><code>updateProperty(obj, name, value)\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Electrode.m/","title":"CLASS ndi.database.metadata_app.class.Electrode","text":"<pre><code>ndi.database.metadata_app.class.Electrode is a class.\n    obj = ndi.database.metadata_app.class.Electrode(varargin)\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Electrode.m/#superclasses","title":"Superclasses","text":"<p>ndi.database.metadata_app.class.Probe, handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Electrode.m/#properties","title":"Properties","text":"Property Description IntrinsicResistance IntrinsicResistanceUnit Name DeviceType ProbeType ClassType Description DigitalIdentifier Manufacturer Complete sessionIdentifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Electrode.m/#methods","title":"Methods","text":"Method Description Electrode ndi.database.metadata_app.class.Electrode/Electrode is a constructor. addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. digitalIdentifierTypeSelected ndi.database.metadata_app.class.Electrode/digitalIdentifierTypeSelected is an undocumented builtin function. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. getDigitalIdentifier ndi.database.metadata_app.class.Electrode/getDigitalIdentifier is an undocumented builtin function. getManufacturerName ndi.database.metadata_app.class.Electrode/getManufacturerName is an undocumented builtin function. getProperties ndi.database.metadata_app.class.Electrode/getProperties is an undocumented builtin function. getProperty ndi.database.metadata_app.class.Electrode/getProperty is an undocumented builtin function. gt &gt; (GT)   Greater than relation for handles. intrinsicResistanceCheck ndi.database.metadata_app.class.Electrode/intrinsicResistanceCheck is a function. intrinsicResistanceUnitSelected ndi.database.metadata_app.class.Electrode/intrinsicResistanceUnitSelected is a function. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. makeOpenMindsObj ndi.database.metadata_app.class.Electrode/makeOpenMindsObj is a function. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. setDigitalIdentifier ndi.database.metadata_app.class.Electrode/setDigitalIdentifier is an undocumented builtin function. toTableStruct ndi.database.metadata_app.class.Electrode/toTableStruct is an undocumented builtin function. updateProperty ndi.database.metadata_app.class.Electrode/updateProperty is an undocumented builtin function."},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Electrode.m/#methods-help","title":"Methods help","text":"<p>Electrode - ndi.database.metadata_app.class.Electrode/Electrode is a constructor.</p> <pre><code>obj = Electrode(varargin)\n\n    Documentation for ndi.database.metadata_app.class.Electrode/Electrode\n       doc ndi.database.metadata_app.class.Electrode\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.database.metadata_app.class.electrode, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.Electrode/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/ISVALID, CLEAR\n\nHelp for ndi.database.metadata_app.class.Electrode/delete is inherited from superclass handle\n</code></pre> <p>digitalIdentifierTypeSelected - ndi.database.metadata_app.class.Electrode/digitalIdentifierTypeSelected is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/NE\n\nHelp for ndi.database.metadata_app.class.Electrode/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE\n\nHelp for ndi.database.metadata_app.class.Electrode/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.database.metadata_app.class.electrode, ndi.database.metadata_app.class.electrode/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.database.metadata_app.class.Electrode/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/NE\n\nHelp for ndi.database.metadata_app.class.Electrode/ge is inherited from superclass handle\n</code></pre> <p>getDigitalIdentifier - ndi.database.metadata_app.class.Electrode/getDigitalIdentifier is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>getManufacturerName - ndi.database.metadata_app.class.Electrode/getManufacturerName is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>getProperties - ndi.database.metadata_app.class.Electrode/getProperties is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>getProperty - ndi.database.metadata_app.class.Electrode/getProperty is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/NE\n\nHelp for ndi.database.metadata_app.class.Electrode/gt is inherited from superclass handle\n</code></pre> <p>intrinsicResistanceCheck - ndi.database.metadata_app.class.Electrode/intrinsicResistanceCheck is a function.</p> <pre><code>filled = intrinsicResistanceCheck(obj)\n</code></pre> <p>intrinsicResistanceUnitSelected - ndi.database.metadata_app.class.Electrode/intrinsicResistanceUnitSelected is a function.</p> <pre><code>selected = intrinsicResistanceUnitSelected(obj)\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/DELETE\n\nHelp for ndi.database.metadata_app.class.Electrode/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/NE\n\nHelp for ndi.database.metadata_app.class.Electrode/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.database.metadata_app.class.electrode, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.Electrode/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/NE\n\nHelp for ndi.database.metadata_app.class.Electrode/lt is inherited from superclass handle\n</code></pre> <p>makeOpenMindsObj - ndi.database.metadata_app.class.Electrode/makeOpenMindsObj is a function.</p> <pre><code>openminds_obj = makeOpenMindsObj(obj)\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LT\n\nHelp for ndi.database.metadata_app.class.Electrode/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODE/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.database.metadata_app.class.Electrode/notify is inherited from superclass handle\n</code></pre> <p>setDigitalIdentifier - ndi.database.metadata_app.class.Electrode/setDigitalIdentifier is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>toTableStruct - ndi.database.metadata_app.class.Electrode/toTableStruct is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>updateProperty - ndi.database.metadata_app.class.Electrode/updateProperty is an undocumented builtin function.</p> <pre><code>\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ElectrodeArray.m/","title":"CLASS ndi.database.metadata_app.class.ElectrodeArray","text":"<pre><code>ndi.database.metadata_app.class.ElectrodeArray is a class.\n    obj = ndi.database.metadata_app.class.ElectrodeArray\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ElectrodeArray.m/#superclasses","title":"Superclasses","text":"<p>ndi.database.metadata_app.class.Probe, handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ElectrodeArray.m/#properties","title":"Properties","text":"Property Description ElectrodeIdentifier NoofElectrodes Name DeviceType ProbeType ClassType Description DigitalIdentifier Manufacturer Complete sessionIdentifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ElectrodeArray.m/#methods","title":"Methods","text":"Method Description ElectrodeArray ndi.database.metadata_app.class.ElectrodeArray/ElectrodeArray is a constructor. addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. digitalIdentifierTypeSelected ndi.database.metadata_app.class.ElectrodeArray/digitalIdentifierTypeSelected is an undocumented builtin function. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. getDigitalIdentifier ndi.database.metadata_app.class.ElectrodeArray/getDigitalIdentifier is an undocumented builtin function. getManufacturerName ndi.database.metadata_app.class.ElectrodeArray/getManufacturerName is an undocumented builtin function. getProperties ndi.database.metadata_app.class.ElectrodeArray/getProperties is an undocumented builtin function. getProperty ndi.database.metadata_app.class.ElectrodeArray/getProperty is an undocumented builtin function. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. setDigitalIdentifier ndi.database.metadata_app.class.ElectrodeArray/setDigitalIdentifier is an undocumented builtin function. toTableStruct ndi.database.metadata_app.class.ElectrodeArray/toTableStruct is an undocumented builtin function. updateProperty ndi.database.metadata_app.class.ElectrodeArray/updateProperty is an undocumented builtin function."},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ElectrodeArray.m/#methods-help","title":"Methods help","text":"<p>ElectrodeArray - ndi.database.metadata_app.class.ElectrodeArray/ElectrodeArray is a constructor.</p> <pre><code>obj = ndi.database.metadata_app.class.ElectrodeArray\n\n    Documentation for ndi.database.metadata_app.class.ElectrodeArray/ElectrodeArray\n       doc ndi.database.metadata_app.class.ElectrodeArray\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.database.metadata_app.class.electrodearray, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.ElectrodeArray/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/ISVALID, CLEAR\n\nHelp for ndi.database.metadata_app.class.ElectrodeArray/delete is inherited from superclass handle\n</code></pre> <p>digitalIdentifierTypeSelected - ndi.database.metadata_app.class.ElectrodeArray/digitalIdentifierTypeSelected is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/NE\n\nHelp for ndi.database.metadata_app.class.ElectrodeArray/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY\n\nHelp for ndi.database.metadata_app.class.ElectrodeArray/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.database.metadata_app.class.electrodearray, ndi.database.metadata_app.class.electrodearray/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.database.metadata_app.class.ElectrodeArray/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/NE\n\nHelp for ndi.database.metadata_app.class.ElectrodeArray/ge is inherited from superclass handle\n</code></pre> <p>getDigitalIdentifier - ndi.database.metadata_app.class.ElectrodeArray/getDigitalIdentifier is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>getManufacturerName - ndi.database.metadata_app.class.ElectrodeArray/getManufacturerName is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>getProperties - ndi.database.metadata_app.class.ElectrodeArray/getProperties is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>getProperty - ndi.database.metadata_app.class.ElectrodeArray/getProperty is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/NE\n\nHelp for ndi.database.metadata_app.class.ElectrodeArray/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/DELETE\n\nHelp for ndi.database.metadata_app.class.ElectrodeArray/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/NE\n\nHelp for ndi.database.metadata_app.class.ElectrodeArray/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.database.metadata_app.class.electrodearray, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.ElectrodeArray/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/NE\n\nHelp for ndi.database.metadata_app.class.ElectrodeArray/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/EQ, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/GT, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LE, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LT\n\nHelp for ndi.database.metadata_app.class.ElectrodeArray/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.ELECTRODEARRAY/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.database.metadata_app.class.ElectrodeArray/notify is inherited from superclass handle\n</code></pre> <p>setDigitalIdentifier - ndi.database.metadata_app.class.ElectrodeArray/setDigitalIdentifier is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>toTableStruct - ndi.database.metadata_app.class.ElectrodeArray/toTableStruct is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>updateProperty - ndi.database.metadata_app.class.ElectrodeArray/updateProperty is an undocumented builtin function.</p> <pre><code>\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/License.m/","title":"CLASS ndi.database.metadata_app.class.License","text":"<pre><code> AuthorData A utility class for License.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/License.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/License.m/#properties","title":"Properties","text":"Property Description FullName LegalCode ShortName"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/License.m/#methods","title":"Methods","text":"Method Description License AuthorData A utility class for License. addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. getFullName ndi.database.metadata_app.class.License/getFullName is a function. getLegalCode ndi.database.metadata_app.class.License/getLegalCode is a function. getShortName ndi.database.metadata_app.class.License/getShortName is a function. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event."},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/License.m/#methods-help","title":"Methods help","text":"<p>License - AuthorData A utility class for License.</p> <pre><code>Documentation for ndi.database.metadata_app.class.License/License\n       doc ndi.database.metadata_app.class.License\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.database.metadata_app.class.license, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.License/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/ISVALID, CLEAR\n\nHelp for ndi.database.metadata_app.class.License/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/NE\n\nHelp for ndi.database.metadata_app.class.License/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.LICENSE\n\nHelp for ndi.database.metadata_app.class.License/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.database.metadata_app.class.license, ndi.database.metadata_app.class.license/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.database.metadata_app.class.License/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/EQ, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/NE\n\nHelp for ndi.database.metadata_app.class.License/ge is inherited from superclass handle\n</code></pre> <p>getFullName - ndi.database.metadata_app.class.License/getFullName is a function.</p> <pre><code>FullName = getFullName(obj)\n</code></pre> <p>getLegalCode - ndi.database.metadata_app.class.License/getLegalCode is a function.</p> <pre><code>LegalCode = getLegalCode(obj)\n</code></pre> <p>getShortName - ndi.database.metadata_app.class.License/getShortName is a function.</p> <pre><code>ShortName = getShortName(obj)\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/EQ, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/NE\n\nHelp for ndi.database.metadata_app.class.License/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/DELETE\n\nHelp for ndi.database.metadata_app.class.License/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/EQ, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/NE\n\nHelp for ndi.database.metadata_app.class.License/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.database.metadata_app.class.license, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.License/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/EQ, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/NE\n\nHelp for ndi.database.metadata_app.class.License/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/EQ, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/GT, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LT\n\nHelp for ndi.database.metadata_app.class.License/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.LICENSE, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.LICENSE/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.database.metadata_app.class.License/notify is inherited from superclass handle\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/MiscellaneousProbe.m/","title":"CLASS ndi.database.metadata_app.class.MiscellaneousProbe","text":"<pre><code>ndi.database.metadata_app.class.MiscellaneousProbe is a class.\n    obj = ndi.database.metadata_app.class.MiscellaneousProbe\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/MiscellaneousProbe.m/#superclasses","title":"Superclasses","text":"<p>ndi.database.metadata_app.class.Probe, handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/MiscellaneousProbe.m/#properties","title":"Properties","text":"Property Description Name DeviceType ProbeType ClassType Description DigitalIdentifier Manufacturer Complete sessionIdentifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/MiscellaneousProbe.m/#methods","title":"Methods","text":"Method Description MiscellaneousProbe ndi.database.metadata_app.class.MiscellaneousProbe/MiscellaneousProbe is a constructor. addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. digitalIdentifierTypeSelected ndi.database.metadata_app.class.MiscellaneousProbe/digitalIdentifierTypeSelected is an undocumented builtin function. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. getDigitalIdentifier ndi.database.metadata_app.class.MiscellaneousProbe/getDigitalIdentifier is an undocumented builtin function. getManufacturerName ndi.database.metadata_app.class.MiscellaneousProbe/getManufacturerName is an undocumented builtin function. getProperties ndi.database.metadata_app.class.MiscellaneousProbe/getProperties is an undocumented builtin function. getProperty ndi.database.metadata_app.class.MiscellaneousProbe/getProperty is an undocumented builtin function. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. setDigitalIdentifier ndi.database.metadata_app.class.MiscellaneousProbe/setDigitalIdentifier is an undocumented builtin function. toTableStruct ndi.database.metadata_app.class.MiscellaneousProbe/toTableStruct is an undocumented builtin function. updateProperty ndi.database.metadata_app.class.MiscellaneousProbe/updateProperty is an undocumented builtin function."},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/MiscellaneousProbe.m/#methods-help","title":"Methods help","text":"<p>MiscellaneousProbe - ndi.database.metadata_app.class.MiscellaneousProbe/MiscellaneousProbe is a constructor.</p> <pre><code>obj = ndi.database.metadata_app.class.MiscellaneousProbe\n\n    Documentation for ndi.database.metadata_app.class.MiscellaneousProbe/MiscellaneousProbe\n       doc ndi.database.metadata_app.class.MiscellaneousProbe\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.database.metadata_app.class.miscellaneousprobe, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.MiscellaneousProbe/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/ISVALID, CLEAR\n\nHelp for ndi.database.metadata_app.class.MiscellaneousProbe/delete is inherited from superclass handle\n</code></pre> <p>digitalIdentifierTypeSelected - ndi.database.metadata_app.class.MiscellaneousProbe/digitalIdentifierTypeSelected is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/NE\n\nHelp for ndi.database.metadata_app.class.MiscellaneousProbe/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE\n\nHelp for ndi.database.metadata_app.class.MiscellaneousProbe/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.database.metadata_app.class.miscellaneousprobe, ndi.database.metadata_app.class.miscellaneousprobe/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.database.metadata_app.class.MiscellaneousProbe/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/NE\n\nHelp for ndi.database.metadata_app.class.MiscellaneousProbe/ge is inherited from superclass handle\n</code></pre> <p>getDigitalIdentifier - ndi.database.metadata_app.class.MiscellaneousProbe/getDigitalIdentifier is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>getManufacturerName - ndi.database.metadata_app.class.MiscellaneousProbe/getManufacturerName is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>getProperties - ndi.database.metadata_app.class.MiscellaneousProbe/getProperties is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>getProperty - ndi.database.metadata_app.class.MiscellaneousProbe/getProperty is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/NE\n\nHelp for ndi.database.metadata_app.class.MiscellaneousProbe/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/DELETE\n\nHelp for ndi.database.metadata_app.class.MiscellaneousProbe/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/NE\n\nHelp for ndi.database.metadata_app.class.MiscellaneousProbe/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.database.metadata_app.class.miscellaneousprobe, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.MiscellaneousProbe/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/NE\n\nHelp for ndi.database.metadata_app.class.MiscellaneousProbe/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LT\n\nHelp for ndi.database.metadata_app.class.MiscellaneousProbe/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.MISCELLANEOUSPROBE/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.database.metadata_app.class.MiscellaneousProbe/notify is inherited from superclass handle\n</code></pre> <p>setDigitalIdentifier - ndi.database.metadata_app.class.MiscellaneousProbe/setDigitalIdentifier is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>toTableStruct - ndi.database.metadata_app.class.MiscellaneousProbe/toTableStruct is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>updateProperty - ndi.database.metadata_app.class.MiscellaneousProbe/updateProperty is an undocumented builtin function.</p> <pre><code>\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Organization.m/","title":"CLASS ndi.database.metadata_app.class.Organization","text":"<pre><code> ORGANIZATION Summary of this class goes here\n    Detailed explanation goes here\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Organization.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Organization.m/#properties","title":"Properties","text":"Property Description digitalIdentifier fullName"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Organization.m/#methods","title":"Methods","text":"Method Description Organization ORGANIZATION Construct an instance of this class getName getName Get the value in a field updateIdentifier updateIdentifier Update the value in a field updateName updateName Update the value in a field"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Organization.m/#methods-help","title":"Methods help","text":"<p>Organization - ORGANIZATION Construct an instance of this class</p> <pre><code>Documentation for ndi.database.metadata_app.class.Organization/Organization\n       doc ndi.database.metadata_app.class.Organization\n</code></pre> <p>getName - getName Get the value in a field</p> <pre><code>\n</code></pre> <p>updateIdentifier - updateIdentifier Update the value in a field</p> <pre><code>\n</code></pre> <p>updateName - updateName Update the value in a field</p> <pre><code>\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Pipette.m/","title":"CLASS ndi.database.metadata_app.class.Pipette","text":"<pre><code>ndi.database.metadata_app.class.Pipette is a class.\n    obj = ndi.database.metadata_app.class.Pipette(varargin)\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Pipette.m/#superclasses","title":"Superclasses","text":"<p>ndi.database.metadata_app.class.Probe, handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Pipette.m/#properties","title":"Properties","text":"Property Description InternalDiameter InternalDiameterUnit Name DeviceType ProbeType ClassType Description DigitalIdentifier Manufacturer Complete sessionIdentifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Pipette.m/#methods","title":"Methods","text":"Method Description InternalDiameterUnitSelected ndi.database.metadata_app.class.Pipette/InternalDiameterUnitSelected is a function. Pipette ndi.database.metadata_app.class.Pipette/Pipette is a constructor. addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. digitalIdentifierTypeSelected ndi.database.metadata_app.class.Pipette/digitalIdentifierTypeSelected is an undocumented builtin function. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. getDigitalIdentifier ndi.database.metadata_app.class.Pipette/getDigitalIdentifier is an undocumented builtin function. getManufacturerName ndi.database.metadata_app.class.Pipette/getManufacturerName is an undocumented builtin function. getProperties ndi.database.metadata_app.class.Pipette/getProperties is an undocumented builtin function. getProperty ndi.database.metadata_app.class.Pipette/getProperty is an undocumented builtin function. gt &gt; (GT)   Greater than relation for handles. intrinsicDiameterCheck ndi.database.metadata_app.class.Pipette/intrinsicDiameterCheck is a function. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. setDigitalIdentifier ndi.database.metadata_app.class.Pipette/setDigitalIdentifier is an undocumented builtin function. toTableStruct ndi.database.metadata_app.class.Pipette/toTableStruct is an undocumented builtin function. updateProperty ndi.database.metadata_app.class.Pipette/updateProperty is an undocumented builtin function."},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Pipette.m/#methods-help","title":"Methods help","text":"<p>InternalDiameterUnitSelected - ndi.database.metadata_app.class.Pipette/InternalDiameterUnitSelected is a function.</p> <pre><code>selected = InternalDiameterUnitSelected(obj)\n</code></pre> <p>Pipette - ndi.database.metadata_app.class.Pipette/Pipette is a constructor.</p> <pre><code>obj = Pipette(varargin)\n\n    Documentation for ndi.database.metadata_app.class.Pipette/Pipette\n       doc ndi.database.metadata_app.class.Pipette\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.database.metadata_app.class.pipette, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.Pipette/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/ISVALID, CLEAR\n\nHelp for ndi.database.metadata_app.class.Pipette/delete is inherited from superclass handle\n</code></pre> <p>digitalIdentifierTypeSelected - ndi.database.metadata_app.class.Pipette/digitalIdentifierTypeSelected is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/NE\n\nHelp for ndi.database.metadata_app.class.Pipette/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE\n\nHelp for ndi.database.metadata_app.class.Pipette/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.database.metadata_app.class.pipette, ndi.database.metadata_app.class.pipette/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.database.metadata_app.class.Pipette/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/NE\n\nHelp for ndi.database.metadata_app.class.Pipette/ge is inherited from superclass handle\n</code></pre> <p>getDigitalIdentifier - ndi.database.metadata_app.class.Pipette/getDigitalIdentifier is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>getManufacturerName - ndi.database.metadata_app.class.Pipette/getManufacturerName is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>getProperties - ndi.database.metadata_app.class.Pipette/getProperties is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>getProperty - ndi.database.metadata_app.class.Pipette/getProperty is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/NE\n\nHelp for ndi.database.metadata_app.class.Pipette/gt is inherited from superclass handle\n</code></pre> <p>intrinsicDiameterCheck - ndi.database.metadata_app.class.Pipette/intrinsicDiameterCheck is a function.</p> <pre><code>filled = intrinsicDiameterCheck(obj)\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/DELETE\n\nHelp for ndi.database.metadata_app.class.Pipette/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/NE\n\nHelp for ndi.database.metadata_app.class.Pipette/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.database.metadata_app.class.pipette, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.Pipette/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/NE\n\nHelp for ndi.database.metadata_app.class.Pipette/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/GT, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LT\n\nHelp for ndi.database.metadata_app.class.Pipette/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PIPETTE, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.PIPETTE/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.database.metadata_app.class.Pipette/notify is inherited from superclass handle\n</code></pre> <p>setDigitalIdentifier - ndi.database.metadata_app.class.Pipette/setDigitalIdentifier is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>toTableStruct - ndi.database.metadata_app.class.Pipette/toTableStruct is an undocumented builtin function.</p> <pre><code>\n</code></pre> <p>updateProperty - ndi.database.metadata_app.class.Pipette/updateProperty is an undocumented builtin function.</p> <pre><code>\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Probe.m/","title":"CLASS ndi.database.metadata_app.class.Probe","text":"<pre><code>ndi.database.metadata_app.class.Probe is a class.\n    obj = ndi.database.metadata_app.class.Probe\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Probe.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Probe.m/#properties","title":"Properties","text":"Property Description Name DeviceType ProbeType ClassType Description DigitalIdentifier Manufacturer Complete sessionIdentifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Probe.m/#methods","title":"Methods","text":"Method Description Probe ndi.database.metadata_app.class.Probe/Probe is a constructor. addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. digitalIdentifierTypeSelected ndi.database.metadata_app.class.Probe/digitalIdentifierTypeSelected is a function. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. getDigitalIdentifier ndi.database.metadata_app.class.Probe/getDigitalIdentifier is a function. getManufacturerName ndi.database.metadata_app.class.Probe/getManufacturerName is a function. getProperties ndi.database.metadata_app.class.Probe/getProperties is a function. getProperty ndi.database.metadata_app.class.Probe/getProperty is a function. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. setDigitalIdentifier ndi.database.metadata_app.class.Probe/setDigitalIdentifier is a function. toTableStruct ndi.database.metadata_app.class.Probe/toTableStruct is a function. updateProperty ndi.database.metadata_app.class.Probe/updateProperty is a function."},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Probe.m/#methods-help","title":"Methods help","text":"<p>Probe - ndi.database.metadata_app.class.Probe/Probe is a constructor.</p> <pre><code>obj = Probe\n\n    Documentation for ndi.database.metadata_app.class.Probe/Probe\n       doc ndi.database.metadata_app.class.Probe\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.database.metadata_app.class.probe, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.Probe/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/ISVALID, CLEAR\n\nHelp for ndi.database.metadata_app.class.Probe/delete is inherited from superclass handle\n</code></pre> <p>digitalIdentifierTypeSelected - ndi.database.metadata_app.class.Probe/digitalIdentifierTypeSelected is a function.</p> <pre><code>selected = digitalIdentifierTypeSelected(obj)\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/NE\n\nHelp for ndi.database.metadata_app.class.Probe/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.PROBE\n\nHelp for ndi.database.metadata_app.class.Probe/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.database.metadata_app.class.probe, ndi.database.metadata_app.class.probe/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.database.metadata_app.class.Probe/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/NE\n\nHelp for ndi.database.metadata_app.class.Probe/ge is inherited from superclass handle\n</code></pre> <p>getDigitalIdentifier - ndi.database.metadata_app.class.Probe/getDigitalIdentifier is a function.</p> <pre><code>[digitalIdentifierType, digitalIdentifier] = getDigitalIdentifier(obj)\n</code></pre> <p>getManufacturerName - ndi.database.metadata_app.class.Probe/getManufacturerName is a function.</p> <pre><code>manufacturerName = getManufacturerName(obj)\n</code></pre> <p>getProperties - ndi.database.metadata_app.class.Probe/getProperties is a function.</p> <pre><code>properties = getProperties(obj)\n</code></pre> <p>getProperty - ndi.database.metadata_app.class.Probe/getProperty is a function.</p> <pre><code>property = getProperty(obj, name)\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/NE\n\nHelp for ndi.database.metadata_app.class.Probe/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/DELETE\n\nHelp for ndi.database.metadata_app.class.Probe/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/NE\n\nHelp for ndi.database.metadata_app.class.Probe/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.database.metadata_app.class.probe, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.Probe/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/NE\n\nHelp for ndi.database.metadata_app.class.Probe/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LT\n\nHelp for ndi.database.metadata_app.class.Probe/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PROBE, NDI.DATABASE.METADATA_APP.CLASS.PROBE/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.PROBE/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.database.metadata_app.class.Probe/notify is inherited from superclass handle\n</code></pre> <p>setDigitalIdentifier - ndi.database.metadata_app.class.Probe/setDigitalIdentifier is a function.</p> <pre><code>[digitalIdentifier, digitalIdentifierType] = setDigitalIdentifier(obj, digitalIdentifierType, digitalIdentifier)\n</code></pre> <p>toTableStruct - ndi.database.metadata_app.class.Probe/toTableStruct is a function.</p> <pre><code>s = toTableStruct(obj)\n</code></pre> <p>updateProperty - ndi.database.metadata_app.class.Probe/updateProperty is a function.</p> <pre><code>updateProperty(obj, name, value)\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ProbeData.m/","title":"CLASS ndi.database.metadata_app.class.ProbeData","text":"<pre><code> ProbeData A utility class for storing and retrieving information about probes.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ProbeData.m/#superclasses","title":"Superclasses","text":"<p>matlab.mixin.Heterogeneous, handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ProbeData.m/#properties","title":"Properties","text":"Property Description TypeAssigned A Map storing all the probes that have selected a type. ProbeList"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ProbeData.m/#methods","title":"Methods","text":"Method Description ProbeData ProbeData A utility class for storing and retrieving information about probes. addNewProbe ndi.database.metadata_app.class.ProbeData/addNewProbe is a function. addlistener addlistener  Add listener for event. createNewProbe ndi.database.metadata_app.class.ProbeData/createNewProbe is a function. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. formatTable ndi.database.metadata_app.class.ProbeData/formatTable is a function. ge &gt;= (GE)   Greater than or equal relation for handles. getPipetteList ndi.database.metadata_app.class.ProbeData/getPipetteList is a function. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. probeExist ndi.database.metadata_app.class.ProbeData/probeExist is a function. replaceProbe ndi.database.metadata_app.class.ProbeData/replaceProbe is a function."},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/ProbeData.m/#methods-help","title":"Methods help","text":"<p>ProbeData - ProbeData A utility class for storing and retrieving information about probes.</p> <pre><code>Documentation for ndi.database.metadata_app.class.ProbeData/ProbeData\n       doc ndi.database.metadata_app.class.ProbeData\n</code></pre> <p>addNewProbe - ndi.database.metadata_app.class.ProbeData/addNewProbe is a function.</p> <pre><code>addNewProbe(obj, probe)\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.database.metadata_app.class.probedata, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.ProbeData/addlistener is inherited from superclass handle\n</code></pre> <p>createNewProbe - ndi.database.metadata_app.class.ProbeData/createNewProbe is a function.</p> <pre><code>createNewProbe(obj, index, probeType)\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/ISVALID, CLEAR\n\nHelp for ndi.database.metadata_app.class.ProbeData/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/NE\n\nHelp for ndi.database.metadata_app.class.ProbeData/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA\n\nHelp for ndi.database.metadata_app.class.ProbeData/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.database.metadata_app.class.probedata, ndi.database.metadata_app.class.probedata/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.database.metadata_app.class.ProbeData/findprop is inherited from superclass handle\n</code></pre> <p>formatTable - ndi.database.metadata_app.class.ProbeData/formatTable is a function.</p> <pre><code>t = formatTable(obj)\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/NE\n\nHelp for ndi.database.metadata_app.class.ProbeData/ge is inherited from superclass handle\n</code></pre> <p>getPipetteList - ndi.database.metadata_app.class.ProbeData/getPipetteList is a function.</p> <pre><code>list = getPipetteList(obj)\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/NE\n\nHelp for ndi.database.metadata_app.class.ProbeData/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/DELETE\n\nHelp for ndi.database.metadata_app.class.ProbeData/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/NE\n\nHelp for ndi.database.metadata_app.class.ProbeData/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.database.metadata_app.class.probedata, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.ProbeData/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/NE\n\nHelp for ndi.database.metadata_app.class.ProbeData/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LT\n\nHelp for ndi.database.metadata_app.class.ProbeData/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.PROBEDATA/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.database.metadata_app.class.ProbeData/notify is inherited from superclass handle\n</code></pre> <p>probeExist - ndi.database.metadata_app.class.ProbeData/probeExist is a function.</p> <pre><code>exist = probeExist(obj, index)\n</code></pre> <p>replaceProbe - ndi.database.metadata_app.class.ProbeData/replaceProbe is a function.</p> <pre><code>replaceProbe(obj, index, probe)\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Species.m/","title":"CLASS ndi.database.metadata_app.class.Species","text":"<pre><code> Species A  class for Species.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Species.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Species.m/#properties","title":"Properties","text":"Property Description Name Synonym OntologyIdentifier uuid Definition Description"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Species.m/#methods","title":"Methods","text":"Method Description Species Species A  class for Species. addlistener addlistener  Add listener for event. convertToOpenMinds ndi.database.metadata_app.class.Species/convertToOpenMinds is a function. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. fromStruct ndi.database.metadata_app.class.Species.fromStruct is a function. ge &gt;= (GE)   Greater than or equal relation for handles. getProperty ndi.database.metadata_app.class.Species/getProperty is a function. getUuid ndi.database.metadata_app.class.Species/getUuid is a function. gt &gt; (GT)   Greater than relation for handles. isEqual ndi.database.metadata_app.class.Species/isEqual is a function. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. toString ndi.database.metadata_app.class.Species/toString is a function. toStruct ndi.database.metadata_app.class.Species/toStruct is a function. updateProperty ndi.database.metadata_app.class.Species/updateProperty is a function."},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Species.m/#methods-help","title":"Methods help","text":"<p>Species - Species A  class for Species.</p> <pre><code>Documentation for ndi.database.metadata_app.class.Species/Species\n       doc ndi.database.metadata_app.class.Species\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.database.metadata_app.class.species, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.Species/addlistener is inherited from superclass handle\n</code></pre> <p>convertToOpenMinds - ndi.database.metadata_app.class.Species/convertToOpenMinds is a function.</p> <pre><code>instances = convertToOpenMinds(obj)\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/ISVALID, CLEAR\n\nHelp for ndi.database.metadata_app.class.Species/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/NE\n\nHelp for ndi.database.metadata_app.class.Species/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.SPECIES\n\nHelp for ndi.database.metadata_app.class.Species/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.database.metadata_app.class.species, ndi.database.metadata_app.class.species/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.database.metadata_app.class.Species/findprop is inherited from superclass handle\n</code></pre> <p>fromStruct - ndi.database.metadata_app.class.Species.fromStruct is a function.</p> <pre><code>obj = ndi.database.metadata_app.class.Species.fromStruct(s)\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/NE\n\nHelp for ndi.database.metadata_app.class.Species/ge is inherited from superclass handle\n</code></pre> <p>getProperty - ndi.database.metadata_app.class.Species/getProperty is a function.</p> <pre><code>property = getProperty(obj, name)\n</code></pre> <p>getUuid - ndi.database.metadata_app.class.Species/getUuid is a function.</p> <pre><code>uuid = getUuid(object)\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/NE\n\nHelp for ndi.database.metadata_app.class.Species/gt is inherited from superclass handle\n</code></pre> <p>isEqual - ndi.database.metadata_app.class.Species/isEqual is a function.</p> <pre><code>equal = isEqual(obj, species)\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/DELETE\n\nHelp for ndi.database.metadata_app.class.Species/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/NE\n\nHelp for ndi.database.metadata_app.class.Species/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.database.metadata_app.class.species, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.Species/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/NE\n\nHelp for ndi.database.metadata_app.class.Species/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LT\n\nHelp for ndi.database.metadata_app.class.Species/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SPECIES, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.SPECIES/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.database.metadata_app.class.Species/notify is inherited from superclass handle\n</code></pre> <p>toString - ndi.database.metadata_app.class.Species/toString is a function.</p> <pre><code>str = toString(obj)\n</code></pre> <p>toStruct - ndi.database.metadata_app.class.Species/toStruct is a function.</p> <pre><code>s = toStruct(obj)\n</code></pre> <p>updateProperty - ndi.database.metadata_app.class.Species/updateProperty is a function.</p> <pre><code>updateProperty(obj, name, value)\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SpeciesData.m/","title":"CLASS ndi.database.metadata_app.class.SpeciesData","text":"<pre><code> SpeciesData A utility class for storing and retrieving information about Species.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SpeciesData.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SpeciesData.m/#properties","title":"Properties","text":"Property Description SpeciesList"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SpeciesData.m/#methods","title":"Methods","text":"Method Description SpeciesData SpeciesData A utility class for storing and retrieving information about Species. addItem ndi.database.metadata_app.class.SpeciesData/addItem is a function. addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. getItem getItem Get a struct with species details for the given name getSpeciesList getSpeciesList Same as S = SpeciesData.SpeciesList gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. removeItem removeItem Remove the specified species form the list. setSpeciesList setSpeciesList Same as SpeciesData.SpeciesList = S updateProperty updateProperty Update the value in a field for the given"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SpeciesData.m/#methods-help","title":"Methods help","text":"<p>SpeciesData - SpeciesData A utility class for storing and retrieving information about Species.</p> <pre><code>Documentation for ndi.database.metadata_app.class.SpeciesData/SpeciesData\n       doc ndi.database.metadata_app.class.SpeciesData\n</code></pre> <p>addItem - ndi.database.metadata_app.class.SpeciesData/addItem is a function.</p> <pre><code>addItem(obj, varargin)\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.database.metadata_app.class.speciesdata, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.SpeciesData/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/ISVALID, CLEAR\n\nHelp for ndi.database.metadata_app.class.SpeciesData/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/NE\n\nHelp for ndi.database.metadata_app.class.SpeciesData/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA\n\nHelp for ndi.database.metadata_app.class.SpeciesData/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.database.metadata_app.class.speciesdata, ndi.database.metadata_app.class.speciesdata/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.database.metadata_app.class.SpeciesData/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/NE\n\nHelp for ndi.database.metadata_app.class.SpeciesData/ge is inherited from superclass handle\n</code></pre> <p>getItem - getItem Get a struct with species details for the given name</p> <pre><code>\n</code></pre> <p>getSpeciesList - getSpeciesList Same as S = SpeciesData.SpeciesList</p> <pre><code>\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/NE\n\nHelp for ndi.database.metadata_app.class.SpeciesData/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/DELETE\n\nHelp for ndi.database.metadata_app.class.SpeciesData/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/NE\n\nHelp for ndi.database.metadata_app.class.SpeciesData/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.database.metadata_app.class.speciesdata, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.SpeciesData/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/NE\n\nHelp for ndi.database.metadata_app.class.SpeciesData/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LT\n\nHelp for ndi.database.metadata_app.class.SpeciesData/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.SPECIESDATA/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.database.metadata_app.class.SpeciesData/notify is inherited from superclass handle\n</code></pre> <p>removeItem - removeItem Remove the specified species form the list.</p> <pre><code>Usage:\n    SpeciesData.removeItem(speciesIndex) removes the species from the\n    list where speciesIndex is the index in the struct.\n</code></pre> <p>setSpeciesList - setSpeciesList Same as SpeciesData.SpeciesList = S</p> <pre><code>\n</code></pre> <p>updateProperty - updateProperty Update the value in a field for the given</p> <pre><code>speciesIndex\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Strain.m/","title":"CLASS ndi.database.metadata_app.class.Strain","text":"<pre><code> STRAIN Summary of this class goes here\n    Detailed explanation goes here\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Strain.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Strain.m/#properties","title":"Properties","text":"Property Description Name"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Strain.m/#methods","title":"Methods","text":"Method Description Strain STRAIN Summary of this class goes here addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. fromStruct ndi.database.metadata_app.class.Strain.fromStruct is a function. ge &gt;= (GE)   Greater than or equal relation for handles. getProperty ndi.database.metadata_app.class.Strain/getProperty is a function. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. toString ndi.database.metadata_app.class.Strain/toString is a function. toStruct ndi.database.metadata_app.class.Strain/toStruct is a function. updateProperty ndi.database.metadata_app.class.Strain/updateProperty is a function."},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Strain.m/#methods-help","title":"Methods help","text":"<p>Strain - STRAIN Summary of this class goes here</p> <pre><code>Detailed explanation goes here\n\n    Documentation for ndi.database.metadata_app.class.Strain/Strain\n       doc ndi.database.metadata_app.class.Strain\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.database.metadata_app.class.strain, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.Strain/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/ISVALID, CLEAR\n\nHelp for ndi.database.metadata_app.class.Strain/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/NE\n\nHelp for ndi.database.metadata_app.class.Strain/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.STRAIN\n\nHelp for ndi.database.metadata_app.class.Strain/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.database.metadata_app.class.strain, ndi.database.metadata_app.class.strain/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.database.metadata_app.class.Strain/findprop is inherited from superclass handle\n</code></pre> <p>fromStruct - ndi.database.metadata_app.class.Strain.fromStruct is a function.</p> <pre><code>obj = ndi.database.metadata_app.class.Strain.fromStruct(s)\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/EQ, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/NE\n\nHelp for ndi.database.metadata_app.class.Strain/ge is inherited from superclass handle\n</code></pre> <p>getProperty - ndi.database.metadata_app.class.Strain/getProperty is a function.</p> <pre><code>property = getProperty(obj, name)\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/EQ, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/NE\n\nHelp for ndi.database.metadata_app.class.Strain/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/DELETE\n\nHelp for ndi.database.metadata_app.class.Strain/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/EQ, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/NE\n\nHelp for ndi.database.metadata_app.class.Strain/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.database.metadata_app.class.strain, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.Strain/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/EQ, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/NE\n\nHelp for ndi.database.metadata_app.class.Strain/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/EQ, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/GT, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LE, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LT\n\nHelp for ndi.database.metadata_app.class.Strain/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.STRAIN, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.STRAIN/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.database.metadata_app.class.Strain/notify is inherited from superclass handle\n</code></pre> <p>toString - ndi.database.metadata_app.class.Strain/toString is a function.</p> <pre><code>str = toString(obj)\n</code></pre> <p>toStruct - ndi.database.metadata_app.class.Strain/toStruct is a function.</p> <pre><code>s = toStruct(obj)\n</code></pre> <p>updateProperty - ndi.database.metadata_app.class.Strain/updateProperty is a function.</p> <pre><code>updateProperty(obj, name, value)\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Subject.m/","title":"CLASS ndi.database.metadata_app.class.Subject","text":"<pre><code> SUBJECT Summary of this class goes here\n    Detailed explanation goes here\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Subject.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Subject.m/#properties","title":"Properties","text":"Property Description SubjectName BiologicalSexList SpeciesList StrainList StrainMap sessionIdentifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Subject.m/#methods","title":"Methods","text":"Method Description Subject SUBJECT Summary of this class goes here addItem ndi.database.metadata_app.class.Subject/addItem is a function. addStrain ndi.database.metadata_app.class.Subject/addStrain is a function. addlistener addlistener  Add listener for event. biologicalSexToString ndi.database.metadata_app.class.Subject/biologicalSexToString is a function. delete DELETE   Delete a handle object. deleteBiologicalSex ndi.database.metadata_app.class.Subject/deleteBiologicalSex is a function. deleteItem ndi.database.metadata_app.class.Subject/deleteItem is a function. deleteSpeciesList ndi.database.metadata_app.class.Subject/deleteSpeciesList is a function. deleteStrainList ndi.database.metadata_app.class.Subject/deleteStrainList is a function. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. formatTable ndi.database.metadata_app.class.Subject/formatTable is a function. fromStruct ndi.database.metadata_app.class.Subject.fromStruct is a function. ge &gt;= (GE)   Greater than or equal relation for handles. getSpeciesList ndi.database.metadata_app.class.Subject/getSpeciesList is a function. gt &gt; (GT)   Greater than relation for handles. isEqual ndi.database.metadata_app.class.Subject/isEqual is a function. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. loadobj Customize load process for objects lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. padList Helper function to pad a list with a placeholder to match the target length sortSpeciesList ndi.database.metadata_app.class.Subject/sortSpeciesList is a function. toStringArr ndi.database.metadata_app.class.Subject/toStringArr is a function. toStruct ndi.database.metadata_app.class.Subject/toStruct is a function. updateProperty ndi.database.metadata_app.class.Subject/updateProperty is a function."},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/Subject.m/#methods-help","title":"Methods help","text":"<p>Subject - SUBJECT Summary of this class goes here</p> <pre><code>Detailed explanation goes here\n\n    Documentation for ndi.database.metadata_app.class.Subject/Subject\n       doc ndi.database.metadata_app.class.Subject\n</code></pre> <p>addItem - ndi.database.metadata_app.class.Subject/addItem is a function.</p> <pre><code>addItem(obj, name, value)\n</code></pre> <p>addStrain - ndi.database.metadata_app.class.Subject/addStrain is a function.</p> <pre><code>addStrain(obj, strainName)\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.database.metadata_app.class.subject, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.Subject/addlistener is inherited from superclass handle\n</code></pre> <p>biologicalSexToString - ndi.database.metadata_app.class.Subject/biologicalSexToString is a function.</p> <pre><code>str = biologicalSexToString(obj)\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/ISVALID, CLEAR\n\nHelp for ndi.database.metadata_app.class.Subject/delete is inherited from superclass handle\n</code></pre> <p>deleteBiologicalSex - ndi.database.metadata_app.class.Subject/deleteBiologicalSex is a function.</p> <pre><code>deleteBiologicalSex(obj)\n</code></pre> <p>deleteItem - ndi.database.metadata_app.class.Subject/deleteItem is a function.</p> <pre><code>deleteItem(obj, name)\n</code></pre> <p>deleteSpeciesList - ndi.database.metadata_app.class.Subject/deleteSpeciesList is a function.</p> <pre><code>deleteSpeciesList(obj)\n</code></pre> <p>deleteStrainList - ndi.database.metadata_app.class.Subject/deleteStrainList is a function.</p> <pre><code>deleteStrainList(obj)\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/NE\n\nHelp for ndi.database.metadata_app.class.Subject/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT\n\nHelp for ndi.database.metadata_app.class.Subject/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.database.metadata_app.class.subject, ndi.database.metadata_app.class.subject/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.database.metadata_app.class.Subject/findprop is inherited from superclass handle\n</code></pre> <p>formatTable - ndi.database.metadata_app.class.Subject/formatTable is a function.</p> <pre><code>formattedStruct = formatTable(obj)\n</code></pre> <p>fromStruct - ndi.database.metadata_app.class.Subject.fromStruct is a function.</p> <pre><code>obj = ndi.database.metadata_app.class.Subject.fromStruct(s)\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/NE\n\nHelp for ndi.database.metadata_app.class.Subject/ge is inherited from superclass handle\n</code></pre> <p>getSpeciesList - ndi.database.metadata_app.class.Subject/getSpeciesList is a function.</p> <pre><code>speciesList = getSpeciesList(obj)\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/NE\n\nHelp for ndi.database.metadata_app.class.Subject/gt is inherited from superclass handle\n</code></pre> <p>isEqual - ndi.database.metadata_app.class.Subject/isEqual is a function.</p> <pre><code>equal = isEqual(obj, subject)\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/DELETE\n\nHelp for ndi.database.metadata_app.class.Subject/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/NE\n\nHelp for ndi.database.metadata_app.class.Subject/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.database.metadata_app.class.subject, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.Subject/listener is inherited from superclass handle\n</code></pre> <p>loadobj - Customize load process for objects</p> <pre><code>This MATLAB function deserializes an object represented by a.\n\n    Syntax\n      b = loadobj(a)\n\n    Input Arguments\n      a - Content to be deserialized\n        object | structure\n\n    Output Arguments\n      b - Object passed to load function\n        object\n\n    Examples\n      web /Applications/MATLAB_R2024b.app/help/matlab/ref/loadobj.html#mw_a49e89ac-ff4a-41ec-91bc-9f53cc933896\n\n    See also load, save, saveobj\n\n    Introduced in MATLAB before R2006a\n    Documentation for loadobj\n       doc loadobj\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/NE\n\nHelp for ndi.database.metadata_app.class.Subject/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LT\n\nHelp for ndi.database.metadata_app.class.Subject/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.SUBJECT/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.database.metadata_app.class.Subject/notify is inherited from superclass handle\n</code></pre> <p>padList - Helper function to pad a list with a placeholder to match the target length</p> <pre><code>\n</code></pre> <p>sortSpeciesList - ndi.database.metadata_app.class.Subject/sortSpeciesList is a function.</p> <pre><code>sortedSpeciesList = sortSpeciesList(obj)\n</code></pre> <p>toStringArr - ndi.database.metadata_app.class.Subject/toStringArr is a function.</p> <pre><code>str = toStringArr(obj, name)\n</code></pre> <p>toStruct - ndi.database.metadata_app.class.Subject/toStruct is a function.</p> <pre><code>s = toStruct(obj)\n</code></pre> <p>updateProperty - ndi.database.metadata_app.class.Subject/updateProperty is a function.</p> <pre><code>updateProperty(obj, name, idx, value)\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SubjectData.m/","title":"CLASS ndi.database.metadata_app.class.SubjectData","text":"<pre><code> SubjectData A utility class for storing and retrieving information about subjecs.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SubjectData.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SubjectData.m/#properties","title":"Properties","text":"Property Description SubjectList"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SubjectData.m/#methods","title":"Methods","text":"Method Description SpeciesSelected ndi.database.metadata_app.class.SubjectData/SpeciesSelected is a function. SubjectData SubjectData A utility class for storing and retrieving information about subjecs. addItem addItem Add a subject to the list. addlistener addlistener  Add listener for event. assignName ndi.database.metadata_app.class.SubjectData/assignName is a function. biologicalSexSelected ndi.database.metadata_app.class.SubjectData/biologicalSexSelected is a function. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. formatTable ndi.database.metadata_app.class.SubjectData/formatTable is a function. ge &gt;= (GE)   Greater than or equal relation for handles. getIndex ndi.database.metadata_app.class.SubjectData/getIndex is a function. getItem getItem Get a struct with subject details for the given index getSubjectList ndi.database.metadata_app.class.SubjectData/getSubjectList is a function. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. removeItem removeItem Remove the specified subject form the list. setSubjectList ndi.database.metadata_app.class.SubjectData/setSubjectList is a function."},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/SubjectData.m/#methods-help","title":"Methods help","text":"<p>SpeciesSelected - ndi.database.metadata_app.class.SubjectData/SpeciesSelected is a function.</p> <pre><code>selected = SpeciesSelected(obj, subjectName)\n</code></pre> <p>SubjectData - SubjectData A utility class for storing and retrieving information about subjecs.</p> <pre><code>Documentation for ndi.database.metadata_app.class.SubjectData/SubjectData\n       doc ndi.database.metadata_app.class.SubjectData\n</code></pre> <p>addItem - addItem Add a subject to the list.</p> <pre><code>Usage:\n    newSubject = subjectData.addItem(subjectIndex) adds a subject \n    to the end of the list.\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.database.metadata_app.class.subjectdata, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.SubjectData/addlistener is inherited from superclass handle\n</code></pre> <p>assignName - ndi.database.metadata_app.class.SubjectData/assignName is a function.</p> <pre><code>assignName(obj)\n</code></pre> <p>biologicalSexSelected - ndi.database.metadata_app.class.SubjectData/biologicalSexSelected is a function.</p> <pre><code>selected = biologicalSexSelected(obj, subjectName)\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/ISVALID, CLEAR\n\nHelp for ndi.database.metadata_app.class.SubjectData/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/NE\n\nHelp for ndi.database.metadata_app.class.SubjectData/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA\n\nHelp for ndi.database.metadata_app.class.SubjectData/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.database.metadata_app.class.subjectdata, ndi.database.metadata_app.class.subjectdata/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.database.metadata_app.class.SubjectData/findprop is inherited from superclass handle\n</code></pre> <p>formatTable - ndi.database.metadata_app.class.SubjectData/formatTable is a function.</p> <pre><code>data = formatTable(obj)\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/NE\n\nHelp for ndi.database.metadata_app.class.SubjectData/ge is inherited from superclass handle\n</code></pre> <p>getIndex - ndi.database.metadata_app.class.SubjectData/getIndex is a function.</p> <pre><code>idx = getIndex(obj, subjectName)\n</code></pre> <p>getItem - getItem Get a struct with subject details for the given index</p> <pre><code>\n</code></pre> <p>getSubjectList - ndi.database.metadata_app.class.SubjectData/getSubjectList is a function.</p> <pre><code>S = getSubjectList(obj)\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/NE\n\nHelp for ndi.database.metadata_app.class.SubjectData/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/DELETE\n\nHelp for ndi.database.metadata_app.class.SubjectData/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/NE\n\nHelp for ndi.database.metadata_app.class.SubjectData/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.database.metadata_app.class.subjectdata, matlab.metadata.Property, events\n\nHelp for ndi.database.metadata_app.class.SubjectData/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/NE\n\nHelp for ndi.database.metadata_app.class.SubjectData/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/EQ, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/GT, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LE, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LT\n\nHelp for ndi.database.metadata_app.class.SubjectData/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/ADDLISTENER, NDI.DATABASE.METADATA_APP.CLASS.SUBJECTDATA/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.database.metadata_app.class.SubjectData/notify is inherited from superclass handle\n</code></pre> <p>removeItem - removeItem Remove the specified subject form the list.</p> <pre><code>Usage:\n    subjectData.removeItem(subjectIndex) removes the author from the\n    list where subjectIndex is the index in the struct.\n</code></pre> <p>setSubjectList - ndi.database.metadata_app.class.SubjectData/setSubjectList is a function.</p> <pre><code>setSubjectList(obj, S)\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bclass/test.m/","title":"ndi.database.metadata_app.class.test","text":"<pre><code>ndi.database.metadata_app.class.test is a script.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/SearchSpecies.m/","title":"ndi.database.metadata_app.fun.SearchSpecies","text":"<pre><code>ndi.database.metadata_app.fun.SearchSpecies is a function.\n    [species, uuid] = ndi.database.metadata_app.fun.SearchSpecies(term)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/checkValidRORID.m/","title":"ndi.database.metadata_app.fun.checkValidRORID","text":"<pre><code>ndi.database.metadata_app.fun.checkValidRORID is a function.\n    [name, formattedID] = ndi.database.metadata_app.fun.checkValidRORID(rorid)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/expandDropDownItems.m/","title":"ndi.database.metadata_app.fun.expandDropDownItems","text":"<pre><code> expandDropDownItems Expands a dropdown list by adding default and new options.\n\n    [items, itemsData] = expandDropDownItems(items, itemsData, schemaName)\n    takes an existing cell array of dropdown items (items) and their\n    corresponding data (itemsData), and expands it by adding default options.\n    The default options include selecting an existing item and creating a\n    new item with a specified schema name.\n\n    Input Arguments:\n    - items: Existing cell array of dropdown items.\n    - itemsData: Corresponding data for each item in items.\n    - schemaName: Name of the schema for new items.\n\n    Output Arguments:\n    - items: Updated cell array with added default options.\n    - itemsData: Updated data array with corresponding default values.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/generateShortName.m/","title":"ndi.database.metadata_app.fun.generateShortName","text":"<pre><code>ndi.database.metadata_app.fun.generateShortName is a function.\n    shortName = ndi.database.metadata_app.fun.generateShortName(fullName, length)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getCCByLicences.m/","title":"ndi.database.metadata_app.fun.getCCByLicences","text":"<pre><code>  getCCByLicences - Get names and short names for CC BY licences from openMINDS\n\n    Syntax\n        [names, shortNames] = ndi.database.metadata_app.fun.getCCByLicences()\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getOpenMindsInstances.m/","title":"ndi.database.metadata_app.fun.getOpenMindsInstances","text":"<pre><code>  getOpenMindsInstances - Get names and short names for controlled term instances from openMINDS\n\n    Syntax\n        [names, labels] = ndi.database.metadata_app.fun.getOpenMindsInstances(schemaName)\n\n    Output arguments\n        names  : String array of openMINDS names. Names correspond with\n                 instance names of openMINDS instances (not the name property)\n        labels : String array of corresponding labels. Labels correspond\n                 with the name property of the instances.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getOpenmindsInstanceFile.m/","title":"ndi.database.metadata_app.fun.getOpenmindsInstanceFile","text":"<pre><code>  Todo: Return a folder where to save openminds jsons. Right now,\n  instances are saved as structs to a matfile.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getOrcId.m/","title":"ndi.database.metadata_app.fun.getOrcId","text":"<pre><code>  name = 'stephen van hooser';\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getOrcIdSearchUrl.m/","title":"ndi.database.metadata_app.fun.getOrcIdSearchUrl","text":"<pre><code>ndi.database.metadata_app.fun.getOrcIdSearchUrl is a function.\n    apiQueryUrl = ndi.database.metadata_app.fun.getOrcIdSearchUrl(name)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getPublicationTitleFromDoi.m/","title":"ndi.database.metadata_app.fun.getPublicationTitleFromDoi","text":"<pre><code>ndi.database.metadata_app.fun.getPublicationTitleFromDoi is a function.\n    [publicationTitle, doi] = ndi.database.metadata_app.fun.getPublicationTitleFromDoi(doi)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getPubmedIdFromDoi.m/","title":"ndi.database.metadata_app.fun.getPubmedIdFromDoi","text":"<pre><code>ndi.database.metadata_app.fun.getPubmedIdFromDoi is a function.\n    [pmId, pmcId] = ndi.database.metadata_app.fun.getPubmedIdFromDoi(doi)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getRequiredFields.m/","title":"ndi.database.metadata_app.fun.getRequiredFields","text":"<pre><code>ndi.database.metadata_app.fun.getRequiredFields is a function.\n    S = ndi.database.metadata_app.fun.getRequiredFields\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getRorId.m/","title":"ndi.database.metadata_app.fun.getRorId","text":"<pre><code>ndi.database.metadata_app.fun.getRorId is a function.\n    rorid = ndi.database.metadata_app.fun.getRorId(name)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getRorIdSearchUrl.m/","title":"ndi.database.metadata_app.fun.getRorIdSearchUrl","text":"<pre><code>ndi.database.metadata_app.fun.getRorIdSearchUrl is a function.\n    apiQueryUrl = ndi.database.metadata_app.fun.getRorIdSearchUrl(name)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/getSpeciesInfo.m/","title":"ndi.database.metadata_app.fun.getSpeciesInfo","text":"<pre><code>ndi.database.metadata_app.fun.getSpeciesInfo is a function.\n    [name, ontology_identifier, synonym] = ndi.database.metadata_app.fun.getSpeciesInfo(uuid)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadExperimentalApproach.m/","title":"ndi.database.metadata_app.fun.loadExperimentalApproach","text":"<pre><code>  loadExperimentalApproach loads the experimental approach\n  and returns it as a checkList nodes.\n\n  Output:\n    cbt - checkList nodes containing the experimental approach\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadInstancesToListBox.m/","title":"ndi.database.metadata_app.fun.loadInstancesToListBox","text":"<pre><code> loadInstancesToListBox Load the instances of a controlled term into a list box\n\n  Inputs\n    listBox: The list box to load the instances into\n    name: A string representing the name of the openminds controlledterms to load\n    terms: The term to be filtered\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadInstancesToTreeCheckbox.m/","title":"ndi.database.metadata_app.fun.loadInstancesToTreeCheckbox","text":"<pre><code> loadInstancesToTreeCheckbox Load the instances of a controlled term into a tree checkbox\n\n  Inputs\n    tree: The tree to load the instances into\n    name: A string representing the name of the openminds controlledterms to load\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadOpenMindsInstanceCatalog.m/","title":"ndi.database.metadata_app.fun.loadOpenMindsInstanceCatalog","text":"<pre><code>  loadOpenMindsInstanceCatalog - Get a catalog of controlled instances from openMINDS\n\n    Syntax\n        catalog = ndi.database.metadata_app.fun.loadOpenMindsInstanceCatalog(openMindsType)\n\n    Input arguments\n        openMindsType - Name of the openMINDS type, i.e \"Species\"\n\n    Output arguments\n        catalog - A catalog of openMINDS controlled instances.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadProbes.m/","title":"ndi.database.metadata_app.fun.loadProbes","text":"<pre><code>  LOADPROBES loads the probe data from ndi session\n\n   ndi.database.metadat_app.fun.loadProbes(S)\n  Inputs:\n   S - ndi.session.dir object\n  Output:\n   PROBEDATA - a ndi.database.metadat_app.class.ProbeData object that contains all the probe data in session S\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadSubjects.m/","title":"ndi.database.metadata_app.fun.loadSubjects","text":"<pre><code>  LOADSUBJECTS loads the subject data from ndi session\n\n   ndi.database.metadata_app.fun.loadSubjects(S)\n  Inputs:\n   S - ndi.session.dir object\n  Output:\n   SUBJECTDATA - a ndi.database.metadata_app.class.SubjectData object that contains all the subject data in session S\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadTechniquesEmployed.m/","title":"ndi.database.metadata_app.fun.loadTechniquesEmployed","text":"<pre><code>  loadTechniquesEmployed loads the techniques employed\n  and returns it as a checkList nodes.\n\n\n  Output:\n    cbt - checkList nodes containing the TechniquesEmployed\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadUnits.m/","title":"ndi.database.metadata_app.fun.loadUnits","text":"<pre><code>  loadUnits loads the techniques from the given path\n  and returns it as a checkList nodes.\n\n\n  Output:\n    cbt - checkList nodes containing the loadUnits\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadUserInstanceCatalog.m/","title":"ndi.database.metadata_app.fun.loadUserInstanceCatalog","text":"<pre><code>  loadUserInstanceCatalog - Load a catalog of user metadata instances\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/loadUserInstances.m/","title":"ndi.database.metadata_app.fun.loadUserInstances","text":"<pre><code>  loadUserInstances - Load user instances of metadata based on openMINDS\n\n    Syntax:\n        instances = ndi.database.metadata_app.fun.loadUserInstances(name)\n\n    Input arguments:\n        name - A name describing what kind of instances to load.\n\n    Output arguments:\n        instances - A struct array of instances\n\n    See also ndi.database.metadata_app.fun.saveUserInstances\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/mustBeValidDate.m/","title":"ndi.database.metadata_app.fun.mustBeValidDate","text":"<pre><code>ndi.database.metadata_app.fun.mustBeValidDate is a function.\n    ndi.database.metadata_app.fun.mustBeValidDate(value)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/parseOpenMINDSAtID.m/","title":"ndi.database.metadata_app.fun.parseOpenMINDSAtID","text":"<pre><code>  parseOpenMINDSAtID - Parse an openMINDS @id\n\n    Syntax:\n        S = parseOpenMINDSAtID(semanticName)\n\n        [type, name] = parseOpenMINDSAtID(semanticName)\n\n    Input:\n        semanticName : A URI representing an openMINDS instance @id. Ex: https://openminds.ebrains.eu/instances/geneticStrainType/knockout\n\n    Output:\n        S : A struct with fields\n            - Type\n            - Name\n\n        OR\n\n        type : openMINDS type, i.e schema specification\n        name : name of instance\n\n    Example:\n\n     atId = \"https://openminds.ebrains.eu/instances/geneticStrainType/knockout\"\n     S = ndi.database.metadata_app.fun.parseOpenMINDSAtID(atId)\n\n     S =\n\n       struct with fields:\n\n         Type: \"geneticStrainType\"\n         Name: \"knockout\"\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/readExistingMetadata.m/","title":"ndi.database.metadata_app.fun.readExistingMetadata","text":"<pre><code> READEXISTINGMETADATA - retrieves metadata from an existing dataset\n\n  DATASETINFORMATION = ndi.database.fun.READEXISTINGMETADATA(D)\n\n  Inputs:\n    D - the ndi.dataset object\n\n  Outputs:\n    DATASETINFORMATION - the metadata structure\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/resolveRelatedPublication.m/","title":"ndi.database.metadata_app.fun.resolveRelatedPublication","text":"<pre><code> resolveRelatedPublication - Resolve publication information based on DOI.\n\n    S = resolveRelatedPublication(doi) retrieves publication information\n    such as title, PubMed ID, and PubMed Central ID using the provided DOI.\n\n    Input:\n    - doi (1x1 string): Digital Object Identifier for the publication.\n\n    Output:\n    - S (struct): Structure containing publication information.\n      - S.doi: Original cleaned DOI.\n      - S.title: Title of the publication.\n      - S.pmid: PubMed ID of the publication.\n      - S.pmcid: PubMed Central ID of the publication.\n\n    Example:\n    doi = '10.1523/ENEURO.0073-21.2022';\n    publicationInfo = ndi.database.metadata_app.fun.resolveRelatedPublication(doi);\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/saveUserInstances.m/","title":"ndi.database.metadata_app.fun.saveUserInstances","text":"<pre><code>  saveUserInstances - Save user instances of metadata based on openMINDS\n\n    Syntax:\n        ndi.database.metadata_app.fun.saveUserInstances(name, instance)\n\n    Input arguments:\n        name - A name describing what kind of instances are saved.\n        instances - A struct array of instances\n\n    See also ndi.database.metadata_app.fun.loadUserInstances\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/save_dataset_docs.m/","title":"ndi.database.metadata_app.fun.save_dataset_docs","text":"<pre><code> SAVE_DATASET_DOCS - save metadata from metadata editor as ndi.documents to dataset/session\n  SAVE_DATASET_DOCS(S, TEST_NAME)\n\n  inputs:\n    S - ndi.session or ndi.dataset object\n    session_id - the session id of the incoming session or dataset\n    datasetInformation - metadata collected using the metadata app\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_app/%2Bfun/submit_dataset.m/","title":"ndi.database.metadata_app.fun.submit_dataset","text":"<pre><code> SUBMIT_DATASET - upload a test dataset to the cloud\n  [B, MSG, DATASET_ID] = ndi.database.metadata_app.fun.submit_dataset(S, TEST_NAME)\n\n  inputs:\n    S - ndi.session or ndi.dataset object\n    session_id - the session id of the incoming session or dataset\n    datasetInformation - metadata collected using the metadata app\n\n  outputs:\n    B - 1 if the upload was successful, 0 if not\n    MSG - a message about the upload\n    DATASET - the newly created dataset\n    DATASET_ID - the dataset id of the uploaded dataset\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/Contents.m/","title":"ndi.database.metadata_ds_core.Contents","text":"<pre><code>  This directory provides functions for our core dataset metadatastructure, \n  which is also used by the NDI MetadataEditorApp.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/check_metadata_cloud_inputs.m/","title":"ndi.database.metadata_ds_core.check_metadata_cloud_inputs","text":"<pre><code> CHECK_METADATA_CLOUD_INPUTS - check if the input is valid\n    IS_VALID = ndi.cloud.fun.CHECK_METADATA_CLOUD_INPUTS(S)\n\n  Inputs:\n    S - a structure with fields 'DatasetFullName', 'DatasetShortName', 'Author'\n                                'Funding', 'Description', 'License', 'Subjects'\n        'Author' is a structure with fields 'givenName', 'familyName', 'authorRole', 'digitalIdentifier'\n        'digitalIdentifier' is a structure with field 'identifier'\n        'Funding' is a structure with field 'funder'\n        'Subjects' is an instance from ndi.database.metadata_app.class.Subject class\n\n  Outputs:\n    IS_VALID - 1 if the input is valid, 0 otherwise\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/check_metadata_inputs.m/","title":"ndi.database.metadata_ds_core.check_metadata_inputs","text":"<pre><code> CHECK_METADATA_INPUTS Summary of this function goes here\n    Detailed explanation goes here\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/convertDatasetInfoToDocument.m/","title":"ndi.database.metadata_ds_core.convertDatasetInfoToDocument","text":"<pre><code>  CONVERTDATASETINFOTODOCUMENT function to convert datasetInfo to NDI document\n    DOCUMENT = ndi.database.metadata_app.fun.CONVERTDATASETINFOTODOCUMENT(DATASETINFO)\n    Inputs:\n        DATASETINFO - struct containing the dataset information\n\n    Outputs:\n        DOCUMENT - struct containing the dataset information\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/convertDocumentToDatasetInfo.m/","title":"ndi.database.metadata_ds_core.convertDocumentToDatasetInfo","text":"<pre><code> CONVERTDOCUMENTTODATASETINFO function to convert NDI document to datasetInfo\n    DATASETINFO = ndi.database.metadata_app.fun.CONVERTDOCUMENTTODATASETINFO(DOCUMENT)\n    Inputs:\n        DOCUMENT - struct containing the saved dataset information for our app\n                   Note that this is not a set of saved metadata objects in the dataset,\n                   but just the saved structure data from the MetaDataEditorApp\n\n    Outputs:\n        DATASETINFO - struct containing the dataset information\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/convertFormDataToDocuments.m/","title":"ndi.database.metadata_ds_core.convertFormDataToDocuments","text":"<pre><code>  Todo:\n   [\u00a0]\u00a0Probes\n   [\u00a0] Link subjects to ndi subjects using dependency_type?\n   [\u00a0]\u00a0Any other dependency_type?\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/load_author_from_ndidocument.m/","title":"ndi.database.metadata_ds_core.load_author_from_ndidocument","text":"<pre><code> LOAD_AUTHOR_FROM_NDIDOCUMENT Summary of this function goes here\n    AUTHOR = ndi.database.metadata_ds_core.LOAD_AUTHOR_FROM_NDIDOCUMENT(AUTHOR_DOCS, OTHERCONTRIBUTION_DOCS, CUSTODIAN_DOCS, D)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/metadata_to_json.m/","title":"ndi.database.metadata_ds_core.metadata_to_json","text":"<pre><code> METADATA_TO_JSON - Convert NDIMetadataEditorApp metadata structure to json\n\n  DATASET_UPDATE = METADATA_TO_JSON(S)\n\n  Inputs:\n    S - the metadata structure to convert\n\n  Outputs:\n    DATASET_UPDATE - the json structure to update the dataset\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/ndidataset2metadataeditorstruct.m/","title":"ndi.database.metadata_ds_core.ndidataset2metadataeditorstruct","text":"<pre><code>\n  DATASETINFORMATION = NDIDATASET2METADATAEDITORSTRUCT(D)\n\n  Read an NDIMetaDataEditorApp data structure from the documents\n  in an ndi.dataset D.\n\n  Inputs:\n     D - an ndi.dataset object\n\n  Outputs:\n     DATASETINFORMATION - metadata structured used by the\n        NDIMetaDataEditorApp\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdatabase/%2Bmetadata_ds_core/saveEditor2Doc.m/","title":"ndi.database.metadata_ds_core.saveEditor2Doc","text":"<pre><code> SAVEEDITOR2DOC function to save the editor content to NDI document\n    D = ndi.database.metadata_app.fun.SAVEEDITOR2DOC(D, DATASETINFO)\n    Inputs:\n        D - ndi.dataset object\n        DATASETINFO - struct containing the dataset information\n\n    Outputs:\n        D - ndi.dataset object\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdataset/dir.m/","title":"CLASS ndi.dataset.dir","text":"<pre><code>  ndi.dataset.dir - Create a new ndi.dataset.dir object\n\n  D = ndi.dataset.dir(REFERENCE, PATH_NAME)\n\n  Creates an ndi.dataset.dir object, that is, an ndi.dataset object\n  with an associated directory.\n\n  One can also create an existing ndi.dataset.dir object with\n\n  D = ndi.dataset.dir(PATH_NAME)\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdataset/dir.m/#superclasses","title":"Superclasses","text":"<p>ndi.dataset, handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdataset/dir.m/#properties","title":"Properties","text":"Property Description path the file path of the session"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdataset/dir.m/#methods","title":"Methods","text":"Method Description add_ingested_session ingets an ndi.session into an ndi.dataset add_linked_session link an ndi.session to an ndi.dataset addlistener addlistener  Add listener for event. database_add Add an ndi.document to an ndi.dataset object database_closebinarydoc close an ndi.database.binarydoc database_existbinarydoc checks if an ndi.database.binarydoc exists for an ndi.document database_openbinarydoc open the ndi.database.binarydoc channel of an ndi.document database_rm Remove an ndi.document with a given document ID from a dataset database_search Search for an ndi.document in a database of an ndi.dataset object dataset_erase deletes the entire session database folder delete DELETE   Delete a handle object. dir Create a new ndi.dataset.dir object document_session DOCUMENT_SESSION return the ndi.session of an ndi.document object in an ndi.dataset eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. getpath Return the path of the dataset gt &gt; (GT)   Greater than relation for handles. id return the identifier of an ndi.dataset object isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. open_session open an ndi.session object from an ndi.dataset reference return the reference string for an ndi.dataset object session_list return the session reference/identifier list for a dataset"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdataset/dir.m/#methods-help","title":"Methods help","text":"<p>add_ingested_session - ingets an ndi.session into an ndi.dataset</p> <pre><code>NDI_DATASET_OBJ = ADD_INGESTED_SESSION(NDI_DATASET_OBJ, NDI_SESSION_OBJ)\n\n  Add an ndi.session object to an ndi.dataset, by copying the session\n  documents into the dataset.\n\nHelp for ndi.dataset.dir/add_ingested_session is inherited from superclass ndi.dataset\n</code></pre> <p>add_linked_session - link an ndi.session to an ndi.dataset</p> <pre><code>NDI_DATASET_OBJ = ADD_LINKED_SESSION(NDI_DATASET_OBJ, NDI_SESSION_OBJ)\n\n  Add an ndi.session object to an ndi.dataset, without ingesting the session\n  into the dataset. Instead, the ndi.session is linked to the dataset, but\n  the session remains where it is.\n\nHelp for ndi.dataset.dir/add_linked_session is inherited from superclass ndi.dataset\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.dataset.dir, matlab.metadata.Property, events\n\nHelp for ndi.dataset.dir/addlistener is inherited from superclass handle\n</code></pre> <p>database_add - Add an ndi.document to an ndi.dataset object</p> <pre><code>NDI_DATASET_OBJ = DATABASE_ADD(NDI_DATASET_OBJ, NDI_DOCUMENT_OBJ)\n\n  Adds the ndi.document NDI_DOCUMENT_OBJ to the ndi.dataset NDI_DATASET_OBJ.\n  NDI_DOCUMENT_OBJ can also be a cell array of ndi.document objects, which will\n  all be added in turn.\n\n  If the base.session_id of each NDI_DOCUMENT_OBJ matches one of the sessions\n  in the DATASET, the document will be added to that session. If the base.session_id of\n  the document matches the id of the NDI_DATASET_OBJ, it will be added to the dataset\n  instead of one of the invidiual sessions.\n\n  The database can be queried by calling NDI_DATASET_OBJ/SEARCH\n\n  See also: ndi.dataset.dir/database_search(), ndi.dataset.dir/database_rm()\n\nHelp for ndi.dataset.dir/database_add is inherited from superclass ndi.dataset\n</code></pre> <p>database_closebinarydoc - close an ndi.database.binarydoc</p> <pre><code>[NDI_BINARYDOC_OBJ] = DATABASE_CLOSEBINARYDOC(NDI_DATASET_OBJ, NDI_BINARYDOC_OBJ)\n\n  Close and lock an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be unlocked in the\n  database, which is why it is necessary to call this function through the dataset object.\n\nHelp for ndi.dataset.dir/database_closebinarydoc is inherited from superclass ndi.dataset\n</code></pre> <p>database_existbinarydoc - checks if an ndi.database.binarydoc exists for an ndi.document</p> <pre><code>[TF, FILE_PATH] = DATABASE_EXISTBINARYDOC(NDI_DATASET_OBJ, NDI_DOCUMENT_OR_ID, FILENAME)\n\n   Return a boolean flag (TF) indicating if a binary document\n   exists for an ndi.document and, if it exists, the full file\n   path (FILE_PATH) to the file where the binary data is stored.\n\nHelp for ndi.dataset.dir/database_existbinarydoc is inherited from superclass ndi.dataset\n</code></pre> <p>database_openbinarydoc - open the ndi.database.binarydoc channel of an ndi.document</p> <pre><code>NDI_BINARYDOC_OBJ = DATABASE_OPENBINARYDOC(NDI_DATASET_OBJ, NDI_DOCUMENT_OR_ID, FILENAME)\n\n   Return the open ndi.database.binarydoc object that corresponds to an ndi.document and\n   NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself.\n   The document is opened for reading only. Document binary streams may not be edited once the\n   document is added to the database.\n\n   Note that this NDI_BINARYDOC_OBJ must be closed with ndi.dataset/CLOSEBINARYDOC.\n\nHelp for ndi.dataset.dir/database_openbinarydoc is inherited from superclass ndi.dataset\n</code></pre> <p>database_rm - Remove an ndi.document with a given document ID from a dataset</p> <pre><code>NDI_DATASET_OBJ = DATABASE_RM(NDI_DATASET_OBJ, DOC_UNIQUE_ID)\n    or\n  NDI_DATASET_OBJ = DATABASE_RM(NDI_DATASET_OBJ, DOC)\n\n  Removes an ndi.document with document id DOC_UNIQUE_ID from the\n  NDI_DATASET_OBJ database. In the second form, if an ndi.document or cell array\n  of NDI_DOCUMENTS is passed for DOC, then the document unique ids are retrieved\n  and they are removed in turn.  If DOC/DOC_UNIQUE_ID is empty, no action is\n  taken.\n\n  If the base.session_id of each NDI_DOCUMENT_OBJ matches one of the linked sessions\n  in the DATASET, the document will be removed from the linked session. If the linked\n  session is opened individually, the document will have been removed.\n\n  This function also takes parameters as name/value pairs that modify its behavior:\n  Parameter (default)        | Description\n  --------------------------------------------------------------------------------\n  ErrIfNotFound (false)      | Produce an error if an ID to be deleted is not found.\n\n  See also: ndi.dataset.dir/database_add(), ndi.dataset.dir/database_search()\n\nHelp for ndi.dataset.dir/database_rm is inherited from superclass ndi.dataset\n</code></pre> <p>database_search - Search for an ndi.document in a database of an ndi.dataset object</p> <pre><code>NDI_DOCUMENT_OBJ = DATABASE_SEARCH(NDI_DATASET_OBJ, SEARCHPARAMETERS)T\n\n  Given search parameters, which is an ndi.query object, the database associated\n  with the ndi.dataset object NDI_DATASET_OBJ is searched.\n\n  Matches are returned in a cell list NDI_DOCUMENT_OBJ.\n\n  See also: ndi.dataset.dir/database_add(), ndi.dataset.dir/database_rm()\n\nHelp for ndi.dataset.dir/database_search is inherited from superclass ndi.dataset\n</code></pre> <p>dataset_erase - deletes the entire session database folder</p> <pre><code>DATABASE_ERASE(NDI_DATASET_DIR_OBJ, AREYOUSURE)\n\n    Deletes the session in the database.\n\n  Use with care. If AREYOUSURE is 'yes' then the\n  function will proceed. Otherwise, it will not.\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.DATASET.DIR, NDI.DATASET.DIR/ISVALID, CLEAR\n\nHelp for ndi.dataset.dir/delete is inherited from superclass handle\n</code></pre> <p>dir - Create a new ndi.dataset.dir object</p> <pre><code>D = ndi.dataset.dir(REFERENCE, PATH_NAME)\n\n  Creates an ndi.dataset.dir object, that is, an ndi.dataset object\n  with an associated directory.\n\n  One can also create an existing ndi.dataset.dir object with\n\n  D = ndi.dataset.dir(PATH_NAME)\n\n    Documentation for ndi.dataset.dir/dir\n       doc ndi.dataset.dir\n</code></pre> <p>document_session - DOCUMENT_SESSION return the ndi.session of an ndi.document object in an ndi.dataset</p> <pre><code>NDI_SESSION_OBJ = DOCUMENT_SESSION(NDI_DATASET_OBJ, NDI_DOCUMENT_OBJ)\n\n  Given an ndi.document, return an open ndi.session object that contains the\n  the document.\n\nHelp for ndi.dataset.dir/document_session is inherited from superclass ndi.dataset\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATASET.DIR, NDI.DATASET.DIR/GE, NDI.DATASET.DIR/GT, NDI.DATASET.DIR/LE, NDI.DATASET.DIR/LT, NDI.DATASET.DIR/NE\n\nHelp for ndi.dataset.dir/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.DATASET.DIR\n\nHelp for ndi.dataset.dir/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.dataset.dir, ndi.dataset.dir/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.dataset.dir/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATASET.DIR, NDI.DATASET.DIR/EQ, NDI.DATASET.DIR/GT, NDI.DATASET.DIR/LE, NDI.DATASET.DIR/LT, NDI.DATASET.DIR/NE\n\nHelp for ndi.dataset.dir/ge is inherited from superclass handle\n</code></pre> <p>getpath - Return the path of the dataset</p> <pre><code>P = GETPATH(NDI_DATASET_OBJ)\n\n  Returns the path of an ndi.dataset object.\n\n  The path is some sort of reference to the storage location of\n  the dataset. This might be a URL, or a file directory, depending upon\n  the subclass.\n\n  In the ndi.dataset class, this returns empty.\n\n  See also: ndidataset.\n\nHelp for ndi.dataset.dir/getpath is inherited from superclass ndi.dataset\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATASET.DIR, NDI.DATASET.DIR/EQ, NDI.DATASET.DIR/GE, NDI.DATASET.DIR/LE, NDI.DATASET.DIR/LT, NDI.DATASET.DIR/NE\n\nHelp for ndi.dataset.dir/gt is inherited from superclass handle\n</code></pre> <p>id - return the identifier of an ndi.dataset object</p> <pre><code>IDENTIFIER = ID(NDI_DATASET_OBJ)\n\n  Returns the unique identifier of an ndi.dataset object.\n\nHelp for ndi.dataset.dir/id is inherited from superclass ndi.dataset\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.DATASET.DIR, NDI.DATASET.DIR/DELETE\n\nHelp for ndi.dataset.dir/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATASET.DIR, NDI.DATASET.DIR/EQ, NDI.DATASET.DIR/GE, NDI.DATASET.DIR/GT, NDI.DATASET.DIR/LT, NDI.DATASET.DIR/NE\n\nHelp for ndi.dataset.dir/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.dataset.dir, matlab.metadata.Property, events\n\nHelp for ndi.dataset.dir/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.DATASET.DIR, NDI.DATASET.DIR/EQ, NDI.DATASET.DIR/GE, NDI.DATASET.DIR/GT, NDI.DATASET.DIR/LE, NDI.DATASET.DIR/NE\n\nHelp for ndi.dataset.dir/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.DATASET.DIR, NDI.DATASET.DIR/EQ, NDI.DATASET.DIR/GE, NDI.DATASET.DIR/GT, NDI.DATASET.DIR/LE, NDI.DATASET.DIR/LT\n\nHelp for ndi.dataset.dir/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.DATASET.DIR, NDI.DATASET.DIR/ADDLISTENER, NDI.DATASET.DIR/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.dataset.dir/notify is inherited from superclass handle\n</code></pre> <p>open_session - open an ndi.session object from an ndi.dataset</p> <pre><code>NDI_SESSION_OBJ = OPEN_SESSION(NDI_DATASET_OBJ, SESSION_ID)\n\n  Open an ndi.session object with session identifier SESSION_ID that is stored\n  in the ndi.dataset NDI_DATASET_OBJ.\n\n  See also: ndi.session, ndi.dataset.dir/session_list()\n\nHelp for ndi.dataset.dir/open_session is inherited from superclass ndi.dataset\n</code></pre> <p>reference - return the reference string for an ndi.dataset object</p> <pre><code>REF_STRING = REFERENCE(NDI_DATASET_OBJ)\n\n  Returns the reference string for an ndi.dataset object. This can be any\n  string, it is not necessarily unique among datasets. The dataset identifier\n  returned by ID is unique.\n\n  See also: ndi.dataset.dir/ID\n\nHelp for ndi.dataset.dir/reference is inherited from superclass ndi.dataset\n</code></pre> <p>session_list - return the session reference/identifier list for a dataset</p> <pre><code>[REF_LIST, ID_LIST] = SESSION_LIST(NDI_DATASET_OBJ)\n\n  Returns information about ndi.session objects contained in an ndi.dataset\n  object NDI_DATASET_OBJ. REF_LIST is a cell array of reference strings, and\n  ID_LIST is a cell array of unique identifier strings. The nth entry of\n  REF_LIST corresponds to the Nth entry of ID_LIST (that is, REF_LIST{n} is the\n  reference that corresponds to the ndi.session with unique identifier ID_LIST{n}.\n\nHelp for ndi.dataset.dir/session_list is inherited from superclass ndi.dataset\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdocs/all_documents2markdown.m/","title":"ndi.docs.all_documents2markdown","text":"<pre><code>  ALL_DOCUMENTS2MARKDOWN - write all NDI document types to documentation folder\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdocs/build.m/","title":"ndi.docs.build","text":"<pre><code>  ndi.docs.build - build the NDI markdown documentation from Matlab source\n\n  Builds the NDI documentation locally in $NDI-matlab/docs and updates the mkdocs-yml file\n  in the $NDI-matlab directory.\n\n  **Example**:\n    ndi.docs.build();\n\n  Need to move mkdocs.yml to the root directory of the repo before running `mkdocs gh-deploy`\n  on regular command line (not Matlab command line).\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdocs/calcbuild.m/","title":"ndi.docs.calcbuild","text":"<pre><code>  ndi.docs.calcbuild - build NDI calculator markdown documentation from Matlab source\n\n  ndi.docs.calcbuild(DIRNAME)\n\n  Builds the documentation locally in NDI calculator GitHub directories.\n\n  **Example**:\n    ndi.docs.calcbuild('/Users/myname/Documents/MATLAB/tools/NDIcalc-vis-matlab');\n    % builds documentation for NDIcalc-vis\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdocs/concatenateFiles.m/","title":"ndi.docs.concatenateFiles","text":"<pre><code> concatenateFiles Concatenates text files within a directory and its \n  subdirectories into a single output file.\n\n    concatenateFiles(directory, outputFile) concatenates all text files \n    within the specified directory and its subdirectories into the \n    specified output file.\n\n    concatenateFiles(directory, outputFile, options) allows specifying\n    optional parameters in the 'options' structure.\n\n    Inputs:\n        directory:  The path to the directory to search.\n        outputFile: The path to the output file.\n        options: A structure containing optional parameters:\n            'IgnoreFile': Path to a JSON file containing a list of files to\n                          ignore.  The JSON file should contain a JSON array\n                          of strings, where each string is a filename to\n                          ignore.\n            'Extensions': A cell array of strings specifying the file\n                          extensions to include (e.g., {'.txt', '.log'}).\n            'ParentDir':  A path to be prepended to the files in 'IgnoreFile'\n\n    Example:\n        concatenateFiles('my_data_dir', 'combined_data.txt');\n        options.IgnoreFile = 'ignore_list.json';\n        concatenateFiles('my_data_dir', 'combined_data.txt', options);\n        options.Extensions = {'.txt', '.csv'};\n        concatenateFiles('my_data_dir', 'combined_data.txt', options);\n        options.IgnoreFile = 'ignore_list.json';\n        options.Extensions = {'.txt'};\n        concatenateFiles('my_data_dir', 'combined_data.txt', options);\n\n    See also: dir, fopen, fprintf, fclose, jsondecode\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdocs/docfun.m/","title":"ndi.docs.docfun","text":"<pre><code>  docfun - Apply a function to each NDI document in an array of documents.\n\n  Syntax:\n    result = ndi.docs.docfun(functionHandle, ndiDocuments) \n\n  Input Arguments:\n    - functionHandle (function_handle) - A function to be applied to each \n        NDI document.\n    - ndiDocuments (array) - An array of NDI documents to which the function\n        will be applied.\n\n  Output Arguments:\n    result (cell array) - A cell array containing the results of applying\n    the function to each NDI document.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdocs/document2markdown.m/","title":"ndi.docs.document2markdown","text":"<pre><code>  DOCUMENT2MARKDOWN - convert an NDI document to markdown text\n\n     MD = ndi.docs.document2markdown(ndi_document_obj)\n\n   Given an ndi.document NDI_DOCUMENT_OBJ, this function creates a\n   documentation-style markdown file.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bdocs/schemastructure2docstructure.m/","title":"ndi.docs.schemastructure2docstructure","text":"<pre><code>  schemastructure2docstructure - return documentation information from an ndi document schema\n\n  DOCS = SCHEMASTRUCTURE2DOCSTRUCTURE(SCHEMA)\n\n  Given an NDI schema structure (json-schema.org/draft/2019-09/schema#)\n  this function returns documentation information for all properties.\n\n  This returns a structure array with fields:\n    - property\n    - doc_default_value\n    - doc_data_type\n    - doc_description\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/downsample.m/","title":"ndi.element.downsample","text":"<pre><code> NDI.ELEMENT.DOWNSAMPLE - Downsamples an ndi.element.timeseries object, applying anti-aliasing\n\n    ELEM_OUT = NDI.ELEMENT.DOWNSAMPLE(D, NDI_ELEMENT_TIMESERIES_OBJ_IN, LP, NAME_OUT, REFERENCE_OUT)\n\n    Downsamples the ndi.element.timeseries object NDI_ELEMENT_TIMESERIES_OBJ_IN\n    and creates a new ndi.element.timeseries object ELEM_OUT. The new object\n    will have the name NAME_OUT and reference REFERENCE_OUT. The original\n    object will not be modified. If the downsampled timeseries object\n    ELEM_OUT already exists, any new epochs will be downsampled and appended.\n\n    Inputs:\n        D - The ndi.dataset or ndi.session object containing the data.\n        NDI_ELEMENT_TIMESERIES_OBJ_IN - The ndi.element.timeseries object\n                                        to downsample.\n        LP - The low-pass frequency (in Hz) to use for downsampling.\n        NAME_OUT - The name of the new ndi.element.timeseries object.\n        REFERENCE_OUT - The reference number of the new\n                       ndi.element.timeseries object.\n\n    Outputs:\n        ELEM_OUT - The new downsampled ndi.element.timeseries object.\n\n    See also: DOWNSAMPLETIMESERIES, NDI.ELEMENT.TIMESERIES\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/missingepochs.m/","title":"ndi.element.missingepochs","text":"<pre><code> MISSINGEPOCHS Determines if there are epochs in element1 that are not in element2.\n\n    [MISSING, EPOCH_IDS] = MISSINGEPOCHS(ELEMENT1, ELEMENT2) \n    compares the epoch tables of two input elements and identifies any \n    epoch ids that are present in the first element but not in the second.\n\n    Inputs:\n        ELEMENT1 - The first element or its associated epoch table.\n        ELEMENT2 - The second element or its associated epoch table.\n\n    Outputs:\n        MISSING    - A logical scalar.  It is TRUE if there are any epochs\n                   present in ELEMENT1's epoch table that are not present in\n                   ELEMENT2's epoch table.  It is FALSE if all epoch IDs\n                   in ELEMENT1 are also in ELEMENT2.\n        EPOCH_IDS  - Contains the 'epoch_id' values (if applicable) that \n                   are present in ELEMENT1's epoch table but are missing \n                   from ELEMENT2's epoch table.  If no epochs are missing,\n                    EPOCH_IDS will be an empty cell array.\n\n    See also: NDI.ELEMENT.TIMESERIES, NDI.PROBE.TIMESERIES\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/oneepoch.m/","title":"ndi.element.oneepoch","text":"<pre><code>  ONEEPOCH - make a 1 epoch version of an ndi.element.timeseries\n\n  ELEM_OUT = ONEEPOCH(D, NDI_ELEMENT_TIMESERIES_OBJ_IN, NAME_OUT, REFERENCE_OUT)\n\n  Creates a concatenated version of an ndi.element.timeseries (or ndi.probe.timeseries).\n  Use with caution, as this could create enormous documents. The new object\n  will have the name NAME_OUT and reference REFERENCE_OUT. The original\n  object will not be modified.\n\n  The epoch will be created with the most \"global\" clock available. The preferred order\n  is 'utc','approx_utc','exp_global_time','approx_exp_global_time','dev_global_time','approx_dev_global_time'.\n  If a global clock cannot be found, the epoch will be given a 'dev_local_time' with the concatenation\n  of all the local times as though the recordings occurred one immediately after the other.\n\n    Inputs:\n        D - The ndi.dataset or ndi.session object containing the data.\n        NDI_ELEMENT_TIMESERIES_OBJ_IN - The ndi.element.timeseries object\n                                        to concatenate.\n        NAME_OUT - The name of the new ndi.element.timeseries object.\n        REFERENCE_OUT - The reference number of the new\n                       ndi.element.timeseries object.\n\n    Outputs:\n        ELEM_OUT - The new concatenated ndi.element.timeseries object.\n\n    See also: NDI.ELEMENT.TIMESERIES\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/oneepoch_bkup.m/","title":"ndi.element.oneepoch_bkup","text":"<pre><code>  ONEEPOCH - make a 1 epoch version of an ndi.element.timeseries\n\n  ELEM_OUT = ONEEPOCH(D, NDI_ELEMENT_TIMESERIES_OBJ_IN, NAME_OUT, REFERENCE_OUT)\n\n  Creates a concatenated version of an ndi.element.timeseries (or ndi.probe.timeseries).\n  Use with caution, as this could create enormous documents. The new object\n  will have the name NAME_OUT and reference REFERENCE_OUT. The original\n  object will not be modified.\n\n  The epoch will be created with the most \"global\" clock available. The preferred order\n  is 'utc','approx_utc','exp_global_time','approx_exp_global_time','dev_global_time','approx_dev_global_time'.\n  If a global clock cannot be found, the epoch will be given a 'dev_local_time' with the concatenation\n  of all the local times as though the recordings occurred one immediately after the other.\n\n    Inputs:\n        D - The ndi.dataset or ndi.session object containing the data.\n        NDI_ELEMENT_TIMESERIES_OBJ_IN - The ndi.element.timeseries object\n                                        to concatenate.\n        NAME_OUT - The name of the new ndi.element.timeseries object.\n        REFERENCE_OUT - The reference number of the new\n                       ndi.element.timeseries object.\n\n    Outputs:\n        ELEM_OUT - The new concatenated ndi.element.timeseries object.\n\n    See also: NDI.ELEMENT.TIMESERIES\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/timeseries.m/","title":"CLASS ndi.element.timeseries","text":"<pre><code>  NDI_ELEMENT - define or examine a element in the session\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/timeseries.m/#superclasses","title":"Superclasses","text":"<p>ndi.element, ndi.ido, did.ido, ndi.epoch.epochset, ndi.documentservice, matlab.mixin.Heterogeneous, ndi.time.timeseries</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/timeseries.m/#properties","title":"Properties","text":"Property Description session name type reference underlying_element direct subject_id dependencies identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/timeseries.m/#methods","title":"Methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.element cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochsetname the name of the ndi.element object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version newdocument Todo: need docs here numepochs Number of epochs of ndi.epoch.epochset readtimeseries read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery Todo: need docs here t0_t1 times2samples convert from the timeseries time to sample numbers timeseries define or examine a element in the session underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method)"},{"location":"NDI-matlab/reference/%2Bndi/%2Belement/timeseries.m/#methods-help","title":"Methods help","text":"<p>addepoch - add an epoch to the ndi.element</p> <pre><code>[NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_TIMESERIES_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, TIMEPOINTS, DATAPOINTS)\n\n  Registers the data for an epoch with the NDI_ELEMENT_OBJ.\n\n  Inputs:\n    NDI_ELEMENT_OBJ: The ndi.element object to modify\n    EPOCHID:       The name of the epoch to add; should match the name of an epoch from the probe\n    EPOCHCLOCK:    The epoch clock; must be a single clock type that matches one of the clock types\n                      of the probe\n    T0_T1:         The starting time and ending time of the existence of information about the ELEMENT on\n                      the probe, in units of the epock clock\n    TIMEPOINTS:    the time points to be added to this epoch; can also be the string 'probe' which means the\n                      points are read directly from the probe (must be Tx1). Timepoints must be in the units\n                      of the EPOCHCLOCK.\n    DATAPOINTS:    the data points that accompany each timepoint (must be TxXxY...), or can be 'probe' to\n                      read from the probe\n    EPOCHIDS:      The epoch ids of the original epochs (used in conjunction with a oneepoch document).\n  Outputs:\n     If a second output is requested in EPOCHDOC, then the DOC is NOT added to the database\n</code></pre> <p>buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of EPOCHNODES.\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\n  In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with\n  a cost of 1 and a linear mapping rule with shift 1 and offset 0:\n    'utc' -&gt; 'utc'\n    'utc' -&gt; 'approx_utc'\n    'exp_global_time' -&gt; 'exp_global_time'\n    'exp_global_time' -&gt; 'approx_exp_global_time'\n    'dev_global_time' -&gt; 'dev_global_time'\n    'dev_global_time' -&gt; 'approx_dev_global_time'\n\n\n  See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping,\n  ndi.element.timeseries/EPOCHNODES\n\nHelp for ndi.element.timeseries/buildepochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>buildepochtable - build the epoch table for an ndi.element</p> <pre><code>ET = BUILDEPOCHTABLE(NDI_ELEMENT_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch (may change)\n  'epoch_id'                | The epoch ID code (will never change once established)\n                            |   This uniquely specifies the epoch (with the session id).\n  'epoch_session_id'           | Session of the epoch\n  'epochprobemap'           | The epochprobemap object from each epoch\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', and 'epoch_id'\n\nHelp for ndi.element.timeseries/buildepochtable is inherited from superclass ndi.element\n</code></pre> <p>cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache</p> <pre><code>GINFO_BIG = GINFO2CACHE(GINFO_SMALL)\n\nHelp for ndi.element.timeseries.cache2ginfo is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epoch graph, if it exists and is up-to-date\n  (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ\n  has not changed). If there is no cached version, or if it is not up-to-date,\n  COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date,\n  it is deleted.\n\n  See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH\n\nHelp for ndi.element.timeseries/cached_epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object</p> <pre><code>[ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epochtable, if it exists, along with its HASHVALUE\n  (a hash number generated from the table). If there is no cached version,\n  ET and HASHVALUE will be empty.\n\nHelp for ndi.element.timeseries/cached_epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>doc_unique_id - return the document unique reference for an ndi.element object</p> <pre><code>UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ)\n\n  Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated\n  document for the element, then empty is returned.\n\nHelp for ndi.element.timeseries/doc_unique_id is inherited from superclass ndi.element\n</code></pre> <p>elementstring - Produce a human-readable element string</p> <pre><code>ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ)\n\n  Returns the name as a human-readable string.\n\n  For ndi.element objects, this is the string 'element: ' followed by its name\n\nHelp for ndi.element.timeseries/elementstring is inherited from superclass ndi.element\n</code></pre> <p>epoch2str - convert an epoch number or id to a string</p> <pre><code>S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER)\n\n  Returns the epoch NUMBER in the form of a string. If it is a simple\n  integer, then INT2STR is used to produce a string. If it is an epoch\n  identifier string, then it is returned.\n\nHelp for ndi.element.timeseries/epoch2str is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_ELEMENT_OBJ, EPOCH_NUMBER)\n\n  Return the clock types available for this epoch.\n\n  The ndi.element class always returns the clock type(s) of the element it is based on\n\nHelp for ndi.element.timeseries/epochclock is inherited from superclass ndi.element\n</code></pre> <p>epochgraph - graph of the mapping and cost of converting time among epochs</p> <pre><code>[COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes).\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\nHelp for ndi.element.timeseries/epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochid - Get the epoch identifier for a particular epoch</p> <pre><code>ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Returns the epoch identifier string for the epoch EPOCH_NUMBER.\n  If it doesn't exist, it should be created. EPOCH_NUMBER can be\n  a number of an EPOCH ID string.\n\n  The abstract class just queries the EPOCHTABLE.\n  Most classes that manage epochs themselves (ndi.file.navigator,\n  ndi.daq.system) will override this method.\n\nHelp for ndi.element.timeseries/epochid is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochnodes - return all epoch nodes from an ndi.epoch.epochset object</p> <pre><code>[NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ)\n\n  Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the\n  following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch within the session.\n  'epoch_session_id'           | The ID of the session that contains the epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A SINGLE ndi.time.clocktype entry that describes the clock type of this node.\n  't0_t1'                   | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock'\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_id', and 'epochprobemap'\n  'objectname'              | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no\n                            |   'name' field, then 'unknown' is used.\n  'objectclass'             | The object class name of the NDI_EPOCHSET_OBJ.\n\n  EPOCHNODES are related to EPOCHTABLE entries, except\n     a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains\n        multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids\n        in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another.\n     b) EPOCHNODES contain identifying information (objectname and objectclass) to help\n        in identifying the epoch nodes across ndi.epoch.epochset objects.\n\n  UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs.\n\nHelp for ndi.element.timeseries/epochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochsetname - the name of the ndi.element object, for EPOCHNODES</p> <pre><code>NAME = EPOCHSETNAME(NDI_ELEMENT_OBJ)\n\n  Returns the object name that is used when creating epoch nodes.\n\n  For ndi.element objects, this is ndi.element/ELEMENTSTRING.\n\nHelp for ndi.element.timeseries/epochsetname is inherited from superclass ndi.element\n</code></pre> <p>epochtable - Return an epoch table that relates the current object's epochs to underlying epochs</p> <pre><code>[ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch. The number may change as epochs are added and subtracted.\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch.\n  'epoch_session_id'           | The session ID that contains this epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap'\n\n  HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable\n  has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE.\n\n  After it is read from disk once, the ET is stored in memory and is not re-read from disk\n  unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE.\n\nHelp for ndi.element.timeseries/epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID</p> <pre><code>ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object\n  that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the\n  epoch or the EPOCHID of the epoch.\n\nHelp for ndi.element.timeseries/epochtableentry is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>eq - are 2 ndi.probe objects equal?</p> <pre><code>Returns 1 if the objects share an object class, session, and probe string.\n\nHelp for ndi.element.timeseries/eq is inherited from superclass ndi.element\n</code></pre> <p>getcache - return the NDI_CACHE and key for ndi.element</p> <pre><code>[CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ)\n\n  Returns the CACHE and KEY for the ndi.element object.\n\n  The CACHE is returned from the associated session.\n  The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT.\n\n  See also: ndi.file.navigator\n\nHelp for ndi.element.timeseries/getcache is inherited from superclass ndi.element\n</code></pre> <p>getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs</p> <pre><code>EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ)\n\n  Produce an array of ndi.epoch objects from the epoch table of this\n  ndi.epoch.epochset object (NDI_EPOCHSET_OBJ).\n\nHelp for ndi.element.timeseries/getepocharray is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache</p> <pre><code>GINFO_SMALL = GINFO2CACHE(GINFO)\n\nHelp for ndi.element.timeseries.ginfo2cache is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>id - return the document unique identifier for an ndi.element object</p> <pre><code>UNIQUE_REF = ID(NDI_ELEMENT_OBJ)\n\n  Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated\n  document for the element, then an error is returned.\n\nHelp for ndi.element.timeseries/id is inherited from superclass ndi.element\n</code></pre> <p>issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph?</p> <pre><code>B = ISSYNCGRAPHROOT(NDI_ELEMENT_OBJ)\n\n  This function tells an ndi.time.syncgraph object whether it should continue\n  adding the 'underlying' epochs to the graph, or whether it should stop at this level.\n\n  For ndi.element objects, this returns 0 so that underlying ndi.probe epochs are added.\n\nHelp for ndi.element.timeseries/issyncgraphroot is inherited from superclass ndi.element\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.element.timeseries.isvalid is inherited from superclass did.ido\n</code></pre> <p>load_all_element_docs - load all of the ndi.element objects from an session database</p> <pre><code>ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ)\n\n  Loads the ndi.document that is based on the ndi.element object and any associated\n  epoch documents.\n\nHelp for ndi.element.timeseries/load_all_element_docs is inherited from superclass ndi.element\n</code></pre> <p>load_element_doc - load a element doc from the session database</p> <pre><code>ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ)\n\n  Load an ndi.document that is based on the ndi.element object.\n\n  Returns empty if there is no such document.\n\nHelp for ndi.element.timeseries/load_element_doc is inherited from superclass ndi.element\n</code></pre> <p>loadaddedepochs - load the added epochs from an ndi.element</p> <pre><code>[ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ)\n\n  Load the EPOCHTABLE that consists of added/registered epochs that provide information\n  about the ndi.element.\n\nHelp for ndi.element.timeseries/loadaddedepochs is inherited from superclass ndi.element\n</code></pre> <p>matchedepochtable - compare a hash number from an epochtable to the current version</p> <pre><code>B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE)\n\n  Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE.\n  Otherwise, it returns 0.\n\nHelp for ndi.element.timeseries/matchedepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>newdocument - Todo: need docs here</p> <pre><code>\n</code></pre> <p>numepochs - Number of epochs of ndi.epoch.epochset</p> <pre><code>N = NUMEPOCHS(NDI_EPOCHSET_OBJ)\n\n  Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ.\n\n  See also: EPOCHTABLE\n\nHelp for ndi.element.timeseries/numepochs is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>readtimeseries - read the ndi.element.timeseries data from a probe based on specified time relative to an NDI_TIMEFERENCE or epoch</p> <pre><code>[DATA, T, TIMEREF] = READTIMESERIES(NDI_ELEMENT_TIMESERIES_OBJ, TIMEREF_OR_EPOCH, T0, T1)\n\n   Reads timeseries data from an ndi.element.timeseries object. The DATA and time information T that are\n   returned depend on the the specific subclass of ndi.element.timeseries that is called (see READTIMESERIESEPOCH).\n\n   In the base class, this function merely calls the element's probe's READTIMESERIES function.\n   TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the time reference for\n   T0, T1, or it can be a single number, which will indicate the data are to be read from that\n   epoch.\n\n   DATA is the data for the probe.  T is a time structure, in units of TIMEREF if it is an\n   ndi.time.timereference object or in units of the epoch if an epoch is passed.  The TIMEREF is returned.\n</code></pre> <p>resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk</p> <pre><code>NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  This function clears the internal cached memory of the epochtable, forcing it to be re-read from\n  disk at the next request.\n\n  See also: ndi.element.timeseries/EPOCHTABLE\n\nHelp for ndi.element.timeseries/resetepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>samplerate - return the sample rate of an ndi.time.timeseries object</p> <pre><code>SR = SAMPLERATE(NDI_TIMESERIES_OBJ, EPOCH)\n\n  Returns the sampling rate of a given ndi.time.timeseries object for the epoch\n  EPOCH. EPOCH can be specified as an index or EPOCH_ID.\n\n  If NDI_TIMESERIES_OBJ is not regularly sampled, then -1 is returned.\n\nHelp for ndi.element.timeseries/samplerate is inherited from superclass ndi.time.timeseries\n</code></pre> <p>samples2times - convert from the timeseries time to sample numbers</p> <pre><code>SAMPLES = SAMPLES2TIMES(NDI_TIMESERIES_OBJ, EPOCH, TIMES)\n\n  For a given ndi.time.timeseries object and a recording epoch EPOCH,\n  return the sample index numbers SAMPLE that corresponds to the times TIMES.\n  The first sample in the epoch is 1.\n  The TIMES requested might be out of bounds of the EPOCH; no checking is performed.\n\n  TODO: convert times to dev_local_clock\n\nHelp for ndi.element.timeseries/samples2times is inherited from superclass ndi.time.timeseries\n</code></pre> <p>searchquery - Todo: need docs here</p> <pre><code>\n</code></pre> <p>t0_t1 - **</p> <pre><code>T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch\n\n  T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\n  TODO: this must be a bug, it's just self-referential\n\nHelp for ndi.element.timeseries/t0_t1 is inherited from superclass ndi.element\n</code></pre> <p>times2samples - convert from the timeseries time to sample numbers</p> <pre><code>SAMPLES = TIMES2SAMPLES(NDI_TIMESERIES_OBJ, EPOCH, TIMES)\n\n  For a given ndi.time.timeseries object and a recording epoch EPOCH,\n  return the sample index numbers SAMPLE that corresponds to the times TIMES.\n  The first sample in the epoch is 1.\n  The TIMES requested might be out of bounds of the EPOCH; no checking is performed.\n\nHelp for ndi.element.timeseries/times2samples is inherited from superclass ndi.time.timeseries\n</code></pre> <p>timeseries - define or examine a element in the session</p> <pre><code>Documentation for ndi.element.timeseries/timeseries\n       doc ndi.element.timeseries\n</code></pre> <p>underlyingepochnodes - find all the underlying epochnodes of a given epochnode</p> <pre><code>[UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE)\n\n  Traverse the underlying nodes of a given EPOCHNODE until we get to the roots\n  (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1).\n\n  Note that the EPOCHNODE itself is returned as the first 'underlying' node.\n\n  See also: ISSYNCGRAPHROOT\n\nHelp for ndi.element.timeseries/underlyingepochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.element.timeseries.unique_id is inherited from superclass did.ido\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap.m/","title":"CLASS ndi.epoch.epochprobemap","text":"<pre><code>  ndi.epoch.epochprobemap - Create a new ndi.epoch.epochprobemap object\n\n  MYNDI_EPOCHPROBEMAP = ndi.epoch.epochprobemap()\n\n  Creates a new ndi.epoch.epochprobemap object. This is an abstract\n  base class so it has no inputs.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap.m/#methods","title":"Methods","text":"Method Description decode decode table information for an ndi.epoch.epochprobemap object from a serialized string epochprobemap Create a new ndi.epoch.epochprobemap object serialize Turn the ndi.epoch.epochprobemap object into a string"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap.m/#methods-help","title":"Methods help","text":"<p>decode - decode table information for an ndi.epoch.epochprobemap object from a serialized string</p> <pre><code>ST = DECODE(S)\n\n  Return a structure ST that contains decoded information to\n  build an ndi.epoch.epochprobemap object from a string\n</code></pre> <p>epochprobemap - Create a new ndi.epoch.epochprobemap object</p> <pre><code>MYNDI_EPOCHPROBEMAP = ndi.epoch.epochprobemap()\n\n  Creates a new ndi.epoch.epochprobemap object. This is an abstract\n  base class so it has no inputs.\n\n    Documentation for ndi.epoch.epochprobemap/epochprobemap\n       doc ndi.epoch.epochprobemap\n</code></pre> <p>serialize - Turn the ndi.epoch.epochprobemap object into a string</p> <pre><code>S = SERIALIZE(NDI_EPOCHPROBEMAP_OBJ)\n\n  Create a character array representation of an ndi.epoch.epochprobemap object\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap_daqsystem.m/","title":"CLASS ndi.epoch.epochprobemap_daqsystem","text":"<pre><code>  ndi.epoch.epochprobemap_daqsystem - Create a new ndi.epoch.epochprobemap_daqsystem object\n\n  MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(NAME, REFERENCE, TYPE, DEVICESTRING, SUBJECTSTRING)\n\n  Creates a new ndi.epoch.epochprobemap_daqsystem with name NAME, reference REFERENCE, type TYPE,\n  and devicestring DEVICESTRING.\n\n  NAME can be any string that begins with a letter and contains no whitespace. It\n  is CASE SENSITIVE.\n  REFERENCE must be a non-negative scalar integer.\n  TYPE is the type of recording.\n  DEVICESTRING is a string that indicates the channels that were used to acquire\n  this record.\n  SUBJECTSTRING describes the subject of the probe, either using the unique local identifier\n    or the document unique identifier (ID) of the ndi.document that describes the subject.\n\n  The function has an alternative form:\n\n    MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(FILENAME)\n\n  Here, FILENAME is assumed to be a tab-delimitted text file with a header row\n  that has entries 'name&lt;tab&gt;reference&lt;tab&gt;type&lt;tab&gt;devicestring&lt;tab&gt;&lt;subjectstring&gt;', with\n  one line per ndi.epoch.epochprobemap_daqsystem entry.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap_daqsystem.m/#superclasses","title":"Superclasses","text":"<p>ndi.epoch.epochprobemap</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap_daqsystem.m/#properties","title":"Properties","text":"Property Description name Name of the contents; can by any string that begins with a letter and contains no whitespace reference A non-negative scalar integer reference number that uniquely identifies data records that can be combined type The type of recording that is present in the data devicestring An ndi.daq.daqsystemstring that indicates the device and channels that comprise the data subjectstring A string describing the local_id or unique document ID of the subject of the probe"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap_daqsystem.m/#methods","title":"Methods","text":"Method Description decode decode table information for an ndi.epoch.epochprobemap object from a serialized string epochprobemap_daqsystem Create a new ndi.epoch.epochprobemap_daqsystem object savetofile Write ndi.epoch.epochprobemap_daqsystem object array to disk serialization_struct create a Matlab structure for serialization serialize Turn the ndi.epoch.epochprobemap object into a string"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochprobemap_daqsystem.m/#methods-help","title":"Methods help","text":"<p>decode - decode table information for an ndi.epoch.epochprobemap object from a serialized string</p> <pre><code>ST = DECODE(S)\n\n  Return a structure ST that contains decoded information to\n  build an ndi.epoch.epochprobemap object from a string\n</code></pre> <p>epochprobemap_daqsystem - Create a new ndi.epoch.epochprobemap_daqsystem object</p> <pre><code>MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(NAME, REFERENCE, TYPE, DEVICESTRING, SUBJECTSTRING)\n\n  Creates a new ndi.epoch.epochprobemap_daqsystem with name NAME, reference REFERENCE, type TYPE,\n  and devicestring DEVICESTRING.\n\n  NAME can be any string that begins with a letter and contains no whitespace. It\n  is CASE SENSITIVE.\n  REFERENCE must be a non-negative scalar integer.\n  TYPE is the type of recording.\n  DEVICESTRING is a string that indicates the channels that were used to acquire\n  this record.\n  SUBJECTSTRING describes the subject of the probe, either using the unique local identifier\n    or the document unique identifier (ID) of the ndi.document that describes the subject.\n\n  The function has an alternative form:\n\n    MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(FILENAME)\n\n  Here, FILENAME is assumed to be a tab-delimitted text file with a header row\n  that has entries 'name&lt;tab&gt;reference&lt;tab&gt;type&lt;tab&gt;devicestring&lt;tab&gt;&lt;subjectstring&gt;', with\n  one line per ndi.epoch.epochprobemap_daqsystem entry.\n\n    Documentation for ndi.epoch.epochprobemap_daqsystem/epochprobemap_daqsystem\n       doc ndi.epoch.epochprobemap_daqsystem\n</code></pre> <p>savetofile - Write ndi.epoch.epochprobemap_daqsystem object array to disk</p> <pre><code>SAVETOFILE(NDI_EPOCHPROBEMAP_DAQSYSTEM_OBJ, FILENAME)\n\n   Writes the ndi.epoch.epochprobemap_daqsystem object to disk in filename FILENAME (full path).\n</code></pre> <p>serialization_struct - create a Matlab structure for serialization</p> <pre><code>ST = SERIALIZATION_STRUCT(NDI_EPOCHPROBEMAP_DAQSYSTEM_OBJ)\n\n  Returns a structure of the parameters of an ndi.epoch.epochprobemap_daqsystem\n  object.\n</code></pre> <p>serialize - Turn the ndi.epoch.epochprobemap object into a string</p> <pre><code>S = SERIALIZE(NDI_EPOCHPROBEMAP_OBJ)\n\n  Create a character array representation of an ndi.epoch.epochprobemap_daqsystem object\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochrange.m/","title":"ndi.epoch.epochrange","text":"<pre><code>  EPOCHRANGE - return a range of epochs between a first and last epoch\n\n  [ER,ET,T0_T1] = EPOCHRANGE(NDI_EPOCHSET_OBJ, CLOCKTYPE, FIRSTEPOCH, LASTEPOCH)\n\n  Examine the NDI_EPOCHSET_OBJ and return the epochs between FIRSTEPOCH\n  and LASTEPOCH. FIRSTEPOCH and LASTEPOCH can be number or epoch_ids. Only\n  epochs with a CLOCKTYPE are considered matches.\n\n  NDI_EPOCHSET_OBJ must be of type ndi.epoch.epochset.\n\n  ER is a cell array of epoch_ids spanning FIRSTEPOCH and LASTEPOCH, inclusive.\n\n  ET is the epochtable of the NDI_EPOCHSET_OBJ.\n  T0_T1 (Nx2) are values of T0 and T1 for the given CLOCKTYPE for each epoch.\n\n\n  Example:\n   er = ndi.epoch.epochrange(myprobe,2,4);\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochset.m/","title":"CLASS ndi.epoch.epochset","text":"<pre><code>  NDI_EPOCHSET - routines for managing a set of epochs and their dependencies\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochset.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochset.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochset.m/#methods","title":"Methods","text":"Method Description buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build and store an epoch table that relates the current object's epochs to underlying epochs cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochset constructor for ndi.epoch.epochset objects epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID getcache return the NDI_CACHE and key for an ndi.epoch.epochset object getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? matchedepochtable compare a hash number from an epochtable to the current version numepochs Number of epochs of ndi.epoch.epochset resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/epochset.m/#methods-help","title":"Methods help","text":"<p>buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of EPOCHNODES.\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\n  In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with\n  a cost of 1 and a linear mapping rule with shift 1 and offset 0:\n    'utc' -&gt; 'utc'\n    'utc' -&gt; 'approx_utc'\n    'exp_global_time' -&gt; 'exp_global_time'\n    'exp_global_time' -&gt; 'approx_exp_global_time'\n    'dev_global_time' -&gt; 'dev_global_time'\n    'dev_global_time' -&gt; 'approx_dev_global_time'\n\n\n  See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping,\n  ndi.epoch.epochset/EPOCHNODES\n</code></pre> <p>buildepochtable - Build and store an epoch table that relates the current object's epochs to underlying epochs</p> <pre><code>[ET] = BUILDEPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch. The number may change as epochs are added and subtracted.\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch.\n  'epoch_session_id'        | The session ID that contains this epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_id', 'epochprobemap', and 'epoch_clock'\n\n  After it is read from disk once, the ET is stored in memory and is not re-read from disk\n  unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE.\n</code></pre> <p>cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache</p> <pre><code>GINFO_BIG = GINFO2CACHE(GINFO_SMALL)\n</code></pre> <p>cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epoch graph, if it exists and is up-to-date\n  (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ\n  has not changed). If there is no cached version, or if it is not up-to-date,\n  COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date,\n  it is deleted.\n\n  See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH\n</code></pre> <p>cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object</p> <pre><code>[ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epochtable, if it exists, along with its HASHVALUE\n  (a hash number generated from the table). If there is no cached version,\n  ET and HASHVALUE will be empty.\n</code></pre> <p>epoch2str - convert an epoch number or id to a string</p> <pre><code>S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER)\n\n  Returns the epoch NUMBER in the form of a string. If it is a simple\n  integer, then INT2STR is used to produce a string. If it is an epoch\n  identifier string, then it is returned.\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  The abstract class always returns ndi.time.clocktype('no_time')\n\n  See also: ndi.time.clocktype, T0_T1\n</code></pre> <p>epochgraph - graph of the mapping and cost of converting time among epochs</p> <pre><code>[COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes).\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n</code></pre> <p>epochid - Get the epoch identifier for a particular epoch</p> <pre><code>ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Returns the epoch identifier string for the epoch EPOCH_NUMBER.\n  If it doesn't exist, it should be created. EPOCH_NUMBER can be\n  a number of an EPOCH ID string.\n\n  The abstract class just queries the EPOCHTABLE.\n  Most classes that manage epochs themselves (ndi.file.navigator,\n  ndi.daq.system) will override this method.\n</code></pre> <p>epochnodes - return all epoch nodes from an ndi.epoch.epochset object</p> <pre><code>[NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ)\n\n  Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the\n  following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch within the session.\n  'epoch_session_id'           | The ID of the session that contains the epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A SINGLE ndi.time.clocktype entry that describes the clock type of this node.\n  't0_t1'                   | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock'\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_id', and 'epochprobemap'\n  'objectname'              | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no\n                            |   'name' field, then 'unknown' is used.\n  'objectclass'             | The object class name of the NDI_EPOCHSET_OBJ.\n\n  EPOCHNODES are related to EPOCHTABLE entries, except\n     a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains\n        multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids\n        in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another.\n     b) EPOCHNODES contain identifying information (objectname and objectclass) to help\n        in identifying the epoch nodes across ndi.epoch.epochset objects.\n\n  UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs.\n</code></pre> <p>epochset - constructor for ndi.epoch.epochset objects</p> <pre><code>NDI_EPOCHSET_OBJ = ndi.epoch.epochset()\n\n  This class has no parameters so the constructor is called with no input arguments.\n\n    Documentation for ndi.epoch.epochset/epochset\n       doc ndi.epoch.epochset\n</code></pre> <p>epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES</p> <pre><code>NAME = EPOCHSETNAME(NDI_EPOCHSET_OBJ)\n\n  Returns the object name that is used when creating epoch nodes.\n\n  If the class has a 'name' property, that property is used.\n  Otherwise, 'unknown' is used.\n</code></pre> <p>epochtable - Return an epoch table that relates the current object's epochs to underlying epochs</p> <pre><code>[ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch. The number may change as epochs are added and subtracted.\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch.\n  'epoch_session_id'           | The session ID that contains this epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap'\n\n  HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable\n  has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE.\n\n  After it is read from disk once, the ET is stored in memory and is not re-read from disk\n  unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE.\n</code></pre> <p>epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID</p> <pre><code>ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object\n  that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the\n  epoch or the EPOCHID of the epoch.\n</code></pre> <p>getcache - return the NDI_CACHE and key for an ndi.epoch.epochset object</p> <pre><code>[CACHE, KEY] = GETCACHE(NDI_EPOCHSET_OBJ)\n\n  Returns the NDI_CACHE object CACHE and the KEY used by the ndi.epoch.epochset object NDI_EPOCHSET_OBJ.\n\n  In this abstract class, no cache is available, so CACHE and KEY are empty. But subclasses can engage the\n  cache services of the class by returning an NDI_CACHE object and a unique key.\n</code></pre> <p>getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs</p> <pre><code>EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ)\n\n  Produce an array of ndi.epoch objects from the epoch table of this\n  ndi.epoch.epochset object (NDI_EPOCHSET_OBJ).\n</code></pre> <p>ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache</p> <pre><code>GINFO_SMALL = GINFO2CACHE(GINFO)\n</code></pre> <p>issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph?</p> <pre><code>B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ)\n\n  This function tells an ndi.time.syncgraph object whether it should continue\n  adding the 'underlying' epochs to the graph, or whether it should stop at this level.\n\n  For ndi.epoch.epochset objects, this returns 1. For some object types (ndi.probe.*, for example)\n  this will return 0 so that the underlying ndi.daq.system epochs are added.\n</code></pre> <p>matchedepochtable - compare a hash number from an epochtable to the current version</p> <pre><code>B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE)\n\n  Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE.\n  Otherwise, it returns 0.\n</code></pre> <p>numepochs - Number of epochs of ndi.epoch.epochset</p> <pre><code>N = NUMEPOCHS(NDI_EPOCHSET_OBJ)\n\n  Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ.\n\n  See also: EPOCHTABLE\n</code></pre> <p>resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk</p> <pre><code>NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  This function clears the internal cached memory of the epochtable, forcing it to be re-read from\n  disk at the next request.\n\n  See also: ndi.epoch.epochset/EPOCHTABLE\n</code></pre> <p>t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch</p> <pre><code>T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n</code></pre> <p>underlyingepochnodes - find all the underlying epochnodes of a given epochnode</p> <pre><code>[UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE)\n\n  Traverse the underlying nodes of a given EPOCHNODE until we get to the roots\n  (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1).\n\n  Note that the EPOCHNODE itself is returned as the first 'underlying' node.\n\n  See also: ISSYNCGRAPHROOT\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/findepochnode.m/","title":"ndi.epoch.findepochnode","text":"<pre><code>  FINDEPOCHNODE - find an occurrence of an epochnode in an array of epochnodes\n\n  INDEX = ndi.epoch.findepochnode(EPOCHNODE, EPOCHNODEARRAY)\n\n  Returns the index of any occurrence(s) of EPOCHNODE in EPOCHNODEARRAY.\n  EPOCHNODE and EPOCHNODEARRAY should be structures of the type returned by\n  ndi.epoch.epochset/EPOCHNODES.\n\n  EPOCHNODE should be a single element, and EPOCHNODEARRAY can be an array of\n  epochnode structures.\n\n  If any fields of EPOCHNODE are empty or are not present in the structure,\n  then that field is not searched over. Thus, INDEX can be an array of all\n  nodes that match the other criteria. If EPOCHNODE is fully filled, then\n  only exact matches are returned.\n\n  Note: at present, the 'epochprobemap' field is not compared.\n\n  See also: ndi.epoch.epochset/EPOCHNODES\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/%2Bepochset/param.m/","title":"CLASS ndi.epoch.epochset.param","text":"<pre><code>  NDI_EPOCHSET_PARAM - special class of NDI_EPOCHSET that can read/write parameters about epochs\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/%2Bepochset/param.m/#superclasses","title":"Superclasses","text":"<p>ndi.epoch.epochset</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/%2Bepochset/param.m/#properties","title":"Properties","text":"Property Description epochprobemap_class The (sub)class of ndi.epoch.epochprobemap_daqsystem to be used; NDI_EPOCHCONTS is the default; a string"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/%2Bepochset/param.m/#methods","title":"Methods","text":"Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Build and store an epoch table that relates the current object's epochs to underlying epochs cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch getcache return the NDI_CACHE and key for an ndi.epoch.epochset object getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs getepochprobemap Return the epoch record for a given ndi.epoch.epochset.param epoch number getepochtag Get tag(s) from an epoch ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? matchedepochtable compare a hash number from an epochtable to the current version numepochs Number of epochs of ndi.epoch.epochset param Constructor for ndi.epoch.epochset.param objects removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk setepochprobemap Sets the epoch record of a particular epoch setepochtag Set tag(s) for an epoch t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode verifyepochprobemap Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object"},{"location":"NDI-matlab/reference/%2Bndi/%2Bepoch/%2Bepochset/param.m/#methods-help","title":"Methods help","text":"<p>addepochtag - Add tag(s) for an epoch</p> <pre><code>ADDEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. These tags will be added to any\n  tags in the epoch EPOCHNUMBER. If tags with the same names as those in TAG\n  already exist, they will be overwritten. If there is no epoch\n  EPOCHNUMBER, then an error is returned.\n</code></pre> <p>buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of EPOCHNODES.\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\n  In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with\n  a cost of 1 and a linear mapping rule with shift 1 and offset 0:\n    'utc' -&gt; 'utc'\n    'utc' -&gt; 'approx_utc'\n    'exp_global_time' -&gt; 'exp_global_time'\n    'exp_global_time' -&gt; 'approx_exp_global_time'\n    'dev_global_time' -&gt; 'dev_global_time'\n    'dev_global_time' -&gt; 'approx_dev_global_time'\n\n\n  See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping,\n  ndi.epoch.epochset.param/EPOCHNODES\n\nHelp for ndi.epoch.epochset.param/buildepochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>buildepochtable - Build and store an epoch table that relates the current object's epochs to underlying epochs</p> <pre><code>[ET] = BUILDEPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch. The number may change as epochs are added and subtracted.\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch.\n  'epoch_session_id'        | The session ID that contains this epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_id', 'epochprobemap', and 'epoch_clock'\n\n  After it is read from disk once, the ET is stored in memory and is not re-read from disk\n  unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE.\n\nHelp for ndi.epoch.epochset.param/buildepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache</p> <pre><code>GINFO_BIG = GINFO2CACHE(GINFO_SMALL)\n\nHelp for ndi.epoch.epochset.param.cache2ginfo is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epoch graph, if it exists and is up-to-date\n  (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ\n  has not changed). If there is no cached version, or if it is not up-to-date,\n  COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date,\n  it is deleted.\n\n  See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH\n\nHelp for ndi.epoch.epochset.param/cached_epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object</p> <pre><code>[ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epochtable, if it exists, along with its HASHVALUE\n  (a hash number generated from the table). If there is no cached version,\n  ET and HASHVALUE will be empty.\n\nHelp for ndi.epoch.epochset.param/cached_epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epoch2str - convert an epoch number or id to a string</p> <pre><code>S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER)\n\n  Returns the epoch NUMBER in the form of a string. If it is a simple\n  integer, then INT2STR is used to produce a string. If it is an epoch\n  identifier string, then it is returned.\n\nHelp for ndi.epoch.epochset.param/epoch2str is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  The abstract class always returns ndi.time.clocktype('no_time')\n\n  See also: ndi.time.clocktype, T0_T1\n\nHelp for ndi.epoch.epochset.param/epochclock is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochgraph - graph of the mapping and cost of converting time among epochs</p> <pre><code>[COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes).\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\nHelp for ndi.epoch.epochset.param/epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochid - Get the epoch identifier for a particular epoch</p> <pre><code>ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Returns the epoch identifier string for the epoch EPOCH_NUMBER.\n  If it doesn't exist, it should be created. EPOCH_NUMBER can be\n  a number of an EPOCH ID string.\n\n  The abstract class just queries the EPOCHTABLE.\n  Most classes that manage epochs themselves (ndi.file.navigator,\n  ndi.daq.system) will override this method.\n\nHelp for ndi.epoch.epochset.param/epochid is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochnodes - return all epoch nodes from an ndi.epoch.epochset object</p> <pre><code>[NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ)\n\n  Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the\n  following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch within the session.\n  'epoch_session_id'           | The ID of the session that contains the epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A SINGLE ndi.time.clocktype entry that describes the clock type of this node.\n  't0_t1'                   | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock'\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_id', and 'epochprobemap'\n  'objectname'              | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no\n                            |   'name' field, then 'unknown' is used.\n  'objectclass'             | The object class name of the NDI_EPOCHSET_OBJ.\n\n  EPOCHNODES are related to EPOCHTABLE entries, except\n     a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains\n        multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids\n        in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another.\n     b) EPOCHNODES contain identifying information (objectname and objectclass) to help\n        in identifying the epoch nodes across ndi.epoch.epochset objects.\n\n  UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs.\n\nHelp for ndi.epoch.epochset.param/epochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochprobemapfilename - return the filename for the ndi.epoch.epochprobemap_daqsystem file for an epoch</p> <pre><code>ECFNAME = EPOCHPROBEMAPFILENAME(NDI_EPOCHSET_PARAM_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Returns the EPOCHPROBEMAPFILENAME for the NDI_EPOCHSET_PARAM_OBJ epoch EPOCH_NUMBER_OR_ID.\n  If there is no epoch NUMBER, an error is generated. The file name is returned with\n  a full path.\n\n  In this abstract class, an error is always generated. It must be overridden by child classes.\n</code></pre> <p>epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES</p> <pre><code>NAME = EPOCHSETNAME(NDI_EPOCHSET_OBJ)\n\n  Returns the object name that is used when creating epoch nodes.\n\n  If the class has a 'name' property, that property is used.\n  Otherwise, 'unknown' is used.\n\nHelp for ndi.epoch.epochset.param/epochsetname is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtable - Return an epoch table that relates the current object's epochs to underlying epochs</p> <pre><code>[ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch. The number may change as epochs are added and subtracted.\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch.\n  'epoch_session_id'           | The session ID that contains this epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap'\n\n  HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable\n  has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE.\n\n  After it is read from disk once, the ET is stored in memory and is not re-read from disk\n  unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE.\n\nHelp for ndi.epoch.epochset.param/epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID</p> <pre><code>ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object\n  that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the\n  epoch or the EPOCHID of the epoch.\n\nHelp for ndi.epoch.epochset.param/epochtableentry is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtagfilename - return the file path for the tag file for an epoch</p> <pre><code>ETFNAME = EPOCHTAGFILENAME(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER)\n\n  In this base class, empty is returned because it is an abstract class.\n</code></pre> <p>getcache - return the NDI_CACHE and key for an ndi.epoch.epochset object</p> <pre><code>[CACHE, KEY] = GETCACHE(NDI_EPOCHSET_OBJ)\n\n  Returns the NDI_CACHE object CACHE and the KEY used by the ndi.epoch.epochset object NDI_EPOCHSET_OBJ.\n\n  In this abstract class, no cache is available, so CACHE and KEY are empty. But subclasses can engage the\n  cache services of the class by returning an NDI_CACHE object and a unique key.\n\nHelp for ndi.epoch.epochset.param/getcache is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs</p> <pre><code>EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ)\n\n  Produce an array of ndi.epoch objects from the epoch table of this\n  ndi.epoch.epochset object (NDI_EPOCHSET_OBJ).\n\nHelp for ndi.epoch.epochset.param/getepocharray is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>getepochprobemap - Return the epoch record for a given ndi.epoch.epochset.param epoch number</p> <pre><code>EPOCHPROBEMAP = GETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, N)\n\n  Inputs:\n      NDI_EPOCHSET_PARAM_OBJ - the ndi.epoch.epochset.param object\n      N - the epoch number or identifier\n\n  Output:\n      EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME\n</code></pre> <p>getepochtag - Get tag(s) from an epoch</p> <pre><code>TAG = GETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. If there are no files in\n  EPOCHNUMBER then an error is returned.\n</code></pre> <p>ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache</p> <pre><code>GINFO_SMALL = GINFO2CACHE(GINFO)\n\nHelp for ndi.epoch.epochset.param.ginfo2cache is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph?</p> <pre><code>B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ)\n\n  This function tells an ndi.time.syncgraph object whether it should continue\n  adding the 'underlying' epochs to the graph, or whether it should stop at this level.\n\n  For ndi.epoch.epochset objects, this returns 1. For some object types (ndi.probe.*, for example)\n  this will return 0 so that the underlying ndi.daq.system epochs are added.\n\nHelp for ndi.epoch.epochset.param/issyncgraphroot is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>matchedepochtable - compare a hash number from an epochtable to the current version</p> <pre><code>B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE)\n\n  Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE.\n  Otherwise, it returns 0.\n\nHelp for ndi.epoch.epochset.param/matchedepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>numepochs - Number of epochs of ndi.epoch.epochset</p> <pre><code>N = NUMEPOCHS(NDI_EPOCHSET_OBJ)\n\n  Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ.\n\n  See also: EPOCHTABLE\n\nHelp for ndi.epoch.epochset.param/numepochs is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>param - Constructor for ndi.epoch.epochset.param objects</p> <pre><code>NDI_EPOCHSET_PARAM_OBJ = ndi.epoch.epochset.param(EPOCHPROBEMAP_CLASS)\n\n  Create a new ndi.epoch.epochset.param object. It has one optional input argument,\n  EPOCHPROBEMAP_CLASS, a string, that specifies the name of the class or subclass\n  of ndi.epoch.epochprobemap_daqsystem to be used.\n\n    Documentation for ndi.epoch.epochset.param/param\n       doc ndi.epoch.epochset.param\n</code></pre> <p>removeepochtag - Remove tag(s) for an epoch</p> <pre><code>REMOVEEPOCHTAG(NDI_EPOCH_PARAM_OBJ, EPOCHNUMBER, NAME)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. Any tags with name 'NAME' will\n  be removed from the tags in the epoch EPOCHNUMBER.\n  tags in the epoch directory. If tags with the same names as those in TAG\n  already exist, they will be overwritten. If there is no epoch\n  EPOCHNUMBER, then an error is returned.\n\n  NAME can be a single string, or it can be a cell array of strings\n  (which will result in the removal of multiple tags).\n</code></pre> <p>resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk</p> <pre><code>NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  This function clears the internal cached memory of the epochtable, forcing it to be re-read from\n  disk at the next request.\n\n  See also: ndi.epoch.epochset.param/EPOCHTABLE\n\nHelp for ndi.epoch.epochset.param/resetepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>setepochprobemap - Sets the epoch record of a particular epoch</p> <pre><code>SETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, EPOCHPROBEMAP, NUMBER, [OVERWRITE])\n\n  Sets or replaces the ndi.epoch.epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch\n  numbered NUMBER.  If OVERWRITE is present and is 1, then any existing epoch record is overwritten.\n  Otherwise, an error is given if there is an existing epoch record.\n\n  See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem\n</code></pre> <p>setepochtag - Set tag(s) for an epoch</p> <pre><code>SETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. These tags will replace any\n  tags in the epoch directory. If there is no epoch EPOCHNUMBER, then\n  an error is returned.\n</code></pre> <p>t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch</p> <pre><code>T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\nHelp for ndi.epoch.epochset.param/t0_t1 is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>underlyingepochnodes - find all the underlying epochnodes of a given epochnode</p> <pre><code>[UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE)\n\n  Traverse the underlying nodes of a given EPOCHNODE until we get to the roots\n  (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1).\n\n  Note that the EPOCHNODE itself is returned as the first 'underlying' node.\n\n  See also: ISSYNCGRAPHROOT\n\nHelp for ndi.epoch.epochset.param/underlyingepochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>verifyepochprobemap - Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object</p> <pre><code>[B,MSG] = VERIFYEPOCHPROBEMAP(ndi.epoch.epochset.param, EPOCHPROBEMAP, EPOCH_NUMBER_OR_ID)\n\n  Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given\n  epoch number or epoch id EPOCH_NUMBER_OR_ID.\n\n  For the abstract class EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an\n  ndi.epoch.epochprobemap_daqsystem object.\n\n  If B is 0, then the error message is returned in MSG.\n\n  See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/element2spiketimes.m/","title":"ndi.example.fun.element2spiketimes","text":"<pre><code>  ELEMENT2SPIKETIMES - retrieve spike times from an element\n\n  SPIKESTRUCT = ELEMENT2SPIKETIMES(E, ED)\n\n  Given an element E and its corresponding element document ED, this function\n  retrieves all spike times and related information. It returns a structure:\n  |----------------|----------------------------------------|\n  | Field          | Description                            |\n  |----------------|----------------------------------------|\n  | element_info   | Information about the element          |\n  | epoch_data     | A structure with fields of all the data|\n  |   epoch_id     | Epoch ID                               |\n  |   spiketimes   | Spike times in the local epoch clock   |\n  |   t0_t1        | Start and end times of the epoch in the|\n  |                |   local epoch clock                    |\n  | neuron_info    | Extracellular spike info (if available)|\n  |----------------|----------------------------------------|\n\n  This function assumes that E is an element of type 'spikes'.\n\n  Example:\n    [ed, e] = ndi.example.fun.probe2elements(probe, 'type', 'spikes');\n    spikeStruct = element2spiketimes(e{1}, ed{1});\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/find_epochids_with_temperature.m/","title":"ndi.example.fun.find_epochids_with_temperature","text":"<pre><code>  FIND_EPOCHIDS_WITH_TEMPERATURE - Find all epochids where the temperature was held constant at a specified value\n\n    EPOCH_IDS = FIND_EPOCHIDS_WITH_TEMPERATURE(NDI_SESSION_OR_DATASET_OBJ, TEMPERATURE)\n\n    This function searches for all epochs in an NDI session or dataset where the temperature was held\n    constant at a specified value. It returns a cell array of epoch IDs.\n\n    Inputs:\n        NDI_SESSION_OR_DATASET_OBJ: An ndi.session object or an ndi.dataset object representing the session or dataset to search.\n        TEMPERATURE: The temperature value to search for in degrees Celsius.\n\n    Outputs:\n        EPOCH_IDS: A cell array of epoch IDs where the specified temperature was held constant.\n\n    Example:\n        % Find all epochids where the temperature was held constant at 15 degrees Celsius\n        epoch_ids = ndi.example.fun.find_epochids_with_temperature(my_ndi_session, 15);\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/getEarlyEyeOpening.m/","title":"ndi.example.fun.getEarlyEyeOpening","text":"<pre><code>  GETEARLYEYEOPENING - Retrieve early eye opening data for subjects in a dataset\n\n  EEData = GETEARLYEYEOPENING(D)\n\n  Extracts information about early eye opening treatments and associated\n  probe data for each subject in an ndi.dataset or ndi.session object D.\n\n  The function returns a structure array, EEData, where each element\n  corresponds to a subject and contains the following fields:\n\n  |-------------------|------------------------------------------------|\n  | Field             | Description                                    |\n  |-------------------|------------------------------------------------|\n  | subject_name      | The local identifier of the subject            |\n  | subject_id        | The unique ID of the subject                   |\n  | probe_name        | Name of the probe associated with the subject  |\n  | probe_hemisphere  | Hemisphere location information of the probe   |\n  | left_eye          | Treatment information for the left eye         |\n  | right_eye         | Treatment information for the right eye        |\n  | spike_data        | A structure with the following fields:         |\n  |                   |    element_info: Information about the element | \n  |                   |    epoch_data  : A structure with fields:      |\n  |                   |        epoch_id   : Epoch ID                   |\n  |                   |        spiketimes : Spike times                |\n  |                   |        t0_t1      : Start and end times        |\n  |                   |    neuron_info  : Extracellular spike info     |\n  |-------------------|------------------------------------------------|\n\n  See also: ndi.example.fun.probe2elements(),\n     ndi.example.fun.element2spiketimes()\n\n  Example:\n    D = ndi.example.fun.opendataset('early_eye_opening'); \n    EEData = getEarlyEyeOpening(D);\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/get_unique_bath_components.m/","title":"ndi.example.fun.get_unique_bath_components","text":"<pre><code> GET_UNIQUE_BATH_COMPONENTS - Extract unique ontologyName and name entries from stimulus_bath documents.\n\n    UNIQUE_DATA = GET_UNIQUE_BATH_COMPONENTS(NDI_SESSION_OBJ)\n\n    This function searches for all documents of type 'stimulus_bath' within\n    the provided NDI session or dataset object, extracts the 'ontologyName' and 'name'\n    entries from their 'mixture_table' fields, and returns a table containing\n    the unique combinations of these entries.\n\n    Inputs:\n        NDI_SESSION_OBJ: An ndi.session or ndi.dataset object representing the NDI session\n                         or dataset to search.\n\n    Outputs:\n        UNIQUE_DATA: A Matlab table containing the unique combinations of\n                     'ontologyName' and 'name' entries found in the\n                     'mixture_table' fields of all 'stimulus_bath' documents.\n\n  Example:\n    % if S is an ndi.session or ndi.dataset object\n    unique_data = ndi.example.fun.get_unique_bath_components(S);\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/mfdaqsysepoch2timetablestruct.m/","title":"ndi.example.fun.mfdaqsysepoch2timetablestruct","text":"<pre><code>  MFDAQSYSEPOCH2TIMETABLESTRUCT - extract all records of an mfdaq daq system to Matlab timetables\n\n  TIMETABLESTRUCT = MFDAQSYSEPOCH2TIMETABLESTRUCT(DQ, EPOCH)\n\n  Given an ndi.system.mfdaq, create a structure of timetable objects.\n  The structure will have one entry for all analog input data (ai),\n  and another entry for all event data (event).\n\n  Note that this will attempt to load all data from an epoch; if the\n  epoch is very large, the program may run out of memory.\n\n  EPOCH is a number or epoch_id of the epoch to be read.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/probe2elements.m/","title":"ndi.example.fun.probe2elements","text":"<pre><code>  PROBE2ELEMENTS - retrieve the elements derived directly from a probe\n\n  [ED,E] = PROBE2ELEMENTS(PROBE, ...)\n\n  Retrieves element documents and the corresponding ndi.element objects\n  that are derived from the ndi.probe object PROBE.\n\n  One can provide additional arguments as name/value pairs that modify the\n  default behavior:\n  |-------------------------|------------------------------------------|\n  | Parameter (default)     | Description                              |\n  |-------------------------|------------------------------------------|\n  | type ('')               | If not empty, restrict to this element   |\n  |                         |   type (e.g., 'spikes')                  |\n  | name ('')               | If not empty, restrict to element name   |\n  | reference (NaN)         | If not NaN, restrict to reference        |\n  |-------------------------|------------------------------------------|\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Bfun/probe2spiketimes.m/","title":"ndi.example.fun.probe2spiketimes","text":"<pre><code>  PROBE2SPIKETIMES - retrieve all spike recordings and times from a probe\n\n  SPIKESTRUCT = PROBE2SPIKETIMES(PROBE)\n\n  Identifies all spike records (elements of type 'spike') that were\n  recorded on a given PROBE. Then, creates a structure:\n  |----------------|----------------------------------------|\n  | Field          | Description                            |\n  |----------------|----------------------------------------|\n  | element_info   | Information about the element          |\n  | epoch_data     | A structure with fields of all the data|\n  |   epoch_id     | Epoch ID                               |\n  |   spiketimes   | Spike times in the local epoch clock   |\n  |   t0_t1        | Start and end times of the epoch in the|\n  |                |   local epoch clock                    |\n  | neuron_info    | Extracellular spike info               |\n  |----------------|----------------------------------------|\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Btutorial/plottreeshrewdata.m/","title":"ndi.example.tutorial.plottreeshrewdata","text":"<pre><code>  ndi.example.tutorial.plottreeshrewdata - plot tree shrew data from Van Hooser et al. 2014\n\n  ndi.example.tutorial.plottreeshrewdata(filename)\n\n\n  This function also accepts additional arguments in the form of name/value pairs\n  (see help NAMEVALUEPAIR)\n  -------------------------------------------------------------------------------\n  | Property (default)       | Description                                      |\n  | ------------------------ | ------------------------------------------------ |\n  | electrodeChannel (11)    | Channel with the electrode recording             |\n  | stimTriggerChannel (2)   | Channel with the stimulus trigger record         |\n  | syncChannel (4)          | Channel with the synchronizing information       |\n  | stimCodeMarkChannel (32) | Channel with stimulus code mark information      |\n  | timeWindow ([0 100])     | Time window to show initially in graph           |\n  | ePhysYRange ([-11 11])   | ePhys Y range                                    |\n  | ePhysYStimLabel (7)      | Y location for stimulus code type plot           |\n  | syncYRange ([0 8])       | stimSync Y range                                 |\n  | syncYStimLabel (7)       | Y location for stimulus code type plot           |\n  | stimDuration (2))        | Stimulus duration in seconds                     |\n  | fig ([])                 | The figure to use. If empty, make a new one      |\n  | verbose (1)              | Should we print status messages?                 |\n  | plotit (1)               | Plot the data                                    |\n  | plotstimsync (0)         | Plot a graph of the stimSync data                |\n  | title_string ('')        | Plot title string                                |\n  |-----------------------------------------------------------------------------|\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_02_01.m/","title":"ndi.example.tutorial.tutorial_02_01","text":"<pre><code>  ndi.example.tutorial.tutorial_02_01 - runs the code in Tutorial 2.1\n\n  out = ndi.example.tutorial.tutorial_02_01(PREFIX, [TESTING])\n\n  Runs (and tests) the code for\n\n  NDI Tutorial 2: Analyzing your first electrophysiology experiment with NDI\n     Tutorial 2.1: Reading an example dataset\n  The tutorial is available at\n      https://vh-lab.github.io/NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset.md\n\n  PREFIX should be the directory that contains the directory 'ts_exper1'. If it is not\n  provided or is empty, the default is [userpath filesep 'Documents' filesep 'NDI'].\n\n  If TESTING is 1, then PREFIX is taken to be [userpath filesep 'Documents' filesep' NDI filesep 'Test'],\n  and the files are copied to the temporary directory before proceeding so that the files\n  in the directory called PREFIX are not touched.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_02_02.m/","title":"ndi.example.tutorial.tutorial_02_02","text":"<pre><code>  ndi.example.tutorial.tutorial_02_02 - runs the code in Tutorial 2.2\n\n  out = ndi.example.tutorial.tutorial_02_02(PREFIX, [TESTING])\n\n  Runs (and tests) the code for\n\n  NDI Tutorial 2: Analyzing your first electrophysiology experiment with NDI\n     Tutorial 2.2: The automated way\n  The tutorial is available at\n      https://vh-lab.github.io/NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway\n\n  PREFIX should be the directory that contains the directory 'ts_exper2'. If it is not\n  provided or is empty, the default is [userpath filesep 'Documents' filesep 'NDI'].\n\n  If TESTING is 1, then the files are copied to the temporary directory before proceeding so that the files\n  in the directory called PREFIX are not touched.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_02_03.m/","title":"ndi.example.tutorial.tutorial_02_03","text":"<pre><code>  ndi.example.tutorial.tutorial_02_03 - runs the code in Tutorial 2.3\n\n  out = ndi.example.tutorial.tutorial_02_03(PREFIX, [TESTING])\n\n  Runs (and tests) the code for\n\n  NDI Tutorial 2: Analyzing your first electrophysiology experiment with NDI\n     Tutorial 2.3: Using apps to analyze data (example - spike sorting)\n  The tutorial is available at\n      https://vh-lab.github.io/NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/\n\n  PREFIX should be the directory that contains the directory 'ts_exper2'. If it is not\n  provided or is empty, the default is [userpath filesep 'Documents' filesep 'NDI'].\n\n  If TESTING is 1, then the files are examined in the temporary directory\n  ndi.common.PathConstants.TempFolder . It is assumed that\n  ndi.example.tutorial.tutorial_t02_02([],1) has been run (with TESTING set to 1).\n\n  Note: a little manual intervention is needed in this tutorial.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_02_04.m/","title":"ndi.example.tutorial.tutorial_02_04","text":"<pre><code>  ndi.example.tutorial.tutorial_02_04 - runs the code in Tutorial 2.4\n\n  out = ndi.example.tutorial.tutorial_02_04(PREFIX, [TESTING])\n\n  Runs (and tests) the code for\n\n  NDI Tutorial 2: Analyzing your first electrophysiology experiment with NDI\n     Tutorial 2.4: Analyzing stimulus responses\n  The tutorial is available at\n      https://vh-lab.github.io/NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/\n\n  PREFIX should be the directory that contains the directory 'ts_exper2'. If it is not\n  provided or is empty, the default is [userpath filesep 'Documents' filesep 'NDI'].\n\n  If TESTING is 1, then the files are examined in the temporary directory\n  ndi.common.PathConstants.TempFolder. It is assumed that\n  ndi.example.tutorial.tutorial_t02_03([],1) has been run (with TESTING set to 1).\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bexample/%2Btutorial/tutorial_02_05.m/","title":"ndi.example.tutorial.tutorial_02_05","text":"<pre><code>  ndi.example.tutorial.tutorial_02_05 - runs the code in Tutorial 2.5\n\n  out = ndi.example.tutorial.tutorial_02_05(PREFIX, [TESTING])\n\n  Runs (and tests) the code for\n\n  NDI Tutorial 2: Analyzing your first electrophysiology experiment with NDI\n     Tutorial 2.5: Understanding and searching the NDI database\n  The tutorial is available at\n      https://vh-lab.github.io/NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/\n\n  PREFIX should be the directory that contains the directory 'ts_exper2'. If it is not\n  provided or is empty, the default is [userpath filesep 'Documents' filesep 'NDI'].\n\n  If TESTING is 1, then the files are examined in the temporary directory\n  ndi.common.PathConstants.TempFolder. It is assumed that\n  ndi.example.tutorial.tutorial_t02_04([],1) has been run (with TESTING set to 1).\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/navigator.m/","title":"CLASS ndi.file.navigator","text":"<pre><code>  ndi.file.navigator - object class for accessing files on disk\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/navigator.m/#superclasses","title":"Superclasses","text":"<p>ndi.ido, did.ido, ndi.epoch.epochset.param, ndi.epoch.epochset, ndi.documentservice, ndi.database.ingestion_help</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/navigator.m/#properties","title":"Properties","text":"Property Description session The ndi.session to be examined (handle) fileparameters The parameters for finding files (see ndi.file.navigator/SETFILEPARAMETERS) epochprobemap_fileparameters The parameters for finding the epochprobemap files (see ndi.file.navigator/SETEPOCHPROBEMAPFILEPARAMETERS) identifier epochprobemap_class"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/navigator.m/#methods","title":"Methods","text":"Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Return an epoch table for ndi.file.navigator cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object defaultepochprobemapfilename return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochidfilename return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq determines whether two ndi.file.navigator objects are equivalent filematch_hashstring a computation to produce a (likely to be) unique string based on filematch find_ingested_documents find ndi.documents that reflect ingested epochs getcache return the NDI_CACHE and key for ndi.file.navigator getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs getepochfiles Return the file paths for one recording epoch getepochfiles_number Return the file paths for one recording epoch getepochingesteddoc get an ingested epoch document if it exists getepochprobemap Return the epoch record for a given ndi.file.navigator epoch number getepochtag Get tag(s) from an epoch ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the identifier of an DID.IDO object ingest create new documents that produce the ingestion of an ingestion_help_obj ingestedfiles_epochid what is the epoch id for ingested epochfiles? ingestion_class the name of the ingestion class for this object isingested is a set of epochfiles ingested? issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? matchedepochtable compare a hash number from an epochtable to the current version navigator Create a new ndi.file.navigator object that is associated with an session and daqsystem newdocument create an ndi.document that is based on an ndi.file.navigator object numepochs Number of epochs of ndi.epoch.epochset path Return the file path for the ndi.file.navigator object removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery create a search query that will search for this object selectfilegroups Return groups of files that will comprise epochs selectfilegroups_disk select groups of files that will comprise epochs on disk setepochprobemap Sets the epoch record of a particular epoch setepochprobemapfileparameters Set the epoch record fileparameters field of a ndi.file.navigator object setepochtag Set tag(s) for an epoch setfileparameters Set the fileparameters field of a ndi.file.navigator object setsession set the SESSION for an ndi.file.navigator object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/navigator.m/#methods-help","title":"Methods help","text":"<p>addepochtag - Add tag(s) for an epoch</p> <pre><code>ADDEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. These tags will be added to any\n  tags in the epoch EPOCHNUMBER. If tags with the same names as those in TAG\n  already exist, they will be overwritten. If there is no epoch\n  EPOCHNUMBER, then an error is returned.\n\nHelp for ndi.file.navigator/addepochtag is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of EPOCHNODES.\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\n  In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with\n  a cost of 1 and a linear mapping rule with shift 1 and offset 0:\n    'utc' -&gt; 'utc'\n    'utc' -&gt; 'approx_utc'\n    'exp_global_time' -&gt; 'exp_global_time'\n    'exp_global_time' -&gt; 'approx_exp_global_time'\n    'dev_global_time' -&gt; 'dev_global_time'\n    'dev_global_time' -&gt; 'approx_dev_global_time'\n\n\n  See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping,\n  ndi.file.navigator/EPOCHNODES\n\nHelp for ndi.file.navigator/buildepochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>buildepochtable - Return an epoch table for ndi.file.navigator</p> <pre><code>ET = BUILDEPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch (may change)\n  'epoch_id'                | The epoch ID code (will never change once established)\n                            |   This uniquely specifies the epoch within the session.\n  'epoch_session_id'        | The ID of the session that contains this epoch.\n  'epochprobemap'           | The epochprobemap object from each epoch\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap'\n                            |   'underlying' contains the file list for each epoch; 'epoch_id' and 'epoch_number'\n                            |   match those of NDI_FILENAVIGATOR_OBJ\n</code></pre> <p>cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache</p> <pre><code>GINFO_BIG = GINFO2CACHE(GINFO_SMALL)\n\nHelp for ndi.file.navigator.cache2ginfo is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epoch graph, if it exists and is up-to-date\n  (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ\n  has not changed). If there is no cached version, or if it is not up-to-date,\n  COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date,\n  it is deleted.\n\n  See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH\n\nHelp for ndi.file.navigator/cached_epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object</p> <pre><code>[ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epochtable, if it exists, along with its HASHVALUE\n  (a hash number generated from the table). If there is no cached version,\n  ET and HASHVALUE will be empty.\n\nHelp for ndi.file.navigator/cached_epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>defaultepochprobemapfilename - return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch</p> <pre><code>ECFNAME = DEFAULTEPOCHPROBEMAPFILENAME(NDI_FILENAVIGATOR_OBJ, NUMBER)\n\n  Returns the default EPOCHPROBEMAPFILENAME for the ndi.daq.system NDI_DEVICE_OBJ for epoch NUMBER.\n  If there are no files in epoch NUMBER, an error is generated. NUMBER cannot be an epoch id.\n\n  In the base class, ndi.epoch.epochprobemap_daqsystem data is stored as a hidden file in the same directory\n  as the first epoch file. If the first file in the epoch file list is 'PATH/MYFILENAME.ext', then\n  the default ndi.epoch.epochprobemap_daqsystem data is stored as 'PATH/.MYFILENAME.ext.epochprobemap.ndi.'.\n  This may be overridden if there is an EPOCHPROBEMAP_FILEPARAMETERS set.\n\n  See also: ndi.file.navigator/SETEPOCHPROBEMAPFILEPARAMETERS\n</code></pre> <p>epoch2str - convert an epoch number or id to a string</p> <pre><code>S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER)\n\n  Returns the epoch NUMBER in the form of a string. If it is a simple\n  integer, then INT2STR is used to produce a string. If it is an epoch\n  identifier string, then it is returned.\n\nHelp for ndi.file.navigator/epoch2str is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  The abstract class always returns ndi.time.clocktype('no_time')\n\n  See also: ndi.time.clocktype, T0_T1\n\nHelp for ndi.file.navigator/epochclock is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochgraph - graph of the mapping and cost of converting time among epochs</p> <pre><code>[COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes).\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\nHelp for ndi.file.navigator/epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochid - Get the epoch identifier for a particular epoch</p> <pre><code>ID = EPOCHID (NDI_FILENAVIGATOR_OBJ, EPOCH_NUMBER)\n\n  Returns the epoch identifier string for the epoch EPOCH_NUMBER.\n  If it doesn't exist, it is created.\n</code></pre> <p>epochidfilename - return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch</p> <pre><code>ECFNAME = EPOCHIDFILENAME(NDI_FILENAVIGATOR_OBJ, NUMBER)\n\n  Returns the EPOCHIDFILENAME for the ndi.daq.system NDI_DEVICE_OBJ for epoch NUMBER.\n  If there are no files in epoch NUMBER, an error is generated.\n\n  In the base class, ndi.epoch.epochprobemap_daqsystem data is stored as a hidden file in the same directory\n  as the first epoch file. If the first file in the epoch file list is 'PATH/MYFILENAME.ext', then\n  the ndi.epoch.epochprobemap_daqsystem data is stored as 'PATH/.MYFILENAME.ext.epochid.ndi.'.\n</code></pre> <p>epochnodes - return all epoch nodes from an ndi.epoch.epochset object</p> <pre><code>[NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ)\n\n  Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the\n  following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch within the session.\n  'epoch_session_id'           | The ID of the session that contains the epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A SINGLE ndi.time.clocktype entry that describes the clock type of this node.\n  't0_t1'                   | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock'\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_id', and 'epochprobemap'\n  'objectname'              | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no\n                            |   'name' field, then 'unknown' is used.\n  'objectclass'             | The object class name of the NDI_EPOCHSET_OBJ.\n\n  EPOCHNODES are related to EPOCHTABLE entries, except\n     a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains\n        multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids\n        in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another.\n     b) EPOCHNODES contain identifying information (objectname and objectclass) to help\n        in identifying the epoch nodes across ndi.epoch.epochset objects.\n\n  UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs.\n\nHelp for ndi.file.navigator/epochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochprobemapfilename - return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch</p> <pre><code>ECFNAME = EPOCHPROBEMAPFILENAME(NDI_FILENAVIGATOR_OBJ, NUMBER)\n\n  Returns the EPOCHPROBEMAPFILENAME for the ndi.file.navigator NDI_FILENAVIGATOR_OBJ for epoch NUMBER.\n  If there are no files in epoch NUMBER, an error is generated. The file name is returned with\n  a full path. NUMBER cannot be an epoch_id.\n\n  The file name is determined by examining if the user has specified any\n  EPOCHPROBEMAP_FILEPARAMETERS; if not, then the DEFAULTEPOCHPROBEMAPFILENAME is used.\n\n  See also: ndi.file.navigator/SETEPOCHPROBEMAPFILEPARAMETERS, ndi.file.navigator/DEFAULTEPOCHPROBEMAPFILENAME\n\n  default\n</code></pre> <p>epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES</p> <pre><code>NAME = EPOCHSETNAME(NDI_EPOCHSET_OBJ)\n\n  Returns the object name that is used when creating epoch nodes.\n\n  If the class has a 'name' property, that property is used.\n  Otherwise, 'unknown' is used.\n\nHelp for ndi.file.navigator/epochsetname is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtable - Return an epoch table that relates the current object's epochs to underlying epochs</p> <pre><code>[ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch. The number may change as epochs are added and subtracted.\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch.\n  'epoch_session_id'           | The session ID that contains this epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap'\n\n  HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable\n  has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE.\n\n  After it is read from disk once, the ET is stored in memory and is not re-read from disk\n  unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE.\n\nHelp for ndi.file.navigator/epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID</p> <pre><code>ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object\n  that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the\n  epoch or the EPOCHID of the epoch.\n\nHelp for ndi.file.navigator/epochtableentry is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtagfilename - return the file path for the tag file for an epoch</p> <pre><code>ETFNAME = EPOCHTAGFILENAME(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER)\n\n  In this base class, empty is returned because it is an abstract class.\n\nHelp for ndi.file.navigator/epochtagfilename is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>eq - determines whether two ndi.file.navigator objects are equivalent</p> <pre><code>B = EQ(NDI_FILENAVIGATOR_OBJ_A, NDI_FILENAVIGATOR_OBJ_B)\n\n  Returns 1 if the ndi.file.navigator objects are equivalent, and 0 otherwise.\n  This equivalency does not depend on NDI_FILENAVIGATOR_OBJ_A and NDI_FILENAVIGATOR_OBJ_B are\n  the same HANDLE objects. They can be equivalent and occupy different places in memory.\n</code></pre> <p>filematch_hashstring - a computation to produce a (likely to be) unique string based on filematch</p> <pre><code>FMSTR = FILEMATCH_HASHSTRING(NDI_FILENAVIGATOR_OBJ)\n\n  Returns a string that is based on a hash function that is computed on\n  the concatenated text of the 'filematch' field of the 'fileparameters' property.\n\n  Note: the function used is 'MD5' (see DataHash)\n</code></pre> <p>find_ingested_documents - find ndi.documents that reflect ingested epochs</p> <pre><code>D_INGESTED = FIND_INGESTED_DOCUMENTS(NDI_FILENAVIGATOR_OBJ)\n\n  Returns ndi.document objects that correspond to ingested epochs of\n  this NDI_FILENAVIGATOR_OBJ.\n</code></pre> <p>getcache - return the NDI_CACHE and key for ndi.file.navigator</p> <pre><code>[CACHE,KEY] = GETCACHE(NDI_FILENAVIGATOR_OBJ)\n\n  Returns the CACHE and KEY for the ndi.file.navigator object.\n\n  The CACHE is returned from the associated session.\n  The KEY is the string 'filenavigator_' followed by the object's id.\n\n  See also: ndi.file.navigator\n</code></pre> <p>getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs</p> <pre><code>EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ)\n\n  Produce an array of ndi.epoch objects from the epoch table of this\n  ndi.epoch.epochset object (NDI_EPOCHSET_OBJ).\n\nHelp for ndi.file.navigator/getepocharray is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>getepochfiles - Return the file paths for one recording epoch</p> <pre><code>[FULLPATHFILENAMES, EPOCHID] = GETEPOCHFILES(NDI_FILENAVIGATOR_OBJ, EPOCH_NUMBER_OR_ID)\n\n   Return the file names or file paths associated with one recording epoch of\n   of an NDI_FILENAVIGATOR_OBJ.\n\n   EPOCH_NUMBER_OR_ID  can either be a number of an epoch to return, or an epoch identifier (epoch id).\n\n   Requesting multiple epochs simultaneously:\n   EPOCH_NUMBER_OR_ID can also be an array of numbers, in which case a cell array of cell arrays is\n   returned in FULLPATHFILENAMES, one entry per number in EPOCH_NUMBER_OR_ID.  Further, EPOCH_NUMBER_OR_ID\n   can be a cell array of strings of multiple epoch identifiers; in this case, a cell array of cell\n   arrays is returned in FULLPATHFILENAMES.\n\n   Uses the FILEPARAMETERS (see ndi.file.navigator/SETFILEPARAMETERS) to identify recording\n   epochs under the SESSION path.\n\n   See also: EPOCHID\n</code></pre> <p>getepochfiles_number - Return the file paths for one recording epoch</p> <pre><code>[FULLPATHFILENAMES] = GETEPOCHFILES_NUMBER(NDI_FILENAVIGATOR_OBJ, EPOCH_NUMBER)\n\n   Return the file names or file paths associated with one recording epoch.\n\n   EPOCH_NUMBER must be a number or array of epoch numbers. EPOCH_NUMBER cannot be\n   an EPOCH_ID. If EPOCH_NUMBER is an array, then a cell array of cell arrays is returned in\n   FULLPATHFILENAMES.\n\n   Uses the FILEPARAMETERS (see ndi.file.navigator/SETFILEPARAMETERS) to identify recording\n   epochs under the SESSION path.\n\n   See also: GETEPOCHFILES\n\n  developer note: possibility of caching this with some timeout\n  developer note: this function exists so you can get the epoch files without calling epochtable, which also\n    needs to get the epoch files; infinite recursion happens\n</code></pre> <p>getepochingesteddoc - get an ingested epoch document if it exists</p> <pre><code>D = GETEPOCHINGESTEDDOC(NDI_FILENAVIGATOR_OBJ, EPOCHFILES)\n\n  Returns the document if it exists, empty if it doesn't.\n</code></pre> <p>getepochprobemap - Return the epoch record for a given ndi.file.navigator epoch number</p> <pre><code>EPOCHPROBEMAP = GETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, N, EPOCHFILES)\n\n  Inputs:\n      NDI_EPOCHSET_PARAM_OBJ - the ndi.epoch.epochset.param object\n      N - the epoch number or identifier\n      EPOCHFILES - the files for this epoch\n\n  Output:\n      EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME\n</code></pre> <p>getepochtag - Get tag(s) from an epoch</p> <pre><code>TAG = GETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. If there are no files in\n  EPOCHNUMBER then an error is returned.\n\nHelp for ndi.file.navigator/getepochtag is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache</p> <pre><code>GINFO_SMALL = GINFO2CACHE(GINFO)\n\nHelp for ndi.file.navigator.ginfo2cache is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.file.navigator/id is inherited from superclass did.ido\n</code></pre> <p>ingest - create new documents that produce the ingestion of an ingestion_help_obj</p> <pre><code>[DOCS_OUT] = INGEST(NDI_FILENAVIGATOR_OBJ)\n\n  Creates documents to specify the epochs of an ndi.file.navigator object.\n</code></pre> <p>ingestedfiles_epochid - what is the epoch id for ingested epochfiles?</p> <pre><code>EPOCHID = INGESTEDFILES_EPOCHID(EPOCHFILES)\n\n  Returns the EPOCHID for the ingested EPOCHFILES\n</code></pre> <p>ingestion_class - the name of the ingestion class for this object</p> <pre><code>CNAME = INGESTION_CLASS(INGESTION_HELP_OBJ)\n\n  Returns the class name of the object that should be created if this\n  object class is ingested into the database (and won't have access to any raw\n  data).\n\n  For the base class, this simply returns empty.\n\nHelp for ndi.file.navigator/ingestion_class is inherited from superclass ndi.database.ingestion_help\n</code></pre> <p>isingested - is a set of epochfiles ingested?</p> <pre><code>B = ISINGESTED(EPOCHFILES)\n\n  Returns 1 if the cell array of filenames reflects ingested filenames.\n  Returns 0 otherwise.\n\n  Checks to see if the first file begins with 'epochid://'.\n</code></pre> <p>issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph?</p> <pre><code>B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ)\n\n  This function tells an ndi.time.syncgraph object whether it should continue\n  adding the 'underlying' epochs to the graph, or whether it should stop at this level.\n\n  For ndi.epoch.epochset objects, this returns 1. For some object types (ndi.probe.*, for example)\n  this will return 0 so that the underlying ndi.daq.system epochs are added.\n\nHelp for ndi.file.navigator/issyncgraphroot is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.file.navigator.isvalid is inherited from superclass did.ido\n</code></pre> <p>matchedepochtable - compare a hash number from an epochtable to the current version</p> <pre><code>B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE)\n\n  Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE.\n  Otherwise, it returns 0.\n\nHelp for ndi.file.navigator/matchedepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>navigator - Create a new ndi.file.navigator object that is associated with an session and daqsystem</p> <pre><code>OBJ = ndi.file.navigator(SESSION, [ FILEPARAMETERS, EPOCHPROBEMAP_CLASS, EPOCHPROBEMAP_FILEPARAMETERS])\n                  or\n    OBJ = ndi.file.navigator(SESSION, NDI_FILENAVIGATOR_DOC_OBJ)\n\n  Creates a new ndi.file.navigator object that negotiates the data tree of daqsystem's data that is\n  stored at the file path PATH.\n\n  Inputs:\n       SESSION: an ndi.session\n  Optional inputs:\n       FILEPARAMETERS: the files that are recorded in each epoch of DEVICE in this\n           data tree style (see ndi.file.navigator/SETFILEPARAMETERS for description)\n       EPOCHPROBEMAP_CLASS: the class of epoch_record to be used; 'ndi.epoch.epochprobemap_daqsystem' is used by default\n       EPOCHPROBEMAP_FILEPARAMETERS: the file parameters to search for the epoch record file among the files\n           present in each epoch (see ndi.file.navigator/SETEPOCHPROBEMAPFILEPARAMETERS). By default, the file location\n           specified in ndi.file.navigator/EPOCHPROBEMAPFILENAME is used\n\n  Output: OBJ - an ndi.file.navigator object\n\n  See also: ndi.session\n\n    Documentation for ndi.file.navigator/navigator\n       doc ndi.file.navigator\n</code></pre> <p>newdocument - create an ndi.document that is based on an ndi.file.navigator object</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_FILENAVIGATOR_OBJ)\n\n  Creates an ndi.document of type 'filenavigator'\n</code></pre> <p>numepochs - Number of epochs of ndi.epoch.epochset</p> <pre><code>N = NUMEPOCHS(NDI_EPOCHSET_OBJ)\n\n  Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ.\n\n  See also: EPOCHTABLE\n\nHelp for ndi.file.navigator/numepochs is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>path - Return the file path for the ndi.file.navigator object</p> <pre><code>THEPATH = PATH(NDI_FILENAVIGATOR_OBJ)\n\n  Returns the path of the ndi.session associated with the ndi.file.navigator object\n  NDI_FILENAVIGATOR_OBJ.\n</code></pre> <p>removeepochtag - Remove tag(s) for an epoch</p> <pre><code>REMOVEEPOCHTAG(NDI_EPOCH_PARAM_OBJ, EPOCHNUMBER, NAME)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. Any tags with name 'NAME' will\n  be removed from the tags in the epoch EPOCHNUMBER.\n  tags in the epoch directory. If tags with the same names as those in TAG\n  already exist, they will be overwritten. If there is no epoch\n  EPOCHNUMBER, then an error is returned.\n\n  NAME can be a single string, or it can be a cell array of strings\n  (which will result in the removal of multiple tags).\n\nHelp for ndi.file.navigator/removeepochtag is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk</p> <pre><code>NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  This function clears the internal cached memory of the epochtable, forcing it to be re-read from\n  disk at the next request.\n\n  See also: ndi.file.navigator/EPOCHTABLE\n\nHelp for ndi.file.navigator/resetepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>searchquery - create a search query that will search for this object</p> <pre><code>SQ = SEARCHQUERY(NDI_FILENAVIGATOR_OBJ)\n\n  Returns a database search query for this ndi.file.navigator object.\n</code></pre> <p>selectfilegroups - Return groups of files that will comprise epochs</p> <pre><code>EPOCHFILES = SELECTFILEGROUPS(NDI_FILENAVIGATOR_OBJ)\n\n  Return the files that comprise epochs.\n\n  EPOCHFILES{n} will be a cell list of the files in epoch n.\n\n  For ndi.file.navigator, this simply uses the file matching parameters.\n\n  See also: ndi.file.navigator/SETFILEPARAMETERS\n\n  Step 1: find epochs on disk\n</code></pre> <p>selectfilegroups_disk - select groups of files that will comprise epochs on disk</p> <pre><code>EPOCHFILES = SELECTFILEGROUPS_DISK(NDI_FILENAVIGATOR_OBJ)\n\n  Return the files on disk that comprise epochs.\n</code></pre> <p>setepochprobemap - Sets the epoch record of a particular epoch</p> <pre><code>SETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, EPOCHPROBEMAP, NUMBER, [OVERWRITE])\n\n  Sets or replaces the ndi.epoch.epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch\n  numbered NUMBER.  If OVERWRITE is present and is 1, then any existing epoch record is overwritten.\n  Otherwise, an error is given if there is an existing epoch record.\n\n  See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem\n\nHelp for ndi.file.navigator/setepochprobemap is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>setepochprobemapfileparameters - Set the epoch record fileparameters field of a ndi.file.navigator object</p> <pre><code>NDI_FILENAVIGATOR_OBJ = SETEPOCHPROBEMAPFILEPARAMETERS(NDI_FILENAVIGATOR_OBJ, THEEPOCHPROBEMAPFILEPARAMETERS)\n\n   THEEPOCHPROBEMAPFILEPARAMETERS is a string or cell list of strings that specifies the epoch record\n   file. By default, if no parameters are specified, the epoch record file is located at:\n    [EXP]/.ndi/device_name/epoch_NNNNNNNNN.ndierf, where [EXP] is the session's path.\n\n   However, one can pass search parameters that will search among all the file names returned by\n   ndi.file.navigator/GETEPOCHS. The search parameter should be a regular expression or a set of regular\n   expressions such as:\n\n          Example: theepochprobemapfileparameters = '.*\\.ext\\&gt;'\n          Example: theepochprobemapfileparameters = {'myfile1.ext1', 'myfile2.ext2'}\n          Example: theepochprobemapfileparameters = {'#.ext1',  'myfile#.ext2'} (# is the same, unknown string)\n</code></pre> <p>setepochtag - Set tag(s) for an epoch</p> <pre><code>SETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. These tags will replace any\n  tags in the epoch directory. If there is no epoch EPOCHNUMBER, then\n  an error is returned.\n\nHelp for ndi.file.navigator/setepochtag is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>setfileparameters - Set the fileparameters field of a ndi.file.navigator object</p> <pre><code>NDI_FILENAVIGATOR_OBJ = SETFILEPARAMETERS(NDI_FILENAVIGATOR_OBJ, THEFILEPARAMETERS)\n\n   THEFILEPARAMETERS is a string or cell list of strings that specifies the files\n   that comprise an epoch.\n\n          Example: filematch = '.*\\.ext\\&gt;'\n          Example: filematch = {'myfile1.ext1', 'myfile2.ext2'}\n          Example: filematch = {'#.ext1',  'myfile#.ext2'} (# is the same, unknown string)\n\n\n   Alternatively, THEFILEPARAMETERS can be delivered as a structure with the following fields:\n   Fieldname:              | Description\n   ----------------------------------------------------------------------\n   filematch               | A string or cell list of strings that need to be matched\n                           | Regular expressions are allowed\n                           |   Example: filematch = '.*\\.ext\\&gt;'\n                           |   Example: filematch = {'myfile1.ext1', 'myfile2.ext2'}\n                           |   Example: filematch = {'#.ext1',  'myfile#.ext2'} (# is the same, unknown string)\n</code></pre> <p>setsession - set the SESSION for an ndi.file.navigator object</p> <pre><code>NDI_FILENAVIGATOR_OBJ = SETSESSION(NDI_FILENAVIGATOR_OBJ, SESSION)\n\n  Set the SESSION property of an ndi.file.navigator object\n</code></pre> <p>t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch</p> <pre><code>T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\nHelp for ndi.file.navigator/t0_t1 is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>underlyingepochnodes - find all the underlying epochnodes of a given epochnode</p> <pre><code>[UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE)\n\n  Traverse the underlying nodes of a given EPOCHNODE until we get to the roots\n  (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1).\n\n  Note that the EPOCHNODE itself is returned as the first 'underlying' node.\n\n  See also: ISSYNCGRAPHROOT\n\nHelp for ndi.file.navigator/underlyingepochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.file.navigator.unique_id is inherited from superclass did.ido\n</code></pre> <p>verifyepochprobemap - Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object</p> <pre><code>[B,MSG] = VERIFYEPOCHPROBEMAP(ndi.epoch.epochset.param, EPOCHPROBEMAP, EPOCH_NUMBER_OR_ID)\n\n  Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given\n  epoch number or epoch id EPOCH_NUMBER_OR_ID.\n\n  For the abstract class EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an\n  ndi.epoch.epochprobemap_daqsystem object.\n\n  If B is 0, then the error message is returned in MSG.\n\n  See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem\n\nHelp for ndi.file.navigator/verifyepochprobemap is inherited from superclass ndi.epoch.epochset.param\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/pfilemirror.m/","title":"ndi.file.pfilemirror","text":"<pre><code> PFILEMIRROR Mirror a directory with m files into a directory with p files\n   B = PFILEMIRROR(M_PATH, P_PATH)\n\n  Recursively copy a directory with .m files into a directory of .p files.\n  M_PATH is a full path of a directory with .m files and subdirectories,\n  and P_PATH is the location where the mirrored .p files should be placed.\n\n  This function can be called with name-value pairs:\n  'CopyNonMFiles'      (logical)  Should non .m-files be copied? Default false.\n  'CopyHiddenFiles'    (logical)  Should hidden files (e.g. .git) be copied?\n                                  Default false.\n  'verbose'            (logical)  Print files as they are copied? Default true.\n  'dryRun'             (logical)  If true, display actions without executing them.\n                                  Default false.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/temp_fid.m/","title":"ndi.file.temp_fid","text":"<pre><code>  TEMP_FID - open a new temporary file for writing\n\n  [FID,FNAME] = TEMP_FID()\n\n  Open a new temporary file for writing. The full name of\n  the file is returned in FNAME and the file identiifer is\n  returned in FID.\n\n  The file is opened for writing and little-endian byte order,\n  the NDI default.\n\n  An error is produced if the operation fails.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/temp_name.m/","title":"ndi.file.temp_name","text":"<pre><code>  TEMP_NAME - return a unique temporary file name\n\n  FNAME = ndi.file.temp_name()\n\n  Return the full path of a unique temporary file name that\n  can be used by NDI programs.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Bnavigator/epochdir.m/","title":"CLASS ndi.file.navigator.epochdir","text":"<pre><code>  NDI_FILENAVIGATOR_EPOCHDIR - Create a new NDI_FILENAVIGATOR_EPOCHDIR object\n\n   DT = FILENAVIGATOR_EPOCHDIR(EXP, FILETYPE)\n\n   Creates a new file tree object with the session name\n   This class in inherited from filenavigator and with epochdir organization\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Bnavigator/epochdir.m/#superclasses","title":"Superclasses","text":"<p>ndi.file.navigator, ndi.ido, did.ido, ndi.epoch.epochset.param, ndi.epoch.epochset, ndi.documentservice, ndi.database.ingestion_help</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Bnavigator/epochdir.m/#properties","title":"Properties","text":"Property Description session fileparameters epochprobemap_fileparameters identifier epochprobemap_class"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Bnavigator/epochdir.m/#methods","title":"Methods","text":"Method Description addepochtag Add tag(s) for an epoch buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable Return an epoch table for ndi.file.navigator cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object defaultepochprobemapfilename return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochdir Create a new ndi.file.navigator.epochdir object that is associated with an session and device epochgraph graph of the mapping and cost of converting time among epochs epochid EPOCHID = Get the epoch identifier for a particular epoch epochidfilename return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapfilename return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch epochsetname the name of the ndi.epoch.epochset object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID epochtagfilename return the file path for the tag file for an epoch eq determines whether two ndi.file.navigator objects are equivalent filematch_hashstring a computation to produce a (likely to be) unique string based on filematch find_ingested_documents find ndi.documents that reflect ingested epochs getcache return the NDI_CACHE and key for ndi.file.navigator getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs getepochfiles Return the file paths for one recording epoch getepochfiles_number Return the file paths for one recording epoch getepochingesteddoc get an ingested epoch document if it exists getepochprobemap Return the epoch record for a given ndi.file.navigator epoch number getepochtag Get tag(s) from an epoch ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the identifier of an DID.IDO object ingest create new documents that produce the ingestion of an ingestion_help_obj ingestedfiles_epochid what is the epoch id for ingested epochfiles? ingestion_class the name of the ingestion class for this object isingested is a set of epochfiles ingested? issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? matchedepochtable compare a hash number from an epochtable to the current version newdocument create an ndi.document that is based on an ndi.file.navigator object numepochs Number of epochs of ndi.epoch.epochset path Return the file path for the ndi.file.navigator object removeepochtag Remove tag(s) for an epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk searchquery create a search query that will search for this object selectfilegroups Return groups of files that will comprise epochs selectfilegroups_disk Return groups of files that will comprise epochs setepochprobemap Sets the epoch record of a particular epoch setepochprobemapfileparameters Set the epoch record fileparameters field of a ndi.file.navigator object setepochtag Set tag(s) for an epoch setfileparameters Set the fileparameters field of a ndi.file.navigator object setsession set the SESSION for an ndi.file.navigator object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Bnavigator/epochdir.m/#methods-help","title":"Methods help","text":"<p>addepochtag - Add tag(s) for an epoch</p> <pre><code>ADDEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. These tags will be added to any\n  tags in the epoch EPOCHNUMBER. If tags with the same names as those in TAG\n  already exist, they will be overwritten. If there is no epoch\n  EPOCHNUMBER, then an error is returned.\n\nHelp for ndi.file.navigator.epochdir/addepochtag is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of EPOCHNODES.\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\n  In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with\n  a cost of 1 and a linear mapping rule with shift 1 and offset 0:\n    'utc' -&gt; 'utc'\n    'utc' -&gt; 'approx_utc'\n    'exp_global_time' -&gt; 'exp_global_time'\n    'exp_global_time' -&gt; 'approx_exp_global_time'\n    'dev_global_time' -&gt; 'dev_global_time'\n    'dev_global_time' -&gt; 'approx_dev_global_time'\n\n\n  See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping,\n  ndi.file.navigator.epochdir/EPOCHNODES\n\nHelp for ndi.file.navigator.epochdir/buildepochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>buildepochtable - Return an epoch table for ndi.file.navigator</p> <pre><code>ET = BUILDEPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch (may change)\n  'epoch_id'                | The epoch ID code (will never change once established)\n                            |   This uniquely specifies the epoch within the session.\n  'epoch_session_id'        | The ID of the session that contains this epoch.\n  'epochprobemap'           | The epochprobemap object from each epoch\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap'\n                            |   'underlying' contains the file list for each epoch; 'epoch_id' and 'epoch_number'\n                            |   match those of NDI_FILENAVIGATOR_OBJ\n\nHelp for ndi.file.navigator.epochdir/buildepochtable is inherited from superclass ndi.file.navigator\n</code></pre> <p>cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache</p> <pre><code>GINFO_BIG = GINFO2CACHE(GINFO_SMALL)\n\nHelp for ndi.file.navigator.epochdir.cache2ginfo is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epoch graph, if it exists and is up-to-date\n  (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ\n  has not changed). If there is no cached version, or if it is not up-to-date,\n  COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date,\n  it is deleted.\n\n  See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH\n\nHelp for ndi.file.navigator.epochdir/cached_epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object</p> <pre><code>[ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epochtable, if it exists, along with its HASHVALUE\n  (a hash number generated from the table). If there is no cached version,\n  ET and HASHVALUE will be empty.\n\nHelp for ndi.file.navigator.epochdir/cached_epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>defaultepochprobemapfilename - return the default file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch</p> <pre><code>ECFNAME = DEFAULTEPOCHPROBEMAPFILENAME(NDI_FILENAVIGATOR_OBJ, NUMBER)\n\n  Returns the default EPOCHPROBEMAPFILENAME for the ndi.daq.system NDI_DEVICE_OBJ for epoch NUMBER.\n  If there are no files in epoch NUMBER, an error is generated. NUMBER cannot be an epoch id.\n\n  In the base class, ndi.epoch.epochprobemap_daqsystem data is stored as a hidden file in the same directory\n  as the first epoch file. If the first file in the epoch file list is 'PATH/MYFILENAME.ext', then\n  the default ndi.epoch.epochprobemap_daqsystem data is stored as 'PATH/.MYFILENAME.ext.epochprobemap.ndi.'.\n  This may be overridden if there is an EPOCHPROBEMAP_FILEPARAMETERS set.\n\n  See also: ndi.file.navigator.epochdir/SETEPOCHPROBEMAPFILEPARAMETERS\n\nHelp for ndi.file.navigator.epochdir/defaultepochprobemapfilename is inherited from superclass ndi.file.navigator\n</code></pre> <p>epoch2str - convert an epoch number or id to a string</p> <pre><code>S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER)\n\n  Returns the epoch NUMBER in the form of a string. If it is a simple\n  integer, then INT2STR is used to produce a string. If it is an epoch\n  identifier string, then it is returned.\n\nHelp for ndi.file.navigator.epochdir/epoch2str is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  The abstract class always returns ndi.time.clocktype('no_time')\n\n  See also: ndi.time.clocktype, T0_T1\n\nHelp for ndi.file.navigator.epochdir/epochclock is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochdir - Create a new ndi.file.navigator.epochdir object that is associated with an session and device</p> <pre><code>OBJ = ndi.file.navigator.epochdir(EXP, [FILEPARAMETERS, EPOCHPROBEMAP_CLASS, EPOCHPROBEMAP_FILEPARAMETERS])\n\n  Creates a new ndi.file.navigator.epochdir object that negotiates the data tree of device's data that is\n  stored in an session EXP.\n\n  (document FILEPARAMETERS)\n\n  Inputs: EXP - an ndi.session ; FILEPARAMETERS - the files that are recorded in each epoch\n       FILEPARAMETERS: the files that are recorded in each epoch of DEVICE in this\n           data tree style (see ndi.file.navigator/SETFILEPARAMETERS for description)\n       EPOCHPROBEMAP_CLASS: the class of epoch_record to be used; 'ndi.epoch.epochprobemap_daqsystem' is used by default\n       EPOCHPROBEMAP_FILEPARAMETERS: the file parameters to search for the epoch record file among the files\n           present in each epoch (see ndi.file.navigator/SETEPOCHPROBEMAPFILEPARAMETERS). By default, the file location\n           specified in ndi.file.navigator/EPOCHPROBEMAPFILENAME is used\n\n  Output: OBJ - an ndi.file.navigator.epochdir object\n\n  See also: ndi.session, ndi.daq.system\n\n    Documentation for ndi.file.navigator.epochdir/epochdir\n       doc ndi.file.navigator.epochdir\n</code></pre> <p>epochgraph - graph of the mapping and cost of converting time among epochs</p> <pre><code>[COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes).\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\nHelp for ndi.file.navigator.epochdir/epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochid - EPOCHID = Get the epoch identifier for a particular epoch</p> <pre><code>ID = EPOCHID(NDI_FILENAVIGATOR_EPOCHDIR_OBJ, EPOCH_NUMBER, [EPOCHFILES])\n\n  Returns the epoch identifier string for the epoch EPOCH_NUMBER.\n  For the ndi.file.navigator.epochdir object, each EPOCH is organized in its own subdirectory,\n  and the epoch identifier is the _name_ of the subdirectory.\n\n  For example, if my device has a file tree that reads files with extension .dat,\n  the session directory is\n\n  mysession/\n        t00001/\n           mydata.dat\n\n  Then ID is 't00001'\n</code></pre> <p>epochidfilename - return the file path for the ndi.epoch.epochprobemap_daqsystem file for an epoch</p> <pre><code>ECFNAME = EPOCHIDFILENAME(NDI_FILENAVIGATOR_OBJ, NUMBER)\n\n  Returns the EPOCHIDFILENAME for the ndi.daq.system NDI_DEVICE_OBJ for epoch NUMBER.\n  If there are no files in epoch NUMBER, an error is generated.\n\n  In the base class, ndi.epoch.epochprobemap_daqsystem data is stored as a hidden file in the same directory\n  as the first epoch file. If the first file in the epoch file list is 'PATH/MYFILENAME.ext', then\n  the ndi.epoch.epochprobemap_daqsystem data is stored as 'PATH/.MYFILENAME.ext.epochid.ndi.'.\n\nHelp for ndi.file.navigator.epochdir/epochidfilename is inherited from superclass ndi.file.navigator\n</code></pre> <p>epochnodes - return all epoch nodes from an ndi.epoch.epochset object</p> <pre><code>[NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ)\n\n  Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the\n  following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch within the session.\n  'epoch_session_id'           | The ID of the session that contains the epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A SINGLE ndi.time.clocktype entry that describes the clock type of this node.\n  't0_t1'                   | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock'\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_id', and 'epochprobemap'\n  'objectname'              | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no\n                            |   'name' field, then 'unknown' is used.\n  'objectclass'             | The object class name of the NDI_EPOCHSET_OBJ.\n\n  EPOCHNODES are related to EPOCHTABLE entries, except\n     a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains\n        multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids\n        in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another.\n     b) EPOCHNODES contain identifying information (objectname and objectclass) to help\n        in identifying the epoch nodes across ndi.epoch.epochset objects.\n\n  UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs.\n\nHelp for ndi.file.navigator.epochdir/epochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochprobemapfilename - return the file name for the ndi.epoch.epochprobemap_daqsystem file for an epoch</p> <pre><code>ECFNAME = EPOCHPROBEMAPFILENAME(NDI_FILENAVIGATOR_OBJ, NUMBER)\n\n  Returns the EPOCHPROBEMAPFILENAME for the ndi.file.navigator NDI_FILENAVIGATOR_OBJ for epoch NUMBER.\n  If there are no files in epoch NUMBER, an error is generated. The file name is returned with\n  a full path. NUMBER cannot be an epoch_id.\n\n  The file name is determined by examining if the user has specified any\n  EPOCHPROBEMAP_FILEPARAMETERS; if not, then the DEFAULTEPOCHPROBEMAPFILENAME is used.\n\n  See also: ndi.file.navigator.epochdir/SETEPOCHPROBEMAPFILEPARAMETERS, ndi.file.navigator.epochdir/DEFAULTEPOCHPROBEMAPFILENAME\n\n  default\n\nHelp for ndi.file.navigator.epochdir/epochprobemapfilename is inherited from superclass ndi.file.navigator\n</code></pre> <p>epochsetname - the name of the ndi.epoch.epochset object, for EPOCHNODES</p> <pre><code>NAME = EPOCHSETNAME(NDI_EPOCHSET_OBJ)\n\n  Returns the object name that is used when creating epoch nodes.\n\n  If the class has a 'name' property, that property is used.\n  Otherwise, 'unknown' is used.\n\nHelp for ndi.file.navigator.epochdir/epochsetname is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtable - Return an epoch table that relates the current object's epochs to underlying epochs</p> <pre><code>[ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch. The number may change as epochs are added and subtracted.\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch.\n  'epoch_session_id'           | The session ID that contains this epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap'\n\n  HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable\n  has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE.\n\n  After it is read from disk once, the ET is stored in memory and is not re-read from disk\n  unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE.\n\nHelp for ndi.file.navigator.epochdir/epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID</p> <pre><code>ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object\n  that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the\n  epoch or the EPOCHID of the epoch.\n\nHelp for ndi.file.navigator.epochdir/epochtableentry is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtagfilename - return the file path for the tag file for an epoch</p> <pre><code>ETFNAME = EPOCHTAGFILENAME(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER)\n\n  In this base class, empty is returned because it is an abstract class.\n\nHelp for ndi.file.navigator.epochdir/epochtagfilename is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>eq - determines whether two ndi.file.navigator objects are equivalent</p> <pre><code>B = EQ(NDI_FILENAVIGATOR_OBJ_A, NDI_FILENAVIGATOR_OBJ_B)\n\n  Returns 1 if the ndi.file.navigator objects are equivalent, and 0 otherwise.\n  This equivalency does not depend on NDI_FILENAVIGATOR_OBJ_A and NDI_FILENAVIGATOR_OBJ_B are\n  the same HANDLE objects. They can be equivalent and occupy different places in memory.\n\nHelp for ndi.file.navigator.epochdir/eq is inherited from superclass ndi.file.navigator\n</code></pre> <p>filematch_hashstring - a computation to produce a (likely to be) unique string based on filematch</p> <pre><code>FMSTR = FILEMATCH_HASHSTRING(NDI_FILENAVIGATOR_OBJ)\n\n  Returns a string that is based on a hash function that is computed on\n  the concatenated text of the 'filematch' field of the 'fileparameters' property.\n\n  Note: the function used is 'MD5' (see DataHash)\n\nHelp for ndi.file.navigator.epochdir/filematch_hashstring is inherited from superclass ndi.file.navigator\n</code></pre> <p>find_ingested_documents - find ndi.documents that reflect ingested epochs</p> <pre><code>D_INGESTED = FIND_INGESTED_DOCUMENTS(NDI_FILENAVIGATOR_OBJ)\n\n  Returns ndi.document objects that correspond to ingested epochs of\n  this NDI_FILENAVIGATOR_OBJ.\n\nHelp for ndi.file.navigator.epochdir/find_ingested_documents is inherited from superclass ndi.file.navigator\n</code></pre> <p>getcache - return the NDI_CACHE and key for ndi.file.navigator</p> <pre><code>[CACHE,KEY] = GETCACHE(NDI_FILENAVIGATOR_OBJ)\n\n  Returns the CACHE and KEY for the ndi.file.navigator object.\n\n  The CACHE is returned from the associated session.\n  The KEY is the string 'filenavigator_' followed by the object's id.\n\n  See also: ndi.file.navigator.epochdir\n\nHelp for ndi.file.navigator.epochdir/getcache is inherited from superclass ndi.file.navigator\n</code></pre> <p>getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs</p> <pre><code>EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ)\n\n  Produce an array of ndi.epoch objects from the epoch table of this\n  ndi.epoch.epochset object (NDI_EPOCHSET_OBJ).\n\nHelp for ndi.file.navigator.epochdir/getepocharray is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>getepochfiles - Return the file paths for one recording epoch</p> <pre><code>[FULLPATHFILENAMES, EPOCHID] = GETEPOCHFILES(NDI_FILENAVIGATOR_OBJ, EPOCH_NUMBER_OR_ID)\n\n   Return the file names or file paths associated with one recording epoch of\n   of an NDI_FILENAVIGATOR_OBJ.\n\n   EPOCH_NUMBER_OR_ID  can either be a number of an epoch to return, or an epoch identifier (epoch id).\n\n   Requesting multiple epochs simultaneously:\n   EPOCH_NUMBER_OR_ID can also be an array of numbers, in which case a cell array of cell arrays is\n   returned in FULLPATHFILENAMES, one entry per number in EPOCH_NUMBER_OR_ID.  Further, EPOCH_NUMBER_OR_ID\n   can be a cell array of strings of multiple epoch identifiers; in this case, a cell array of cell\n   arrays is returned in FULLPATHFILENAMES.\n\n   Uses the FILEPARAMETERS (see ndi.file.navigator/SETFILEPARAMETERS) to identify recording\n   epochs under the SESSION path.\n\n   See also: EPOCHID\n\nHelp for ndi.file.navigator.epochdir/getepochfiles is inherited from superclass ndi.file.navigator\n</code></pre> <p>getepochfiles_number - Return the file paths for one recording epoch</p> <pre><code>[FULLPATHFILENAMES] = GETEPOCHFILES_NUMBER(NDI_FILENAVIGATOR_OBJ, EPOCH_NUMBER)\n\n   Return the file names or file paths associated with one recording epoch.\n\n   EPOCH_NUMBER must be a number or array of epoch numbers. EPOCH_NUMBER cannot be\n   an EPOCH_ID. If EPOCH_NUMBER is an array, then a cell array of cell arrays is returned in\n   FULLPATHFILENAMES.\n\n   Uses the FILEPARAMETERS (see ndi.file.navigator/SETFILEPARAMETERS) to identify recording\n   epochs under the SESSION path.\n\n   See also: GETEPOCHFILES\n\n  developer note: possibility of caching this with some timeout\n  developer note: this function exists so you can get the epoch files without calling epochtable, which also\n    needs to get the epoch files; infinite recursion happens\n\nHelp for ndi.file.navigator.epochdir/getepochfiles_number is inherited from superclass ndi.file.navigator\n</code></pre> <p>getepochingesteddoc - get an ingested epoch document if it exists</p> <pre><code>D = GETEPOCHINGESTEDDOC(NDI_FILENAVIGATOR_OBJ, EPOCHFILES)\n\n  Returns the document if it exists, empty if it doesn't.\n\nHelp for ndi.file.navigator.epochdir/getepochingesteddoc is inherited from superclass ndi.file.navigator\n</code></pre> <p>getepochprobemap - Return the epoch record for a given ndi.file.navigator epoch number</p> <pre><code>EPOCHPROBEMAP = GETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, N, EPOCHFILES)\n\n  Inputs:\n      NDI_EPOCHSET_PARAM_OBJ - the ndi.epoch.epochset.param object\n      N - the epoch number or identifier\n      EPOCHFILES - the files for this epoch\n\n  Output:\n      EPOCHPROBEMAP - The epoch record information associated with epoch N for device with name DEVICENAME\n\nHelp for ndi.file.navigator.epochdir/getepochprobemap is inherited from superclass ndi.file.navigator\n</code></pre> <p>getepochtag - Get tag(s) from an epoch</p> <pre><code>TAG = GETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. If there are no files in\n  EPOCHNUMBER then an error is returned.\n\nHelp for ndi.file.navigator.epochdir/getepochtag is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache</p> <pre><code>GINFO_SMALL = GINFO2CACHE(GINFO)\n\nHelp for ndi.file.navigator.epochdir.ginfo2cache is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.file.navigator.epochdir/id is inherited from superclass did.ido\n</code></pre> <p>ingest - create new documents that produce the ingestion of an ingestion_help_obj</p> <pre><code>[DOCS_OUT] = INGEST(NDI_FILENAVIGATOR_OBJ)\n\n  Creates documents to specify the epochs of an ndi.file.navigator object.\n\nHelp for ndi.file.navigator.epochdir/ingest is inherited from superclass ndi.file.navigator\n</code></pre> <p>ingestedfiles_epochid - what is the epoch id for ingested epochfiles?</p> <pre><code>EPOCHID = INGESTEDFILES_EPOCHID(EPOCHFILES)\n\n  Returns the EPOCHID for the ingested EPOCHFILES\n\nHelp for ndi.file.navigator.epochdir.ingestedfiles_epochid is inherited from superclass ndi.file.navigator\n</code></pre> <p>ingestion_class - the name of the ingestion class for this object</p> <pre><code>CNAME = INGESTION_CLASS(INGESTION_HELP_OBJ)\n\n  Returns the class name of the object that should be created if this\n  object class is ingested into the database (and won't have access to any raw\n  data).\n\n  For the base class, this simply returns empty.\n\nHelp for ndi.file.navigator.epochdir/ingestion_class is inherited from superclass ndi.database.ingestion_help\n</code></pre> <p>isingested - is a set of epochfiles ingested?</p> <pre><code>B = ISINGESTED(EPOCHFILES)\n\n  Returns 1 if the cell array of filenames reflects ingested filenames.\n  Returns 0 otherwise.\n\n  Checks to see if the first file begins with 'epochid://'.\n\nHelp for ndi.file.navigator.epochdir.isingested is inherited from superclass ndi.file.navigator\n</code></pre> <p>issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph?</p> <pre><code>B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ)\n\n  This function tells an ndi.time.syncgraph object whether it should continue\n  adding the 'underlying' epochs to the graph, or whether it should stop at this level.\n\n  For ndi.epoch.epochset objects, this returns 1. For some object types (ndi.probe.*, for example)\n  this will return 0 so that the underlying ndi.daq.system epochs are added.\n\nHelp for ndi.file.navigator.epochdir/issyncgraphroot is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.file.navigator.epochdir.isvalid is inherited from superclass did.ido\n</code></pre> <p>matchedepochtable - compare a hash number from an epochtable to the current version</p> <pre><code>B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE)\n\n  Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE.\n  Otherwise, it returns 0.\n\nHelp for ndi.file.navigator.epochdir/matchedepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>newdocument - create an ndi.document that is based on an ndi.file.navigator object</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_FILENAVIGATOR_OBJ)\n\n  Creates an ndi.document of type 'filenavigator'\n\nHelp for ndi.file.navigator.epochdir/newdocument is inherited from superclass ndi.file.navigator\n</code></pre> <p>numepochs - Number of epochs of ndi.epoch.epochset</p> <pre><code>N = NUMEPOCHS(NDI_EPOCHSET_OBJ)\n\n  Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ.\n\n  See also: EPOCHTABLE\n\nHelp for ndi.file.navigator.epochdir/numepochs is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>path - Return the file path for the ndi.file.navigator object</p> <pre><code>THEPATH = PATH(NDI_FILENAVIGATOR_OBJ)\n\n  Returns the path of the ndi.session associated with the ndi.file.navigator object\n  NDI_FILENAVIGATOR_OBJ.\n\nHelp for ndi.file.navigator.epochdir/path is inherited from superclass ndi.file.navigator\n</code></pre> <p>removeepochtag - Remove tag(s) for an epoch</p> <pre><code>REMOVEEPOCHTAG(NDI_EPOCH_PARAM_OBJ, EPOCHNUMBER, NAME)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. Any tags with name 'NAME' will\n  be removed from the tags in the epoch EPOCHNUMBER.\n  tags in the epoch directory. If tags with the same names as those in TAG\n  already exist, they will be overwritten. If there is no epoch\n  EPOCHNUMBER, then an error is returned.\n\n  NAME can be a single string, or it can be a cell array of strings\n  (which will result in the removal of multiple tags).\n\nHelp for ndi.file.navigator.epochdir/removeepochtag is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk</p> <pre><code>NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  This function clears the internal cached memory of the epochtable, forcing it to be re-read from\n  disk at the next request.\n\n  See also: ndi.file.navigator.epochdir/EPOCHTABLE\n\nHelp for ndi.file.navigator.epochdir/resetepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>searchquery - create a search query that will search for this object</p> <pre><code>SQ = SEARCHQUERY(NDI_FILENAVIGATOR_OBJ)\n\n  Returns a database search query for this ndi.file.navigator object.\n\nHelp for ndi.file.navigator.epochdir/searchquery is inherited from superclass ndi.file.navigator\n</code></pre> <p>selectfilegroups - Return groups of files that will comprise epochs</p> <pre><code>EPOCHFILES = SELECTFILEGROUPS(NDI_FILENAVIGATOR_OBJ)\n\n  Return the files that comprise epochs.\n\n  EPOCHFILES{n} will be a cell list of the files in epoch n.\n\n  For ndi.file.navigator, this simply uses the file matching parameters.\n\n  See also: ndi.file.navigator.epochdir/SETFILEPARAMETERS\n\n  Step 1: find epochs on disk\n\nHelp for ndi.file.navigator.epochdir/selectfilegroups is inherited from superclass ndi.file.navigator\n</code></pre> <p>selectfilegroups_disk - Return groups of files that will comprise epochs</p> <pre><code>EPOCHFILES = SELECTFILEGROUPS_DISK(NDI_FILENAVIGATOR_EPOCHDIR_OBJ)\n\n  Return the files that comprise epochs.\n\n  EPOCHFILES{n} will be a cell list of the files in epoch n.\n\n  For ndi.file.navigator.epochdir, this uses the file matching parameters in all\n  subdirectories within the session (at a folder depth of 1; that is, it doesn't\n  search folders in folders).\n\n  See also: ndi.file.navigator/SETFILEPARAMETERS\n</code></pre> <p>setepochprobemap - Sets the epoch record of a particular epoch</p> <pre><code>SETEPOCHPROBEMAP(NDI_EPOCHSET_PARAM_OBJ, EPOCHPROBEMAP, NUMBER, [OVERWRITE])\n\n  Sets or replaces the ndi.epoch.epochprobemap_daqsystem for NDI_EPOCHSET_PARAM_OBJ with EPOCHPROBEMAP for the epoch\n  numbered NUMBER.  If OVERWRITE is present and is 1, then any existing epoch record is overwritten.\n  Otherwise, an error is given if there is an existing epoch record.\n\n  See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem\n\nHelp for ndi.file.navigator.epochdir/setepochprobemap is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>setepochprobemapfileparameters - Set the epoch record fileparameters field of a ndi.file.navigator object</p> <pre><code>NDI_FILENAVIGATOR_OBJ = SETEPOCHPROBEMAPFILEPARAMETERS(NDI_FILENAVIGATOR_OBJ, THEEPOCHPROBEMAPFILEPARAMETERS)\n\n   THEEPOCHPROBEMAPFILEPARAMETERS is a string or cell list of strings that specifies the epoch record\n   file. By default, if no parameters are specified, the epoch record file is located at:\n    [EXP]/.ndi/device_name/epoch_NNNNNNNNN.ndierf, where [EXP] is the session's path.\n\n   However, one can pass search parameters that will search among all the file names returned by\n   ndi.file.navigator/GETEPOCHS. The search parameter should be a regular expression or a set of regular\n   expressions such as:\n\n          Example: theepochprobemapfileparameters = '.*\\.ext\\&gt;'\n          Example: theepochprobemapfileparameters = {'myfile1.ext1', 'myfile2.ext2'}\n          Example: theepochprobemapfileparameters = {'#.ext1',  'myfile#.ext2'} (# is the same, unknown string)\n\nHelp for ndi.file.navigator.epochdir/setepochprobemapfileparameters is inherited from superclass ndi.file.navigator\n</code></pre> <p>setepochtag - Set tag(s) for an epoch</p> <pre><code>SETEPOCHTAG(NDI_EPOCHSET_PARAM_OBJ, EPOCHNUMBER, TAG)\n\n  Tags are name/value pairs returned in the form of a structure\n  array with fields 'name' and 'value'. These tags will replace any\n  tags in the epoch directory. If there is no epoch EPOCHNUMBER, then\n  an error is returned.\n\nHelp for ndi.file.navigator.epochdir/setepochtag is inherited from superclass ndi.epoch.epochset.param\n</code></pre> <p>setfileparameters - Set the fileparameters field of a ndi.file.navigator object</p> <pre><code>NDI_FILENAVIGATOR_OBJ = SETFILEPARAMETERS(NDI_FILENAVIGATOR_OBJ, THEFILEPARAMETERS)\n\n   THEFILEPARAMETERS is a string or cell list of strings that specifies the files\n   that comprise an epoch.\n\n          Example: filematch = '.*\\.ext\\&gt;'\n          Example: filematch = {'myfile1.ext1', 'myfile2.ext2'}\n          Example: filematch = {'#.ext1',  'myfile#.ext2'} (# is the same, unknown string)\n\n\n   Alternatively, THEFILEPARAMETERS can be delivered as a structure with the following fields:\n   Fieldname:              | Description\n   ----------------------------------------------------------------------\n   filematch               | A string or cell list of strings that need to be matched\n                           | Regular expressions are allowed\n                           |   Example: filematch = '.*\\.ext\\&gt;'\n                           |   Example: filematch = {'myfile1.ext1', 'myfile2.ext2'}\n                           |   Example: filematch = {'#.ext1',  'myfile#.ext2'} (# is the same, unknown string)\n\nHelp for ndi.file.navigator.epochdir/setfileparameters is inherited from superclass ndi.file.navigator\n</code></pre> <p>setsession - set the SESSION for an ndi.file.navigator object</p> <pre><code>NDI_FILENAVIGATOR_OBJ = SETSESSION(NDI_FILENAVIGATOR_OBJ, SESSION)\n\n  Set the SESSION property of an ndi.file.navigator object\n\nHelp for ndi.file.navigator.epochdir/setsession is inherited from superclass ndi.file.navigator\n</code></pre> <p>t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch</p> <pre><code>T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\nHelp for ndi.file.navigator.epochdir/t0_t1 is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>underlyingepochnodes - find all the underlying epochnodes of a given epochnode</p> <pre><code>[UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE)\n\n  Traverse the underlying nodes of a given EPOCHNODE until we get to the roots\n  (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1).\n\n  Note that the EPOCHNODE itself is returned as the first 'underlying' node.\n\n  See also: ISSYNCGRAPHROOT\n\nHelp for ndi.file.navigator.epochdir/underlyingepochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.file.navigator.epochdir.unique_id is inherited from superclass did.ido\n</code></pre> <p>verifyepochprobemap - Verifies that an EPOCHPROBEMAP is appropriate for the ndi.epoch.epochset.param object</p> <pre><code>[B,MSG] = VERIFYEPOCHPROBEMAP(ndi.epoch.epochset.param, EPOCHPROBEMAP, EPOCH_NUMBER_OR_ID)\n\n  Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given\n  epoch number or epoch id EPOCH_NUMBER_OR_ID.\n\n  For the abstract class EPOCHPROBEMAP is always valid as long as EPOCHPROBEMAP is an\n  ndi.epoch.epochprobemap_daqsystem object.\n\n  If B is 0, then the error message is returned in MSG.\n\n  See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem\n\nHelp for ndi.file.navigator.epochdir/verifyepochprobemap is inherited from superclass ndi.epoch.epochset.param\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Btype/mfdaq_epoch_channel.m/","title":"CLASS ndi.file.type.mfdaq_epoch_channel","text":"<pre><code>  MFDAQ_EPOCH_CHANNEL - create a new MFDAQ_EPOCH_CHANNEL file document\n\n  OBJ = MFDAQ_EPOCH_CHANNEL(INPUT1, ...)\n\n  Creates a new MFDAQ_EPOCH_CHANNEL object. If INPUT1 is a character string,\n  then it is assumed that this object should be built from information stored in a\n  file. If INPUT1 is a structure, then it is assumed that this object should be built\n  with a channel_structure (provided in INPUT1) as in\n  ndi.file.type.mfdaq_epoch_channel.create_properties().\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Btype/mfdaq_epoch_channel.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Btype/mfdaq_epoch_channel.m/#properties","title":"Properties","text":"Property Description channel_information"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Btype/mfdaq_epoch_channel.m/#methods","title":"Methods","text":"Method Description channelgroupdecoding decode channel list into the groups where the channels are stored create_properties make a structure that describes segmented storage of MFDAQ data mfdaq_epoch_channel create a new MFDAQ_EPOCH_CHANNEL file document readFromFile read an mfdaq_epoch_channel object from a file writeToFile write the channel_structure to a file"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfile/%2Btype/mfdaq_epoch_channel.m/#methods-help","title":"Methods help","text":"<p>channelgroupdecoding - decode channel list into the groups where the channels are stored</p> <pre><code>[GROUPS, CHANNEL_INDEXES_IN_GROUPS, CHANNEL_INDEXES_IN_OUTPUT]=...\n    CHANNELGROUPDECODING(CHANNEL_INFO, CHANNEL_TYPE, CHANNELS)\n</code></pre> <p>create_properties - make a structure that describes segmented storage of MFDAQ data</p> <pre><code>OBJ = CREATE_PROPERTIES(OBJ, CHANNEL_STRUCTURE, ...)\n\n  CHANNEL_STRUCTURE has fields 'name','type', 'sample_rate',\n    'offset', and 'scale'\n\n  This function also takes name/value pairs that modify the\n  default behavior.\n  -----------------------------------------------------------------\n  | Parameters (default)            | Description                  |\n  |---------------------------------|------------------------------|\n  | analog_in_channels_per_group    | Number of channels per group |\n  |   (400)                         |  for analog input channels   |\n  | analog_out_channels_per_group   | Number of channels per group |\n  |   (400)                         |  for analog output channels  |\n  | auxiliary_in_channels_per_group | Number of channels per group |\n  |   (400)                         |  for auxiliary input channels|\n  | auxiliary_out_channels_per_group| Number of channels per group |\n  |   (400)                         |  for auxiliary output        |\n  | analog_out_channels_per_group   | Number of channels per group |\n  |   (400)                         |  for analog output channels  |\n  | ditial_in_channels_per_group    | Number of channels per group |\n  |   (512)                         |  for digital input channels  |\n  | digital_out_channels_per_group  | Number of channels per group |\n  |   (512)                         |  for digital output channels |\n</code></pre> <p>mfdaq_epoch_channel - create a new MFDAQ_EPOCH_CHANNEL file document</p> <pre><code>OBJ = MFDAQ_EPOCH_CHANNEL(INPUT1, ...)\n\n  Creates a new MFDAQ_EPOCH_CHANNEL object. If INPUT1 is a character string,\n  then it is assumed that this object should be built from information stored in a\n  file. If INPUT1 is a structure, then it is assumed that this object should be built\n  with a channel_structure (provided in INPUT1) as in\n  ndi.file.type.mfdaq_epoch_channel.create_properties().\n\n    Documentation for ndi.file.type.mfdaq_epoch_channel/mfdaq_epoch_channel\n       doc ndi.file.type.mfdaq_epoch_channel\n</code></pre> <p>readFromFile - read an mfdaq_epoch_channel object from a file</p> <pre><code>MFDAQ_EPOCH_CHANNEL_OBJ = READFROMFILE(MFDAQ_EPOCH_CHANNEL_OBJ, FILENAME)\n\n  Reads the properties of an MFDAQ_EPOCH_CHANNEL object from FILENAME.\n\n  Example:\n    mfdaq_epoch_channel_obj = mfdaq_epoch_channel_obj.readFromFile(filename);\n</code></pre> <p>writeToFile - write the channel_structure to a file</p> <pre><code>[B,ERRMSG] = WRITETOFILE(MFDAQ_EPOCH_CHANNEL_OBJ, FILENAME)\n\n  Writes the properties of an MFDAQ_EPOCH_CHANNEL object to the binary file\n  FILENAME. If the operation is successful, B is 1. Otherwise, it is 0. ERRMSG\n  contains any error message that describes the error state.\n\n  Example:\n  [b,errmsg] = mfdaq_epoch_channel_obj.writeToFile(filename);\n  if ~b, disp(['The function failed with an error: ' errmsg '.']); end;\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/assertAddonOnPath.m/","title":"ndi.fun.assertAddonOnPath","text":"<pre><code>  Get struct array listing installed toolboxes\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/channelname2prefixnumber.m/","title":"ndi.fun.channelname2prefixnumber","text":"<pre><code>  CHANNELNAME2PREFIXNUMBER - identify the prefix, number from channel name string\n\n  [PREFIX, NUMBER] = CHANNELNAME2PREFIXNUMBER(CHANNELNAME)\n\n  Given a channel name like 'ai5', return the prefix (in this case 'ai')\n  and the number (in this case, 5) as PREFIX and NUMBER, respectively.\n\n  Example:\n   [prefix,number] = ndi.fun.channelname2prefixnumber('ai5')\n    % prefix == 'ai', number == 5\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/check_Matlab_toolboxes.m/","title":"ndi.fun.check_Matlab_toolboxes","text":"<pre><code>ndi.fun.check_Matlab_toolboxes is a function.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/console.m/","title":"ndi.fun.console","text":"<pre><code>  CONSOLE - pop up an external terminal window that displays a log file\n\n  CONSOLE(FILENAME)\n\n  Pops up a console window that displays a log file.\n\n  Right now, only MacOS is supported.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/convertoldnsd2ndi.m/","title":"ndi.fun.convertoldnsd2ndi","text":"<pre><code>  CONVERTOLDNSD2NDI - convert an old 'nsd' session to 'ndi'\n\n  ndi.fun.convertoldnsd2ndi(PATHNAME)\n\n  Converts the NDS_SESSION_DIR session at PATHNAME to the new 'ndi' name\n  convention. Needs to be run on MacOS for the unix tools used (might work on Linux).\n\n  The following irreversible changes are made:\n\n  (1) Any instance of 'nsd' in a filename is changed to 'ndi'.\n  (2) Any instance of 'NSD' in a filename is changed to 'NDI'.\n  (3) All instances of 'nsd' in .m, .json, .txt *object_* files are replaced with 'ndi'.\n  (4) All instances of 'NSD' in .m, .json, .txt or *object_* files are replaced with 'NDI'.\n\n  This function is deprecated and should be irrelevant shortly as everyone uses 'NDI' instead of 'NSD'\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/debuglog.m/","title":"ndi.fun.debuglog","text":"<pre><code>  DEBUGLOG - open the NDI debug log in a terminal\n\n  DEBUGLOG()\n\n  Opens the debug log file in a terminal window.\n\n  (Right now, only MacOS is supported.)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/errlog.m/","title":"ndi.fun.errlog","text":"<pre><code>  ERRLOG - open the NDI error log\n\n  ERRLOG()\n\n  Opens the error log file in a terminal window.\n\n  (Right now, only MacOS is supported.)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/find_calc_directories.m/","title":"ndi.fun.find_calc_directories","text":"<pre><code>  ndi.fun.find_calc_directories - find all NDIcalc-X-matlab directories\n\n  D = ndi.fun.find_calc_directories()\n\n  Scan the installed packages for NDIcalc-X-matlab packages.\n\n  D is a cell array of full path directories.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/name2variableName.m/","title":"ndi.fun.name2variableName","text":"<pre><code> NAME2VARIABLENAME Converts a string into a camelCase variable name format.\n\n    variableName = name2variableName(name) takes a character array\n    (char), string array (string), or cell array of char vectors (cellstr)\n    as input and returns a new string suitable for use as a\n    variable name in MATLAB. This version primarily uses cellstr operations.\n\n    This involves:\n    1. Converting the input to a cell array of char vectors for consistent processing.\n    2. Replacing non-alphanumeric characters (except underscore) with spaces.\n    3. Splitting the cleaned string into individual words.\n    4. Capitalizing the first letter of each word.\n    5. Joining all words together without spaces.\n    6. Ensuring the string starts with a letter if it doesn't already\n       (by prepending 'x' if necessary).\n    7. Final cleanup to remove any remaining invalid characters.\n    8. Converting the output back to a char array if the original input was char.\n\n    Input:\n      name - The raw input string (char, string, or cellstr) to be converted.\n\n    Output:\n      variableName - The processed string formatted as a camelCase variable name.\n                    Returns a char array if input was char, otherwise a cellstr.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/plot_extracellular_spikeshapes.m/","title":"ndi.fun.plot_extracellular_spikeshapes","text":"<pre><code>  ndi.fun.plot_extracellular_spikeshapes - plot the extracellularly recorded neuron spike shapes\n\n  G = ndi.fun.plot_extracellular_spikeshapes(S, space)\n\n  Searches the experimental session S for documents of type 'neuron_extracellular',\n  and then plots the element names and their waveforms.\n  SPACE is the space between multichannel waveforms (in the same units as the spike\n  waveform).\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/pseudorandomint.m/","title":"ndi.fun.pseudorandomint","text":"<pre><code>  ndi.fun.pseudorandomint - generate a random integer based on the date and time and a random number\n\n  T = ndi.fun.pseudorandomint()\n\n  Generates a pseudorandom integer that is linked to the current date/time.\n\n  Generates 1000 possible numbers for each second. The portion of the\n  number greater than 1000 is deterministic based on the date (works\n  through the year 2200 at least).\n\n  Example:\n     t = ndi.fun.pseudorandomint()\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/run_Linux_checks.m/","title":"ndi.fun.run_Linux_checks","text":"<pre><code>  RUN_LINUX_CHECKS - run any Linux compatibility checks\n\n  RUN_LINUX_CHECKS\n\n  Run Linux compatibility checks and provide any warnings needed.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/stimulustemporalfrequency.m/","title":"ndi.fun.stimulustemporalfrequency","text":"<pre><code> NDI.FUN.STIMULUSTEMPORALFREQUENCY Extract temporal frequency from stimulus parameters using predefined rules.\n\n    [TF_VALUE, TF_NAME] = NDI.FUN.STIMULUSTEMPORALFREQUENCY(STIMULUS_PARAMETERS)\n\n    Determines the temporal frequency (TF) of a stimulus based on its\n    parameters provided in the STIMULUS_PARAMETERS structure.\n\n    The function checks the field names of the input STIMULUS_PARAMETERS structure\n    against a predefined list of known temporal frequency parameter names. This\n    list and the rules for calculating TF are loaded from a configuration file:\n    [ndi.common.PathConstants.CommonFolder]/stimulus/ndi_stimulusparameters2temporalfrequency.json\n\n    The JSON configuration allows for various ways TF might be encoded:\n    - Direct value: A parameter directly represents TF in Hz.\n    - Scaled/Offset value: A parameter value needs multiplication and/or addition.\n    - Period value: A parameter represents the temporal period (e.g., in seconds),\n      requiring inversion (1/value) to get frequency.\n    - Multi-parameter dependency: The calculation might involve multiplying by\n      the value of another parameter within STIMULUS_PARAMETERS.\n\n    If a matching parameter name is found in STIMULUS_PARAMETERS, the function\n    calculates the TF according to the rules defined in the JSON file for that\n    parameter. It returns the calculated TF in TF_VALUE (typically in Hz) and\n    the name of the parameter used for the calculation in TF_NAME.\n\n    If multiple known TF parameters exist in STIMULUS_PARAMETERS, the function\n    uses the *first* one it finds based on the order in the JSON file and\n    returns immediately after successful calculation.\n\n    If no known temporal frequency parameter field name is found within\n    STIMULUS_PARAMETERS after checking all rules, TF_VALUE is returned as empty\n    (`[]`) and TF_NAME is returned as an empty char array (`''`).\n\n    **Error Handling:**\n    This function will throw an error and stop execution if:\n    - The JSON configuration file is not found or cannot be read/parsed.\n    - An entry in the JSON file is missing required fields.\n    - A matched parameter in `STIMULUS_PARAMETERS` has a non-numeric or non-scalar value.\n    - A calculation results in division by zero (e.g., zero period).\n    - A required secondary multiplier parameter is missing or has an invalid value.\n    - Any other calculation error occurs for a matched parameter rule.\n    Error identifiers start with 'NDI:STIMULUSTEMPORALFREQUENCY:'.\n\n    **JSON Configuration File Structure:**\n    The `ndi_stimulusparameters2temporalfrequency.json` file contains an array\n    of objects, where each object defines a rule for a potential TF parameter:\n    - `parameter_name` (string): The exact field name to look for in the\n        `STIMULUS_PARAMETERS` input structure (e.g., \"tFrequency\", \"t_period\").\n    - `temporalFrequencyMultiplier` (number): A value to multiply the parameter's\n        value by. Use 1 for no multiplication.\n    - `temporalFrequencyAdder` (number): A value to add to the parameter's value\n        *after* multiplication. Use 0 for no addition.\n        (Calculation: `NewValue = temporalFrequencyAdder + temporalFrequencyMultiplier * OriginalValue`)\n    - `isPeriod` (boolean): If `true`, the `NewValue` calculated above is treated\n        as a period, and the final TF is `1 / NewValue`. If `false`, `NewValue`\n        is treated as the frequency.\n    - `parameterMultiplier` (string): If not empty, this should be the name of\n        *another* field within the `STIMULUS_PARAMETERS` structure. The TF value\n        (calculated using the steps above) will be multiplied by the value of\n        this additional parameter. If empty (`\"\"`), no secondary multiplication occurs.\n\n    Inputs:\n      STIMULUS_PARAMETERS (1,1) struct: A scalar structure where each field\n          represents a parameter of the stimulus. Field names are strings,\n          and values are the corresponding parameter values (typically numeric).\n          Example: struct('tFreq', 10, 'contrast', 0.5)\n\n    Outputs:\n      TF_VALUE (numeric or []): The calculated temporal frequency, typically in Hz.\n          Returns empty `[]` only if no matching TF parameter rule is found in the\n          JSON for any field present in STIMULUS_PARAMETERS.\n      TF_NAME (char row vector or ''): The field name in STIMULUS_PARAMETERS\n          from which TF_VALUE was derived. Returns empty `''` only if no match found.\n\n    Requires:\n      - NDI (Neuroscience Data Interface) toolbox, including `ndi.common.PathConstants`.\n      - MATLAB R2016b or newer (for `jsondecode`). R2019a or newer recommended for `fileread`.\n      - The JSON configuration file `ndi_stimulusparameters2temporalfrequency.json`\n        must exist in the expected location and be correctly formatted.\n\n    Examples:\n        % Assume ndi_stimulusparameters2temporalfrequency.json maps 'tFreq' directly:\n        % { \"parameter_name\": \"tFreq\", \"temporalFrequencyMultiplier\": 1, ...\n        %   \"temporalFrequencyAdder\": 0, \"isPeriod\": false, \"parameterMultiplier\": \"\" }\n        params1 = struct('tFreq', 8, 'spatialFreq', 0.1);\n        [tf1, name1] = ndi.fun.stimulustemporalfrequency(params1);\n        % Expected: tf1 = 8, name1 = 'tFreq'\n\n        % Assume JSON maps 'temporal_period_property' with \"isPeriod\": true:\n        % { \"parameter_name\": \"temporal_period_property\", \"isPeriod\": true, ... }\n        params2 = struct('contrast', 1, 'temporal_period_property', 0.125);\n        [tf2, name2] = ndi.fun.stimulustemporalfrequency(params2);\n        % Expected: tf2 = 1 / 0.125 = 8, name2 = 'temporal_period_property'\n\n        % Assume JSON maps 't_period' with \"isPeriod\": true and\n        % \"parameterMultiplier\": \"refreshRate\":\n        % { \"parameter_name\": \"t_period\", \"isPeriod\": true, ...\n        %   \"parameterMultiplier\": \"refreshRate\", ...}\n        params3 = struct('t_period', 15, 'refreshRate', 60); % t_period in frames\n        [tf3, name3] = ndi.fun.stimulustemporalfrequency(params3);\n        % Expected: tf3 = (1 / 15) * 60 = 4 Hz, name3 = 't_period'\n\n        % Case where no known TF parameter is present\n        params4 = struct('orientation', 90, 'diameter', 5);\n        [tf4, name4] = ndi.fun.stimulustemporalfrequency(params4);\n        % Expected: tf4 = [], name4 = ''\n\n        % Example that would now cause an error (previously warning):\n        % params5 = struct('tFreq', [1 2]); % Non-scalar value\n        % try\n        %    ndi.fun.stimulustemporalfrequency(params5);\n        % catch ME\n        %    disp(ME.message); % Will display error about non-scalar value\n        % end\n\n    See also: NDI.SETUP.STIMULUSPARAMETERMAPS, FILEREAD, JSONDECODE, ERROR\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/syslog.m/","title":"ndi.fun.syslog","text":"<pre><code>  SYSLOG - open the NDI system log\n\n  SYSLOG()\n\n  Opens the log file in a terminal window.\n\n  (Right now, only MacOS is supported.)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/timestamp.m/","title":"ndi.fun.timestamp","text":"<pre><code>  TIMESTAMP - return a current time stamp string\n\n  TIMESTAMP_STRING = ndi.fun.timestamp()\n\n  Returns a current time stamp string using the expression:\n    TIMESTAMP_STRING = char(datetime('now','TimeZone','UTCLeapSeconds'))\n\n  The string is checked to make sure that the seconds are not\n  \"60.000\", which can occur due to rounding and which can cause a\n  validation error when the data is included in a database.\n  In that case, the seconds are set to \"59.999\".\n\n  Example:\n    ts_st = ndi.fun.timestamp()\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bcalc/stimulus_tuningcurve_log.m/","title":"ndi.fun.calc.stimulus_tuningcurve_log","text":"<pre><code>  STIMULUS_TUNINGCURVE_LOG - retrieve stimulus_tuningcurve log string from dependent document\n\n  LOG_STR = STIMULUS_TUNINGCURVE_LOG(S, DOC)\n\n  Given an ndi.document that has a dependency 'stimulus_tuningcurve_id'\n  that was created by ndi.calc.stimulus.tuningcuve,\n  this function looks up the DOC's dependent tuningcurve_calc document\n  and retrieves the 'log' string field.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bdata/mat2ngrid.m/","title":"ndi.fun.data.mat2ngrid","text":"<pre><code> MAT2NGRID - Create an ngrid structure from an n-dimensional matrix.\n\n    ngrid = MAT2NGRID(X)\n        Creates an ngrid structure from the n-dimensional matrix X, using\n        default indices as coordinates.\n\n    ngrid = MAT2NGRID(X, c1, c2, ..., cn)\n        Creates an ngrid structure from X, using the provided coordinate\n        vectors c1, c2, ..., cn for each dimension.\n\n    Input Arguments:\n        X  - n-dimensional numeric matrix.\n        c1, c2, ..., cn - Coordinate vectors for each dimension of X. Each\n                         ci must be a numeric vector with length matching\n                         size(X, i). All ci must be of the same data type.\n\n    Output Arguments:\n        ngrid - Structure containing the following fields:\n            data_size   - Size of the data type in bytes.\n            data_type   - Class of the data (e.g., 'double').\n            data_dim    - Dimensions of X.\n            coordinates - Vertically concatenated coordinate positions,\n                          size [sum(data_dim), 1].\n\n    Error Handling:\n        - 'MAT2NGRID:defaultCoords': If no coordinates are provided, indices\n          are used, and a warning is issued.\n        - 'MAT2NGRID:invalidCoords': If coordinate vectors are not numeric,\n          not vectors, or have incorrect lengths.\n        - 'MAT2NGRID:tooFewCoords': If fewer coordinates than dimensions of\n          X are provided.\n        - 'MAT2NGRID:tooManyCoords': If more coordinates than dimensions of\n          X are provided.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bdata/readngrid.m/","title":"ndi.fun.data.readngrid","text":"<pre><code> READNGRID - Read an n-dimensional matrix from a binary file.\n\n    Reads an n-dimensional matrix from a binary file, given the file path,\n    the size of the matrix, and the data type of its elements.\n\n    Syntax:\n        x = READNGRID(fileName_or_fileObj, dataSize)\n        x = READNGRID(fileName_or_fileObj, dataSize, dataType)\n\n    Input Arguments:\n        fileName_or_fileObj - Character vector specifying the full path and\n                   filename of the input binary file OR an object of type\n                   vlt.file.fileobj.\n        dataSize - Numeric vector specifying the dimensions of the \n                   n-dimensional matrix to be read (e.g., [100, 100, 5]).\n        dataType - (Optional) Character vector specifying the data type of \n                   the elements in the binary file. Defaults to 'double' if\n                    not provided. Valid data types include 'double', \n                   'single', 'int8', 'uint8', 'int16', 'uint16', 'int32', \n                    'uint32', 'int64', 'uint64', etc.\n\n    Output Arguments:\n        x        - n-dimensional matrix read from the binary file.\n\n    Error Handling:\n        - 'READNGRID:unknownDataType': If the dataType provided is not \n            recognized by fread a warning is issued.\n        - 'READNGRID:invalidFilePath': If the specified filePath cannot be\n            opened for reading.\n        - 'READNGRID:incorrectDataSize': If the number of elements read by\n            fread does not match the expected number based on dataSize a\n            warning is issued.\n\n    See also: WRITENGRID.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bdata/writengrid.m/","title":"ndi.fun.data.writengrid","text":"<pre><code> WRITENGRID - Write an n-dimensional matrix to a binary file.\n\n    Writes the n-dimensional matrix X to a binary file with specified data \n    type. The binary file is written in little-endian format to ensure \n    cross-platform compatibility.\n\n    Syntax:\n        WRITENGRID(x, filePath)\n        WRITENGRID(x, filePath, dataType)\n\n    Input Arguments:\n        x        - n-dimensional matrix.\n                   The data to be written to the binary file.\n        filePath - Character vector specifying the full path and filename\n                   of the output binary file.\n        dataType - (Optional) Character vector specifying the data type of the\n                   elements in X. Defaults to 'double' if not provided.\n                   Valid data types include 'double', 'single', 'int8', 'uint8',\n                   'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64',\n                   etc.\n\n    Error Handling:\n        - 'WRITENGRID:unknownDataType': If the dataType provided is not \n            recognized by fwrite a warning is issued.\n        - 'WRITENGRID:invalidFilePath': If the specified filePath cannot be\n            opened for writing.\n\n    See also: READNGRID\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bdoc/getDocTypes.m/","title":"ndi.fun.doc.getDocTypes","text":"<pre><code> GETDOCTYPES Find all unique document types and their counts in an NDI session.\n    [DOC_TYPES, DOC_COUNTS] = GETDOCTYPES(SESSION) queries the database of the\n    provided NDI session object to find all unique document types and their\n    corresponding counts.\n\n    DESCRIPTION:\n    This function searches for all documents within the session, determines\n    the MATLAB class for each one, and returns a sorted cell array of the\n    unique class names found, along with the number of occurrences for each.\n    It is a useful utility for exploring the contents and distribution of\n    documents within an NDI session.\n\n    INPUTS:\n    session - An NDI session object, which must be of class 'ndi.session.dir'\n              or 'ndi.dataset.dir'.\n\n    OUTPUTS:\n    docTypes - A cell array of character vectors, where each cell contains\n               a unique document class name. The unique class names are\n               returned in sorted order.\n    docCounts - A column vector of numerical counts, where each element\n                corresponds to the number of occurrences of the document\n                type at the same position in 'docTypes'.\n\n    SEE ALSO:\n    ndi.session, ndi.query, ndi.dataset, groupcounts\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bdoc/ontologyTableRowDoc2Table.m/","title":"ndi.fun.doc.ontologyTableRowDoc2Table","text":"<pre><code> ONTOLOGYTABLEROWDOC2TABLE Converts NDI ontologyTableRow documents to MATLAB tables.\n\n    [dataTables, docIDs] = ONTOLOGYTABLEROWDOC2TABLE(tableRowDoc)\n    [dataTables, docIDs] = ONTOLOGYTABLEROWDOC2TABLE(tableRowDoc, StackAll=true)\n\n    Extracts tabular data from one or more NDI ontologyTableRow documents.\n    By default, the function separates documents into groups that share common\n    variable names and returns a separate stacked table for each group.\n\n    The function can also stack all data into a single table, regardless of\n    the original variable names.\n\n    Inputs:\n      tableRowDoc - A single NDI document object or a 1xN cell array\n         of NDI document objects. Each document must contain the\n         ontologyTableRow data structure.\n\n    Optional Name-Value Pair Arguments:\n      StackAll (logical) - If set to false (default), the function groups\n         documents by their `variableNames` property and returns a cell array\n         of tables, one for each group. If true, all data is stacked into a\n         single table, returned within a 1x1 cell array.\n\n    Outputs:\n      dataTables (cell) - A cell array of MATLAB tables. If `StackAll` is false\n         (default), this is an Nx1 cell array where N is the number of unique\n         variable sets found. If `StackAll` is true, this is a 1x1 cell array\n         containing a single, combined table.\n\n      docIDs (cell) - A cell array containing the NDI document IDs. The\n         structure mirrors `dataTables`. Each cell contains the document IDs\n         corresponding to the data in the equivalent `dataTables` cell.\n\n    See also: vlt.data.flattenstruct2table, ndi.fun.table.vstack\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bdoc/ontologyTableRowVars.m/","title":"ndi.fun.doc.ontologyTableRowVars","text":"<pre><code>  ONTOLOGYTABLEROWVARS - return all ontologyTableRow document variable names in dataset/session\n\n  [NAMES,VARIABLENAMES,ONTOLOGYNODES] = ONTOLOGYTABLEROWVARS(S)\n\n  Given an ndi.session or ndi.dataset object S, finds all N of the unique\n  variable names (that is, column names) for all ontologyTableRow documents.\n\n  NAMES        {Nx1}: cell array of ontology names available\n  VARIABLENAMES{Nx1}: the short name that appears in the table\n  ONTOLOGYNODES{Nx1}: the ontology node names of each variable\n\n  Example:\n  % if S is an ndi.session or ndi.dataset\n  [names,variableNames,ontologyNodes] = ndi.fun.doc.ontologyTableVars(S);\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bdoc/t0_t1cell2array.m/","title":"ndi.fun.doc.t0_t1cell2array","text":"<pre><code>  T0_T1CELL2ARRAY - convert a t0..t1 interval expressed as a cell in an epochtable entry as array\n\n  T0T1_OUT = t0_t1cell2array(T0T1_IN)\n\n  Convert a t0_t1 entry from an epochtable (where it is a cell array of {[t0a t1a], [t0b t1b]} values\n  to an array suitable for inclusion in an ndi.document object.\n\n  Each t0t1 entry is converted to a column of a matrix. The first epochclock's t0t1 is represented\n  as T0T1_OUT(1:2,1), the second as T0T1_OUT(1:2,2), etc.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bdoc/%2Bprobe/probeLocations4probes.m/","title":"ndi.fun.doc.probe.probeLocations4probes","text":"<pre><code>  PROBELOCATIONS4PROBES - Create and add probe_location documents for a set of probes.\n\n    DOCS = PROBELOCATIONS4PROBES(S, PROBES, ONTOLOGY_LOOKUP_STRINGS, ...)\n\n    Creates NDI documents of type 'probe_location' for each probe specified in the\n    cell array PROBES. The location for each probe is specified by a corresponding\n    entry in the ONTOLOGY_LOOKUP_STRINGS cell array.\n\n    Inputs:\n      S - An ndi.session.dir object representing the current session.\n      PROBES - A cell array of ndi.probe objects.\n      ONTOLOGY_LOOKUP_STRINGS - A cell array of strings, where each string is a\n        prefixed term for ontology lookup (e.g., 'UBERON:0000411'). The number\n        of elements must match the number of probes.\n\n    This function also accepts an optional name-value argument:\n\n    | Parameter (default) | Description                                  |\n    |---------------------|----------------------------------------------|\n    | doAdd (true)        | If true, adds the created documents to the   |\n    |                     |   session database `S`.                      |\n\n    Returns a cell array of the newly created ndi.document objects.\n\n    Example:\n      % Assuming S is an ndi.session.dir object and myprobes is a cell array of probes\n      locations = {'UBERON:0002436', 'UBERON:0000411'}; % V1, visual cortex\n      location_docs = probeLocations4probes(S, myprobes, locations);\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bdoc/%2Bsubject/makeSpeciesStrainSex.m/","title":"ndi.fun.doc.subject.makeSpeciesStrainSex","text":"<pre><code>  MAKESPECIESSTRAINSEX - Add species, strain, or sex information for a subject in an ndi.session\n\n  [NDIDOCARRAY, OPENMINDSOBJ] = ndi.fun.doc.subject.makeSpeciesStrainSex(ndiSession, subjectID, ...)\n\n  Creates openMINDS-standard documents for species, strain, and biological sex,\n  linking them to a specified subject document. By default, the documents are only\n  created in memory. They can be added to the session's database by setting the\n  'AddToSession' option to true.\n\n  This function looks up ontology information for the provided terms and constructs\n  the corresponding openMINDS objects, which are then converted to NDI documents.\n\n  Inputs:\n    ndiSession (ndi.session) - The NDI session object.\n    subjectID (string)       - The document ID of the 'subject' document to which\n                               this information will be linked.\n\n  Optional Name-Value Pair Arguments:\n    'BiologicalSex' (char)   - The biological sex of the subject. Must be one of\n                               'male', 'female', 'hermaphrodite', or 'notDetectable'.\n    'Species' (char)         - The species of the subject, specified as an ontology\n                               identifier (e.g., 'NCBITaxon:10116' for Rattus norvegicus).\n    'Strain' (char)          - The strain of the subject, specified as an ontology\n                               identifier (e.g., 'RRID:RGD_70508' for Sprague Dawley).\n                               Note: 'Species' must also be provided to create a strain document.\n    'AddToSession' (logical) - If true, the created documents are added to the\n                               session's database. Defaults to false.\n\n  Outputs:\n    ndiDocArray (cell array) - A cell array of the newly created ndi.document objects.\n    openMindsObj (cell array)- A cell array of the openMINDS objects that were created.\n\n  Example:\n    % Assuming 'S' is a valid ndi.session object and 'subject_doc' is a subject document\n    subject_id = subject_doc.id();\n    % Create documents and add them to the session\n    [new_docs, openminds_objs] = ndi.fun.doc.subject.makeSpeciesStrainSex(S, subject_id, ...\n        'Species', 'NCBITaxon:9669', ... % Mustela putorius furo (ferret)\n        'BiologicalSex', 'male', ...\n        'AddToSession', true);\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2BdocTable/element.m/","title":"ndi.fun.docTable.element","text":"<pre><code> ELEMENT Creates a summary table of element documents and their associated metadata.\n\n    elementTable = element(SESSION)\n\n    This function retrieves all 'ndi_element' documents from a session using\n    session.getelements(). It then dynamically discovers all metadata document\n    types that are associated with elements. For each element, it finds all\n    linked metadata documents and aggregates their properties into a single summary\n    table.\n\n    Each row in the output table represents a single element. The first few columns\n    contain the element's core properties (ID, name, etc.). Subsequent columns are\n    dynamically generated based on the metadata found. These columns contain\n    comma-separated lists of unique values for each property from the associated\n    metadata documents.\n\n    Inputs:\n        SESSION - An active and connected ndi.session or ndi.dataset object.\n\n    Outputs:\n        elementTable - A MATLAB table where each row is an element. Columns are\n                     dynamically generated based on the data found.\n                     Core columns include:\n                     - 'subject_id': The ID of the subject associated with the element.\n                     - 'element_id': The unique identifier for the element.\n                     - 'element_name': The name of the element.\n                     - 'element_type': The type of the element.\n                     - 'element_reference': The reference identifier for the element.\n                     Dynamic columns are created for each metadata property found.\n                     The naming convention is 'DocumentTypePropertyName', for example:\n                     - 'PositionName': From 'position_metadata' documents.\n                     - 'ProbeLocationOntology': From 'probe_location' documents.\n\n    See also: ndi.session, ndi.query, ndi.fun.table.vstack, ndi.fun.name2variableName\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2BdocTable/epoch.m/","title":"ndi.fun.docTable.epoch","text":"<pre><code> EPOCH Creates a summary table of epochs and their associated metadata.\n\n    epochTable = epoch(SESSION)\n\n    This function queries an NDI session to find all stimulator probes and their\n    corresponding epochs. For each epoch, it extracts timing information (local\n    and global timestamps). It then associates each epoch with relevant\n    'stimulus_bath' and 'openminds_stimulus' documents based on their epoch IDs.\n    The function aggregates properties from these associated documents, such as\n    mixture names, mixture ontologies, stimulus approach names, and approach\n    ontologies, into a single comprehensive summary table.\n\n    Each row in the output table represents a unique stimulus epoch. The columns\n    contain epoch identifiers, subject ID, timing information, and aggregated,\n    comma-separated lists of unique properties from associated stimulus bath\n    and stimulus approach documents. Empty columns (those with no data across\n    any epochs) are removed, and empty string cells are standardized.\n\n    Inputs:\n        SESSION (ndi.session.dir) - An active and connected NDI session object.\n\n    Outputs:\n        epochTable (table) - A MATLAB table where each row corresponds to a\n                        stimulus epoch. Common columns include:\n                        - 'EpochNumber': The epoch number within the stimulator.\n                        - 'EpochDocumentIdentifier': The unique identifier for the epoch.\n                        - 'ProbeDocumentIdentifier': The unique identifier for the probe that generated the epoch.\n                        - 'SubjectDocumentIdentifier': The ID of the subject associated with the probe.\n                        - 'local_t0', 'local_t1': Start and end times in local clock units (numeric).\n                        - 'global_t0', 'global_t1': Start and end times as datetime objects\n                                                     in global time (if available, otherwise empty).\n                        - 'MixtureName': Comma-separated list of unique mixture names\n                                         from associated stimulus_bath documents.\n                        - 'MixtureOntology': Comma-separated list of unique mixture\n                                             ontology names from associated stimulus_bath documents.\n                        - 'ApproachName': Comma-separated list of unique approach names\n                                          from associated openminds_stimulus documents.\n                        - 'ApproachOntology': Comma-separated list of unique approach\n                                              ontology identifiers from associated openminds_stimulus documents.\n\n    See also: ndi.session, ndi.query, ndi.fun.table.vstack\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2BdocTable/openminds.m/","title":"ndi.fun.docTable.openminds","text":"<pre><code>  OPENMINDS Gathers OpenMINDS document properties into a table.\n\n    [openmindsTable, docIDs, dependencyIDs] = OPENMINDS(SESSION, TYPE, OPTIONS)\n    retrieves OpenMINDS documents of a specified 'TYPE' from an NDI session\n    and organizes their key properties into a MATLAB table. For each\n    document of the specified type, it extracts its name and associated\n    ontology. It also identifies and includes properties from any directly\n    linked OpenMINDS documents (dependencies), such as their names and\n    ontologies.\n\n    The function can optionally identify and return the IDs of documents\n    that the found OpenMINDS documents 'depend on', allowing for further\n    linking (e.g., linking a 'Strain' document to a 'subject' document).\n\n    Input Arguments:\n      session (ndi.session.dir or ndi.dataset.dir) - An NDI session or dataset\n        directory object from which to retrieve OpenMINDS documents.\n      type (char or string) - The OpenMINDS type to search for. This should\n        correspond to the last part of the OpenMINDS type URI (e.g., 'Strain',\n        'BiologicalSex', 'Species'). Must be a single character array or string.\n      options.depends_on (char or string, optional) - Specifies a field name\n        within the OpenMINDS document's 'depends_on' structure to extract\n        dependency IDs. For example, use 'subject_id' to retrieve the IDs of\n        subjects that the OpenMINDS documents depend on. Defaults to an empty\n        string, meaning no specific dependency IDs are extracted unless specified.\n\n    Output Arguments:\n      openmindsTable (table) - A MATLAB table where each row represents a\n        unique OpenMINDS document of the specified 'type'. The table\n        includes columns for the primary document's name and ontology (e.g.,\n        'StrainName', 'StrainOntology'). It also includes similar columns\n        (e.g., 'SpeciesName', 'SpeciesOntology') for any directly linked\n        OpenMINDS documents that are dependencies. Duplicate primary\n        documents, particularly those that are encompassed by another (e.g.,\n        a 'BackgroundStrain' when a 'Strain' document exists), are removed,\n        prioritizing the document with the most dependencies.\n      docIDs (cell) - A cell array of character vectors. Each element is the\n        unique document ID of the OpenMINDS document corresponding to the\n        rows in 'openmindsTable', in the same order.\n      dependencyIDs (cell) - A cell array of character vectors. Each element\n        is the ID of the document that the corresponding OpenMINDS document\n        'depends on', as specified by 'options.depends_on'. If 'depends_on'\n        is not specified or no dependency is found, elements will be empty strings.\n\n    See also: ndi.query, ndi.session.dir, ndi.dataset.dir, ndi.fun.table.vstack\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2BdocTable/probe.m/","title":"ndi.fun.docTable.probe","text":"<pre><code> PROBEDOCTABLE Creates a summary table of probe documents and their associated metadata.\n\n    probeTable = probeDocTable(SESSION)\n\n    This function queries an NDI session to find all 'probe' documents. For each\n    probe, it extracts core properties such as its ID, name, type, and\n    reference. It then associates each probe with relevant 'probe_location' and\n    'openminds_element' (representing cell types) documents based on their\n    dependencies, aggregating properties such as location names, location\n    ontologies, cell type names, and cell type ontologies into a single summary\n    table.\n\n    Each row in the output table represents a single probe document, and the\n    columns contain probe identifiers, subject ID, and comma-separated lists of\n    unique properties from associated probe location and cell type documents.\n\n    Inputs:\n        SESSION - An active and connected ndi.session or ndi.dataset object.\n\n    Outputs:\n        probeTable - A MATLAB table where each row is a probe and columns are\n                     dynamically generated based on the data found.\n                     Common columns include:\n                     - 'subject_id': The ID of the subject associated with the probe.\n                     - 'probe_id': The unique identifier for the probe.\n                     - 'probe_name': The name of the probe.\n                     - 'probe_type': The type of the probe.\n                     - 'probe_reference': The reference identifier for the probe.\n                     - 'probeLocationName': Comma-separated list of unique probe\n                                            location names from associated\n                                            'probe_location' documents.\n                     - 'probeLocationOntology': Comma-separated list of unique\n                                                probe location ontology names\n                                                from associated 'probe_location' documents.\n                     - 'cellTypeName': Comma-separated list of unique cell type\n                                       names from associated 'openminds_element' documents.\n                     - 'cellTypeOntology': Comma-separated list of unique cell\n                                           type ontology identifiers from\n                                           associated 'openminds_element' documents.\n\n    See also: ndi.session, ndi.query, ndi.fun.table.vstack\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2BdocTable/subject.m/","title":"ndi.fun.docTable.subject","text":"<pre><code> SUBJECT Creates a summary table of subjects and their associated metadata.\n\n    subjectTable = subject(SESSION)\n\n    This function queries an NDI session to find all subject documents. For each\n    subject, it then finds and integrates information from associated 'openminds'\n    documents related to 'Strain', 'Species', and 'BiologicalSex', as well as\n    'treatment' documents.\n\n    The function aggregates properties from these dependent documents, such as\n    species name, strain, biological sex, and treatment details. It then\n    formats this aggregated information into a single summary table. Each row\n    in the output table represents a unique subject, and the columns contain\n    the subject's identifiers along with details from its linked documents.\n    Metadata from associated documents is joined using 'SubjectDocumentIdentifier'.\n\n    Inputs:\n        SESSION - An active and connected ndi.session or ndi.dataset object.\n\n    Outputs:\n        subjectTable - A MATLAB table where each row corresponds to a subject.\n                       Common columns include 'SubjectDocumentIdentifier',\n                       'SubjectLocalIdentifier', 'StrainName', 'SpeciesName',\n                       'BiologicalSexOntology', and various fields from 'treatment'\n                       documents, depending on the available data.\n\n    See also: ndi.session, ndi.query, table, outerjoin, \n    ndi.fun.docTable.openminds, ndi.fun.docTable.treatment, \n    ndi.fun.table.identifyValidRows\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2BdocTable/treatment.m/","title":"ndi.fun.docTable.treatment","text":"<pre><code>  TREATMENT Gathers NDI treatment document properties into a table.\n\n    [treatmentTable, docIDs, dependencyIDs] = TREATMENT(SESSION, OPTIONS)\n    retrieves 'treatment' type documents from an NDI session and organizes\n    their properties into a MATLAB table. For each treatment document, it\n    extracts its numeric and/or string values, interpreting them based on\n    an associated ontology. It also identifies and returns the IDs of\n    documents that the treatment documents 'depend on'.\n\n    Input Arguments:\n      session (ndi.session.dir or ndi.dataset.dir) - An NDI session or dataset\n        directory object from which to retrieve treatment documents.\n      options.depends_on (char or string, optional) - Specifies a field name\n        within the treatment document's 'depends_on' structure to extract\n        dependency IDs. For example, use 'subject_id' to retrieve the IDs of\n        subjects that the treatment documents depend on. Defaults to an empty\n        string, meaning no specific dependency IDs are extracted unless specified.\n\n    Output Arguments:\n      treatmentTable (table) - A MATLAB table where each row represents a\n        treatment document. The table dynamically includes columns based on\n        the `dataType` derived from the treatment's ontology name. These\n        columns may include:\n          - `[dataType]` for numeric or string values.\n          - `[dataType]Name` and `[dataType]Ontology` if the string value\n            is an ontology node.\n          - `[dataType]Number` and `[dataType]String` if both numeric and\n            string values are present.\n        The function attempts to combine treatments that share the same\n        dependency into a single row, concatenating their properties.\n      docIDs (cell) - A cell array of character vectors. Each element is the\n        unique document ID of the treatment document corresponding to the\n        rows in 'treatmentTable', in the same order.\n      dependencyIDs (cell) - A cell array of character vectors. Each element\n        is the ID of the document that the corresponding treatment document\n        'depends on', as specified by 'options.depends_on'. If 'depends_on'\n        is not specified or no dependency is found, elements will be empty strings.\n\n    See also: ndi.query, ndi.session.dir, ndi.dataset.dir, ndi.fun.table.vstack, ndi.ontology.lookup\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bepoch/epochid2element.m/","title":"ndi.fun.epoch.epochid2element","text":"<pre><code>  EPOCHID2ELEMENT - Find an NDI element given an epochid\n\n    ELEMENT = EPOCHID2ELEMENT(SESSION, EPOCHID) searches through all \n    elements within the session to find the element that contains the \n    specified EPOCHID in its epochtable.\n\n    ELEMENT = EPOCHID2ELEMENT(SESSION, EPOCHID, 'NAME', NAME_VALUE, 'TYPE', TYPE_VALUE)\n    allows for optional filtering of elements by name and/or type before\n    searching for the EPOCHID. This can be useful for speeding up the search\n    in sessions with many elements or for resolving ambiguity if the same\n    EPOCHID might exist in elements of different types or names.\n\n    Input Arguments:\n        session  - An NDI session object.\n        epochid - A character vector or a cell array of character vectors \n                   representing the unique identifier(s) of the epoch(s) to find.\n\n    Optional Name-Value Pair Arguments:\n        name     - A character array (string). If provided, the search is\n                   restricted to elements with this name. Defaults to ''\n                   (no name restriction).\n        type     - A character array (string). If provided, the search is\n                   restricted to elements of this type. Defaults to ''\n                   (no type restriction).\n\n    Output Arguments:\n        element - A cell array of NDI element object(s) associated that \n              contain the epoch(s) specified by EPOCHID.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bepoch/filename2epochid.m/","title":"ndi.fun.epoch.filename2epochid","text":"<pre><code> FILENAME2EPOCHID Finds the epochid associated with a given filename.\n\n    EPOCHID = FILENAME2EPOCHID(SESSION, FILENAME) searches through the epoch\n    tables within the provided SESSION object to find an epoch_id\n    associated with the specified FILENAME.\n\n    Input Arguments:\n        session  - An NDI session object.\n        filename - A character vector or a cell array of character vectors \n                   representing the name(s) of the file(s) to search for \n                    within the epochs.\n\n    Output Arguments:\n        epochid  - A cell array of epoch ID(s) associated with the filename(s).\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bplot/multichan.m/","title":"ndi.fun.plot.multichan","text":"<pre><code>  MULTICHAN - Plots multiple channels\n\n   H = ndi.fun.plot.multichan(DATA,T,SPACE)\n\n   Plots multiple channels of DATA (assumed to be NUMSAMPLES X NUMCHANNELS)\n\n   T is the time for each sample and SPACE is the space to put between channels.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bstimulus/f0_f1_responses.m/","title":"ndi.fun.stimulus.f0_f1_responses","text":"<pre><code>  F0_F1_RESPONSES - get the F0 and F1 responses for a tuning curve document\n\n  [F0,F1] = F0_F1_RESPONSES(S, DOC, [STIMULUS_INDEX])\n\n  Given an ndi.document object of type stimulus_tuningcurve (or a document that has a single\n  dependency of 'stimulus_tuningcurve_id'), and a response_index number (the entry in the 'mean'\n  response array of responses), this function returns the f0 and f1 responses for that stimulus.\n  This function looks up the appropriate stimulus_tuningcurve objects.\n\n  If STIMULUS_INDEX is not given, then the overall maximum response rate (either mean or F1)\n  is examined and that location is taken as the STIMULUS_INDEX.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bstimulus/findMixtureName.m/","title":"ndi.fun.stimulus.findMixtureName","text":"<pre><code>  FINDMIXTURENAME Identifies matching mixture names from a dictionary.\n\n    matchingNames = FINDMIXTURENAME(mixtureDictionaryPath, mixture)\n    compares input 'mixture' structure(s) or table against a dictionary\n    of mixtures loaded from a JSON file specified by 'mixtureDictionaryPath'.\n    It returns a cell array of field names from the mixture dictionary\n    that completely match the provided 'mixture' based on specific fields.\n\n    The function assumes both the 'mixture' input and the individual\n    mixture entries within the 'mixtureDictionary' have the following\n    fields for comparison:\n        - 'ontologyName' (string)\n        - 'name' (string)\n        - 'value' (numeric)\n        - 'ontologyUnit' (string)\n        - 'unitName' (string)\n\n    Input Arguments:\n    - mixtureDictionaryPath: A string scalar or character vector specifying the\n      full path to a JSON file containing the mixture dictionary. This file\n      is expected to be a flat structure where each field name represents a\n      mixture name, and its value is either a single struct or a struct array\n      containing the mixture's properties.\n      (e.g., 'path/to/dabrowska_mixtures.json')\n    - mixture: A scalar struct, a struct array, or a table. Each row/element\n      of 'mixture' should contain the fields required for comparison.\n\n    Output Arguments:\n    - matchingNames: A cell array of strings containing the field names from\n      the 'mixtureDictionary' that fully match the provided 'mixture' input.\n      A dictionary entry is considered a match if ALL of its constituent\n      elements (if it's a struct array) can find a corresponding exact match\n      within the 'mixture' input.\n\n  See also JSONDECODE, FILEREAD, STRCMPI, EQ, TABLE2STRUCT.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Bstimulus/tuning_curve_to_response_type.m/","title":"ndi.fun.stimulus.tuning_curve_to_response_type","text":"<pre><code>  TUNING_CURVE_TO_RESPONSE_TYPE - get the response type ('mean', 'F1', etc) of a tuning curve document\n\n  [RESPONSE_TYPE,STIM_RESPONSE_SCALAR_DOC] = ndi.fun.stimulus.tuning_curve_to_response_type(S, DOC)\n\n  Given an ndi.document object DOC that is either a stimulus_tuningcurve or a\n  document that has a dependency, 'stimulus_tuningcurve_id', this function\n  looks up the 'stimulus_response_scalar' document and returns its\n  'response_type' field. This is typically 'mean', 'F1','F2', etc.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Btable/identifyMatchingRows.m/","title":"ndi.fun.table.identifyMatchingRows","text":"<pre><code> IDENTIFYMATCHINGROWS Identifies rows in a MATLAB table that match specified criteria.\n\n    rowInd = identifyMatchingRows(dataTable, columnNames, dataValues) returns\n    a logical index vector indicating which rows in 'dataTable' have values\n    in 'columnNames' that match the corresponding 'dataValues'.\n\n    rowInd = identifyMatchingRows(dataTable, columnNames, dataValues, options)\n    allows specifying the type of matching to perform for text data and\n    relational operations for numeric/date data.\n\n    Inputs:\n      dataTable   - A MATLAB table.\n      columnNames - A character vector, string scalar, string array, or cell array\n                    of character vectors/strings specifying the variable names\n                    (columns) to check.\n      dataValues  - The values to match against the specified columns.\n                    - If 'columnNames' specifies a single column, 'dataValues'\n                      can be a single value (numeric, char, string, logical)\n                      or a cell array of valid values for that column.\n                    - If 'columnNames' specifies multiple columns, 'dataValues'\n                      must be a cell array, where each element corresponds to\n                      the respective column in 'columnNames'. Each element within\n                      this cell array can itself be a single value or a cell array\n                      of valid values for that specific column.\n\n    Optional Name-Value Arguments\n      stringMatch - A string scalar or character vector specifying the matching \n                    behavior for text data. Valid options are:\n                    - 'identical' (default): Case-sensitive exact match.\n                    - 'ignoreCase': Case-insensitive exact match.\n                    - 'contains': Checks if the table cell's text contains\n                                  the 'dataValue' text (case-sensitive).\n                                  This option only applies to string/char data.\n      numericMatch - A string scalar or character vector specifying the relational\n                    operator for numeric or datetime data. Valid options are:\n                    - 'eq' (default): Equals (==)\n                    - 'ne': Not equals (~=)\n                    - 'lt': Less than (&lt;)\n                    - 'le': Less than or equal to (&lt;=)\n                    - 'gt': Greater than (&gt;)\n                    - 'ge': Greater than or equal to (&gt;=)\n\n    Output:\n      rowInd      - A logical column vector where 'true' indicates a row that\n                    matches the criteria, and 'false' indicates a non-matching row.\n\n  Example Usage:\n    % Create a sample table\n    T = table({'apple';'banana';'cherry';'APPLE pie'}, [10;20;30;40], {'red';'yellow';'red';'green'}, ...\n              'VariableNames', {'Fruit','Count','Color'});\n\n    % Example 1: Match rows where 'Fruit' is 'banana' (default 'identical' string match)\n    rowInd1 = identifyMatchingRows(T, 'Fruit', 'banana');\n    % rowInd1 will be [false; true; false; false]\n\n    % Example 2: Match rows where 'Fruit' is 'apple' OR 'APPLE' (case-insensitive identical string match)\n    rowInd2 = identifyMatchingRows(T, 'Fruit', 'apple', 'stringMatch', 'ignoreCase');\n    % rowInd2 will be [true; false; false; true]\n\n    % Example 3: Match rows where 'Fruit' contains 'apple' (case-sensitive 'contains' string match)\n    rowInd3 = identifyMatchingRows(T, 'Fruit', 'apple', 'stringMatch', 'contains');\n    % rowInd3 will be [true; false; false; false]\n\n    % Example 4: Match rows where 'Count' is greater than 25 (numeric match)\n    rowInd4 = identifyMatchingRows(T, 'Count', 25, 'numericMatch', 'gt');\n    % rowInd4 will be [false; false; true; true] (rows with 30 and 40)\n\n    % Example 5: Match rows where 'Fruit' is 'apple' AND 'Count' is 10\n    % (uses default 'identical' string match and default 'eq' numeric match)\n    rowInd5 = identifyMatchingRows(T, {'Fruit','Count'}, {'apple',10});\n    % rowInd5 will be [true; false; false; false]\n\n  See also: table, strcmp, strcmpi, contains, ismember\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Btable/identifyValidRows.m/","title":"ndi.fun.table.identifyValidRows","text":"<pre><code> IDENTIFYVALIDROWS Identifies valid rows in a MATLAB table based on specified criteria.\n\n    validInd = IDENTIFYVALIDROWS(variableTable)\n    Checks no specific variables. All rows are considered valid.\n\n    validInd = IDENTIFYVALIDROWS(variableTable, checkVariables)\n    Checks the variables specified in 'checkVariables' for NaN values by default.\n    Rows where any of the specified variables contain NaN are marked as invalid.\n\n    validInd = IDENTIFYVALIDROWS(variableTable, checkVariables, invalidValues)\n    Checks the variables in 'checkVariables' against corresponding 'invalidValues'.\n\n    INPUT ARGUMENTS:\n        variableTable: A MATLAB table. Rows typically correspond to observations\n                       and columns to variables.\n\n        checkVariables: (Optional) Names of variables within 'variableTable' to be checked.\n                       Can be a character vector, a string scalar, a string array,\n                       or a cell array of character vectors/strings.\n                       - Default: {}. If empty, the function returns all 'true' and no\n                         checks are performed, regardless of the 'invalidValues' input.\n                       - If a variable name is not found in 'variableTable', a warning\n                         is issued and that check is skipped.\n\n        invalidValues: (Optional) Specifies values to be considered invalid for\n                       the corresponding variables in 'checkVariables'.\n                       - Default: {NaN}\n                       - Can be a single value (e.g., a scalar, char, or string) to be\n                         applied as the invalid criterion for all 'checkVariables'.\n                       - Can be a cell array matching the size of 'checkVariables', where\n                         each cell specifies the invalid value for the corresponding variable.\n                       - To check for empty values, use [] in a cell (e.g., {[]}). This\n                         identifies empty cells ('') in a cell array column. For\n                         standard array columns (e.g., numeric), this check will not\n                         mark any rows as invalid.\n\n    OUTPUT ARGUMENTS:\n        validInd: A logical column vector where 'true' indicates a valid row.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Btable/join.m/","title":"ndi.fun.table.join","text":"<pre><code>  JOIN Combines two or more tables using common variables as keys, with custom aggregation.\n\n    COMBINEDTABLE = JOIN(TABLES)\n    COMBINEDTABLE = JOIN(TABLES, uniqueVariables=VARIABLE_NAMES)\n\n    Combines a cell array of tables (TABLES) into a single table. The tables\n    are joined using all common variables as keys.\n\n    An optional 'uniqueVariables' parameter can be used to specify column\n    names for which only unique values should be kept per aggregated row.\n    Any duplicate rows (based on the 'uniqueVariables') are combined by\n    aggregating the values of other columns into comma-separated strings.\n    Numeric values are converted to strings for aggregation unless they\n    result in a single unique numeric value, in which case the number is\n    retained.\n\n    Inputs:\n        TABLES - A cell array of MATLAB table objects, e.g., {table1, table2, ...}.\n                 Must be non-empty and contain only table objects.\n\n    Optional Name-Value Pair Arguments (passed in an 'options' struct or as name=value):\n        uniqueVariables - A character array or string array specifying the\n                          variable names that should have only unique values\n                          in the output table. Duplicate rows based on these\n                          variables will be collapsed, and values from other\n                          columns will be aggregated into comma-separated strings.\n                          If not provided or empty, no special aggregation\n                          for unique values is performed beyond the standard join.\n                          (default: '')\n\n    Outputs:\n        COMBINEDTABLE - The resulting combined and aggregated MATLAB table.\n\n    Example:\n       % Sample data\n       a = {1; 1; 2; 2};\n       c_t1 = {'a';'a';'b';'b'};\n       table1 = table(a,c_t1);\n       table1.Properties.VariableNames = {'a','c'}; % Ensure common variable name 'c'\n\n       b = {'a';'b';'a';'b'};\n       c_t2 = {'a';'a';'b';'b'};\n       table2 = table(b,c_t2);\n       table2.Properties.VariableNames = {'b','c'}; % Ensure common variable name 'c'\n\n       % Join and aggregate by 'c' using the new syntax\n       combinedTable = join({table1, table2}, uniqueVariables='c');\n\n       disp('Input Table 1:'); disp(table1);\n       disp('Input Table 2:'); disp(table2);\n       disp('Output Combined Table:'); disp(combinedTable);\n\n       % Example with no uniqueVariables specified (standard join result)\n       combinedTableNoAgg = join({table1, table2});\n       disp('Output Combined Table (No Aggregation):'); disp(combinedTableNoAgg);\n\n    See also: table, join, unique, strjoin, groupsummary\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Btable/moveColumnsLeft.m/","title":"ndi.fun.table.moveColumnsLeft","text":"<pre><code> MOVECOLUMNSLEFT Moves specified columns to the far left of a table.\n\n    dataTable = moveColumnsLeft(dataTable, columnNames) rearranges the\n    columns in the input table 'dataTable' so that the columns specified\n    in 'columnNames' are moved to the leftmost positions. The order of\n    the moved columns among themselves is preserved, as is the relative\n    order of the other columns.\n\n  Inputs:\n    dataTable - A MATLAB table. The table whose columns you want to rearrange.\n    columnNames - A string, character array, or cell array of strings\n                  containing the name(s) of the columns to be moved to the left.\n\n  Output:\n    dataTable - The modified table with the specified columns moved to the left.\n\n  See also: movevars, table\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bfun/%2Btable/vstack.m/","title":"ndi.fun.table.vstack","text":"<pre><code> VSTACK Vertically concatenates tables with dissimilar columns.\n    T_stacked = VSTACK(TABLESCELLARRAY) vertically concatenates a cell\n    array of tables into a single table. This function is designed to handle\n    tables that do not share the same set of variables (columns).\n\n    DESCRIPTION:\n    The function first determines the union of all variable names across all\n    tables. For each table, it then adds any missing columns, filling them\n    with an appropriate typed empty value (e.g., NaN for numeric, &lt;missing&gt;\n    for string/categorical, NaT for datetime). The function correctly\n    handles multi-column variables (e.g., a 10x3 position variable) and is\n    optimized for performance with large numbers of tables.\n\n    INPUTS:\n    tablesCellArray - A 1xN cell array where each element is a MATLAB table.\n\n    OUTPUTS:\n    T_stacked - A single table containing all rows from the input tables,\n                with a complete, unified set of columns.\n\n    EXAMPLES:\n    % Example 1: Basic concatenation of two tables with different columns.\n    T1 = table([1; 2], {'a'; 'b'}, 'VariableNames', {'ID', 'Data'});\n    T2 = table([3; 4], [10.5; 20.6], 'VariableNames', {'ID', 'Value'});\n    T_stacked = vstack({T1, T2})\n    % T_stacked will be a 4x3 table with columns: 'ID', 'Data', 'Value'\n\n    % Example 2: Handling logicals and multi-column variables.\n    T3 = table(true, 'VariableNames', {'LogicVar'});\n    T4 = table([1 1; 2 2], 'VariableNames', {'Position'});\n    T_stacked_2 = vstack({T3, T4})\n    % T_stacked_2 will be a 2x2 table. Note LogicVar is now double.\n\n    SEE ALSO:\n    vertcat, table, join, outerjoin\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Data.m/","title":"CLASS ndi.gui.Data","text":"<pre><code>ndi.gui.Data is a class.\n    obj = ndi.gui.Data\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Data.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Data.m/#properties","title":"Properties","text":"Property Description fullDocuments fullTable tempDocuments tempTable search table panel name info"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Data.m/#methods","title":"Methods","text":"Method Description Data ndi.gui.Data/Data is a constructor. addDoc ndi.gui.Data/addDoc is a function. addlistener addlistener  Add listener for event. clear Remove items from workspace, freeing up system memory delete DELETE   Delete a handle object. details Display array details eq == (EQ)   Test handle equality. filter 1-D digital filter findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. graph Graph with undirected edges gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. subgraph ndi.gui.Data/subgraph is a function."},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Data.m/#methods-help","title":"Methods help","text":"<p>Data - ndi.gui.Data/Data is a constructor.</p> <pre><code>obj = Data\n\n    Documentation for ndi.gui.Data/Data\n       doc ndi.gui.Data\n</code></pre> <p>addDoc - ndi.gui.Data/addDoc is a function.</p> <pre><code>addDoc(obj, docs)\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.gui.data, matlab.metadata.Property, events\n\nHelp for ndi.gui.Data/addlistener is inherited from superclass handle\n</code></pre> <p>clear - Remove items from workspace, freeing up system memory</p> <pre><code>This MATLAB function removes all variables from the current workspace,\n    releasing them from system memory.\n\n    Syntax\n      clear\n      clear name1 ... nameN\n      clear -regexp expr1 ... exprN\n      clear ItemType\n\n    Input Arguments\n      name1 ... nameN - Names of variables, scripts, functions, or MEX functions to clear\n        character vectors | string scalars\n      expr1 ... exprN - Regular expressions matching names of variables to clear\n        character vectors | string scalars\n      ItemType - Type of items to clear\n        all | classes | functions | global | import | java | mex | variables\n\n    Examples\n      openExample('matlab/ClearASingleVariableExample')\n      openExample('matlab/ClearSpecificVariablesbyNameExample')\n      openExample('matlab/ClearSetOfVariablesExample')\n      openExample('matlab/ClearAllCompiledScriptsFunctionsandMEXfunctionsExample')\n\n    See also clc, clearvars, delete, import, inmem, load, mlock, whos\n\n    Introduced in MATLAB before R2006a\n    Documentation for clear\n       doc clear\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.GUI.DATA, NDI.GUI.DATA/ISVALID, CLEAR\n\nHelp for ndi.gui.Data/delete is inherited from superclass handle\n</code></pre> <p>details - Display array details</p> <pre><code>This MATLAB function displays detailed information about the array, A.\n\n    Syntax\n      details(A)\n\n    Input Arguments\n      A - Input array\n        scalar or nonscalar array of any type\n\n    Examples\n      web /Applications/MATLAB_R2024b.app/help/matlab/ref/details.html#bt8wlxq-2\n\n    See also classdef, disp\n\n    Introduced in MATLAB in R2013b\n    Documentation for details\n       doc details\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.DATA, NDI.GUI.DATA/GE, NDI.GUI.DATA/GT, NDI.GUI.DATA/LE, NDI.GUI.DATA/LT, NDI.GUI.DATA/NE\n\nHelp for ndi.gui.Data/eq is inherited from superclass handle\n</code></pre> <p>filter - 1-D digital filter</p> <pre><code>This MATLAB function filters the input data x using a rational transfer\n    function defined by the numerator and denominator coefficients b and a.\n\n    Syntax\n      y = filter(b,a,x)\n      y = filter(b,a,x,zi)\n      y = filter(b,a,x,zi,dim)\n      [y,zf] = filter(___)\n\n    Input Arguments\n      b - Numerator coefficients of rational transfer function\n        vector\n      a - Denominator coefficients of rational transfer function\n        vector\n      x - Input data\n        vector | matrix | multidimensional array\n      zi - Initial conditions for filter delays\n        [] (default) | vector | matrix | multidimensional array\n      dim - Dimension to operate along\n        positive integer scalar\n\n    Output Arguments\n      y - Filtered data\n        vector | matrix | multidimensional array\n      zf - Final conditions for filter delays\n        vector | matrix | multidimensional array\n\n    Examples\n      openExample('matlab/MovingAverageFilterOfVectorDataExample')\n      openExample('matlab/FilterMatrixRowsExample')\n      openExample('matlab/SpecifyInitialConditionsExample')\n      openExample('matlab/FilterDataInSectionsExample')\n\n    See also conv, filter2\n\n    Introduced in MATLAB before R2006a\n    Documentation for filter\n       doc filter\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.GUI.DATA\n\nHelp for ndi.gui.Data/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.gui.data, ndi.gui.data/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.gui.Data/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.DATA, NDI.GUI.DATA/EQ, NDI.GUI.DATA/GT, NDI.GUI.DATA/LE, NDI.GUI.DATA/LT, NDI.GUI.DATA/NE\n\nHelp for ndi.gui.Data/ge is inherited from superclass handle\n</code></pre> <p>graph - Graph with undirected edges</p> <pre><code>graph objects represent undirected graphs, which have direction-less\n    edges connecting the nodes.\n\n    Creation\n      Syntax\n        G = graph\n\n        G = graph(A)\n        G = graph(A,nodenames)\n        G = graph(A,NodeTable)\n        G = graph(A,___,type)\n        G = graph(A,___,'omitselfloops')\n\n        G = graph(s,t)\n        G = graph(s,t,weights)\n        G = graph(s,t,weights,nodenames)\n        G = graph(s,t,weights,NodeTable)\n        G = graph(s,t,weights,num)\n        G = graph(s,t,___,'omitselfloops')\n        G = graph(s,t,EdgeTable,___)\n\n        G = graph(EdgeTable)\n        G = graph(EdgeTable,NodeTable)\n        G = graph(EdgeTable,___,'omitselfloops')\n\n      Input Arguments\n        A - Adjacency matrix\n          matrix\n        nodenames - Node names\n          cell array of character vectors | string array\n        type - Type of adjacency matrix\n          'upper' | 'lower'\n        s,t - Node pairs (as separate arguments)\n          node indices | node names\n        weights - Edge weights\n          scalar | vector | matrix | multidimensional array | []\n        num - Number of graph nodes\n          positive scalar integer\n        EdgeTable - Table of edge information\n          table\n        NodeTable - Table of node information\n          table\n\n    Properties\n      Edges - Edges of graph\n        table\n      Nodes - Nodes of graph\n        table\n\n    Object Functions\n      layoutcoords     - Graph node and edge layout coordinates\n      simplify         - Reduce multigraph to simple graph\n      ismultigraph     - Determine whether graph has multiple edges\n      edgecount        - Number of edges between two nodes\n      isisomorphic     - Determine whether two graphs are isomorphic\n      isomorphism      - Compute isomorphism between two graphs\n      nearest          - Nearest neighbors within radius\n      centrality       - Measure node importance\n      minspantree      - Minimum spanning tree of graph\n      maxflow          - Maximum flow in graph\n      dfsearch         - Depth-first graph search\n      bfsearch         - Breadth-first graph search\n      bctree           - Block-cut tree graph\n      biconncomp       - Biconnected graph components\n      conncomp         - Connected graph components\n      subgraph         - Extract subgraph\n      reordernodes     - Reorder graph nodes\n      shortestpathtree - Shortest path tree from node\n      shortestpath     - Shortest path between two single nodes\n      distances        - Shortest path distances of all node pairs\n      laplacian        - Graph Laplacian matrix\n      incidence        - Graph incidence matrix\n      adjacency        - Graph adjacency matrix\n      rmedge           - Remove edge from graph\n      addedge          - Add new edge to graph\n      findedge         - Locate edge in graph\n      numedges         - Number of edges in graph\n      outedges         - Outgoing edges from node\n      neighbors        - Neighbors of graph node\n      degree           - Degree of graph nodes\n      rmnode           - Remove node from graph\n      addnode          - Add new node to graph\n      findnode         - Locate node in graph\n      numnodes         - Number of nodes in graph\n      allcycles        - Find all cycles in graph\n      allpaths         - Find all paths between two graph nodes\n      cyclebasis       - Fundamental cycle basis of graph\n      hascycles        - Determine whether graph contains cycles\n      plot             - Plot graph nodes and edges\n\n    Examples\n      openExample('matlab/CreateAndModifyGraphObjectExample')\n      openExample('matlab/AdjacencyMatrixGraphConstructionExample')\n      openExample('matlab/AdjacencyMatrixConstructionWithNodeNamesExample')\n      openExample('matlab/EdgeListGraphConstructionExample')\n      openExample('matlab/EdgeListGraphConstructionWithNodeNamesAndEdgeWeightsExample')\n      openExample('matlab/EdgeListConstructionWithExtraNodesExample')\n      openExample('matlab/AddNodesAndEdgesToEmptyGraphExample')\n      openExample('matlab/GraphConstructionWithTablesExample')\n\n    See also digraph, subgraph\n\n    Introduced in MATLAB in R2015b\n    Documentation for graph\n       doc graph\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.DATA, NDI.GUI.DATA/EQ, NDI.GUI.DATA/GE, NDI.GUI.DATA/LE, NDI.GUI.DATA/LT, NDI.GUI.DATA/NE\n\nHelp for ndi.gui.Data/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.GUI.DATA, NDI.GUI.DATA/DELETE\n\nHelp for ndi.gui.Data/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.DATA, NDI.GUI.DATA/EQ, NDI.GUI.DATA/GE, NDI.GUI.DATA/GT, NDI.GUI.DATA/LT, NDI.GUI.DATA/NE\n\nHelp for ndi.gui.Data/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.gui.data, matlab.metadata.Property, events\n\nHelp for ndi.gui.Data/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.DATA, NDI.GUI.DATA/EQ, NDI.GUI.DATA/GE, NDI.GUI.DATA/GT, NDI.GUI.DATA/LE, NDI.GUI.DATA/NE\n\nHelp for ndi.gui.Data/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.GUI.DATA, NDI.GUI.DATA/EQ, NDI.GUI.DATA/GE, NDI.GUI.DATA/GT, NDI.GUI.DATA/LE, NDI.GUI.DATA/LT\n\nHelp for ndi.gui.Data/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.GUI.DATA, NDI.GUI.DATA/ADDLISTENER, NDI.GUI.DATA/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.gui.Data/notify is inherited from superclass handle\n</code></pre> <p>subgraph - ndi.gui.Data/subgraph is a function.</p> <pre><code>subgraph(obj, ~, ~, ind)\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Icon.m/","title":"CLASS ndi.gui.Icon","text":"<pre><code>ndi.gui.Icon is a class.\n    obj = ndi.gui.Icon(src, len, elem, hShift, vShift, w, h, color)\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Icon.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Icon.m/#properties","title":"Properties","text":"Property Description elem img rect term src w h x y c active tag"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Icon.m/#methods","title":"Methods","text":"Method Description Icon ndi.gui.Icon/Icon is a constructor. addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. upload ndi.gui.Icon/upload is a function."},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Icon.m/#methods-help","title":"Methods help","text":"<p>Icon - ndi.gui.Icon/Icon is a constructor.</p> <pre><code>obj = Icon(src, len, elem, hShift, vShift, w, h, color)\n\n    Documentation for ndi.gui.Icon/Icon\n       doc ndi.gui.Icon\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.gui.icon, matlab.metadata.Property, events\n\nHelp for ndi.gui.Icon/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.GUI.ICON, NDI.GUI.ICON/ISVALID, CLEAR\n\nHelp for ndi.gui.Icon/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.ICON, NDI.GUI.ICON/GE, NDI.GUI.ICON/GT, NDI.GUI.ICON/LE, NDI.GUI.ICON/LT, NDI.GUI.ICON/NE\n\nHelp for ndi.gui.Icon/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.GUI.ICON\n\nHelp for ndi.gui.Icon/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.gui.icon, ndi.gui.icon/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.gui.Icon/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.ICON, NDI.GUI.ICON/EQ, NDI.GUI.ICON/GT, NDI.GUI.ICON/LE, NDI.GUI.ICON/LT, NDI.GUI.ICON/NE\n\nHelp for ndi.gui.Icon/ge is inherited from superclass handle\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.ICON, NDI.GUI.ICON/EQ, NDI.GUI.ICON/GE, NDI.GUI.ICON/LE, NDI.GUI.ICON/LT, NDI.GUI.ICON/NE\n\nHelp for ndi.gui.Icon/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.GUI.ICON, NDI.GUI.ICON/DELETE\n\nHelp for ndi.gui.Icon/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.ICON, NDI.GUI.ICON/EQ, NDI.GUI.ICON/GE, NDI.GUI.ICON/GT, NDI.GUI.ICON/LT, NDI.GUI.ICON/NE\n\nHelp for ndi.gui.Icon/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.gui.icon, matlab.metadata.Property, events\n\nHelp for ndi.gui.Icon/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.ICON, NDI.GUI.ICON/EQ, NDI.GUI.ICON/GE, NDI.GUI.ICON/GT, NDI.GUI.ICON/LE, NDI.GUI.ICON/NE\n\nHelp for ndi.gui.Icon/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.GUI.ICON, NDI.GUI.ICON/EQ, NDI.GUI.ICON/GE, NDI.GUI.ICON/GT, NDI.GUI.ICON/LE, NDI.GUI.ICON/LT\n\nHelp for ndi.gui.Icon/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.GUI.ICON, NDI.GUI.ICON/ADDLISTENER, NDI.GUI.ICON/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.gui.Icon/notify is inherited from superclass handle\n</code></pre> <p>upload - ndi.gui.Icon/upload is a function.</p> <pre><code>upload(obj, ~, ~)\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Lab.m/","title":"CLASS ndi.gui.Lab","text":"<pre><code>ndi.gui.Lab is a class.\n    obj = ndi.gui.Lab\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Lab.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Lab.m/#properties","title":"Properties","text":"Property Description editable window panel info panelImage subjects probes DAQs drag dragPt moved back zIn zOut editBox editTxt connects wires row transmitting"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Lab.m/#methods","title":"Methods","text":"Method Description Lab ndi.gui.Lab/Lab is a constructor. addDAQ ndi.gui.Lab/addDAQ is a function. addProbe ndi.gui.Lab/addProbe is a function. addSubject ndi.gui.Lab/addSubject is a function. addlistener addlistener  Add listener for event. buttons ndi.gui.Lab/buttons is a function. connect Block diagram interconnections of dynamic systems cut ndi.gui.Lab/cut is a function. delete DELETE   Delete a handle object. details Display array details editCallback ndi.gui.Lab/editCallback is a function. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. grid Display or hide axes grid lines gt &gt; (GT)   Greater than relation for handles. iconCallback ndi.gui.Lab/iconCallback is a function. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. move ndi.gui.Lab/move is a function. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. setZoom ndi.gui.Lab/setZoom is a function. symbol ndi.gui.Lab/symbol is a function. updateConnections ndi.gui.Lab/updateConnections is a function."},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/Lab.m/#methods-help","title":"Methods help","text":"<p>Lab - ndi.gui.Lab/Lab is a constructor.</p> <pre><code>obj = Lab\n\n    Documentation for ndi.gui.Lab/Lab\n       doc ndi.gui.Lab\n</code></pre> <p>addDAQ - ndi.gui.Lab/addDAQ is a function.</p> <pre><code>addDAQ(obj, daq)\n</code></pre> <p>addProbe - ndi.gui.Lab/addProbe is a function.</p> <pre><code>addProbe(obj, prob)\n</code></pre> <p>addSubject - ndi.gui.Lab/addSubject is a function.</p> <pre><code>addSubject(obj, subj)\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.gui.lab, matlab.metadata.Property, events\n\nHelp for ndi.gui.Lab/addlistener is inherited from superclass handle\n</code></pre> <p>buttons - ndi.gui.Lab/buttons is a function.</p> <pre><code>buttons(obj)\n</code></pre> <p>connect - Block diagram interconnections of dynamic systems</p> <pre><code>This MATLAB function connects the models and block diagram elements\n    sys1,...sysN based on signal names.\n\n    Syntax\n      sysc = connect(sys1,...sysN,inputs,outputs)\n      sysc = connect(sys1,...sysN,inputs,outputs,APs)\n      sysc = connect(blksys,connections,inputs,outputs)\n      sysc = connect(___,opts)\n\n    Input Arguments\n      sys - Dynamic system model or other element to interconnect\n        LTI model object | control design block | AnalysisPoint block |\n        identified model | sparse model object | time-varying model object |\n        parameter-varying model object | time-varying model object\n      inputs - Inputs of combined model\n        character vector | cell array of character vectors | string |\n        string vector | positive integer | vector of positive integers\n      outputs - Outputs of combined model\n        character vector | cell array of character vectors | string |\n        string vector | positive integer | vector of positive integers\n      APs - Locations of interest in the combined model\n        character vector | cell array of character vectors | string |\n        string vector\n      blksys - Unconnected aggregate model\n        dynamic system model\n      connections - Connections and summing junctions\n        matrix\n      opts - Additional options for interconnection\n        connectOptions options set\n\n    Output Arguments\n      sysc - Interconnected system\n        state-space model | frequency-response data model\n\n    Examples\n      openExample('control/SISOControlSystemExample')\n      openExample('control/MIMOControlSystemExample')\n      openExample('control/FeedbackLoopWithAnalysisPointExample')\n      openExample('control/IndexBasedInterconnectionExample')\n      openExample('control/CombineTwoInterconnectedModelsWithAnalysisPointsExample')\n\n    See also sumblk, AnalysisPoint, append, feedback, parallel, series, lft,\n      connectOptions\n\n    Introduced in Control System Toolbox before R2006a\n    Documentation for connect\n       doc connect\n</code></pre> <p>cut - ndi.gui.Lab/cut is a function.</p> <pre><code>cut(obj, src, ~)\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.GUI.LAB, NDI.GUI.LAB/ISVALID, CLEAR\n\nHelp for ndi.gui.Lab/delete is inherited from superclass handle\n</code></pre> <p>details - Display array details</p> <pre><code>This MATLAB function displays detailed information about the array, A.\n\n    Syntax\n      details(A)\n\n    Input Arguments\n      A - Input array\n        scalar or nonscalar array of any type\n\n    Examples\n      web /Applications/MATLAB_R2024b.app/help/matlab/ref/details.html#bt8wlxq-2\n\n    See also classdef, disp\n\n    Introduced in MATLAB in R2013b\n    Documentation for details\n       doc details\n</code></pre> <p>editCallback - ndi.gui.Lab/editCallback is a function.</p> <pre><code>editCallback(obj, ~, ~)\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.LAB, NDI.GUI.LAB/GE, NDI.GUI.LAB/GT, NDI.GUI.LAB/LE, NDI.GUI.LAB/LT, NDI.GUI.LAB/NE\n\nHelp for ndi.gui.Lab/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.GUI.LAB\n\nHelp for ndi.gui.Lab/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.gui.lab, ndi.gui.lab/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.gui.Lab/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.LAB, NDI.GUI.LAB/EQ, NDI.GUI.LAB/GT, NDI.GUI.LAB/LE, NDI.GUI.LAB/LT, NDI.GUI.LAB/NE\n\nHelp for ndi.gui.Lab/ge is inherited from superclass handle\n</code></pre> <p>grid - Display or hide axes grid lines</p> <pre><code>This MATLAB function displays the major grid lines for the current axes\n    returned by the gca command.\n\n    Syntax\n      grid on\n      grid off\n      grid\n      grid minor\n      grid(visibility)\n      grid(target,___)\n\n    Input Arguments\n      visibility - Grid visibility\n        \"on\" | \"off\" | true or 1 | false or 0 | OnOffSwitchState value\n      target - Target object\n        axes | standalone visualization |\n        array of axes or standalone visualizations\n\n    Examples\n      openExample('graphics/DisplayGridLines1Example')\n      openExample('graphics/RemoveGridLinesExample')\n      openExample('graphics/DisplayMajorMinorGridLinesExample')\n      openExample('graphics/GridSpecificAxesExample')\n\n    See also axis, box, title, xlabel, ylabel, legend, Axes Properties,\n      PolarAxes Properties, GeographicAxes Properties,\n      matlab.lang.OnOffSwitchState\n\n    Introduced in MATLAB before R2006a\n    Documentation for grid\n       doc grid\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.LAB, NDI.GUI.LAB/EQ, NDI.GUI.LAB/GE, NDI.GUI.LAB/LE, NDI.GUI.LAB/LT, NDI.GUI.LAB/NE\n\nHelp for ndi.gui.Lab/gt is inherited from superclass handle\n</code></pre> <p>iconCallback - ndi.gui.Lab/iconCallback is a function.</p> <pre><code>iconCallback(obj, ~, ~, src)\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.GUI.LAB, NDI.GUI.LAB/DELETE\n\nHelp for ndi.gui.Lab/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.LAB, NDI.GUI.LAB/EQ, NDI.GUI.LAB/GE, NDI.GUI.LAB/GT, NDI.GUI.LAB/LT, NDI.GUI.LAB/NE\n\nHelp for ndi.gui.Lab/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.gui.lab, matlab.metadata.Property, events\n\nHelp for ndi.gui.Lab/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.LAB, NDI.GUI.LAB/EQ, NDI.GUI.LAB/GE, NDI.GUI.LAB/GT, NDI.GUI.LAB/LE, NDI.GUI.LAB/NE\n\nHelp for ndi.gui.Lab/lt is inherited from superclass handle\n</code></pre> <p>move - ndi.gui.Lab/move is a function.</p> <pre><code>move(obj, ~, ~)\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.GUI.LAB, NDI.GUI.LAB/EQ, NDI.GUI.LAB/GE, NDI.GUI.LAB/GT, NDI.GUI.LAB/LE, NDI.GUI.LAB/LT\n\nHelp for ndi.gui.Lab/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.GUI.LAB, NDI.GUI.LAB/ADDLISTENER, NDI.GUI.LAB/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.gui.Lab/notify is inherited from superclass handle\n</code></pre> <p>setZoom - ndi.gui.Lab/setZoom is a function.</p> <pre><code>setZoom(obj, ~, ~, z)\n</code></pre> <p>symbol - ndi.gui.Lab/symbol is a function.</p> <pre><code>symbol(obj, src)\n</code></pre> <p>updateConnections - ndi.gui.Lab/updateConnections is a function.</p> <pre><code>updateConnections(obj)\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/docViewer.m/","title":"CLASS ndi.gui.docViewer","text":"<pre><code>  table2list\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/docViewer.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/docViewer.m/#properties","title":"Properties","text":"Property Description fullDocuments fullTable tempDocuments tempTable search table panel info docs fig"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/docViewer.m/#methods","title":"Methods","text":"Method Description addDoc Todo: needs documentation addlistener addlistener  Add listener for event. clearView ndi.gui.docViewer/clearView is a function. contentSearch ndi.gui.docViewer/contentSearch is a function. delete DELETE   Delete a handle object. details Display array details docViewer table2list eq == (EQ)   Test handle equality. filter 1-D digital filter filterHelper ndi.gui.docViewer/filterHelper is a function. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. graph Graph with undirected edges gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. restore Todo: needs documentation; are we restoring the view or the underlying data? searchFieldName ndi.gui.docViewer/searchFieldName is a function. searchID ndi.gui.docViewer/searchID is a function. subgraph ndi.gui.docViewer/subgraph is a function."},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/docViewer.m/#methods-help","title":"Methods help","text":"<p>addDoc - Todo: needs documentation</p> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.gui.docviewer, matlab.metadata.Property, events\n\nHelp for ndi.gui.docViewer/addlistener is inherited from superclass handle\n</code></pre> <p>clearView - ndi.gui.docViewer/clearView is a function.</p> <pre><code>clearView(obj, ~, ~)\n</code></pre> <p>contentSearch - ndi.gui.docViewer/contentSearch is a function.</p> <pre><code>contentSearch(obj, fieldValue, data)\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/ISVALID, CLEAR\n\nHelp for ndi.gui.docViewer/delete is inherited from superclass handle\n</code></pre> <p>details - Display array details</p> <pre><code>This MATLAB function displays detailed information about the array, A.\n\n    Syntax\n      details(A)\n\n    Input Arguments\n      A - Input array\n        scalar or nonscalar array of any type\n\n    Examples\n      web /Applications/MATLAB_R2024b.app/help/matlab/ref/details.html#bt8wlxq-2\n\n    See also classdef, disp\n\n    Introduced in MATLAB in R2013b\n    Documentation for details\n       doc details\n</code></pre> <p>docViewer - table2list</p> <pre><code>Documentation for ndi.gui.docViewer/docViewer\n       doc ndi.gui.docViewer\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/GE, NDI.GUI.DOCVIEWER/GT, NDI.GUI.DOCVIEWER/LE, NDI.GUI.DOCVIEWER/LT, NDI.GUI.DOCVIEWER/NE\n\nHelp for ndi.gui.docViewer/eq is inherited from superclass handle\n</code></pre> <p>filter - 1-D digital filter</p> <pre><code>This MATLAB function filters the input data x using a rational transfer\n    function defined by the numerator and denominator coefficients b and a.\n\n    Syntax\n      y = filter(b,a,x)\n      y = filter(b,a,x,zi)\n      y = filter(b,a,x,zi,dim)\n      [y,zf] = filter(___)\n\n    Input Arguments\n      b - Numerator coefficients of rational transfer function\n        vector\n      a - Denominator coefficients of rational transfer function\n        vector\n      x - Input data\n        vector | matrix | multidimensional array\n      zi - Initial conditions for filter delays\n        [] (default) | vector | matrix | multidimensional array\n      dim - Dimension to operate along\n        positive integer scalar\n\n    Output Arguments\n      y - Filtered data\n        vector | matrix | multidimensional array\n      zf - Final conditions for filter delays\n        vector | matrix | multidimensional array\n\n    Examples\n      openExample('matlab/MovingAverageFilterOfVectorDataExample')\n      openExample('matlab/FilterMatrixRowsExample')\n      openExample('matlab/SpecifyInitialConditionsExample')\n      openExample('matlab/FilterDataInSectionsExample')\n\n    See also conv, filter2\n\n    Introduced in MATLAB before R2006a\n    Documentation for filter\n       doc filter\n</code></pre> <p>filterHelper - ndi.gui.docViewer/filterHelper is a function.</p> <pre><code>filterHelper(obj, search1, search2, searchStr)\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.GUI.DOCVIEWER\n\nHelp for ndi.gui.docViewer/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.gui.docviewer, ndi.gui.docviewer/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.gui.docViewer/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/EQ, NDI.GUI.DOCVIEWER/GT, NDI.GUI.DOCVIEWER/LE, NDI.GUI.DOCVIEWER/LT, NDI.GUI.DOCVIEWER/NE\n\nHelp for ndi.gui.docViewer/ge is inherited from superclass handle\n</code></pre> <p>graph - Graph with undirected edges</p> <pre><code>graph objects represent undirected graphs, which have direction-less\n    edges connecting the nodes.\n\n    Creation\n      Syntax\n        G = graph\n\n        G = graph(A)\n        G = graph(A,nodenames)\n        G = graph(A,NodeTable)\n        G = graph(A,___,type)\n        G = graph(A,___,'omitselfloops')\n\n        G = graph(s,t)\n        G = graph(s,t,weights)\n        G = graph(s,t,weights,nodenames)\n        G = graph(s,t,weights,NodeTable)\n        G = graph(s,t,weights,num)\n        G = graph(s,t,___,'omitselfloops')\n        G = graph(s,t,EdgeTable,___)\n\n        G = graph(EdgeTable)\n        G = graph(EdgeTable,NodeTable)\n        G = graph(EdgeTable,___,'omitselfloops')\n\n      Input Arguments\n        A - Adjacency matrix\n          matrix\n        nodenames - Node names\n          cell array of character vectors | string array\n        type - Type of adjacency matrix\n          'upper' | 'lower'\n        s,t - Node pairs (as separate arguments)\n          node indices | node names\n        weights - Edge weights\n          scalar | vector | matrix | multidimensional array | []\n        num - Number of graph nodes\n          positive scalar integer\n        EdgeTable - Table of edge information\n          table\n        NodeTable - Table of node information\n          table\n\n    Properties\n      Edges - Edges of graph\n        table\n      Nodes - Nodes of graph\n        table\n\n    Object Functions\n      layoutcoords     - Graph node and edge layout coordinates\n      simplify         - Reduce multigraph to simple graph\n      ismultigraph     - Determine whether graph has multiple edges\n      edgecount        - Number of edges between two nodes\n      isisomorphic     - Determine whether two graphs are isomorphic\n      isomorphism      - Compute isomorphism between two graphs\n      nearest          - Nearest neighbors within radius\n      centrality       - Measure node importance\n      minspantree      - Minimum spanning tree of graph\n      maxflow          - Maximum flow in graph\n      dfsearch         - Depth-first graph search\n      bfsearch         - Breadth-first graph search\n      bctree           - Block-cut tree graph\n      biconncomp       - Biconnected graph components\n      conncomp         - Connected graph components\n      subgraph         - Extract subgraph\n      reordernodes     - Reorder graph nodes\n      shortestpathtree - Shortest path tree from node\n      shortestpath     - Shortest path between two single nodes\n      distances        - Shortest path distances of all node pairs\n      laplacian        - Graph Laplacian matrix\n      incidence        - Graph incidence matrix\n      adjacency        - Graph adjacency matrix\n      rmedge           - Remove edge from graph\n      addedge          - Add new edge to graph\n      findedge         - Locate edge in graph\n      numedges         - Number of edges in graph\n      outedges         - Outgoing edges from node\n      neighbors        - Neighbors of graph node\n      degree           - Degree of graph nodes\n      rmnode           - Remove node from graph\n      addnode          - Add new node to graph\n      findnode         - Locate node in graph\n      numnodes         - Number of nodes in graph\n      allcycles        - Find all cycles in graph\n      allpaths         - Find all paths between two graph nodes\n      cyclebasis       - Fundamental cycle basis of graph\n      hascycles        - Determine whether graph contains cycles\n      plot             - Plot graph nodes and edges\n\n    Examples\n      openExample('matlab/CreateAndModifyGraphObjectExample')\n      openExample('matlab/AdjacencyMatrixGraphConstructionExample')\n      openExample('matlab/AdjacencyMatrixConstructionWithNodeNamesExample')\n      openExample('matlab/EdgeListGraphConstructionExample')\n      openExample('matlab/EdgeListGraphConstructionWithNodeNamesAndEdgeWeightsExample')\n      openExample('matlab/EdgeListConstructionWithExtraNodesExample')\n      openExample('matlab/AddNodesAndEdgesToEmptyGraphExample')\n      openExample('matlab/GraphConstructionWithTablesExample')\n\n    See also digraph, subgraph\n\n    Introduced in MATLAB in R2015b\n    Documentation for graph\n       doc graph\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/EQ, NDI.GUI.DOCVIEWER/GE, NDI.GUI.DOCVIEWER/LE, NDI.GUI.DOCVIEWER/LT, NDI.GUI.DOCVIEWER/NE\n\nHelp for ndi.gui.docViewer/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/DELETE\n\nHelp for ndi.gui.docViewer/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/EQ, NDI.GUI.DOCVIEWER/GE, NDI.GUI.DOCVIEWER/GT, NDI.GUI.DOCVIEWER/LT, NDI.GUI.DOCVIEWER/NE\n\nHelp for ndi.gui.docViewer/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.gui.docviewer, matlab.metadata.Property, events\n\nHelp for ndi.gui.docViewer/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/EQ, NDI.GUI.DOCVIEWER/GE, NDI.GUI.DOCVIEWER/GT, NDI.GUI.DOCVIEWER/LE, NDI.GUI.DOCVIEWER/NE\n\nHelp for ndi.gui.docViewer/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/EQ, NDI.GUI.DOCVIEWER/GE, NDI.GUI.DOCVIEWER/GT, NDI.GUI.DOCVIEWER/LE, NDI.GUI.DOCVIEWER/LT\n\nHelp for ndi.gui.docViewer/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.GUI.DOCVIEWER, NDI.GUI.DOCVIEWER/ADDLISTENER, NDI.GUI.DOCVIEWER/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.gui.docViewer/notify is inherited from superclass handle\n</code></pre> <p>restore - Todo: needs documentation; are we restoring the view or the underlying data?</p> <pre><code>\n</code></pre> <p>searchFieldName - ndi.gui.docViewer/searchFieldName is a function.</p> <pre><code>searchFieldName(obj, ~, ~, fieldName)\n</code></pre> <p>searchID - ndi.gui.docViewer/searchID is a function.</p> <pre><code>searchID(obj, list_ID)\n</code></pre> <p>subgraph - ndi.gui.docViewer/subgraph is a function.</p> <pre><code>subgraph(obj, ~, ~, ind)\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/gui.m/","title":"ndi.gui.gui","text":"<pre><code>  GUI - A gui to display the contents of an NDI_SESSION\n\n   ndi.gui.gui(NDI_SESSION_OBJ)\n\n   Brings up a graphical user interface to view the ndi.session\n   NDI_SESSION_OBJ\n\n   See also: ndi.session\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/gui_v2.m/","title":"ndi.gui.gui_v2","text":"<pre><code>ndi.gui.gui_v2 is a function.\n    ndi.gui.gui_v2(ndi_session_obj)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/CommandWindowProgressMonitor.m/","title":"CLASS ndi.gui.component.CommandWindowProgressMonitor","text":"<pre><code>ndi.gui.component.CommandWindowProgressMonitor is a class.\n    obj = ndi.gui.component.CommandWindowProgressMonitor\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/CommandWindowProgressMonitor.m/#superclasses","title":"Superclasses","text":"<p>ndi.gui.component.abstract.ProgressMonitor, handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/CommandWindowProgressMonitor.m/#properties","title":"Properties","text":"Property Description IndentSize ShowTimeStamp TimeStampFormat UpdateInplace Title UpdateInterval ProgressTracker DisplayElapsedTime DisplayRemainingTime RemainingTimeFormat"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/CommandWindowProgressMonitor.m/#methods","title":"Methods","text":"Method Description CommandWindowProgressMonitor ndi.gui.component.CommandWindowProgressMonitor/CommandWindowProgressMonitor is a constructor. addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. markComplete Note: Using markComplete method to trigger event to run ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. reset Reset graphics object properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/CommandWindowProgressMonitor.m/#methods-help","title":"Methods help","text":"<p>CommandWindowProgressMonitor - ndi.gui.component.CommandWindowProgressMonitor/CommandWindowProgressMonitor is a constructor.</p> <pre><code>obj = ndi.gui.component.CommandWindowProgressMonitor\n\n    Documentation for ndi.gui.component.CommandWindowProgressMonitor/CommandWindowProgressMonitor\n       doc ndi.gui.component.CommandWindowProgressMonitor\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.gui.component.commandwindowprogressmonitor, matlab.metadata.Property, events\n\nHelp for ndi.gui.component.CommandWindowProgressMonitor/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/ISVALID, CLEAR\n\nHelp for ndi.gui.component.CommandWindowProgressMonitor/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/NE\n\nHelp for ndi.gui.component.CommandWindowProgressMonitor/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR\n\nHelp for ndi.gui.component.CommandWindowProgressMonitor/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.gui.component.commandwindowprogressmonitor, ndi.gui.component.commandwindowprogressmonitor/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.gui.component.CommandWindowProgressMonitor/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/NE\n\nHelp for ndi.gui.component.CommandWindowProgressMonitor/ge is inherited from superclass handle\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/NE\n\nHelp for ndi.gui.component.CommandWindowProgressMonitor/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/DELETE\n\nHelp for ndi.gui.component.CommandWindowProgressMonitor/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/NE\n\nHelp for ndi.gui.component.CommandWindowProgressMonitor/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.gui.component.commandwindowprogressmonitor, matlab.metadata.Property, events\n\nHelp for ndi.gui.component.CommandWindowProgressMonitor/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/NE\n\nHelp for ndi.gui.component.CommandWindowProgressMonitor/lt is inherited from superclass handle\n</code></pre> <p>markComplete - Note: Using markComplete method to trigger event to run</p> <pre><code>methods of this class. Todo: Can it be simplified?\n\nHelp for ndi.gui.component.CommandWindowProgressMonitor/markComplete is inherited from superclass ndi.gui.component.abstract.ProgressMonitor\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/GT, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LE, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LT\n\nHelp for ndi.gui.component.CommandWindowProgressMonitor/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/ADDLISTENER, NDI.GUI.COMPONENT.COMMANDWINDOWPROGRESSMONITOR/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.gui.component.CommandWindowProgressMonitor/notify is inherited from superclass handle\n</code></pre> <p>reset - Reset graphics object properties</p> <pre><code>This MATLAB function resets all of the properties of the specified\n    graphics object to their default values.\n\n    Syntax\n      reset(h)\n\n    Input Arguments\n      h - Graphics objects\n        single object | vector of objects\n\n    Examples\n      openExample('graphics/ResetAxesAndFigurePropertiesExample')\n\n    See also get, set, cla, clf, gca, gcf, hold\n\n    Introduced in MATLAB before R2006a\n    Documentation for reset\n       doc reset\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/NDIProgressBar.m/","title":"CLASS ndi.gui.component.NDIProgressBar","text":"<pre><code>  NDIProgressBar - Progress monitor with NDI-styled progress bar\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/NDIProgressBar.m/#superclasses","title":"Superclasses","text":"<p>ndi.gui.component.abstract.ProgressMonitor, handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/NDIProgressBar.m/#properties","title":"Properties","text":"Property Description Value Message Size Location ShowPercent Text BorderWidth Title UpdateInterval ProgressTracker DisplayElapsedTime DisplayRemainingTime RemainingTimeFormat"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/NDIProgressBar.m/#methods","title":"Methods","text":"Method Description NDIProgressBar Create an NDI progress bar object addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. markComplete Note: Using markComplete method to trigger event to run ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. reset Reset graphics object properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/NDIProgressBar.m/#methods-help","title":"Methods help","text":"<p>NDIProgressBar - Create an NDI progress bar object</p> <pre><code>Documentation for ndi.gui.component.NDIProgressBar/NDIProgressBar\n       doc ndi.gui.component.NDIProgressBar\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.gui.component.ndiprogressbar, matlab.metadata.Property, events\n\nHelp for ndi.gui.component.NDIProgressBar/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/ISVALID, CLEAR\n\nHelp for ndi.gui.component.NDIProgressBar/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/NE\n\nHelp for ndi.gui.component.NDIProgressBar/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.GUI.COMPONENT.NDIPROGRESSBAR\n\nHelp for ndi.gui.component.NDIProgressBar/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.gui.component.ndiprogressbar, ndi.gui.component.ndiprogressbar/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.gui.component.NDIProgressBar/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/EQ, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/NE\n\nHelp for ndi.gui.component.NDIProgressBar/ge is inherited from superclass handle\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/EQ, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/NE\n\nHelp for ndi.gui.component.NDIProgressBar/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/DELETE\n\nHelp for ndi.gui.component.NDIProgressBar/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/EQ, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/NE\n\nHelp for ndi.gui.component.NDIProgressBar/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.gui.component.ndiprogressbar, matlab.metadata.Property, events\n\nHelp for ndi.gui.component.NDIProgressBar/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/EQ, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/NE\n\nHelp for ndi.gui.component.NDIProgressBar/lt is inherited from superclass handle\n</code></pre> <p>markComplete - Note: Using markComplete method to trigger event to run</p> <pre><code>methods of this class. Todo: Can it be simplified?\n\nHelp for ndi.gui.component.NDIProgressBar/markComplete is inherited from superclass ndi.gui.component.abstract.ProgressMonitor\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/EQ, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/GT, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LE, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LT\n\nHelp for ndi.gui.component.NDIProgressBar/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.GUI.COMPONENT.NDIPROGRESSBAR, NDI.GUI.COMPONENT.NDIPROGRESSBAR/ADDLISTENER, NDI.GUI.COMPONENT.NDIPROGRESSBAR/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.gui.component.NDIProgressBar/notify is inherited from superclass handle\n</code></pre> <p>reset - Reset graphics object properties</p> <pre><code>This MATLAB function resets all of the properties of the specified\n    graphics object to their default values.\n\n    Syntax\n      reset(h)\n\n    Input Arguments\n      h - Graphics objects\n        single object | vector of objects\n\n    Examples\n      openExample('graphics/ResetAxesAndFigurePropertiesExample')\n\n    See also get, set, cla, clf, gca, gcf, hold\n\n    Introduced in MATLAB before R2006a\n    Documentation for reset\n       doc reset\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/ProgressBarWindow.m/","title":"CLASS ndi.gui.component.ProgressBarWindow","text":"<pre><code> ProgressBarWindow Creates and manages a progress bar figure.\n\n    This class provides a graphical user interface (GUI) to display\n    one or more progress bars in a single figure. It allows for adding,\n    updating, and removing progress bars dynamically. Each bar displays\n    progress as a percentage, a visual bar, an estimated time remaining,\n    and provides a button to close it. The window can be configured to \n    automatically close bars upon completion or timeout.\n\n    Usage Example 1:\n        app = ndi.gui.component.ProgressBarWindow('Import Dataset'); % Create a window\n        app.addBar('Label','Create Session(s)','Tag','session'); % Add a bar\n        app.updateBar('session',0.5); % Update the bar's progress\n\n    Usage Example 2 (auto close, uuid):\n        app = ndi.gui.component.ProgressBarWindow(); % Create a window\n        uuid = did.ido.unique;\n        app.addBar('Label','Save document(s)','Tag',uuid,'Auto',true); % Add a bar\n        app.updateBar(uuid,0.5) % Update the bar's progress\n\n    See also: uifigure, uigridlayout, uiaxes, patch, uilabel, uibutton\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/ProgressBarWindow.m/#superclasses","title":"Superclasses","text":"<p>matlab.apps.AppBase, handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/ProgressBarWindow.m/#properties","title":"Properties","text":"Property Description ProgressFigure ProgressGrid ProgressBars"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/ProgressBarWindow.m/#methods","title":"Methods","text":"Method Description ProgressBarWindow ProgressBarWindow Constructor for the progress bar window. addBar addBar Adds a new progress bar to the window. addlistener addlistener  Add listener for event. checkComplete checkComplete Checks for and flags bars that have reached 100%. checkTimeout checkTimeout Checks for and flags bars that have timed out. delete DELETE   Delete a handle object. deleteIfNoOpenBars delete the app if there are no open bars eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. getBarNum getBarNum Finds the index of a bar given its ID (index or Tag). getState getState Returns the state of a specific bar. gt &gt; (GT)   Greater than relation for handles. handleAppChange handleAppChange Listener callback for property changes. handleButtonPress handleButtonPress Callback for the close button on each bar. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. loadobj Loading an instance of an app object is not supported. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. removeBar removeBar Removes a specific progress bar from the window. saveobj Saving an instance of an app object is not supported. setFigureSize setFigureSize Adjusts the figure height based on bar content. setFigureTitle setFigureTitle Sets the title of the progress bar window. setTimeout setTimeout Sets the timeout duration. updateBar updateBar Updates the progress of a specific bar."},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/ProgressBarWindow.m/#methods-help","title":"Methods help","text":"<p>ProgressBarWindow - ProgressBarWindow Constructor for the progress bar window.</p> <pre><code>APP = PROGRESSBARWINDOW(TITLE, OPTIONS) creates a new \n    progress bar window or returns a handle to an existing one.\n\n    Inputs:\n        title - The title to display on the figure window.\n                    Defaults to ''.\n\n    Optional Name-Value Arguments:\n        Overwrite - If true, closes any existing progress bar window\n                    with the same title. If false, returns the handle\n                    to the existing window. Defaults to false.\n        GrabMostRecent - If true, will search open figures for the\n                    most recently created progress bar window. Uses\n                    this handle if no figure with matching title is\n                    found or IgnoreTitle is true. Defaults to true.\n        IgnoreTitle - If true, will return the most recently created\n                    progress bar window regardless of its title.\n                    Defaults to false.\n        AutoDelete - If true, automatically closes the progress bar\n                    figure and deletes the app handle when there are\n                    no more progress bars remaining in the window.\n                    Defaults to true.\n\n    Outputs:\n        app - The handle to the created or existing app instance.\n\n    Documentation for ndi.gui.component.ProgressBarWindow/ProgressBarWindow\n       doc ndi.gui.component.ProgressBarWindow\n</code></pre> <p>addBar - addBar Adds a new progress bar to the window.</p> <pre><code>APP = ADDBAR(APP, OPTIONS) adds a new row to the progress\n    bar window with a new progress bar.\n\n    Inputs:\n        app - The app instance.\n\n    Optional Name-Value Arguments:\n        Label - Text label displayed above the bar. Defaults to ''.\n        Tag - A unique identifier for this bar. Defaults to the Label if empty.\n        Color - RGB color for the progress bar. Defaults to a random color.\n        Auto - If true, automatically removes the bar when complete or timed out.\n               Defaults to false.\n\n    Outputs:\n        app - The updated app instance.\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.gui.component.progressbarwindow, matlab.metadata.Property, events\n\nHelp for ndi.gui.component.ProgressBarWindow/addlistener is inherited from superclass handle\n</code></pre> <p>checkComplete - checkComplete Checks for and flags bars that have reached 100%.</p> <pre><code>BARNUM = CHECKCOMPLETE(APP) finds bars with Progress == 1\n    and sets their state, timer text, and button icon.\n\n    Inputs:\n        app - The app instance.\n\n    Outputs:\n        barNum - Indices of complete bars.\n</code></pre> <p>checkTimeout - checkTimeout Checks for and flags bars that have timed out.</p> <pre><code>BARNUM = CHECKTIMEOUT(APP) finds bars that haven't updated\n    within the 'Timeout' duration and sets their state and\n    button icon accordingly.\n\n    Inputs:\n        app - The app instance.\n\n    Outputs:\n        barNum - Indices of bars that have timed out.\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.GUI.COMPONENT.PROGRESSBARWINDOW, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/ISVALID, CLEAR\n\nHelp for ndi.gui.component.ProgressBarWindow/delete is inherited from superclass handle\n</code></pre> <p>deleteIfNoOpenBars - delete the app if there are no open bars</p> <pre><code>Deletes (closes the window) if all bars are 'Closed'\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.PROGRESSBARWINDOW, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/GE, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/GT, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/LE, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/LT, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/NE\n\nHelp for ndi.gui.component.ProgressBarWindow/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.GUI.COMPONENT.PROGRESSBARWINDOW\n\nHelp for ndi.gui.component.ProgressBarWindow/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.gui.component.progressbarwindow, ndi.gui.component.progressbarwindow/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.gui.component.ProgressBarWindow/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.PROGRESSBARWINDOW, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/EQ, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/GT, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/LE, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/LT, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/NE\n\nHelp for ndi.gui.component.ProgressBarWindow/ge is inherited from superclass handle\n</code></pre> <p>getBarNum - getBarNum Finds the index of a bar given its ID (index or Tag).</p> <pre><code>[BARNUM, STATUS] = GETBARNUM(APP, BARID) searches for a \n    progress bar.\n\n    Inputs:\n        app - The app instance.\n        barID - The index or Tag.\n\n    Outputs:\n        barNum - The index of the found bar. Empty if not found.\n        status - Contains identifier and message fields.\n                          Empty if bar found and valid.\n</code></pre> <p>getState - getState Returns the state of a specific bar.</p> <pre><code>STATE = GETSTATE(APP, BARID) retrieves the 'State' field\n    for the specified bar.\n\n    Inputs:\n        app - The app instance.\n        barID - The index or Tag.\n\n    Outputs:\n        state - The current state ('Open', 'Complete',\n                      'Timeout', 'Closed') or empty if not found.\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.PROGRESSBARWINDOW, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/EQ, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/GE, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/LE, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/LT, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/NE\n\nHelp for ndi.gui.component.ProgressBarWindow/gt is inherited from superclass handle\n</code></pre> <p>handleAppChange - handleAppChange Listener callback for property changes.</p> <pre><code>Ensures guidata is saved and the figure is redrawn.\n</code></pre> <p>handleButtonPress - handleButtonPress Callback for the close button on each bar.</p> <pre><code>Inputs:\n        app - The app instance.\n        source - The handle to the button that was pressed.\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.GUI.COMPONENT.PROGRESSBARWINDOW, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/DELETE\n\nHelp for ndi.gui.component.ProgressBarWindow/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.PROGRESSBARWINDOW, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/EQ, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/GE, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/GT, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/LT, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/NE\n\nHelp for ndi.gui.component.ProgressBarWindow/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.gui.component.progressbarwindow, matlab.metadata.Property, events\n\nHelp for ndi.gui.component.ProgressBarWindow/listener is inherited from superclass handle\n</code></pre> <p>loadobj - Loading an instance of an app object is not supported.</p> <pre><code>Help for ndi.gui.component.ProgressBarWindow.loadobj is inherited from superclass matlab.apps.AppBase\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.PROGRESSBARWINDOW, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/EQ, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/GE, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/GT, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/LE, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/NE\n\nHelp for ndi.gui.component.ProgressBarWindow/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.GUI.COMPONENT.PROGRESSBARWINDOW, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/EQ, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/GE, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/GT, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/LE, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/LT\n\nHelp for ndi.gui.component.ProgressBarWindow/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.GUI.COMPONENT.PROGRESSBARWINDOW, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/ADDLISTENER, NDI.GUI.COMPONENT.PROGRESSBARWINDOW/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.gui.component.ProgressBarWindow/notify is inherited from superclass handle\n</code></pre> <p>removeBar - removeBar Removes a specific progress bar from the window.</p> <pre><code>APP = REMOVEBAR(APP, BARID) removes the specified bar,\n    deletes its GUI components, updates the layout, and throws\n    an error if the task was not complete.\n\n    Inputs:\n        app - The app instance.\n        barID - The index or Tag of the bar to remove.\n\n    Outputs:\n        app - The updated app instance.\n</code></pre> <p>saveobj - Saving an instance of an app object is not supported.</p> <pre><code>Help for ndi.gui.component.ProgressBarWindow/saveobj is inherited from superclass matlab.apps.AppBase\n</code></pre> <p>setFigureSize - setFigureSize Adjusts the figure height based on bar content.</p> <pre><code>APP = SETFIGURESIZE(APP, TOTALROWHEIGHT) calculates and sets\n    the figure's position and size.\n\n    Inputs:\n        app - The app instance.\n        totalRowHeight - The sum of the 'x' values from the \n                         grid's RowHeight property.\n\n    Outputs:\n        app - The updated app instance.\n</code></pre> <p>setFigureTitle - setFigureTitle Sets the title of the progress bar window.</p> <pre><code>APP = SETFIGURETITLE(APP, TITLENAME) updates the Name\n    property of the figure.\n\n    Inputs:\n        app - The app instance.\n        titleName - The new title.\n\n    Outputs:\n        app - The updated app instance.\n</code></pre> <p>setTimeout - setTimeout Sets the timeout duration.</p> <pre><code>APP = SETTIMEMOUT(APP,NEWTIMEOUT) updates the timeout time.\n\n    Inputs:\n        app - The app instance.\n        newTimeout - The timeout time.\n\n    Outputs:\n        app - The updated app instance.\n</code></pre> <p>updateBar - updateBar Updates the progress of a specific bar.</p> <pre><code>APP = UPDATEBAR(APP, BARID, PROGRESS) updates the visual\n    state and percentage text of the specified progress bar.\n\n    Inputs:\n        app - The app instance.\n        barID - The index or Tag of the bar to update.\n        progress - The new progress value, between 0 and 1.\n\n    Outputs:\n        app - The updated app instance.\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Babstract/ProgressMonitor.m/","title":"CLASS ndi.gui.component.abstract.ProgressMonitor","text":"<pre><code>  Set this first...\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Babstract/ProgressMonitor.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Babstract/ProgressMonitor.m/#properties","title":"Properties","text":"Property Description Title UpdateInterval ProgressTracker DisplayElapsedTime DisplayRemainingTime RemainingTimeFormat"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Babstract/ProgressMonitor.m/#methods","title":"Methods","text":"Method Description ProgressMonitor Set this first... addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. markComplete Note: Using markComplete method to trigger event to run ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. reset Reset graphics object properties"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Babstract/ProgressMonitor.m/#methods-help","title":"Methods help","text":"<p>ProgressMonitor - Set this first...</p> <pre><code>Documentation for ndi.gui.component.abstract.ProgressMonitor/ProgressMonitor\n       doc ndi.gui.component.abstract.ProgressMonitor\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.gui.component.abstract.progressmonitor, matlab.metadata.Property, events\n\nHelp for ndi.gui.component.abstract.ProgressMonitor/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/ISVALID, CLEAR\n\nHelp for ndi.gui.component.abstract.ProgressMonitor/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/NE\n\nHelp for ndi.gui.component.abstract.ProgressMonitor/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR\n\nHelp for ndi.gui.component.abstract.ProgressMonitor/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.gui.component.abstract.progressmonitor, ndi.gui.component.abstract.progressmonitor/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.gui.component.abstract.ProgressMonitor/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/NE\n\nHelp for ndi.gui.component.abstract.ProgressMonitor/ge is inherited from superclass handle\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/NE\n\nHelp for ndi.gui.component.abstract.ProgressMonitor/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/DELETE\n\nHelp for ndi.gui.component.abstract.ProgressMonitor/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/NE\n\nHelp for ndi.gui.component.abstract.ProgressMonitor/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.gui.component.abstract.progressmonitor, matlab.metadata.Property, events\n\nHelp for ndi.gui.component.abstract.ProgressMonitor/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/NE\n\nHelp for ndi.gui.component.abstract.ProgressMonitor/lt is inherited from superclass handle\n</code></pre> <p>markComplete - Note: Using markComplete method to trigger event to run</p> <pre><code>methods of this class. Todo: Can it be simplified?\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/EQ, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/GT, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LE, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LT\n\nHelp for ndi.gui.component.abstract.ProgressMonitor/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/ADDLISTENER, NDI.GUI.COMPONENT.ABSTRACT.PROGRESSMONITOR/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.gui.component.abstract.ProgressMonitor/notify is inherited from superclass handle\n</code></pre> <p>reset - Reset graphics object properties</p> <pre><code>This MATLAB function resets all of the properties of the specified\n    graphics object to their default values.\n\n    Syntax\n      reset(h)\n\n    Input Arguments\n      h - Graphics objects\n        single object | vector of objects\n\n    Examples\n      openExample('graphics/ResetAxesAndFigurePropertiesExample')\n\n    See also get, set, cla, clf, gca, gcf, hold\n\n    Introduced in MATLAB before R2006a\n    Documentation for reset\n       doc reset\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/AsynchProgressTracker.m/","title":"CLASS ndi.gui.component.internal.AsynchProgressTracker","text":"<pre><code>ndi.gui.component.internal.AsynchProgressTracker is a class.\n    obj = ndi.gui.component.internal.AsynchProgressTracker\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/AsynchProgressTracker.m/#superclasses","title":"Superclasses","text":"<p>ndi.gui.component.internal.ProgressTracker, handle, matlab.mixin.CustomCompactDisplayProvider</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/AsynchProgressTracker.m/#properties","title":"Properties","text":"Property Description PercentageComplete Message CurrentStep TotalSteps"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/AsynchProgressTracker.m/#methods","title":"Methods","text":"Method Description AsynchProgressTracker ndi.gui.component.internal.AsynchProgressTracker/AsynchProgressTracker is a constructor. addlistener addlistener  Add listener for event. compactRepresentationForColumn compactRepresentationForColumn Columnar display representation of delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. getAsynchTaskProgress Get a temporary file gt &gt; (GT)   Greater than relation for handles. isComplete Check if task is complete isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. reset Reset graphics object properties resetProgress Reset progress to start setCompleted ndi.gui.component.internal.AsynchProgressTracker/setCompleted is a function. setTotalSteps Only allow setting value if TotalSteps is 0. Once TotalSteps updateMessage ndi.gui.component.internal.AsynchProgressTracker/updateMessage is a function. updateProgress Update progress by incrementing the current step"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/AsynchProgressTracker.m/#methods-help","title":"Methods help","text":"<p>AsynchProgressTracker - ndi.gui.component.internal.AsynchProgressTracker/AsynchProgressTracker is a constructor.</p> <pre><code>obj = ndi.gui.component.internal.AsynchProgressTracker\n\n    Documentation for ndi.gui.component.internal.AsynchProgressTracker/AsynchProgressTracker\n       doc ndi.gui.component.internal.AsynchProgressTracker\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.gui.component.internal.asynchprogresstracker, matlab.metadata.Property, events\n\nHelp for ndi.gui.component.internal.AsynchProgressTracker/addlistener is inherited from superclass handle\n</code></pre> <p>compactRepresentationForColumn - compactRepresentationForColumn Columnar display representation of</p> <pre><code>an object\n\n    rep = compactRepresentationForColumn(obj, displayConfiguration, \n    width) returns a scalar matlab.display.CompactDisplayRepresentation \n    object describing the compact display representation for the input \n    object obj. This method is called by table to obtain the compact \n    display representation for MATLAB object obj, when the shape \n    constraints require that a column be used. displayConfiguration \n    is a matlab.display.DisplayConfiguration object that describes \n    the current display environment, such as the current numeric display \n    format and whether hyperlinks are enabled. Input argument width \n    is the available width to display the object.\n\n    The default columnar display representation for an object is  \n    dimensions plus class name.  Override \n    compactRepresentationForColumn to provide a custom columnar \n    compact display.  This function is primarily used when your \n    object is displayed within a MATLAB table.\n\n    See also\n    ndi.gui.component.internal.AsynchProgressTracker/compactRepresentationForSingleLine\n\nHelp for ndi.gui.component.internal.AsynchProgressTracker/compactRepresentationForColumn is inherited from superclass matlab.mixin.CustomCompactDisplayProvider\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/ISVALID, CLEAR\n\nHelp for ndi.gui.component.internal.AsynchProgressTracker/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/NE\n\nHelp for ndi.gui.component.internal.AsynchProgressTracker/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER\n\nHelp for ndi.gui.component.internal.AsynchProgressTracker/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.gui.component.internal.asynchprogresstracker, ndi.gui.component.internal.asynchprogresstracker/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.gui.component.internal.AsynchProgressTracker/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/NE\n\nHelp for ndi.gui.component.internal.AsynchProgressTracker/ge is inherited from superclass handle\n</code></pre> <p>getAsynchTaskProgress - Get a temporary file</p> <pre><code>Help for ndi.gui.component.internal.AsynchProgressTracker/getAsynchTaskProgress is inherited from superclass ndi.gui.component.internal.ProgressTracker\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/NE\n\nHelp for ndi.gui.component.internal.AsynchProgressTracker/gt is inherited from superclass handle\n</code></pre> <p>isComplete - Check if task is complete</p> <pre><code>Help for ndi.gui.component.internal.AsynchProgressTracker/isComplete is inherited from superclass ndi.gui.component.internal.ProgressTracker\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/DELETE\n\nHelp for ndi.gui.component.internal.AsynchProgressTracker/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/NE\n\nHelp for ndi.gui.component.internal.AsynchProgressTracker/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.gui.component.internal.asynchprogresstracker, matlab.metadata.Property, events\n\nHelp for ndi.gui.component.internal.AsynchProgressTracker/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/NE\n\nHelp for ndi.gui.component.internal.AsynchProgressTracker/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LT\n\nHelp for ndi.gui.component.internal.AsynchProgressTracker/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/ADDLISTENER, NDI.GUI.COMPONENT.INTERNAL.ASYNCHPROGRESSTRACKER/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.gui.component.internal.AsynchProgressTracker/notify is inherited from superclass handle\n</code></pre> <p>reset - Reset graphics object properties</p> <pre><code>This MATLAB function resets all of the properties of the specified\n    graphics object to their default values.\n\n    Syntax\n      reset(h)\n\n    Input Arguments\n      h - Graphics objects\n        single object | vector of objects\n\n    Examples\n      openExample('graphics/ResetAxesAndFigurePropertiesExample')\n\n    See also get, set, cla, clf, gca, gcf, hold\n\n    Introduced in MATLAB before R2006a\n    Documentation for reset\n       doc reset\n</code></pre> <p>resetProgress - Reset progress to start</p> <pre><code>Help for ndi.gui.component.internal.AsynchProgressTracker/resetProgress is inherited from superclass ndi.gui.component.internal.ProgressTracker\n</code></pre> <p>setCompleted - ndi.gui.component.internal.AsynchProgressTracker/setCompleted is a function.</p> <pre><code>setCompleted(obj, message)\n</code></pre> <p>setTotalSteps - Only allow setting value if TotalSteps is 0. Once TotalSteps</p> <pre><code>is initialized with a value, it should not be settable. The\n  method \"reset\" can be used if the TotalSteps need to be\n  reinitialized.\n\nHelp for ndi.gui.component.internal.AsynchProgressTracker/setTotalSteps is inherited from superclass ndi.gui.component.internal.ProgressTracker\n</code></pre> <p>updateMessage - ndi.gui.component.internal.AsynchProgressTracker/updateMessage is a function.</p> <pre><code>updateMessage(obj, newMessage)\n</code></pre> <p>updateProgress - Update progress by incrementing the current step</p> <pre><code>\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/ProgressTracker.m/","title":"CLASS ndi.gui.component.internal.ProgressTracker","text":"<pre><code>  ProgressTracker - Represent and track progress for a task\n\n  This class provides properties and methods for representing the progress\n  of a task.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/ProgressTracker.m/#superclasses","title":"Superclasses","text":"<p>handle, matlab.mixin.CustomCompactDisplayProvider</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/ProgressTracker.m/#properties","title":"Properties","text":"Property Description PercentageComplete Message CurrentStep Current step TotalSteps Total number of steps in the task"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/ProgressTracker.m/#methods","title":"Methods","text":"Method Description ProgressTracker Construct a task progress object addlistener addlistener  Add listener for event. compactRepresentationForColumn compactRepresentationForColumn Columnar display representation of delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. getAsynchTaskProgress Get a temporary file gt &gt; (GT)   Greater than relation for handles. isComplete Check if task is complete isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. reset Reset graphics object properties resetProgress Reset progress to start setCompleted ndi.gui.component.internal.ProgressTracker/setCompleted is a function. setTotalSteps Only allow setting value if TotalSteps is 0. Once TotalSteps updateMessage ndi.gui.component.internal.ProgressTracker/updateMessage is a function. updateProgress Update progress by incrementing the current step"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/ProgressTracker.m/#methods-help","title":"Methods help","text":"<p>ProgressTracker - Construct a task progress object</p> <pre><code>Documentation for ndi.gui.component.internal.ProgressTracker/ProgressTracker\n       doc ndi.gui.component.internal.ProgressTracker\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.gui.component.internal.progresstracker, matlab.metadata.Property, events\n\nHelp for ndi.gui.component.internal.ProgressTracker/addlistener is inherited from superclass handle\n</code></pre> <p>compactRepresentationForColumn - compactRepresentationForColumn Columnar display representation of</p> <pre><code>an object\n\n    rep = compactRepresentationForColumn(obj, displayConfiguration, \n    width) returns a scalar matlab.display.CompactDisplayRepresentation \n    object describing the compact display representation for the input \n    object obj. This method is called by table to obtain the compact \n    display representation for MATLAB object obj, when the shape \n    constraints require that a column be used. displayConfiguration \n    is a matlab.display.DisplayConfiguration object that describes \n    the current display environment, such as the current numeric display \n    format and whether hyperlinks are enabled. Input argument width \n    is the available width to display the object.\n\n    The default columnar display representation for an object is  \n    dimensions plus class name.  Override \n    compactRepresentationForColumn to provide a custom columnar \n    compact display.  This function is primarily used when your \n    object is displayed within a MATLAB table.\n\n    See also\n    ndi.gui.component.internal.ProgressTracker/compactRepresentationForSingleLine\n\nHelp for ndi.gui.component.internal.ProgressTracker/compactRepresentationForColumn is inherited from superclass matlab.mixin.CustomCompactDisplayProvider\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/ISVALID, CLEAR\n\nHelp for ndi.gui.component.internal.ProgressTracker/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/NE\n\nHelp for ndi.gui.component.internal.ProgressTracker/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER\n\nHelp for ndi.gui.component.internal.ProgressTracker/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.gui.component.internal.progresstracker, ndi.gui.component.internal.progresstracker/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.gui.component.internal.ProgressTracker/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/NE\n\nHelp for ndi.gui.component.internal.ProgressTracker/ge is inherited from superclass handle\n</code></pre> <p>getAsynchTaskProgress - Get a temporary file</p> <pre><code>\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/NE\n\nHelp for ndi.gui.component.internal.ProgressTracker/gt is inherited from superclass handle\n</code></pre> <p>isComplete - Check if task is complete</p> <pre><code>\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/DELETE\n\nHelp for ndi.gui.component.internal.ProgressTracker/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/NE\n\nHelp for ndi.gui.component.internal.ProgressTracker/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.gui.component.internal.progresstracker, matlab.metadata.Property, events\n\nHelp for ndi.gui.component.internal.ProgressTracker/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/NE\n\nHelp for ndi.gui.component.internal.ProgressTracker/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/EQ, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/GT, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LE, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LT\n\nHelp for ndi.gui.component.internal.ProgressTracker/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/ADDLISTENER, NDI.GUI.COMPONENT.INTERNAL.PROGRESSTRACKER/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.gui.component.internal.ProgressTracker/notify is inherited from superclass handle\n</code></pre> <p>reset - Reset graphics object properties</p> <pre><code>This MATLAB function resets all of the properties of the specified\n    graphics object to their default values.\n\n    Syntax\n      reset(h)\n\n    Input Arguments\n      h - Graphics objects\n        single object | vector of objects\n\n    Examples\n      openExample('graphics/ResetAxesAndFigurePropertiesExample')\n\n    See also get, set, cla, clf, gca, gcf, hold\n\n    Introduced in MATLAB before R2006a\n    Documentation for reset\n       doc reset\n</code></pre> <p>resetProgress - Reset progress to start</p> <pre><code>\n</code></pre> <p>setCompleted - ndi.gui.component.internal.ProgressTracker/setCompleted is a function.</p> <pre><code>setCompleted(obj, message)\n</code></pre> <p>setTotalSteps - Only allow setting value if TotalSteps is 0. Once TotalSteps</p> <pre><code>is initialized with a value, it should not be settable. The\n  method \"reset\" can be used if the TotalSteps need to be\n  reinitialized.\n</code></pre> <p>updateMessage - ndi.gui.component.internal.ProgressTracker/updateMessage is a function.</p> <pre><code>updateMessage(obj, newMessage)\n</code></pre> <p>updateProgress - Update progress by incrementing the current step</p> <pre><code>\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/MessageUpdatedEventData.m/","title":"CLASS ndi.gui.component.internal.event.MessageUpdatedEventData","text":"<pre><code>  MessageUpdatedEventData Constructor\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/MessageUpdatedEventData.m/#superclasses","title":"Superclasses","text":"<p>event.EventData, handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/MessageUpdatedEventData.m/#properties","title":"Properties","text":"Property Description Message Message to display Source EventName"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/MessageUpdatedEventData.m/#methods","title":"Methods","text":"Method Description MessageUpdatedEventData MessageUpdatedEventData Constructor addlistener addlistener  Add listener for event. delete Delete files or objects eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event."},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/MessageUpdatedEventData.m/#methods-help","title":"Methods help","text":"<p>MessageUpdatedEventData - MessageUpdatedEventData Constructor</p> <pre><code>Documentation for ndi.gui.component.internal.event.MessageUpdatedEventData/MessageUpdatedEventData\n       doc ndi.gui.component.internal.event.MessageUpdatedEventData\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.gui.component.internal.event.messageupdatedeventdata, matlab.metadata.Property, events\n\nHelp for ndi.gui.component.internal.event.MessageUpdatedEventData/addlistener is inherited from superclass handle\n</code></pre> <p>delete - Delete files or objects</p> <pre><code>This MATLAB function deletes filename from disk, without requesting\n    verification.\n\n    Syntax\n      delete filename\n      delete filename1 ... filenameN\n      delete(filename,ResolveSymbolicLinks=tf)\n      delete(obj)\n\n    Input Arguments\n      filename - Name of file to delete\n        character vector | string scalar\n      obj - Object\n        single object | array of objects\n      tf - Remove target of symbolic link\n        false or 0 (default) | true or 1\n\n    Examples\n      openExample('matlab/DeleteFilesInFolderExample')\n      openExample('matlab/DeleteGraphicsObjectsExample')\n\n    See also clear, dir, recycle, rmdir, delete\n\n    Introduced in MATLAB before R2006a\n    Documentation for delete\n       doc delete\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/NE\n\nHelp for ndi.gui.component.internal.event.MessageUpdatedEventData/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA\n\nHelp for ndi.gui.component.internal.event.MessageUpdatedEventData/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.gui.component.internal.event.messageupdatedeventdata, ndi.gui.component.internal.event.messageupdatedeventdata/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.gui.component.internal.event.MessageUpdatedEventData/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/NE\n\nHelp for ndi.gui.component.internal.event.MessageUpdatedEventData/ge is inherited from superclass handle\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/NE\n\nHelp for ndi.gui.component.internal.event.MessageUpdatedEventData/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/DELETE\n\nHelp for ndi.gui.component.internal.event.MessageUpdatedEventData/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/NE\n\nHelp for ndi.gui.component.internal.event.MessageUpdatedEventData/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.gui.component.internal.event.messageupdatedeventdata, matlab.metadata.Property, events\n\nHelp for ndi.gui.component.internal.event.MessageUpdatedEventData/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/NE\n\nHelp for ndi.gui.component.internal.event.MessageUpdatedEventData/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LT\n\nHelp for ndi.gui.component.internal.event.MessageUpdatedEventData/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/ADDLISTENER, NDI.GUI.COMPONENT.INTERNAL.EVENT.MESSAGEUPDATEDEVENTDATA/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.gui.component.internal.event.MessageUpdatedEventData/notify is inherited from superclass handle\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/ProgressUpdatedEventData.m/","title":"CLASS ndi.gui.component.internal.event.ProgressUpdatedEventData","text":"<pre><code>  ProgressUpdatedEventData Constructor\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/ProgressUpdatedEventData.m/#superclasses","title":"Superclasses","text":"<p>event.EventData, handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/ProgressUpdatedEventData.m/#properties","title":"Properties","text":"Property Description ProgressPercentage Percentage of progress CurrentStep Current step TotalSteps Total steps Source EventName"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/ProgressUpdatedEventData.m/#methods","title":"Methods","text":"Method Description ProgressUpdatedEventData ProgressUpdatedEventData Constructor addlistener addlistener  Add listener for event. delete Delete files or objects eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event."},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Bcomponent/%2Binternal/%2Bevent/ProgressUpdatedEventData.m/#methods-help","title":"Methods help","text":"<p>ProgressUpdatedEventData - ProgressUpdatedEventData Constructor</p> <pre><code>Documentation for ndi.gui.component.internal.event.ProgressUpdatedEventData/ProgressUpdatedEventData\n       doc ndi.gui.component.internal.event.ProgressUpdatedEventData\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.gui.component.internal.event.progressupdatedeventdata, matlab.metadata.Property, events\n\nHelp for ndi.gui.component.internal.event.ProgressUpdatedEventData/addlistener is inherited from superclass handle\n</code></pre> <p>delete - Delete files or objects</p> <pre><code>This MATLAB function deletes filename from disk, without requesting\n    verification.\n\n    Syntax\n      delete filename\n      delete filename1 ... filenameN\n      delete(filename,ResolveSymbolicLinks=tf)\n      delete(obj)\n\n    Input Arguments\n      filename - Name of file to delete\n        character vector | string scalar\n      obj - Object\n        single object | array of objects\n      tf - Remove target of symbolic link\n        false or 0 (default) | true or 1\n\n    Examples\n      openExample('matlab/DeleteFilesInFolderExample')\n      openExample('matlab/DeleteGraphicsObjectsExample')\n\n    See also clear, dir, recycle, rmdir, delete\n\n    Introduced in MATLAB before R2006a\n    Documentation for delete\n       doc delete\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/NE\n\nHelp for ndi.gui.component.internal.event.ProgressUpdatedEventData/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA\n\nHelp for ndi.gui.component.internal.event.ProgressUpdatedEventData/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.gui.component.internal.event.progressupdatedeventdata, ndi.gui.component.internal.event.progressupdatedeventdata/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.gui.component.internal.event.ProgressUpdatedEventData/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/NE\n\nHelp for ndi.gui.component.internal.event.ProgressUpdatedEventData/ge is inherited from superclass handle\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/NE\n\nHelp for ndi.gui.component.internal.event.ProgressUpdatedEventData/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/DELETE\n\nHelp for ndi.gui.component.internal.event.ProgressUpdatedEventData/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/NE\n\nHelp for ndi.gui.component.internal.event.ProgressUpdatedEventData/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.gui.component.internal.event.progressupdatedeventdata, matlab.metadata.Property, events\n\nHelp for ndi.gui.component.internal.event.ProgressUpdatedEventData/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/NE\n\nHelp for ndi.gui.component.internal.event.ProgressUpdatedEventData/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/EQ, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/GT, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LE, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LT\n\nHelp for ndi.gui.component.internal.event.ProgressUpdatedEventData/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/ADDLISTENER, NDI.GUI.COMPONENT.INTERNAL.EVENT.PROGRESSUPDATEDEVENTDATA/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.gui.component.internal.event.ProgressUpdatedEventData/notify is inherited from superclass handle\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bgui/%2Butility/centerFigure.m/","title":"ndi.gui.utility.centerFigure","text":"<pre><code>  centerFigure - Center figure window on a reference position\n\n    Syntax:\n        centerFigure(figureHandle, referencePosition)\n\n    Input arguments:\n        figureHandle - Handle object for a figure\n        referencePosition - a reference position. If reference position is\n        not give, the current screen size is used. If reference position\n        can also be anotehr figure handle, in which case the Position\n        property of that figure is used.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/ctest.m/","title":"CLASS ndi.mock.ctest","text":"<pre><code>   ndi.mock.ctest - calculator test class, provides methods for testing ndi.calculator objects\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/ctest.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/ctest.m/#properties","title":"Properties","text":"Property Description base_scope structure with the base scope information for the class"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/ctest.m/#methods","title":"Methods","text":"Method Description calc_path CALC_PATH return the path to the ndi.calculator object clean_mock_docs remove mock/test documents compare_mock_docs compare an expected calculation answer with an actual answer ctest object that provides methods for testing ndi.calculator objects default_scope default scope types for ndi.mock.ctest object generate_mock_docs generate tests for ndi.calc.* objects load_mock_expected_output load expected NDI document answer for a calculation mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents plot plot a calculation test document test perform a test of an ndi.calculator object write_mock_expected_output write"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/ctest.m/#methods-help","title":"Methods help","text":"<p>calc_path - CALC_PATH return the path to the ndi.calculator object</p> <pre><code>P = CALC_PATH(CTEST_OBJ)\n\n  Return the path of an ndi.calculator object.\n</code></pre> <p>clean_mock_docs - remove mock/test documents</p> <pre><code>\n</code></pre> <p>compare_mock_docs - compare an expected calculation answer with an actual answer</p> <pre><code>[B, ERRORMSG] = COMPARE_MOCK_DOCS(CTEST_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE)\n\n  Given an NDI document with the expected answer to a calculation (EXPECTED_DOC),\n  the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'),\n  this function computes whether the ACTUAL_DOC is within an allowed tolerance of\n  EXPECTED_DOC.\n\n  B is 1 if the differences in the documents are within the tolerance of the class.\n  Otherwise, B is 0.\n  If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance.\n\n  In this abstract class, B is always 1 and ERRORMSG is always an empty string.\n\n  Developer's note: this method should be overridden in each calculator object.\n</code></pre> <p>ctest - object that provides methods for testing ndi.calculator objects</p> <pre><code>CTEST_OBJ = ndi.mock.ctest()\n\n  Create an ndi.mock.ctest object.\n\n    Documentation for ndi.mock.ctest/ctest\n       doc ndi.mock.ctest\n</code></pre> <p>default_scope - default scope types for ndi.mock.ctest object</p> <pre><code>BASE_SCOPE = ndi.mock.ctest.default_scope();\n\n  Return a default base_scope structure for an ndi.mock.ctest object.\n</code></pre> <p>generate_mock_docs - generate tests for ndi.calc. objects*</p> <pre><code>[DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(CSTEST_OBJ,...\n     SCOPE, NUMBER_OF_TESTS)\n\n  SCOPE should be one of 'standard', 'low_noise', or 'high_noise'.\n    'standard' performs tests on specific hard-coded inputs.\n    'low_noise' performs tests on specific hard-coded inputs with small amounts\n       of noise added.\n    'high_noise' performs tests on specific hard-coded inputs with large amounts\n       of noise added.\n\n  NUMBER_OF_TESTS is the number of tests to generate.\n</code></pre> <p>load_mock_expected_output - load expected NDI document answer for a calculation</p> <pre><code>DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N)\n\n  Load the Nth stored ndi.document that contains the expected answer for the\n  Nth standard mock test.\n</code></pre> <p>mock_expected_filename - file of expected NDI document answer for a calculation</p> <pre><code>FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N)\n\n  Return the filename for the Nth stored ndi.document that contains the expected\n  answer for the Nth standard mock test.\n</code></pre> <p>mock_path - return the path to the stored mock example output documents</p> <pre><code>MP = MOCK_PATH(CTEST_OBJ)\n\n  Returns the path to the mock document example outputs.\n  The returned path ends in a file separator.\n</code></pre> <p>plot - plot a calculation test document</p> <pre><code>H = PLOT(CTEST_OBJ, DOCUMENT)\n\n  Plot the ndi.document DOCUMENT in the current axes.\n\n  In the abstract class, nothing is done.\n</code></pre> <p>test - perform a test of an ndi.calculator object</p> <pre><code>[B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN)\n\n  Perform tests of the calculator for a certain SCOPE.\n\n  B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons\n    of the expected output of test i and actual output of test j are equal.\n    Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should\n    be 0, although results might be close enough for some comparisons to be\n    equal even if there are no errors. If test indices are\n    specified, B becomes a numel(specific_test_inds) x\n    numel(specific_test_inds) array.\n\n  ERRORMSG{i,j} is any error message given if the comparison between the\n    expected outcome of test i and the actual outcome of test j.\n\n  B_EXPECTED is the result of the comparisons between the expected\n    outcome of test i and the expected outcome of test j. Some tests\n    might have the same expected outcome, which can be useful for\n    interpreting the results in B.\n\n  SCOPE should be one of 'standard', 'low_noise', or 'high_noise'.\n    'standard' performs tests on specific hard-coded inputs.\n    'low_noise' performs tests on specific hard-coded inputs with small amounts\n       of noise added.\n    'high_noise' performs tests on specific hard-coded inputs with large amounts\n       of noise added.\n\n  NUMBER_OF_TESTS indicates the number of tests to perform.\n  PLOT_IT indicates (0/1) whether or not the results should be plotted.\n\n  This function's behavior can be modified by name/value pairs.\n  --------------------------------------------------------------------------------\n  | Parameter (default):     | Description:                                      |\n  |--------------------------|---------------------------------------------------|\n  | specific_test_inds([])   | Should we specify which tests to run?             |\n  |--------------------------|---------------------------------------------------|\n\n  Step 1: generate_mock_docs\n</code></pre> <p>write_mock_expected_output - write</p> <pre><code>B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC)\n\n  Set the expected mock document for mock calculation NUMBER to\n  be the ndi.document DOC.\n\n  This function will not overwrite an existing expected mock document.\n  It must be deleted manually to ensure programmer really wants to overwrite it.\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/%2Bfun/clear.m/","title":"ndi.mock.fun.clear","text":"<pre><code>  CLEAR - clear mock documents from an ndi.session\n\n  ndi.mock.fun.clear(S)\n\n  Removes all mock database documents from an ndi.session.\n\n  Removes all mock subjects, which should remove all mock probes\n  or elements based on those subjects and analyses of those probes.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/%2Bfun/stimulus_presentation.m/","title":"ndi.mock.fun.stimulus_presentation","text":"<pre><code>  ndi.mock.fun.stimulus_presentation - make a mock stimulus presentation document base\n\n  [STIM_PRES_DOC,SPIKETIMES] = ndi.mock.fun.stimulus_presentation(S, stimulus_element_id, parameter_struct_array, ...\n     independent_variables, X, R, noise, reps, ...)\n\n  Create a mock stimulus presentation document and spike times that approximate the\n  responses R as closely as possible (within the stimulus duration bounds).\n  If necessary, the time of each stimulus presentation is adjusted to allow a more\n  accurate representation of the requested firing rate.\n\n  S is the NDI session that the stimulator is a part of\n  STIMULUS_ELEMENT_ID is the id of a mock stimulator element.\n  PARAMETER_STRUCT should be a structure that has the base parameters\n    that are common to all of the stimuli in the group.\n  INDEPENDENT_VARIABLES is a cell array of strings that are the names of the parameters that\n    vary in the list of stimuli.\n  X is a vector of the values of the INDEPENDENT_VARIABLES. Each column\n    should have the value for each entry in INDEPENDENT_VARIABLES. NaN\n    can be used to indicate control stimuli (aka blank stimuli).\n  R is a vector of the responses to each stimulus. It should have the same\n    number of rows as X.\n  NOISE is a scalar that indicates how much noise with mean 0 and standard deviation\n    equal to the value of R should be added to the stimulus response on each trial.\n    0 indicates no noise should be added, 1 indicates that the standard deviation\n    of the noise to be added should be 1 * the value of the response, etc.\n  REPS is the number of times to repeat each stimulus.\n\n  This function takes additional arguments as NAME/VALUE pairs:\n\n  |------------------------------------|---------------------------------------------------------|\n  | Parameter (default)                | Description                                             |\n  |------------------------------------|---------------------------------------------------------|\n  | stim_duration (2)                  | Duration of each mock stimulus                          |\n  | stim_duration_min (0.2)            | Minimum duration of a mock stimulus presentation        |\n  |                                    |   (set so that firing rate can be matched)              |\n  | interstimulus_interval(3)          | Interstimulus interval                                  |\n  | epochid ('mockepoch')              | The name of the stimulator epoch that is created.       |\n  |------------------------------------|---------------------------------------------------------|\n\n  Example:\n     stimulator_id = '12345'; % just for the example\n     param_struct = struct('spatial_frequency',0.5);\n     independent_variable = {'contrast'};\n     X = [ 0 ; 0.5 ; 1];\n     R = [ 0 ; 2 ; 4]; % spikes/sec\n     noise = 0;\n     reps = 1;\n     stim_pres_doc = ndi.mock.fun.stimulus_presentation(stimulator_id,param_struct,independent_variable,X,R,noise,reps);\n     disp(['Displaying stimulus parameters']);\n     for i=1:size(X,1), stim_pres_doc.document_properties.stimulus_presentation.stimuli(i).parameters, end;\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/%2Bfun/stimulus_response.m/","title":"ndi.mock.fun.stimulus_response","text":"<pre><code>  ndi.mock.fun.stimulus_response- make a set of mock documents to simulate a stimulus and spiking response\n\n  [DOCS] = ndi.mock.fun.stimulus_presentation(ndi_session_obj, parameter_struct, ...\n     independent_variables, X, R, noise, reps, ...)\n\n  Create a mock subject, mock stimulator, mock neuron with response, and\n  mock stimulus presentation document that approximates the responses R\n  responses R as closely as possible (within the stimulus duration bounds).\n  If necessary, the time of each stimulus presentation is adjusted to allow a more\n  accurate representation of the requested firing rate.\n\n  PARAMETER_STRUCT should be a structure that has the base parameters\n    that are common to all of the stimuli in the group.\n  INDEPENDENT_VARIABLES is a cell array of strings that are the names of the parameters that\n    vary in the list of stimuli.\n  X is a vector of the values of the INDEPENDENT_VARIABLES. Each column\n    should have the value for each entry in INDEPENDENT_VARIABLES. NaN\n    can be used to indicate control stimuli (aka blank stimuli).\n  R is a vector of the responses to each stimulus. It should have the same\n    number of rows as X.\n  NOISE is a scalar that indicates how much noise with mean 0 and standard deviation\n    equal to the value of R should be added to the stimulus response on each trial.\n    0 indicates no noise should be added, 1 indicates that the standard deviation\n    of the noise to be added should be 1 * the value of the response, etc.\n  REPS is the number of times to repeat each stimulus.\n\n  This function takes additional arguments as NAME/VALUE pairs:\n\n  |------------------------------------|---------------------------------------------------------|\n  | Parameter (default)                | Description                                             |\n  |------------------------------------|---------------------------------------------------------|\n  | stim_duration (2)                  | Duration of each mock stimulus                          |\n  | stim_duration_min (0.2)            | Minimum duration of a mock stimulus presentation        |\n  |                                    |   (set so that firing rate can be matched)              |\n  | interstimulus_interval(3)          | Interstimulus interval                                  |\n  |------------------------------------|---------------------------------------------------------|\n\n  Example:\n     % if S is an ndi.session object\n     param_struct = struct('spatial_frequency',0.5);\n     independent_variable = {'contrast'};\n     X = [ 0 ; 0.5 ; 1];\n     R = [ 0 ; 2 ; 4]; % spikes/sec\n     noise = 0;\n     reps = 1;\n     docs = ndi.mock.fun.stimulus_response(S,param_struct, independent_variable, X, R, noise, reps);\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bmock/%2Bfun/subject_stimulator_neuron.m/","title":"ndi.mock.fun.subject_stimulator_neuron","text":"<pre><code>  ndi.mock.fun.subject_stimulator_neuron - create a mock subject, stimulator, and neuron set\n\n  OUTPUT = ndi.mock.fun.subject_stimulator_neuron(NDI_SESSION_OBJ)\n\n  Creates a mock subject, a mock stimulator, a mock stimulus presentation,\n  and mock spiking neuron with responses as specified.\n  OUTPUT is a structure with fields discussed below.\n\n  OUTPUT.refNum: a random reference number, used in the name and reference of the\n  mock subject and the mock stimulator and mock spike object.\n\n  OUTPUT.mock_subject: Attempts to find or create a mock subject called\n     'mockREFNUM@nosuchlab.org'. An NDI_document is returned in field mock_subject.\n\n  OUTPUT.mock_stimulator: Attempts to find or create a stimulator with name\n     'mock stimulator' and pseudorandom reference. An NDI_document is returned in\n     field mock_stimulator.\n\n  OUTPUT.mock_spikes: Mock spiking neuron NDI_document (of type\n    (ndi.element.timeseries with name 'mock spikes', a pseduorandom reference, type 'spikes')\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/CHEBI.m/","title":"CLASS ndi.ontology.CHEBI","text":"<pre><code>  Location: +ndi/+ontology/CHEBI.m\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/CHEBI.m/#superclasses","title":"Superclasses","text":"<p>ndi.ontology</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/CHEBI.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/CHEBI.m/#methods","title":"Methods","text":"Method Description CHEBI Constructor for the CHEBI ontology object. clearCache Clears cached ontology list JSON data and NDIC data. getOntologies Returns the ontology details list from JSON cache. getOntologyNameFromPrefix Extracts prefix, maps to ontology name (case-insensitive). getPrefixOntologyMappings Returns the prefix-&gt;ontology mappings from JSON cache. lookup Look up a term in an ontology using a prefixed string. lookupOBOFile Looks up a term in a parsed OBO file. lookupTermOrID Looks up a term in the ChEBI ontology by ID or name. performIriLookup PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI. preprocessLookupInput PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions. searchOLSAndPerformIRILookup SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI."},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/CHEBI.m/#methods-help","title":"Methods help","text":"<p>CHEBI - Constructor for the CHEBI ontology object.</p> <pre><code>Implicitly calls the superclass constructor ndi.ontology().\n\n    Documentation for ndi.ontology.CHEBI/CHEBI\n       doc ndi.ontology.CHEBI\n</code></pre> <p>clearCache - Clears cached ontology list JSON data and NDIC data.</p> <pre><code>Help for ndi.ontology.CHEBI.clearCache is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologies - Returns the ontology details list from JSON cache.</p> <pre><code>Help for ndi.ontology.CHEBI.getOntologies is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologyNameFromPrefix - Extracts prefix, maps to ontology name (case-insensitive).</p> <pre><code>[...] = ndi.ontology.getOntologyNameFromPrefix(...)\n\nHelp for ndi.ontology.CHEBI.getOntologyNameFromPrefix is inherited from superclass ndi.ontology\n</code></pre> <p>getPrefixOntologyMappings - Returns the prefix-&gt;ontology mappings from JSON cache.</p> <pre><code>Help for ndi.ontology.CHEBI.getPrefixOntologyMappings is inherited from superclass ndi.ontology\n</code></pre> <p>lookup - Look up a term in an ontology using a prefixed string.</p> <pre><code>[ID, NAME, PREFIX, DEFINITION, SYNONYMS, SHORTNAME] = ndi.ontology.lookup(LOOKUPSTRING)\n\n    Looks up a term using a prefixed string (e.g., 'CL:0000000', 'OM:metre').\n    It identifies the ontology from the prefix using the mappings in\n    'ontology_list.json', instantiates the specific ndi.ontology.ONTOLOGYNAME\n    class (e.g., ndi.ontology.CL), and calls its lookupTermOrID instance method,\n    passing the remainder of the string (after the prefix).\n\n    Outputs:\n      ID           - The canonical identifier for the term.\n      NAME         - The primary name or label for the term.\n      PREFIX       - The ontology prefix used in the lookup.\n      DEFINITION   - A textual definition, if available.\n      SYNONYMS     - A cell array of synonyms, if available.\n      SHORTNAME    - The short name for the term.\n\n    Examples:\n        % Lookup neuron in Cell Ontology by ID\n        [id, name, prefix] = ndi.ontology.lookup('CL:0000540');\n        % Expected: id='CL:0000540', name='neuron', prefix='CL'\n\n        % Lookup ethanol in ChEBI by ID\n        [id, name, prefix] = ndi.ontology.lookup('CHEBI:16236');\n        % Expected: id='CHEBI:16236', name='ethanol', prefix='CHEBI'\n\n        % Lookup Heart in NCI Metathesaurus by CUI\n        [id, name, prefix, def] = ndi.ontology.lookup('NCIm:C0018787');\n        % Expected: id='C0018787', name='Heart', prefix='NCIm', def contains definition\n\n        % Lookup Aspirin in PubChem by name\n        [id, name, prefix] = ndi.ontology.lookup('PubChem:Aspirin');\n        % Expected: id='2244', name='aspirin', prefix='PubChem'\n\n        % Lookup Homo sapiens using alternative taxonomy prefix\n        [id, name, prefix] = ndi.ontology.lookup('taxonomy:9606');\n        % Expected: id='9606', name='Homo sapiens', prefix='taxonomy'\n\n        % Example of a failed lookup (non-existent term)\n        try\n            ndi.ontology.lookup('CL:NoSuchTerm');\n        catch ME\n            disp(ME.identifier); % e.g., 'ndi:ontology:lookup_CL:NotFound' or similar\n            disp(ME.message);\n        end\n\n    See also: ndi.ontology.CHEBI.lookupTermOrID (instance method to be overridden)\n\nHelp for ndi.ontology.CHEBI.lookup is inherited from superclass ndi.ontology\n</code></pre> <p>lookupOBOFile - Looks up a term in a parsed OBO file.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = ndi.ontology.lookupOBOFile(...\n        OBOFILEPATH, ONTOLOGYPREFIX, TERM_TO_LOOKUP_FRAGMENT)\n\n    Parses an OBO file (if not already cached) and searches for a term.\n    TERM_TO_LOOKUP_FRAGMENT is the part of the term after the prefix\n    (e.g., '0000001' or 'some term name').\n\n    The function caches the parsed OBO data to speed up subsequent lookups\n    for the same file within a MATLAB session. Call ndi.ontology.clearCache()\n    or 'clear functions' to clear this cache.\n\n    Outputs:\n        ID         - The full term ID (e.g., 'EMPTY:0000001').\n        NAME       - The term's primary name.\n        DEFINITION - The term's definition.\n        SYNONYMS   - A cell array of synonym strings (currently basic,\n                     not parsing synonym types).\n\n    Throws:\n        ndi:ontology:lookupOBOFile:FileNotFound\n        ndi:ontology:lookupOBOFile:ParsingError\n        ndi:ontology:lookupOBOFile:InvalidInput\n        ndi:ontology:lookupOBOFile:TermNotFound\n\nHelp for ndi.ontology.CHEBI.lookupOBOFile is inherited from superclass ndi.ontology\n</code></pre> <p>lookupTermOrID - Looks up a term in the ChEBI ontology by ID or name.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = lookupTermOrID(OBJ, TERM_OR_ID_OR_NAME)\n\n    Overrides the base class method to provide specific lookup\n    functionality for the ChEBI ontology using the EBI OLS API via\n    static helper methods from the ndi.ontology base class.\n\n    The input TERM_OR_ID_OR_NAME is the part of the original lookup string\n    after the 'CHEBI:' prefix has been removed (e.g., '15377' or 'water').\n\n    See also: ndi.ontology.lookup (static dispatcher),\n              ndi.ontology.preprocessLookupInput (static helper),\n              ndi.ontology.searchOLSAndPerformIRILookup (static helper)\n</code></pre> <p>performIriLookup - PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI.</p> <pre><code>Used by OLS-based lookup implementations (CL, OM, CHEBI, UBERON).\n    [...] = ndi.ontology.performIriLookup(...)\n\nHelp for ndi.ontology.CHEBI.performIriLookup is inherited from superclass ndi.ontology\n</code></pre> <p>preprocessLookupInput - PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions.</p> <pre><code>Handles standard prefix/ID/name logic and OM-specific heuristic.\n    [...] = ndi.ontology.preprocessLookupInput(...)\n\nHelp for ndi.ontology.CHEBI.preprocessLookupInput is inherited from superclass ndi.ontology\n</code></pre> <p>searchOLSAndPerformIRILookup - SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI.</p> <pre><code>Handles specific logic for non-exact label searches (needed for OM).\n    [...] = ndi.ontology.searchOLSAndPerformIRILookup(...)\n\nHelp for ndi.ontology.CHEBI.searchOLSAndPerformIRILookup is inherited from superclass ndi.ontology\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/CL.m/","title":"CLASS ndi.ontology.CL","text":"<pre><code>  Location: +ndi/+ontology/CL.m\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/CL.m/#superclasses","title":"Superclasses","text":"<p>ndi.ontology</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/CL.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/CL.m/#methods","title":"Methods","text":"Method Description CL Constructor for the CL ontology object. clearCache Clears cached ontology list JSON data and NDIC data. getOntologies Returns the ontology details list from JSON cache. getOntologyNameFromPrefix Extracts prefix, maps to ontology name (case-insensitive). getPrefixOntologyMappings Returns the prefix-&gt;ontology mappings from JSON cache. lookup Look up a term in an ontology using a prefixed string. lookupOBOFile Looks up a term in a parsed OBO file. lookupTermOrID Looks up a term in the Cell Ontology (CL) by ID or name. performIriLookup PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI. preprocessLookupInput PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions. searchOLSAndPerformIRILookup SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI."},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/CL.m/#methods-help","title":"Methods help","text":"<p>CL - Constructor for the CL ontology object.</p> <pre><code>Implicitly calls the superclass constructor ndi.ontology().\n\n    Documentation for ndi.ontology.CL/CL\n       doc ndi.ontology.CL\n</code></pre> <p>clearCache - Clears cached ontology list JSON data and NDIC data.</p> <pre><code>Help for ndi.ontology.CL.clearCache is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologies - Returns the ontology details list from JSON cache.</p> <pre><code>Help for ndi.ontology.CL.getOntologies is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologyNameFromPrefix - Extracts prefix, maps to ontology name (case-insensitive).</p> <pre><code>[...] = ndi.ontology.getOntologyNameFromPrefix(...)\n\nHelp for ndi.ontology.CL.getOntologyNameFromPrefix is inherited from superclass ndi.ontology\n</code></pre> <p>getPrefixOntologyMappings - Returns the prefix-&gt;ontology mappings from JSON cache.</p> <pre><code>Help for ndi.ontology.CL.getPrefixOntologyMappings is inherited from superclass ndi.ontology\n</code></pre> <p>lookup - Look up a term in an ontology using a prefixed string.</p> <pre><code>[ID, NAME, PREFIX, DEFINITION, SYNONYMS, SHORTNAME] = ndi.ontology.lookup(LOOKUPSTRING)\n\n    Looks up a term using a prefixed string (e.g., 'CL:0000000', 'OM:metre').\n    It identifies the ontology from the prefix using the mappings in\n    'ontology_list.json', instantiates the specific ndi.ontology.ONTOLOGYNAME\n    class (e.g., ndi.ontology.CL), and calls its lookupTermOrID instance method,\n    passing the remainder of the string (after the prefix).\n\n    Outputs:\n      ID           - The canonical identifier for the term.\n      NAME         - The primary name or label for the term.\n      PREFIX       - The ontology prefix used in the lookup.\n      DEFINITION   - A textual definition, if available.\n      SYNONYMS     - A cell array of synonyms, if available.\n      SHORTNAME    - The short name for the term.\n\n    Examples:\n        % Lookup neuron in Cell Ontology by ID\n        [id, name, prefix] = ndi.ontology.lookup('CL:0000540');\n        % Expected: id='CL:0000540', name='neuron', prefix='CL'\n\n        % Lookup ethanol in ChEBI by ID\n        [id, name, prefix] = ndi.ontology.lookup('CHEBI:16236');\n        % Expected: id='CHEBI:16236', name='ethanol', prefix='CHEBI'\n\n        % Lookup Heart in NCI Metathesaurus by CUI\n        [id, name, prefix, def] = ndi.ontology.lookup('NCIm:C0018787');\n        % Expected: id='C0018787', name='Heart', prefix='NCIm', def contains definition\n\n        % Lookup Aspirin in PubChem by name\n        [id, name, prefix] = ndi.ontology.lookup('PubChem:Aspirin');\n        % Expected: id='2244', name='aspirin', prefix='PubChem'\n\n        % Lookup Homo sapiens using alternative taxonomy prefix\n        [id, name, prefix] = ndi.ontology.lookup('taxonomy:9606');\n        % Expected: id='9606', name='Homo sapiens', prefix='taxonomy'\n\n        % Example of a failed lookup (non-existent term)\n        try\n            ndi.ontology.lookup('CL:NoSuchTerm');\n        catch ME\n            disp(ME.identifier); % e.g., 'ndi:ontology:lookup_CL:NotFound' or similar\n            disp(ME.message);\n        end\n\n    See also: ndi.ontology.CL.lookupTermOrID (instance method to be overridden)\n\nHelp for ndi.ontology.CL.lookup is inherited from superclass ndi.ontology\n</code></pre> <p>lookupOBOFile - Looks up a term in a parsed OBO file.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = ndi.ontology.lookupOBOFile(...\n        OBOFILEPATH, ONTOLOGYPREFIX, TERM_TO_LOOKUP_FRAGMENT)\n\n    Parses an OBO file (if not already cached) and searches for a term.\n    TERM_TO_LOOKUP_FRAGMENT is the part of the term after the prefix\n    (e.g., '0000001' or 'some term name').\n\n    The function caches the parsed OBO data to speed up subsequent lookups\n    for the same file within a MATLAB session. Call ndi.ontology.clearCache()\n    or 'clear functions' to clear this cache.\n\n    Outputs:\n        ID         - The full term ID (e.g., 'EMPTY:0000001').\n        NAME       - The term's primary name.\n        DEFINITION - The term's definition.\n        SYNONYMS   - A cell array of synonym strings (currently basic,\n                     not parsing synonym types).\n\n    Throws:\n        ndi:ontology:lookupOBOFile:FileNotFound\n        ndi:ontology:lookupOBOFile:ParsingError\n        ndi:ontology:lookupOBOFile:InvalidInput\n        ndi:ontology:lookupOBOFile:TermNotFound\n\nHelp for ndi.ontology.CL.lookupOBOFile is inherited from superclass ndi.ontology\n</code></pre> <p>lookupTermOrID - Looks up a term in the Cell Ontology (CL) by ID or name.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = lookupTermOrID(OBJ, TERM_OR_ID_OR_NAME)\n\n    Overrides the base class method to provide specific lookup\n    functionality for the CL ontology using the EBI OLS API via\n    static helper methods from the ndi.ontology base class.\n\n    The input TERM_OR_ID_OR_NAME is the part of the original lookup string\n    after the 'CL:' prefix has been removed (e.g., '0000000' or 'cell').\n\n    See also: ndi.ontology.lookup (static dispatcher),\n              ndi.ontology.preprocessLookupInput (static helper),\n              ndi.ontology.searchOLSAndPerformIRILookup (static helper)\n</code></pre> <p>performIriLookup - PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI.</p> <pre><code>Used by OLS-based lookup implementations (CL, OM, CHEBI, UBERON).\n    [...] = ndi.ontology.performIriLookup(...)\n\nHelp for ndi.ontology.CL.performIriLookup is inherited from superclass ndi.ontology\n</code></pre> <p>preprocessLookupInput - PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions.</p> <pre><code>Handles standard prefix/ID/name logic and OM-specific heuristic.\n    [...] = ndi.ontology.preprocessLookupInput(...)\n\nHelp for ndi.ontology.CL.preprocessLookupInput is inherited from superclass ndi.ontology\n</code></pre> <p>searchOLSAndPerformIRILookup - SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI.</p> <pre><code>Handles specific logic for non-exact label searches (needed for OM).\n    [...] = ndi.ontology.searchOLSAndPerformIRILookup(...)\n\nHelp for ndi.ontology.CL.searchOLSAndPerformIRILookup is inherited from superclass ndi.ontology\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/EMPTY.m/","title":"CLASS ndi.ontology.EMPTY","text":"<pre><code>  Location: +ndi/+ontology/EMPTY.m\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/EMPTY.m/#superclasses","title":"Superclasses","text":"<p>ndi.ontology</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/EMPTY.m/#properties","title":"Properties","text":"Property Description ONTOLOGY_PREFIX OBO_FILE_SUBPATH"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/EMPTY.m/#methods","title":"Methods","text":"Method Description EMPTY Constructor for the EMPTY ontology object. clearCache Clears cached ontology list JSON data and NDIC data. getOntologies Returns the ontology details list from JSON cache. getOntologyNameFromPrefix Extracts prefix, maps to ontology name (case-insensitive). getPrefixOntologyMappings Returns the prefix-&gt;ontology mappings from JSON cache. lookup Look up a term in an ontology using a prefixed string. lookupOBOFile Looks up a term in a parsed OBO file. lookupTermOrID Looks up a term in the local EMPTY.obo file. performIriLookup PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI. preprocessLookupInput PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions. searchOLSAndPerformIRILookup SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI."},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/EMPTY.m/#methods-help","title":"Methods help","text":"<p>EMPTY - Constructor for the EMPTY ontology object.</p> <pre><code>Implicitly calls the superclass constructor ndi.ontology().\n  It also resolves the full path to the OBO file.\n\n    Documentation for ndi.ontology.EMPTY/EMPTY\n       doc ndi.ontology.EMPTY\n</code></pre> <p>clearCache - Clears cached ontology list JSON data and NDIC data.</p> <pre><code>Help for ndi.ontology.EMPTY.clearCache is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologies - Returns the ontology details list from JSON cache.</p> <pre><code>Help for ndi.ontology.EMPTY.getOntologies is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologyNameFromPrefix - Extracts prefix, maps to ontology name (case-insensitive).</p> <pre><code>[...] = ndi.ontology.getOntologyNameFromPrefix(...)\n\nHelp for ndi.ontology.EMPTY.getOntologyNameFromPrefix is inherited from superclass ndi.ontology\n</code></pre> <p>getPrefixOntologyMappings - Returns the prefix-&gt;ontology mappings from JSON cache.</p> <pre><code>Help for ndi.ontology.EMPTY.getPrefixOntologyMappings is inherited from superclass ndi.ontology\n</code></pre> <p>lookup - Look up a term in an ontology using a prefixed string.</p> <pre><code>[ID, NAME, PREFIX, DEFINITION, SYNONYMS, SHORTNAME] = ndi.ontology.lookup(LOOKUPSTRING)\n\n    Looks up a term using a prefixed string (e.g., 'CL:0000000', 'OM:metre').\n    It identifies the ontology from the prefix using the mappings in\n    'ontology_list.json', instantiates the specific ndi.ontology.ONTOLOGYNAME\n    class (e.g., ndi.ontology.CL), and calls its lookupTermOrID instance method,\n    passing the remainder of the string (after the prefix).\n\n    Outputs:\n      ID           - The canonical identifier for the term.\n      NAME         - The primary name or label for the term.\n      PREFIX       - The ontology prefix used in the lookup.\n      DEFINITION   - A textual definition, if available.\n      SYNONYMS     - A cell array of synonyms, if available.\n      SHORTNAME    - The short name for the term.\n\n    Examples:\n        % Lookup neuron in Cell Ontology by ID\n        [id, name, prefix] = ndi.ontology.lookup('CL:0000540');\n        % Expected: id='CL:0000540', name='neuron', prefix='CL'\n\n        % Lookup ethanol in ChEBI by ID\n        [id, name, prefix] = ndi.ontology.lookup('CHEBI:16236');\n        % Expected: id='CHEBI:16236', name='ethanol', prefix='CHEBI'\n\n        % Lookup Heart in NCI Metathesaurus by CUI\n        [id, name, prefix, def] = ndi.ontology.lookup('NCIm:C0018787');\n        % Expected: id='C0018787', name='Heart', prefix='NCIm', def contains definition\n\n        % Lookup Aspirin in PubChem by name\n        [id, name, prefix] = ndi.ontology.lookup('PubChem:Aspirin');\n        % Expected: id='2244', name='aspirin', prefix='PubChem'\n\n        % Lookup Homo sapiens using alternative taxonomy prefix\n        [id, name, prefix] = ndi.ontology.lookup('taxonomy:9606');\n        % Expected: id='9606', name='Homo sapiens', prefix='taxonomy'\n\n        % Example of a failed lookup (non-existent term)\n        try\n            ndi.ontology.lookup('CL:NoSuchTerm');\n        catch ME\n            disp(ME.identifier); % e.g., 'ndi:ontology:lookup_CL:NotFound' or similar\n            disp(ME.message);\n        end\n\n    See also: ndi.ontology.EMPTY.lookupTermOrID (instance method to be overridden)\n\nHelp for ndi.ontology.EMPTY.lookup is inherited from superclass ndi.ontology\n</code></pre> <p>lookupOBOFile - Looks up a term in a parsed OBO file.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = ndi.ontology.lookupOBOFile(...\n        OBOFILEPATH, ONTOLOGYPREFIX, TERM_TO_LOOKUP_FRAGMENT)\n\n    Parses an OBO file (if not already cached) and searches for a term.\n    TERM_TO_LOOKUP_FRAGMENT is the part of the term after the prefix\n    (e.g., '0000001' or 'some term name').\n\n    The function caches the parsed OBO data to speed up subsequent lookups\n    for the same file within a MATLAB session. Call ndi.ontology.clearCache()\n    or 'clear functions' to clear this cache.\n\n    Outputs:\n        ID         - The full term ID (e.g., 'EMPTY:0000001').\n        NAME       - The term's primary name.\n        DEFINITION - The term's definition.\n        SYNONYMS   - A cell array of synonym strings (currently basic,\n                     not parsing synonym types).\n\n    Throws:\n        ndi:ontology:lookupOBOFile:FileNotFound\n        ndi:ontology:lookupOBOFile:ParsingError\n        ndi:ontology:lookupOBOFile:InvalidInput\n        ndi:ontology:lookupOBOFile:TermNotFound\n\nHelp for ndi.ontology.EMPTY.lookupOBOFile is inherited from superclass ndi.ontology\n</code></pre> <p>lookupTermOrID - Looks up a term in the local EMPTY.obo file.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS, SHORTNAME] = lookupTermOrID(OBJ, TERM_OR_ID_OR_NAME_FRAGMENT)\n\n    Overrides the base class method. It uses the static helper\n    ndi.ontology.lookupOBOFile to parse and search the OBO file.\n\n    The input TERM_OR_ID_OR_NAME_FRAGMENT is the part of the original\n    lookup string after the 'EMPTY:' prefix has been removed (e.g.,\n    '00000090' for an ID, or 'Behavioral measurement' for a name).\n\n    See also: ndi.ontology.lookup (static dispatcher),\n              ndi.ontology.lookupOBOFile (static helper)\n</code></pre> <p>performIriLookup - PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI.</p> <pre><code>Used by OLS-based lookup implementations (CL, OM, CHEBI, UBERON).\n    [...] = ndi.ontology.performIriLookup(...)\n\nHelp for ndi.ontology.EMPTY.performIriLookup is inherited from superclass ndi.ontology\n</code></pre> <p>preprocessLookupInput - PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions.</p> <pre><code>Handles standard prefix/ID/name logic and OM-specific heuristic.\n    [...] = ndi.ontology.preprocessLookupInput(...)\n\nHelp for ndi.ontology.EMPTY.preprocessLookupInput is inherited from superclass ndi.ontology\n</code></pre> <p>searchOLSAndPerformIRILookup - SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI.</p> <pre><code>Handles specific logic for non-exact label searches (needed for OM).\n    [...] = ndi.ontology.searchOLSAndPerformIRILookup(...)\n\nHelp for ndi.ontology.EMPTY.searchOLSAndPerformIRILookup is inherited from superclass ndi.ontology\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NCBITaxon.m/","title":"CLASS ndi.ontology.NCBITaxon","text":"<pre><code>  Location: +ndi/+ontology/NCBITaxon.m\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NCBITaxon.m/#superclasses","title":"Superclasses","text":"<p>ndi.ontology</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NCBITaxon.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NCBITaxon.m/#methods","title":"Methods","text":"Method Description NCBITaxon Constructor for the NCBITaxon ontology object. clearCache Clears cached ontology list JSON data and NDIC data. getOntologies Returns the ontology details list from JSON cache. getOntologyNameFromPrefix Extracts prefix, maps to ontology name (case-insensitive). getPrefixOntologyMappings Returns the prefix-&gt;ontology mappings from JSON cache. lookup Look up a term in an ontology using a prefixed string. lookupOBOFile Looks up a term in a parsed OBO file. lookupTermOrID Looks up a term in NCBI Taxonomy by ID or exact scientific name. performIriLookup PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI. preprocessLookupInput PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions. searchOLSAndPerformIRILookup SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI."},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NCBITaxon.m/#methods-help","title":"Methods help","text":"<p>NCBITaxon - Constructor for the NCBITaxon ontology object.</p> <pre><code>Implicitly calls the superclass constructor ndi.ontology().\n\n    Documentation for ndi.ontology.NCBITaxon/NCBITaxon\n       doc ndi.ontology.NCBITaxon\n</code></pre> <p>clearCache - Clears cached ontology list JSON data and NDIC data.</p> <pre><code>Help for ndi.ontology.NCBITaxon.clearCache is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologies - Returns the ontology details list from JSON cache.</p> <pre><code>Help for ndi.ontology.NCBITaxon.getOntologies is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologyNameFromPrefix - Extracts prefix, maps to ontology name (case-insensitive).</p> <pre><code>[...] = ndi.ontology.getOntologyNameFromPrefix(...)\n\nHelp for ndi.ontology.NCBITaxon.getOntologyNameFromPrefix is inherited from superclass ndi.ontology\n</code></pre> <p>getPrefixOntologyMappings - Returns the prefix-&gt;ontology mappings from JSON cache.</p> <pre><code>Help for ndi.ontology.NCBITaxon.getPrefixOntologyMappings is inherited from superclass ndi.ontology\n</code></pre> <p>lookup - Look up a term in an ontology using a prefixed string.</p> <pre><code>[ID, NAME, PREFIX, DEFINITION, SYNONYMS, SHORTNAME] = ndi.ontology.lookup(LOOKUPSTRING)\n\n    Looks up a term using a prefixed string (e.g., 'CL:0000000', 'OM:metre').\n    It identifies the ontology from the prefix using the mappings in\n    'ontology_list.json', instantiates the specific ndi.ontology.ONTOLOGYNAME\n    class (e.g., ndi.ontology.CL), and calls its lookupTermOrID instance method,\n    passing the remainder of the string (after the prefix).\n\n    Outputs:\n      ID           - The canonical identifier for the term.\n      NAME         - The primary name or label for the term.\n      PREFIX       - The ontology prefix used in the lookup.\n      DEFINITION   - A textual definition, if available.\n      SYNONYMS     - A cell array of synonyms, if available.\n      SHORTNAME    - The short name for the term.\n\n    Examples:\n        % Lookup neuron in Cell Ontology by ID\n        [id, name, prefix] = ndi.ontology.lookup('CL:0000540');\n        % Expected: id='CL:0000540', name='neuron', prefix='CL'\n\n        % Lookup ethanol in ChEBI by ID\n        [id, name, prefix] = ndi.ontology.lookup('CHEBI:16236');\n        % Expected: id='CHEBI:16236', name='ethanol', prefix='CHEBI'\n\n        % Lookup Heart in NCI Metathesaurus by CUI\n        [id, name, prefix, def] = ndi.ontology.lookup('NCIm:C0018787');\n        % Expected: id='C0018787', name='Heart', prefix='NCIm', def contains definition\n\n        % Lookup Aspirin in PubChem by name\n        [id, name, prefix] = ndi.ontology.lookup('PubChem:Aspirin');\n        % Expected: id='2244', name='aspirin', prefix='PubChem'\n\n        % Lookup Homo sapiens using alternative taxonomy prefix\n        [id, name, prefix] = ndi.ontology.lookup('taxonomy:9606');\n        % Expected: id='9606', name='Homo sapiens', prefix='taxonomy'\n\n        % Example of a failed lookup (non-existent term)\n        try\n            ndi.ontology.lookup('CL:NoSuchTerm');\n        catch ME\n            disp(ME.identifier); % e.g., 'ndi:ontology:lookup_CL:NotFound' or similar\n            disp(ME.message);\n        end\n\n    See also: ndi.ontology.NCBITaxon.lookupTermOrID (instance method to be overridden)\n\nHelp for ndi.ontology.NCBITaxon.lookup is inherited from superclass ndi.ontology\n</code></pre> <p>lookupOBOFile - Looks up a term in a parsed OBO file.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = ndi.ontology.lookupOBOFile(...\n        OBOFILEPATH, ONTOLOGYPREFIX, TERM_TO_LOOKUP_FRAGMENT)\n\n    Parses an OBO file (if not already cached) and searches for a term.\n    TERM_TO_LOOKUP_FRAGMENT is the part of the term after the prefix\n    (e.g., '0000001' or 'some term name').\n\n    The function caches the parsed OBO data to speed up subsequent lookups\n    for the same file within a MATLAB session. Call ndi.ontology.clearCache()\n    or 'clear functions' to clear this cache.\n\n    Outputs:\n        ID         - The full term ID (e.g., 'EMPTY:0000001').\n        NAME       - The term's primary name.\n        DEFINITION - The term's definition.\n        SYNONYMS   - A cell array of synonym strings (currently basic,\n                     not parsing synonym types).\n\n    Throws:\n        ndi:ontology:lookupOBOFile:FileNotFound\n        ndi:ontology:lookupOBOFile:ParsingError\n        ndi:ontology:lookupOBOFile:InvalidInput\n        ndi:ontology:lookupOBOFile:TermNotFound\n\nHelp for ndi.ontology.NCBITaxon.lookupOBOFile is inherited from superclass ndi.ontology\n</code></pre> <p>lookupTermOrID - Looks up a term in NCBI Taxonomy by ID or exact scientific name.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = lookupTermOrID(OBJ, TERM_OR_ID_OR_NAME)\n\n    Overrides the base class method to provide specific lookup\n    functionality for the NCBI Taxonomy using NCBI E-utilities.\n\n    The input TERM_OR_ID_OR_NAME is the part of the original lookup string\n    after the prefix (e.g., 'NCBITaxon:', 'taxonomy:') has been removed.\n    It should be either a numeric TaxID string (e.g., '9606') or an\n    exact scientific name (e.g., 'Homo sapiens').\n\n    See also: ndi.ontology.lookup (static dispatcher)\n</code></pre> <p>performIriLookup - PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI.</p> <pre><code>Used by OLS-based lookup implementations (CL, OM, CHEBI, UBERON).\n    [...] = ndi.ontology.performIriLookup(...)\n\nHelp for ndi.ontology.NCBITaxon.performIriLookup is inherited from superclass ndi.ontology\n</code></pre> <p>preprocessLookupInput - PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions.</p> <pre><code>Handles standard prefix/ID/name logic and OM-specific heuristic.\n    [...] = ndi.ontology.preprocessLookupInput(...)\n\nHelp for ndi.ontology.NCBITaxon.preprocessLookupInput is inherited from superclass ndi.ontology\n</code></pre> <p>searchOLSAndPerformIRILookup - SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI.</p> <pre><code>Handles specific logic for non-exact label searches (needed for OM).\n    [...] = ndi.ontology.searchOLSAndPerformIRILookup(...)\n\nHelp for ndi.ontology.NCBITaxon.searchOLSAndPerformIRILookup is inherited from superclass ndi.ontology\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NCIT.m/","title":"CLASS ndi.ontology.NCIT","text":"<pre><code>  Location: +ndi/+ontology/NCIT.m\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NCIT.m/#superclasses","title":"Superclasses","text":"<p>ndi.ontology</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NCIT.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NCIT.m/#methods","title":"Methods","text":"Method Description NCIT Constructor for the NCIT ontology object. clearCache Clears cached ontology list JSON data and NDIC data. getOntologies Returns the ontology details list from JSON cache. getOntologyNameFromPrefix Extracts prefix, maps to ontology name (case-insensitive). getPrefixOntologyMappings Returns the prefix-&gt;ontology mappings from JSON cache. lookup Look up a term in an ontology using a prefixed string. lookupOBOFile Looks up a term in a parsed OBO file. lookupTermOrID Looks up a term in the NCIT ontology. performIriLookup PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI. preprocessLookupInput PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions. searchOLSAndPerformIRILookup SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI."},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NCIT.m/#methods-help","title":"Methods help","text":"<p>NCIT - Constructor for the NCIT ontology object.</p> <pre><code>Implicitly calls the superclass constructor ndi.ontology().\n\n    Documentation for ndi.ontology.NCIT/NCIT\n       doc ndi.ontology.NCIT\n</code></pre> <p>clearCache - Clears cached ontology list JSON data and NDIC data.</p> <pre><code>Help for ndi.ontology.NCIT.clearCache is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologies - Returns the ontology details list from JSON cache.</p> <pre><code>Help for ndi.ontology.NCIT.getOntologies is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologyNameFromPrefix - Extracts prefix, maps to ontology name (case-insensitive).</p> <pre><code>[...] = ndi.ontology.getOntologyNameFromPrefix(...)\n\nHelp for ndi.ontology.NCIT.getOntologyNameFromPrefix is inherited from superclass ndi.ontology\n</code></pre> <p>getPrefixOntologyMappings - Returns the prefix-&gt;ontology mappings from JSON cache.</p> <pre><code>Help for ndi.ontology.NCIT.getPrefixOntologyMappings is inherited from superclass ndi.ontology\n</code></pre> <p>lookup - Look up a term in an ontology using a prefixed string.</p> <pre><code>[ID, NAME, PREFIX, DEFINITION, SYNONYMS, SHORTNAME] = ndi.ontology.lookup(LOOKUPSTRING)\n\n    Looks up a term using a prefixed string (e.g., 'CL:0000000', 'OM:metre').\n    It identifies the ontology from the prefix using the mappings in\n    'ontology_list.json', instantiates the specific ndi.ontology.ONTOLOGYNAME\n    class (e.g., ndi.ontology.CL), and calls its lookupTermOrID instance method,\n    passing the remainder of the string (after the prefix).\n\n    Outputs:\n      ID           - The canonical identifier for the term.\n      NAME         - The primary name or label for the term.\n      PREFIX       - The ontology prefix used in the lookup.\n      DEFINITION   - A textual definition, if available.\n      SYNONYMS     - A cell array of synonyms, if available.\n      SHORTNAME    - The short name for the term.\n\n    Examples:\n        % Lookup neuron in Cell Ontology by ID\n        [id, name, prefix] = ndi.ontology.lookup('CL:0000540');\n        % Expected: id='CL:0000540', name='neuron', prefix='CL'\n\n        % Lookup ethanol in ChEBI by ID\n        [id, name, prefix] = ndi.ontology.lookup('CHEBI:16236');\n        % Expected: id='CHEBI:16236', name='ethanol', prefix='CHEBI'\n\n        % Lookup Heart in NCI Metathesaurus by CUI\n        [id, name, prefix, def] = ndi.ontology.lookup('NCIm:C0018787');\n        % Expected: id='C0018787', name='Heart', prefix='NCIm', def contains definition\n\n        % Lookup Aspirin in PubChem by name\n        [id, name, prefix] = ndi.ontology.lookup('PubChem:Aspirin');\n        % Expected: id='2244', name='aspirin', prefix='PubChem'\n\n        % Lookup Homo sapiens using alternative taxonomy prefix\n        [id, name, prefix] = ndi.ontology.lookup('taxonomy:9606');\n        % Expected: id='9606', name='Homo sapiens', prefix='taxonomy'\n\n        % Example of a failed lookup (non-existent term)\n        try\n            ndi.ontology.lookup('CL:NoSuchTerm');\n        catch ME\n            disp(ME.identifier); % e.g., 'ndi:ontology:lookup_CL:NotFound' or similar\n            disp(ME.message);\n        end\n\n    See also: ndi.ontology.NCIT.lookupTermOrID (instance method to be overridden)\n\nHelp for ndi.ontology.NCIT.lookup is inherited from superclass ndi.ontology\n</code></pre> <p>lookupOBOFile - Looks up a term in a parsed OBO file.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = ndi.ontology.lookupOBOFile(...\n        OBOFILEPATH, ONTOLOGYPREFIX, TERM_TO_LOOKUP_FRAGMENT)\n\n    Parses an OBO file (if not already cached) and searches for a term.\n    TERM_TO_LOOKUP_FRAGMENT is the part of the term after the prefix\n    (e.g., '0000001' or 'some term name').\n\n    The function caches the parsed OBO data to speed up subsequent lookups\n    for the same file within a MATLAB session. Call ndi.ontology.clearCache()\n    or 'clear functions' to clear this cache.\n\n    Outputs:\n        ID         - The full term ID (e.g., 'EMPTY:0000001').\n        NAME       - The term's primary name.\n        DEFINITION - The term's definition.\n        SYNONYMS   - A cell array of synonym strings (currently basic,\n                     not parsing synonym types).\n\n    Throws:\n        ndi:ontology:lookupOBOFile:FileNotFound\n        ndi:ontology:lookupOBOFile:ParsingError\n        ndi:ontology:lookupOBOFile:InvalidInput\n        ndi:ontology:lookupOBOFile:TermNotFound\n\nHelp for ndi.ontology.NCIT.lookupOBOFile is inherited from superclass ndi.ontology\n</code></pre> <p>lookupTermOrID - Looks up a term in the NCIT ontology.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = lookupTermOrID(OBJ, TERM_OR_ID_OR_NAME)\n\n    Overrides the base class method to provide specific lookup functionality\n    for the NCIT ontology using the EBI OLS API via static helper methods\n    from the ndi.ontology base class.\n\n    The input TERM_OR_ID_OR_NAME is the part of the original lookup string\n    after the 'NCIT:' prefix has been removed (e.g., 'C9523' for an ID,\n    or 'Neoplasm' for a name/label search).\n\n    Example Usage (after being called by ndi.ontology.lookup):\n    [id, name, ~, def] = ndi.ontology.lookup('NCIT:C9523'); % Stage I Esophageal Cancer\n    [id, name, ~, def] = ndi.ontology.lookup('NCIT:Neoplasm'); % Neoplasm\n\n    See also: ndi.ontology.lookup (static dispatcher),\n              ndi.ontology.preprocessLookupInput (static helper),\n              ndi.ontology.searchOLSAndPerformIRILookup (static helper)\n</code></pre> <p>performIriLookup - PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI.</p> <pre><code>Used by OLS-based lookup implementations (CL, OM, CHEBI, UBERON).\n    [...] = ndi.ontology.performIriLookup(...)\n\nHelp for ndi.ontology.NCIT.performIriLookup is inherited from superclass ndi.ontology\n</code></pre> <p>preprocessLookupInput - PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions.</p> <pre><code>Handles standard prefix/ID/name logic and OM-specific heuristic.\n    [...] = ndi.ontology.preprocessLookupInput(...)\n\nHelp for ndi.ontology.NCIT.preprocessLookupInput is inherited from superclass ndi.ontology\n</code></pre> <p>searchOLSAndPerformIRILookup - SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI.</p> <pre><code>Handles specific logic for non-exact label searches (needed for OM).\n    [...] = ndi.ontology.searchOLSAndPerformIRILookup(...)\n\nHelp for ndi.ontology.NCIT.searchOLSAndPerformIRILookup is inherited from superclass ndi.ontology\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NCIm.m/","title":"CLASS ndi.ontology.NCIm","text":"<pre><code>  Location: +ndi/+ontology/NCIm.m\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NCIm.m/#superclasses","title":"Superclasses","text":"<p>ndi.ontology</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NCIm.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NCIm.m/#methods","title":"Methods","text":"Method Description NCIm Constructor for the NCIm ontology object. clearCache Clears cached ontology list JSON data and NDIC data. getOntologies Returns the ontology details list from JSON cache. getOntologyNameFromPrefix Extracts prefix, maps to ontology name (case-insensitive). getPrefixOntologyMappings Returns the prefix-&gt;ontology mappings from JSON cache. lookup Look up a term in an ontology using a prefixed string. lookupOBOFile Looks up a term in a parsed OBO file. lookupTermOrID Looks up a term in NCI Metathesaurus by CUI or exact name. performIriLookup PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI. preprocessLookupInput PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions. searchOLSAndPerformIRILookup SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI."},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NCIm.m/#methods-help","title":"Methods help","text":"<p>NCIm - Constructor for the NCIm ontology object.</p> <pre><code>Implicitly calls the superclass constructor ndi.ontology().\n\n    Documentation for ndi.ontology.NCIm/NCIm\n       doc ndi.ontology.NCIm\n</code></pre> <p>clearCache - Clears cached ontology list JSON data and NDIC data.</p> <pre><code>Help for ndi.ontology.NCIm.clearCache is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologies - Returns the ontology details list from JSON cache.</p> <pre><code>Help for ndi.ontology.NCIm.getOntologies is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologyNameFromPrefix - Extracts prefix, maps to ontology name (case-insensitive).</p> <pre><code>[...] = ndi.ontology.getOntologyNameFromPrefix(...)\n\nHelp for ndi.ontology.NCIm.getOntologyNameFromPrefix is inherited from superclass ndi.ontology\n</code></pre> <p>getPrefixOntologyMappings - Returns the prefix-&gt;ontology mappings from JSON cache.</p> <pre><code>Help for ndi.ontology.NCIm.getPrefixOntologyMappings is inherited from superclass ndi.ontology\n</code></pre> <p>lookup - Look up a term in an ontology using a prefixed string.</p> <pre><code>[ID, NAME, PREFIX, DEFINITION, SYNONYMS, SHORTNAME] = ndi.ontology.lookup(LOOKUPSTRING)\n\n    Looks up a term using a prefixed string (e.g., 'CL:0000000', 'OM:metre').\n    It identifies the ontology from the prefix using the mappings in\n    'ontology_list.json', instantiates the specific ndi.ontology.ONTOLOGYNAME\n    class (e.g., ndi.ontology.CL), and calls its lookupTermOrID instance method,\n    passing the remainder of the string (after the prefix).\n\n    Outputs:\n      ID           - The canonical identifier for the term.\n      NAME         - The primary name or label for the term.\n      PREFIX       - The ontology prefix used in the lookup.\n      DEFINITION   - A textual definition, if available.\n      SYNONYMS     - A cell array of synonyms, if available.\n      SHORTNAME    - The short name for the term.\n\n    Examples:\n        % Lookup neuron in Cell Ontology by ID\n        [id, name, prefix] = ndi.ontology.lookup('CL:0000540');\n        % Expected: id='CL:0000540', name='neuron', prefix='CL'\n\n        % Lookup ethanol in ChEBI by ID\n        [id, name, prefix] = ndi.ontology.lookup('CHEBI:16236');\n        % Expected: id='CHEBI:16236', name='ethanol', prefix='CHEBI'\n\n        % Lookup Heart in NCI Metathesaurus by CUI\n        [id, name, prefix, def] = ndi.ontology.lookup('NCIm:C0018787');\n        % Expected: id='C0018787', name='Heart', prefix='NCIm', def contains definition\n\n        % Lookup Aspirin in PubChem by name\n        [id, name, prefix] = ndi.ontology.lookup('PubChem:Aspirin');\n        % Expected: id='2244', name='aspirin', prefix='PubChem'\n\n        % Lookup Homo sapiens using alternative taxonomy prefix\n        [id, name, prefix] = ndi.ontology.lookup('taxonomy:9606');\n        % Expected: id='9606', name='Homo sapiens', prefix='taxonomy'\n\n        % Example of a failed lookup (non-existent term)\n        try\n            ndi.ontology.lookup('CL:NoSuchTerm');\n        catch ME\n            disp(ME.identifier); % e.g., 'ndi:ontology:lookup_CL:NotFound' or similar\n            disp(ME.message);\n        end\n\n    See also: ndi.ontology.NCIm.lookupTermOrID (instance method to be overridden)\n\nHelp for ndi.ontology.NCIm.lookup is inherited from superclass ndi.ontology\n</code></pre> <p>lookupOBOFile - Looks up a term in a parsed OBO file.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = ndi.ontology.lookupOBOFile(...\n        OBOFILEPATH, ONTOLOGYPREFIX, TERM_TO_LOOKUP_FRAGMENT)\n\n    Parses an OBO file (if not already cached) and searches for a term.\n    TERM_TO_LOOKUP_FRAGMENT is the part of the term after the prefix\n    (e.g., '0000001' or 'some term name').\n\n    The function caches the parsed OBO data to speed up subsequent lookups\n    for the same file within a MATLAB session. Call ndi.ontology.clearCache()\n    or 'clear functions' to clear this cache.\n\n    Outputs:\n        ID         - The full term ID (e.g., 'EMPTY:0000001').\n        NAME       - The term's primary name.\n        DEFINITION - The term's definition.\n        SYNONYMS   - A cell array of synonym strings (currently basic,\n                     not parsing synonym types).\n\n    Throws:\n        ndi:ontology:lookupOBOFile:FileNotFound\n        ndi:ontology:lookupOBOFile:ParsingError\n        ndi:ontology:lookupOBOFile:InvalidInput\n        ndi:ontology:lookupOBOFile:TermNotFound\n\nHelp for ndi.ontology.NCIm.lookupOBOFile is inherited from superclass ndi.ontology\n</code></pre> <p>lookupTermOrID - Looks up a term in NCI Metathesaurus by CUI or exact name.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = lookupTermOrID(OBJ, TERM_OR_ID_OR_NAME)\n\n    Overrides the base class method to provide specific lookup\n    functionality for the NCIm terminology using the NCI EVS API.\n\n    The input TERM_OR_ID_OR_NAME is the part of the original lookup string\n    after the 'NCIm:' prefix has been removed (e.g., 'C0018787' or 'Heart').\n\n    See also: ndi.ontology.lookup (static dispatcher)\n</code></pre> <p>performIriLookup - PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI.</p> <pre><code>Used by OLS-based lookup implementations (CL, OM, CHEBI, UBERON).\n    [...] = ndi.ontology.performIriLookup(...)\n\nHelp for ndi.ontology.NCIm.performIriLookup is inherited from superclass ndi.ontology\n</code></pre> <p>preprocessLookupInput - PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions.</p> <pre><code>Handles standard prefix/ID/name logic and OM-specific heuristic.\n    [...] = ndi.ontology.preprocessLookupInput(...)\n\nHelp for ndi.ontology.NCIm.preprocessLookupInput is inherited from superclass ndi.ontology\n</code></pre> <p>searchOLSAndPerformIRILookup - SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI.</p> <pre><code>Handles specific logic for non-exact label searches (needed for OM).\n    [...] = ndi.ontology.searchOLSAndPerformIRILookup(...)\n\nHelp for ndi.ontology.NCIm.searchOLSAndPerformIRILookup is inherited from superclass ndi.ontology\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NDIC.m/","title":"CLASS ndi.ontology.NDIC","text":"<pre><code>  Location: +ndi/+ontology/NDIC.m\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NDIC.m/#superclasses","title":"Superclasses","text":"<p>ndi.ontology</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NDIC.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NDIC.m/#methods","title":"Methods","text":"Method Description NDIC Constructor for the NDIC ontology object. clearCache Clears cached ontology list JSON data and NDIC data. getOntologies Returns the ontology details list from JSON cache. getOntologyNameFromPrefix Extracts prefix, maps to ontology name (case-insensitive). getPrefixOntologyMappings Returns the prefix-&gt;ontology mappings from JSON cache. lookup Look up a term in an ontology using a prefixed string. lookupOBOFile Looks up a term in a parsed OBO file. lookupTermOrID Looks up a term in the NDIC ontology file by ID or name. performIriLookup PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI. preprocessLookupInput PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions. searchOLSAndPerformIRILookup SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI."},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/NDIC.m/#methods-help","title":"Methods help","text":"<p>NDIC - Constructor for the NDIC ontology object.</p> <pre><code>Implicitly calls the superclass constructor ndi.ontology().\n\n    Documentation for ndi.ontology.NDIC/NDIC\n       doc ndi.ontology.NDIC\n</code></pre> <p>clearCache - Clears cached ontology list JSON data and NDIC data.</p> <pre><code>Help for ndi.ontology.NDIC.clearCache is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologies - Returns the ontology details list from JSON cache.</p> <pre><code>Help for ndi.ontology.NDIC.getOntologies is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologyNameFromPrefix - Extracts prefix, maps to ontology name (case-insensitive).</p> <pre><code>[...] = ndi.ontology.getOntologyNameFromPrefix(...)\n\nHelp for ndi.ontology.NDIC.getOntologyNameFromPrefix is inherited from superclass ndi.ontology\n</code></pre> <p>getPrefixOntologyMappings - Returns the prefix-&gt;ontology mappings from JSON cache.</p> <pre><code>Help for ndi.ontology.NDIC.getPrefixOntologyMappings is inherited from superclass ndi.ontology\n</code></pre> <p>lookup - Look up a term in an ontology using a prefixed string.</p> <pre><code>[ID, NAME, PREFIX, DEFINITION, SYNONYMS, SHORTNAME] = ndi.ontology.lookup(LOOKUPSTRING)\n\n    Looks up a term using a prefixed string (e.g., 'CL:0000000', 'OM:metre').\n    It identifies the ontology from the prefix using the mappings in\n    'ontology_list.json', instantiates the specific ndi.ontology.ONTOLOGYNAME\n    class (e.g., ndi.ontology.CL), and calls its lookupTermOrID instance method,\n    passing the remainder of the string (after the prefix).\n\n    Outputs:\n      ID           - The canonical identifier for the term.\n      NAME         - The primary name or label for the term.\n      PREFIX       - The ontology prefix used in the lookup.\n      DEFINITION   - A textual definition, if available.\n      SYNONYMS     - A cell array of synonyms, if available.\n      SHORTNAME    - The short name for the term.\n\n    Examples:\n        % Lookup neuron in Cell Ontology by ID\n        [id, name, prefix] = ndi.ontology.lookup('CL:0000540');\n        % Expected: id='CL:0000540', name='neuron', prefix='CL'\n\n        % Lookup ethanol in ChEBI by ID\n        [id, name, prefix] = ndi.ontology.lookup('CHEBI:16236');\n        % Expected: id='CHEBI:16236', name='ethanol', prefix='CHEBI'\n\n        % Lookup Heart in NCI Metathesaurus by CUI\n        [id, name, prefix, def] = ndi.ontology.lookup('NCIm:C0018787');\n        % Expected: id='C0018787', name='Heart', prefix='NCIm', def contains definition\n\n        % Lookup Aspirin in PubChem by name\n        [id, name, prefix] = ndi.ontology.lookup('PubChem:Aspirin');\n        % Expected: id='2244', name='aspirin', prefix='PubChem'\n\n        % Lookup Homo sapiens using alternative taxonomy prefix\n        [id, name, prefix] = ndi.ontology.lookup('taxonomy:9606');\n        % Expected: id='9606', name='Homo sapiens', prefix='taxonomy'\n\n        % Example of a failed lookup (non-existent term)\n        try\n            ndi.ontology.lookup('CL:NoSuchTerm');\n        catch ME\n            disp(ME.identifier); % e.g., 'ndi:ontology:lookup_CL:NotFound' or similar\n            disp(ME.message);\n        end\n\n    See also: ndi.ontology.NDIC.lookupTermOrID (instance method to be overridden)\n\nHelp for ndi.ontology.NDIC.lookup is inherited from superclass ndi.ontology\n</code></pre> <p>lookupOBOFile - Looks up a term in a parsed OBO file.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = ndi.ontology.lookupOBOFile(...\n        OBOFILEPATH, ONTOLOGYPREFIX, TERM_TO_LOOKUP_FRAGMENT)\n\n    Parses an OBO file (if not already cached) and searches for a term.\n    TERM_TO_LOOKUP_FRAGMENT is the part of the term after the prefix\n    (e.g., '0000001' or 'some term name').\n\n    The function caches the parsed OBO data to speed up subsequent lookups\n    for the same file within a MATLAB session. Call ndi.ontology.clearCache()\n    or 'clear functions' to clear this cache.\n\n    Outputs:\n        ID         - The full term ID (e.g., 'EMPTY:0000001').\n        NAME       - The term's primary name.\n        DEFINITION - The term's definition.\n        SYNONYMS   - A cell array of synonym strings (currently basic,\n                     not parsing synonym types).\n\n    Throws:\n        ndi:ontology:lookupOBOFile:FileNotFound\n        ndi:ontology:lookupOBOFile:ParsingError\n        ndi:ontology:lookupOBOFile:InvalidInput\n        ndi:ontology:lookupOBOFile:TermNotFound\n\nHelp for ndi.ontology.NDIC.lookupOBOFile is inherited from superclass ndi.ontology\n</code></pre> <p>lookupTermOrID - Looks up a term in the NDIC ontology file by ID or name.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = lookupTermOrID(OBJ, TERM_OR_ID_OR_NAME)\n\n    Overrides the base class method to provide specific lookup\n    functionality for the NDIC ontology using the local text file.\n\n    The input TERM_OR_ID_OR_NAME is the part of the original lookup string\n    after the 'NDIC:' prefix has been removed (e.g., '8' or 'Postnatal day').\n\n    See also: ndi.ontology.lookup (static dispatcher)\n</code></pre> <p>performIriLookup - PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI.</p> <pre><code>Used by OLS-based lookup implementations (CL, OM, CHEBI, UBERON).\n    [...] = ndi.ontology.performIriLookup(...)\n\nHelp for ndi.ontology.NDIC.performIriLookup is inherited from superclass ndi.ontology\n</code></pre> <p>preprocessLookupInput - PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions.</p> <pre><code>Handles standard prefix/ID/name logic and OM-specific heuristic.\n    [...] = ndi.ontology.preprocessLookupInput(...)\n\nHelp for ndi.ontology.NDIC.preprocessLookupInput is inherited from superclass ndi.ontology\n</code></pre> <p>searchOLSAndPerformIRILookup - SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI.</p> <pre><code>Handles specific logic for non-exact label searches (needed for OM).\n    [...] = ndi.ontology.searchOLSAndPerformIRILookup(...)\n\nHelp for ndi.ontology.NDIC.searchOLSAndPerformIRILookup is inherited from superclass ndi.ontology\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/OM.m/","title":"CLASS ndi.ontology.OM","text":"<pre><code>  Location: +ndi/+ontology/OM.m\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/OM.m/#superclasses","title":"Superclasses","text":"<p>ndi.ontology</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/OM.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/OM.m/#methods","title":"Methods","text":"Method Description OM Constructor for the OM ontology object. clearCache Clears cached ontology list JSON data and NDIC data. getOntologies Returns the ontology details list from JSON cache. getOntologyNameFromPrefix Extracts prefix, maps to ontology name (case-insensitive). getPrefixOntologyMappings Returns the prefix-&gt;ontology mappings from JSON cache. lookup Look up a term in an ontology using a prefixed string. lookupOBOFile Looks up a term in a parsed OBO file. lookupTermOrID Looks up a unit in the OM ontology by name/term. performIriLookup PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI. preprocessLookupInput PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions. searchOLSAndPerformIRILookup SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI."},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/OM.m/#methods-help","title":"Methods help","text":"<p>OM - Constructor for the OM ontology object.</p> <pre><code>Implicitly calls the superclass constructor ndi.ontology().\n\n    Documentation for ndi.ontology.OM/OM\n       doc ndi.ontology.OM\n</code></pre> <p>clearCache - Clears cached ontology list JSON data and NDIC data.</p> <pre><code>Help for ndi.ontology.OM.clearCache is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologies - Returns the ontology details list from JSON cache.</p> <pre><code>Help for ndi.ontology.OM.getOntologies is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologyNameFromPrefix - Extracts prefix, maps to ontology name (case-insensitive).</p> <pre><code>[...] = ndi.ontology.getOntologyNameFromPrefix(...)\n\nHelp for ndi.ontology.OM.getOntologyNameFromPrefix is inherited from superclass ndi.ontology\n</code></pre> <p>getPrefixOntologyMappings - Returns the prefix-&gt;ontology mappings from JSON cache.</p> <pre><code>Help for ndi.ontology.OM.getPrefixOntologyMappings is inherited from superclass ndi.ontology\n</code></pre> <p>lookup - Look up a term in an ontology using a prefixed string.</p> <pre><code>[ID, NAME, PREFIX, DEFINITION, SYNONYMS, SHORTNAME] = ndi.ontology.lookup(LOOKUPSTRING)\n\n    Looks up a term using a prefixed string (e.g., 'CL:0000000', 'OM:metre').\n    It identifies the ontology from the prefix using the mappings in\n    'ontology_list.json', instantiates the specific ndi.ontology.ONTOLOGYNAME\n    class (e.g., ndi.ontology.CL), and calls its lookupTermOrID instance method,\n    passing the remainder of the string (after the prefix).\n\n    Outputs:\n      ID           - The canonical identifier for the term.\n      NAME         - The primary name or label for the term.\n      PREFIX       - The ontology prefix used in the lookup.\n      DEFINITION   - A textual definition, if available.\n      SYNONYMS     - A cell array of synonyms, if available.\n      SHORTNAME    - The short name for the term.\n\n    Examples:\n        % Lookup neuron in Cell Ontology by ID\n        [id, name, prefix] = ndi.ontology.lookup('CL:0000540');\n        % Expected: id='CL:0000540', name='neuron', prefix='CL'\n\n        % Lookup ethanol in ChEBI by ID\n        [id, name, prefix] = ndi.ontology.lookup('CHEBI:16236');\n        % Expected: id='CHEBI:16236', name='ethanol', prefix='CHEBI'\n\n        % Lookup Heart in NCI Metathesaurus by CUI\n        [id, name, prefix, def] = ndi.ontology.lookup('NCIm:C0018787');\n        % Expected: id='C0018787', name='Heart', prefix='NCIm', def contains definition\n\n        % Lookup Aspirin in PubChem by name\n        [id, name, prefix] = ndi.ontology.lookup('PubChem:Aspirin');\n        % Expected: id='2244', name='aspirin', prefix='PubChem'\n\n        % Lookup Homo sapiens using alternative taxonomy prefix\n        [id, name, prefix] = ndi.ontology.lookup('taxonomy:9606');\n        % Expected: id='9606', name='Homo sapiens', prefix='taxonomy'\n\n        % Example of a failed lookup (non-existent term)\n        try\n            ndi.ontology.lookup('CL:NoSuchTerm');\n        catch ME\n            disp(ME.identifier); % e.g., 'ndi:ontology:lookup_CL:NotFound' or similar\n            disp(ME.message);\n        end\n\n    See also: ndi.ontology.OM.lookupTermOrID (instance method to be overridden)\n\nHelp for ndi.ontology.OM.lookup is inherited from superclass ndi.ontology\n</code></pre> <p>lookupOBOFile - Looks up a term in a parsed OBO file.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = ndi.ontology.lookupOBOFile(...\n        OBOFILEPATH, ONTOLOGYPREFIX, TERM_TO_LOOKUP_FRAGMENT)\n\n    Parses an OBO file (if not already cached) and searches for a term.\n    TERM_TO_LOOKUP_FRAGMENT is the part of the term after the prefix\n    (e.g., '0000001' or 'some term name').\n\n    The function caches the parsed OBO data to speed up subsequent lookups\n    for the same file within a MATLAB session. Call ndi.ontology.clearCache()\n    or 'clear functions' to clear this cache.\n\n    Outputs:\n        ID         - The full term ID (e.g., 'EMPTY:0000001').\n        NAME       - The term's primary name.\n        DEFINITION - The term's definition.\n        SYNONYMS   - A cell array of synonym strings (currently basic,\n                     not parsing synonym types).\n\n    Throws:\n        ndi:ontology:lookupOBOFile:FileNotFound\n        ndi:ontology:lookupOBOFile:ParsingError\n        ndi:ontology:lookupOBOFile:InvalidInput\n        ndi:ontology:lookupOBOFile:TermNotFound\n\nHelp for ndi.ontology.OM.lookupOBOFile is inherited from superclass ndi.ontology\n</code></pre> <p>lookupTermOrID - Looks up a unit in the OM ontology by name/term.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = lookupTermOrID(OBJ, TERM_OR_ID_OR_NAME)\n\n    Overrides the base class method to provide specific lookup functionality\n    for the OM ontology using the EBI OLS API via static helper methods\n    from the ndi.ontology base class. It relies on the OM-specific logic\n    within ndi.ontology.preprocessLookupInput.\n\n    The input TERM_OR_ID_OR_NAME is the part of the original lookup string\n    after the 'OM:' prefix has been removed (e.g., 'metre', 'Metre', 'MolarVolumeUnit').\n    Purely numeric inputs are rejected during preprocessing.\n\n    See also: ndi.ontology.lookup (static dispatcher),\n              ndi.ontology.preprocessLookupInput (static helper),\n              ndi.ontology.searchOLSAndPerformIRILookup (static helper)\n</code></pre> <p>performIriLookup - PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI.</p> <pre><code>Used by OLS-based lookup implementations (CL, OM, CHEBI, UBERON).\n    [...] = ndi.ontology.performIriLookup(...)\n\nHelp for ndi.ontology.OM.performIriLookup is inherited from superclass ndi.ontology\n</code></pre> <p>preprocessLookupInput - PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions.</p> <pre><code>Handles standard prefix/ID/name logic and OM-specific heuristic.\n    [...] = ndi.ontology.preprocessLookupInput(...)\n\nHelp for ndi.ontology.OM.preprocessLookupInput is inherited from superclass ndi.ontology\n</code></pre> <p>searchOLSAndPerformIRILookup - SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI.</p> <pre><code>Handles specific logic for non-exact label searches (needed for OM).\n    [...] = ndi.ontology.searchOLSAndPerformIRILookup(...)\n\nHelp for ndi.ontology.OM.searchOLSAndPerformIRILookup is inherited from superclass ndi.ontology\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/PATO.m/","title":"CLASS ndi.ontology.PATO","text":"<pre><code>  Location: +ndi/+ontology/PATO.m\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/PATO.m/#superclasses","title":"Superclasses","text":"<p>ndi.ontology</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/PATO.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/PATO.m/#methods","title":"Methods","text":"Method Description PATO Constructor for the PATO ontology object. clearCache Clears cached ontology list JSON data and NDIC data. getOntologies Returns the ontology details list from JSON cache. getOntologyNameFromPrefix Extracts prefix, maps to ontology name (case-insensitive). getPrefixOntologyMappings Returns the prefix-&gt;ontology mappings from JSON cache. lookup Look up a term in an ontology using a prefixed string. lookupOBOFile Looks up a term in a parsed OBO file. lookupTermOrID Looks up a term in the PATO ontology. performIriLookup PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI. preprocessLookupInput PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions. searchOLSAndPerformIRILookup SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI."},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/PATO.m/#methods-help","title":"Methods help","text":"<p>PATO - Constructor for the PATO ontology object.</p> <pre><code>Implicitly calls the superclass constructor ndi.ontology().\n\n    Documentation for ndi.ontology.PATO/PATO\n       doc ndi.ontology.PATO\n</code></pre> <p>clearCache - Clears cached ontology list JSON data and NDIC data.</p> <pre><code>Help for ndi.ontology.PATO.clearCache is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologies - Returns the ontology details list from JSON cache.</p> <pre><code>Help for ndi.ontology.PATO.getOntologies is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologyNameFromPrefix - Extracts prefix, maps to ontology name (case-insensitive).</p> <pre><code>[...] = ndi.ontology.getOntologyNameFromPrefix(...)\n\nHelp for ndi.ontology.PATO.getOntologyNameFromPrefix is inherited from superclass ndi.ontology\n</code></pre> <p>getPrefixOntologyMappings - Returns the prefix-&gt;ontology mappings from JSON cache.</p> <pre><code>Help for ndi.ontology.PATO.getPrefixOntologyMappings is inherited from superclass ndi.ontology\n</code></pre> <p>lookup - Look up a term in an ontology using a prefixed string.</p> <pre><code>[ID, NAME, PREFIX, DEFINITION, SYNONYMS, SHORTNAME] = ndi.ontology.lookup(LOOKUPSTRING)\n\n    Looks up a term using a prefixed string (e.g., 'CL:0000000', 'OM:metre').\n    It identifies the ontology from the prefix using the mappings in\n    'ontology_list.json', instantiates the specific ndi.ontology.ONTOLOGYNAME\n    class (e.g., ndi.ontology.CL), and calls its lookupTermOrID instance method,\n    passing the remainder of the string (after the prefix).\n\n    Outputs:\n      ID           - The canonical identifier for the term.\n      NAME         - The primary name or label for the term.\n      PREFIX       - The ontology prefix used in the lookup.\n      DEFINITION   - A textual definition, if available.\n      SYNONYMS     - A cell array of synonyms, if available.\n      SHORTNAME    - The short name for the term.\n\n    Examples:\n        % Lookup neuron in Cell Ontology by ID\n        [id, name, prefix] = ndi.ontology.lookup('CL:0000540');\n        % Expected: id='CL:0000540', name='neuron', prefix='CL'\n\n        % Lookup ethanol in ChEBI by ID\n        [id, name, prefix] = ndi.ontology.lookup('CHEBI:16236');\n        % Expected: id='CHEBI:16236', name='ethanol', prefix='CHEBI'\n\n        % Lookup Heart in NCI Metathesaurus by CUI\n        [id, name, prefix, def] = ndi.ontology.lookup('NCIm:C0018787');\n        % Expected: id='C0018787', name='Heart', prefix='NCIm', def contains definition\n\n        % Lookup Aspirin in PubChem by name\n        [id, name, prefix] = ndi.ontology.lookup('PubChem:Aspirin');\n        % Expected: id='2244', name='aspirin', prefix='PubChem'\n\n        % Lookup Homo sapiens using alternative taxonomy prefix\n        [id, name, prefix] = ndi.ontology.lookup('taxonomy:9606');\n        % Expected: id='9606', name='Homo sapiens', prefix='taxonomy'\n\n        % Example of a failed lookup (non-existent term)\n        try\n            ndi.ontology.lookup('CL:NoSuchTerm');\n        catch ME\n            disp(ME.identifier); % e.g., 'ndi:ontology:lookup_CL:NotFound' or similar\n            disp(ME.message);\n        end\n\n    See also: ndi.ontology.PATO.lookupTermOrID (instance method to be overridden)\n\nHelp for ndi.ontology.PATO.lookup is inherited from superclass ndi.ontology\n</code></pre> <p>lookupOBOFile - Looks up a term in a parsed OBO file.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = ndi.ontology.lookupOBOFile(...\n        OBOFILEPATH, ONTOLOGYPREFIX, TERM_TO_LOOKUP_FRAGMENT)\n\n    Parses an OBO file (if not already cached) and searches for a term.\n    TERM_TO_LOOKUP_FRAGMENT is the part of the term after the prefix\n    (e.g., '0000001' or 'some term name').\n\n    The function caches the parsed OBO data to speed up subsequent lookups\n    for the same file within a MATLAB session. Call ndi.ontology.clearCache()\n    or 'clear functions' to clear this cache.\n\n    Outputs:\n        ID         - The full term ID (e.g., 'EMPTY:0000001').\n        NAME       - The term's primary name.\n        DEFINITION - The term's definition.\n        SYNONYMS   - A cell array of synonym strings (currently basic,\n                     not parsing synonym types).\n\n    Throws:\n        ndi:ontology:lookupOBOFile:FileNotFound\n        ndi:ontology:lookupOBOFile:ParsingError\n        ndi:ontology:lookupOBOFile:InvalidInput\n        ndi:ontology:lookupOBOFile:TermNotFound\n\nHelp for ndi.ontology.PATO.lookupOBOFile is inherited from superclass ndi.ontology\n</code></pre> <p>lookupTermOrID - Looks up a term in the PATO ontology.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = lookupTermOrID(OBJ, TERM_OR_ID_OR_NAME)\n\n    Overrides the base class method to provide specific lookup functionality\n    for the PATO ontology using the EBI OLS API via static helper methods\n    from the ndi.ontology base class.\n\n    The input TERM_OR_ID_OR_NAME is the part of the original lookup string\n    after the 'PATO:' prefix has been removed (e.g., '0000001' for an ID,\n    or 'color' for a name/label search).\n\n    Example Usage (after being called by ndi.ontology.lookup):\n    [id, name, ~, def] = ndi.ontology.lookup('PATO:0000012'); % quality\n    [id, name, ~, def] = ndi.ontology.lookup('PATO:color');   % color\n\n    See also: ndi.ontology.lookup (static dispatcher),\n              ndi.ontology.preprocessLookupInput (static helper),\n              ndi.ontology.searchOLSAndPerformIRILookup (static helper)\n</code></pre> <p>performIriLookup - PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI.</p> <pre><code>Used by OLS-based lookup implementations (CL, OM, CHEBI, UBERON).\n    [...] = ndi.ontology.performIriLookup(...)\n\nHelp for ndi.ontology.PATO.performIriLookup is inherited from superclass ndi.ontology\n</code></pre> <p>preprocessLookupInput - PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions.</p> <pre><code>Handles standard prefix/ID/name logic and OM-specific heuristic.\n    [...] = ndi.ontology.preprocessLookupInput(...)\n\nHelp for ndi.ontology.PATO.preprocessLookupInput is inherited from superclass ndi.ontology\n</code></pre> <p>searchOLSAndPerformIRILookup - SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI.</p> <pre><code>Handles specific logic for non-exact label searches (needed for OM).\n    [...] = ndi.ontology.searchOLSAndPerformIRILookup(...)\n\nHelp for ndi.ontology.PATO.searchOLSAndPerformIRILookup is inherited from superclass ndi.ontology\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/PubChem.m/","title":"CLASS ndi.ontology.PubChem","text":"<pre><code>  Location: +ndi/+ontology/PubChem.m\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/PubChem.m/#superclasses","title":"Superclasses","text":"<p>ndi.ontology</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/PubChem.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/PubChem.m/#methods","title":"Methods","text":"Method Description PubChem Constructor for the PubChem ontology object. clearCache Clears cached ontology list JSON data and NDIC data. getOntologies Returns the ontology details list from JSON cache. getOntologyNameFromPrefix Extracts prefix, maps to ontology name (case-insensitive). getPrefixOntologyMappings Returns the prefix-&gt;ontology mappings from JSON cache. lookup Look up a term in an ontology using a prefixed string. lookupOBOFile Looks up a term in a parsed OBO file. lookupTermOrID Looks up a compound in PubChem by CID or exact name. performIriLookup PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI. preprocessLookupInput PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions. searchOLSAndPerformIRILookup SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI."},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/PubChem.m/#methods-help","title":"Methods help","text":"<p>PubChem - Constructor for the PubChem ontology object.</p> <pre><code>Implicitly calls the superclass constructor ndi.ontology().\n\n    Documentation for ndi.ontology.PubChem/PubChem\n       doc ndi.ontology.PubChem\n</code></pre> <p>clearCache - Clears cached ontology list JSON data and NDIC data.</p> <pre><code>Help for ndi.ontology.PubChem.clearCache is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologies - Returns the ontology details list from JSON cache.</p> <pre><code>Help for ndi.ontology.PubChem.getOntologies is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologyNameFromPrefix - Extracts prefix, maps to ontology name (case-insensitive).</p> <pre><code>[...] = ndi.ontology.getOntologyNameFromPrefix(...)\n\nHelp for ndi.ontology.PubChem.getOntologyNameFromPrefix is inherited from superclass ndi.ontology\n</code></pre> <p>getPrefixOntologyMappings - Returns the prefix-&gt;ontology mappings from JSON cache.</p> <pre><code>Help for ndi.ontology.PubChem.getPrefixOntologyMappings is inherited from superclass ndi.ontology\n</code></pre> <p>lookup - Look up a term in an ontology using a prefixed string.</p> <pre><code>[ID, NAME, PREFIX, DEFINITION, SYNONYMS, SHORTNAME] = ndi.ontology.lookup(LOOKUPSTRING)\n\n    Looks up a term using a prefixed string (e.g., 'CL:0000000', 'OM:metre').\n    It identifies the ontology from the prefix using the mappings in\n    'ontology_list.json', instantiates the specific ndi.ontology.ONTOLOGYNAME\n    class (e.g., ndi.ontology.CL), and calls its lookupTermOrID instance method,\n    passing the remainder of the string (after the prefix).\n\n    Outputs:\n      ID           - The canonical identifier for the term.\n      NAME         - The primary name or label for the term.\n      PREFIX       - The ontology prefix used in the lookup.\n      DEFINITION   - A textual definition, if available.\n      SYNONYMS     - A cell array of synonyms, if available.\n      SHORTNAME    - The short name for the term.\n\n    Examples:\n        % Lookup neuron in Cell Ontology by ID\n        [id, name, prefix] = ndi.ontology.lookup('CL:0000540');\n        % Expected: id='CL:0000540', name='neuron', prefix='CL'\n\n        % Lookup ethanol in ChEBI by ID\n        [id, name, prefix] = ndi.ontology.lookup('CHEBI:16236');\n        % Expected: id='CHEBI:16236', name='ethanol', prefix='CHEBI'\n\n        % Lookup Heart in NCI Metathesaurus by CUI\n        [id, name, prefix, def] = ndi.ontology.lookup('NCIm:C0018787');\n        % Expected: id='C0018787', name='Heart', prefix='NCIm', def contains definition\n\n        % Lookup Aspirin in PubChem by name\n        [id, name, prefix] = ndi.ontology.lookup('PubChem:Aspirin');\n        % Expected: id='2244', name='aspirin', prefix='PubChem'\n\n        % Lookup Homo sapiens using alternative taxonomy prefix\n        [id, name, prefix] = ndi.ontology.lookup('taxonomy:9606');\n        % Expected: id='9606', name='Homo sapiens', prefix='taxonomy'\n\n        % Example of a failed lookup (non-existent term)\n        try\n            ndi.ontology.lookup('CL:NoSuchTerm');\n        catch ME\n            disp(ME.identifier); % e.g., 'ndi:ontology:lookup_CL:NotFound' or similar\n            disp(ME.message);\n        end\n\n    See also: ndi.ontology.PubChem.lookupTermOrID (instance method to be overridden)\n\nHelp for ndi.ontology.PubChem.lookup is inherited from superclass ndi.ontology\n</code></pre> <p>lookupOBOFile - Looks up a term in a parsed OBO file.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = ndi.ontology.lookupOBOFile(...\n        OBOFILEPATH, ONTOLOGYPREFIX, TERM_TO_LOOKUP_FRAGMENT)\n\n    Parses an OBO file (if not already cached) and searches for a term.\n    TERM_TO_LOOKUP_FRAGMENT is the part of the term after the prefix\n    (e.g., '0000001' or 'some term name').\n\n    The function caches the parsed OBO data to speed up subsequent lookups\n    for the same file within a MATLAB session. Call ndi.ontology.clearCache()\n    or 'clear functions' to clear this cache.\n\n    Outputs:\n        ID         - The full term ID (e.g., 'EMPTY:0000001').\n        NAME       - The term's primary name.\n        DEFINITION - The term's definition.\n        SYNONYMS   - A cell array of synonym strings (currently basic,\n                     not parsing synonym types).\n\n    Throws:\n        ndi:ontology:lookupOBOFile:FileNotFound\n        ndi:ontology:lookupOBOFile:ParsingError\n        ndi:ontology:lookupOBOFile:InvalidInput\n        ndi:ontology:lookupOBOFile:TermNotFound\n\nHelp for ndi.ontology.PubChem.lookupOBOFile is inherited from superclass ndi.ontology\n</code></pre> <p>lookupTermOrID - Looks up a compound in PubChem by CID or exact name.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = lookupTermOrID(OBJ, TERM_OR_ID_OR_NAME)\n\n    Overrides the base class method to provide specific lookup\n    functionality for PubChem using the PUG REST API.\n\n    The input TERM_OR_ID_OR_NAME is the part of the original lookup string\n    after the 'PubChem:' prefix has been removed (e.g., '2244', 'Aspirin', 'cid 2244').\n\n    See also: ndi.ontology.lookup (static dispatcher)\n</code></pre> <p>performIriLookup - PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI.</p> <pre><code>Used by OLS-based lookup implementations (CL, OM, CHEBI, UBERON).\n    [...] = ndi.ontology.performIriLookup(...)\n\nHelp for ndi.ontology.PubChem.performIriLookup is inherited from superclass ndi.ontology\n</code></pre> <p>preprocessLookupInput - PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions.</p> <pre><code>Handles standard prefix/ID/name logic and OM-specific heuristic.\n    [...] = ndi.ontology.preprocessLookupInput(...)\n\nHelp for ndi.ontology.PubChem.preprocessLookupInput is inherited from superclass ndi.ontology\n</code></pre> <p>searchOLSAndPerformIRILookup - SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI.</p> <pre><code>Handles specific logic for non-exact label searches (needed for OM).\n    [...] = ndi.ontology.searchOLSAndPerformIRILookup(...)\n\nHelp for ndi.ontology.PubChem.searchOLSAndPerformIRILookup is inherited from superclass ndi.ontology\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/RRID.m/","title":"CLASS ndi.ontology.RRID","text":"<pre><code>  Location: +ndi/+ontology/RRID.m\n  Final Version: Supports lookup by RRID component only. Removed name search path.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/RRID.m/#superclasses","title":"Superclasses","text":"<p>ndi.ontology</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/RRID.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/RRID.m/#methods","title":"Methods","text":"Method Description RRID Constructor for the RRID ontology object. clearCache Clears cached ontology list JSON data and NDIC data. getOntologies Returns the ontology details list from JSON cache. getOntologyNameFromPrefix Extracts prefix, maps to ontology name (case-insensitive). getPrefixOntologyMappings Returns the prefix-&gt;ontology mappings from JSON cache. lookup Look up a term in an ontology using a prefixed string. lookupOBOFile Looks up a term in a parsed OBO file. lookupTermOrID Looks up an RRID via scicrunch.org resolver endpoint using its ID component. performIriLookup PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI. preprocessLookupInput PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions. searchOLSAndPerformIRILookup SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI."},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/RRID.m/#methods-help","title":"Methods help","text":"<p>RRID - Constructor for the RRID ontology object.</p> <pre><code>Documentation for ndi.ontology.RRID/RRID\n       doc ndi.ontology.RRID\n</code></pre> <p>clearCache - Clears cached ontology list JSON data and NDIC data.</p> <pre><code>Help for ndi.ontology.RRID.clearCache is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologies - Returns the ontology details list from JSON cache.</p> <pre><code>Help for ndi.ontology.RRID.getOntologies is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologyNameFromPrefix - Extracts prefix, maps to ontology name (case-insensitive).</p> <pre><code>[...] = ndi.ontology.getOntologyNameFromPrefix(...)\n\nHelp for ndi.ontology.RRID.getOntologyNameFromPrefix is inherited from superclass ndi.ontology\n</code></pre> <p>getPrefixOntologyMappings - Returns the prefix-&gt;ontology mappings from JSON cache.</p> <pre><code>Help for ndi.ontology.RRID.getPrefixOntologyMappings is inherited from superclass ndi.ontology\n</code></pre> <p>lookup - Look up a term in an ontology using a prefixed string.</p> <pre><code>[ID, NAME, PREFIX, DEFINITION, SYNONYMS, SHORTNAME] = ndi.ontology.lookup(LOOKUPSTRING)\n\n    Looks up a term using a prefixed string (e.g., 'CL:0000000', 'OM:metre').\n    It identifies the ontology from the prefix using the mappings in\n    'ontology_list.json', instantiates the specific ndi.ontology.ONTOLOGYNAME\n    class (e.g., ndi.ontology.CL), and calls its lookupTermOrID instance method,\n    passing the remainder of the string (after the prefix).\n\n    Outputs:\n      ID           - The canonical identifier for the term.\n      NAME         - The primary name or label for the term.\n      PREFIX       - The ontology prefix used in the lookup.\n      DEFINITION   - A textual definition, if available.\n      SYNONYMS     - A cell array of synonyms, if available.\n      SHORTNAME    - The short name for the term.\n\n    Examples:\n        % Lookup neuron in Cell Ontology by ID\n        [id, name, prefix] = ndi.ontology.lookup('CL:0000540');\n        % Expected: id='CL:0000540', name='neuron', prefix='CL'\n\n        % Lookup ethanol in ChEBI by ID\n        [id, name, prefix] = ndi.ontology.lookup('CHEBI:16236');\n        % Expected: id='CHEBI:16236', name='ethanol', prefix='CHEBI'\n\n        % Lookup Heart in NCI Metathesaurus by CUI\n        [id, name, prefix, def] = ndi.ontology.lookup('NCIm:C0018787');\n        % Expected: id='C0018787', name='Heart', prefix='NCIm', def contains definition\n\n        % Lookup Aspirin in PubChem by name\n        [id, name, prefix] = ndi.ontology.lookup('PubChem:Aspirin');\n        % Expected: id='2244', name='aspirin', prefix='PubChem'\n\n        % Lookup Homo sapiens using alternative taxonomy prefix\n        [id, name, prefix] = ndi.ontology.lookup('taxonomy:9606');\n        % Expected: id='9606', name='Homo sapiens', prefix='taxonomy'\n\n        % Example of a failed lookup (non-existent term)\n        try\n            ndi.ontology.lookup('CL:NoSuchTerm');\n        catch ME\n            disp(ME.identifier); % e.g., 'ndi:ontology:lookup_CL:NotFound' or similar\n            disp(ME.message);\n        end\n\n    See also: ndi.ontology.RRID.lookupTermOrID (instance method to be overridden)\n\nHelp for ndi.ontology.RRID.lookup is inherited from superclass ndi.ontology\n</code></pre> <p>lookupOBOFile - Looks up a term in a parsed OBO file.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = ndi.ontology.lookupOBOFile(...\n        OBOFILEPATH, ONTOLOGYPREFIX, TERM_TO_LOOKUP_FRAGMENT)\n\n    Parses an OBO file (if not already cached) and searches for a term.\n    TERM_TO_LOOKUP_FRAGMENT is the part of the term after the prefix\n    (e.g., '0000001' or 'some term name').\n\n    The function caches the parsed OBO data to speed up subsequent lookups\n    for the same file within a MATLAB session. Call ndi.ontology.clearCache()\n    or 'clear functions' to clear this cache.\n\n    Outputs:\n        ID         - The full term ID (e.g., 'EMPTY:0000001').\n        NAME       - The term's primary name.\n        DEFINITION - The term's definition.\n        SYNONYMS   - A cell array of synonym strings (currently basic,\n                     not parsing synonym types).\n\n    Throws:\n        ndi:ontology:lookupOBOFile:FileNotFound\n        ndi:ontology:lookupOBOFile:ParsingError\n        ndi:ontology:lookupOBOFile:InvalidInput\n        ndi:ontology:lookupOBOFile:TermNotFound\n\nHelp for ndi.ontology.RRID.lookupOBOFile is inherited from superclass ndi.ontology\n</code></pre> <p>lookupTermOrID - Looks up an RRID via scicrunch.org resolver endpoint using its ID component.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = lookupTermOrID(OBJ, TERM_OR_ID_OR_NAME)\n\n    Overrides the base class method. Expects TERM_OR_ID_OR_NAME to be the\n    remainder of the RRID after the 'RRID:' prefix (e.g., 'SCR_006472', 'AB_123456').\n    It must resemble a valid RRID component structure.\n\n    NOTE: Lookup by name (e.g., 'NCBI') is NOT currently supported for RRIDs\n    due to lack of a confirmed reliable public search API endpoint accessible\n    via standard web requests from MATLAB. Please provide the specific RRID\n    component (e.g., SCR_006472).\n\n    Queries the SciCrunch resolver endpoint: https://scicrunch.org/resolver/{RRID}.json\n\n    Outputs:\n        ID           - The full RRID used for the lookup (e.g., 'RRID:SCR_006472').\n        NAME         - The name found for the resource (typically from item.name).\n        DEFINITION   - The description found (typically from item.description).\n        SYNONYMS     - Cell array of synonyms, if found within the item.synonyms structure.\n\n    See also: ndi.ontology.lookup (static dispatcher)\n</code></pre> <p>performIriLookup - PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI.</p> <pre><code>Used by OLS-based lookup implementations (CL, OM, CHEBI, UBERON).\n    [...] = ndi.ontology.performIriLookup(...)\n\nHelp for ndi.ontology.RRID.performIriLookup is inherited from superclass ndi.ontology\n</code></pre> <p>preprocessLookupInput - PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions.</p> <pre><code>Handles standard prefix/ID/name logic and OM-specific heuristic.\n    [...] = ndi.ontology.preprocessLookupInput(...)\n\nHelp for ndi.ontology.RRID.preprocessLookupInput is inherited from superclass ndi.ontology\n</code></pre> <p>searchOLSAndPerformIRILookup - SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI.</p> <pre><code>Handles specific logic for non-exact label searches (needed for OM).\n    [...] = ndi.ontology.searchOLSAndPerformIRILookup(...)\n\nHelp for ndi.ontology.RRID.searchOLSAndPerformIRILookup is inherited from superclass ndi.ontology\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/Uberon.m/","title":"CLASS ndi.ontology.Uberon","text":"<pre><code>  Location: +ndi/+ontology/@Uberon/Uberon.m\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/Uberon.m/#superclasses","title":"Superclasses","text":"<p>ndi.ontology</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/Uberon.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/Uberon.m/#methods","title":"Methods","text":"Method Description Uberon Constructor for the Uberon ontology object. clearCache Clears cached ontology list JSON data and NDIC data. getOntologies Returns the ontology details list from JSON cache. getOntologyNameFromPrefix Extracts prefix, maps to ontology name (case-insensitive). getPrefixOntologyMappings Returns the prefix-&gt;ontology mappings from JSON cache. lookup Look up a term in an ontology using a prefixed string. lookupOBOFile Looks up a term in a parsed OBO file. lookupTermOrID Looks up a term in the Uberon ontology by ID or name. performIriLookup PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI. preprocessLookupInput PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions. searchOLSAndPerformIRILookup SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI."},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/Uberon.m/#methods-help","title":"Methods help","text":"<p>Uberon - Constructor for the Uberon ontology object.</p> <pre><code>Currently takes no arguments.\n\n    Documentation for ndi.ontology.Uberon/Uberon\n       doc ndi.ontology.Uberon\n</code></pre> <p>clearCache - Clears cached ontology list JSON data and NDIC data.</p> <pre><code>Help for ndi.ontology.Uberon.clearCache is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologies - Returns the ontology details list from JSON cache.</p> <pre><code>Help for ndi.ontology.Uberon.getOntologies is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologyNameFromPrefix - Extracts prefix, maps to ontology name (case-insensitive).</p> <pre><code>[...] = ndi.ontology.getOntologyNameFromPrefix(...)\n\nHelp for ndi.ontology.Uberon.getOntologyNameFromPrefix is inherited from superclass ndi.ontology\n</code></pre> <p>getPrefixOntologyMappings - Returns the prefix-&gt;ontology mappings from JSON cache.</p> <pre><code>Help for ndi.ontology.Uberon.getPrefixOntologyMappings is inherited from superclass ndi.ontology\n</code></pre> <p>lookup - Look up a term in an ontology using a prefixed string.</p> <pre><code>[ID, NAME, PREFIX, DEFINITION, SYNONYMS, SHORTNAME] = ndi.ontology.lookup(LOOKUPSTRING)\n\n    Looks up a term using a prefixed string (e.g., 'CL:0000000', 'OM:metre').\n    It identifies the ontology from the prefix using the mappings in\n    'ontology_list.json', instantiates the specific ndi.ontology.ONTOLOGYNAME\n    class (e.g., ndi.ontology.CL), and calls its lookupTermOrID instance method,\n    passing the remainder of the string (after the prefix).\n\n    Outputs:\n      ID           - The canonical identifier for the term.\n      NAME         - The primary name or label for the term.\n      PREFIX       - The ontology prefix used in the lookup.\n      DEFINITION   - A textual definition, if available.\n      SYNONYMS     - A cell array of synonyms, if available.\n      SHORTNAME    - The short name for the term.\n\n    Examples:\n        % Lookup neuron in Cell Ontology by ID\n        [id, name, prefix] = ndi.ontology.lookup('CL:0000540');\n        % Expected: id='CL:0000540', name='neuron', prefix='CL'\n\n        % Lookup ethanol in ChEBI by ID\n        [id, name, prefix] = ndi.ontology.lookup('CHEBI:16236');\n        % Expected: id='CHEBI:16236', name='ethanol', prefix='CHEBI'\n\n        % Lookup Heart in NCI Metathesaurus by CUI\n        [id, name, prefix, def] = ndi.ontology.lookup('NCIm:C0018787');\n        % Expected: id='C0018787', name='Heart', prefix='NCIm', def contains definition\n\n        % Lookup Aspirin in PubChem by name\n        [id, name, prefix] = ndi.ontology.lookup('PubChem:Aspirin');\n        % Expected: id='2244', name='aspirin', prefix='PubChem'\n\n        % Lookup Homo sapiens using alternative taxonomy prefix\n        [id, name, prefix] = ndi.ontology.lookup('taxonomy:9606');\n        % Expected: id='9606', name='Homo sapiens', prefix='taxonomy'\n\n        % Example of a failed lookup (non-existent term)\n        try\n            ndi.ontology.lookup('CL:NoSuchTerm');\n        catch ME\n            disp(ME.identifier); % e.g., 'ndi:ontology:lookup_CL:NotFound' or similar\n            disp(ME.message);\n        end\n\n    See also: ndi.ontology.Uberon.lookupTermOrID (instance method to be overridden)\n\nHelp for ndi.ontology.Uberon.lookup is inherited from superclass ndi.ontology\n</code></pre> <p>lookupOBOFile - Looks up a term in a parsed OBO file.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = ndi.ontology.lookupOBOFile(...\n        OBOFILEPATH, ONTOLOGYPREFIX, TERM_TO_LOOKUP_FRAGMENT)\n\n    Parses an OBO file (if not already cached) and searches for a term.\n    TERM_TO_LOOKUP_FRAGMENT is the part of the term after the prefix\n    (e.g., '0000001' or 'some term name').\n\n    The function caches the parsed OBO data to speed up subsequent lookups\n    for the same file within a MATLAB session. Call ndi.ontology.clearCache()\n    or 'clear functions' to clear this cache.\n\n    Outputs:\n        ID         - The full term ID (e.g., 'EMPTY:0000001').\n        NAME       - The term's primary name.\n        DEFINITION - The term's definition.\n        SYNONYMS   - A cell array of synonym strings (currently basic,\n                     not parsing synonym types).\n\n    Throws:\n        ndi:ontology:lookupOBOFile:FileNotFound\n        ndi:ontology:lookupOBOFile:ParsingError\n        ndi:ontology:lookupOBOFile:InvalidInput\n        ndi:ontology:lookupOBOFile:TermNotFound\n\nHelp for ndi.ontology.Uberon.lookupOBOFile is inherited from superclass ndi.ontology\n</code></pre> <p>lookupTermOrID - Looks up a term in the Uberon ontology by ID or name.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = lookupTermOrID(OBJ, TERM_OR_ID_OR_NAME)\n\n    Overrides the base class method to provide specific lookup functionality\n    for the Uberon ontology using the EBI OLS API.\n\n    The input TERM_OR_ID_OR_NAME is the part of the original lookup string\n    after the 'UBERON:' prefix has been removed (e.g., '0000948' or 'heart').\n\n    This method uses the static helper functions from the base class:\n    ndi.ontology.ontology.preprocessLookupInput and\n    ndi.ontology.ontology.searchOLSAndPerformIRILookup.\n\n    See also: ndi.ontology.ontology.lookup (static dispatcher)\n</code></pre> <p>performIriLookup - PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI.</p> <pre><code>Used by OLS-based lookup implementations (CL, OM, CHEBI, UBERON).\n    [...] = ndi.ontology.performIriLookup(...)\n\nHelp for ndi.ontology.Uberon.performIriLookup is inherited from superclass ndi.ontology\n</code></pre> <p>preprocessLookupInput - PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions.</p> <pre><code>Handles standard prefix/ID/name logic and OM-specific heuristic.\n    [...] = ndi.ontology.preprocessLookupInput(...)\n\nHelp for ndi.ontology.Uberon.preprocessLookupInput is inherited from superclass ndi.ontology\n</code></pre> <p>searchOLSAndPerformIRILookup - SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI.</p> <pre><code>Handles specific logic for non-exact label searches (needed for OM).\n    [...] = ndi.ontology.searchOLSAndPerformIRILookup(...)\n\nHelp for ndi.ontology.Uberon.searchOLSAndPerformIRILookup is inherited from superclass ndi.ontology\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/WBStrain.m/","title":"CLASS ndi.ontology.WBStrain","text":"<pre><code>  Location: +ndi/+ontology/WBStrain.m\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/WBStrain.m/#superclasses","title":"Superclasses","text":"<p>ndi.ontology</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/WBStrain.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/WBStrain.m/#methods","title":"Methods","text":"Method Description WBStrain Constructor for the WBStrain ontology object. clearCache Clears cached ontology list JSON data and NDIC data. getOntologies Returns the ontology details list from JSON cache. getOntologyNameFromPrefix Extracts prefix, maps to ontology name (case-insensitive). getPrefixOntologyMappings Returns the prefix-&gt;ontology mappings from JSON cache. lookup Look up a term in an ontology using a prefixed string. lookupOBOFile Looks up a term in a parsed OBO file. lookupTermOrID Looks up a strain in WormBase by its ID or public name. performIriLookup PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI. preprocessLookupInput PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions. searchOLSAndPerformIRILookup SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI."},{"location":"NDI-matlab/reference/%2Bndi/%2Bontology/WBStrain.m/#methods-help","title":"Methods help","text":"<p>WBStrain - Constructor for the WBStrain ontology object.</p> <pre><code>Implicitly calls the superclass constructor ndi.ontology().\n\n    Documentation for ndi.ontology.WBStrain/WBStrain\n       doc ndi.ontology.WBStrain\n</code></pre> <p>clearCache - Clears cached ontology list JSON data and NDIC data.</p> <pre><code>Help for ndi.ontology.WBStrain.clearCache is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologies - Returns the ontology details list from JSON cache.</p> <pre><code>Help for ndi.ontology.WBStrain.getOntologies is inherited from superclass ndi.ontology\n</code></pre> <p>getOntologyNameFromPrefix - Extracts prefix, maps to ontology name (case-insensitive).</p> <pre><code>[...] = ndi.ontology.getOntologyNameFromPrefix(...)\n\nHelp for ndi.ontology.WBStrain.getOntologyNameFromPrefix is inherited from superclass ndi.ontology\n</code></pre> <p>getPrefixOntologyMappings - Returns the prefix-&gt;ontology mappings from JSON cache.</p> <pre><code>Help for ndi.ontology.WBStrain.getPrefixOntologyMappings is inherited from superclass ndi.ontology\n</code></pre> <p>lookup - Look up a term in an ontology using a prefixed string.</p> <pre><code>[ID, NAME, PREFIX, DEFINITION, SYNONYMS, SHORTNAME] = ndi.ontology.lookup(LOOKUPSTRING)\n\n    Looks up a term using a prefixed string (e.g., 'CL:0000000', 'OM:metre').\n    It identifies the ontology from the prefix using the mappings in\n    'ontology_list.json', instantiates the specific ndi.ontology.ONTOLOGYNAME\n    class (e.g., ndi.ontology.CL), and calls its lookupTermOrID instance method,\n    passing the remainder of the string (after the prefix).\n\n    Outputs:\n      ID           - The canonical identifier for the term.\n      NAME         - The primary name or label for the term.\n      PREFIX       - The ontology prefix used in the lookup.\n      DEFINITION   - A textual definition, if available.\n      SYNONYMS     - A cell array of synonyms, if available.\n      SHORTNAME    - The short name for the term.\n\n    Examples:\n        % Lookup neuron in Cell Ontology by ID\n        [id, name, prefix] = ndi.ontology.lookup('CL:0000540');\n        % Expected: id='CL:0000540', name='neuron', prefix='CL'\n\n        % Lookup ethanol in ChEBI by ID\n        [id, name, prefix] = ndi.ontology.lookup('CHEBI:16236');\n        % Expected: id='CHEBI:16236', name='ethanol', prefix='CHEBI'\n\n        % Lookup Heart in NCI Metathesaurus by CUI\n        [id, name, prefix, def] = ndi.ontology.lookup('NCIm:C0018787');\n        % Expected: id='C0018787', name='Heart', prefix='NCIm', def contains definition\n\n        % Lookup Aspirin in PubChem by name\n        [id, name, prefix] = ndi.ontology.lookup('PubChem:Aspirin');\n        % Expected: id='2244', name='aspirin', prefix='PubChem'\n\n        % Lookup Homo sapiens using alternative taxonomy prefix\n        [id, name, prefix] = ndi.ontology.lookup('taxonomy:9606');\n        % Expected: id='9606', name='Homo sapiens', prefix='taxonomy'\n\n        % Example of a failed lookup (non-existent term)\n        try\n            ndi.ontology.lookup('CL:NoSuchTerm');\n        catch ME\n            disp(ME.identifier); % e.g., 'ndi:ontology:lookup_CL:NotFound' or similar\n            disp(ME.message);\n        end\n\n    See also: ndi.ontology.WBStrain.lookupTermOrID (instance method to be overridden)\n\nHelp for ndi.ontology.WBStrain.lookup is inherited from superclass ndi.ontology\n</code></pre> <p>lookupOBOFile - Looks up a term in a parsed OBO file.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = ndi.ontology.lookupOBOFile(...\n        OBOFILEPATH, ONTOLOGYPREFIX, TERM_TO_LOOKUP_FRAGMENT)\n\n    Parses an OBO file (if not already cached) and searches for a term.\n    TERM_TO_LOOKUP_FRAGMENT is the part of the term after the prefix\n    (e.g., '0000001' or 'some term name').\n\n    The function caches the parsed OBO data to speed up subsequent lookups\n    for the same file within a MATLAB session. Call ndi.ontology.clearCache()\n    or 'clear functions' to clear this cache.\n\n    Outputs:\n        ID         - The full term ID (e.g., 'EMPTY:0000001').\n        NAME       - The term's primary name.\n        DEFINITION - The term's definition.\n        SYNONYMS   - A cell array of synonym strings (currently basic,\n                     not parsing synonym types).\n\n    Throws:\n        ndi:ontology:lookupOBOFile:FileNotFound\n        ndi:ontology:lookupOBOFile:ParsingError\n        ndi:ontology:lookupOBOFile:InvalidInput\n        ndi:ontology:lookupOBOFile:TermNotFound\n\nHelp for ndi.ontology.WBStrain.lookupOBOFile is inherited from superclass ndi.ontology\n</code></pre> <p>lookupTermOrID - Looks up a strain in WormBase by its ID or public name.</p> <pre><code>[ID, NAME, DEFINITION, SYNONYMS] = lookupTermOrID(OBJ, TERM_OR_ID_OR_NAME)\n\n    This version can resolve a strain name (e.g., 'N2') to its ID\n    by scraping the WormBase search results page.\n</code></pre> <p>performIriLookup - PERFORMIRILOOKUP Fetches ontology term details from EBI OLS using its IRI.</p> <pre><code>Used by OLS-based lookup implementations (CL, OM, CHEBI, UBERON).\n    [...] = ndi.ontology.performIriLookup(...)\n\nHelp for ndi.ontology.WBStrain.performIriLookup is inherited from superclass ndi.ontology\n</code></pre> <p>preprocessLookupInput - PREPROCESSLOOKUPINPUT Processes input for ontology lookup functions.</p> <pre><code>Handles standard prefix/ID/name logic and OM-specific heuristic.\n    [...] = ndi.ontology.preprocessLookupInput(...)\n\nHelp for ndi.ontology.WBStrain.preprocessLookupInput is inherited from superclass ndi.ontology\n</code></pre> <p>searchOLSAndPerformIRILookup - SEARCHOLSANDPERFORMIRILOOKUP Searches OLS and looks up unique result by IRI.</p> <pre><code>Handles specific logic for non-exact label searches (needed for OM).\n    [...] = ndi.ontology.searchOLSAndPerformIRILookup(...)\n\nHelp for ndi.ontology.WBStrain.searchOLSAndPerformIRILookup is inherited from superclass ndi.ontology\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/timeseries.m/","title":"CLASS ndi.probe.timeseries","text":"<pre><code>  ndi.probe.timeseries - Create a new ndi.probe.timeseries class object\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/timeseries.m/#superclasses","title":"Superclasses","text":"<p>ndi.probe, ndi.element, ndi.ido, did.ido, ndi.epoch.epochset, ndi.documentservice, matlab.mixin.Heterogeneous, ndi.time.timeseries</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/timeseries.m/#properties","title":"Properties","text":"Property Description session name type reference underlying_element direct subject_id dependencies identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/timeseries.m/#methods","title":"Methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version newdocument need docs here numepochs Number of epochs of ndi.epoch.epochset probestring Produce a human-readable probe string readtimeseries read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery need docs here t0_t1 times2samples convert from the timeseries time to sample numbers timeseries create a new ndi.probe.timeseries object underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method)"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/timeseries.m/#methods-help","title":"Methods help","text":"<p>addepoch - add an epoch to the ndi.element</p> <pre><code>[NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, [ADD_TO_DB], [EPOCHIDS])\n\n  Registers the data for an epoch with the NDI_ELEMENT_OBJ.\n\n  Inputs:\n    NDI_ELEMENT_OBJ: The ndi.element object to modify\n    EPOCHID:       The name of the epoch to add; should match the name of an epoch from the probe\n    EPOCHCLOCK:    The epoch clock; must be a single clock type that matches one of the clock types\n                      of the probe\n    T0_T1:         The starting time and ending time of the existence of information about the ELEMENT on\n                      the probe, in units of the epock clock\n    ADD_TO_DB:     0/1 Should we actually add the epoch document to the database? Default 0.\n    EPOCHIDS:      The epoch ids of the original epochs (used in conjunction with a oneepoch document).\n\nHelp for ndi.probe.timeseries/addepoch is inherited from superclass ndi.element\n</code></pre> <p>buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of EPOCHNODES.\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\n  In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with\n  a cost of 1 and a linear mapping rule with shift 1 and offset 0:\n    'utc' -&gt; 'utc'\n    'utc' -&gt; 'approx_utc'\n    'exp_global_time' -&gt; 'exp_global_time'\n    'exp_global_time' -&gt; 'approx_exp_global_time'\n    'dev_global_time' -&gt; 'dev_global_time'\n    'dev_global_time' -&gt; 'approx_dev_global_time'\n\n\n  See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping,\n  ndi.probe.timeseries/EPOCHNODES\n\nHelp for ndi.probe.timeseries/buildepochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>buildepochtable - build the epoch table for an ndi.probe.*</p> <pre><code>ET = BUILDEPOCHTABLE(NDI_PROBE_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch (may change)\n  'epoch_id'                | The epoch ID code (will never change once established)\n                            |   This uniquely specifies the epoch.\n  'epoch_session_id'           | The ID of the session\n  'epochprobemap'           | The epochprobemap object from each epoch\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', and 'epoch_id'\n\nHelp for ndi.probe.timeseries/buildepochtable is inherited from superclass ndi.probe\n</code></pre> <p>cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache</p> <pre><code>GINFO_BIG = GINFO2CACHE(GINFO_SMALL)\n\nHelp for ndi.probe.timeseries.cache2ginfo is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epoch graph, if it exists and is up-to-date\n  (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ\n  has not changed). If there is no cached version, or if it is not up-to-date,\n  COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date,\n  it is deleted.\n\n  See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH\n\nHelp for ndi.probe.timeseries/cached_epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object</p> <pre><code>[ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epochtable, if it exists, along with its HASHVALUE\n  (a hash number generated from the table). If there is no cached version,\n  ET and HASHVALUE will be empty.\n\nHelp for ndi.probe.timeseries/cached_epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>doc_unique_id - return the document unique reference for an ndi.element object</p> <pre><code>UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ)\n\n  Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated\n  document for the element, then empty is returned.\n\nHelp for ndi.probe.timeseries/doc_unique_id is inherited from superclass ndi.element\n</code></pre> <p>elementstring - Produce a human-readable element string</p> <pre><code>ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ)\n\n  Returns the name as a human-readable string.\n\n  For ndi.element objects, this is the string 'element: ' followed by its name\n\nHelp for ndi.probe.timeseries/elementstring is inherited from superclass ndi.element\n</code></pre> <p>epoch2str - convert an epoch number or id to a string</p> <pre><code>S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER)\n\n  Returns the epoch NUMBER in the form of a string. If it is a simple\n  integer, then INT2STR is used to produce a string. If it is an epoch\n  identifier string, then it is returned.\n\nHelp for ndi.probe.timeseries/epoch2str is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_PROBE_OBJ, EPOCH_NUMBER)\n\n  Return the clock types available for this epoch.\n\n  The ndi.probe class always returns the clock type(s) of the device it is based on\n\nHelp for ndi.probe.timeseries/epochclock is inherited from superclass ndi.probe\n</code></pre> <p>epochgraph - graph of the mapping and cost of converting time among epochs</p> <pre><code>[COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes).\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\nHelp for ndi.probe.timeseries/epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochid - Get the epoch identifier for a particular epoch</p> <pre><code>ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Returns the epoch identifier string for the epoch EPOCH_NUMBER.\n  If it doesn't exist, it should be created. EPOCH_NUMBER can be\n  a number of an EPOCH ID string.\n\n  The abstract class just queries the EPOCHTABLE.\n  Most classes that manage epochs themselves (ndi.file.navigator,\n  ndi.daq.system) will override this method.\n\nHelp for ndi.probe.timeseries/epochid is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochnodes - return all epoch nodes from an ndi.epoch.epochset object</p> <pre><code>[NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ)\n\n  Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the\n  following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch within the session.\n  'epoch_session_id'           | The ID of the session that contains the epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A SINGLE ndi.time.clocktype entry that describes the clock type of this node.\n  't0_t1'                   | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock'\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_id', and 'epochprobemap'\n  'objectname'              | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no\n                            |   'name' field, then 'unknown' is used.\n  'objectclass'             | The object class name of the NDI_EPOCHSET_OBJ.\n\n  EPOCHNODES are related to EPOCHTABLE entries, except\n     a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains\n        multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids\n        in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another.\n     b) EPOCHNODES contain identifying information (objectname and objectclass) to help\n        in identifying the epoch nodes across ndi.epoch.epochset objects.\n\n  UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs.\n\nHelp for ndi.probe.timeseries/epochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochprobemapmatch - does an epochprobemap record match our probe?</p> <pre><code>B = EPOCHPROBEMAPMATCH(NDI_PROBE_OBJ, EPOCHPROBEMAP)\n\n  Returns 1 if the ndi.epoch.epochprobemap object EPOCHPROBEMAP is a match for\n  the NDI_PROBE_OBJ probe and 0 otherwise.\n\nHelp for ndi.probe.timeseries/epochprobemapmatch is inherited from superclass ndi.probe\n</code></pre> <p>epochsetname - the name of the ndi.probe. object, for EPOCHNODES*</p> <pre><code>NAME = EPOCHSETNAME(NDI_PROBE_OBJ)\n\n  Returns the object name that is used when creating epoch nodes.\n\n  For ndi.probe objects, this is the string 'probe: ' followed by\n  PROBESTRING(NDI_PROBE_OBJ).\n\nHelp for ndi.probe.timeseries/epochsetname is inherited from superclass ndi.probe\n</code></pre> <p>epochtable - Return an epoch table that relates the current object's epochs to underlying epochs</p> <pre><code>[ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch. The number may change as epochs are added and subtracted.\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch.\n  'epoch_session_id'           | The session ID that contains this epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap'\n\n  HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable\n  has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE.\n\n  After it is read from disk once, the ET is stored in memory and is not re-read from disk\n  unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE.\n\nHelp for ndi.probe.timeseries/epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID</p> <pre><code>ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object\n  that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the\n  epoch or the EPOCHID of the epoch.\n\nHelp for ndi.probe.timeseries/epochtableentry is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>eq - are 2 ndi.probe objects equal?</p> <pre><code>Returns 1 if the objects share an object class, session, and probe string.\n\nHelp for ndi.probe.timeseries/eq is inherited from superclass ndi.probe\n</code></pre> <p>getcache - return the NDI_CACHE and key for ndi.element</p> <pre><code>[CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ)\n\n  Returns the CACHE and KEY for the ndi.element object.\n\n  The CACHE is returned from the associated session.\n  The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT.\n\n  See also: ndi.file.navigator\n\nHelp for ndi.probe.timeseries/getcache is inherited from superclass ndi.element\n</code></pre> <p>getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.*</p> <pre><code>[DEV, DEVNAME, DEVEPOCH, CHANNELTYPE, CHANNELLIST] = GETCHANNELDEVINFO(NDI_PROBE_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Given an ndi.probe.* object and an EPOCH number, this function returns the corresponding channel and device info.\n  Suppose there are C channels corresponding to a probe. Then the outputs are\n    DEV is a 1xC cell array of ndi.daq.system objects for each channel\n    DEVNAME is a 1xC cell array of the names of each device in DEV\n    DEVEPOCH is a 1xC array with the epoch id of the probe's EPOCH on each device\n    CHANNELTYPE is a cell array of the type of each channel\n    CHANNELLIST is the channel number of each channel.\n\nHelp for ndi.probe.timeseries/getchanneldevinfo is inherited from superclass ndi.probe\n</code></pre> <p>getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs</p> <pre><code>EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ)\n\n  Produce an array of ndi.epoch objects from the epoch table of this\n  ndi.epoch.epochset object (NDI_EPOCHSET_OBJ).\n\nHelp for ndi.probe.timeseries/getepocharray is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache</p> <pre><code>GINFO_SMALL = GINFO2CACHE(GINFO)\n\nHelp for ndi.probe.timeseries.ginfo2cache is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>id - return the document unique identifier for an ndi.element object</p> <pre><code>UNIQUE_REF = ID(NDI_ELEMENT_OBJ)\n\n  Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated\n  document for the element, then an error is returned.\n\nHelp for ndi.probe.timeseries/id is inherited from superclass ndi.element\n</code></pre> <p>issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph?</p> <pre><code>B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ)\n\n  This function tells an ndi.time.syncgraph object whether it should continue\n  adding the 'underlying' epochs to the graph, or whether it should stop at this level.\n\n  For ndi.epoch.epochset and ndi.probe.* this returns 0 so that the underlying ndi.daq.system epochs are added.\n\nHelp for ndi.probe.timeseries/issyncgraphroot is inherited from superclass ndi.probe\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.probe.timeseries.isvalid is inherited from superclass did.ido\n</code></pre> <p>load_all_element_docs - load all of the ndi.element objects from an session database</p> <pre><code>ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ)\n\n  Loads the ndi.document that is based on the ndi.element object and any associated\n  epoch documents.\n\nHelp for ndi.probe.timeseries/load_all_element_docs is inherited from superclass ndi.element\n</code></pre> <p>load_element_doc - load a element doc from the session database</p> <pre><code>ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ)\n\n  Load an ndi.document that is based on the ndi.element object.\n\n  Returns empty if there is no such document.\n\nHelp for ndi.probe.timeseries/load_element_doc is inherited from superclass ndi.element\n</code></pre> <p>loadaddedepochs - load the added epochs from an ndi.element</p> <pre><code>[ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ)\n\n  Load the EPOCHTABLE that consists of added/registered epochs that provide information\n  about the ndi.element.\n\nHelp for ndi.probe.timeseries/loadaddedepochs is inherited from superclass ndi.element\n</code></pre> <p>matchedepochtable - compare a hash number from an epochtable to the current version</p> <pre><code>B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE)\n\n  Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE.\n  Otherwise, it returns 0.\n\nHelp for ndi.probe.timeseries/matchedepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>newdocument - need docs here</p> <pre><code>\n</code></pre> <p>numepochs - Number of epochs of ndi.epoch.epochset</p> <pre><code>N = NUMEPOCHS(NDI_EPOCHSET_OBJ)\n\n  Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ.\n\n  See also: EPOCHTABLE\n\nHelp for ndi.probe.timeseries/numepochs is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>probestring - Produce a human-readable probe string</p> <pre><code>PROBESTR = PROBESTRING(NDI_PROBE_OBJ)\n\n  Returns the name and reference of a probe as a human-readable string.\n\n  This is simply PROBESTR = [NDI_PROBE_OBJ.name ' _ ' in2str(NDI_PROBE_OBJ.reference)]\n\nHelp for ndi.probe.timeseries/probestring is inherited from superclass ndi.probe\n</code></pre> <p>readtimeseries - read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch</p> <pre><code>[DATA, T, TIMEREF] = READTIMESERIES(NDI_PROBE_TIMESERIES_OBJ, TIMEREF_OR_EPOCH, T0, T1)\n\n   Reads timeseries data from an ndi.probe.timeseries object. The DATA and time information T that are\n   returned depend on the the specific subclass of ndi.probe.timeseries that is called (see READTIMESERIESEPOCH).\n\n   TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the time reference for\n   T0, T1, or it can be a single number, which will indicate the data are to be read from that\n   epoch.\n\n   DATA is the data for the probe.  T is a time structure, in units of TIMEREF if it is an\n   ndi.time.timereference object or in units of the epoch if an epoch is passed.  The TIMEREF is returned.\n</code></pre> <p>resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk</p> <pre><code>NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  This function clears the internal cached memory of the epochtable, forcing it to be re-read from\n  disk at the next request.\n\n  See also: ndi.probe.timeseries/EPOCHTABLE\n\nHelp for ndi.probe.timeseries/resetepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>samplerate - return the sample rate of an ndi.time.timeseries object</p> <pre><code>SR = SAMPLERATE(NDI_TIMESERIES_OBJ, EPOCH)\n\n  Returns the sampling rate of a given ndi.time.timeseries object for the epoch\n  EPOCH. EPOCH can be specified as an index or EPOCH_ID.\n\n  If NDI_TIMESERIES_OBJ is not regularly sampled, then -1 is returned.\n\nHelp for ndi.probe.timeseries/samplerate is inherited from superclass ndi.time.timeseries\n</code></pre> <p>samples2times - convert from the timeseries time to sample numbers</p> <pre><code>SAMPLES = SAMPLES2TIMES(NDI_TIMESERIES_OBJ, EPOCH, TIMES)\n\n  For a given ndi.time.timeseries object and a recording epoch EPOCH,\n  return the sample index numbers SAMPLE that corresponds to the times TIMES.\n  The first sample in the epoch is 1.\n  The TIMES requested might be out of bounds of the EPOCH; no checking is performed.\n\n  TODO: convert times to dev_local_clock\n\nHelp for ndi.probe.timeseries/samples2times is inherited from superclass ndi.time.timeseries\n</code></pre> <p>searchquery - need docs here</p> <pre><code>\n</code></pre> <p>t0_t1 - **</p> <pre><code>T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch\n\n  T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\n  TODO: this must be a bug, it's just self-referential\n\nHelp for ndi.probe.timeseries/t0_t1 is inherited from superclass ndi.element\n</code></pre> <p>times2samples - convert from the timeseries time to sample numbers</p> <pre><code>SAMPLES = TIMES2SAMPLES(NDI_TIMESERIES_OBJ, EPOCH, TIMES)\n\n  For a given ndi.time.timeseries object and a recording epoch EPOCH,\n  return the sample index numbers SAMPLE that corresponds to the times TIMES.\n  The first sample in the epoch is 1.\n  The TIMES requested might be out of bounds of the EPOCH; no checking is performed.\n\nHelp for ndi.probe.timeseries/times2samples is inherited from superclass ndi.time.timeseries\n</code></pre> <p>timeseries - create a new ndi.probe.timeseries object</p> <pre><code>OBJ = ndi.probe.timeseries(SESSION, NAME, REFERENCE, TYPE)\n\n   Creates an ndi.probe associated with an ndi.session object SESSION and\n   with name NAME (a string that must start with a letter and contain no white space),\n   reference number equal to REFERENCE (a non-negative integer), the TYPE of the\n   probe (a string that must start with a letter and contain no white space).\n\n   ndi.probe.timeseries is an abstract class, and a specific implementation must be called.\n\n    Documentation for ndi.probe.timeseries/timeseries\n       doc ndi.probe.timeseries\n</code></pre> <p>underlyingepochnodes - find all the underlying epochnodes of a given epochnode</p> <pre><code>[UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE)\n\n  Traverse the underlying nodes of a given EPOCHNODE until we get to the roots\n  (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1).\n\n  Note that the EPOCHNODE itself is returned as the first 'underlying' node.\n\n  See also: ISSYNCGRAPHROOT\n\nHelp for ndi.probe.timeseries/underlyingepochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.probe.timeseries.unique_id is inherited from superclass did.ido\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Bfun/getProbeTypeMap.m/","title":"ndi.probe.fun.getProbeTypeMap","text":"<pre><code>ndi.probe.fun.getProbeTypeMap is a function.\n    probeTypeMap = ndi.probe.fun.getProbeTypeMap\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Bfun/initProbeTypeMap.m/","title":"ndi.probe.fun.initProbeTypeMap","text":"<pre><code>ndi.probe.fun.initProbeTypeMap is a function.\n    probeTypeMap = ndi.probe.fun.initProbeTypeMap(legacy)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Bfun/probestruct2probe.m/","title":"ndi.probe.fun.probestruct2probe","text":"<pre><code>  NDI.PROBE.FUN.PROBESTRUCT2PROBE - Convert probe structures to NDI_PROBE objects\n\n  NDI_PROBE_OBJ = ndi.probe.fun.probestruct2probe(PROBESTRUCT, EXP)\n\n  Given an array of structures PROBESTRUCT with field\n  'name', 'reference', and 'type', and an ndi.session EXP,\n  this function generates the appropriate subclass of ndi.probe for\n  dealing with the PROBE and returns the objects in a cell array NDI_PROBE_OBJ.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/mfdaq.m/","title":"CLASS ndi.probe.timeseries.mfdaq","text":"<pre><code>  NDI_PROBE_TIMESERIES_MFDAQ - Create a new NDI_PROBE_MFAQ class object that handles probes that are associated with NDI_DAQSYSTEM_MFDAQ objects\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/mfdaq.m/#superclasses","title":"Superclasses","text":"<p>ndi.probe.timeseries, ndi.probe, ndi.element, ndi.ido, did.ido, ndi.epoch.epochset, ndi.documentservice, matlab.mixin.Heterogeneous, ndi.time.timeseries</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/mfdaq.m/#properties","title":"Properties","text":"Property Description session name type reference underlying_element direct subject_id dependencies identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/mfdaq.m/#methods","title":"Methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version mfdaq create a new ndi.probe object newdocument need docs here numepochs Number of epochs of ndi.epoch.epochset probestring Produce a human-readable probe string read_epochsamples read the data from a specified epoch readtimeseries read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch readtimeseriesepoch read the data from a specified epoch resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate GET THE SAMPLE RATE FOR A PROBE IN AN EPOCH samples2times convert from the timeseries time to sample numbers searchquery need docs here t0_t1 times2samples convert from the timeseries time to sample numbers underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method)"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/mfdaq.m/#methods-help","title":"Methods help","text":"<p>addepoch - add an epoch to the ndi.element</p> <pre><code>[NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, [ADD_TO_DB], [EPOCHIDS])\n\n  Registers the data for an epoch with the NDI_ELEMENT_OBJ.\n\n  Inputs:\n    NDI_ELEMENT_OBJ: The ndi.element object to modify\n    EPOCHID:       The name of the epoch to add; should match the name of an epoch from the probe\n    EPOCHCLOCK:    The epoch clock; must be a single clock type that matches one of the clock types\n                      of the probe\n    T0_T1:         The starting time and ending time of the existence of information about the ELEMENT on\n                      the probe, in units of the epock clock\n    ADD_TO_DB:     0/1 Should we actually add the epoch document to the database? Default 0.\n    EPOCHIDS:      The epoch ids of the original epochs (used in conjunction with a oneepoch document).\n\nHelp for ndi.probe.timeseries.mfdaq/addepoch is inherited from superclass ndi.element\n</code></pre> <p>buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of EPOCHNODES.\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\n  In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with\n  a cost of 1 and a linear mapping rule with shift 1 and offset 0:\n    'utc' -&gt; 'utc'\n    'utc' -&gt; 'approx_utc'\n    'exp_global_time' -&gt; 'exp_global_time'\n    'exp_global_time' -&gt; 'approx_exp_global_time'\n    'dev_global_time' -&gt; 'dev_global_time'\n    'dev_global_time' -&gt; 'approx_dev_global_time'\n\n\n  See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping,\n  ndi.probe.timeseries.mfdaq/EPOCHNODES\n\nHelp for ndi.probe.timeseries.mfdaq/buildepochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>buildepochtable - build the epoch table for an ndi.probe.*</p> <pre><code>ET = BUILDEPOCHTABLE(NDI_PROBE_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch (may change)\n  'epoch_id'                | The epoch ID code (will never change once established)\n                            |   This uniquely specifies the epoch.\n  'epoch_session_id'           | The ID of the session\n  'epochprobemap'           | The epochprobemap object from each epoch\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', and 'epoch_id'\n\nHelp for ndi.probe.timeseries.mfdaq/buildepochtable is inherited from superclass ndi.probe\n</code></pre> <p>cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache</p> <pre><code>GINFO_BIG = GINFO2CACHE(GINFO_SMALL)\n\nHelp for ndi.probe.timeseries.mfdaq.cache2ginfo is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epoch graph, if it exists and is up-to-date\n  (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ\n  has not changed). If there is no cached version, or if it is not up-to-date,\n  COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date,\n  it is deleted.\n\n  See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH\n\nHelp for ndi.probe.timeseries.mfdaq/cached_epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object</p> <pre><code>[ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epochtable, if it exists, along with its HASHVALUE\n  (a hash number generated from the table). If there is no cached version,\n  ET and HASHVALUE will be empty.\n\nHelp for ndi.probe.timeseries.mfdaq/cached_epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>doc_unique_id - return the document unique reference for an ndi.element object</p> <pre><code>UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ)\n\n  Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated\n  document for the element, then empty is returned.\n\nHelp for ndi.probe.timeseries.mfdaq/doc_unique_id is inherited from superclass ndi.element\n</code></pre> <p>elementstring - Produce a human-readable element string</p> <pre><code>ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ)\n\n  Returns the name as a human-readable string.\n\n  For ndi.element objects, this is the string 'element: ' followed by its name\n\nHelp for ndi.probe.timeseries.mfdaq/elementstring is inherited from superclass ndi.element\n</code></pre> <p>epoch2str - convert an epoch number or id to a string</p> <pre><code>S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER)\n\n  Returns the epoch NUMBER in the form of a string. If it is a simple\n  integer, then INT2STR is used to produce a string. If it is an epoch\n  identifier string, then it is returned.\n\nHelp for ndi.probe.timeseries.mfdaq/epoch2str is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_PROBE_OBJ, EPOCH_NUMBER)\n\n  Return the clock types available for this epoch.\n\n  The ndi.probe class always returns the clock type(s) of the device it is based on\n\nHelp for ndi.probe.timeseries.mfdaq/epochclock is inherited from superclass ndi.probe\n</code></pre> <p>epochgraph - graph of the mapping and cost of converting time among epochs</p> <pre><code>[COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes).\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\nHelp for ndi.probe.timeseries.mfdaq/epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochid - Get the epoch identifier for a particular epoch</p> <pre><code>ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Returns the epoch identifier string for the epoch EPOCH_NUMBER.\n  If it doesn't exist, it should be created. EPOCH_NUMBER can be\n  a number of an EPOCH ID string.\n\n  The abstract class just queries the EPOCHTABLE.\n  Most classes that manage epochs themselves (ndi.file.navigator,\n  ndi.daq.system) will override this method.\n\nHelp for ndi.probe.timeseries.mfdaq/epochid is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochnodes - return all epoch nodes from an ndi.epoch.epochset object</p> <pre><code>[NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ)\n\n  Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the\n  following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch within the session.\n  'epoch_session_id'           | The ID of the session that contains the epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A SINGLE ndi.time.clocktype entry that describes the clock type of this node.\n  't0_t1'                   | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock'\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_id', and 'epochprobemap'\n  'objectname'              | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no\n                            |   'name' field, then 'unknown' is used.\n  'objectclass'             | The object class name of the NDI_EPOCHSET_OBJ.\n\n  EPOCHNODES are related to EPOCHTABLE entries, except\n     a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains\n        multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids\n        in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another.\n     b) EPOCHNODES contain identifying information (objectname and objectclass) to help\n        in identifying the epoch nodes across ndi.epoch.epochset objects.\n\n  UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs.\n\nHelp for ndi.probe.timeseries.mfdaq/epochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochprobemapmatch - does an epochprobemap record match our probe?</p> <pre><code>B = EPOCHPROBEMAPMATCH(NDI_PROBE_OBJ, EPOCHPROBEMAP)\n\n  Returns 1 if the ndi.epoch.epochprobemap object EPOCHPROBEMAP is a match for\n  the NDI_PROBE_OBJ probe and 0 otherwise.\n\nHelp for ndi.probe.timeseries.mfdaq/epochprobemapmatch is inherited from superclass ndi.probe\n</code></pre> <p>epochsetname - the name of the ndi.probe. object, for EPOCHNODES*</p> <pre><code>NAME = EPOCHSETNAME(NDI_PROBE_OBJ)\n\n  Returns the object name that is used when creating epoch nodes.\n\n  For ndi.probe objects, this is the string 'probe: ' followed by\n  PROBESTRING(NDI_PROBE_OBJ).\n\nHelp for ndi.probe.timeseries.mfdaq/epochsetname is inherited from superclass ndi.probe\n</code></pre> <p>epochtable - Return an epoch table that relates the current object's epochs to underlying epochs</p> <pre><code>[ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch. The number may change as epochs are added and subtracted.\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch.\n  'epoch_session_id'           | The session ID that contains this epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap'\n\n  HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable\n  has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE.\n\n  After it is read from disk once, the ET is stored in memory and is not re-read from disk\n  unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE.\n\nHelp for ndi.probe.timeseries.mfdaq/epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID</p> <pre><code>ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object\n  that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the\n  epoch or the EPOCHID of the epoch.\n\nHelp for ndi.probe.timeseries.mfdaq/epochtableentry is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>eq - are 2 ndi.probe objects equal?</p> <pre><code>Returns 1 if the objects share an object class, session, and probe string.\n\nHelp for ndi.probe.timeseries.mfdaq/eq is inherited from superclass ndi.probe\n</code></pre> <p>getcache - return the NDI_CACHE and key for ndi.element</p> <pre><code>[CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ)\n\n  Returns the CACHE and KEY for the ndi.element object.\n\n  The CACHE is returned from the associated session.\n  The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT.\n\n  See also: ndi.file.navigator\n\nHelp for ndi.probe.timeseries.mfdaq/getcache is inherited from superclass ndi.element\n</code></pre> <p>getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.*</p> <pre><code>[DEV, DEVNAME, DEVEPOCH, CHANNELTYPE, CHANNELLIST] = GETCHANNELDEVINFO(NDI_PROBE_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Given an ndi.probe.* object and an EPOCH number, this function returns the corresponding channel and device info.\n  Suppose there are C channels corresponding to a probe. Then the outputs are\n    DEV is a 1xC cell array of ndi.daq.system objects for each channel\n    DEVNAME is a 1xC cell array of the names of each device in DEV\n    DEVEPOCH is a 1xC array with the epoch id of the probe's EPOCH on each device\n    CHANNELTYPE is a cell array of the type of each channel\n    CHANNELLIST is the channel number of each channel.\n\nHelp for ndi.probe.timeseries.mfdaq/getchanneldevinfo is inherited from superclass ndi.probe\n</code></pre> <p>getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs</p> <pre><code>EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ)\n\n  Produce an array of ndi.epoch objects from the epoch table of this\n  ndi.epoch.epochset object (NDI_EPOCHSET_OBJ).\n\nHelp for ndi.probe.timeseries.mfdaq/getepocharray is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache</p> <pre><code>GINFO_SMALL = GINFO2CACHE(GINFO)\n\nHelp for ndi.probe.timeseries.mfdaq.ginfo2cache is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>id - return the document unique identifier for an ndi.element object</p> <pre><code>UNIQUE_REF = ID(NDI_ELEMENT_OBJ)\n\n  Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated\n  document for the element, then an error is returned.\n\nHelp for ndi.probe.timeseries.mfdaq/id is inherited from superclass ndi.element\n</code></pre> <p>issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph?</p> <pre><code>B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ)\n\n  This function tells an ndi.time.syncgraph object whether it should continue\n  adding the 'underlying' epochs to the graph, or whether it should stop at this level.\n\n  For ndi.epoch.epochset and ndi.probe.* this returns 0 so that the underlying ndi.daq.system epochs are added.\n\nHelp for ndi.probe.timeseries.mfdaq/issyncgraphroot is inherited from superclass ndi.probe\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.probe.timeseries.mfdaq.isvalid is inherited from superclass did.ido\n</code></pre> <p>load_all_element_docs - load all of the ndi.element objects from an session database</p> <pre><code>ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ)\n\n  Loads the ndi.document that is based on the ndi.element object and any associated\n  epoch documents.\n\nHelp for ndi.probe.timeseries.mfdaq/load_all_element_docs is inherited from superclass ndi.element\n</code></pre> <p>load_element_doc - load a element doc from the session database</p> <pre><code>ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ)\n\n  Load an ndi.document that is based on the ndi.element object.\n\n  Returns empty if there is no such document.\n\nHelp for ndi.probe.timeseries.mfdaq/load_element_doc is inherited from superclass ndi.element\n</code></pre> <p>loadaddedepochs - load the added epochs from an ndi.element</p> <pre><code>[ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ)\n\n  Load the EPOCHTABLE that consists of added/registered epochs that provide information\n  about the ndi.element.\n\nHelp for ndi.probe.timeseries.mfdaq/loadaddedepochs is inherited from superclass ndi.element\n</code></pre> <p>matchedepochtable - compare a hash number from an epochtable to the current version</p> <pre><code>B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE)\n\n  Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE.\n  Otherwise, it returns 0.\n\nHelp for ndi.probe.timeseries.mfdaq/matchedepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>mfdaq - create a new ndi.probe object</p> <pre><code>OBJ = ndi.probe.timeseries.mfdaq(SESSION, NAME, REFERENCE, TYPE)\n\n   Creates an ndi.probe associated with an ndi.session object SESSION and\n   with name NAME (a string that must start with a letter and contain no white space),\n   reference number equal to REFERENCE (a non-negative integer), the TYPE of the\n   probe (a string that must start with a letter and contain no white space).\n\n   ndi.probe is an abstract class, and a specific implementation must be called.\n\n    Documentation for ndi.probe.timeseries.mfdaq/mfdaq\n       doc ndi.probe.timeseries.mfdaq\n</code></pre> <p>newdocument - need docs here</p> <pre><code>Help for ndi.probe.timeseries.mfdaq/newdocument is inherited from superclass ndi.probe.timeseries\n</code></pre> <p>numepochs - Number of epochs of ndi.epoch.epochset</p> <pre><code>N = NUMEPOCHS(NDI_EPOCHSET_OBJ)\n\n  Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ.\n\n  See also: EPOCHTABLE\n\nHelp for ndi.probe.timeseries.mfdaq/numepochs is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>probestring - Produce a human-readable probe string</p> <pre><code>PROBESTR = PROBESTRING(NDI_PROBE_OBJ)\n\n  Returns the name and reference of a probe as a human-readable string.\n\n  This is simply PROBESTR = [NDI_PROBE_OBJ.name ' _ ' in2str(NDI_PROBE_OBJ.reference)]\n\nHelp for ndi.probe.timeseries.mfdaq/probestring is inherited from superclass ndi.probe\n</code></pre> <p>read_epochsamples - read the data from a specified epoch</p> <pre><code>[DATA, T, TIMEREF_OUT] = READ_EPOCHSAMPLES(NDI_PROBE_TIMESERIES_MFDAQ_OBJ, EPOCH ,S0, S1)\n\n   EPOCH is the epoch number to read from.\n\n   DATA will have one column per channel.\n   T is the time of each sample, relative to the beginning of the epoch.\n   TIMEREF_OUT is an ndi.time.timereference object that describes the epoch.\n</code></pre> <p>readtimeseries - read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch</p> <pre><code>[DATA, T, TIMEREF] = READTIMESERIES(NDI_PROBE_TIMESERIES_OBJ, TIMEREF_OR_EPOCH, T0, T1)\n\n   Reads timeseries data from an ndi.probe.timeseries object. The DATA and time information T that are\n   returned depend on the the specific subclass of ndi.probe.timeseries that is called (see READTIMESERIESEPOCH).\n\n   TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the time reference for\n   T0, T1, or it can be a single number, which will indicate the data are to be read from that\n   epoch.\n\n   DATA is the data for the probe.  T is a time structure, in units of TIMEREF if it is an\n   ndi.time.timereference object or in units of the epoch if an epoch is passed.  The TIMEREF is returned.\n\nHelp for ndi.probe.timeseries.mfdaq/readtimeseries is inherited from superclass ndi.probe.timeseries\n</code></pre> <p>readtimeseriesepoch - read the data from a specified epoch</p> <pre><code>[DATA, T, TIMEREF_OUT] = READTIMESERIESEPOCH(NDI_PROBE_TIMESERIES_MFDAQ_OBJ, EPOCH ,T0, T1)\n\n   EPOCH is the epoch number to read from.\n\n   DATA will have one column per channel.\n   T is the time of each sample, relative to the beginning of the epoch.\n   TIMEREF_OUT is an ndi.time.timereference object that describes the epoch.\n</code></pre> <p>resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk</p> <pre><code>NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  This function clears the internal cached memory of the epochtable, forcing it to be re-read from\n  disk at the next request.\n\n  See also: ndi.probe.timeseries.mfdaq/EPOCHTABLE\n\nHelp for ndi.probe.timeseries.mfdaq/resetepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>samplerate - GET THE SAMPLE RATE FOR A PROBE IN AN EPOCH</p> <pre><code>SR = SAMPLERATE(NDI_PROBE_TIMESERIES_MFDAQ_OBJ, EPOCH)\n\n  SR is an array of sample rates for the probe NDI_PROBE_TIMESERIES_MFDAQ_OBJ\n  from epoch number EPOCH.\n</code></pre> <p>samples2times - convert from the timeseries time to sample numbers</p> <pre><code>SAMPLES = SAMPLES2TIMES(NDI_TIMESERIES_OBJ, EPOCH, TIMES)\n\n  For a given ndi.time.timeseries object and a recording epoch EPOCH,\n  return the sample index numbers SAMPLE that corresponds to the times TIMES.\n  The first sample in the epoch is 1.\n  The TIMES requested might be out of bounds of the EPOCH; no checking is performed.\n\n  TODO: convert times to dev_local_clock\n\nHelp for ndi.probe.timeseries.mfdaq/samples2times is inherited from superclass ndi.time.timeseries\n</code></pre> <p>searchquery - need docs here</p> <pre><code>Help for ndi.probe.timeseries.mfdaq/searchquery is inherited from superclass ndi.probe.timeseries\n</code></pre> <p>t0_t1 - **</p> <pre><code>T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch\n\n  T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\n  TODO: this must be a bug, it's just self-referential\n\nHelp for ndi.probe.timeseries.mfdaq/t0_t1 is inherited from superclass ndi.element\n</code></pre> <p>times2samples - convert from the timeseries time to sample numbers</p> <pre><code>SAMPLES = TIMES2SAMPLES(NDI_TIMESERIES_OBJ, EPOCH, TIMES)\n\n  For a given ndi.time.timeseries object and a recording epoch EPOCH,\n  return the sample index numbers SAMPLE that corresponds to the times TIMES.\n  The first sample in the epoch is 1.\n  The TIMES requested might be out of bounds of the EPOCH; no checking is performed.\n\nHelp for ndi.probe.timeseries.mfdaq/times2samples is inherited from superclass ndi.time.timeseries\n</code></pre> <p>underlyingepochnodes - find all the underlying epochnodes of a given epochnode</p> <pre><code>[UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE)\n\n  Traverse the underlying nodes of a given EPOCHNODE until we get to the roots\n  (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1).\n\n  Note that the EPOCHNODE itself is returned as the first 'underlying' node.\n\n  See also: ISSYNCGRAPHROOT\n\nHelp for ndi.probe.timeseries.mfdaq/underlyingepochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.probe.timeseries.mfdaq.unique_id is inherited from superclass did.ido\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/stimulator.m/","title":"CLASS ndi.probe.timeseries.stimulator","text":"<pre><code>  ndi.probe.timeseries.stimulator - Create a new NDI_PROBE_TIMESERIES_STIMULATOR class object that handles probes that are associated with NDI_DAQSYSTEM_STIMULUS objects\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/stimulator.m/#superclasses","title":"Superclasses","text":"<p>ndi.probe.timeseries, ndi.probe, ndi.element, ndi.ido, did.ido, ndi.epoch.epochset, ndi.documentservice, matlab.mixin.Heterogeneous, ndi.time.timeseries</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/stimulator.m/#properties","title":"Properties","text":"Property Description session name type reference underlying_element direct subject_id dependencies identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/stimulator.m/#methods","title":"Methods","text":"Method Description addepoch add an epoch to the ndi.element buildepochgraph compute the epochgraph among epochs for an ndi.epoch.epochset object buildepochtable build the epoch table for an ndi.probe.* cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_epochgraph return the cached epoch graph of an ndi.epoch.epochset object cached_epochtable return the cached epochtable of an ndi.epoch.epochset object doc_unique_id return the document unique reference for an ndi.element object elementstring Produce a human-readable element string epoch2str convert an epoch number or id to a string epochclock return the ndi.time.clocktype objects for an epoch epochgraph graph of the mapping and cost of converting time among epochs epochid Get the epoch identifier for a particular epoch epochnodes return all epoch nodes from an ndi.epoch.epochset object epochprobemapmatch does an epochprobemap record match our probe? epochsetname the name of the ndi.probe.* object, for EPOCHNODES epochtable Return an epoch table that relates the current object's epochs to underlying epochs epochtableentry return the entry of the EPOCHTABLE that corresponds to an EPOCHID eq are 2 ndi.probe objects equal? getcache return the NDI_CACHE and key for ndi.element getchanneldevinfo GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.* getepocharray Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache id return the document unique identifier for an ndi.element object issyncgraphroot should this object be a root in an ndi.time.syncgraph epoch graph? isvalid is a unique ID number valid? load_all_element_docs load all of the ndi.element objects from an session database load_element_doc load a element doc from the session database loadaddedepochs load the added epochs from an ndi.element matchedepochtable compare a hash number from an epochtable to the current version newdocument need docs here numepochs Number of epochs of ndi.epoch.epochset probestring Produce a human-readable probe string readtimeseries read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch readtimeseriesepoch Read stimulus data from an ndi.probe.timeseries.stimulator object resetepochtable clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery need docs here stimulator create a new ndi.probe.timeseries.stimulator object t0_t1 times2samples convert from the timeseries time to sample numbers underlyingepochnodes find all the underlying epochnodes of a given epochnode unique_id Generate a unique ID number for DID databases (Static method)"},{"location":"NDI-matlab/reference/%2Bndi/%2Bprobe/%2Btimeseries/stimulator.m/#methods-help","title":"Methods help","text":"<p>addepoch - add an epoch to the ndi.element</p> <pre><code>[NDI_ELEMENT_OBJ, EPOCHDOC] = ADDEPOCH(NDI_ELEMENT_OBJ, EPOCHID, EPOCHCLOCK, T0_T1, [ADD_TO_DB], [EPOCHIDS])\n\n  Registers the data for an epoch with the NDI_ELEMENT_OBJ.\n\n  Inputs:\n    NDI_ELEMENT_OBJ: The ndi.element object to modify\n    EPOCHID:       The name of the epoch to add; should match the name of an epoch from the probe\n    EPOCHCLOCK:    The epoch clock; must be a single clock type that matches one of the clock types\n                      of the probe\n    T0_T1:         The starting time and ending time of the existence of information about the ELEMENT on\n                      the probe, in units of the epock clock\n    ADD_TO_DB:     0/1 Should we actually add the epoch document to the database? Default 0.\n    EPOCHIDS:      The epoch ids of the original epochs (used in conjunction with a oneepoch document).\n\nHelp for ndi.probe.timeseries.stimulator/addepoch is inherited from superclass ndi.element\n</code></pre> <p>buildepochgraph - compute the epochgraph among epochs for an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = BUILDEPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of EPOCHNODES.\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\n  In the abstract class, the following NDI_CLOCKTYPEs, if they exist, are linked across epochs with\n  a cost of 1 and a linear mapping rule with shift 1 and offset 0:\n    'utc' -&gt; 'utc'\n    'utc' -&gt; 'approx_utc'\n    'exp_global_time' -&gt; 'exp_global_time'\n    'exp_global_time' -&gt; 'approx_exp_global_time'\n    'dev_global_time' -&gt; 'dev_global_time'\n    'dev_global_time' -&gt; 'approx_dev_global_time'\n\n\n  See also: ndi.time.clocktype, ndi.time.clocktype/ndi.time.clocktype, ndi.time.timemapping, ndi.time.timemapping/ndi.time.timemapping,\n  ndi.probe.timeseries.stimulator/EPOCHNODES\n\nHelp for ndi.probe.timeseries.stimulator/buildepochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>buildepochtable - build the epoch table for an ndi.probe.*</p> <pre><code>ET = BUILDEPOCHTABLE(NDI_PROBE_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch (may change)\n  'epoch_id'                | The epoch ID code (will never change once established)\n                            |   This uniquely specifies the epoch.\n  'epoch_session_id'           | The ID of the session\n  'epochprobemap'           | The epochprobemap object from each epoch\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', and 'epoch_id'\n\nHelp for ndi.probe.timeseries.stimulator/buildepochtable is inherited from superclass ndi.probe\n</code></pre> <p>cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache</p> <pre><code>GINFO_BIG = GINFO2CACHE(GINFO_SMALL)\n\nHelp for ndi.probe.timeseries.stimulator.cache2ginfo is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochgraph - return the cached epoch graph of an ndi.epoch.epochset object</p> <pre><code>[COST,MAPPING] = CACHED_EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epoch graph, if it exists and is up-to-date\n  (that is, the hash number from the EPOCHTABLE of NDI_EPOCHSET_OBJ\n  has not changed). If there is no cached version, or if it is not up-to-date,\n  COST and MAPPING will be empty. If the cached epochgraph is present and not up-to-date,\n  it is deleted.\n\n  See also: NDI_EPOCHSET_OBJ/EPOCHGRAPH, NDI_EPOCHSET_OBJ/BUILDEPOCHGRAPH\n\nHelp for ndi.probe.timeseries.stimulator/cached_epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>cached_epochtable - return the cached epochtable of an ndi.epoch.epochset object</p> <pre><code>[ET, HASHVALUE] = CACHED_EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  Return the cached version of the epochtable, if it exists, along with its HASHVALUE\n  (a hash number generated from the table). If there is no cached version,\n  ET and HASHVALUE will be empty.\n\nHelp for ndi.probe.timeseries.stimulator/cached_epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>doc_unique_id - return the document unique reference for an ndi.element object</p> <pre><code>UNIQUE_REF = DOC_UNIQUE_ID(NDI_ELEMENT_OBJ)\n\n  Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated\n  document for the element, then empty is returned.\n\nHelp for ndi.probe.timeseries.stimulator/doc_unique_id is inherited from superclass ndi.element\n</code></pre> <p>elementstring - Produce a human-readable element string</p> <pre><code>ELEMENTSTR = ELEMENTSTRING(NDI_ELEMENT_OBJ)\n\n  Returns the name as a human-readable string.\n\n  For ndi.element objects, this is the string 'element: ' followed by its name\n\nHelp for ndi.probe.timeseries.stimulator/elementstring is inherited from superclass ndi.element\n</code></pre> <p>epoch2str - convert an epoch number or id to a string</p> <pre><code>S = EPOCH2STR(NDI_EPOCHSET_OBJ, NUMBER)\n\n  Returns the epoch NUMBER in the form of a string. If it is a simple\n  integer, then INT2STR is used to produce a string. If it is an epoch\n  identifier string, then it is returned.\n\nHelp for ndi.probe.timeseries.stimulator/epoch2str is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_PROBE_OBJ, EPOCH_NUMBER)\n\n  Return the clock types available for this epoch.\n\n  The ndi.probe class always returns the clock type(s) of the device it is based on\n\nHelp for ndi.probe.timeseries.stimulator/epochclock is inherited from superclass ndi.probe\n</code></pre> <p>epochgraph - graph of the mapping and cost of converting time among epochs</p> <pre><code>[COST, MAPPING] = EPOCHGRAPH(NDI_EPOCHSET_OBJ)\n\n  Compute the cost and the mapping among epochs in the EPOCHTABLE for an ndi.epoch.epochset object\n\n  COST is an MxM matrix where M is the number of ordered pairs of (epochs, clocktypes).\n  For example, if there is one epoch with clock types 'dev_local_time' and 'utc', then M is 2.\n  Each entry COST(i,j) indicates whether there is a mapping between (epoch, clocktype) i to j.\n  The cost of each transformation is normally 1 operation.\n  MAPPING is the ndi.time.timemapping object that describes the mapping.\n\nHelp for ndi.probe.timeseries.stimulator/epochgraph is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochid - Get the epoch identifier for a particular epoch</p> <pre><code>ID = EPOCHID (NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Returns the epoch identifier string for the epoch EPOCH_NUMBER.\n  If it doesn't exist, it should be created. EPOCH_NUMBER can be\n  a number of an EPOCH ID string.\n\n  The abstract class just queries the EPOCHTABLE.\n  Most classes that manage epochs themselves (ndi.file.navigator,\n  ndi.daq.system) will override this method.\n\nHelp for ndi.probe.timeseries.stimulator/epochid is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochnodes - return all epoch nodes from an ndi.epoch.epochset object</p> <pre><code>[NODES,UNDERLYINGNODES] = EPOCHNODES(NDI_EPOCHSET_OBJ)\n\n  Return all EPOCHNODES for an ndi.epoch.epochset. EPOCHNODES consist of the\n  following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch within the session.\n  'epoch_session_id'           | The ID of the session that contains the epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A SINGLE ndi.time.clocktype entry that describes the clock type of this node.\n  't0_t1'                   | The times [t0 t1] of the beginning and end of the epoch in units of 'epoch_clock'\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_id', and 'epochprobemap'\n  'objectname'              | A string containing the 'name' field of NDI_EPOCHSET_OBJ, if it exists. If there is no\n                            |   'name' field, then 'unknown' is used.\n  'objectclass'             | The object class name of the NDI_EPOCHSET_OBJ.\n\n  EPOCHNODES are related to EPOCHTABLE entries, except\n     a) only 1 ndi.time.clocktype is permitted per epoch node. If an entry in epoch table contains\n        multiple ndi.time.clocktype entries, then each one will have its own epoch node. This aids\n        in the construction of the EPOCHGRAPH that helps the system map time from one epoch to another.\n     b) EPOCHNODES contain identifying information (objectname and objectclass) to help\n        in identifying the epoch nodes across ndi.epoch.epochset objects.\n\n  UNDERLYINGNODES are nodes that are directly linked to this ndi.epoch.epochset's node via 'underlying' epochs.\n\nHelp for ndi.probe.timeseries.stimulator/epochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochprobemapmatch - does an epochprobemap record match our probe?</p> <pre><code>B = EPOCHPROBEMAPMATCH(NDI_PROBE_OBJ, EPOCHPROBEMAP)\n\n  Returns 1 if the ndi.epoch.epochprobemap object EPOCHPROBEMAP is a match for\n  the NDI_PROBE_OBJ probe and 0 otherwise.\n\nHelp for ndi.probe.timeseries.stimulator/epochprobemapmatch is inherited from superclass ndi.probe\n</code></pre> <p>epochsetname - the name of the ndi.probe. object, for EPOCHNODES*</p> <pre><code>NAME = EPOCHSETNAME(NDI_PROBE_OBJ)\n\n  Returns the object name that is used when creating epoch nodes.\n\n  For ndi.probe objects, this is the string 'probe: ' followed by\n  PROBESTRING(NDI_PROBE_OBJ).\n\nHelp for ndi.probe.timeseries.stimulator/epochsetname is inherited from superclass ndi.probe\n</code></pre> <p>epochtable - Return an epoch table that relates the current object's epochs to underlying epochs</p> <pre><code>[ET,HASHVALUE] = EPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  ET is a structure array with the following fields:\n  Fieldname:                | Description\n  ------------------------------------------------------------------------\n  'epoch_number'            | The number of the epoch. The number may change as epochs are added and subtracted.\n  'epoch_id'                | The epoch ID code (will never change once established, though it may be deleted.)\n                            |   This epoch ID uniquely specifies the epoch.\n  'epoch_session_id'           | The session ID that contains this epoch\n  'epochprobemap'           | Any contents information for each epoch, usually of type ndi.epoch.epochprobemap or empty.\n  'epoch_clock'             | A cell array of ndi.time.clocktype objects that describe the type of clocks available\n  't0_t1'                   | A cell array of ordered pairs [t0 t1] that indicates, for each ndi.time.clocktype, the start and stop\n                            |   time of this epoch. The time units of t0_t1{i} match epoch_clock{i}.\n  'underlying_epochs'       | A structure array of the ndi.epoch.epochset objects that comprise these epochs.\n                            |   It contains fields 'underlying', 'epoch_number', 'epoch_id', and 'epochprobemap'\n\n  HASHVALUE is the hashed value of the epochtable. One can check to see if the epochtable\n  has changed with ndi.epoch.epochset/MATCHEDEPOCHTABLE.\n\n  After it is read from disk once, the ET is stored in memory and is not re-read from disk\n  unless the user calls ndi.epoch.epochset/RESETEPOCHTABLE.\n\nHelp for ndi.probe.timeseries.stimulator/epochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>epochtableentry - return the entry of the EPOCHTABLE that corresponds to an EPOCHID</p> <pre><code>ET_ENTRY = EPOCHTABLEENTRY(NDI_EPOCHSET_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Returns the EPOCHTABLE entry associated with the ndi.epoch.epochset object\n  that corresponds to EPOCH_NUMBER_OR_ID, which can be the number of the\n  epoch or the EPOCHID of the epoch.\n\nHelp for ndi.probe.timeseries.stimulator/epochtableentry is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>eq - are 2 ndi.probe objects equal?</p> <pre><code>Returns 1 if the objects share an object class, session, and probe string.\n\nHelp for ndi.probe.timeseries.stimulator/eq is inherited from superclass ndi.probe\n</code></pre> <p>getcache - return the NDI_CACHE and key for ndi.element</p> <pre><code>[CACHE,KEY] = GETCACHE(NDI_ELEMENT_OBJ)\n\n  Returns the CACHE and KEY for the ndi.element object.\n\n  The CACHE is returned from the associated session.\n  The KEY is the probe's ELEMENTSTRING plus the TYPE of the ELEMENT.\n\n  See also: ndi.file.navigator\n\nHelp for ndi.probe.timeseries.stimulator/getcache is inherited from superclass ndi.element\n</code></pre> <p>getchanneldevinfo - GETCHANNELDEVINFO = Get the device, channeltype, and channellist for a given epoch for ndi.probe.*</p> <pre><code>[DEV, DEVNAME, DEVEPOCH, CHANNELTYPE, CHANNELLIST] = GETCHANNELDEVINFO(NDI_PROBE_OBJ, EPOCH_NUMBER_OR_ID)\n\n  Given an ndi.probe.* object and an EPOCH number, this function returns the corresponding channel and device info.\n  Suppose there are C channels corresponding to a probe. Then the outputs are\n    DEV is a 1xC cell array of ndi.daq.system objects for each channel\n    DEVNAME is a 1xC cell array of the names of each device in DEV\n    DEVEPOCH is a 1xC array with the epoch id of the probe's EPOCH on each device\n    CHANNELTYPE is a cell array of the type of each channel\n    CHANNELLIST is the channel number of each channel.\n\nHelp for ndi.probe.timeseries.stimulator/getchanneldevinfo is inherited from superclass ndi.probe\n</code></pre> <p>getepocharray - Return an array of ndi.epoch objects that relates the current object's epochs to underlying epochs</p> <pre><code>EPOCHOBJECTARRAY = GETEPOCHARRAY(NDI_EPOCHSET_OBJ)\n\n  Produce an array of ndi.epoch objects from the epoch table of this\n  ndi.epoch.epochset object (NDI_EPOCHSET_OBJ).\n\nHelp for ndi.probe.timeseries.stimulator/getepocharray is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache</p> <pre><code>GINFO_SMALL = GINFO2CACHE(GINFO)\n\nHelp for ndi.probe.timeseries.stimulator.ginfo2cache is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>id - return the document unique identifier for an ndi.element object</p> <pre><code>UNIQUE_REF = ID(NDI_ELEMENT_OBJ)\n\n  Returns the document unique reference for NDI_ELEMENT_OBJ. If there is no associated\n  document for the element, then an error is returned.\n\nHelp for ndi.probe.timeseries.stimulator/id is inherited from superclass ndi.element\n</code></pre> <p>issyncgraphroot - should this object be a root in an ndi.time.syncgraph epoch graph?</p> <pre><code>B = ISSYNCGRAPHROOT(NDI_EPOCHSET_OBJ)\n\n  This function tells an ndi.time.syncgraph object whether it should continue\n  adding the 'underlying' epochs to the graph, or whether it should stop at this level.\n\n  For ndi.epoch.epochset and ndi.probe.* this returns 0 so that the underlying ndi.daq.system epochs are added.\n\nHelp for ndi.probe.timeseries.stimulator/issyncgraphroot is inherited from superclass ndi.probe\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.probe.timeseries.stimulator.isvalid is inherited from superclass did.ido\n</code></pre> <p>load_all_element_docs - load all of the ndi.element objects from an session database</p> <pre><code>ELEMENT_DOCS = LOAD_ALL_ELEMENT_DOCS(NDI_ELEMENT_OBJ)\n\n  Loads the ndi.document that is based on the ndi.element object and any associated\n  epoch documents.\n\nHelp for ndi.probe.timeseries.stimulator/load_all_element_docs is inherited from superclass ndi.element\n</code></pre> <p>load_element_doc - load a element doc from the session database</p> <pre><code>ELEMENT_DOC = LOAD_ELEMENT_DOC(NDI_ELEMENT_OBJ)\n\n  Load an ndi.document that is based on the ndi.element object.\n\n  Returns empty if there is no such document.\n\nHelp for ndi.probe.timeseries.stimulator/load_element_doc is inherited from superclass ndi.element\n</code></pre> <p>loadaddedepochs - load the added epochs from an ndi.element</p> <pre><code>[ET_ADDED, EPOCHDOCS] = LOADADDEDEOPCHS(NDI_ELEMENT_OBJ)\n\n  Load the EPOCHTABLE that consists of added/registered epochs that provide information\n  about the ndi.element.\n\nHelp for ndi.probe.timeseries.stimulator/loadaddedepochs is inherited from superclass ndi.element\n</code></pre> <p>matchedepochtable - compare a hash number from an epochtable to the current version</p> <pre><code>B = MATCHEDEPOCHTABLE(NDI_EPOCHSET_OBJ, HASHVALUE)\n\n  Returns 1 if the current hashed value of the cached epochtable is identical to HASHVALUE.\n  Otherwise, it returns 0.\n\nHelp for ndi.probe.timeseries.stimulator/matchedepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>newdocument - need docs here</p> <pre><code>Help for ndi.probe.timeseries.stimulator/newdocument is inherited from superclass ndi.probe.timeseries\n</code></pre> <p>numepochs - Number of epochs of ndi.epoch.epochset</p> <pre><code>N = NUMEPOCHS(NDI_EPOCHSET_OBJ)\n\n  Returns the number of epochs in the ndi.epoch.epochset object NDI_EPOCHSET_OBJ.\n\n  See also: EPOCHTABLE\n\nHelp for ndi.probe.timeseries.stimulator/numepochs is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>probestring - Produce a human-readable probe string</p> <pre><code>PROBESTR = PROBESTRING(NDI_PROBE_OBJ)\n\n  Returns the name and reference of a probe as a human-readable string.\n\n  This is simply PROBESTR = [NDI_PROBE_OBJ.name ' _ ' in2str(NDI_PROBE_OBJ.reference)]\n\nHelp for ndi.probe.timeseries.stimulator/probestring is inherited from superclass ndi.probe\n</code></pre> <p>readtimeseries - read the probe data based on specified time relative to an NDI_TIMEFERENCE or epoch</p> <pre><code>[DATA, T, TIMEREF] = READTIMESERIES(NDI_PROBE_TIMESERIES_OBJ, TIMEREF_OR_EPOCH, T0, T1)\n\n   Reads timeseries data from an ndi.probe.timeseries object. The DATA and time information T that are\n   returned depend on the the specific subclass of ndi.probe.timeseries that is called (see READTIMESERIESEPOCH).\n\n   TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the time reference for\n   T0, T1, or it can be a single number, which will indicate the data are to be read from that\n   epoch.\n\n   DATA is the data for the probe.  T is a time structure, in units of TIMEREF if it is an\n   ndi.time.timereference object or in units of the epoch if an epoch is passed.  The TIMEREF is returned.\n\nHelp for ndi.probe.timeseries.stimulator/readtimeseries is inherited from superclass ndi.probe.timeseries\n</code></pre> <p>readtimeseriesepoch - Read stimulus data from an ndi.probe.timeseries.stimulator object</p> <pre><code>[DATA, T, TIMEREF] = READTIMESERIESEPOCH(NDI_PROBE_TIMESERIES_STIMULATOR_OBJ, EPOCH, T0, T1)\n   STIMON, STIMOFF, STIMID, PARAMETERS, STIMOPENCLOSE] = ...\n     READSTIMULUSEPOCH(NDI_PROBE_STIMULTOR_OBJ, EPOCH, T0, T1)\n\n  Reads stimulus delivery information from an ndi.probe.timeseries.stimulator object for a given EPOCH.\n  T0 and T1 are in epoch time.\n\n  T.STIMON is an Nx1 vector with the ON times of each stimulus delivery in the time units of\n     the epoch or the clock. If marker channels 'mk' are present, then STIMON is taken to be occurrences\n     where the first marker channel registers a value greater than 0. Alternatively, if 'dim*' channels are present,\n     then STIMON is taken to be times whenever ANY of the dim channels registers an event onset.\n  T.STIMOFF is an Nx1 vector with the OFF times of each stimulus delivery in the time units of\n     the epoch or the clock. If STIMOFF data is not provided, these values will be NaN. If marker channels 'mk'\n     are present, then STIMOFF is taken to be occurrences where the first marker channels registers a value less than 0.\n     Alternatively, if 'dim*' channels are present, then STIMOFF is taken to be the times when *any* of the 'dim*'\n     channels go off.\n  DATA.STIMID is an Nx1 vector with the STIMID values. If STIMID values are not provided, these values\n     will be NaN. If there are marker channels, the STIMID is taken to be the marker code of the second marker channel\n     in the group. If 'dim*' channels are present, then the stimid will be 1..number of dim channels, depending upon\n     which 'dim*' channel turned on. For example, if the second one turned on, then the stimid is 2.\n  DATA.PARAMETERS is an Nx1 cell array of stimulus parameters. If the device provides no parameters,\n     then this will be an empty cell array of size Nx1. This is read from the first metadata channel.\n  DATA.ANALOG is an Nx1 vector with any analog data produced by the stimulator\n  T.STIMOPENCLOSE is an Nx2 vector of stimulus 'setup' and 'shutdown' times, if applicable. For example,\n     a visual stimulus might begin or end with the presentation of a 'background' image. These times will\n     be encoded here. If there is no information about stimulus setup or shutdown, then\n     T.STIMOPENCLOSE == [T.STIMON T.STIMOFF]. If there is a third marker channel present, then STIMOPENCLOSE\n     will be defined by +1 and -1 marks on the third marker channel.\n  T.STIMEVENTS is a cell array of stimulus event triggers that occur while the stimuli are running.\n     These channels are optional and may not be present. If the NDI_PROBE_TIMESERIES_STIMULATOR_OBJ has\n     no events, this will be an empty cell array.\n     There will be one entry per event channel. In a visual stimulus system, the first event channel\n     should be data frame events (when the video monitor updates). The second event channel can be the\n     monitor's refresh rate, if it has one.\n  T.ANALOG is the time of each analog sample\n\n  TIMEREF is an ndi.time.timereference object that refers to this EPOCH.\n\n  See also: ndi.probe.timeseries/READTIMESERIES\n</code></pre> <p>resetepochtable - clear an ndi.epoch.epochset epochtable in memory and force it to be re-read from disk</p> <pre><code>NDI_EPOCHSET_OBJ = RESETEPOCHTABLE(NDI_EPOCHSET_OBJ)\n\n  This function clears the internal cached memory of the epochtable, forcing it to be re-read from\n  disk at the next request.\n\n  See also: ndi.probe.timeseries.stimulator/EPOCHTABLE\n\nHelp for ndi.probe.timeseries.stimulator/resetepochtable is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>samplerate - return the sample rate of an ndi.time.timeseries object</p> <pre><code>SR = SAMPLERATE(NDI_TIMESERIES_OBJ, EPOCH)\n\n  Returns the sampling rate of a given ndi.time.timeseries object for the epoch\n  EPOCH. EPOCH can be specified as an index or EPOCH_ID.\n\n  If NDI_TIMESERIES_OBJ is not regularly sampled, then -1 is returned.\n\nHelp for ndi.probe.timeseries.stimulator/samplerate is inherited from superclass ndi.time.timeseries\n</code></pre> <p>samples2times - convert from the timeseries time to sample numbers</p> <pre><code>SAMPLES = SAMPLES2TIMES(NDI_TIMESERIES_OBJ, EPOCH, TIMES)\n\n  For a given ndi.time.timeseries object and a recording epoch EPOCH,\n  return the sample index numbers SAMPLE that corresponds to the times TIMES.\n  The first sample in the epoch is 1.\n  The TIMES requested might be out of bounds of the EPOCH; no checking is performed.\n\n  TODO: convert times to dev_local_clock\n\nHelp for ndi.probe.timeseries.stimulator/samples2times is inherited from superclass ndi.time.timeseries\n</code></pre> <p>searchquery - need docs here</p> <pre><code>Help for ndi.probe.timeseries.stimulator/searchquery is inherited from superclass ndi.probe.timeseries\n</code></pre> <p>stimulator - create a new ndi.probe.timeseries.stimulator object</p> <pre><code>OBJ = ndi.probe.timeseries.stimulator(SESSION, NAME, REFERENCE, TYPE)\n\n  Creates an ndi.probe.timeseries.stimulator associated with an ndi.session object SESSION and\n  with name NAME (a string that must start with a letter and contain no white space),\n  reference number equal to REFERENCE (a non-negative integer), the TYPE of the\n  probe (a string that must start with a letter and contain no white space).\n\n    Documentation for ndi.probe.timeseries.stimulator/stimulator\n       doc ndi.probe.timeseries.stimulator\n</code></pre> <p>t0_t1 - **</p> <pre><code>T0_T1 - return the t0_t1 (beginning and end) epoch times for an epoch\n\n  T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCH_NUMBER)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\n  TODO: this must be a bug, it's just self-referential\n\nHelp for ndi.probe.timeseries.stimulator/t0_t1 is inherited from superclass ndi.element\n</code></pre> <p>times2samples - convert from the timeseries time to sample numbers</p> <pre><code>SAMPLES = TIMES2SAMPLES(NDI_TIMESERIES_OBJ, EPOCH, TIMES)\n\n  For a given ndi.time.timeseries object and a recording epoch EPOCH,\n  return the sample index numbers SAMPLE that corresponds to the times TIMES.\n  The first sample in the epoch is 1.\n  The TIMES requested might be out of bounds of the EPOCH; no checking is performed.\n\nHelp for ndi.probe.timeseries.stimulator/times2samples is inherited from superclass ndi.time.timeseries\n</code></pre> <p>underlyingepochnodes - find all the underlying epochnodes of a given epochnode</p> <pre><code>[UNODES, COST, MAPPING] = UNDERLYINGEPOCHNODES(NDI_EPOCHSET_OBJ, EPOCHNODE)\n\n  Traverse the underlying nodes of a given EPOCHNODE until we get to the roots\n  (an ndi.epoch.epochset object with ISSYNGRAPHROOT that returns 1).\n\n  Note that the EPOCHNODE itself is returned as the first 'underlying' node.\n\n  See also: ISSYNCGRAPHROOT\n\nHelp for ndi.probe.timeseries.stimulator/underlyingepochnodes is inherited from superclass ndi.epoch.epochset\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.probe.timeseries.stimulator.unique_id is inherited from superclass did.ido\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/dir.m/","title":"CLASS ndi.session.dir","text":"<pre><code>  NDI_SESSION_DIR - NDI_SESSION_DIR object class - an session with an associated file directory\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/dir.m/#superclasses","title":"Superclasses","text":"<p>ndi.session, handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/dir.m/#properties","title":"Properties","text":"Property Description path the file path of the session reference identifier syncgraph cache"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/dir.m/#methods","title":"Methods","text":"Method Description addlistener addlistener  Add listener for event. all_docs_in_session determines if a set of ndi documents are in a session creator_args return the arguments needed to build an ndi.session object daqsystem_add Add a sampling device to a ndi.session object daqsystem_clear remove all DAQSYSTEM objects from an ndi.session daqsystem_load Load daqsystem objects from an ndi.session daqsystem_rm Remove a sampling device from an ndi.session object database_add Add an ndi.document to an ndi.session object database_clear deletes/removes all entries from the database associated with an session database_closebinarydoc close an ndi.database.binarydoc database_erase deletes the entire session database folder database_existbinarydoc checks if an ndi.database.binarydoc exists for an ndi.document database_openbinarydoc open the ndi.database.binarydoc channel of an ndi.document database_rm Remove an ndi.document with a given document ID from an ndi.session object database_search Search for an ndi.document in a database of an ndi.session object delete DELETE   Delete a handle object. dir Create a new ndi.session.dir ndi_session_dir_object docinput2docs convert an array of ndi.documents or doc_ids to documents eq Are two ndi.session.dir objects equivalent? exists ndi.session.dir.exists is a function. findexpobj search an ndi.session for a specific object given name and classname findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. get_ingested_docs get all ndi.documents related to ingested data getelements Return all ndi.element objects that are found in session database getpath Return the path of the session getprobes Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries gt &gt; (GT)   Greater than relation for handles. id return the identifier of an ndi.session object ingest ingest the raw data and synchronization information into the database is_fully_ingested is an ndi.session object fully ingested? isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ndipathname Return the path of the NDI files within the session ne ~= (NE)   Not equal relation for handles. newdocument create a new ndi.database document of type ndi.document notify NOTIFY   Notify listeners of event. searchquery return a search query for database objects in this session syncgraph_addrule add an ndi.time.syncrule to the syncgraph syncgraph_rmrule remove an ndi.time.syncrule from the syncgraph unique_reference_string return the unique reference string for this session validate_documents validate whether documents belong to a session"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/dir.m/#methods-help","title":"Methods help","text":"<p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.session.dir, matlab.metadata.Property, events\n\nHelp for ndi.session.dir/addlistener is inherited from superclass handle\n</code></pre> <p>all_docs_in_session - determines if a set of ndi documents are in a session</p> <pre><code>[B,ERRMSG] = ALL_DOCS_IN_SESSION(DOCS, SESSION_ID)\n\n  B is 1 if the base.session_id field of all ndi.document objects in the cell\n  array DOCS match session_id. If so, ERRMSG is empty. Otherwise, ERRMSG lists\n  the documents that are not in the session.\n\nHelp for ndi.session.dir.all_docs_in_session is inherited from superclass ndi.session\n</code></pre> <p>creator_args - return the arguments needed to build an ndi.session object</p> <pre><code>INPUTS = CREATOR_ARGS(NDI_SESSION_OBJ)\n\n  Return the inputs necessary to create an ndi.session object. Each input\n  argument is returned as an entry in the cell array INPUTS.\n\n  Example:\n  INPUTS = ndi_session_obj.creator_args();\n  ndi_session_copy = ndi.session(INPUTS{:});\n</code></pre> <p>daqsystem_add - Add a sampling device to a ndi.session object</p> <pre><code>NDI_SESSION_OBJ = DAQSYSTEM_ADD(NDI_SESSION_OBJ, DEV)\n\n  Adds the device DEV to the ndi.session NDI_SESSION_OBJ\n\n  The devices can be accessed by referencing NDI_SESSION_OBJ.device\n\n  See also: DAQSYSTEM_RM, ndi.session.dir\n\nHelp for ndi.session.dir/daqsystem_add is inherited from superclass ndi.session\n</code></pre> <p>daqsystem_clear - remove all DAQSYSTEM objects from an ndi.session</p> <pre><code>NDI_SESSION_OBJ = DAQSYSTEM_CLEAR(NDI_SESSION_OBJ)\n\n  Permanently removes all ndi.daq.system objects from an ndi.session.\n\n  Be sure you mean it!\n\nHelp for ndi.session.dir/daqsystem_clear is inherited from superclass ndi.session\n</code></pre> <p>daqsystem_load - Load daqsystem objects from an ndi.session</p> <pre><code>DEV = DAQSYSTEM_LOAD(NDI_SESSION_OBJ, PARAM1, VALUE1, PARAM2, VALUE2, ...)\n          or\n  DEV = DAQSYSTEM_LOAD(NDI_SESSION_OBJ)\n\n  Returns the ndi.daq.system objects in the ndi.session with metadata parameters PARAMS1 that matches\n  VALUE1, PARAMS2 that matches VALUE2, etc.\n\n  One can also search for 'name' as a parameter; this will be automatically changed to search\n  for database documents with fields 'base.name' equal to the corresponding value.\n\n  If more than one object is requested, then DEV will be a cell list of matching objects.\n  Otherwise, the object will be a single element. If there are no matches, empty ([]) is returned.\n\nHelp for ndi.session.dir/daqsystem_load is inherited from superclass ndi.session\n</code></pre> <p>daqsystem_rm - Remove a sampling device from an ndi.session object</p> <pre><code>NDI_SESSION_OBJ = DAQSYSTEM_RM(NDI_SESSION_OBJ, DEV)\n\n  Removes the device DEV from the device list.\n\n  See also: DAQSYSTEM_ADD, ndi.session.dir\n\nHelp for ndi.session.dir/daqsystem_rm is inherited from superclass ndi.session\n</code></pre> <p>database_add - Add an ndi.document to an ndi.session object</p> <pre><code>NDI_SESSION_OBJ = DATABASE_ADD(NDI_SESSION_OBJ, NDI_DOCUMENT_OBJ)\n\n  Adds the ndi.document NDI_DOCUMENT_OBJ to the ndi.session NDI_SESSION_OBJ.\n  NDI_DOCUMENT_OBJ can also be a cell array of ndi.document objects, which will all be added\n  in turn.\n\n  The database can be queried by calling NDI_SESSION_OBJ/SEARCH\n\n  See also: DATABASE_RM, ndi.session.dir, ndi.database, ndi.session.dir/SEARCH\n\nHelp for ndi.session.dir/database_add is inherited from superclass ndi.session\n</code></pre> <p>database_clear - deletes/removes all entries from the database associated with an session</p> <pre><code>DATABASE_CLEAR(NDI_SESSION_OBJ, AREYOUSURE)\n\n    Removes all documents from the NDI_SESSION_OBJ object.\n\n  Use with care. If AREYOUSURE is 'yes' then the\n  function will proceed. Otherwise, it will not.\n\nHelp for ndi.session.dir/database_clear is inherited from superclass ndi.session\n</code></pre> <p>database_closebinarydoc - close an ndi.database.binarydoc</p> <pre><code>[NDI_BINARYDOC_OBJ] = DATABASE_CLOSEBINARYDOC(NDI_SESSION_OBJ, NDI_BINARYDOC_OBJ)\n\n  Close an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be closed in the\n  database, which is why it is necessary to call this function through the session object.\n\nHelp for ndi.session.dir/database_closebinarydoc is inherited from superclass ndi.session\n</code></pre> <p>database_erase - deletes the entire session database folder</p> <pre><code>DATABASE_ERASE(NDI_SESSION_DIR_OBJ, AREYOUSURE)\n\n    Deletes the session in the database.\n\n  Use with care. If AREYOUSURE is 'yes' then the\n  function will proceed. Otherwise, it will not.\n</code></pre> <p>database_existbinarydoc - checks if an ndi.database.binarydoc exists for an ndi.document</p> <pre><code>[TF, FILE_PATH] = DATABASE_EXISTBINARYDOC(NDI_SESSION_OBJ, NDI_DOCUMENT_OR_ID, FILENAME)\n\n   Return a boolean flag (TF) indicating if a binary document\n   exists for an ndi.document and, if it exists, the full file\n   path (FILE_PATH) to the file where the binary data is stored.\n\nHelp for ndi.session.dir/database_existbinarydoc is inherited from superclass ndi.session\n</code></pre> <p>database_openbinarydoc - open the ndi.database.binarydoc channel of an ndi.document</p> <pre><code>NDI_BINARYDOC_OBJ = DATABASE_OPENBINARYDOC(NDI_SESSION_OBJ, NDI_DOCUMENT_OR_ID, FILENAME)\n\n   Return the open ndi.database.binarydoc object that corresponds to an ndi.document and\n   NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself.\n   The document is opened for reading only. Document binary streams may not be edited once the\n   document is added to the database.\n\n   Note that this NDI_BINARYDOC_OBJ must be closed with ndi.session/CLOSEBINARYDOC.\n\nHelp for ndi.session.dir/database_openbinarydoc is inherited from superclass ndi.session\n</code></pre> <p>database_rm - Remove an ndi.document with a given document ID from an ndi.session object</p> <pre><code>NDI_SESSION_OBJ = DATABASE_RM(NDI_SESSION_OBJ, DOC_UNIQUE_ID)\n    or\n  NDI_SESSION_OBJ = DATABASE_RM(NDI_SESSION_OBJ, DOC)\n\n  Removes an ndi.document with document id DOC_UNIQUE_ID from the\n  NDI_SESSION_OBJ.database. In the second form, if an ndi.document or cell array of\n  NDI_DOCUMENTS is passed for DOC, then the document unique ids are retrieved and they\n  are removed in turn.  If DOC/DOC_UNIQUE_ID is empty, no action is taken.\n\n  This function also takes parameters as name/value pairs that modify its behavior:\n  Parameter (default)        | Description\n  --------------------------------------------------------------------------------\n  ErrIfNotFound (0)          | Produce an error if an ID to be deleted is not found.\n\n  See also: DATABASE_ADD, ndi.session.dir\n\nHelp for ndi.session.dir/database_rm is inherited from superclass ndi.session\n</code></pre> <p>database_search - Search for an ndi.document in a database of an ndi.session object</p> <pre><code>NDI_DOCUMENT_OBJ = DATABASE_SEARCH(NDI_SESSION_OBJ, SEARCHPARAMETERS)\n\n  Given search parameters, which are a cell list {'PARAM1', VALUE1, 'PARAM2, VALUE2, ...},\n  the database associated with the ndi.session object is searched.\n\n  Matches are returned in a cell list NDI_DOCUMENT_OBJ.\n\nHelp for ndi.session.dir/database_search is inherited from superclass ndi.session\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.SESSION.DIR, NDI.SESSION.DIR/ISVALID, CLEAR\n\nHelp for ndi.session.dir/delete is inherited from superclass handle\n</code></pre> <p>dir - Create a new ndi.session.dir ndi_session_dir_object</p> <pre><code>E = ndi.session.dir(REFERENCE, PATHNAME)\n\n  Creates an ndi.session.dir ndi_session_dir_object, or an session with an\n  associated directory. REFERENCE should be a unique reference for the\n  session and directory PATHNAME.\n\n  One can also open an existing session by using\n\n   E = ndi.session.dir(PATHNAME)\n\n  See also: ndi.session, ndi.session.dir/GETPATH\n\n    Documentation for ndi.session.dir/dir\n       doc ndi.session.dir\n</code></pre> <p>docinput2docs - convert an array of ndi.documents or doc_ids to documents</p> <pre><code>[DOC_LIST,B,ERRMSG] = DOCINPUT2DOCS(NDI_SESSION_OBJ, DOC_INPUT)\n\n  Given an input DOC_INPUT that specifies ndi.document objects,\n  return the list of ndi.document objects.\n\n  DOC_INPUT can be a single document id (character array), or a single\n  ndi.document, or a cell array of document ids or a cell array of ndi.documents,\n  or a mixed cell array of ndi.document objects and ids.\n\n  If all documents are found, then B is 1 and ERRMSG is ''. If a document ID\n  does not exist in the database, then one occurrence is noted in ERRMSG and B is 0.\n\nHelp for ndi.session.dir.docinput2docs is inherited from superclass ndi.session\n</code></pre> <p>eq - Are two ndi.session.dir objects equivalent?</p> <pre><code>B = EQ(NDI_SESSION_DIR_OBJ_A, NDI_SESSION_DIR_OBJ_B)\n\n  Returns 1 if the two ndi.session.dir objects have the same\n  path and reference fields. They do not have to be the same handles\n  (that is, have the same location in memory).\n</code></pre> <p>exists - ndi.session.dir.exists is a function.</p> <pre><code>exists = ndi.session.dir.exists(path)\n</code></pre> <p>findexpobj - search an ndi.session for a specific object given name and classname</p> <pre><code>OBJ = FINDEXPOBJ(NDI_EXPERIMNENT_OBJ, OBJ_NAME, OBJ_CLASSNAME)\n\n  Examines the DAQSYSTEM list, DATABASE, and PROBELIST for an object with name OBJ_NAME\n  and classname OBJ_CLASSNAME. If no object is found, OBJ will be empty ([]).\n\nHelp for ndi.session.dir/findexpobj is inherited from superclass ndi.session\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.SESSION.DIR\n\nHelp for ndi.session.dir/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.session.dir, ndi.session.dir/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.session.dir/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SESSION.DIR, NDI.SESSION.DIR/EQ, NDI.SESSION.DIR/GT, NDI.SESSION.DIR/LE, NDI.SESSION.DIR/LT, NDI.SESSION.DIR/NE\n\nHelp for ndi.session.dir/ge is inherited from superclass handle\n</code></pre> <p>get_ingested_docs - get all ndi.documents related to ingested data</p> <pre><code>D = GET_INGESTED_DOCS(NDI_SESSION_OBJ)\n\n  Return all documents related to ingested data. Be careful; if the raw data\n  is not available on the path, then the ingested data is the only record of it.\n\nHelp for ndi.session.dir/get_ingested_docs is inherited from superclass ndi.session\n</code></pre> <p>getelements - Return all ndi.element objects that are found in session database</p> <pre><code>ELEMENTS = GETELEMENTS(NDI_SESSION_OBJ, ...)\n\n  Examines all the database of NDI_SESSION_OBJ and returns all ndi.element\n  entries.\n\n  ELEMENTS is a cell array of ndi.element.* objects.\n\n  ELEMENTS = GETELEMENTS(NDI_SESSION_OBJ, 'PROP1', VALUE1, 'PROP2', VALUE2...)\n\n  returns only those probes for which 'PROP1' has a value of VALUE1, 'PROP2'\n  has a value of VALUE2, etc. Properties of elements are 'element.name', 'element.type',\n  'element.direct', and 'probe.name', 'probe.type', and 'probe.reference'.\n\nHelp for ndi.session.dir/getelements is inherited from superclass ndi.session\n</code></pre> <p>getpath - Return the path of the session</p> <pre><code>P = GETPATH(NDI_SESSION_DIR_OBJ)\n\n  Returns the path of an ndi.session.dir object.\n\n  The path is some sort of reference to the storage location of\n  the session. This might be a URL, or a file directory.\n</code></pre> <p>getprobes - Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries</p> <pre><code>PROBES = GETPROBES(NDI_SESSION_OBJ, ...)\n\n  Examines all ndi.daq.system entries in the NDI_SESSION_OBJ's device array\n  and returns all ndi.probe.* entries that can be constructed from each device's\n  ndi.epoch.epochprobemap entries.\n\n  PROBES is a cell array of ndi.probe.* objects.\n\n  One can pass additional arguments that specify the classnames of the probes\n  that are returned:\n\n  PROBES = GETPROBES(NDI_SESSION_OBJ, CLASSMATCH )\n\n  only probes that are members of the classes CLASSMATCH etc., are\n  returned.\n\n  PROBES = GETPROBES(NDI_SESSION_OBJ, 'PROP1', VALUE1, 'PROP2', VALUE2...)\n\n  returns only those probes for which 'PROP1' has a value of VALUE1, 'PROP2'\n  has a value of VALUE2, etc. Properties of probes are 'name', 'reference', and 'type', and 'subject_id'.\n\nHelp for ndi.session.dir/getprobes is inherited from superclass ndi.session\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SESSION.DIR, NDI.SESSION.DIR/EQ, NDI.SESSION.DIR/GE, NDI.SESSION.DIR/LE, NDI.SESSION.DIR/LT, NDI.SESSION.DIR/NE\n\nHelp for ndi.session.dir/gt is inherited from superclass handle\n</code></pre> <p>id - return the identifier of an ndi.session object</p> <pre><code>IDENTIFIER = ID(NDI_SESSION_OBJ)\n\n  Returns the unique identifier of an ndi.session object.\n\nHelp for ndi.session.dir/id is inherited from superclass ndi.session\n</code></pre> <p>ingest - ingest the raw data and synchronization information into the database</p> <pre><code>[B,ERRMSG] = INGEST(NDI_SESSION_OBJ)\n\n  Ingest all raw data and synchronization information into the database.\n\nHelp for ndi.session.dir/ingest is inherited from superclass ndi.session\n</code></pre> <p>is_fully_ingested - is an ndi.session object fully ingested?</p> <pre><code>B = IS_FULLY_INGESTED(NDI_SESSION_OBJ)\n\n  Returns 1 if the ndi.session object NDI_SESSION_OBJ is fully\n  ingested and 0 if there are still elements on disk that would\n  need to be ingested by NDI_SESSION_OBJ.ingest() in order to\n  be fully ingested.\n\nHelp for ndi.session.dir/is_fully_ingested is inherited from superclass ndi.session\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.SESSION.DIR, NDI.SESSION.DIR/DELETE\n\nHelp for ndi.session.dir/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SESSION.DIR, NDI.SESSION.DIR/EQ, NDI.SESSION.DIR/GE, NDI.SESSION.DIR/GT, NDI.SESSION.DIR/LT, NDI.SESSION.DIR/NE\n\nHelp for ndi.session.dir/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.session.dir, matlab.metadata.Property, events\n\nHelp for ndi.session.dir/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SESSION.DIR, NDI.SESSION.DIR/EQ, NDI.SESSION.DIR/GE, NDI.SESSION.DIR/GT, NDI.SESSION.DIR/LE, NDI.SESSION.DIR/NE\n\nHelp for ndi.session.dir/lt is inherited from superclass handle\n</code></pre> <p>ndipathname - Return the path of the NDI files within the session</p> <pre><code>P = NDIPATHNAME(NDI_SESSION_DIR_OBJ)\n\n  Returns the pathname to the NDI files in the ndi.session.dir object.\n\n  It is the ndi.session.dir object's path plus [filesep '.ndi' ]\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.SESSION.DIR, NDI.SESSION.DIR/EQ, NDI.SESSION.DIR/GE, NDI.SESSION.DIR/GT, NDI.SESSION.DIR/LE, NDI.SESSION.DIR/LT\n\nHelp for ndi.session.dir/ne is inherited from superclass handle\n</code></pre> <p>newdocument - create a new ndi.database document of type ndi.document</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_SESSION_OBJ, [DOCUMENT_TYPE], 'PROPERTY1', VALUE1, ...)\n\n  Creates an empty database document NDI_DOCUMENT_OBJ. DOCUMENT_TYPE is\n  an optional argument and can be any type that confirms to the .json\n  files in $NDI_COMMON/database_documents/*, a URL to such a file, or\n  a full path filename. If DOCUMENT_TYPE is not specified, it is taken\n  to be 'base'.\n\n  If additional PROPERTY values are specified, they are set to the VALUES indicated.\n\n  Example: mydoc = ndi_session_obj.newdocument('base','base.name','myname');\n\nHelp for ndi.session.dir/newdocument is inherited from superclass ndi.session\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.SESSION.DIR, NDI.SESSION.DIR/ADDLISTENER, NDI.SESSION.DIR/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.session.dir/notify is inherited from superclass handle\n</code></pre> <p>searchquery - return a search query for database objects in this session</p> <pre><code>SQ = SEARCHQUERY(NDI_SESSION_OBJ)\n\n  Returns a search query that will match all ndi.document objects that were generated\n  by this session.\n\n  SQ = {'base.session_id', ndi_session_obj.id()};\n\n  Example: mydoc = ndi_session_obj.newdocument('base','base.name','myname');\n\nHelp for ndi.session.dir/searchquery is inherited from superclass ndi.session\n</code></pre> <p>syncgraph_addrule - add an ndi.time.syncrule to the syncgraph</p> <pre><code>NDI_SESSION_OBJ = SYNCGRAPH_ADDRULE(NDI_SESSION_OBJ, RULE)\n\n  Adds the ndi.time.syncrule RULE to the ndi.time.syncgraph of the ndi.session\n  object NDI_SESSION_OBJ.\n\nHelp for ndi.session.dir/syncgraph_addrule is inherited from superclass ndi.session\n</code></pre> <p>syncgraph_rmrule - remove an ndi.time.syncrule from the syncgraph</p> <pre><code>NDI_SESSION_OBJ = SYNCGRAPH_RMRULE(NDI_SESSION_OBJ, INDEX)\n\n  Removes the INDEXth ndi.time.syncrule from the ndi.time.syncgraph of the ndi.session\n  object NDI_SESSION_OBJ.\n\nHelp for ndi.session.dir/syncgraph_rmrule is inherited from superclass ndi.session\n</code></pre> <p>unique_reference_string - return the unique reference string for this session</p> <pre><code>REFSTR = UNIQUE_REFERENCE_STRING(NDI_SESSION_OBJ)\n\n  Returns the unique reference string for the ndi.session.\n  REFSTR is a combination of the REFERENCE property of NDI_SESSION_OBJ\n  and the UNIQUE_REFERENCE property of NDI_SESSION_OBJ, joined with a '_'.\n\n  If you just want the reference (not unique) just access the reference\n  property (NDI_SESSION_OBJ.reference).\n\nHelp for ndi.session.dir/unique_reference_string is inherited from superclass ndi.session\n</code></pre> <p>validate_documents - validate whether documents belong to a session</p> <pre><code>[B, ERRMSG] = VALIDATE_DOCUMENTS(NDI_SESSION_OBJ, DOCUMENT)\n\n  Given an ndi.document DOCUMENT or a cell array of ndi.documents DOCUMENT,\n  determines whether all document session_ids match the sessions's id.\n  An 'empty' session_id (all 0s, ndi.session.empty_id() ) also matches.\n\nHelp for ndi.session.dir/validate_documents is inherited from superclass ndi.session\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/empty_id.m/","title":"ndi.session.empty_id","text":"<pre><code>  EMPTY_ID - produce the empty session id\n\n  ID = ndi.session.empty_id()\n\n  Produce a string that indicates \"no specific session\"\n  or \"applies in any session\".\n\n  The string is '0000000000000000_0000000000000000'\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/mock.m/","title":"CLASS ndi.session.mock","text":"<pre><code>  ndi.session.mock - a mock session class for testing\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/mock.m/#superclasses","title":"Superclasses","text":"<p>ndi.session.dir, ndi.session, handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/mock.m/#properties","title":"Properties","text":"Property Description path reference identifier syncgraph cache"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/mock.m/#methods","title":"Methods","text":"Method Description addlistener addlistener  Add listener for event. all_docs_in_session determines if a set of ndi documents are in a session creator_args return the arguments needed to build an ndi.session object daqsystem_add Add a sampling device to a ndi.session object daqsystem_clear remove all DAQSYSTEM objects from an ndi.session daqsystem_load Load daqsystem objects from an ndi.session daqsystem_rm Remove a sampling device from an ndi.session object database_add Add an ndi.document to an ndi.session object database_clear deletes/removes all entries from the database associated with an session database_closebinarydoc close an ndi.database.binarydoc database_erase deletes the entire session database folder database_existbinarydoc checks if an ndi.database.binarydoc exists for an ndi.document database_openbinarydoc open the ndi.database.binarydoc channel of an ndi.document database_rm Remove an ndi.document with a given document ID from an ndi.session object database_search Search for an ndi.document in a database of an ndi.session object delete DELETE   Delete a handle object. docinput2docs convert an array of ndi.documents or doc_ids to documents eq Are two ndi.session.dir objects equivalent? exists ndi.session.mock.exists is a function. findexpobj search an ndi.session for a specific object given name and classname findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. get_ingested_docs get all ndi.documents related to ingested data getelements Return all ndi.element objects that are found in session database getpath Return the path of the session getprobes Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries gt &gt; (GT)   Greater than relation for handles. id return the identifier of an ndi.session object ingest ingest the raw data and synchronization information into the database is_fully_ingested is an ndi.session object fully ingested? isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. mock Create a new ndi.session.mock object ndipathname Return the path of the NDI files within the session ne ~= (NE)   Not equal relation for handles. newdocument create a new ndi.database document of type ndi.document notify NOTIFY   Notify listeners of event. searchquery return a search query for database objects in this session syncgraph_addrule add an ndi.time.syncrule to the syncgraph syncgraph_rmrule remove an ndi.time.syncrule from the syncgraph unique_reference_string return the unique reference string for this session validate_documents validate whether documents belong to a session"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/mock.m/#methods-help","title":"Methods help","text":"<p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.session.mock, matlab.metadata.Property, events\n\nHelp for ndi.session.mock/addlistener is inherited from superclass handle\n</code></pre> <p>all_docs_in_session - determines if a set of ndi documents are in a session</p> <pre><code>[B,ERRMSG] = ALL_DOCS_IN_SESSION(DOCS, SESSION_ID)\n\n  B is 1 if the base.session_id field of all ndi.document objects in the cell\n  array DOCS match session_id. If so, ERRMSG is empty. Otherwise, ERRMSG lists\n  the documents that are not in the session.\n\nHelp for ndi.session.mock.all_docs_in_session is inherited from superclass ndi.session\n</code></pre> <p>creator_args - return the arguments needed to build an ndi.session object</p> <pre><code>INPUTS = CREATOR_ARGS(NDI_SESSION_OBJ)\n\n  Return the inputs necessary to create an ndi.session object. Each input\n  argument is returned as an entry in the cell array INPUTS.\n\n  Example:\n  INPUTS = ndi_session_obj.creator_args();\n  ndi_session_copy = ndi.session(INPUTS{:});\n\nHelp for ndi.session.mock/creator_args is inherited from superclass ndi.session.dir\n</code></pre> <p>daqsystem_add - Add a sampling device to a ndi.session object</p> <pre><code>NDI_SESSION_OBJ = DAQSYSTEM_ADD(NDI_SESSION_OBJ, DEV)\n\n  Adds the device DEV to the ndi.session NDI_SESSION_OBJ\n\n  The devices can be accessed by referencing NDI_SESSION_OBJ.device\n\n  See also: DAQSYSTEM_RM, ndi.session.mock\n\nHelp for ndi.session.mock/daqsystem_add is inherited from superclass ndi.session\n</code></pre> <p>daqsystem_clear - remove all DAQSYSTEM objects from an ndi.session</p> <pre><code>NDI_SESSION_OBJ = DAQSYSTEM_CLEAR(NDI_SESSION_OBJ)\n\n  Permanently removes all ndi.daq.system objects from an ndi.session.\n\n  Be sure you mean it!\n\nHelp for ndi.session.mock/daqsystem_clear is inherited from superclass ndi.session\n</code></pre> <p>daqsystem_load - Load daqsystem objects from an ndi.session</p> <pre><code>DEV = DAQSYSTEM_LOAD(NDI_SESSION_OBJ, PARAM1, VALUE1, PARAM2, VALUE2, ...)\n          or\n  DEV = DAQSYSTEM_LOAD(NDI_SESSION_OBJ)\n\n  Returns the ndi.daq.system objects in the ndi.session with metadata parameters PARAMS1 that matches\n  VALUE1, PARAMS2 that matches VALUE2, etc.\n\n  One can also search for 'name' as a parameter; this will be automatically changed to search\n  for database documents with fields 'base.name' equal to the corresponding value.\n\n  If more than one object is requested, then DEV will be a cell list of matching objects.\n  Otherwise, the object will be a single element. If there are no matches, empty ([]) is returned.\n\nHelp for ndi.session.mock/daqsystem_load is inherited from superclass ndi.session\n</code></pre> <p>daqsystem_rm - Remove a sampling device from an ndi.session object</p> <pre><code>NDI_SESSION_OBJ = DAQSYSTEM_RM(NDI_SESSION_OBJ, DEV)\n\n  Removes the device DEV from the device list.\n\n  See also: DAQSYSTEM_ADD, ndi.session.mock\n\nHelp for ndi.session.mock/daqsystem_rm is inherited from superclass ndi.session\n</code></pre> <p>database_add - Add an ndi.document to an ndi.session object</p> <pre><code>NDI_SESSION_OBJ = DATABASE_ADD(NDI_SESSION_OBJ, NDI_DOCUMENT_OBJ)\n\n  Adds the ndi.document NDI_DOCUMENT_OBJ to the ndi.session NDI_SESSION_OBJ.\n  NDI_DOCUMENT_OBJ can also be a cell array of ndi.document objects, which will all be added\n  in turn.\n\n  The database can be queried by calling NDI_SESSION_OBJ/SEARCH\n\n  See also: DATABASE_RM, ndi.session.mock, ndi.database, ndi.session.mock/SEARCH\n\nHelp for ndi.session.mock/database_add is inherited from superclass ndi.session\n</code></pre> <p>database_clear - deletes/removes all entries from the database associated with an session</p> <pre><code>DATABASE_CLEAR(NDI_SESSION_OBJ, AREYOUSURE)\n\n    Removes all documents from the NDI_SESSION_OBJ object.\n\n  Use with care. If AREYOUSURE is 'yes' then the\n  function will proceed. Otherwise, it will not.\n\nHelp for ndi.session.mock/database_clear is inherited from superclass ndi.session\n</code></pre> <p>database_closebinarydoc - close an ndi.database.binarydoc</p> <pre><code>[NDI_BINARYDOC_OBJ] = DATABASE_CLOSEBINARYDOC(NDI_SESSION_OBJ, NDI_BINARYDOC_OBJ)\n\n  Close an NDI_BINARYDOC_OBJ. The NDI_BINARYDOC_OBJ must be closed in the\n  database, which is why it is necessary to call this function through the session object.\n\nHelp for ndi.session.mock/database_closebinarydoc is inherited from superclass ndi.session\n</code></pre> <p>database_erase - deletes the entire session database folder</p> <pre><code>DATABASE_ERASE(NDI_SESSION_DIR_OBJ, AREYOUSURE)\n\n    Deletes the session in the database.\n\n  Use with care. If AREYOUSURE is 'yes' then the\n  function will proceed. Otherwise, it will not.\n\nHelp for ndi.session.mock.database_erase is inherited from superclass ndi.session.dir\n</code></pre> <p>database_existbinarydoc - checks if an ndi.database.binarydoc exists for an ndi.document</p> <pre><code>[TF, FILE_PATH] = DATABASE_EXISTBINARYDOC(NDI_SESSION_OBJ, NDI_DOCUMENT_OR_ID, FILENAME)\n\n   Return a boolean flag (TF) indicating if a binary document\n   exists for an ndi.document and, if it exists, the full file\n   path (FILE_PATH) to the file where the binary data is stored.\n\nHelp for ndi.session.mock/database_existbinarydoc is inherited from superclass ndi.session\n</code></pre> <p>database_openbinarydoc - open the ndi.database.binarydoc channel of an ndi.document</p> <pre><code>NDI_BINARYDOC_OBJ = DATABASE_OPENBINARYDOC(NDI_SESSION_OBJ, NDI_DOCUMENT_OR_ID, FILENAME)\n\n   Return the open ndi.database.binarydoc object that corresponds to an ndi.document and\n   NDI_DOCUMENT_OR_ID can be either the document id of an ndi.document or an ndi.document object itself.\n   The document is opened for reading only. Document binary streams may not be edited once the\n   document is added to the database.\n\n   Note that this NDI_BINARYDOC_OBJ must be closed with ndi.session/CLOSEBINARYDOC.\n\nHelp for ndi.session.mock/database_openbinarydoc is inherited from superclass ndi.session\n</code></pre> <p>database_rm - Remove an ndi.document with a given document ID from an ndi.session object</p> <pre><code>NDI_SESSION_OBJ = DATABASE_RM(NDI_SESSION_OBJ, DOC_UNIQUE_ID)\n    or\n  NDI_SESSION_OBJ = DATABASE_RM(NDI_SESSION_OBJ, DOC)\n\n  Removes an ndi.document with document id DOC_UNIQUE_ID from the\n  NDI_SESSION_OBJ.database. In the second form, if an ndi.document or cell array of\n  NDI_DOCUMENTS is passed for DOC, then the document unique ids are retrieved and they\n  are removed in turn.  If DOC/DOC_UNIQUE_ID is empty, no action is taken.\n\n  This function also takes parameters as name/value pairs that modify its behavior:\n  Parameter (default)        | Description\n  --------------------------------------------------------------------------------\n  ErrIfNotFound (0)          | Produce an error if an ID to be deleted is not found.\n\n  See also: DATABASE_ADD, ndi.session.mock\n\nHelp for ndi.session.mock/database_rm is inherited from superclass ndi.session\n</code></pre> <p>database_search - Search for an ndi.document in a database of an ndi.session object</p> <pre><code>NDI_DOCUMENT_OBJ = DATABASE_SEARCH(NDI_SESSION_OBJ, SEARCHPARAMETERS)\n\n  Given search parameters, which are a cell list {'PARAM1', VALUE1, 'PARAM2, VALUE2, ...},\n  the database associated with the ndi.session object is searched.\n\n  Matches are returned in a cell list NDI_DOCUMENT_OBJ.\n\nHelp for ndi.session.mock/database_search is inherited from superclass ndi.session\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/ISVALID, CLEAR\n\nHelp for ndi.session.mock/delete is inherited from superclass handle\n</code></pre> <p>docinput2docs - convert an array of ndi.documents or doc_ids to documents</p> <pre><code>[DOC_LIST,B,ERRMSG] = DOCINPUT2DOCS(NDI_SESSION_OBJ, DOC_INPUT)\n\n  Given an input DOC_INPUT that specifies ndi.document objects,\n  return the list of ndi.document objects.\n\n  DOC_INPUT can be a single document id (character array), or a single\n  ndi.document, or a cell array of document ids or a cell array of ndi.documents,\n  or a mixed cell array of ndi.document objects and ids.\n\n  If all documents are found, then B is 1 and ERRMSG is ''. If a document ID\n  does not exist in the database, then one occurrence is noted in ERRMSG and B is 0.\n\nHelp for ndi.session.mock.docinput2docs is inherited from superclass ndi.session\n</code></pre> <p>eq - Are two ndi.session.dir objects equivalent?</p> <pre><code>B = EQ(NDI_SESSION_DIR_OBJ_A, NDI_SESSION_DIR_OBJ_B)\n\n  Returns 1 if the two ndi.session.dir objects have the same\n  path and reference fields. They do not have to be the same handles\n  (that is, have the same location in memory).\n\nHelp for ndi.session.mock/eq is inherited from superclass ndi.session.dir\n</code></pre> <p>exists - ndi.session.mock.exists is a function.</p> <pre><code>exists = ndi.session.mock.exists(path)\n</code></pre> <p>findexpobj - search an ndi.session for a specific object given name and classname</p> <pre><code>OBJ = FINDEXPOBJ(NDI_EXPERIMNENT_OBJ, OBJ_NAME, OBJ_CLASSNAME)\n\n  Examines the DAQSYSTEM list, DATABASE, and PROBELIST for an object with name OBJ_NAME\n  and classname OBJ_CLASSNAME. If no object is found, OBJ will be empty ([]).\n\nHelp for ndi.session.mock/findexpobj is inherited from superclass ndi.session\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.SESSION.MOCK\n\nHelp for ndi.session.mock/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.session.mock, ndi.session.mock/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.session.mock/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/EQ, NDI.SESSION.MOCK/GT, NDI.SESSION.MOCK/LE, NDI.SESSION.MOCK/LT, NDI.SESSION.MOCK/NE\n\nHelp for ndi.session.mock/ge is inherited from superclass handle\n</code></pre> <p>get_ingested_docs - get all ndi.documents related to ingested data</p> <pre><code>D = GET_INGESTED_DOCS(NDI_SESSION_OBJ)\n\n  Return all documents related to ingested data. Be careful; if the raw data\n  is not available on the path, then the ingested data is the only record of it.\n\nHelp for ndi.session.mock/get_ingested_docs is inherited from superclass ndi.session\n</code></pre> <p>getelements - Return all ndi.element objects that are found in session database</p> <pre><code>ELEMENTS = GETELEMENTS(NDI_SESSION_OBJ, ...)\n\n  Examines all the database of NDI_SESSION_OBJ and returns all ndi.element\n  entries.\n\n  ELEMENTS is a cell array of ndi.element.* objects.\n\n  ELEMENTS = GETELEMENTS(NDI_SESSION_OBJ, 'PROP1', VALUE1, 'PROP2', VALUE2...)\n\n  returns only those probes for which 'PROP1' has a value of VALUE1, 'PROP2'\n  has a value of VALUE2, etc. Properties of elements are 'element.name', 'element.type',\n  'element.direct', and 'probe.name', 'probe.type', and 'probe.reference'.\n\nHelp for ndi.session.mock/getelements is inherited from superclass ndi.session\n</code></pre> <p>getpath - Return the path of the session</p> <pre><code>P = GETPATH(NDI_SESSION_DIR_OBJ)\n\n  Returns the path of an ndi.session.dir object.\n\n  The path is some sort of reference to the storage location of\n  the session. This might be a URL, or a file directory.\n\nHelp for ndi.session.mock/getpath is inherited from superclass ndi.session.dir\n</code></pre> <p>getprobes - Return all NDI_PROBES that are found in ndi.daq.system epoch contents entries</p> <pre><code>PROBES = GETPROBES(NDI_SESSION_OBJ, ...)\n\n  Examines all ndi.daq.system entries in the NDI_SESSION_OBJ's device array\n  and returns all ndi.probe.* entries that can be constructed from each device's\n  ndi.epoch.epochprobemap entries.\n\n  PROBES is a cell array of ndi.probe.* objects.\n\n  One can pass additional arguments that specify the classnames of the probes\n  that are returned:\n\n  PROBES = GETPROBES(NDI_SESSION_OBJ, CLASSMATCH )\n\n  only probes that are members of the classes CLASSMATCH etc., are\n  returned.\n\n  PROBES = GETPROBES(NDI_SESSION_OBJ, 'PROP1', VALUE1, 'PROP2', VALUE2...)\n\n  returns only those probes for which 'PROP1' has a value of VALUE1, 'PROP2'\n  has a value of VALUE2, etc. Properties of probes are 'name', 'reference', and 'type', and 'subject_id'.\n\nHelp for ndi.session.mock/getprobes is inherited from superclass ndi.session\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/EQ, NDI.SESSION.MOCK/GE, NDI.SESSION.MOCK/LE, NDI.SESSION.MOCK/LT, NDI.SESSION.MOCK/NE\n\nHelp for ndi.session.mock/gt is inherited from superclass handle\n</code></pre> <p>id - return the identifier of an ndi.session object</p> <pre><code>IDENTIFIER = ID(NDI_SESSION_OBJ)\n\n  Returns the unique identifier of an ndi.session object.\n\nHelp for ndi.session.mock/id is inherited from superclass ndi.session\n</code></pre> <p>ingest - ingest the raw data and synchronization information into the database</p> <pre><code>[B,ERRMSG] = INGEST(NDI_SESSION_OBJ)\n\n  Ingest all raw data and synchronization information into the database.\n\nHelp for ndi.session.mock/ingest is inherited from superclass ndi.session\n</code></pre> <p>is_fully_ingested - is an ndi.session object fully ingested?</p> <pre><code>B = IS_FULLY_INGESTED(NDI_SESSION_OBJ)\n\n  Returns 1 if the ndi.session object NDI_SESSION_OBJ is fully\n  ingested and 0 if there are still elements on disk that would\n  need to be ingested by NDI_SESSION_OBJ.ingest() in order to\n  be fully ingested.\n\nHelp for ndi.session.mock/is_fully_ingested is inherited from superclass ndi.session\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/DELETE\n\nHelp for ndi.session.mock/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/EQ, NDI.SESSION.MOCK/GE, NDI.SESSION.MOCK/GT, NDI.SESSION.MOCK/LT, NDI.SESSION.MOCK/NE\n\nHelp for ndi.session.mock/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.session.mock, matlab.metadata.Property, events\n\nHelp for ndi.session.mock/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/EQ, NDI.SESSION.MOCK/GE, NDI.SESSION.MOCK/GT, NDI.SESSION.MOCK/LE, NDI.SESSION.MOCK/NE\n\nHelp for ndi.session.mock/lt is inherited from superclass handle\n</code></pre> <p>mock - Create a new ndi.session.mock object</p> <pre><code>S = ndi.session.mock();\n\n  Creates an ndi.session.mock object with the following:\n  a) a temporary path,\n  b) a fake subject ('anteater27@nosuchlab.org'),\n  c) a device 'fakedevice', and\n  d) a single epoch.\n\n    Documentation for ndi.session.mock/mock\n       doc ndi.session.mock\n</code></pre> <p>ndipathname - Return the path of the NDI files within the session</p> <pre><code>P = NDIPATHNAME(NDI_SESSION_DIR_OBJ)\n\n  Returns the pathname to the NDI files in the ndi.session.dir object.\n\n  It is the ndi.session.dir object's path plus [filesep '.ndi' ]\n\nHelp for ndi.session.mock/ndipathname is inherited from superclass ndi.session.dir\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/EQ, NDI.SESSION.MOCK/GE, NDI.SESSION.MOCK/GT, NDI.SESSION.MOCK/LE, NDI.SESSION.MOCK/LT\n\nHelp for ndi.session.mock/ne is inherited from superclass handle\n</code></pre> <p>newdocument - create a new ndi.database document of type ndi.document</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_SESSION_OBJ, [DOCUMENT_TYPE], 'PROPERTY1', VALUE1, ...)\n\n  Creates an empty database document NDI_DOCUMENT_OBJ. DOCUMENT_TYPE is\n  an optional argument and can be any type that confirms to the .json\n  files in $NDI_COMMON/database_documents/*, a URL to such a file, or\n  a full path filename. If DOCUMENT_TYPE is not specified, it is taken\n  to be 'base'.\n\n  If additional PROPERTY values are specified, they are set to the VALUES indicated.\n\n  Example: mydoc = ndi_session_obj.newdocument('base','base.name','myname');\n\nHelp for ndi.session.mock/newdocument is inherited from superclass ndi.session\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.SESSION.MOCK, NDI.SESSION.MOCK/ADDLISTENER, NDI.SESSION.MOCK/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.session.mock/notify is inherited from superclass handle\n</code></pre> <p>searchquery - return a search query for database objects in this session</p> <pre><code>SQ = SEARCHQUERY(NDI_SESSION_OBJ)\n\n  Returns a search query that will match all ndi.document objects that were generated\n  by this session.\n\n  SQ = {'base.session_id', ndi_session_obj.id()};\n\n  Example: mydoc = ndi_session_obj.newdocument('base','base.name','myname');\n\nHelp for ndi.session.mock/searchquery is inherited from superclass ndi.session\n</code></pre> <p>syncgraph_addrule - add an ndi.time.syncrule to the syncgraph</p> <pre><code>NDI_SESSION_OBJ = SYNCGRAPH_ADDRULE(NDI_SESSION_OBJ, RULE)\n\n  Adds the ndi.time.syncrule RULE to the ndi.time.syncgraph of the ndi.session\n  object NDI_SESSION_OBJ.\n\nHelp for ndi.session.mock/syncgraph_addrule is inherited from superclass ndi.session\n</code></pre> <p>syncgraph_rmrule - remove an ndi.time.syncrule from the syncgraph</p> <pre><code>NDI_SESSION_OBJ = SYNCGRAPH_RMRULE(NDI_SESSION_OBJ, INDEX)\n\n  Removes the INDEXth ndi.time.syncrule from the ndi.time.syncgraph of the ndi.session\n  object NDI_SESSION_OBJ.\n\nHelp for ndi.session.mock/syncgraph_rmrule is inherited from superclass ndi.session\n</code></pre> <p>unique_reference_string - return the unique reference string for this session</p> <pre><code>REFSTR = UNIQUE_REFERENCE_STRING(NDI_SESSION_OBJ)\n\n  Returns the unique reference string for the ndi.session.\n  REFSTR is a combination of the REFERENCE property of NDI_SESSION_OBJ\n  and the UNIQUE_REFERENCE property of NDI_SESSION_OBJ, joined with a '_'.\n\n  If you just want the reference (not unique) just access the reference\n  property (NDI_SESSION_OBJ.reference).\n\nHelp for ndi.session.mock/unique_reference_string is inherited from superclass ndi.session\n</code></pre> <p>validate_documents - validate whether documents belong to a session</p> <pre><code>[B, ERRMSG] = VALIDATE_DOCUMENTS(NDI_SESSION_OBJ, DOCUMENT)\n\n  Given an ndi.document DOCUMENT or a cell array of ndi.documents DOCUMENT,\n  determines whether all document session_ids match the sessions's id.\n  An 'empty' session_id (all 0s, ndi.session.empty_id() ) also matches.\n\nHelp for ndi.session.mock/validate_documents is inherited from superclass ndi.session\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/sessiontable.m/","title":"CLASS ndi.session.sessiontable","text":"<pre><code>  NDI_SESSIONTABLE - a table for managing the file paths of NDI sessions\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/sessiontable.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/sessiontable.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/sessiontable.m/#methods","title":"Methods","text":"Method Description addtableentry add an entry to an ndi.session.sessiontable backupfilelist a list of backup files that are present on disk backupsessiontable create a backup file for an ndi.session.sessiontable checktable check the session table for proper form, accessibility clearsessiontable clear an ndi.session.sessiontable object's data getsessionpath look up the path of an ndi.session by its ID getsessiontable return the session table isvalidtable Does the session table have the correct fields? localtablefilename return the session table filename removetableentry remove an entry of an ndi.session.sessiontable sessiontable a table for managing the file paths of NDI sessions"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsession/sessiontable.m/#methods-help","title":"Methods help","text":"<p>addtableentry - add an entry to an ndi.session.sessiontable</p> <pre><code>ADDTABLEENTRY(NDI_SESSIONTABLE_OBJ, SESSION_ID, PATH)\n\n  Adds SESSION_ID and PATH as an entry to the session table.\n  If SESSION_ID is already in the table, then the entry is replaced.\n</code></pre> <p>backupfilelist - a list of backup files that are present on disk</p> <pre><code>F = BACKUPFILELIST(NDI_SESSIONTABLE_OBJ)\n\n  Returns a list of backup files that are available. Backup files have\n  the name [USERPATH]/Preferences/NDI/local_sessiontable_bkupNNN.txt.\n</code></pre> <p>backupsessiontable - create a backup file for an ndi.session.sessiontable</p> <pre><code>BACKUPSESSIONTABLE(NDI_SESSIONTABLE_OBJ)\n\n  Perform a backup of the session table file.\n  The session table file is backed up in the [USERPATH]/Preferences/NDI directory\n  and be named 'local_sessiontableNNN.txt', where NNN is a number.\n</code></pre> <p>checktable - check the session table for proper form, accessibility</p> <pre><code>[B, RESULTS] = CHECKTABLE(NDI_SESSIONTABLE_OBJ)\n\n  Check the ndi.session.sessiontable object's session table to see if it has the right\n  form (B is 1 if it does, B is 0 otherwise). (It has the right form if it is a structure with fieldnames\n  'path' and 'sesion_id'.\n\n  If the table has the right form RESULTS is a structure array with one entry per entry in the table.\n  It has a field 'exists' which is 1 if the path currently exists on the user's machine. If the table does not\n  have the right form, then RESULTS is empty.\n</code></pre> <p>clearsessiontable - clear an ndi.session.sessiontable object's data</p> <pre><code>CLEARSESSIONTABLE(NDI_SESSIONTABLE_OBJ, [MAKEBACKUP])\n\n  Removes all entries from the ndi.session.sessiontable's file.\n  If MAKEBACKUP is present and is 1, then the session table file\n  is backed up first (in the Preferences/NDI directory).\n</code></pre> <p>getsessionpath - look up the path of an ndi.session by its ID</p> <pre><code>THEPATH = GETSESIONPATH(SESSION_ID)\n\n  Examines the ndi.session.sessiontable object to see if a path is known for a session\n  with an ID of SESSION_ID. Otherwise, empty ([]) is returned;\n</code></pre> <p>getsessiontable - return the session table</p> <pre><code>T = GETSESSIONTABLE(NDI_SESSIONTABLE_OBJ)\n\n  Returns the session table, a structure with fields 'SESSION_ID' and 'PATH'. Each entry\n  in the table corresponds to a recently-opened or added path of ndi.session.dir.\n</code></pre> <p>isvalidtable - Does the session table have the correct fields?</p> <pre><code>[B,MSG] = ISVALIDTABLE(NDI_SESSIONTABLE_OBJ, [T])\n\n  B is 1 if the NDI SESSION TABLE is a structure array with fields\n  'path' and 'session_id', all text fields. B is 0 otherwise. If T\n  is not provided, then the session table is read.\n\n  If B is 0, then an error description is provided in MSG. MSG is '' otherwise.\n</code></pre> <p>localtablefilename - return the session table filename</p> <pre><code>F = LOCALTABLEFILENAME()\n</code></pre> <p>removetableentry - remove an entry of an ndi.session.sessiontable</p> <pre><code>REMOVETABLEENTRY(NDI_SESSIONTABLE_OBJ, SESSION_ID)\n\n  Removes the entry of an ndi.session.sessiontable with the given SESSION_ID.\n</code></pre> <p>sessiontable - a table for managing the file paths of NDI sessions</p> <pre><code>Documentation for ndi.session.sessiontable/sessiontable\n       doc ndi.session.sessiontable\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/angeluccilab.m/","title":"ndi.setup.angeluccilab","text":"<pre><code>  ndi.setup.angeluccilab - initialize an NDI_SESSION_DIR with ANGELUCCILAB devices\n\n   S = ndi.setup.angeluccilab(REF, DIRNAME)\n\n   Initializes an ndi.session.dir object for the directory\n   DIRNAME with the standard compliment of ANGELUCCILAB devices, as\n   found in \"ndi_common/daq_systems/angeluccilab\".\n\n   If the devices are already added, they are not re-created.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/dbkatzlab.m/","title":"ndi.setup.dbkatzlab","text":"<pre><code>  ndi.setup.dbkatzlab - initialize an NDI_SESSION_DIR with KATZLAB devices\n\n   S = ndi.setup.dbkatzlab(REF, DIRNAME)\n\n   Initializes an ndi.session.dir object for the directory\n   DIRNAME with the standard compliment of KATZLAB devices, as\n   found in \"ndi_common/daq_systems/dbkatzlab\".\n\n   If the devices are already added, they are not re-created.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/lab.m/","title":"ndi.setup.lab","text":"<pre><code> NDI.SETUP.LAB Initialize an NDI session directory with lab-specific devices\n\n    S = NDI.SETUP.LAB(LABNAME, REF, DIRNAME)\n\n    Initializes an NDI session directory object (ndi.session.dir) for the\n    specified directory DIRNAME. It associates the session with a reference\n    identifier REF and adds the standard set of data acquisition (DAQ) system\n    devices defined for a particular lab, specified by LABNAME.\n\n    The function looks for the DAQ system definitions within the\n    'ndi_common/daq_systems/&lt;labName&gt;' directory, located under the NDI\n    common path (typically found via `ndi.path.commonpath`). If DAQ system\n    devices corresponding to LABNAME already exist in the session directory,\n    they are not added again.\n\n    Inputs:\n      labName - The name of the lab setup configuration. This determines\n                which set of DAQ system devices are added. Must be a\n                character vector or string scalar (e.g., 'marderlab', \"vhlab\").\n      ref     - A reference identifier for the session (e.g., an experiment\n                number or unique code). Must be a character vector or string\n                scalar (e.g., '745', \"exp001\").\n      dirname - The full path to the directory where the NDI session data\n                will be stored. This directory must exist. Must be a\n                character vector or string scalar representing a valid folder path.\n\n    Outputs:\n      S       - An ndi.session.dir object representing the initialized\n                session directory, now including the DAQ system devices\n                associated with labName.\n\n    Example:\n        % Define session parameters\n        labId = 'JaneDoeLab'; % Use the specific lab identifier\n        sessionRef = 'exp101_run03';\n        sessionPath = '/path/to/my/data/exp101_run03';\n\n        % Create the directory if it doesn't exist\n        if ~exist(sessionPath, 'dir'), mkdir(sessionPath); end\n\n        % Initialize the session with lab-specific devices\n        mySession = ndi.setup.lab(labId, sessionRef, sessionPath);\n\n    See also: ndi.session.dir, ndi.setup.daq.addDaqSystems, ndi.path.commonpath\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/marderlab.m/","title":"ndi.setup.marderlab","text":"<pre><code>  ndi.setup.marderlab - initialize an NDI_SESSION_DIR with MARDERLAB devices\n\n   S = ndi.setup.marderlab(REF, DIRNAME)\n\n   Initializes an ndi.session.dir object for the directory\n   DIRNAME with the standard compliment of MARDERLAB devices, as\n   found in \"ndi_common/daq_systems/marderlab\".\n\n   If the devices are already added, they are not re-created.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/vhlab.m/","title":"ndi.setup.vhlab","text":"<pre><code>  ndi.setup.vhlab - initialize an ndi.session.dir with VHLAB devices\n\n   S = ndi.setup.vhlab(REF, DIRNAME, [FORCE])\n\n   Initializes an ndi.session.dir object for the directory\n   DIRNAME with the standard compliment of VHLAB devices, as\n   found in \"ndi_common/daq_systems/vhlab\".\n\n   If the devices are already added, they are not re-created unless\n   FORCE is provided and is 1.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/yangyangwang.m/","title":"ndi.setup.yangyangwang","text":"<pre><code>  ndi.setup.yangyangwang - initialize an ndi.session.dir with YANGYANGWANG devices\n\n   S = ndi.setup.yangyangwang(REF, DIRNAME, [FORCE])\n\n   Initializes an ndi.session.dir object for the directory\n   DIRNAME with the standard compliment of YANGYANGWANG devices, as\n   found in \"ndi_common/daq_systems/yangyangwang\"\n\n   If the devices are already added, they are not re-created unless\n   FORCE is provided and is 1.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/epochProbeMapMaker.m/","title":"CLASS ndi.setup.NDIMaker.epochProbeMapMaker","text":"<pre><code>  Folder: +ndi/+setup/+NDIMaker/\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/epochProbeMapMaker.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/epochProbeMapMaker.m/#properties","title":"Properties","text":"Property Description path variableTable probeTable"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/epochProbeMapMaker.m/#methods","title":"Methods","text":"Method Description addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. epochProbeMapMaker EPOCHPROBEMAPMAKER Constructor for the epochProbeMapMaker class. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event."},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/epochProbeMapMaker.m/#methods-help","title":"Methods help","text":"<p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.setup.ndimaker.epochprobemapmaker, matlab.metadata.Property, events\n\nHelp for ndi.setup.NDIMaker.epochProbeMapMaker/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/ISVALID, CLEAR\n\nHelp for ndi.setup.NDIMaker.epochProbeMapMaker/delete is inherited from superclass handle\n</code></pre> <p>epochProbeMapMaker - EPOCHPROBEMAPMAKER Constructor for the epochProbeMapMaker class.</p> <pre><code>OBJ = EPOCHPROBEMAPMAKER(PATH, VARIABLETABLE, PROBETABLE) creates an\n    epochProbeMapMaker object and generates '.epochprobemap.txt' files.\n    It uses the 'RowNames' from VARIABLETABLE as base filenames for the\n    map files, which are saved in the directory specified by PATH.\n    Each map file links probes defined in PROBETABLE to the corresponding\n    epoch, using subject information from VARIABLETABLE.\n\n    OBJ = EPOCHPROBEMAPMAKER(..., 'Name', Value) allows specifying\n    additional options to control the map creation process.\n\n    Input Arguments:\n        path            - The absolute path to an NDI session directory\n                            The generated '.epochprobemap.txt' files will \n                            be saved directly within this directory.\n                            Must be an existing folder.\n        variableTable   - A MATLAB table defining epoch-specific variables.\n                            - Its `RowNames` must be unique epoch identifiers\n                              which will serve as base filenames for the \n                              output '.epochprobemap.txt' files.\n                            - Must contain a 'SubjectString' column (char or string).\n                            - Other columns can be included and used for\n                              validation via the 'NonNaNVariableNames' option.\n        probeTable      - A MATLAB table defining probe characteristics. It \n                            must contain the following columns:\n                            - 'name' (cellstr or string array): Name of the probe.\n                            - 'reference' (numeric array): Reference number of the probe.\n                            - 'type' (cellstr or string array): Type of the probe.\n                            - 'deviceString' (cellstr or string array): Device string\n                              associated with the probe.\n\n    Optional Name-Value Arguments:\n        Overwrite        - If true, existing epoch probe maps found at the specified \n                            paths will be overwritten. Default: false.\n        NonNaNVariableNames - Variable names in 'variableTable'.Values in \n                            these columns must not be NaN for a valid \n                            session to be created. Default: {}.\n        ProbePostfix     - A postfix to be appended to probe names. Default: {} (no postfix).\n                            - If a char/string:\n                                - If a variable name in variableTable, the\n                                    value of that variable in the corresponding\n                                    row is used.\n                                - If not a variable name, this char/string is used.\n                            - If a cell array: \n                                - If its length matches the total number of rows\n                                    in the input `variableTable`, the value \n                                    in the corresponding row is used.\n                                - If its length matches the total number of rows\n                                    in the input `variableTable` and the second dimension\n                                    matches the number of probes (i.e. height of probeTable),\n                                    the value in the corresponding row is used for each probe.\n                                - If values are variable names with length\n                                    equal to the number of probes (i.e. height of\n                                    probeTable, the value of the variable(s) \n                                    in the corresponding row are used. An empty\n                                    char/str vector may be used to omit a postfix for\n                                    certain variables (e.g. {'PostFix','','PostFix'})\n\n    Output Arguments:\n        obj (epochProbeMapMaker)  - The constructed epochProbeMapMaker object.\n\n    See also: NDI.EPOCH.EPOCHPROBEMAP_DAQSYSTEM\n\n    Documentation for ndi.setup.NDIMaker.epochProbeMapMaker/epochProbeMapMaker\n       doc ndi.setup.NDIMaker.epochProbeMapMaker\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/GE, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/GT, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/LE, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/LT, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/NE\n\nHelp for ndi.setup.NDIMaker.epochProbeMapMaker/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER\n\nHelp for ndi.setup.NDIMaker.epochProbeMapMaker/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.setup.ndimaker.epochprobemapmaker, ndi.setup.ndimaker.epochprobemapmaker/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.setup.NDIMaker.epochProbeMapMaker/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/EQ, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/GT, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/LE, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/LT, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/NE\n\nHelp for ndi.setup.NDIMaker.epochProbeMapMaker/ge is inherited from superclass handle\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/EQ, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/GE, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/LE, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/LT, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/NE\n\nHelp for ndi.setup.NDIMaker.epochProbeMapMaker/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/DELETE\n\nHelp for ndi.setup.NDIMaker.epochProbeMapMaker/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/EQ, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/GE, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/GT, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/LT, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/NE\n\nHelp for ndi.setup.NDIMaker.epochProbeMapMaker/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.setup.ndimaker.epochprobemapmaker, matlab.metadata.Property, events\n\nHelp for ndi.setup.NDIMaker.epochProbeMapMaker/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/EQ, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/GE, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/GT, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/LE, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/NE\n\nHelp for ndi.setup.NDIMaker.epochProbeMapMaker/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/EQ, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/GE, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/GT, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/LE, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/LT\n\nHelp for ndi.setup.NDIMaker.epochProbeMapMaker/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/ADDLISTENER, NDI.SETUP.NDIMAKER.EPOCHPROBEMAPMAKER/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.setup.NDIMaker.epochProbeMapMaker/notify is inherited from superclass handle\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/imageDocMaker.m/","title":"CLASS ndi.setup.NDIMaker.imageDocMaker","text":"<pre><code>  Folder: +ndi/+setup/+NDIMaker/\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/imageDocMaker.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/imageDocMaker.m/#properties","title":"Properties","text":"Property Description session The NDI session object (e.g., ndi.session.dir or ndi.database.dir) where documents will be added."},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/imageDocMaker.m/#methods","title":"Methods","text":"Method Description addlistener addlistener  Add listener for event. array2imageDocs ARRAY2IMAGEDOCS Converts each image in a cell array into an NDI 'ontologyImage' document. createOntologyImageDoc CREATEONTOLOGYIMAGEDOC Creates a single NDI 'ontologyImage' document. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. gt &gt; (GT)   Greater than relation for handles. imageDocMaker IMAGEDOCMAKER Constructor for this class. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event."},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/imageDocMaker.m/#methods-help","title":"Methods help","text":"<p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.setup.ndimaker.imagedocmaker, matlab.metadata.Property, events\n\nHelp for ndi.setup.NDIMaker.imageDocMaker/addlistener is inherited from superclass handle\n</code></pre> <p>array2imageDocs - ARRAY2IMAGEDOCS Converts each image in a cell array into an NDI 'ontologyImage' document.</p> <pre><code>DOCS = ARRAY2IMAGEDOCS(OBJ, IMAGEARRAY, ONTOLOGYNODES, OPTIONS)\n\n    This method iterates through each image in the input 'imageArray'.\n    For each image, it calls `obj.createOntologyImageDoc` to generate\n    an NDI document of type 'ontologyImage'. The resulting documents\n    are collected into a cell array and added to the database in a batch.\n\n    Inputs:\n        obj: An instance of the imageDocMaker class.\n        imageArray: A cell array of numeric matrices. Each matrix is an image.\n        ontologyNodes: A string or cellstr of ontology node ID(s) applied to ALL images.\n\n    Optional Name-Value Arguments:\n        Overwrite: Flag passed to `createOntologyImageDoc`. Controls whether\n                   existing documents should be overwritten. Default: false.\n        OntologyTableRow_ids: A cell array of 'ontologyTableRow' document IDs.\n                              The number of elements must match 'imageArray'. Each ID\n                              is passed to the corresponding call of `createOntologyImageDoc`.\n\n    Outputs:\n        docs: A cell array with the same number of elements as 'imageArray'.\n              Each cell contains the NDI document object (ndi.document)\n              created by `createOntologyImageDoc` for the corresponding image.\n\n    See also: imageDocMaker.createOntologyImageDoc, ndi.gui.component.ProgressBarWindow\n</code></pre> <p>createOntologyImageDoc - CREATEONTOLOGYIMAGEDOC Creates a single NDI 'ontologyImage' document.</p> <pre><code>DOC = CREATEONTOLOGYIMAGEDOC(OBJ, IMAGE, ONTOLOGYNODES, OPTIONS)\n\n    This method constructs an NDI document for image data. The document\n    is of type 'ontologyImage', which includes 'ngrid' properties to describe\n    the image data dimensions and type. It also contains the specified\n    ontology node identifiers.\n\n    The image data itself is written to a binary '.ngrid' file, which is\n    associated with the NDI document.\n\n    Inputs:\n        obj: An instance of the imageDocMaker class.\n        image: A numeric matrix representing the image data to be stored.\n        ontologyNodes: A string or cellstr of ontology node ID(s) (e.g., \"UBERON:3373\")\n                       that describe the image content.\n\n    Optional Name-Value Arguments:\n        ontologyTableRow_id: The document ID of a parent 'ontologyTableRow' document.\n                             If provided, a dependency will be created.\n                             If empty (default), no dependency is added.\n        Overwrite: Controls behavior if a matching document is found.\n                    - true: The existing document and its associated .ngrid file\n                            are removed, and a new one is created.\n                    - false (default): The existing document is returned, and no\n                                       new document is created.\n\n    Outputs:\n        doc: The NDI document object (ndi.document) of type 'ontologyImage'.\n             This will be the newly created document or the existing document\n             if found and 'options.Overwrite' is false.\n        inDatabase: A logical flag that is true if the document already\n                    existed in the database and 'options.Overwrite' was false.\n\n    See also: ndi.document, ndi.query, ndi.setup.NDIMaker.tableDocMaker\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.SETUP.NDIMAKER.IMAGEDOCMAKER, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/ISVALID, CLEAR\n\nHelp for ndi.setup.NDIMaker.imageDocMaker/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.IMAGEDOCMAKER, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/GE, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/GT, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/LE, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/LT, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/NE\n\nHelp for ndi.setup.NDIMaker.imageDocMaker/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER\n\nHelp for ndi.setup.NDIMaker.imageDocMaker/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.setup.ndimaker.imagedocmaker, ndi.setup.ndimaker.imagedocmaker/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.setup.NDIMaker.imageDocMaker/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.IMAGEDOCMAKER, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/EQ, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/GT, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/LE, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/LT, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/NE\n\nHelp for ndi.setup.NDIMaker.imageDocMaker/ge is inherited from superclass handle\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.IMAGEDOCMAKER, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/EQ, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/GE, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/LE, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/LT, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/NE\n\nHelp for ndi.setup.NDIMaker.imageDocMaker/gt is inherited from superclass handle\n</code></pre> <p>imageDocMaker - IMAGEDOCMAKER Constructor for this class.</p> <pre><code>Initializes the imageDocMaker and associates it with the\n    provided NDI session.\n\n    Inputs:\n        session: An NDI session object (e.g., an instance of\n                 ndi.session.dir or ndi.database.dir).\n\n    Outputs:\n        obj: An instance of the imageDocMaker class.\n\n    Example:\n        session = ndi.session.dir('/path/to/my/session');\n        docMaker = ndi.setup.NDIMaker.imageDocMaker(session);\n\n    Documentation for ndi.setup.NDIMaker.imageDocMaker/imageDocMaker\n       doc ndi.setup.NDIMaker.imageDocMaker\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.SETUP.NDIMAKER.IMAGEDOCMAKER, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/DELETE\n\nHelp for ndi.setup.NDIMaker.imageDocMaker/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.IMAGEDOCMAKER, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/EQ, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/GE, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/GT, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/LT, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/NE\n\nHelp for ndi.setup.NDIMaker.imageDocMaker/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.setup.ndimaker.imagedocmaker, matlab.metadata.Property, events\n\nHelp for ndi.setup.NDIMaker.imageDocMaker/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.IMAGEDOCMAKER, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/EQ, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/GE, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/GT, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/LE, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/NE\n\nHelp for ndi.setup.NDIMaker.imageDocMaker/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.IMAGEDOCMAKER, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/EQ, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/GE, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/GT, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/LE, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/LT\n\nHelp for ndi.setup.NDIMaker.imageDocMaker/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.SETUP.NDIMAKER.IMAGEDOCMAKER, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/ADDLISTENER, NDI.SETUP.NDIMAKER.IMAGEDOCMAKER/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.setup.NDIMaker.imageDocMaker/notify is inherited from superclass handle\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/sessionMaker.m/","title":"CLASS ndi.setup.NDIMaker.sessionMaker","text":"<pre><code>  Folder: +ndi/+setup/+NDIMaker/\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/sessionMaker.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/sessionMaker.m/#properties","title":"Properties","text":"Property Description path variableTable sessions tableInd daqSystems"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/sessionMaker.m/#methods","title":"Methods","text":"Method Description addDaqSystem ADDDAQSYSTEM Adds DAQ system definitions from a specified lab to all managed sessions. addlistener addlistener  Add listener for event. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. sessionIndices SESSIONINDICES Returns unique session objects, their mapping to table rows, and session IDs per table row. sessionMaker SESSIONMAKER Constructor for the sessionMaker class."},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/sessionMaker.m/#methods-help","title":"Methods help","text":"<p>addDaqSystem - ADDDAQSYSTEM Adds DAQ system definitions from a specified lab to all managed sessions.</p> <pre><code>ADDDAQSYSTEM(OBJ, LABNAME) searches for DAQ system definitions\n    associated with LABNAME (a folder name within the NDI DAQ\n    system configuration directory) and adds them to each NDI session\n    managed by the sessionMaker object (obj.sessions). It then loads\n    the DAQ reader and file navigator objects for each session and stores\n    them in the obj.daqSystems property.\n\n    ADDDAQSYSTEM(..., 'Overwrite', true) allows overwriting existing DAQ\n    system definitions within the sessions if they already exist. The\n    default is false (no overwrite).\n\n    Input Arguments:\n        obj     - The sessionMaker instance.\n        labName - The name of the lab configuration directory\n                    containing the DAQ system definition files.\n\n    Name-Value Arguments:\n        Overwrite - Whether to overwrite existing DAQ system \n                    entries in the sessions. Default: false.\n</code></pre> <p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.setup.ndimaker.sessionmaker, matlab.metadata.Property, events\n\nHelp for ndi.setup.NDIMaker.sessionMaker/addlistener is inherited from superclass handle\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.SETUP.NDIMAKER.SESSIONMAKER, NDI.SETUP.NDIMAKER.SESSIONMAKER/ISVALID, CLEAR\n\nHelp for ndi.setup.NDIMaker.sessionMaker/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.SESSIONMAKER, NDI.SETUP.NDIMAKER.SESSIONMAKER/GE, NDI.SETUP.NDIMAKER.SESSIONMAKER/GT, NDI.SETUP.NDIMAKER.SESSIONMAKER/LE, NDI.SETUP.NDIMAKER.SESSIONMAKER/LT, NDI.SETUP.NDIMAKER.SESSIONMAKER/NE\n\nHelp for ndi.setup.NDIMaker.sessionMaker/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.SETUP.NDIMAKER.SESSIONMAKER\n\nHelp for ndi.setup.NDIMaker.sessionMaker/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.setup.ndimaker.sessionmaker, ndi.setup.ndimaker.sessionmaker/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.setup.NDIMaker.sessionMaker/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.SESSIONMAKER, NDI.SETUP.NDIMAKER.SESSIONMAKER/EQ, NDI.SETUP.NDIMAKER.SESSIONMAKER/GT, NDI.SETUP.NDIMAKER.SESSIONMAKER/LE, NDI.SETUP.NDIMAKER.SESSIONMAKER/LT, NDI.SETUP.NDIMAKER.SESSIONMAKER/NE\n\nHelp for ndi.setup.NDIMaker.sessionMaker/ge is inherited from superclass handle\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.SESSIONMAKER, NDI.SETUP.NDIMAKER.SESSIONMAKER/EQ, NDI.SETUP.NDIMAKER.SESSIONMAKER/GE, NDI.SETUP.NDIMAKER.SESSIONMAKER/LE, NDI.SETUP.NDIMAKER.SESSIONMAKER/LT, NDI.SETUP.NDIMAKER.SESSIONMAKER/NE\n\nHelp for ndi.setup.NDIMaker.sessionMaker/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.SETUP.NDIMAKER.SESSIONMAKER, NDI.SETUP.NDIMAKER.SESSIONMAKER/DELETE\n\nHelp for ndi.setup.NDIMaker.sessionMaker/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.SESSIONMAKER, NDI.SETUP.NDIMAKER.SESSIONMAKER/EQ, NDI.SETUP.NDIMAKER.SESSIONMAKER/GE, NDI.SETUP.NDIMAKER.SESSIONMAKER/GT, NDI.SETUP.NDIMAKER.SESSIONMAKER/LT, NDI.SETUP.NDIMAKER.SESSIONMAKER/NE\n\nHelp for ndi.setup.NDIMaker.sessionMaker/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.setup.ndimaker.sessionmaker, matlab.metadata.Property, events\n\nHelp for ndi.setup.NDIMaker.sessionMaker/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.SESSIONMAKER, NDI.SETUP.NDIMAKER.SESSIONMAKER/EQ, NDI.SETUP.NDIMAKER.SESSIONMAKER/GE, NDI.SETUP.NDIMAKER.SESSIONMAKER/GT, NDI.SETUP.NDIMAKER.SESSIONMAKER/LE, NDI.SETUP.NDIMAKER.SESSIONMAKER/NE\n\nHelp for ndi.setup.NDIMaker.sessionMaker/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.SESSIONMAKER, NDI.SETUP.NDIMAKER.SESSIONMAKER/EQ, NDI.SETUP.NDIMAKER.SESSIONMAKER/GE, NDI.SETUP.NDIMAKER.SESSIONMAKER/GT, NDI.SETUP.NDIMAKER.SESSIONMAKER/LE, NDI.SETUP.NDIMAKER.SESSIONMAKER/LT\n\nHelp for ndi.setup.NDIMaker.sessionMaker/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.SETUP.NDIMAKER.SESSIONMAKER, NDI.SETUP.NDIMAKER.SESSIONMAKER/ADDLISTENER, NDI.SETUP.NDIMAKER.SESSIONMAKER/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.setup.NDIMaker.sessionMaker/notify is inherited from superclass handle\n</code></pre> <p>sessionIndices - SESSIONINDICES Returns unique session objects, their mapping to table rows, and session IDs per table row.</p> <pre><code>[SESSIONS, IND, SESSION_IDS] = sessionIndices(OBJ)\n    returns the cell array of unique ndi.session.dir objects, an array\n    indicating which unique session corresponds to each row of the\n    original variableTable, and a cell array of session ID strings for each\n    row of the variableTable.\n\n    Output Arguments:\n        sessions (cell)            - Cell array of unique ndi.session.dir objects, where\n                                     sessions{k} is the k-th unique session.\n        ind (:,1) double           - Array of the same height as the original\n                                     variableTable. `ind(r)` gives the index `k` such\n                                     that `sessions{k}` is the session associated\n                                     with row `r` of the table. Rows not associated with a\n                                     valid session will have NaN values.\n        session_ids (cell)         - Cell array of strings, of the same height as the\n                                     original variableTable. `session_ids{r}`\n                                     is the session ID (from ndi.session.id())\n                                     of the session associated with row `r` of variableTable.\n                                     Entries for rows not associated with a valid session\n                                     will be empty strings ''.\n</code></pre> <p>sessionMaker - SESSIONMAKER Constructor for the sessionMaker class.</p> <pre><code>OBJ = SESSIONMAKER(PATH, VARIABLETABLE) creates a sessionMaker object.\n    It identifies unique sessions based on the 'SessionRef' column in\n    VARIABLETABLE, validates corresponding 'SessionPath' entries, and\n    either creates new NDI session directories or loads existing ones.\n\n    OBJ = SESSIONMAKER(..., 'Name', Value) allows specifying additional options:\n\n    Input Arguments:\n        path            - The absolute path to the base directory containing\n                            session folders. Must be an existing folder.\n        variableTable   - A MATLAB table defining the sessions. Must contain\n                            'SessionRef' and 'SessionPath' columns. Other \n                            columns can be included and potentially used for \n                            validation via the 'NonNaNVariableNames' option.\n\n    Optional Name-Value Arguments:\n        Overwrite        - If false, existing sessions are loaded without \n                            modification. If true, existing NDI session \n                            databases found at the specified paths will be \n                            erased and recreated. Default: false.\n        NonNaNVariableNames - Variable names in 'variableTable'.Values in \n                            these columns must not be NaN for a valid \n                            session to be created. Default: {}.\n\n    Output Arguments:\n        obj (sessionMaker)  - The constructed sessionMaker object.\n  Input argument validation using the arguments block\n\n    Documentation for ndi.setup.NDIMaker.sessionMaker/sessionMaker\n       doc ndi.setup.NDIMaker.sessionMaker\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/stimulusDocMaker.m/","title":"CLASS ndi.setup.NDIMaker.stimulusDocMaker","text":"<pre><code>  Folder: +ndi/+setup/+NDIMaker/\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/stimulusDocMaker.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/stimulusDocMaker.m/#properties","title":"Properties","text":"Property Description session The NDI session object (e.g., ndi.session.dir or ndi.database.dir) where stimulus documents will be added. mixtureFilename bathtargetsFilename mixtureStruct bathtargetsStruct"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/stimulusDocMaker.m/#methods","title":"Methods","text":"Method Description addlistener addlistener  Add listener for event. createApproachDoc CREATEAPPROACHDOC Creates and adds NDI 'openminds' documents to the session database. createBathDoc CREATEBATHDOC Creates and adds NDI 'stimulus_bath' documents to the session database. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. stimulusDocMaker STIMULUSDOCMAKER Constructor for this class. table2approachDocs TABLE2APPROACHDOCS Converts rows in a table into stimulus approach documents via CREATEAPPROACHDOCS. table2bathDocs TABLE2BATHDOCS Converts rows in a table into stimulus bath documents via CREATEBATHDOCS."},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/stimulusDocMaker.m/#methods-help","title":"Methods help","text":"<p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.setup.ndimaker.stimulusdocmaker, matlab.metadata.Property, events\n\nHelp for ndi.setup.NDIMaker.stimulusDocMaker/addlistener is inherited from superclass handle\n</code></pre> <p>createApproachDoc - CREATEAPPROACHDOC Creates and adds NDI 'openminds' documents to the session database.</p> <pre><code>Constructs one or more 'openminds' NDI documents for a specific\n    stimulator and epoch, based on provided approach name(s).\n\n    Inputs:\n        obj: An instance of the stimulusDocMaker class.\n        stimulatorid: The NDI element ID of the stimulator device.\n        epochid: The NDI epoch ID for which the document is being created.\n        approachStrings: A character vector or a cell array of character\n                           vectors specifying the approach name(s).\n\n    Optional Name-Value Arguments:\n        Overwrite: A flag intended to control whether existing documents \n                        should be overwritten. Default: false.\n\n    Outputs:\n        docs: A cell array containing the newly created 'openminds' NDI document\n              object(s). A separate document is created for each distinct location\n              associated with the provided 'approachStrings'.\n\n    See also: NDI.DATABASE.FUN.NDICLOUD_ONTOLOGY_LOOKUP,\n</code></pre> <p>createBathDoc - CREATEBATHDOC Creates and adds NDI 'stimulus_bath' documents to the session database.</p> <pre><code>Constructs one or more 'stimulus_bath' NDI documents for a specific\n    stimulator and epoch, based on provided bath target(s) and mixture(s).\n    It looks up ontology details (location name, mixture components) using\n    the loaded structures.\n\n    Inputs:\n        obj: An instance of the stimulusDocMaker class.\n        stimulatorid: The NDI element ID of the stimulator device.\n        epochid: The NDI epoch ID for which the document is being created.\n        bathtargetStrings: A character vector or a cell array of character\n                           vectors specifying the bath target(s) by name. These names\n                           must match keys (case-sensitively) in 'obj.bathtargetsStruct'.\n        mixtureStrings: A character vector or a cell array of character\n                        vectors specifying the mixture(s) by name. These names\n                        must match keys (case-sensitively) in 'obj.mixtureStruct'.\n\n    Optional Name-Value Arguments:\n        Overwrite: A flag intended to control whether existing documents \n                        should be overwritten. Default: false.\n\n    Outputs:\n        docs: A cell array containing the newly created 'stimulus_bath' NDI document\n              object(s). A separate document is created for each distinct location\n              associated with the provided 'bathtargetStrings'.\n\n    See also: NDI.SETUP.CONV.MARDER.MIXTURESTR2MIXTURETABLE,\n        NDI.DATABASE.FUN.FINDDOCS_ELEMNTEPOCHTYPE,\n        NDI.DATABASE.FUN.UBERON_ONTOLOGY_LOOKUP,\n        NDI.DATABASE.FUN.WRITETABLECHAR\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/ISVALID, CLEAR\n\nHelp for ndi.setup.NDIMaker.stimulusDocMaker/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/GE, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/GT, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/LE, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/LT, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/NE\n\nHelp for ndi.setup.NDIMaker.stimulusDocMaker/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER\n\nHelp for ndi.setup.NDIMaker.stimulusDocMaker/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.setup.ndimaker.stimulusdocmaker, ndi.setup.ndimaker.stimulusdocmaker/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.setup.NDIMaker.stimulusDocMaker/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/EQ, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/GT, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/LE, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/LT, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/NE\n\nHelp for ndi.setup.NDIMaker.stimulusDocMaker/ge is inherited from superclass handle\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/EQ, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/GE, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/LE, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/LT, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/NE\n\nHelp for ndi.setup.NDIMaker.stimulusDocMaker/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/DELETE\n\nHelp for ndi.setup.NDIMaker.stimulusDocMaker/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/EQ, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/GE, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/GT, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/LT, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/NE\n\nHelp for ndi.setup.NDIMaker.stimulusDocMaker/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.setup.ndimaker.stimulusdocmaker, matlab.metadata.Property, events\n\nHelp for ndi.setup.NDIMaker.stimulusDocMaker/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/EQ, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/GE, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/GT, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/LE, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/NE\n\nHelp for ndi.setup.NDIMaker.stimulusDocMaker/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/EQ, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/GE, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/GT, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/LE, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/LT\n\nHelp for ndi.setup.NDIMaker.stimulusDocMaker/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/ADDLISTENER, NDI.SETUP.NDIMAKER.STIMULUSDOCMAKER/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.setup.NDIMaker.stimulusDocMaker/notify is inherited from superclass handle\n</code></pre> <p>stimulusDocMaker - STIMULUSDOCMAKER Constructor for this class.</p> <pre><code>Initializes the stimulusDocMaker by loading mixture and bath\n    target ontology files specific to the given labName and associating\n    it with the provided NDI session.\n\n    Inputs:\n        session: An NDI session object (e.g., an instance of\n                 ndi.session.dir or ndi.database.dir).\n        labName: A character vector specifying the name of the lab.\n                 This is used to locate the appropriate ontology files\n                 (e.g., 'labName_mixtures.json','labName_bathtargets.json')\n                 in the 'NDI-MATLAB/+ndi/+setup/+conv/+labName' folder.\n\n    Optional Name-Value Arguments:\n        GetProbes: Runs session.getprobes. Depeneding on the\n                 size of the session, this can add significant\n                 processing time.\n\n    Outputs:\n        obj: An instance of the stimulusDocMaker class.\n\n    Example:\n        session = ndi.session.dir('/path/to/my/session');\n        labName = 'labName';\n        stimulusMaker = ndi.setup.NDIMaker.stimulusDocMaker(session, labName);\n\n    Documentation for ndi.setup.NDIMaker.stimulusDocMaker/stimulusDocMaker\n       doc ndi.setup.NDIMaker.stimulusDocMaker\n</code></pre> <p>table2approachDocs - TABLE2APPROACHDOCS Converts rows in a table into stimulus approach documents via CREATEAPPROACHDOCS.</p> <pre><code>Processes a MATLAB table where rows represent experimental epochs.\n    For each valid epoch row, it extracts filename and approach\n    information, then calls `createApproachDoc` to generate and add\n    the corresponding 'stimulus_approach' NDI document(s) to the database.\n\n    Inputs:\n        obj: An instance of the stimulusDocMaker class.\n        variableTable: A MATLAB table. Rows usually correspond to epochs.\n                       Columns specified by `BathVariable`,\n                       `MixtureVariable`, and `options.FilenameVariable`\n                        are used if they exist.\n        approachVariable: The name of the column in 'variableTable'\n                       containing the bath target string(s).\n                       If the column doesn't exist, this value is used as a fixed\n                       approach name string for all processed epochs.\n\n    Optional Name-Value Arguments:\n        FilenameVariable: The name of the column in 'variableTable'\n                       containing the filename for each epoch, used to derive\n                       the NDI 'epochid'. If empty or not provided, defaults \n                       to using the table's 'RowNames'.\n        NonNaNVariableNames: Variable names in 'variableTable'. Values in \n                       these columns must not be NaN for a valid epoch.\n                       Default: {} (assumes all rows are valid epochs).\n        Overwrite: A flag intended to control whether existing documents \n                       should be overwritten. Default: false.\n\n    Outputs:\n        docs: A cell array where each cell corresponds to an input epoch row\n              processed. Each cell contains another cell array holding the\n              'stimulus_approach' NDI document object(s) created for that epoch \n              by `createApproachDoc`.\n</code></pre> <p>table2bathDocs - TABLE2BATHDOCS Converts rows in a table into stimulus bath documents via CREATEBATHDOCS.</p> <pre><code>Processes a MATLAB table where rows represent experimental epochs.\n    For each valid epoch row, it extracts filename,bath target, and \n    mixture information, then calls `createBathDoc` to generate\n    and add the corresponding 'stimulus_bath' NDI document(s) to the database.\n\n    Inputs:\n        obj: An instance of the stimulusDocMaker class.\n        variableTable: A MATLAB table. Rows usually correspond to epochs.\n                       Columns specified by `BathVariable`,\n                       `MixtureVariable`, and `options.FilenameVariable`\n                        are used if they exist.\n        bathVariable: The name of the column in 'variableTable'\n                       containing the bath target string(s).\n                       If the column doesn't exist, this value is used as a fixed\n                       bath target string for all processed epochs.\n        mixtureVariable: The name of the column in 'variableTable'\n                       containing the mixture string(s). If the column doesn't exist,\n                       this value is used as a fixed mixture string for all epochs.\n\n    Optional Name-Value Arguments:\n        FilenameVariable: The name of the column in 'variableTable'\n                       containing the filename for each epoch, used to derive\n                       the NDI 'epochid'. If empty or not provided, defaults \n                       to using the table's 'RowNames'.\n        NonNaNVariableNames: Variable names in 'variableTable'. Values in \n                       these columns must not be NaN for a valid epoch.\n                       Default: {} (assumes all rows are valid epochs).\n        MixtureDictionary: Struct to map mixture names to keys\n                       in 'mixtureStruct'. Dictionary keys are names from data (spaces-&gt;'_'),\n                       values are the corresponding 'mixtureStruct' key names.\n                       Defaults to empty (no mapping). (e.g. 'Pre' -&gt; 'aCSF')\n        MixtureDelimeter: Character(s) seperating mixture names\n                       (e.g. ',' or ' + '). Default: ','.\n        Overwrite: A flag intended to control whether existing documents \n                       should be overwritten. Default: false.\n\n    Outputs:\n        docs: A cell array where each cell corresponds to an input epoch row\n              processed. Each cell contains another cell array holding the\n              'stimulus_bath' NDI document object(s) created for that epoch \n              by `createBathDoc`.\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/subjectMaker.m/","title":"CLASS ndi.setup.NDIMaker.subjectMaker","text":"<pre><code>  Filename: +ndi/+setup/+NDIMaker/subjectMaker.m\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/subjectMaker.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/subjectMaker.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/subjectMaker.m/#methods","title":"Methods","text":"Method Description addSubjectsToSessions related documents to their respective NDI sessions. deleteSubjectDocs DELETESUBJECTDOCS Deletes subject documents from sessions based on local identifiers. getSubjectInfoFromTable GETSUBJECTINFOFROMTABLE Extracts unique subject information and all generated subject names from table rows. makeSubjectDocuments MAKESUBJECTDOCUMENTS Creates NDI subject documents from subjectInfo structure. mustBeCellArrayOfNdiSessions MUSTBECELLARRAYOFNDISESSIONS Validates input is a cell array of ndi.session.dir objects. mustBeTextLike MUSTBETEXTLIKE Validates that input is char, string, or cell array of char/string. mustBeValidSubjectInfoForDocCreation MUSTBEVALIDSUBJECTINFOFORDOCREATION Validates structure of subjectInfo for document creation. mustHaveAllValidSubjectNames MUSTHAVEALLVALIDSUBJECTNAMES Validates all entries in subjectNameCellArray are valid names. mustHaveSessionIDColumn MUSTHAVESESSIONIDCOLUMN Validates that the input table has a 'sessionID' column. subjectMaker SUBJECTMAKER Construct an instance of this class. unwrapTableCellContent UNWRAPTABLECELLCONTENT Recursively unwraps content from potentially nested cell arrays."},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/subjectMaker.m/#methods-help","title":"Methods help","text":"<p>addSubjectsToSessions - related documents to their respective NDI sessions.</p> <pre><code>added_status = ADDSUBJECTSTOSESSIONS(OBJ, sessionCellArray, documentsToAddSets)\n\n    This method processes a collection of document sets. Each set, an element\n    of 'documentsToAddSets', is expected to be a cell array of 'ndi.document'\n    objects that all pertain to a single NDI session. The target session for\n    each set is determined by inspecting the 'base.session_id' property of the\n    first document in that set. The method then finds the corresponding\n    'ndi.session.dir' object from 'sessionCellArray' and attempts to add all\n    documents in the set to that session's database.\n\n    Args:\n        obj (ndi.setup.NDIMaker.subjectMaker): The instance of this subjectMaker class.\n        sessionCellArray (cell): A cell array of NDI session directory\n                                 objects ('ndi.session.dir') that are available\n                                 for adding documents.\n        documentsToAddSets (cell): A cell array. Each element of this outer cell\n                                 array should be an inner cell array containing one or\n                                 more 'ndi.document' objects. All documents within\n                                 an inner cell array are assumed to belong to the\n                                 same session. This structure is typically the\n                                 '.documents' field from the output of the\n                                 'makeSubjectDocuments' method.\n\n    Returns:\n        added_status (logical vector): A logical vector with the same number of\n                                     elements as 'documentsToAddSets'. Each element\n                                     added_status(i) is true if the i-th set of\n                                     documents was successfully added to its target\n                                     session's database. It is false if the target\n                                     session was not found in 'sessionCellArray', if the\n                                     document set was invalid, or if the database\n                                     add operation failed.\n\n    Assumptions:\n        - Session objects in 'sessionCellArray' are of type 'ndi.session.dir'\n          and possess an 'id()' method to retrieve their unique session ID, a 'reference'\n          property for identification in messages, and a 'database_add(docs_cell_array)'\n          method for adding documents.\n        - NDI document objects within 'documentsToAddSets' have a\n          'document_properties.base.session_id' field that stores the target session ID.\n</code></pre> <p>deleteSubjectDocs - DELETESUBJECTDOCS Deletes subject documents from sessions based on local identifiers.</p> <pre><code>\n</code></pre> <p>getSubjectInfoFromTable - GETSUBJECTINFOFROMTABLE Extracts unique subject information and all generated subject names from table rows.</p> <pre><code>[subjectInfo, allSubjectNamesFromTable] = GETSUBJECTINFOFROMTABLE(OBJ, dataTable, subjectInfoFun)\n\n    This method processes each row of an input 'dataTable' using a\n    user-provided function 'subjectInfoFun'. For each row, it attempts\n    to extract subject-specific details (such as name, strain, species,\n    biological sex) and a 'sessionID' (a character array identifier)\n    directly from the table.\n\n    The method returns two main outputs:\n    1. 'subjectInfo': A structure containing detailed information for\n       subjects that are deemed unique and valid. A subject is considered\n       valid if 'subjectInfoFun' successfully returns a non-empty character\n       array for the subject's name, and if a non-empty character array\n       for 'sessionID' is also successfully extracted from the table row.\n       Uniqueness is based on the subject name; only the first occurrence\n       of each valid subject name (paired with a valid sessionID) is included.\n    2. 'allSubjectNamesFromTable': A cell array that mirrors the input 'dataTable'\n       in row count. Each cell contains the subject name (as a char array) or\n       NaN as returned by 'subjectInfoFun' for the corresponding row, regardless\n       of its validity or uniqueness for the 'subjectInfo' output.\n\n    Args:\n        obj (ndi.setup.NDIMaker.subjectMaker): The instance of this subjectMaker class.\n        dataTable (table): A MATLAB table. Each row is expected to contain\n                         metadata that can define a subject. This table must\n                         include all columns required by the 'subjectInfoFun'\n                         and, critically, a column named 'sessionID'. The\n                         'sessionID' column should contain character array or\n                         string identifiers for sessions.\n        subjectInfoFun (function_handle): A handle to a function (e.g.,\n                         @createSubjectInformation). This function is called for\n                         each row of 'dataTable' and is expected to return four outputs:\n                         [subjectId, strain, species, biologicalSex]\n                         - subjectId: char array (the subject's local identifier) or NaN.\n                         - strain: An openMINDS strain object, or NaN if not applicable/found.\n                         - species: An openMINDS species object, or NaN if not applicable/found.\n                         - biologicalSex: An openMINDS biological sex object, or NaN.\n\n    Returns:\n        subjectInfo (struct): A structure array containing data for unique, valid subjects.\n                         It has the following fields, each being a cell array or vector\n                         aligned by subject:\n                         - subjectName (cell array): Unique subject identifiers (char arrays).\n                         - strain (cell array): Corresponding strain objects (or NaN).\n                         - species (cell array): Corresponding species objects (or NaN).\n                         - biologicalSex (cell array): Corresponding biological sex data (or NaN).\n                         - tableRowIndex (numeric vector): The 1-based row index from the\n                           original 'dataTable' where this unique subject's information\n                           was first successfully extracted.\n                         - sessionID (cell array): The session identifier (char array)\n                           associated with the row that generated the unique subject.\n                         If no subjects meet the validity criteria, an empty struct\n                         (with fields initialized as empty arrays) is returned.\n        allSubjectNamesFromTable (cell array): A cell array with one entry per row of\n                         the input 'dataTable'. Each entry is the subject name (char array)\n                         or NaN returned by 'subjectInfoFun' for that row.\n\n    Assumes:\n        - The 'dataTable' contains a column named 'sessionID'. Values in this\n          column are expected to be character arrays or strings representing session identifiers.\n        - The static validation methods of this class (e.g., mustHaveSessionIDColumn)\n          are accessible.\n</code></pre> <p>makeSubjectDocuments - MAKESUBJECTDOCUMENTS Creates NDI subject documents from subjectInfo structure.</p> <pre><code>\n</code></pre> <p>mustBeCellArrayOfNdiSessions - MUSTBECELLARRAYOFNDISESSIONS Validates input is a cell array of ndi.session.dir objects.</p> <pre><code>\n</code></pre> <p>mustBeTextLike - MUSTBETEXTLIKE Validates that input is char, string, or cell array of char/string.</p> <pre><code>\n</code></pre> <p>mustBeValidSubjectInfoForDocCreation - MUSTBEVALIDSUBJECTINFOFORDOCREATION Validates structure of subjectInfo for document creation.</p> <pre><code>\n</code></pre> <p>mustHaveAllValidSubjectNames - MUSTHAVEALLVALIDSUBJECTNAMES Validates all entries in subjectNameCellArray are valid names.</p> <pre><code>\n</code></pre> <p>mustHaveSessionIDColumn - MUSTHAVESESSIONIDCOLUMN Validates that the input table has a 'sessionID' column.</p> <pre><code>\n</code></pre> <p>subjectMaker - SUBJECTMAKER Construct an instance of this class.</p> <pre><code>OBJ = NDI.SETUP.NDIMAKER.SUBJECTMAKER()\n\n    Creates an ndi.setup.NDIMaker.subjectMaker object. This constructor\n    currently takes no arguments and initializes an empty object, ready\n    to use its methods.\n\n    Documentation for ndi.setup.NDIMaker.subjectMaker/subjectMaker\n       doc ndi.setup.NDIMaker.subjectMaker\n</code></pre> <p>unwrapTableCellContent - UNWRAPTABLECELLCONTENT Recursively unwraps content from potentially nested cell arrays.</p> <pre><code>\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/tableDocMaker.m/","title":"CLASS ndi.setup.NDIMaker.tableDocMaker","text":"<pre><code>  Folder: +ndi/+setup/+NDIMaker/\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/tableDocMaker.m/#superclasses","title":"Superclasses","text":"<p>handle</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/tableDocMaker.m/#properties","title":"Properties","text":"Property Description session The NDI session object (e.g., ndi.session.dir or ndi.database.dir) where documents will be added. variableMapFilename variableMapStruct"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/tableDocMaker.m/#methods","title":"Methods","text":"Method Description addlistener addlistener  Add listener for event. createOntologyTableRowDoc CREATEONTOLOGYTABLEROWDOC Creates a single NDI 'ontologyTableRow' document for a row of table data. delete DELETE   Delete a handle object. eq == (EQ)   Test handle equality. findobj FINDOBJ   Find objects matching specified conditions. findprop findprop   Find property of MATLAB handle object. ge &gt;= (GE)   Greater than or equal relation for handles. gt &gt; (GT)   Greater than relation for handles. isvalid ISVALID   Test handle validity. le &lt;= (LE)   Less than or equal relation for handles. listener listener  Add listener for event without binding the listener to the source object. lt &lt; (LT)   Less than relation for handles. ne ~= (NE)   Not equal relation for handles. notify NOTIFY   Notify listeners of event. table2ontologyTableRowDocs TABLE2ONTOLOGYTABLEROWDOCS Converts each row in a table into an NDI 'ontologyTableRow' document. tableDocMaker TABLEDOCMAKER Constructor for this class."},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2BNDIMaker/tableDocMaker.m/#methods-help","title":"Methods help","text":"<p>addlistener - addlistener  Add listener for event.</p> <pre><code>el = addlistener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = addlistener(hSource, PropName, Eventname, Callback) adds a \n    listener for a property event.  Eventname must be one of\n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be\n    a string scalar or character vector.  PropName must be a single \n    property name specified as string scalar or character vector, or a \n    collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one or more \n    matlab.metadata.Property objects.  The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, addlistener returns an event.listener.  To remove a\n    listener, delete the object returned by addlistener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.\n\n    addlistener binds the listener's lifecycle to the object that is the \n    source of the event.  Unless you explicitly delete the listener, it is\n    destroyed only when the source object is destroyed.  To control the\n    lifecycle of the listener independently from the event source object, \n    use listener or the event.listener constructor to create the listener.\n\n    See also listener, event.listener, ndi.setup.ndimaker.tabledocmaker, matlab.metadata.Property, events\n\nHelp for ndi.setup.NDIMaker.tableDocMaker/addlistener is inherited from superclass handle\n</code></pre> <p>createOntologyTableRowDoc - CREATEONTOLOGYTABLEROWDOC Creates a single NDI 'ontologyTableRow' document for a row of table data.</p> <pre><code>DOC = CREATEONTOLOGYTABLEROWDOC(OBJ, TABLEROW, IDENTIFYINGVARIABLES, OPTIONS)\n\n    This method constructs an NDI document that links the data fields\n    from a single table row to ontology terms. The mapping from the\n    table's variable names (column headers) to ontology term identifiers\n    (e.g., \"PREFIX:TermNameOrID\") is performed using the 'obj.variableMapStruct'\n    loaded during the tableDocMaker's construction. Full ontology term\n    details (ID, name, prefix, shortName/codeName) are retrieved using\n    ndi.ontology.lookup.\n\n    The created NDI document is of type 'ontologyTableRow' and contains:\n      - 'names': A comma-separated string of full ontology term names.\n      - 'variableNames': A comma-separated string of full short/code names.\n      - 'ontologyNodes': A comma-separated string of full ontology IDs (e.g., \"PREFIX:ID\").\n      - 'data': A struct where field names are the 'variableNames' (shortName)\n                obtained from the ontology lookup, and values are the\n                corresponding data from the input 'tableRow'.\n\n    Inputs:\n        obj: An instance of the tableDocMaker class. It must have the\n                  'variableMapStruct' property initialized, mapping table variable\n                  names to ontology term identifiers, and a valid 'session' property.\n        tableRow: A 1xN MATLAB table representing a single row of data.\n                  The variable names (column headers) of this table are used\n                  for mapping to ontology terms.\n        identifyingVariables: A string, char array, or cellstr array of\n                  variable names present in 'tableRow'. These variables\n                  and their corresponding values in 'tableRow' are used\n                  to query for an existing 'ontologyTableRow' document.\n                  The combination of these variable values should\n                  form a unique identifier for the row's data context.\n\n    Optional Name-Value Arguments:\n        Overwrite: Controls behavior if a document matching the 'identifyingVariables' is found:\n                    - true: The existing document is removed, and a new one is created.\n                    - false (default): The existing document is returned, and no\n                                            new document is created.\n        OldDocs: A cell array of existing documents in the database that match\n                 the identifiying variables of the current document. Depending on the behavior\n                 of Overwrite, the OldDocs will be returned or overwritten. Passing this argument\n                 speeds up processing by reducing calls to the database.\n\n    Outputs:\n        doc: The NDI document object (ndi.document) of type 'ontologyTableRow'.\n             This will be the newly created document or the existing document\n             if found and 'options.Overwrite' is false.\n        inDatabase: Flag reporting whether the document already\n             exists in the database and Overwrite is false.\n\n    See also: ndi.ontology.lookup, ndi.document, ndi.query, tableDocMaker.table2ontologyTableRowDocs\n</code></pre> <p>delete - DELETE   Delete a handle object.</p> <pre><code>DELETE(H) deletes all handle objects in array H. After the delete \n    function call, H is an array of invalid objects.\n\n    See also NDI.SETUP.NDIMAKER.TABLEDOCMAKER, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/ISVALID, CLEAR\n\nHelp for ndi.setup.NDIMaker.tableDocMaker/delete is inherited from superclass handle\n</code></pre> <p>eq - == (EQ)   Test handle equality.</p> <pre><code>Handles are equal if they are handles for the same object.\n\n    H1 == H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = EQ(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.TABLEDOCMAKER, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/GE, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/GT, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/LE, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/LT, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/NE\n\nHelp for ndi.setup.NDIMaker.tableDocMaker/eq is inherited from superclass handle\n</code></pre> <p>findobj - FINDOBJ   Find objects matching specified conditions.</p> <pre><code>The FINDOBJ method of the HANDLE class follows the same syntax as the \n    MATLAB FINDOBJ command, except that the first argument must be an array\n    of handles to objects.\n\n    HM = FINDOBJ(H, &lt;conditions&gt;) searches the handle object array H and \n    returns an array of handle objects matching the specified conditions.\n    Only the public members of the objects of H are considered when \n    evaluating the conditions.\n\n    See also FINDOBJ, NDI.SETUP.NDIMAKER.TABLEDOCMAKER\n\nHelp for ndi.setup.NDIMaker.tableDocMaker/findobj is inherited from superclass handle\n</code></pre> <p>findprop - findprop   Find property of MATLAB handle object.</p> <pre><code>p = findprop(H,PropName) finds and returns the matlab.metadata.Property \n    object associated with property name PropName of scalar handle object H.\n    PropName can be a string scalar or character vector.  It can be the \n    name of a property defined by the class of H or a dynamic property \n    added to scalar object H.\n\n    If no property named PropName exists for object H, an empty \n    matlab.metadata.Property array is returned.\n\n    See also ndi.setup.ndimaker.tabledocmaker, ndi.setup.ndimaker.tabledocmaker/findobj, dynamicprops, matlab.metadata.Property\n\nHelp for ndi.setup.NDIMaker.tableDocMaker/findprop is inherited from superclass handle\n</code></pre> <p>ge - &gt;= (GE)   Greater than or equal relation for handles.</p> <pre><code>H1 &gt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.TABLEDOCMAKER, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/EQ, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/GT, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/LE, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/LT, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/NE\n\nHelp for ndi.setup.NDIMaker.tableDocMaker/ge is inherited from superclass handle\n</code></pre> <p>gt - &gt; (GT)   Greater than relation for handles.</p> <pre><code>H1 &gt; H2 performs element-wise comparisons between handle arrays H1 and \n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.  \n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = GT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.TABLEDOCMAKER, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/EQ, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/GE, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/LE, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/LT, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/NE\n\nHelp for ndi.setup.NDIMaker.tableDocMaker/gt is inherited from superclass handle\n</code></pre> <p>isvalid - ISVALID   Test handle validity.</p> <pre><code>TF = ISVALID(H) performs an element-wise check for validity on the \n    handle elements of H.  The result is a logical array of the same \n    dimensions as H, where each element is the element-wise validity \n    result.\n\n    A handle is invalid if it has been deleted or if it is an element\n    of a handle array and has not yet been initialized.\n\n    See also NDI.SETUP.NDIMAKER.TABLEDOCMAKER, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/DELETE\n\nHelp for ndi.setup.NDIMaker.tableDocMaker/isvalid is inherited from superclass handle\n</code></pre> <p>le - &lt;= (LE)   Less than or equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object.  All \n    comparisons use a number associated with each handle object.  Nothing\n    can be assumed about the result of a handle comparison except that the\n    repeated comparison of two handles in the same MATLAB session will \n    yield the same result.  The order of handle values is purely arbitrary \n    and has no connection to the state of the handle objects being \n    compared.\n\n    H1 &lt;= H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &gt;= result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LE(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.TABLEDOCMAKER, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/EQ, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/GE, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/GT, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/LT, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/NE\n\nHelp for ndi.setup.NDIMaker.tableDocMaker/le is inherited from superclass handle\n</code></pre> <p>listener - listener  Add listener for event without binding the listener to the source object.</p> <pre><code>el = listener(hSource, Eventname, callbackFcn) creates a listener\n    for the event named Eventname.  The source of the event is the handle  \n    object hSource.  If hSource is an array of source handles, the listener\n    responds to the named event on any handle in the array.  callbackFcn\n    is a function handle that is invoked when the event is triggered.\n\n    el = listener(hSource, PropName, Eventname, callback) adds a \n    listener for a property event.  Eventname must be one of  \n    'PreGet', 'PostGet', 'PreSet', or 'PostSet'. Eventname can be a \n    string sclar or character vector.  PropName must be either a single \n    property name specified as a string scalar or character vector, or \n    a collection of property names specified as a cell array of character \n    vectors or a string array, or as an array of one ore more \n    matlab.metadata.Property objects. The properties must belong to the \n    class of hSource.  If hSource is scalar, PropName can include dynamic \n    properties.\n\n    For all forms, listener returns an event.listener.  To remove a\n    listener, delete the object returned by listener.  For example,\n    delete(el) calls the handle class delete method to remove the listener\n    and delete it from the workspace.  Calling delete(el) on the listener\n    object deletes the listener, which means the event no longer causes\n    the callback function to execute. \n\n    listener does not bind the listener's lifecycle to the object that is\n    the source of the event.  Destroying the source object does not impact\n    the lifecycle of the listener object.  A listener created with listener\n    must be destroyed independently of the source object.  Calling \n    delete(el) explicitly destroys the listener. Redefining or clearing \n    the variable containing the listener can delete the listener if no \n    other references to it exist.  To tie the lifecycle of the listener to \n    the lifecycle of the source object, use addlistener.\n\n    See also addlistener, event.listener, ndi.setup.ndimaker.tabledocmaker, matlab.metadata.Property, events\n\nHelp for ndi.setup.NDIMaker.tableDocMaker/listener is inherited from superclass handle\n</code></pre> <p>lt - &lt; (LT)   Less than relation for handles.</p> <pre><code>H1 &lt; H2 performs element-wise comparisons between handle arrays H1 and\n    H2.  H1 and H2 must be of the same dimensions unless one is a scalar.\n    The result is a logical array of the same dimensions, where each\n    element is an element-wise &lt; result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = LT(H1, H2) stores the result in a logical array of the same \n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.TABLEDOCMAKER, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/EQ, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/GE, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/GT, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/LE, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/NE\n\nHelp for ndi.setup.NDIMaker.tableDocMaker/lt is inherited from superclass handle\n</code></pre> <p>ne - ~= (NE)   Not equal relation for handles.</p> <pre><code>Handles are equal if they are handles for the same object and are \n    unequal otherwise.\n\n    H1 ~= H2 performs element-wise comparisons between handle arrays H1 \n    and H2.  H1 and H2 must be of the same dimensions unless one is a \n    scalar.  The result is a logical array of the same dimensions, where \n    each element is an element-wise equality result.\n\n    If one of H1 or H2 is scalar, scalar expansion is performed and the \n    result will match the dimensions of the array that is not scalar.\n\n    TF = NE(H1, H2) stores the result in a logical array of the same\n    dimensions.\n\n    See also NDI.SETUP.NDIMAKER.TABLEDOCMAKER, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/EQ, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/GE, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/GT, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/LE, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/LT\n\nHelp for ndi.setup.NDIMaker.tableDocMaker/ne is inherited from superclass handle\n</code></pre> <p>notify - NOTIFY   Notify listeners of event.</p> <pre><code>NOTIFY(H, eventname) notifies listeners added to the event named \n    eventname for handle object array H that the event is taking place. \n    eventname can be a string scalar or character vector.  \n    H is the array of handles to the event source objects, and 'eventname'\n    must be a character vector.\n\n    NOTIFY(H,eventname,ed) provides a way of encapsulating information \n    about an event which can then be accessed by each registered listener.\n    ed must belong to the EVENT.EVENTDATA class.\n\n    See also NDI.SETUP.NDIMAKER.TABLEDOCMAKER, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/ADDLISTENER, NDI.SETUP.NDIMAKER.TABLEDOCMAKER/LISTENER, EVENT.EVENTDATA, EVENTS\n\nHelp for ndi.setup.NDIMaker.tableDocMaker/notify is inherited from superclass handle\n</code></pre> <p>table2ontologyTableRowDocs - TABLE2ONTOLOGYTABLEROWDOCS Converts each row in a table into an NDI 'ontologyTableRow' document.</p> <pre><code>DOCS = TABLE2ONTOLOGYTABLEROWDOCS(OBJ, DATATABLE, IDENTIFYINGVARIABLES, OPTIONS)\n\n    This method iterates through each row of the input 'dataTable'.\n    For each row, it calls `obj.createOntologyTableRowDoc` to generate\n    an NDI document of type 'ontologyTableRow'. The resulting documents\n    are collected into a cell array.\n\n    Inputs:\n        obj: An instance of the tableDocMaker class.\n        dataTable: A MATLAB table. Each row will be processed to create\n                   an 'ontologyTableRow' document.\n        identifyingVariables: A string, char array, or cellstr array of\n                   variable names present in 'dataTable'. This is\n                   passed directly to `createOntologyTableRowDoc`\n                   for each row to identify potentially existing documents.\n    Optional Name-Value Arguments:\n        Overwrite: Flag passed directly to `createOntologyTableRowDoc`.\n                   Controls whether existing documents matching the\n                   'identifyingVariables' for a given row should be\n                   overwritten. Default: false.\n\n    Outputs:\n        docs: A cell array with the same number of rows as 'dataTable'.\n              Each cell contains the NDI document object (ndi.document)\n              created by `createOntologyTableRowDoc` for the corresponding row.\n\n    See also: tableDocMaker.createOntologyTableRowDoc, ndi.gui.component.ProgressBarWindow\n</code></pre> <p>tableDocMaker - TABLEDOCMAKER Constructor for this class.</p> <pre><code>Initializes the tableDocMaker by loading a variable-to-ontology\n    mapping dictionary file specific to the given labName and associating\n    it with the provided NDI session.\n\n    Inputs:\n        session: An NDI session object (e.g., an instance of\n                 ndi.session.dir or ndi.database.dir).\n        labName: A character vector specifying the name of the lab.\n                 This is used to locate the ontology mapping dictionary file\n                 (e.g., 'labName_tableDoc_dictionary.json')\n                 in the 'NDI-MATLAB/+ndi/+setup/+conv/+labName' folder.\n\n    Outputs:\n        obj: An instance of the tableDocMaker class.\n\n    Example:\n        session = ndi.session.dir('/path/to/my/session');\n        labName = 'myLab';\n        docMaker = ndi.setup.NDIMaker.tableDocMaker(session, labName);\n\n    Documentation for ndi.setup.NDIMaker.tableDocMaker/tableDocMaker\n       doc ndi.setup.NDIMaker.tableDocMaker\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bdabrowska/createSubjectInformation.m/","title":"ndi.setup.conv.dabrowska.createSubjectInformation","text":"<pre><code> CREATESUBJECTINFORMATION Creates subject ID string and openMINDS objects for species/strain/sex.\n\n    [subjectString, strain, species, biologicalSex] = CREATESUBJECTINFORMATION(tableRow)\n\n    Generates a subject identifier string and openMINDS objects based on\n    multiple columns in the input table row. It handles columns that may\n    contain cell arrays or direct numeric/string values. It enforces\n    exclusivity among genotype indicator columns and requires a valid sessionID.\n    Output text values are char. Biological sex output is currently always NaN.\n\n    Depends on the external validation function: ndi.validators.mustHaveRequiredColumns\n\n    Args:\n        tableRow (table): A 1xN MATLAB table (single row). Argument validation\n                          ensures it contains AT LEAST the columns:\n                          'IsWildType', 'IsCRFCre', 'IsOTRCre', 'IsAVPCre',\n                          'RecordingDate', 'SubjectPostfix', 'SpeciesOntologyID',\n                          'sessionID', and 'BiologicalSex'.\n                          Columns may contain cell arrays (value in first cell used)\n                          or direct numeric/string/char values (e.g., NaN, \"text\", 'text').\n                          Genotype columns: Exactly ONE must resolve to non-empty char.\n                          sessionID column: Must resolve to a non-empty char array or string.\n\n    Returns:\n        subjectString (char | NaN):\n            - A character array string with a prefix determined by the valid\n              genotype column, followed by the formatted date and SubjectPostfix.\n            - Returns numeric NaN if prerequisites fail (e.g., invalid sessionID,\n              genotype, date, or postfix).\n        strain (openminds.core.research.Strain | NaN):\n            - An openMINDS Strain object determined by the valid genotype column\n              and requires valid 'SpeciesOntologyID'.\n            - Returns numeric NaN if prerequisites fail or object creation fails.\n        species (openminds.controlledterms.Species | NaN):\n            - An openMINDS Species object (hardcoded 'Rattus norvegicus') if\n              'SpeciesOntologyID' resolves to a non-empty char array.\n            - Returns numeric NaN otherwise or if object creation fails.\n        biologicalSex (openminds.controlledterms.BiologicalSex | NaN):\n              If 'BiologicalSex' is present and is\n              'male','female','hermaphrodite' or 'notDetectable',\n              BiologicalSex is returned as\n              openminds.controlledterms.BiologicalSex. Otherwise, NaN is\n              returned.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bdabrowska/doImport.m/","title":"ndi.setup.conv.dabrowska.doImport","text":"<pre><code>  Section A: Import electrophysiology dataset\n    Step 1: VARIABLE TABLE. Get the file manifest and build a table, with one row per data file.\n    Step 2: SESSIONS. Now that we have the file manifest, build sessions.\n    Step 3: SUBJECTS. Build subject documents.\n    Step 4: EPOCHPROBEMAPS. Build epochprobemaps.\n    Step 5: STIMULUS DOCS. Build the stimulus bath and approach documents.\n    Step 6: CELL TYPES. Add openMinds celltypes and probe location documents.\n    Step 7: VIRUSES AND TREATMENTS. Add virus injection and optogenetic location treatment documents.\n\n  Section B: Import behavioral dataset\n    Step 8: EPM DATA TABLE. Build data table for Elevated Plus Maze data.\n    Step 9: FPS DATA TABLE. Build data table for Fear-Potentiated Startle data.\n    Step 10: SUBJECTS. Build subject documents.\n    Step 11: ONTOLOGYTABLEROW. Build ontologyTableRow documents.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bdabrowska/download_data.m/","title":"ndi.setup.conv.dabrowska.download_data","text":"<pre><code>  Choose the folder where the dataset is (or will be) stored\n  (e.g. /Users/myusername/Documents/MATLAB/Datasets)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bdabrowska/working.m/","title":"ndi.setup.conv.dabrowska.working","text":"<pre><code>  steve's working doc\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bdatalocation/processFileManifest.m/","title":"ndi.setup.conv.datalocation.processFileManifest","text":"<pre><code>  Processes a file manifest based on variable extraction rules and returns a table.\n\n  VARIABLETABLE = PROCESSFILEMANIFEST(FILEMANIFEST, VARSTRUCTARRAY, ...)\n\n  Validates inputs using an arguments block. Allows optional prefix removal.\n  Handles 'ind' and 'regex' StringDetectModes.\n  The 'regex' mode uses regexp with 'tokens' and expects the desired value\n  to be in the first captured group if capturing groups are used in the pattern.\n\n  Args:\n    fileManifest (cell vector): A cell array of strings (or char arrays),\n                                where each element is a relative file path\n                                (using '/' as separator). Must be a vector.\n    varStructArray (struct vector): A non-empty structure array derived\n                                    from the JSON configuration. Must be a\n                                    vector and contain the required fields.\n                                    See mustHaveRequiredVarStructFields.\n\n  Optional Name-Value Args:\n    relativePathPrefix (char vector): A prefix to remove from the beginning\n                                      of each path in fileManifest before\n                                      processing. Defaults to ''.\n\n  Returns:\n    variableTable (table): A table where each row corresponds to a file\n        in fileManifest and each column corresponds to a variable defined\n        in varStructArray. The table's RowNames are the processed file paths\n        (after potential prefix removal). Cell values contain the extracted\n        data (char arrays) or NaN for failed extractions.\n\n  Example Usage:\n    varStruct = jsondecode(fileread('config.json')); % Assume config defines regex with capturing group\n    manifest = {'data/raw/exp1/subjA_IV_Curves/s1/t1.dat'; 'data/raw/exp1/subjB_Other_IV_Curves/s1/t2.dat'}; % Use column cell\n    resultsTable = processFileManifest_TableOutput(manifest, varStruct, relativePathPrefix='data/raw/');\n    % Access data like: subjectA_value = resultsTable{'exp1/subjA_IV_Curves/s1/t1.dat', 'SubjectID'};\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bgluckman/binepochprobemap.m/","title":"ndi.setup.conv.gluckman.binepochprobemap","text":"<pre><code>  BINEPOCHPROBEMAP - Create epochprobemap files for a Gluckman BIN directory\n\n  BINEPOCHPROBEMAP(DIRNAME)\n\n  Reads all BIN files in DIRNAME and creates corresponding epochprobemap files.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bgluckman/channelname2probename.m/","title":"ndi.setup.conv.gluckman.channelname2probename","text":"<pre><code>  CHANNELNAME2PROBENAME - convert a Marder channel name to a probe name\n\n  [PROBENAME, PROBEREF, SUBJECTNAME, PROBETYPE] = CHANNELNAME2PROBENAME(CHNAME, SUBJECTS)\n\n  Given a channel name (e.g., 'A5','B4'), returns a probe name\n  and subject name. PROBEREF is always 1.\n\n  If there is more than one subject (usually a maximum of 1), then the\n  program looks for a '1' or '2' in CHNAME. If none is found, then it is\n  assumed there is only 1 subject and 1 is the end of the string.\n  If a 2 is found and there is no second subject, a warning is produced.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bgluckman/channelnames2daqsystemstrings.m/","title":"ndi.setup.conv.gluckman.channelnames2daqsystemstrings","text":"<pre><code>\n  DAQSYSSTR = CHANNELNAMES2DAQSYSTEMSTRINGS(CHNAMES, DAQNAME, SUBJECTS)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bhaley/createSubjectInformation.m/","title":"ndi.setup.conv.haley.createSubjectInformation","text":"<pre><code> CREATESUBJECTINFORMATION Creates subject ID string and openMINDS objects for species/strain/sex.\n\n    [subjectString, strain, species, biologicalSex] = CREATESUBJECTINFORMATION(tableRow)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bhaley/doImport.m/","title":"ndi.setup.conv.haley.doImport","text":"<pre><code>  Input argument validation\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/abf2probetable.m/","title":"ndi.setup.conv.marder.abf2probetable","text":"<pre><code>  ABF2PROBETABLE - Populate a probetable table for a Marder ndi session\n\n  ABF2PROBETABLE(S)\n\n  Reads all ABF files in the NDI session S and creates a putative\n  probetable file.\n\n  To create a new Marder lab session from a directory, use\n   S = ndi.setup.lab('marderlab',REF,DIRNAME)\n\n  It is necessary to first create a subject1.txt file with the subject\n  identifier of the first crab. If there are two crabs being recorded, then\n  it is necessary to create a subject2.txt file. And so on.\n\n  The usual naming convention: 745_003_01@marderlab.brandeis.edu\n   where 745 is the lab notebook, 003 is the experiment number in the\n   lab notebook, and 01 indicates that there is only one prep in this\n   experiment.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/abfepochprobemap.m/","title":"ndi.setup.conv.marder.abfepochprobemap","text":"<pre><code>  ABFEPOCHPROBEMAP - Create epochprobemap files for a Marder ndi session\n\n  ABFEPOCHPROBEMAP(S)\n\n  Reads all ABF files in the NDI session S and creates corresponding\n  epochprobemap files.\n\n  To create a new Marder lab session from a directory, use\n   S = ndi.setup.lab\n\n  ABFEPOCHPROBEMAP(S,'forceIgnore2',true) does not interpret a 2 in the\n  channel name as a second prep.\n\n  It is necessary to first create a subject1.txt file with the subject\n  identifier of the first crab. If there are two crabs being recorded, then\n  it is necessary to create a subject2.txt file. And so on.\n\n  The usual naming convention: 745_003_01@marderlab.brandeis.edu\n   where 745 is the lab notebook, 003 is the experiment number in the\n   lab notebook, and 01 indicates that there is only one prep in this\n   experiment.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/abfprobetable2probemap.m/","title":"ndi.setup.conv.marder.abfprobetable2probemap","text":"<pre><code>  ABFPROBETABLE2PROBEMAP - Create epochprobemap files for a Marder ndi session\n\n    ABFPROBETABLE2PROBEMAP(S) reads all ABF files within the NDI session\n    directory specified by the ndi.session or ndi.dataset object S and\n    generates corresponding epochprobemap files. This function utilizes\n    the 'probetable.csv' file and any 'subject*.txt' files found in the\n    main session directory to map recorded channels to probes and subjects.\n\n    ABFPROBETABLE2PROBEMAP(S, OPTIONS) allows for customization of the\n    epochprobemap creation process through a structure of name-value pair\n    arguments.\n\n    Inputs:\n    S (ndi.session or ndi.dataset)\n        An ndi.session or ndi.dataset object representing the experimental\n        session containing the ABF data. The function will operate on the\n        directory associated with this object.\n\n    Options:\n    'acquisitionDelay' (duration, default = seconds(0))\n        A duration specifying the minimum time that must have passed since\n        an ABF file's creation date for it to be processed. This can be\n        useful to avoid processing files that are still being written.\n\n    'overwrite' (logical, default = false)\n        A logical flag indicating whether existing epochprobemap files \n        should be overwritten. If true, the function will re-create \n        epochprobemap files even if they already exist. If false, existing \n        files will be skipped.\n\n    Notes:\n    - The 'probetable.csv' file is expected to have columns that can be \n        used to match channel names (found in the ABF header) to probe \n        information. The exact column names used for matching are \n        determined within the \n        NDI.SETUP.CONV.MARDER.CHANNELNAMETABLE2PROBENAME function.\n    - The 'subject*.txt' files are expected to contain a single line with \n        the subject's local identifier.\n\n    See also: NDI.SESSION, NDI.DATASET, NDI.EPOCH.EPOCHPROBEMAP_DAQSYSTEM, \n        NDI.SETUP.CONV.MARDER.CHANNELNAMETABLE2PROBENAME,\n        NDR.FORMAT.AXON.READ_ABF_HEADER\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/channelname2probename.m/","title":"ndi.setup.conv.marder.channelname2probename","text":"<pre><code>  CHANNELNAME2PROBENAME - convert a Marder channel name to a probe name\n\n  [PROBENAME, PROBEREF, SUBJECTNAME] = CHANNELNAME2PROBENAME(CHNAME, SUBJECTS)\n\n  Given a channel name (e.g., 'DGN1_A','lvn','lvn2'), returns a probe name\n  and subject name. PROBEREF is always 1.\n\n  If there is more than one subject (usually a maximum of 2), then the\n  program looks for a '1' or '2' in CHNAME. If none is found, then it is\n  assumed there is only 1 subject and 1 is the end of the string.\n  If a 2 is found and there is no second subject, a warning is produced.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/channelnames2daqsystemstrings.m/","title":"ndi.setup.conv.marder.channelnames2daqsystemstrings","text":"<pre><code>\n  DAQSYSSTR = CHANNELNAMES2DAQSYSTEMSTRINGS(CHNAMES, DAQNAME, SUBJECTS)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/channelnametable2probename.m/","title":"ndi.setup.conv.marder.channelnametable2probename","text":"<pre><code>  CHANNELNAMETABLE2PROBENAME - convert a Marder channel name to a probe name\n\n  [PROBENAME, PROBEREF, PROBETYPE, SUBJECTNAME] = CHANNELNAMETABLE2PROBENAME(CHNAME, PROBETABLE)\n\n  Given a channel name (e.g., 'DGN1_A','lvn','lvn2'), returns a probe name\n  and subject name. PROBEREF is always 1.\n\n  The probe information is assigned according to information in PROBETABLE, a table\n  with columns \"channelName\", \"probeName\", \"probeRef\", \"probeType\", \"subjectName\".\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/demo.m/","title":"ndi.setup.conv.marder.demo","text":"<pre><code>  The problem:\n\n  Find all recording sessions that exhibit variation in a stimulus_parameter\n  called 'Command temperature constant'.  Sessions should be from the marderlab\n  (from subjects that have '@marderlab.brandeis.edu' in the 'local_identifier' field).\n  Then, for each subject, plot epochs from probe that is located in\n  the 'lateral ventricular nerve' as a function of command temperature.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/makeVoltageOffsets.m/","title":"ndi.setup.conv.marder.makeVoltageOffsets","text":"<pre><code>  MAKEVOLTAGEOFFSETS - Make documents from a table of voltage offset values\n\n  DOCLIST = MAKEVOLTAGEOFFSETS(S)\n\n  Read in a table called \"MEoffset.txt\" that is comma separated value and has \n  columns \"probeName\", \"offsetV\", and \"T\" (for temperature). The function then\n  checks to see if the offset data has been added to the database, and, if not\n  adds it.\n\n  If there is no file, then no action is taken and a warning is given.\n\n  Any newly created documents are returned in DOCLIST. They will already be added\n  to the database of session S.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/makesubjects.m/","title":"ndi.setup.conv.marder.makesubjects","text":"<pre><code>  MAKESUBJECTS - make text files for subjects\n\n  MAKESUBJECTS(S, N)\n\n  Make subject*.txt files for N subjects.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/marderbath.m/","title":"ndi.setup.conv.marder.marderbath","text":"<pre><code>  MARDERBATH - add bath information to a Marder session\n\n  D = MARDERBATH(S)\n\n  Create NDI documents of type 'stimulus_bath' based on the mixture table\n  at location [S.path filesep 'bath_table.csv']\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/marderprobe2uberon.m/","title":"ndi.setup.conv.marder.marderprobe2uberon","text":"<pre><code>\n  D = MARDERPROBE2UBERON(S)\n\n  Add probe_location information based on Marder probe data.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/mixtureStr2mixtureTable.m/","title":"ndi.setup.conv.marder.mixtureStr2mixtureTable","text":"<pre><code>  MIXTURESTR2MIXTURETABLE - convert a mixture string to a mixture table\n\n  T = ndi.setup.conv.marder.MIXTURESTR2MIXTURETABLE(STR, MIXTURESTRUCT)\n\n  Converts a mixture string STR to a table of mixtures.\n\n  STR is a string of the form \"v1,v2,N*v3\", etc. It indicates what\n  mixtures, which are fields of the MIXTURESTRUCT, are present here.\n\n  MIXTURESTRUCT is a structure with fields equal to the possibly mixture\n  type values V. The entries of MIXTURESTRUCT.V are a structure array with the following\n  values:\n     ontologyName :   Node name of the compound in an ontology\n             name :   The name of the compound (official name in the ontology)\n            value :   The value of the concentration of the mixture\n     ontologyUnit :   The unit of measure, usually 'OM:MolarVolumeUnit'\n         unitName :   The name of the unit, usually 'Molar'\n\n  Example:  \n     str = 'normal_saline';\n     marderFolder = fullfile(ndi.common.PathConstants.RootFolder,'+ndi','+setup','+conv','+marder');\n     mixtureStruct = jsondecode(fileread(fullfile(marderFolder,\"marder_mixtures.json\")));\n     t = ndi.setup.conv.marder.mixtureStr2mixtureTable(str,mixtureStruct)\n     % a table of entries\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/plot_epoch.m/","title":"ndi.setup.conv.marder.plot_epoch","text":"<pre><code>  PLOT_EPOCH - plot an epoch\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/postsetup.m/","title":"ndi.setup.conv.marder.postsetup","text":"<pre><code>  POSTSETUP - does all post-setup operations for Marder lab data\n\n  POSTSETUP(S)\n\n  1) Generates epochprobemaps for ABF data\n  2) Checks that the probes are available in S\n  3) Generates the metadata with ndi.setup.conv.marder.pretemptable(S)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/preptemp.m/","title":"ndi.setup.conv.marder.preptemp","text":"<pre><code>  PREPTEMP - identify temperature parameters for a temperature record\n\n  OUT = PREPTEMP(T, D, TEMP_TABLE, ...)\n\n  Identify the temperature of a Marder lab record. The timestamps of the\n  record are provided in T, and the data in degrees C are provided in\n  D.\n\n  The program attempts to identify which of several command temperatures\n  in TEMP_TABLE are employed in the record.\n\n  The record is categorized as 'constant' or 'change' if the record exhibits\n  a change greater than 'change_threshold'.\n\n  OUT is a structure with fields:\n    'type':  takes the value 'constant or 'change'\n    'temp': that contains the values in TEMP_TABLE that most closely match\n            the record. In the case of a 'constant' record,\n            'temp' will have one value; in the case of a 'change' record,\n            it will have two values (the beginning and end values).\n    'raw':  the raw temperature values before they are translated to\n            table entries.\n  'range':  the observed temperature range\n\n\n  The function takes name/value pairs that modify its default behavior:\n  |----------------------------|--------------------------------------|\n  | Parameter (default)        | Description                          |\n  |----------------------------|--------------------------------------|\n  | change_threshold (3)       | Threshold at which to describe the   |\n  |                            |   record as a 'change'.              |\n  | beginning_time (2)         | Time in seconds that constitutes the |\n  |                            |   beginning of the record.           |\n  | ending_time (2)            | Time in seconds from the end of the  |\n  |                            |   record that constitutes the ending |\n  |                            |   time to be averaged.               |\n  | filter ( ones(5,1)/5 )     | A convolution filter to smooth data  |\n  | interactive (false)        | Should we ask the user for input?    |\n  |----------------------------|--------------------------------------|\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/preptemptable.m/","title":"ndi.setup.conv.marder.preptemptable","text":"<pre><code>  PREPTEMPTABLE - write a prep temperature table to the session directory\n\n  PREPTEMPTABLE(S)\n\n  Write a temperature table to the session directory.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/presetup.m/","title":"ndi.setup.conv.marder.presetup","text":"<pre><code>  PRESETUP - set up the Marder lab directory based on the directory name\n\n  S = PRESETUP(DIRNAME, N, Name, Value, ...)\n\n  Sets up a Marderlab directory for import using NDI methods.\n\n  Inputs:\n    DIRNAME - The full path to the directory to be set up. Must be a valid folder.\n    N - An integer identifier (e.g., experiment number), must be &gt;= 1.\n\n  Optional Name-Value Pair Arguments:\n    makeSubjects (logical) - If true, creates subject entries based on N.\n                             Defaults to false.\n    makeProbeTable (logical) - If true, generates the probeTable.csv file from\n                               .abf files and opens it for editing.\n                               Defaults to true.\n\n  Outputs:\n    S - The NDI session object for the created/configured directory.\n\n  Example:\n    % Basic setup, creates probe table by default\n    S = presetup('/path/to/my/experiment', 1);\n\n    % Setup without creating probe table\n    S = presetup('/path/to/my/experiment', 2, 'makeProbeTable', false);\n\n    % Setup and create subject entries\n    S = presetup('/path/to/my/experiment', 3, 'makeSubjects', true);\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/smrepochprobemap.m/","title":"ndi.setup.conv.marder.smrepochprobemap","text":"<pre><code>  SMREPOCHPROBEMAP - Create epochprobemap files for a Marder SMR directory\n\n  SMREPOCHPROBEMAP(DIRNAME)\n\n  Reads all SMR files in DIRNAME and creates corresponding epochprobemap files.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bmarder/temptable2stimulusparameters.m/","title":"ndi.setup.conv.marder.temptable2stimulusparameters","text":"<pre><code>  TEMPTABLE2STIMULUSPARAMETERS - Create stimulusparameter documents for temperature for a Marder ndi session\n\n  TEMPTABLE2STIMULUSPARAMETERS(S)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bvhlab/approachMappingTable.m/","title":"ndi.setup.conv.vhlab.approachMappingTable","text":"<pre><code>  APPROACHMAPPINGTABLE - Creates a table of epoch approach mappings for an NDI session.\n\n  T = APPROACHMAPPINGTABLE(S, ...)\n\n  Creates a table with variables 'epochid', 'approachMapping', 'subjectIdentifier',\n  and 'sessionPath'.\n\n  This function reads a list of epochs and their types from a file within the NDI\n  session directory. It then uses a JSON mapping file to expand these types into\n  descriptive strings.\n\n  It takes an ndi.session.dir object 'S' as input.\n\n  This function can also take name/value pairs that modify its behavior:\n  |--------------------------|----------------------------------------------------|\n  | 'json_filename'          | The full path to the JSON file that contains the   |\n  |                          | name/value mappings. Default is a file included    |\n  |                          | with the NDI toolbox:                              |\n  |                          | fullfile(ndi.toolboxdir, '+ndi', '+setup', ...     |\n  |                          |   '+conv', '+vhlab', 'ApproachMappings.json')      |\n  | 'epoch_list_filename'    | The name of the tab-delimited file in the session  |\n  |                          | directory that lists epoch IDs and types.          |\n  |                          | Default is 'testdirinfo.txt'.                      |\n  |--------------------------|----------------------------------------------------|\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bvhlab/createSubjectInformation.m/","title":"ndi.setup.conv.vhlab.createSubjectInformation","text":"<pre><code>  CREATESUBJECTINFORMATION - Creates subject data from a VH Lab subject info table row.\n\n    [SUBJECTIDENTIFIER, STRAIN, SPECIES, BIOLOGICALSEX] = ...\n        CREATESUBJECTINFORMATION(TABLEROW)\n\n    This function serves as an adapter for the NDI subjectMaker tool. It reads\n    a single row from a table generated by `ndi.setup.conv.vhlab.subjectInfoTable`\n    and transforms the data into the format required by `ndi.setup.NDIMaker.subjectMaker`.\n\n    Inputs:\n        tableRow (table): A single-row table containing subject information with\n                          the following columns:\n                          - 'subjectIdentifier' (string/char)\n                          - 'species' (string/char, e.g., 'Mustela putorius furo')\n                          - 'BiologicalSex' (string/char, e.g., 'female')\n\n    Outputs:\n        subjectIdentifier (char): The local identifier for the subject. Returns NaN\n                                  on failure.\n        strain (NaN): The VH Lab subject table does not specify strain, so this\n                      is always returned as NaN.\n        species (openminds.controlledterms.Species): An openMINDS object representing\n                      the subject's species. Returns NaN on failure.\n        biologicalSex (openminds.controlledterms.BiologicalSex): An openMINDS object for\n                      the subject's biological sex. Returns NaN on failure.\n\n    See also: ndi.setup.conv.vhlab.subjectInfoTable, ndi.setup.NDIMaker.subjectMaker\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bvhlab/doStacyImport.m/","title":"ndi.setup.conv.vhlab.doStacyImport","text":"<pre><code>  DOSTACYIMPORT - Imports VH Lab subject and stimulus metadata into an NDI session.\n\n    DOSTACYIMPORT(S, ...)\n\n    This function serves as a pipeline to import metadata for a VH Lab\n    experimental session, represented by the ndi.session.dir object S.\n\n    The import process is divided into several stages:\n    1.  Subject Information: Reads subject data using `subjectInfoTable`,\n        checks for existing subject documents in the session, and creates\n        new documents only for new subjects using `subjectMaker`.\n    2.  Stimulus Approaches: Reads epoch-specific approaches and purposes\n        using `approachMappingTable` and creates the corresponding NDI\n        documents using `stimulusDocMaker`.\n    3.  Treatments: (Placeholder) A section is reserved for importing\n        treatment data.\n\n    This function can also take name/value pairs that modify its behavior:\n    |------------------|----------------------------------------------------|\n    | 'Overwrite'      | A boolean (true/false) that determines whether to  |\n    | (false)          | overwrite existing documents. Default is false.    |\n    |------------------|----------------------------------------------------|\n\n    Example:\n        % Assuming 'mySession' is a valid ndi.session.dir object\n        mySession = ndi.session.dir('/path/to/vhlab/session');\n        ndi.setup.conv.vhlab.doStacyImport(mySession, 'Overwrite', true);\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bvhlab/fix_empty_records.m/","title":"ndi.setup.conv.vhlab.fix_empty_records","text":"<pre><code>  FIX_EMPTY_RECORDS\n\n  FIX_EMPTY_RECORDS(DIRNAME, N)\n\n  Neuter reference.txt files in directories that have fewer than N files.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bvhlab/importMeasuredDataCells.m/","title":"ndi.setup.conv.vhlab.importMeasuredDataCells","text":"<pre><code>  importMeasuredDataCells - import VH-lab style extracellular cells into NDI\n\n  B = IMPORTMEASUREDDATACELL(S)\n\n  S - an ndi.session object that is at the path of an old-school VH lab experiment\n  that can also be managed by dirstruct.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bvhlab/subjectInfoTable.m/","title":"ndi.setup.conv.vhlab.subjectInfoTable","text":"<pre><code>  SUBJECTINFOTABLE - Creates a single-row table with subject information for an NDI session.\n\n  T = SUBJECTINFOTABLE(S)\n\n  Creates a table with variables 'sessionPath', 'sessionID', 'subjectIdentifier',\n  'BiologicalSex', and 'species'.\n\n  This function reads the subject identifier from 'subject.txt' in the session\n  directory and combines it with constant values for sex and species. It also\n  includes the NDI session ID.\n\n  It takes an ndi.session.dir object 'S' as input.\n\n  Example:\n    % Assuming 'mySession' is a valid ndi.session.dir object\n    mySession = ndi.session.dir('/path/to/my/session');\n    info_table = subjectInfoTable(mySession);\n    disp(info_table);\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bconv/%2Bvhlab/treatmentTable.m/","title":"ndi.setup.conv.vhlab.treatmentTable","text":"<pre><code>  TREATMENTTABLE - Creates a table of experimental treatments for an NDI session.\n\n  T = TREATMENTTABLE(S)\n\n  Creates a table with variables 'treatment', 'stringValue', 'numericValue',\n  'subjectIdentifier', and 'sessionPath'. The table will contain multiple rows,\n  one for each treatment type.\n\n  This function performs the following steps:\n    1. Calculates the duration of grating stimulation from 'grating_training_run*.mat' files.\n    2. Reads the date of birth from 'dob.txt'.\n    3. Extracts the experiment date from the session directory name.\n    4. Reads the subject identifier from 'subject.txt'.\n\n  It takes an ndi.session.dir object 'S' as input.\n\n  Example:\n    % Assuming 'mySession' is a valid ndi.session.dir object\n    mySession = ndi.session.dir('/path/to/my/2018-07-01');\n    treat_table = treatmentTable(mySession);\n    disp(treat_table);\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/addDaqSystems.m/","title":"ndi.setup.daq.addDaqSystems","text":"<pre><code>  addDaqSystems - Add DAQ systems for a specified lab to an ndi session.\n\n    S = ndi.setup.daq.addDaqSystems(S, LABNAME)\n\n    Inputs:\n        S - An NDI session object\n        labName - The name of a lab with preconfigured DAQ systems (char)\n        force - A boolean flag indicating if DAQ systems should be\n                re-created if they already exists. When true, if a DAQ\n                system with a given name already exists, it is removed from\n                the session before it is re-created and added again.\n\n    Outputs:\n        S - An NDI session object\n\n    Note: Assumes the lab is present in the ndi_common/daq_systems folder.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/AngelucciStims.m/","title":"CLASS ndi.setup.daq.metadatareader.AngelucciStims","text":"<pre><code>  ANGELUCCISTIMS - a class for reading stims from Angelucci lab example data\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/AngelucciStims.m/#superclasses","title":"Superclasses","text":"<p>ndi.daq.metadatareader, ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/AngelucciStims.m/#properties","title":"Properties","text":"Property Description tab_separated_file_parameter identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/AngelucciStims.m/#methods","title":"Methods","text":"Method Description AngelucciStims Create a new multifunction DAQ object eq are 2 ndi.daq.metadatareader objects equal? get_ingested_document get an ingested document for a set of epochfiles id return the identifier of an DID.IDO object ingest_epochfiles create an ndi.document that describes the data that is read by an ndi.daq.metadatareader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata Read metadata parameters readmetadata_ingested Read metadata parameters from a session database readmetadatafromfile read in metadata from the file that is identified searchquery create a search for this ndi.daq.reader object unique_id Generate a unique ID number for DID databases (Static method)"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/AngelucciStims.m/#methods-help","title":"Methods help","text":"<p>AngelucciStims - Create a new multifunction DAQ object</p> <pre><code>D = NDI.SETUP.DAQ.METADATAREADER.ANGELUCCISTIMS()\n   or\n   D = NDI.SETUP.DAQ.METADATAREADER.ANGELUCCISTIMS(STIMDATA_MAT_FILE)\n\n   Creates a new ndi.daq.metadatareader object. If TSVFILE_REGEXPRESSION\n   is given, it indicates a regular expression to use to search EPOCHFILES\n   for a tab-separated-value text file that describes stimulus parameters.\n\n    Documentation for ndi.setup.daq.metadatareader.AngelucciStims/AngelucciStims\n       doc ndi.setup.daq.metadatareader.AngelucciStims\n</code></pre> <p>eq - are 2 ndi.daq.metadatareader objects equal?</p> <pre><code>TF = EQ(NDI_DAQMETADATAREADER_OBJ_A, NDI_DAQMETADATAREADER_OBJ_B)\n\n  TF is 1 if the two objects are of the same class and have the same properties.\n  TF is 0 otherwise.\n\nHelp for ndi.setup.daq.metadatareader.AngelucciStims/eq is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>get_ingested_document - get an ingested document for a set of epochfiles</p> <pre><code>D = GET_INGESTED_DOCUMENT(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES, S)\n\n  Returns empty if there is no such document or the single document if\n  there is such a document.\n\nHelp for ndi.setup.daq.metadatareader.AngelucciStims/get_ingested_document is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.setup.daq.metadatareader.AngelucciStims/id is inherited from superclass did.ido\n</code></pre> <p>ingest_epochfiles - create an ndi.document that describes the data that is read by an ndi.daq.metadatareader</p> <pre><code>D = INGEST_EPOCHFILES(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES)\n\n  Creates an ndi.document of type 'daqmetadatareader_epochdata_ingested' that contains the data\n  for an ndi.daq.metadatareaderobject. The document D is not added to any database.\n\nHelp for ndi.setup.daq.metadatareader.AngelucciStims/ingest_epochfiles is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.setup.daq.metadatareader.AngelucciStims.isvalid is inherited from superclass did.ido\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.daq.metadatareader object</p> <pre><code>DOC = NEWDOCUMENT(ndi.daq.metadatareader OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.daq.reader object.\n\nHelp for ndi.setup.daq.metadatareader.AngelucciStims/newdocument is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>readmetadata - Read metadata parameters</p> <pre><code>PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES)\n\n  Returns the parameters (cell array of structures) associated with the\n  stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES.\n\n  If the property 'tab_separated_file_parameter' is not empty, then EPOCHFILES will be searched for\n  files that match the regular expression in 'tab_separated_file_parameter'. The tab-separated-value\n  file should have the form:\n\n  STIMID&lt;tab&gt;PARAMETER1&lt;tab&gt;PARAMETER2&lt;tab&gt;PARAMETER3 (etc) &lt;newline&gt;\n  1&lt;tab&gt;VALUE1&lt;tab&gt;VALUE2&lt;tab&gt;VALUE3 (etc) &lt;newline&gt;\n  2&lt;tab&gt;VALUE1&lt;tab&gt;VALUE2&lt;tab&gt;VALUE3 (etc) &lt;newline&gt;\n   (etc)\n\n  For example, a stimulus file for an interoral cannula might be:\n  stimid&lt;tab&gt;substance1&lt;tab&gt;substance1_concentration&lt;newline&gt;\n  1&lt;tab&gt;Sodium chloride&lt;tab&gt;30e-3&lt;newline&gt;\n  2&lt;tab&gt;Sodium chloride&lt;tab&gt;300e-3&lt;newline&gt;\n  3&lt;tab&gt;Quinine&lt;tab&gt;30e-6&lt;newline&gt;\n  4&lt;tab&gt;Quinine&lt;tab&gt;300e-6&lt;newline&gt;\n\n  This function can be overridden in more specialized stimulus classes.\n\nHelp for ndi.setup.daq.metadatareader.AngelucciStims/readmetadata is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>readmetadata_ingested - Read metadata parameters from a session database</p> <pre><code>PARAMETERS = READMETADATA_INGESTED(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES, S)\n\n  Returns the parameters (cell array of structures) associated with the\n  stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES.\n  S is the ndi.session object associated with the data.\n\nHelp for ndi.setup.daq.metadatareader.AngelucciStims/readmetadata_ingested is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>readmetadatafromfile - read in metadata from the file that is identified</p> <pre><code>PARAMETERS = READMETADATAFROMFILE(NDI_DAQMETADATAREADER_ANGELUCCI_STIMS_OBJ, FILE)\n\n  Given a file that matches the metadata search criteria for an NDI_DAQMETADATAREADER_ANGELUCCI_STIMS\n  document, this function loads in the metadata.\n</code></pre> <p>searchquery - create a search for this ndi.daq.reader object</p> <pre><code>SQ = SEARCHQUERY(NDI_DAQMETADATAREADER_OBJ)\n\n  Creates a search query for the ndi.daq.metadatareader object.\n\nHelp for ndi.setup.daq.metadatareader.AngelucciStims/searchquery is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.setup.daq.metadatareader.AngelucciStims.unique_id is inherited from superclass did.ido\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/BriggsStims.m/","title":"CLASS ndi.setup.daq.metadatareader.BriggsStims","text":"<pre><code>  NDI_DAQMETADATAREADER_BRIGGSSTIMS - a class for reading stims from Briggs lab\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/BriggsStims.m/#superclasses","title":"Superclasses","text":"<p>ndi.daq.metadatareader, ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/BriggsStims.m/#properties","title":"Properties","text":"Property Description tab_separated_file_parameter identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/BriggsStims.m/#methods","title":"Methods","text":"Method Description BriggsStims Create a new multifunction DAQ object briggsStruct2stimulusStruct create a standardized stimulus from a Briggs structure briggsStruct2stimulusTiming extract stimulus timing information from Briggs stimulus structure eq are 2 ndi.daq.metadatareader objects equal? get_ingested_document get an ingested document for a set of epochfiles id return the identifier of an DID.IDO object ingest_epochfiles create an ndi.document that describes the data that is read by an ndi.daq.metadatareader isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.metadatareader object readmetadata Read metadata parameters readmetadata_ingested Read metadata parameters from a session database readmetadatafromfile read in metadata from the file that is identified searchquery create a search for this ndi.daq.reader object unique_id Generate a unique ID number for DID databases (Static method)"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bmetadatareader/BriggsStims.m/#methods-help","title":"Methods help","text":"<p>BriggsStims - Create a new multifunction DAQ object</p> <pre><code>D = NDI.SETUP.DAQ.METADATAREADER.BRIGGSSTIMS()\n   or\n   D = NDI.SETUP.DAQ.METADATAREADER.BRIGGSSTIMS(STIMDATA_MAT_FILE)\n\n   Creates a new ndi.daq.metadatareader object. If TSVFILE_REGEXPRESSION\n   is given, it indicates a regular expression to use to search EPOCHFILES\n   for a tab-separated-value text file that describes stimulus parameters.\n\n    Documentation for ndi.setup.daq.metadatareader.BriggsStims/BriggsStims\n       doc ndi.setup.daq.metadatareader.BriggsStims\n</code></pre> <p>briggsStruct2stimulusStruct - create a standardized stimulus from a Briggs structure</p> <pre><code>stimStructArray = ndi.daq.metadatareader.BriggsStims.briggsStruct2strimulusStruct(BRIGGSSTRUCT)\n\n  Create a cell array of stimulus parameters from a Briggs stimulus parameters.\n</code></pre> <p>briggsStruct2stimulusTiming - extract stimulus timing information from Briggs stimulus structure</p> <pre><code>[stimOn,stimOff,stimGratCycle] = ndi.daq.metadatareader.BriggsStims.briggsStruct2strimulusTiming(BRIGGSSTRUCT)\n\n  Returns the following:\n   stimOn  : stim onset times for each stimulus\n   stimOff : stim offset times for each stimulus\n   stimGratCycle : a cell array of grating cycle times that\n       belong to each stimulus\n</code></pre> <p>eq - are 2 ndi.daq.metadatareader objects equal?</p> <pre><code>TF = EQ(NDI_DAQMETADATAREADER_OBJ_A, NDI_DAQMETADATAREADER_OBJ_B)\n\n  TF is 1 if the two objects are of the same class and have the same properties.\n  TF is 0 otherwise.\n\nHelp for ndi.setup.daq.metadatareader.BriggsStims/eq is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>get_ingested_document - get an ingested document for a set of epochfiles</p> <pre><code>D = GET_INGESTED_DOCUMENT(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES, S)\n\n  Returns empty if there is no such document or the single document if\n  there is such a document.\n\nHelp for ndi.setup.daq.metadatareader.BriggsStims/get_ingested_document is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.setup.daq.metadatareader.BriggsStims/id is inherited from superclass did.ido\n</code></pre> <p>ingest_epochfiles - create an ndi.document that describes the data that is read by an ndi.daq.metadatareader</p> <pre><code>D = INGEST_EPOCHFILES(NDI_DAQMETADATAREADER_OBJ, EPOCHFILES)\n\n  Creates an ndi.document of type 'daqmetadatareader_epochdata_ingested' that contains the data\n  for an ndi.daq.metadatareaderobject. The document D is not added to any database.\n\nHelp for ndi.setup.daq.metadatareader.BriggsStims/ingest_epochfiles is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.setup.daq.metadatareader.BriggsStims.isvalid is inherited from superclass did.ido\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.daq.metadatareader object</p> <pre><code>DOC = NEWDOCUMENT(ndi.daq.metadatareader OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.daq.reader object.\n\nHelp for ndi.setup.daq.metadatareader.BriggsStims/newdocument is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>readmetadata - Read metadata parameters</p> <pre><code>PARAMETERS = READMETADATA(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES)\n\n  Returns the parameters (cell array of structures) associated with the\n  stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES.\n\n  If the property 'tab_separated_file_parameter' is not empty, then EPOCHFILES will be searched for\n  files that match the regular expression in 'tab_separated_file_parameter'. The tab-separated-value\n  file should have the form:\n\n  STIMID&lt;tab&gt;PARAMETER1&lt;tab&gt;PARAMETER2&lt;tab&gt;PARAMETER3 (etc) &lt;newline&gt;\n  1&lt;tab&gt;VALUE1&lt;tab&gt;VALUE2&lt;tab&gt;VALUE3 (etc) &lt;newline&gt;\n  2&lt;tab&gt;VALUE1&lt;tab&gt;VALUE2&lt;tab&gt;VALUE3 (etc) &lt;newline&gt;\n   (etc)\n\n  For example, a stimulus file for an interoral cannula might be:\n  stimid&lt;tab&gt;substance1&lt;tab&gt;substance1_concentration&lt;newline&gt;\n  1&lt;tab&gt;Sodium chloride&lt;tab&gt;30e-3&lt;newline&gt;\n  2&lt;tab&gt;Sodium chloride&lt;tab&gt;300e-3&lt;newline&gt;\n  3&lt;tab&gt;Quinine&lt;tab&gt;30e-6&lt;newline&gt;\n  4&lt;tab&gt;Quinine&lt;tab&gt;300e-6&lt;newline&gt;\n\n  This function can be overridden in more specialized stimulus classes.\n\nHelp for ndi.setup.daq.metadatareader.BriggsStims/readmetadata is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>readmetadata_ingested - Read metadata parameters from a session database</p> <pre><code>PARAMETERS = READMETADATA_INGESTED(NDI_DAQSYSTEM_STIMULUS_OBJ, EPOCHFILES, S)\n\n  Returns the parameters (cell array of structures) associated with the\n  stimulus or stimuli that were prepared to be presented in epoch with file list EPOCHFILES.\n  S is the ndi.session object associated with the data.\n\nHelp for ndi.setup.daq.metadatareader.BriggsStims/readmetadata_ingested is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>readmetadatafromfile - read in metadata from the file that is identified</p> <pre><code>PARAMETERS = READMETADATAFROMFILE(NDI_DAQMETADATAREADER_BRIGGS_STIMS_OBJ, FILE)\n\n  Given a file that matches the metadata search criteria for an NDI_DAQMETADATAREADER_BRIGGS_STIMS\n  document, this function loads in the metadata.\n</code></pre> <p>searchquery - create a search for this ndi.daq.reader object</p> <pre><code>SQ = SEARCHQUERY(NDI_DAQMETADATAREADER_OBJ)\n\n  Creates a search query for the ndi.daq.metadatareader object.\n\nHelp for ndi.setup.daq.metadatareader.BriggsStims/searchquery is inherited from superclass ndi.daq.metadatareader\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.setup.daq.metadatareader.BriggsStims.unique_id is inherited from superclass did.ido\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/angelucci_visstim.m/","title":"CLASS ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim","text":"<pre><code>  NDI_DAQREADER_MFDAQ_STIMULUS_ANGELUCCI_VISSTIM - Device object for Angelucci lab visual stimulus system\n\n  This device reads the 'stimData.mat' to obtain stimulus parameters and a *.ns4 file (digital events on ai1).\n\n  Channel name:   | Signal description:\n  ----------------|------------------------------------------\n  m1              | stimulus on/off\n  m2              | stimid\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/angelucci_visstim.m/#superclasses","title":"Superclasses","text":"<p>ndi.daq.reader.mfdaq.blackrock, ndi.daq.reader.mfdaq, ndi.daq.reader, ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/angelucci_visstim.m/#properties","title":"Properties","text":"Property Description identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/angelucci_visstim.m/#methods","title":"Methods","text":"Method Description angelucci_visstim Create a new multifunction DAQ object channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles return the file name that corresponds to the NEV/NSV files getchannelsepoch List the channels that are available on this device getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader ingested2epochs_t0t1_epochclock make a map of all ingested epochs to t0t1 and epochclock isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.reader object read_blackrock_headers read information from Blackrock Micro header files readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events or markers of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/angelucci_visstim.m/#methods-help","title":"Methods help","text":"<p>angelucci_visstim - Create a new multifunction DAQ object</p> <pre><code>D = NDI.SETUP.DAQ.READER.MFDAQ.STIMULUS.ANGELUCCI_VISSTIM(NAME, THEFILENAVIGATOR, DAQREADER)\n\n   Creates a new ndi.daq.system.mfdaq object with NAME, and FILENAVIGATOR.\n   This is an abstract class that is overridden by specific devices.\n\n    Documentation for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/angelucci_visstim\n       doc ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim\n</code></pre> <p>channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ?</p> <pre><code>[TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types()\n\n   Returns a cell array of possible channel types in TYPES, and a corresponding\n   short abbreviation in the cell array ABBREV.\n\n  ----------------------------------------------------------------------------\n  | CHANNEL TYPE       | ABBREV  | Description                               |\n  |--------------------|---------|-------------------------------------------|\n  | 'analog_in'        | 'ai'    | Analog input                              |\n  | 'analog_out'       | 'ao'    | Analog output                             |\n  | 'auxiliary_in'     | 'ax'    | Auxiliary channels                        |\n  | 'digital_in'       | 'di'    | Digital input                             |\n  | 'digital_out'      | 'do'    | Digital output                            |\n  | 'event'            | 'e'     | Event trigger (returns times, codes of    |\n  |                    |         |    event trigger activation)              |\n  | 'marker'           | 'mk'    | Mark channel (contains value at specified |\n  |                    |         |    times)                                 |\n  | 'text'             | 'tx'    | Text channel (contains text at specified  |\n  |                    |         |    times)\n  | 'time'             | 't'     | Time samples                              |\n  |--------------------|---------|-------------------------------------------|\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim.channel_types is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>channelsepoch2timechannelinfo - look up time channel info</p> <pre><code>TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER)\n\n  Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time\n  channel number that corresponds to the channel specified by CHANNELTYPE and\n  CHANNELNUMBER.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  For the generic ndi.daq.reader.mfdaq, this returns a single clock\n  type 'dev_local'time';\n\n  See also: ndi.time.clocktype\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/epochclock is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch</p> <pre><code>EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  See also: ndi.time.clocktype\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/epochclock_ingested is inherited from superclass ndi.daq.reader\n</code></pre> <p>eq - tests whether 2 ndi.daq.reader objects are equal</p> <pre><code>B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2)\n\n  Examines whether or not the ndi.daq.reader objects are equal.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/eq is inherited from superclass ndi.daq.reader\n</code></pre> <p>filenamefromepochfiles - return the file name that corresponds to the NEV/NSV files</p> <pre><code>[NEVFILES, NSVFILES] = FILENAMEFROMEPOCHFILES(FILENAME_ARRAY)\n\n  Examines the list of filenames in FILENAME_ARRAY (cell array of full path file strings) and determines which\n  ones have the extension '.nev' (neuro event file) and which have the extension '.ns#', where # is a number, or the source\n  data files.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim.filenamefromepochfiles is inherited from superclass ndi.daq.reader.mfdaq.blackrock\n</code></pre> <p>getchannelsepoch - List the channels that are available on this device</p> <pre><code>CHANNELS = GETCHANNELSEPOCH(THEDEV, EPOCHFILES)\n\n  This device produces the following channels in each epoch:\n  Channel name:   | Signal description:\n  ----------------|------------------------------------------\n  mk1             | stimulus on/off\n  mk2             | stimid\n</code></pre> <p>getchannelsepoch_ingested - List the channels that were sampled for this epoch</p> <pre><code>CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S)\n\n   Returns the channel list of acquired channels in these EPOCHFILES\n\n   The channels are of different types. In the below,\n   'n' is replaced with the channel number.\n   Type       | Description\n   ------------------------------------------------------\n   ain        | Analog input (e.g., ai1 is the first input channel)\n   din        | Digital input (e.g., di1 is the first input channel)\n   t          | Time - a time channel\n   axn        | Auxiliary inputs\n\n  CHANNELS is a structure list of all channels with fields:\n  -------------------------------------------------------\n  'name'             | The name of the channel (e.g., 'ai1')\n  'type'             | The type of data stored in the channel\n                     |    (e.g., 'analog_input', 'digital_input', 'image', 'timestamp')\n  'time_channel'     | The number of the time channel that contains the time information\n                     |    for the channel. Can be NaN when not applicable.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>getingesteddocument - return the ndi.document with the data for an ingested epoch</p> <pre><code>D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S)\n\n  Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for\n  the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch.\n  S is the ndi.session for the dataset.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/getingesteddocument is inherited from superclass ndi.daq.reader\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/id is inherited from superclass did.ido\n</code></pre> <p>ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader</p> <pre><code>D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID)\n\n  Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data\n  for an ndi.daq.reader object. The document D is not added to any database.\n\n  Example:\n     D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id);\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>ingested2epochs_t0t1_epochclock - make a map of all ingested epochs to t0t1 and epochclock</p> <pre><code>M = ingested2epochs_epochprobemaps_t0t1_epochclock(NDI_DAQREADER_OBJ, S)\n\n  Examines the ingested epochfiles and returns a structure of maps:\n    M.t0t1 maps epochid to t0t1\n    M.epochclock maps epochid to epochclock\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/ingested2epochs_t0t1_epochclock is inherited from superclass ndi.daq.reader\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim.isvalid is inherited from superclass did.ido\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.daq.reader object</p> <pre><code>DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.daq.reader object.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/newdocument is inherited from superclass ndi.daq.reader\n</code></pre> <p>read_blackrock_headers - read information from Blackrock Micro header files</p> <pre><code>[NS_H, NEV_H, HEADERS] = READ_BLACKROCK_HEADERS(NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ, EPOCHFILES, [CHANNELTYPE, CHANNELS])\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/read_blackrock_headers is inherited from superclass ndi.daq.reader.mfdaq.blackrock\n</code></pre> <p>readchannels_epochsamples - read the data based on specified channels</p> <pre><code>DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1)\n\n   CHANNELTYPE is the type of channel to read (cell array of strings, one per channel)\n\n   CHANNEL is a vector of the channel numbers to read, beginning from 1\n\n   EPOCH is set of epoch files\n\n   DATA is the channel data (each column contains data from an individual channel)\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/readchannels_epochsamples is inherited from superclass ndi.daq.reader.mfdaq.blackrock\n</code></pre> <p>readchannels_epochsamples_ingested - read the data based on specified channels</p> <pre><code>DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ...\n     CHANNEL, EPOCHFILES, S0, S1, S)\n\n   CHANNELTYPE is the type of channel to read\n\n   CHANNEL is a vector of the channel numbers to read, beginning from 1\n\n   EPOCHFILES is the set of epochfiles to read from\n\n   S0 is the sample where reading should start, and S1 is sample where reading should end.\n\n   DATA will have one column per channel.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples - read events or markers of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS,DATA] = READEVENTS_EPOCHSAMPLES(SELF, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1)\n\n   SELF is the NDI_DAQSYSTEM_MFDAQ_STIMULUS_ANGELUCCI_VISSTIM object.\n\n   CHANNELTYPE is a cell array of strings describing the the type(s) of channel(s) to read\n   ('event','marker', etc)\n\n   CHANNEL is a vector with the identity of the channel(s) to be read.\n\n   EPOCH is the cell array of file names associated with an epoch\n\n   DATA is a two-column vector; the first column has the time of the event. The second\n   column indicates the marker code. In the case of 'events', this is just 1. If more than one channel\n   is requested, DATA is returned as a cell array, one entry per channel.\n</code></pre> <p>readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ...\n      CHANNEL, EPOCHFILES, T0, T1)\n\n   Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number\n   of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is\n   also a column of a type that depends on the type of event that is read.  If the number\n   of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell\n   arrays, with 1 column per channel.\n\n   CHANNELTYPE is a cell array of strings, describing the type of each channel to read:\n       'event'  - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for\n                     each timestamp\n       'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the\n                     data associated with the marker (type double)\n       'text'   - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of\n                     character arrays, 1 per event\n       'dep'    - Create events from a digital channel with positive transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are 1\n       'dimp'   - Create events from a digital channel by finding impulses that exhibit\n                     positive then negative transitions. TIMESTAMPS mark the occurrence\n                     of each event, and DATA indicates whether the event is a positive\n                     transition (1) or negative (-1) transition.\n       'den'    - Create events from a digital channel with negative transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are -1.\n       'dimn'   - Create events from a digital channel by finding impulses that exhibit\n                     negative then positive transitions. TIMESTAMPS mark the occurrence of\n                     each event, and DATA indicates whether the event is a negative\n                     transition (1) or a positive transition (-1).\n\n   CHANNEL is a vector with the identity(ies) of the channel(s) to be read.\n\n   EPOCHSFILES is a cell array of full path file names\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples_native - read events or markers of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(MYDEV, CHANNELTYPE, CHANNEL, ...\n      EPOCHFILES, T0, T1)\n\n   CHANNELTYPE is the type of channel to read\n   ('event','marker', etc). It must be a string (not a cell array of strings).\n\n   CHANNEL is a vector with the identity of the channel(s) to be read.\n\n   EPOCH is the epoch number or epochID\n\n   T is a two-column vector; the first column has the time of the event. The second\n   column indicates the marker code. In the case of 'events', this is just 1. If more\n   than one channel is requested, DATA is returned as a cell array, one entry per channel.\n\n   TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to\n   epoch N at time 0 as the reference.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/readevents_epochsamples_native is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL</p> <pre><code>SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL)\n  CHANNELTYPE can be either a string or a cell array of\n  strings the same length as the vector CHANNEL.\n  If CHANNELTYPE is a single string, then it is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n\n  SR is the list of sample rate from specified channels\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/samplerate is inherited from superclass ndi.daq.reader.mfdaq.blackrock\n</code></pre> <p>samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL</p> <pre><code>SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S)\n\n  SR is an array of sample rates from the specified channels\n\n  CHANNELTYPE can be either a string or a cell array of\n  strings the same length as the vector CHANNEL.\n  If CHANNELTYPE is a single string, then it is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>searchquery - create a search for this ndi.daq.reader object</p> <pre><code>SQ = SEARCHQUERY(NDI_DAQREADER_OBJ)\n\n  Creates a search query for the ndi.daq.reader object.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/searchquery is inherited from superclass ndi.daq.reader\n</code></pre> <p>standardize_channel_types - return standard channel type names</p> <pre><code>STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES)\n\n  Given a cell array of strings of CHANNELTYPES, replace any abbreviations with\n  with the standard channel type name in ndi.daq.reader.mfdaq.channel_types()\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch</p> <pre><code>T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/t0_t1 is inherited from superclass ndi.daq.reader.mfdaq.blackrock\n</code></pre> <p>t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch</p> <pre><code>T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/t0_t1_ingested is inherited from superclass ndi.daq.reader\n</code></pre> <p>underlying_datatype - get the underlying data type for a channel in an epoch</p> <pre><code>[DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL)\n\n  Return the underlying datatype for the requested channel.\n\n  DATATYPE is a type that is suitable for passing to FREAD or FWRITE\n   (e.g., 'float64', 'uint16', etc. See help fread.)\n\n  P is a ,atrix of polynomials that converts between the double data that is returned by\n  READCHANNEL. RETURNED_DATA = (RAW_DATA+P(i,1))*P(i,2)+(RAW_DATA+P(i,1))*P(i,3) ...\n  There is one row of P for each entry of CHANNEL.\n\n  DATASIZE is the sample size in bits.\n\n  CHANNELTYPE must be a string. It is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/underlying_datatype is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim.unique_id is inherited from superclass did.ido\n</code></pre> <p>verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk</p> <pre><code>B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_MFDAQ_BLACKROCK_OBJ, EPOCHPROBEMAP, EPOCHFILES)\n\n  Examines the NDI_EPOCHPROBEMAP_DAQREADER EPOCHPROBEMAP and determines if it is valid for the given device\n  with epoch files EPOCHFILES.\n\n  See also: ndi.daq.reader, NDI_EPOCHPROBEMAP_DAQREADER\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.angelucci_visstim/verifyepochprobemap is inherited from superclass ndi.daq.reader.mfdaq.blackrock\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/nielsenvisintan.m/","title":"CLASS ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan","text":"<pre><code>  NDI_DAQREADER_MFDAQ_STIMULUS_NIELSENVISINTAN - Device object for vhlab visual stimulus computer\n\n  This device reads the 'stimtimes.txt', 'verticalblanking.txt', 'stims.mat', and 'spike2data.smr' files\n  that are present in directories where a VHLAB stimulus computer (running NewStim/RunExperiment)\n  has produced triggers that have been acquired on a CED Spike2 system running the VHLAB Spike2 script.\n\n  This device produces the following event channels in each epoch. They are not read from the CED SMR\n  file but instead are read from the .txt files that are generated by the vhlab scripts.\n\n  Channel name:   | Signal description:\n  ----------------|------------------------------------------\n  mk1             | stimulus on/off\n  mk2             | stimid\n  mk3             | stimulus open/close (begin background/end background)\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/nielsenvisintan.m/#superclasses","title":"Superclasses","text":"<p>ndi.daq.reader.mfdaq.intan, ndi.daq.reader.mfdaq, ndi.daq.reader, ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/nielsenvisintan.m/#properties","title":"Properties","text":"Property Description identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/nielsenvisintan.m/#methods","title":"Methods","text":"Method Description channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal filenamefromepochfiles return the file name that corresponds to the RHD file, or directory in case of directory getchannelsepoch List the channels that are available on this device getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader ingested2epochs_t0t1_epochclock make a map of all ingested epochs to t0t1 and epochclock intanheadertype2mfdaqchanneltype Convert between Intan headers and the ndi.daq.reader.mfdaq channel types intanname2mfdaqname Converts a channel name from Intan native format to ndi.daq.reader.mfdaq format. isvalid is a unique ID number valid? mfdaqchanneltype2intanchanneltype convert the channel type from generic format of multifuncdaqchannel mfdaqchanneltype2intanfreqheader Return header name with frequency information for channel type mfdaqchanneltype2intanheadertype Convert between the ndi.daq.reader.mfdaq channel types and Intan headers newdocument create a new ndi.document for an ndi.daq.reader object nielsenvisintan Create a new multifunction DAQ object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/nielsenvisintan.m/#methods-help","title":"Methods help","text":"<p>channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ?</p> <pre><code>[TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types()\n\n   Returns a cell array of possible channel types in TYPES, and a corresponding\n   short abbreviation in the cell array ABBREV.\n\n  ----------------------------------------------------------------------------\n  | CHANNEL TYPE       | ABBREV  | Description                               |\n  |--------------------|---------|-------------------------------------------|\n  | 'analog_in'        | 'ai'    | Analog input                              |\n  | 'analog_out'       | 'ao'    | Analog output                             |\n  | 'auxiliary_in'     | 'ax'    | Auxiliary channels                        |\n  | 'digital_in'       | 'di'    | Digital input                             |\n  | 'digital_out'      | 'do'    | Digital output                            |\n  | 'event'            | 'e'     | Event trigger (returns times, codes of    |\n  |                    |         |    event trigger activation)              |\n  | 'marker'           | 'mk'    | Mark channel (contains value at specified |\n  |                    |         |    times)                                 |\n  | 'text'             | 'tx'    | Text channel (contains text at specified  |\n  |                    |         |    times)\n  | 'time'             | 't'     | Time samples                              |\n  |--------------------|---------|-------------------------------------------|\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.channel_types is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>channelsepoch2timechannelinfo - look up time channel info</p> <pre><code>TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER)\n\n  Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time\n  channel number that corresponds to the channel specified by CHANNELTYPE and\n  CHANNELNUMBER.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_STIMULUS_NIELSENVISINTAN_OBJ, EPOCHFILES)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  This returns a single clock type 'dev_local'time';\n\n  See also: ndi.time.clocktype\n</code></pre> <p>epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch</p> <pre><code>EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  See also: ndi.time.clocktype\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/epochclock_ingested is inherited from superclass ndi.daq.reader\n</code></pre> <p>eq - tests whether 2 ndi.daq.reader objects are equal</p> <pre><code>B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2)\n\n  Examines whether or not the ndi.daq.reader objects are equal.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/eq is inherited from superclass ndi.daq.reader\n</code></pre> <p>filenamefromepochfiles - return the file name that corresponds to the RHD file, or directory in case of directory</p> <pre><code>[FILENAME, PARENTDIR, ISDIRECTORY] = FILENAMEFROMEPOCHFILES(NDI_DAQREADER_MFDAQ_INTAN_OBJ, FILENAME_ARRAY)\n\n  Examines the list of filenames in FILENAME_ARRAY (cell array of full path file strings) and determines which\n  one is an RHD data file. If the 1-file-per-channel mode is used, then PARENTDIR is the name of the directory\n  that holds the data files and ISDIRECTORY is 1.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/filenamefromepochfiles is inherited from superclass ndi.daq.reader.mfdaq.intan\n</code></pre> <p>getchannelsepoch - List the channels that are available on this device</p> <pre><code>CHANNELS = GETCHANNELSEPOCH(THEDEV, EPOCHFILES)\n\n  This device produces the following channels in each epoch:\n  Channel name:   | Signal description:\n  ----------------|------------------------------------------\n  mk1             | stimulus on/off\n  mk2             | stimid\n  mk3             | stimulus open/close\n</code></pre> <p>getchannelsepoch_ingested - List the channels that were sampled for this epoch</p> <pre><code>CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S)\n\n   Returns the channel list of acquired channels in these EPOCHFILES\n\n   The channels are of different types. In the below,\n   'n' is replaced with the channel number.\n   Type       | Description\n   ------------------------------------------------------\n   ain        | Analog input (e.g., ai1 is the first input channel)\n   din        | Digital input (e.g., di1 is the first input channel)\n   t          | Time - a time channel\n   axn        | Auxiliary inputs\n\n  CHANNELS is a structure list of all channels with fields:\n  -------------------------------------------------------\n  'name'             | The name of the channel (e.g., 'ai1')\n  'type'             | The type of data stored in the channel\n                     |    (e.g., 'analog_input', 'digital_input', 'image', 'timestamp')\n  'time_channel'     | The number of the time channel that contains the time information\n                     |    for the channel. Can be NaN when not applicable.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>getingesteddocument - return the ndi.document with the data for an ingested epoch</p> <pre><code>D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S)\n\n  Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for\n  the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch.\n  S is the ndi.session for the dataset.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/getingesteddocument is inherited from superclass ndi.daq.reader\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/id is inherited from superclass did.ido\n</code></pre> <p>ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader</p> <pre><code>D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID)\n\n  Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data\n  for an ndi.daq.reader object. The document D is not added to any database.\n\n  Example:\n     D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id);\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>ingested2epochs_t0t1_epochclock - make a map of all ingested epochs to t0t1 and epochclock</p> <pre><code>M = ingested2epochs_epochprobemaps_t0t1_epochclock(NDI_DAQREADER_OBJ, S)\n\n  Examines the ingested epochfiles and returns a structure of maps:\n    M.t0t1 maps epochid to t0t1\n    M.epochclock maps epochid to epochclock\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/ingested2epochs_t0t1_epochclock is inherited from superclass ndi.daq.reader\n</code></pre> <p>intanheadertype2mfdaqchanneltype - Convert between Intan headers and the ndi.daq.reader.mfdaq channel types</p> <pre><code>CHANNELTYPE = INTANHEADERTYPE2MFDAQCHANNELTYPE(INTANCHANNELTYPE)\n\n  Given an Intan header file type, returns the standard ndi.daq.reader.mfdaq channel type\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.intanheadertype2mfdaqchanneltype is inherited from superclass ndi.daq.reader.mfdaq.intan\n</code></pre> <p>intanname2mfdaqname - Converts a channel name from Intan native format to ndi.daq.reader.mfdaq format.</p> <pre><code>MFDAQNAME = INTANNAME2MFDAQNAME(ndi.daq.reader.mfdaq.intan, MFDAQTYPE, NAME)\n\n  Given an Intan native channel name (e.g., 'A-000') in NAME and a\n  ndi.daq.reader.mfdaq channel type string (see NDI_DEVICE_MFDAQ), this function\n  produces an ndi.daq.reader.mfdaq channel name (e.g., 'ai1').\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.intanname2mfdaqname is inherited from superclass ndi.daq.reader.mfdaq.intan\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.isvalid is inherited from superclass did.ido\n</code></pre> <p>mfdaqchanneltype2intanchanneltype - convert the channel type from generic format of multifuncdaqchannel</p> <pre><code>to the specific intan channel type\n\n     INTANCHANNELTYPE = MFDAQCHANNELTYPE2INTANCHANNELTYPE(CHANNELTYPE)\n\n      the intanchanneltype is a string of the specific channel type for intan\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.mfdaqchanneltype2intanchanneltype is inherited from superclass ndi.daq.reader.mfdaq.intan\n</code></pre> <p>mfdaqchanneltype2intanfreqheader - Return header name with frequency information for channel type</p> <pre><code>HEADERNAME = MFDAQCHANNELTYPE2INTANFREQHEADER(CHANNELTYPE)\n\n   Given an NDI_DEV_MFDAQ channel type string, this function returns the associated fieldname\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.mfdaqchanneltype2intanfreqheader is inherited from superclass ndi.daq.reader.mfdaq.intan\n</code></pre> <p>mfdaqchanneltype2intanheadertype - Convert between the ndi.daq.reader.mfdaq channel types and Intan headers</p> <pre><code>INTANCHANHEADERTYPE = MFDAQCHANNELTYPE2INTANHEADERTYPE(CHANNELTYPE)\n\n  Given a standard ndi.daq.reader.mfdaq channel type, returns the name of the type as\n  indicated in Intan header files.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.mfdaqchanneltype2intanheadertype is inherited from superclass ndi.daq.reader.mfdaq.intan\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.daq.reader object</p> <pre><code>DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.daq.reader object.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/newdocument is inherited from superclass ndi.daq.reader\n</code></pre> <p>nielsenvisintan - Create a new multifunction DAQ object</p> <pre><code>D = ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan(NAME, THEFILENAVIGATOR, DAQREADER)\n\n   Creates a new ndi.daq.system.mfdaq object with NAME, and FILENAVIGATOR.\n   This is an abstract class that is overridden by specific devices.\n\n    Documentation for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/nielsenvisintan\n       doc ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan\n</code></pre> <p>readchannels_epochsamples - read the data based on specified channels</p> <pre><code>DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1)\n\n   CHANNELTYPE is the type of channel to read (cell array of strings, one per\n      channel, or single string for all channels)\n\n   CHANNEL is a vector of the channel numbers to read, beginning from 1\n\n   EPOCH is set of epoch files\n\n   DATA is the channel data (each column contains data from an individual channel)\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/readchannels_epochsamples is inherited from superclass ndi.daq.reader.mfdaq.intan\n</code></pre> <p>readchannels_epochsamples_ingested - read the data based on specified channels</p> <pre><code>DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ...\n     CHANNEL, EPOCHFILES, S0, S1, S)\n\n   CHANNELTYPE is the type of channel to read\n\n   CHANNEL is a vector of the channel numbers to read, beginning from 1\n\n   EPOCHFILES is the set of epochfiles to read from\n\n   S0 is the sample where reading should start, and S1 is sample where reading should end.\n\n   DATA will have one column per channel.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ...\n      EPOCHFILES, T0, T1)\n\n   Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number\n   of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is\n   also a column of a type that depends on the type of event that is read.  If the number\n   of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell\n   arrays, with 1 column per channel.\n\n   CHANNELTYPE is a cell array of strings, describing the type of each channel to read:\n       'event'  - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for\n                     each timestamp\n       'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the\n                     data associated with the marker (type double)\n       'text'   - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of\n                     character arrays, 1 per event\n       'dep'    - Create events from a digital channel with positive transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are 1\n       'dimp'   - Create events from a digital channel by finding impulses that exhibit\n                     positive then negative transitions. TIMESTAMPS mark the occurrence\n                     of each event, and DATA indicates whether the event is a positive\n                     transition (1) or negative (-1) transition.\n       'den'    - Create events from a digital channel with negative transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are -1.\n       'dimn'   - Create events from a digital channel by finding impulses that exhibit\n                     negative then positive transitions. TIMESTAMPS mark the occurrence of\n                     each event, and DATA indicates whether the event is a negative\n                     transition (1) or a positive transition (-1).\n\n   CHANNEL is a vector with the identity(ies) of the channel(s) to be read.\n\n   EPOCHSFILES is a cell array of full path file names\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ...\n      CHANNEL, EPOCHFILES, T0, T1)\n\n   Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number\n   of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is\n   also a column of a type that depends on the type of event that is read.  If the number\n   of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell\n   arrays, with 1 column per channel.\n\n   CHANNELTYPE is a cell array of strings, describing the type of each channel to read:\n       'event'  - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for\n                     each timestamp\n       'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the\n                     data associated with the marker (type double)\n       'text'   - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of\n                     character arrays, 1 per event\n       'dep'    - Create events from a digital channel with positive transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are 1\n       'dimp'   - Create events from a digital channel by finding impulses that exhibit\n                     positive then negative transitions. TIMESTAMPS mark the occurrence\n                     of each event, and DATA indicates whether the event is a positive\n                     transition (1) or negative (-1) transition.\n       'den'    - Create events from a digital channel with negative transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are -1.\n       'dimn'   - Create events from a digital channel by finding impulses that exhibit\n                     negative then positive transitions. TIMESTAMPS mark the occurrence of\n                     each event, and DATA indicates whether the event is a negative\n                     transition (1) or a positive transition (-1).\n\n   CHANNEL is a vector with the identity(ies) of the channel(s) to be read.\n\n   EPOCHSFILES is a cell array of full path file names\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples_native - read events or markers of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(SELF, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1)\n\n   SELF is the NDI_DAQSYSTEM_MFDAQ_STIMULUS_NIELSENVISINTAN object.\n\n   CHANNELTYPE is a cell array of strings describing the the type(s) of channel(s) to read\n   ('event','marker', etc). If CHANNELTYPE is a string, it is\n   assumed to apply to all channels.\n\n   CHANNEL is a vector with the identity of the channel(s) to be read.\n\n   EPOCH is the cell array of file names associated with an epoch\n\n   DATA is a two-column vector; the first column has the time of the event. The second\n   column indicates the marker code. In the case of 'events', this is just 1. If more than one channel\n   is requested, DATA is returned as a cell array, one entry per channel.\n</code></pre> <p>samplerate - **</p> <pre><code>SAMPLERATE - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL\n\n  SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL)\n\n  SR is an array of sample rates from the specified channels\n\n  so, these are all events, and it doesn't much matter, so\n  let's make a guess that should apply well in all cases\n</code></pre> <p>samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL</p> <pre><code>SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S)\n\n  SR is an array of sample rates from the specified channels\n\n  CHANNELTYPE can be either a string or a cell array of\n  strings the same length as the vector CHANNEL.\n  If CHANNELTYPE is a single string, then it is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>searchquery - create a search for this ndi.daq.reader object</p> <pre><code>SQ = SEARCHQUERY(NDI_DAQREADER_OBJ)\n\n  Creates a search query for the ndi.daq.reader object.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/searchquery is inherited from superclass ndi.daq.reader\n</code></pre> <p>standardize_channel_types - return standard channel type names</p> <pre><code>STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES)\n\n  Given a cell array of strings of CHANNELTYPES, replace any abbreviations with\n  with the standard channel type name in ndi.daq.reader.mfdaq.channel_types()\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch</p> <pre><code>T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/t0_t1 is inherited from superclass ndi.daq.reader.mfdaq.intan\n</code></pre> <p>t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch</p> <pre><code>T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/t0_t1_ingested is inherited from superclass ndi.daq.reader\n</code></pre> <p>underlying_datatype - get the underlying data type for a channel in an epoch</p> <pre><code>[DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL)\n\n  Return the underlying datatype for the requested channel.\n\n  DATATYPE is a type that is suitable for passing to FREAD or FWRITE\n   (e.g., 'float64', 'uint16', etc. See help fread.)\n\n  P is a polynomial that converts between the double data that is returned by\n  READCHANNEL. RETURNED_DATA = (RAW_DATA+P(1))*P(2)+(RAW_DATA+P(1))*P(3) ...\n\n  DATASIZE is the sample size in bits.\n\n  CHANNELTYPE must be a string. It is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/underlying_datatype is inherited from superclass ndi.daq.reader.mfdaq.intan\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan.unique_id is inherited from superclass did.ido\n</code></pre> <p>verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk</p> <pre><code>B = VERIFYEPOCHPROBEMAP(NDI_DAQREADER_MFDAQ_INTAN_OBJ, EPOCHPROBEMAP, EPOCHFILES)\n\n  Examines the NDI_EPOCHPROBEMAP_DAQREADER EPOCHPROBEMAP and determines if it is valid for the given device\n  with epoch files EPOCHFILES.\n\n  See also: ndi.daq.reader, NDI_EPOCHPROBEMAP_DAQREADER\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.nielsenvisintan/verifyepochprobemap is inherited from superclass ndi.daq.reader.mfdaq.intan\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/vhlabvisspike2.m/","title":"CLASS ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2","text":"<pre><code>  NDI_DAQREADER_MFDAQ_STIMULUS_VHLABVISSPIKE2 - Device object for vhlab visual stimulus computer\n\n  This device reads the 'stimtimes.txt', 'verticalblanking.txt', 'stims.mat', and 'spike2data.smr' files\n  that are present in directories where a VHLAB stimulus computer (running NewStim/RunExperiment)\n  has produced triggers that have been acquired on a CED Spike2 system running the VHLAB Spike2 script.\n\n  This device produces the following event channels in each epoch. They are not read from the CED SMR\n  file but instead are read from the .txt files that are generated by the vhlab scripts.\n\n  Channel name:   | Signal description:\n  ----------------|------------------------------------------\n  mk1             | stimulus on/off\n  mk2             | stimid\n  e1              | frame trigger\n  e2              | vertical refresh trigger\n  e3              | pretime trigger\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/vhlabvisspike2.m/#superclasses","title":"Superclasses","text":"<p>ndi.daq.reader.mfdaq.cedspike2, ndi.daq.reader.mfdaq, ndi.daq.reader, ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/vhlabvisspike2.m/#properties","title":"Properties","text":"Property Description identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/vhlabvisspike2.m/#methods","title":"Methods","text":"Method Description cedspike2filelist2smrfile Identify the .SMR file out of a file list cedspike2headertype2mfdaqchanneltype Convert between Intan headers and the ndi.daq.system.mfdaq channel types channel_types what channel types are possible in an ndi.daq.reader.mfdaq ? channelsepoch2timechannelinfo look up time channel info epochclock return the ndi.time.clocktype objects for an epoch epochclock_ingested return the ndi.time.clocktype objects for an ingested epoch eq tests whether 2 ndi.daq.reader objects are equal getchannelsepoch List the channels that are available on this device getchannelsepoch_ingested List the channels that were sampled for this epoch getingesteddocument return the ndi.document with the data for an ingested epoch id return the identifier of an DID.IDO object ingest_epochfiles create an document that describes the data read by an ndi.daq.reader ingested2epochs_t0t1_epochclock make a map of all ingested epochs to t0t1 and epochclock isvalid is a unique ID number valid? newdocument create a new ndi.document for an ndi.daq.reader object readchannels_epochsamples read the data based on specified channels readchannels_epochsamples_ingested read the data based on specified channels readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_ingested read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate samplerate_ingested GET THE SAMPLE RATE FOR SPECIFIC CHANNEL searchquery create a search for this ndi.daq.reader object standardize_channel_types return standard channel type names t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch t0_t1_ingested return the t0_t1 (beginning and end) epoch times for an ingested epoch underlying_datatype get the underlying data type for a channel in an epoch unique_id Generate a unique ID number for DID databases (Static method) verifyepochprobemap Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk vhlabvisspike2 Create a new multifunction DAQ object"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Breader/%2Bmfdaq/%2Bstimulus/vhlabvisspike2.m/#methods-help","title":"Methods help","text":"<p>cedspike2filelist2smrfile - Identify the .SMR file out of a file list</p> <pre><code>FILENAME = CEDSPIKE2FILELIST2SMRFILE(FILELIST)\n\n  Given a cell array of strings FILELIST with full-path file names,\n  this function identifies the first file with an extension '.smr' (case insensitive)\n  and returns the result in FILENAME (full-path file name).\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.cedspike2filelist2smrfile is inherited from superclass ndi.daq.reader.mfdaq.cedspike2\n</code></pre> <p>cedspike2headertype2mfdaqchanneltype - Convert between Intan headers and the ndi.daq.system.mfdaq channel types</p> <pre><code>CHANNELTYPE = CEDSPIKE2HEADERTYPE2MFDAQCHANNELTYPE(CEDSPIKE2CHANNELTYPE)\n\n  Given an Intan header file type, returns the standard ndi.daq.system.mfdaq channel type\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.cedspike2headertype2mfdaqchanneltype is inherited from superclass ndi.daq.reader.mfdaq.cedspike2\n</code></pre> <p>channel_types - what channel types are possible in an ndi.daq.reader.mfdaq ?</p> <pre><code>[TYPES, ABBREV] = ndi.daq.reader.mfdaq.channel_types()\n\n   Returns a cell array of possible channel types in TYPES, and a corresponding\n   short abbreviation in the cell array ABBREV.\n\n  ----------------------------------------------------------------------------\n  | CHANNEL TYPE       | ABBREV  | Description                               |\n  |--------------------|---------|-------------------------------------------|\n  | 'analog_in'        | 'ai'    | Analog input                              |\n  | 'analog_out'       | 'ao'    | Analog output                             |\n  | 'auxiliary_in'     | 'ax'    | Auxiliary channels                        |\n  | 'digital_in'       | 'di'    | Digital input                             |\n  | 'digital_out'      | 'do'    | Digital output                            |\n  | 'event'            | 'e'     | Event trigger (returns times, codes of    |\n  |                    |         |    event trigger activation)              |\n  | 'marker'           | 'mk'    | Mark channel (contains value at specified |\n  |                    |         |    times)                                 |\n  | 'text'             | 'tx'    | Text channel (contains text at specified  |\n  |                    |         |    times)\n  | 'time'             | 't'     | Time samples                              |\n  |--------------------|---------|-------------------------------------------|\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.channel_types is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>channelsepoch2timechannelinfo - look up time channel info</p> <pre><code>TC = CHANNELSEPOCH2TIMECHANNELINFO(CHANNELSEPOCH, CHANNELTYPE, CHANNELNUMBER)\n\n  Given a CHANNELSEPOCH struct returned from GETCHANNELSEPOCH, find the time\n  channel number that corresponds to the channel specified by CHANNELTYPE and\n  CHANNELNUMBER.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.channelsepoch2timechannelinfo is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>epochclock - return the ndi.time.clocktype objects for an epoch</p> <pre><code>EC = EPOCHCLOCK(NDI_DAQREADER_MFDAQ_STIMULUS_VHLABVISSPIKE2_OBJ, EPOCHFILES)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  This returns a single clock type 'dev_local'time';\n\n  See also: ndi.time.clocktype\n</code></pre> <p>epochclock_ingested - return the ndi.time.clocktype objects for an ingested epoch</p> <pre><code>EC = EPOCHCLOCK_INGESTED(NDI_DAQREADER_OBJ, EPOCHFILES, S)\n\n  Return the clock types available for this epoch as a cell array\n  of ndi.time.clocktype objects (or sub-class members).\n\n  See also: ndi.time.clocktype\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/epochclock_ingested is inherited from superclass ndi.daq.reader\n</code></pre> <p>eq - tests whether 2 ndi.daq.reader objects are equal</p> <pre><code>B = EQ(NDI_DAQREADER_OBJ1, NDI_DAQREADER_OBJ2)\n\n  Examines whether or not the ndi.daq.reader objects are equal.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/eq is inherited from superclass ndi.daq.reader\n</code></pre> <p>getchannelsepoch - List the channels that are available on this device</p> <pre><code>CHANNELS = GETCHANNELSEPOCH(THEDEV, EPOCHFILES)\n\n  This device produces the following channels in each epoch:\n  Channel name:   | Signal description:\n  ----------------|------------------------------------------\n  mk1             | stimulus on/off\n  mk2             | stimid\n  mk3             | stimulus open/close\n  e1              | frame trigger\n  e2              | vertical refresh trigger\n  e3              | pretime trigger\n</code></pre> <p>getchannelsepoch_ingested - List the channels that were sampled for this epoch</p> <pre><code>CHANNELS = GETCHANNELSEPOCH_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S)\n\n   Returns the channel list of acquired channels in these EPOCHFILES\n\n   The channels are of different types. In the below,\n   'n' is replaced with the channel number.\n   Type       | Description\n   ------------------------------------------------------\n   ain        | Analog input (e.g., ai1 is the first input channel)\n   din        | Digital input (e.g., di1 is the first input channel)\n   t          | Time - a time channel\n   axn        | Auxiliary inputs\n\n  CHANNELS is a structure list of all channels with fields:\n  -------------------------------------------------------\n  'name'             | The name of the channel (e.g., 'ai1')\n  'type'             | The type of data stored in the channel\n                     |    (e.g., 'analog_input', 'digital_input', 'image', 'timestamp')\n  'time_channel'     | The number of the time channel that contains the time information\n                     |    for the channel. Can be NaN when not applicable.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/getchannelsepoch_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>getingesteddocument - return the ndi.document with the data for an ingested epoch</p> <pre><code>D = GETINGESTEDDOCUMENT(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, S)\n\n  Returns the document D that contains the ingested ndi.daq.reader.mfdaq data for\n  the epoch described by EPOCHFILES. EPOCHFILES should be an ingested epoch.\n  S is the ndi.session for the dataset.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/getingesteddocument is inherited from superclass ndi.daq.reader\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/id is inherited from superclass did.ido\n</code></pre> <p>ingest_epochfiles - create an document that describes the data read by an ndi.daq.reader</p> <pre><code>D = INGEST_EPOCHFILES(NDI_DAQREADER_OBJ, EPOCHFILES, EPOCH_ID)\n\n  Creates an ndi.document of type 'daqreader_epochdata_ingested' that contains the data\n  for an ndi.daq.reader object. The document D is not added to any database.\n\n  Example:\n     D = mydaqreader.ingest_epochfiles(epochfiles,epoch_id);\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/ingest_epochfiles is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>ingested2epochs_t0t1_epochclock - make a map of all ingested epochs to t0t1 and epochclock</p> <pre><code>M = ingested2epochs_epochprobemaps_t0t1_epochclock(NDI_DAQREADER_OBJ, S)\n\n  Examines the ingested epochfiles and returns a structure of maps:\n    M.t0t1 maps epochid to t0t1\n    M.epochclock maps epochid to epochclock\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/ingested2epochs_t0t1_epochclock is inherited from superclass ndi.daq.reader\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.isvalid is inherited from superclass did.ido\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.daq.reader object</p> <pre><code>DOC = NEWDOCUMENT(NDI_DAQREADER_OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.daq.reader object.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/newdocument is inherited from superclass ndi.daq.reader\n</code></pre> <p>readchannels_epochsamples - read the data based on specified channels</p> <pre><code>DATA = READCHANNELS_EPOCHSAMPLES(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES, S0, S1)\n\n   CHANNELTYPE is the type of channel to read (cell array of strings, one per\n      channel, or single string for all channels)\n\n   CHANNEL is a vector of the channel numbers to read, beginning from 1\n\n   EPOCHFILES is the cell array of full path filenames for this epoch\n\n   DATA is the channel data (each column contains data from an individual channel)\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/readchannels_epochsamples is inherited from superclass ndi.daq.reader.mfdaq.cedspike2\n</code></pre> <p>readchannels_epochsamples_ingested - read the data based on specified channels</p> <pre><code>DATA = READCHANNELS_EPOCHSAMPLES_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, CHANNELTYPE, ...\n     CHANNEL, EPOCHFILES, S0, S1, S)\n\n   CHANNELTYPE is the type of channel to read\n\n   CHANNEL is a vector of the channel numbers to read, beginning from 1\n\n   EPOCHFILES is the set of epochfiles to read from\n\n   S0 is the sample where reading should start, and S1 is sample where reading should end.\n\n   DATA will have one column per channel.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/readchannels_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, ...\n      EPOCHFILES, T0, T1)\n\n   Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number\n   of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is\n   also a column of a type that depends on the type of event that is read.  If the number\n   of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell\n   arrays, with 1 column per channel.\n\n   CHANNELTYPE is a cell array of strings, describing the type of each channel to read:\n       'event'  - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for\n                     each timestamp\n       'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the\n                     data associated with the marker (type double)\n       'text'   - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of\n                     character arrays, 1 per event\n       'dep'    - Create events from a digital channel with positive transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are 1\n       'dimp'   - Create events from a digital channel by finding impulses that exhibit\n                     positive then negative transitions. TIMESTAMPS mark the occurrence\n                     of each event, and DATA indicates whether the event is a positive\n                     transition (1) or negative (-1) transition.\n       'den'    - Create events from a digital channel with negative transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are -1.\n       'dimn'   - Create events from a digital channel by finding impulses that exhibit\n                     negative then positive transitions. TIMESTAMPS mark the occurrence of\n                     each event, and DATA indicates whether the event is a negative\n                     transition (1) or a positive transition (-1).\n\n   CHANNEL is a vector with the identity(ies) of the channel(s) to be read.\n\n   EPOCHSFILES is a cell array of full path file names\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/readevents_epochsamples is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples_ingested - read events, markers, and digital events of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_INGESTED(NDR_READER_OBJ, CHANNELTYPE, ...\n      CHANNEL, EPOCHFILES, T0, T1)\n\n   Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number\n   of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is\n   also a column of a type that depends on the type of event that is read.  If the number\n   of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell\n   arrays, with 1 column per channel.\n\n   CHANNELTYPE is a cell array of strings, describing the type of each channel to read:\n       'event'  - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for\n                     each timestamp\n       'marker' - TIMESTAMPS mark the occurrence of each event; each row of DATA is the\n                     data associated with the marker (type double)\n       'text'   - TIMESTAMPS mark the occurrence of each event; DATA is a cell array of\n                     character arrays, 1 per event\n       'dep'    - Create events from a digital channel with positive transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are 1\n       'dimp'   - Create events from a digital channel by finding impulses that exhibit\n                     positive then negative transitions. TIMESTAMPS mark the occurrence\n                     of each event, and DATA indicates whether the event is a positive\n                     transition (1) or negative (-1) transition.\n       'den'    - Create events from a digital channel with negative transitions.\n                     TIMESTAMPS mark the occurrence of each event and DATA entries are -1.\n       'dimn'   - Create events from a digital channel by finding impulses that exhibit\n                     negative then positive transitions. TIMESTAMPS mark the occurrence of\n                     each event, and DATA indicates whether the event is a negative\n                     transition (1) or a positive transition (-1).\n\n   CHANNEL is a vector with the identity(ies) of the channel(s) to be read.\n\n   EPOCHSFILES is a cell array of full path file names\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/readevents_epochsamples_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>readevents_epochsamples_native - read events or markers of specified channels for a specified epoch</p> <pre><code>[TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(SELF, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1)\n\n   SELF is the NDI_DAQSYSTEM_MFDAQ_STIMULUS_VHVISSPIKE2 object.\n\n   CHANNELTYPE is a cell array of strings describing the the type(s) of channel(s) to read\n   ('event','marker', etc). If CHANNELTYPE is a string, it is\n   assumed to apply to all channels.\n\n   CHANNEL is a vector with the identity of the channel(s) to be read.\n\n   EPOCH is the cell array of file names associated with an epoch\n\n   DATA is a two-column vector; the first column has the time of the event. The second\n   column indicates the marker code. In the case of 'events', this is just 1. If more than one channel\n   is requested, DATA is returned as a cell array, one entry per channel.\n</code></pre> <p>samplerate - **</p> <pre><code>SAMPLERATE - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL\n\n  SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL)\n\n  SR is an array of sample rates from the specified channels\n\n  so, these are all events, and it doesn't much matter, so\n  let's make a guess that should apply well in all cases\n</code></pre> <p>samplerate_ingested - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL</p> <pre><code>SR = SAMPLERATE_INGESTED(NDI_DAQREADER_MFDAQ_OBJ, EPOCHFILES, CHANNELTYPE, CHANNEL, S)\n\n  SR is an array of sample rates from the specified channels\n\n  CHANNELTYPE can be either a string or a cell array of\n  strings the same length as the vector CHANNEL.\n  If CHANNELTYPE is a single string, then it is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/samplerate_ingested is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>searchquery - create a search for this ndi.daq.reader object</p> <pre><code>SQ = SEARCHQUERY(NDI_DAQREADER_OBJ)\n\n  Creates a search query for the ndi.daq.reader object.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/searchquery is inherited from superclass ndi.daq.reader\n</code></pre> <p>standardize_channel_types - return standard channel type names</p> <pre><code>STDCHANNELTYPES = STANDARDIZE_CHANNEL_TYPES(CHANNELTYPES)\n\n  Given a cell array of strings of CHANNELTYPES, replace any abbreviations with\n  with the standard channel type name in ndi.daq.reader.mfdaq.channel_types()\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.standardize_channel_types is inherited from superclass ndi.daq.reader.mfdaq\n</code></pre> <p>t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch</p> <pre><code>T0T1 = T0_T1(NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ, EPOCHFILES)\n\n  Return the beginning (t0) and end (t1) times of the EPOCHFILES that define this\n  epoch in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/t0_t1 is inherited from superclass ndi.daq.reader.mfdaq.cedspike2\n</code></pre> <p>t0_t1_ingested - return the t0_t1 (beginning and end) epoch times for an ingested epoch</p> <pre><code>T0T1 = T0_T1_INGESTED(NDI_DAQREADER_OBJ, EPOCH_NUMBER, S)\n\n  Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER\n  in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK.\n\n  The abstract class always returns {[NaN NaN]}.\n\n  See also: ndi.time.clocktype, EPOCHCLOCK\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/t0_t1_ingested is inherited from superclass ndi.daq.reader\n</code></pre> <p>underlying_datatype - get the underlying data type for a channel in an epoch</p> <pre><code>[DATATYPE,P,DATASIZE] = UNDERLYING_DATATYPE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL)\n\n  Return the underlying datatype for the requested channel.\n\n  DATATYPE is a type that is suitable for passing to FREAD or FWRITE\n   (e.g., 'float64', 'uint16', etc. See help fread.)\n\n  P is a polynomial that converts between the double data that is returned by\n  READCHANNEL. RETURNED_DATA = (RAW_DATA+P(1))*P(2)+(RAW_DATA+P(1))*P(3) ...\n\n  DATASIZE is the sample size in bits.\n\n  CHANNELTYPE must be a string. It is assumed that\n  that CHANNELTYPE applies to every entry of CHANNEL.\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/underlying_datatype is inherited from superclass ndi.daq.reader.mfdaq.cedspike2\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.unique_id is inherited from superclass did.ido\n</code></pre> <p>verifyepochprobemap - Verifies that an EPOCHPROBEMAP is compatible with a given device and the data on disk</p> <pre><code>B = VERIFYEPOCHPROBEMAP(NDI_DAQSYSTEM_MFDAQ_CEDSPIKE2_OBJ, EPOCHPROBEMAP, EPOCHFILES)\n\n  Examines the ndi.epoch.epochprobemap_daqsystem EPOCHPROBEMAP and determines if it is valid for the given device\n  epoch NUMBER.\n\n  For the abstract class ndi.daq.system, EPOCHPROBEMAP is always valid as long as\n  EPOCHPROBEMAP is an ndi.epoch.epochprobemap_daqsystem object.\n\n  See also: ndi.daq.system, ndi.epoch.epochprobemap_daqsystem\n\nHelp for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/verifyepochprobemap is inherited from superclass ndi.daq.reader.mfdaq.cedspike2\n</code></pre> <p>vhlabvisspike2 - Create a new multifunction DAQ object</p> <pre><code>D = ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2(NAME, THEFILENAVIGATOR, DAQREADER)\n\n   Creates a new ndi.daq.system.mfdaq object with NAME, and FILENAVIGATOR.\n   This is an abstract class that is overridden by specific devices.\n\n    Documentation for ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2/vhlabvisspike2\n       doc ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/export_angeluccilab_daq_systems.m/","title":"ndi.setup.daq.system.export_angeluccilab_daq_systems","text":"<pre><code>ndi.setup.daq.system.export_angeluccilab_daq_systems is a script.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/export_dbkatzlab_daq_systems.m/","title":"ndi.setup.daq.system.export_dbkatzlab_daq_systems","text":"<pre><code>ndi.setup.daq.system.export_dbkatzlab_daq_systems is a script.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/export_marderlab_daq_systems.m/","title":"ndi.setup.daq.system.export_marderlab_daq_systems","text":"<pre><code>ndi.setup.daq.system.export_marderlab_daq_systems is a script.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/export_vhlab_daq_systems.m/","title":"ndi.setup.daq.system.export_vhlab_daq_systems","text":"<pre><code>ndi.setup.daq.system.export_vhlab_daq_systems is a script.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/export_yangyangwang_daq_systems.m/","title":"ndi.setup.daq.system.export_yangyangwang_daq_systems","text":"<pre><code>ndi.setup.daq.system.export_yangyangwang_daq_systems is a script.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/listDaqSystemNames.m/","title":"ndi.setup.daq.system.listDaqSystemNames","text":"<pre><code>  listDaqSystemNames - List names of pre-configured DAQ systems for a lab\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/deprecating/angeluccilab.m/","title":"ndi.setup.daq.system/deprecating.angeluccilab","text":"<pre><code>  ANGELUCCILAB - initialize devices used by ANGELUCCILAB\n\n  EXP = ndi.setup.daq.system.angeluccilab(EXP, DEVNAME)\n\n  Creates devices that look for files in the ANGELUCCILAB standard recording\n  scheme, where data from different epochs are organized into\n  subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the\n  name a device in the table below. These devices are added to the ndi.session\n  object EXP. If DEVNAME is a cell list of strings, then multiple items are added.\n\n  If the function is called with no input arguments, then it returns a list\n  of all valid device names.\n\n  Each epoch is defined by the presence of a 'reference.txt' file, as well\n  as specific files that are needed by each device as described below.\n\n  Devices created    | Description\n  ----------------------------------------------------------------\n  angelucci_blackrock5  |  ndi.daq.system.mfdaq that looks for\n                        |    files '#.nev', '#.ns5', and 'stimData.mat'\n  angelucci_visstim     |  ndi.daq.system.mfdaq that looks for\n                        |    files '#.nev', '#.ns4', and 'stimData.mat'\n\n  See also: ndi.file.navigator.epochdir\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/deprecating/dbkatzlab.m/","title":"ndi.setup.daq.system/deprecating.dbkatzlab","text":"<pre><code>  KATZLAB_MAKEDEV - initialize devices used by KATZLAB\n\n  EXP = ndi.setups.katzlab_makedev(EXP, DEVNAME)\n\n  Creates devices that look for files in the KATZLAB standard recording\n  scheme, where data from different epochs are organized into\n  subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the\n  name a device in the table below. These devices are added to the ndi.session\n  object EXP. If DEVNAME is a cell list of strings, then multiple items are added.\n\n  If the function is called with no input arguments, then it returns a list\n  of all valid device names.\n\n  Each epoch is defined by the presence specific files that are needed by each\n  device as described below.\n\n  Devices created    | Description\n  ----------------------------------------------------------------\n  narendra_intan     |  ndi_daqsystem_multichannel_mfdaq that looks for\n                     |    files 'time.dat, 'info.rhd', and 'epochprobemap.txt'\n\n  See also: ndi.file.navigator.epochdir\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/deprecating/marderlab.m/","title":"ndi.setup.daq.system/deprecating.marderlab","text":"<pre><code>  MARDERLAB - initialize devices used by MARDERLAB\n\n  EXP = ndi.setups.marderlab.makedev(EXP, DEVNAME)\n\n  Creates devices that look for files in the MARDERLAB standard recording\n  scheme, where data from different epochs are organized into\n  subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the\n  name a device in the table below. These devices are added to the ndi.session\n  object EXP. If DEVNAME is a cell list of strings, then multiple items are added.\n\n  If the function is called with no input arguments, then it returns a list\n  of all valid device names.\n\n  Each epoch is defined by the presence specific files that are needed by each\n  device as described below.\n\n  Devices created    | Description\n  ----------------------------------------------------------------\n  marder_ced         |  ndi_daqsystem_multichannel_mfdaq that looks for\n                     |    files '[something].smr' and\n                     |    '[something].epochprobemap.txt'\n\n  See also: ndi.file.navigator.epochdir\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/deprecating/vhlab.m/","title":"ndi.setup.daq.system/deprecating.vhlab","text":"<pre><code>  ndi.setup.daq.system.vhlab - initialize daq systems used by VHLAB\n\n  S = ndi.setup.daq.system.vhlab(S, DEVNAME)\n\n  Creates daq systems that look for files in the VHLAB standard recording\n  scheme, where data from different epochs are organized into\n  subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the\n  name a daq systems in the table below. These daq systems are added to the ndi.session\n  object S. If DEVNAME is a cell list of strings, then multiple items are added.\n\n  If the function is called with no input arguments, then it returns a list\n  of all valid device names.\n\n  Each epoch is defined by the presence of a 'reference.txt' file, as well\n  as specific files that are needed by each device as described below.\n\n   Devices created   | Description\n  |------------------|--------------------------------------------------|\n  | vhintan          | ndi.daq.system.mfdaq that looks for files        |\n  |                  |    'vhintan_channelgrouping.txt' and '*.rhd'     |\n  | vhspike2         |    ndi.daq.system.mfdaq that looks for files     |\n  |                  |    'vhspike2_channelgrouping.txt' and '*.smr'    |\n  | vhvis_spike2     | ndi.daq.system.mfdaq.stimulus that looks for     |\n  |                  |    files 'stimtimes.txt', 'verticalblanking.txt',|\n  |                  |    'stims.mat', and 'spike2data.smr'.            |\n  -----------------------------------------------------------------------\n\n  See also: ndi.file.navigator.epochdir\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bdaq/%2Bsystem/deprecating/yangyangwang.m/","title":"ndi.setup.daq.system/deprecating.yangyangwang","text":"<pre><code>  ndi.setup.daq.system.yangyangwang - initialize daq systems used by VHLAB\n\n  S = ndi.setup.daq.system.yangyangwang(S, DEVNAME)\n\n  Creates daq systems that look for files in the VHLAB standard recording\n  scheme, where data from different epochs are organized into\n  subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the\n  name a daq systems in the table below. These daq systems are added to the ndi.session\n  object S. If DEVNAME is a cell list of strings, then multiple items are added.\n\n  If the function is called with no input arguments, then it returns a list\n  of all valid device names.\n\n  Each epoch is defined by the presence of a 'reference.txt' file, as well\n  as specific files that are needed by each device as described below.\n\n   Devices created   | Description\n  |------------------|--------------------------------------------------|\n  | yangyang_tdt_sev | ndi.daq.system.mfdaq that looks for files        |\n  |                  |    '*_Ch1.sev'                                   |\n  -----------------------------------------------------------------------\n\n  See also: ndi.file.navigator.epochdir\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bepoch/epochprobemap_daqsystem_vhlab.m/","title":"CLASS ndi.setup.epoch.epochprobemap_daqsystem_vhlab","text":"<pre><code>  ndi.setup.epoch.epochprobemap_daqsystem_vhlab - Create a new ndi.epoch.epochprobemap_daqsystem object derived from the vhlab device implementation\n\n  MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI.SETUP.EPOCH.EPOCHPROBEMAP_DAQSYSTEM_VHLAB(NAME, REFERENCE, TYPE, DEVICESTRING, SUBJECTSTRING)\n\n  Creates a new ndi.setup.epoch.epochprobemap_daqsystem_vhlab with name NAME, reference REFERENCE, type TYPE,\n  and devicestring DEVICESTRING.\n\n  NAME can be any string that begins with a letter and contains no whitespace. It\n  is CASE SENSITIVE.\n  REFERENCE must be a non-negative scalar integer.\n  TYPE is the type of recording.\n  DEVICESTRING is a string that indicates the channels that were used to acquire\n  this record.\n\n    MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI_EPOCHPROBEMAP_VHLAB(FILENAME)\n\n  Here, FILENAME is assumed to be a (full path) tab-delimitted text file in the style of\n  'vhintan_channelgrouping.txt' (see HELP VHINTAN_CHANNELGROUPING)\n  that has entries 'name&lt;tab&gt;ref&lt;tab&gt;channel_list&lt;tab&gt;'.\n\n  The device type of each channel is assumed to be 'n-trode', where n is\n  set to be the number of channels in the channel_list for each name/ref pair.\n\n  The NDI device name for this device must be 'vhintan' (VH Intan RHD device), 'vhlv' (VH Lab Labview custom\n  acquisition code), 'vhspike2', or 'vhwillow'. The device name will be taken from the filename,\n  following [VHDEVICENAME '_channelgrouping.txt']\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bepoch/epochprobemap_daqsystem_vhlab.m/#superclasses","title":"Superclasses","text":"<p>ndi.epoch.epochprobemap_daqsystem, ndi.epoch.epochprobemap</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bepoch/epochprobemap_daqsystem_vhlab.m/#properties","title":"Properties","text":"Property Description name reference type devicestring subjectstring"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bepoch/epochprobemap_daqsystem_vhlab.m/#methods","title":"Methods","text":"Method Description decode decode table information for an ndi.epoch.epochprobemap object from a serialized string epochprobemap_daqsystem_vhlab Create a new ndi.epoch.epochprobemap_daqsystem object derived from the vhlab device implementation savetofile Write ndi.epoch.epochprobemap_daqsystem object array to disk serialization_struct create a Matlab structure for serialization serialize Turn the ndi.epoch.epochprobemap object into a string"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bepoch/epochprobemap_daqsystem_vhlab.m/#methods-help","title":"Methods help","text":"<p>decode - decode table information for an ndi.epoch.epochprobemap object from a serialized string</p> <pre><code>ST = DECODE(S)\n\n  Return a structure ST that contains decoded information to\n  build an ndi.epoch.epochprobemap object from a string\n\nHelp for ndi.setup.epoch.epochprobemap_daqsystem_vhlab.decode is inherited from superclass ndi.epoch.epochprobemap_daqsystem\n</code></pre> <p>epochprobemap_daqsystem_vhlab - Create a new ndi.epoch.epochprobemap_daqsystem object derived from the vhlab device implementation</p> <pre><code>MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI.SETUP.EPOCH.EPOCHPROBEMAP_DAQSYSTEM_VHLAB(NAME, REFERENCE, TYPE, DEVICESTRING, SUBJECTSTRING)\n\n  Creates a new ndi.setup.epoch.epochprobemap_daqsystem_vhlab with name NAME, reference REFERENCE, type TYPE,\n  and devicestring DEVICESTRING.\n\n  NAME can be any string that begins with a letter and contains no whitespace. It\n  is CASE SENSITIVE.\n  REFERENCE must be a non-negative scalar integer.\n  TYPE is the type of recording.\n  DEVICESTRING is a string that indicates the channels that were used to acquire\n  this record.\n\n    MYNDI_EPOCHPROBEMAP_DAQSYSTEM = NDI_EPOCHPROBEMAP_VHLAB(FILENAME)\n\n  Here, FILENAME is assumed to be a (full path) tab-delimitted text file in the style of\n  'vhintan_channelgrouping.txt' (see HELP VHINTAN_CHANNELGROUPING)\n  that has entries 'name&lt;tab&gt;ref&lt;tab&gt;channel_list&lt;tab&gt;'.\n\n  The device type of each channel is assumed to be 'n-trode', where n is\n  set to be the number of channels in the channel_list for each name/ref pair.\n\n  The NDI device name for this device must be 'vhintan' (VH Intan RHD device), 'vhlv' (VH Lab Labview custom\n  acquisition code), 'vhspike2', or 'vhwillow'. The device name will be taken from the filename,\n  following [VHDEVICENAME '_channelgrouping.txt']\n\n    Documentation for ndi.setup.epoch.epochprobemap_daqsystem_vhlab/epochprobemap_daqsystem_vhlab\n       doc ndi.setup.epoch.epochprobemap_daqsystem_vhlab\n</code></pre> <p>savetofile - Write ndi.epoch.epochprobemap_daqsystem object array to disk</p> <pre><code>SAVETOFILE(OBJ, FILENAME)\n\n   Writes the ndi.epoch.epochprobemap_daqsystem_vhlab object to disk in filename FILENAME (full path).\n</code></pre> <p>serialization_struct - create a Matlab structure for serialization</p> <pre><code>ST = SERIALIZATION_STRUCT(NDI_EPOCHPROBEMAP_DAQSYSTEM_OBJ)\n\n  Returns a structure of the parameters of an ndi.epoch.epochprobemap_daqsystem\n  object.\n\nHelp for ndi.setup.epoch.epochprobemap_daqsystem_vhlab/serialization_struct is inherited from superclass ndi.epoch.epochprobemap_daqsystem\n</code></pre> <p>serialize - Turn the ndi.epoch.epochprobemap object into a string</p> <pre><code>S = SERIALIZE(NDI_EPOCHPROBEMAP_OBJ)\n\n  Create a character array representation of an ndi.epoch.epochprobemap_daqsystem object\n\nHelp for ndi.setup.epoch.epochprobemap_daqsystem_vhlab/serialize is inherited from superclass ndi.epoch.epochprobemap_daqsystem\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bstimulus/%2Bkjnielsenlab/extractStimulusParameters.m/","title":"ndi.setup.stimulus.kjnielsenlab.extractStimulusParameters","text":"<pre><code> extractStimulusParameters Extracts stimulus parameters and display order from an analyzer structure.\n\n    SYNTAX:\n    [parameters, displayOrder] = extractStimulusParameters(analyzer)\n\n    DESCRIPTION:\n    Processes a MATLAB 'analyzer' structure storing experimental stimulus\n    information. Extracts parameters for each unique stimulus condition and\n    the trial-by-trial display sequence. Consolidates parameters from\n    analyzer.M (global), analyzer.P.param (primary), and\n    analyzer.loops.conds{i} (condition-specific). Throws errors for data\n    inconsistencies previously handled by warnings. Handles zero-trial\n    experiments gracefully by returning an empty displayOrder.\n\n    INPUTS:\n    analyzer (struct): MATLAB structure with experiment details. Must contain\n                       appropriately structured fields 'M', 'P', and 'loops'.\n        - M:        (Expected) Struct with common parameters.\n        - P:        (Expected) Struct with 'param' cell array.\n                    `P.param{k}` typically contains {'Name', 'Type', Value, ...}.\n                    The Value (3rd element) is extracted directly.\n        - loops:    (Expected) Struct with 'conds' cell array.\n                    `loops.conds{i}` defines condition 'i' with 'symbol',\n                    'val', 'repeats' fields. `loops.conds{i}.val{j}` is the\n                    direct value for `loops.conds{i}.symbol{j}`.\n                    `loops.conds{i}.repeats{j}` has 'trialno' field.\n\n    OUTPUTS:\n    parameters (cell array): 1xN cell array (N=conditions). parameters{i}\n                             is a struct with combined parameters for condition i.\n    displayOrder (numeric vector): 1xT vector (T=trials). displayOrder(k)=i\n                                   means trial k used condition i. Empty ([])\n                                   if no trials are found.\n\n    EXAMPLE (based on provided structure snippets):\n    [params, order] = extractStimulusParameters(analyzer);\n    % params{1} has fields from M, P, and loops.conds{1} (e.g., ori=0, t_period=15)\n    % order(52) == 1 (if analyzer.loops.conds{1}.repeats{4}.trialno == 52)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%2Bstimulus/%2Bvhlab/add_stimulus_approach.m/","title":"ndi.setup.stimulus.vhlab.add_stimulus_approach","text":"<pre><code>  ADD_STIMULUS_APPROACH add stimulus approaches to an ndi.session from a text file\n\n  DNEW = ADD_STIMULUS_APPROACH(S, [FILENAME])\n\n  Examines a text file, either named 'stimulus_approaches.txt' in the root\n  directory of the ndi.session object S or FILENAME if provided.\n  The text file should be a tab-delimited table with first entries\n  'Epoch' and 'Approach'. Each subsequent row should have entries of\n  approach names in the NDI Cloud Ontology.\n    Example:\n       Epoch&lt;tab&gt;Approach\n       t00001&lt;tab&gt;Purpose: Assessing spatial frequency tuning\n       t00002&lt;tab&gt;Purpose: Assessing temporal frequency tuning\n\n  The function for epochs in the device 'vhvis_spike2'. If the entries are already\n  added, then they are not re-added.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%40DaqSystemConfiguration/DaqSystemConfiguration.m/","title":"CLASS ndi.setup/@DaqSystemConfiguration.DaqSystemConfiguration","text":"<pre><code> DaqSystemConfiguration Parameters for configuring a DAQ System.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%40DaqSystemConfiguration/DaqSystemConfiguration.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%40DaqSystemConfiguration/DaqSystemConfiguration.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bsetup/%40DaqSystemConfiguration/DaqSystemConfiguration.m/#methods","title":"Methods","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/cache.m/","title":"ndi.test.cache","text":"<pre><code>  ndi.test.cache - test the ndi.cache object\n\n  Adds several entries to ndi.cache objects to test the functions.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bapp/markgarbage.m/","title":"ndi.test.app.markgarbage","text":"<pre><code>  ndi.test.app.markgarbage - Test the functionality of the app 'ndi.app.markgarbage'\n\n   ndi.test.app.markgarbage\n\n   Tests the ndi.app.markgarbage on example data in\n   [NDICOMMONPATH]/example_app_sessions/markgarbage_ex\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bapp/spikeextractor.m/","title":"ndi.test.app.spikeextractor","text":"<pre><code>  ndi.test.app.spikeextractor - Test the functionality of the apps 'ndi.app.spikeextractor' and 'ndi.app.spikesort' with example data\n\n  Tests the ndi.app.spikeextractor on example data in\n  [NDICOMMONPATH]/example_app_sessions/exp_sg\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/openminds_to_metadata.m/","title":"ndi.test.cloud.openminds_to_metadata","text":"<pre><code> OPENMINDS_TO_METADATA Summary of this function goes here\n    Detailed explanation goes here\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/upload_download.m/","title":"ndi.test.cloud.upload_download","text":"<pre><code>  UPLOAD_DOWNLOAD - test uploading and downloading an example dataset\n\n  [B,MSG] = UPLOAD_DOWNLOAD([D,metadatafile])\n\n  Test uploading and then downloading an example ndi.dataset D.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/add_document_test.m/","title":"ndi.test.cloud.api.add_document_test","text":"<pre><code> ADD_DOCUMENT_TEST - tests the api commands used to post documents\n\n  ADD_DOCUMENT_TEST(dataset_id)\n\n  Tests the following api commands:\n\n     datasets/add_document\n     documents/get_document\n     documents/update_document\n     files/get_file_upload_url\n     files/put_files\n     files/get_file_details\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/dataset_branch_test.m/","title":"ndi.test.cloud.api.dataset_branch_test","text":"<pre><code> DATASET_BRANCH_TEST - test the functions related to dataset branches\n\n  DATASET_BRANCH_TEST()\n\n  Test the following api commands:\n    datasets/create_dataset_branch\n    datasets/get_branches\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/delete_documents_test.m/","title":"ndi.test.cloud.api.delete_documents_test","text":"<pre><code> DELETE_DOCUMENTS_TEST - test the delete_document and bulk_delete function\n\n  DELETE_DOCUMENTS_TEST(DATASET_ID)\n\n  Test the following api commands:\n    documents/delete_document\n    documents/bulk_delete_documents\n    documents/list_dataset_documents\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/pipeline.m/","title":"ndi.test.cloud.api.pipeline","text":"<pre><code> PIPELINE - Pipeline for testing the cloud API\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/submit_publish_dataset.m/","title":"ndi.test.cloud.api.submit_publish_dataset","text":"<pre><code> SUBMIT_PUBLISH_DATASET - test the functions related to submit and publishing a dataset\n\n  SUBMIT_PUBLISH_DATASET(DATASET_ID)\n\n  Test the following api commands:\n\n     datasets/submit_dataset\n     datasets/publish_dataset\n     datasets/unpublish_dataset\n     datasets/get_published\n     datasets/get_unpublished\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bcloud/%2Bapi/upload_sample_test.m/","title":"ndi.test.cloud.api.upload_sample_test","text":"<pre><code>  UPLOAD_SAMPLE_TEST - tests the api commands used to upload a sample dataset\n\n  UPLOAD_SAMPLE_TEST()\n\n  Tests the following api commands:\n\n     datasets/get_datasetid\n     datasets/create_dataset\n     documents/list_dataset_documents\n     datasets/list_datasets\n     datasets/update_dataset\n\n  Tests the following functions:\n\n     ndi.cloud.upload.upload_to_NDI_cloud\n     ndi.database.metadata_app.fun.metadata_to_json\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/blackrock.m/","title":"ndi.test.daq.blackrock","text":"<pre><code>  ndi.test.daq.blackrock - Test the functionality of the Blackrock driver and a file tree with a flat organization\n\n   ndi.test.daq.blackrock([DIRNAME])\n\n   Given a directory with Blackrock data inside, this function loads the\n   channel information and then plots some data from channel 1,\n   as an example of the Intan driver.\n\n   If DIRNAME is not provided, the default directory\n   [NDIPATH]/example_sessions/exp_blackrock is used.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/build_intan_flat_exp.m/","title":"ndi.test.daq.build_intan_flat_exp","text":"<pre><code>  BUILD_INTAN_FLAT_EXP - Create an Intan driver and save it to an session\n\n   ndi.test.daq.build_intan_flat_exp([DIRNAME])\n\n   Given a directory with RHD data inside, this function loads the\n   channel information and then plots some data from channel 1,\n   as an example of the Intan driver. It also leaves the driver saved\n   in the session record.\n\n   If DIRNAME is not provided, the default directory\n   [NDIPATH]/example_sessions/exp1_eg_saved is used.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/intan_flat.m/","title":"ndi.test.daq.intan_flat","text":"<pre><code>  ndi.test.daq.intan_flat - Test the functionality of the Intan driver and a file tree with a flat organization\n\n   ndi.test.daq.intan_flat([DIRNAME])\n\n   Given a directory with RHD data inside, this function loads the\n   channel information and then plots some data from channel 1,\n   as an example of the Intan driver.\n\n   If DIRNAME is not provided, the default directory\n   [NDIPATH]/example_sessions/exp1_eg is used.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/intan_flat_metadata.m/","title":"ndi.test.daq.intan_flat_metadata","text":"<pre><code>  intan_flat_metadata - Test the functionality of the Intan driver and a file tree with a flat organization\n\n   ndi.test.daq.test_intan_flat_metadata([DIRNAME])\n\n   Given a directory with RHD data inside, this function loads the\n   channel information and then plots some data from channel 1,\n   as an example of the Intan driver.\n\n   If DIRNAME is not provided, the default directory\n   [NDIPATH]/example_sessions/exp1_eg is used.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/intan_flat_saved.m/","title":"ndi.test.daq.intan_flat_saved","text":"<pre><code>  NDI.TEST.DAQ.INTAN_FLAT_SAVED - Test the functionality of the Intan driver and a file tree with a flat organization\n\n   ndi.test.daq.intan_flat_saved([DIRNAME])\n\n   Given an session directory with an associated Intan driver,\n   this function loads the channel information and then plots some\n   data from channel 1, as an example of the Intan driver.\n\n   If DIRNAME is not provided, the default directory\n   [NDIPATH]/example_sessions/exp1_eg_saved is used.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/sg_flat.m/","title":"ndi.test.daq.sg_flat","text":"<pre><code>  ndi.test.daq.sg_flat - Test the functionality of the SpikeGadgets driver and a filenavigator with a flat organization\n\n  ndi.test.daq.sg_flat([DIRNAME])\n\n  Given a directory with .rec data inside, this function loads the\n  first tetrode and plots the first second of data in all four channels.\n\n  If DIRNAME is not provided, the default directory\n  [NDIPATH]/example_sessions/exp1_eg is used.\n\n  Developer note: function can be expanded to take in a specific tetrode to plot\n  from specific epoch n, along with sample0 and sample1.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/test_ndi_device_image_tiffstack.m/","title":"ndi.test.daq.test_ndi_device_image_tiffstack","text":"<pre><code> UNTITLED5 Summary of this function goes here\n    Detailed explanation goes here\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdaq/test_ndi_image_tiffstack_multipleepoch.m/","title":"ndi.test.daq.test_ndi_image_tiffstack_multipleepoch","text":"<pre><code> UNTITLED5 Summary of this function goes here\n    Detailed explanation goes here\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/all_doc_fields.m/","title":"ndi.test.database.all_doc_fields","text":"<pre><code>\n  [FN]  = ndi.test.database.all_doc_fields()\n\n  Returns the field names (full form) of all document types.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/load_all_docs.m/","title":"ndi.test.database.load_all_docs","text":"<pre><code>\n  [JSON_FILENAMES]  = ndi.test.database.load_all_docs()\n\n  Searches for all JSON blank document definition files.\n  The full paths of these files are returned as a cell array\n  of strings.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/test_ndi_document.m/","title":"ndi.test.database.test_ndi_document","text":"<pre><code>  TEST_NDI_DOCUMENT - Test the functionality of the NDI_DOCUMENT object and the NDI_SESSION database\n\n   ndi.test.document([DIRNAME])\n\n   Given a directory, this function tries to create some\n   NDI_VARIABLE objects in the session DATABASE. The test function\n   removes them on completion.\n\n   If DIRNAME is not provided, the default directory\n   [NDIEXAMPLEEXPERPATH/exp1_eg] is used.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/test_ndi_document_jsons.m/","title":"ndi.test.database.test_ndi_document_jsons","text":"<pre><code>  TEST_NDI_DOCUMENT_JSONS - test validity of all NDI_DOCUMENT json definitions\n\n  [B, SUCCESSES, FAILURES]  = ndi.test.document_jsons(GENERATE_ERROR)\n\n  Tries to make a blank ndi.document from all ndi.document JSON definitions.\n  Returns a cell array of all JSON file names that were successfully created in\n  SUCCESSES, and a cell array of JSON file names there unsuccessfully created in\n  FAILURES. B is 1 if all ndi documents were created successfully.\n\n  If GENERATE_ERROR is present and is 1, then an error is generated if B is 0.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_daq_documents.m/","title":"ndi.test.database.core.test_ndi_daq_documents","text":"<pre><code>  TEST_NDI_DAQ_DOCUMENTS - Test the functionality of the storage of DAQ objects using NDI_DOCUMENT and the NDI_SESSION database\n\n   ndi.test.daq.documents([DIRNAME])\n\n   Given a directory, this function tries to create and test the\n   following objects and subclasses:\n      1) ndi.file.navigator (by calling test_ndi_filenavigator_document)\n      2) ndi.daq.reader (by calling test_ndi_daqreader_document)\n      3) ndi.daq.system (by calling test_ndi_daqsystem_document)\n      4) ndi.time.syncrule (by calling test_ndi_syncrule_document)\n      5) ndi.time.syncgraph (by calling test_ndi_syncgraph_document)\n\n   If DIRNAME is not provided, the default directory\n   [NDIEXAMPLEEXPERPATH/exp1_eg] is used.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_daqreader_documents.m/","title":"ndi.test.database.core.test_ndi_daqreader_documents","text":"<pre><code>  TEST_NDI_DAQREADER_DOCUMENTS - test creating database entries, searching, and building from documents\n\n  ndi.test.daq.reader.documents(DIRNAME)\n\n  Given a directory that corresponds to an session, this function tries to create\n  the following objects :\n    1) ndi.daq.reader\n    2) ndi.daq.reader.mfdaq\n    3) ndi.daq.reader.mfdaq.cedspike2\n    4) ndi.daq.reader.mfdaq.intan\n    5) ndi.daq.reader.mfdaq.spikegadgets\n    6) ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2\n\n    Then, the following tests actions are conducted for each document type:\n    a) Create a new database document\n    b) Add the database document to the database\n    c) Search for the database document\n    d) Create a new object based on the database entry, and test that it matches the original\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_daqsystem_documents.m/","title":"ndi.test.database.core.test_ndi_daqsystem_documents","text":"<pre><code>  TEST_NDI_DAQSYSTEM_DOCUMENTS - test creating database entries, searching, and building from documents\n\n  ndi.test.daq.system.documents(DIRNAME)\n\n  Given a directory that corresponds to an session, this function tries to create\n  the following objects :\n    1) ndi.daq.system.mfdaq\n    2) ndi_daqsystem_mfdaq_stimulus\n\n    Then, the following tests actions are conducted for each document type:\n    a) Create a new database document\n    b) Add the database document to the database\n    c) Search for the database document\n    d) Create a new object based on the database entry, and test that it matches the original\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_filenavigator_documents.m/","title":"ndi.test.database.core.test_ndi_filenavigator_documents","text":"<pre><code>  TEST_NDI_FILENAVIGATOR_DOCUMENTS - test creating database entries, searching, and building from documents\n\n  ndi.test.daq.filenavigator.documents(DIRNAME)\n\n  Given a directory that corresponds to an session, this function tries to create\n  an ndi.file.navigator object and an ndi.file.navigator.epochdir object and do the following:\n    a) Create a new database document\n    b) Add the database document to the database\n    c) Search for the database document\n    d) Create a new object based on the database entry, and test that it matches the original\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_syncgraph_documents.m/","title":"ndi.test.database.core.test_ndi_syncgraph_documents","text":"<pre><code>  TEST_NDI_SYNCGRAPH_DOCUMENTS - test creating database entries, searching, and building from documents\n\n  ndi.test.syncgraph.documents(DIRNAME)\n\n  Given a directory that corresponds to an session, this function tries to create\n  the following objects :\n    1) ndi.time.syncgraph\n\n    Then, the following tests actions are conducted for each document type:\n    a) Create a new database document\n    b) Add the database document to the database\n    c) Search for the database document\n    d) Create a new object based on the database entry, and test that it matches the original\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdatabase/%2Bcore/test_ndi_syncrule_documents.m/","title":"ndi.test.database.core.test_ndi_syncrule_documents","text":"<pre><code>  TEST_NDI_SYNCRULE_DOCUMENTS - test creating database entries, searching, and building from documents\n\n  ndi.test.syncrule.documents(DIRNAME)\n\n  Given a directory that corresponds to an session, this function tries to create\n  the following objects :\n    1) ndi.time.syncrule.filematch\n\n    Then, the following tests actions are conducted for each document type:\n    a) Create a new database document\n    b) Add the database document to the database\n    c) Search for the database document\n    d) Create a new object based on the database entry, and test that it matches the original\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdataset/compare.m/","title":"ndi.test.dataset.compare","text":"<pre><code>  COMPARE datasets for equality\n\n  [B,MSG] = COMPARE(D1, D2)\n\n  Compare two datasets for equality. If the datasets\n  have the same documents and files, then B is 1 and\n  MSG is ''. Otherwise, B is 0 and MSG contains a\n  description of the first difference encountered.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdataset/manual.m/","title":"ndi.test.dataset.manual","text":"<pre><code>ndi.test.dataset.manual is a script.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bdebug/ndi_debug_database_stats.m/","title":"ndi.test.debug.ndi_debug_database_stats","text":"<pre><code>  NDI_DEBUG_DATABASE_STATS - examine an NDI database to check for inconsistencies\n\n  OUT = ndi.test.database.debug_stats(E)\n\n  Return a bunch of documents from an NDI session E\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Belement/test_ndi_element.m/","title":"ndi.test.element.test_ndi_element","text":"<pre><code>  TEST_NDI_ELEMENT - Test the functionality of the NDI_ELEMENT object and the NDI_SESSION database\n\n   ndi.test.element([DIRNAME])\n\n   Given a directory, this function tries to create some\n   NDI_VARIABLE objects in the session DATABASE. The test function\n   removes them on completion.\n\n   If DIRNAME is not provided, the default directory\n   [NDIEXAMPLEEXPERPATH/exp1_eg_saved] is used.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bfile/compare_fileobj.m/","title":"ndi.test.file.compare_fileobj","text":"<pre><code>  COMPARE_FILEOBJ compare the binary contents of fileobj elements\n\n  B = COMPARE_FILEOBJ(F1,F2)\n\n  Does a binary comparison of the contents of FILEOBJ F1 and F2.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bfilenavigator/test_ndi_filenavigator.m/","title":"ndi.test.filenavigator.test_ndi_filenavigator","text":"<pre><code>  TEST_NDI_FILENAVIGATOR - A test function for the ndi_filenavigator class\n\n    Creates an session based on a test directory in vhtools_mltbx_toolsbox.\n    Then it finds the number of epochs and returns the files associated with epoch N=2.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bfilenavigator/test_ndi_filenavigator_fileIDfunction.m/","title":"ndi.test.filenavigator.test_ndi_filenavigator_fileIDfunction","text":"<pre><code>  function: Short description\n\n  Extended description\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bgui/displayDocViewer.m/","title":"ndi.test.gui.displayDocViewer","text":"<pre><code>ndi.test.gui.displayDocViewer is a function.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bingest/compare.m/","title":"ndi.test.ingest.compare","text":"<pre><code>  COMPARE - compare sessions that are obtaining data from ingested or non-ingested sources\n\n  B = COMPARE(DIRNAME1, DIRNAME2)\n\n  Compare data from ndi sessions (from VH Lab) where one dataset\n   (DIRNAME1) is not ingested and the other (DIRNAME2) is.\n\n  If DIRNAME1 and DIRNAME2 are not provided, then\n    DIRNAME1 = '/Users/vanhoosr/test/2019-11-19' and\n    DIRNAME2 = '/Users/vanhoosr/test/3019-11-19'\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bingest/mfdaq.m/","title":"ndi.test.ingest.mfdaq","text":"<pre><code>  this is a manual, script-based test\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bingest/mfdaq_compare.m/","title":"ndi.test.ingest.mfdaq_compare","text":"<pre><code>  MFDAQ_COMPARE - compare data from two ndi.daq.system.mfdaq objects\n\n  [B,ERRMSG] = MFDAQ_COMPARE(DAQ1, DAQ2)\n\n  Compare output from two MFDAQ objects. DAQ1 is a non-ingested daq system\n  and DAQ2 should be an ingested daq system.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bingest/syncgraph.m/","title":"ndi.test.ingest.syncgraph","text":"<pre><code>  this is a manual test\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bmisc/bytestream_save.m/","title":"ndi.test.misc.bytestream_save","text":"<pre><code>  ndi.test.misc.bytestream_save - prepare a bytestream file for testing on multiple platforms\n\n  ndi.test.misc.bytestream_save()\n\n  Creates a file called 'bytestream.mat' in the current directory.\n\n  The file contains a variable 'bytestream' that is the bytestream conversion of\n  a structure 'bytestream_structure' that consists of a few Matlab variables, including a custom object\n  (an ndi.document).\n\n  Upon loading the file, one can test that it works on that platform by running\n  ndi.test.misc.bytesream_test\n\n  See also: ndi.test.misc.bytestream_test\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bmisc/bytestream_test.m/","title":"ndi.test.misc.bytestream_test","text":"<pre><code>  ndi.test.misc.bytestream_test - prepare a bytestream file for testing on multiple platforms\n\n  b = ndi.test.misc.bytestream_test()\n\n  Loads a file called 'bytestream.mat' in the current directory, and tests if the reconstruction\n  of the variables from the bytestream variable 'bytestream' exactly match the structure in\n  the variable 'bytestream_structure'.\n\n  If the test passes, b is 1.\n\n  See also: ndi.test.misc.bytestream_save\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bpipeline/edit.m/","title":"ndi.test.pipeline.edit","text":"<pre><code>  ndi.test.pipeline.edit - test the pipeline editor GUI\n\n  Calls\n\n     ndi.pipeline.edit('command','new','pipelinePath',...\n       fullfile(userpath,'tools','NDI-matlab','+ndi','+test','+pipeline',...\n      'test_pipeline'))\n\n  to test the pipeline graphical editor.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bprobe/test_ndi_probe.m/","title":"ndi.test.probe.test_ndi_probe","text":"<pre><code>  TEST_NDI_PROBE - Test the functionality of NDI_PROBE\n\n   ndi.test.probe([DIRNAME])\n\n   Given an session directory with probes, this function\n   plots some data from the first probe channel 1.\n\n   If DIRNAME is not provided, the default directory\n   [NDIPATH/example_sessions/exp1_eg_saved] is used.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bsession/ndi_test_sessiontable.m/","title":"ndi.test.session.ndi_test_sessiontable","text":"<pre><code>  NDI_TEST_SESSIONTABLE\n\n  Test the ndi.session.sessiontable object\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bsetup/angeluccilab.m/","title":"ndi.test.setup.angeluccilab","text":"<pre><code>  ndi.test.setup.angeluccilab - test reading from Angelucci lab data\n\n  E = ndi.test.setup.angeluccilab(REF, DIRNAME)\n\n  Open a directory from test data provided by Angelucci lab\n\n  Example:\n    E = ndi.test.setup.angeluccilab('2017-09-11','/Volumes/van-hooser-lab/Projects/NDI/Datasets_to_Convert/Angelucci/2017-09-11');\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bsetup/dbkatzlab_narendra.m/","title":"ndi.test.setup.dbkatzlab_narendra","text":"<pre><code>  NDI_KATZLAB_NARENDRA_TEST - test reading from Murkherjee et al. 2019\n\n  E = ndi.test.setups.katzlab.narendra_test(REF, DIRNAME)\n\n  Open a directory from Murkherjee et al. (2019, Don Katz lab)\n\n  Example:\n    E = ndi.test.setup.dbkatzlab_narendra('/Volumes/van-hooser-lab/Projects/NDI/Datasets_to_Convert/Katz/NM43_Raw');\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Bsetup/marderlab_hamood.m/","title":"ndi.test.setup.marderlab_hamood","text":"<pre><code>  ndi.test.setup.marderlab_hamood - test reading from Murkherjee et al. 2019\n\n  E = ndi.test.setup.marderlab_hamood(REF, DIRNAME)\n\n  Open a directory from Hamood et al. (2015, Eve Marder lab)\n\n  Example:\n    E = ndi.test.setups.marderlab_hamood('811_05','/Volumes/van-hooser-lab/Projects/NDI/Datasets_to_Convert/Marder/Data/811/811_05');\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Btestsuite/ndi_testsuite.m/","title":"ndi.test.testsuite.ndi_testsuite","text":"<pre><code>  NDI_TESTSUITE - run a suite of tests\n\n  OUTPUT = ndi.test.testsuite\n\n  Loads a set of test suite instructions in the file\n  'ndi_testsuite_list.txt'. This file is a tab-delimited table\n  that can be loaded with vlt.file.loadStructArray with fields\n  Field name          | Description\n  --------------------------------------------------------------------------\n  code                | The code to be run (as a Matlab evaluation)\n  runit               | Should we run it? 0/1\n  comment             | A comment string describing the test\n\n  OUTPUT is a structure of outcomes. It includes the following fields:\n  Field name          | Descriptopn\n  --------------------------------------------------------------------------\n  outcome             | Success is 1, failure is 0. -1 means it was not run.\n  errormsg            | Any error message\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Btime/filefind.m/","title":"ndi.test.time.filefind","text":"<pre><code>  at present, this is not a user-accessible test function\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btest/%2Btutorial/tutorial_02_set.m/","title":"ndi.test.tutorial.tutorial_02_set","text":"<pre><code>  ndi.test.tutorial.tutorial_02_set - run the Tutorial 2.* test set\n\n  ndi.test.tutorial.tutorial_02_set\n\n  Runs the code for Tutorial 2.1, 2.2, 2.3, 2.4, and 2.5.\n\n  This function requires that a clean copy of the test data\n  'ts_exper1' and and 'ts_exper2' be installed at\n\n  [userpath filesep 'Documents' filesep 'NDI filesep 'Test']\n\n  Note that one must make the directory 'Test' manually. The files must be unzipped.\n  'ts_exper1' is available at\n    https://drive.google.com/file/d/1j7IAeMSrH64-qIDLB5EJYUofJSdinwuU/view?usp=sharing\n  and 'ts_exper2' is available at\n    https://drive.google.com/file/d/1otNMkVgZ6KBIn2Y-W2oYVj2DgSOgV-xE/view?usp=sharing\n  'ts_exper2' updated for the new database (2023-04) is here:\n    https://drive.google.com/file/d/1D756b6_n6f0wrBqN4cJOuHOs_46YN_xy/view?usp=sharing\n\n\n  Note that this function requires some user intervention.\n  For the purpose of the test, one can simply choose Kmeans clustering\n  with 1 cluster, press the cluster button, and mark the cluster as \"Excellent\"\n  quality.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/clocktype.m/","title":"CLASS ndi.time.clocktype","text":"<pre><code>  NDI_CLOCKTYPE - a class for specifying a clock type in the NDI framework\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/clocktype.m/#superclasses","title":"Superclasses","text":"<p>matlab.mixin.Heterogeneous</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/clocktype.m/#properties","title":"Properties","text":"Property Description type the ndi_clock type; in this class, acceptable values are 'UTC', 'exp_global_time', and 'no_time'"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/clocktype.m/#methods","title":"Methods","text":"Method Description assertGlobal produce an error if the clocktype is not a global type clocktype Creates a new ndi.time.clocktype object epochgraph_edge provide epochgraph edge based purely on clock type eq are two ndi.time.clocktype objects equal? isGlobal check if is a global type ndi_clocktype2char produce the NDI_CLOCKTOP's type as a string ne are two ndi.time.clocktype objects not equal? needsepoch does this clocktype need an epoch for full description? setclocktype Set the type of an ndi.time.clocktype"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/clocktype.m/#methods-help","title":"Methods help","text":"<p>assertGlobal - produce an error if the clocktype is not a global type</p> <pre><code>assertGlobal(ndi_clocktype_obj)\n\n  Example:\n    ndi.time.clocktype.assertGlobal(myClocktype);\n</code></pre> <p>clocktype - Creates a new ndi.time.clocktype object</p> <pre><code>OBJ = ndi.time.clocktype(TYPE)\n\n  Creates a new ndi.time.clocktype object. TYPE can be\n  any of the following strings (with description):\n\n  TYPE string               | Description\n  ------------------------------------------------------------------------------\n  'utc'                     | Universal coordinated time (within 0.1ms)\n  'approx_utc'              | Universal coordinated time (within 5 seconds)\n  'exp_global_time'         | Experiment global time (within 0.1ms)\n  'approx_exp_global_time'  | Experiment global time (within 5s)\n  'dev_global_time'         | A device keeps its own global time (within 0.1ms)\n                            |   (that is, it knows its own clock across recording epochs)\n  'approx_dev_global_time'  |  A device keeps its own global time (within 5 s)\n                            |   (that is, it knows its own clock across recording epochs)\n  'dev_local_time'          | A device keeps its own local time only within epochs\n  'no_time'                 | No timing information\n  'inherited'               | The timing information is inherited from another device.\n\n    Documentation for ndi.time.clocktype/clocktype\n       doc ndi.time.clocktype\n</code></pre> <p>epochgraph_edge - provide epochgraph edge based purely on clock type</p> <pre><code>[COST, MAPPING] = EPOCHGRAPH_EDGE(NDI_CLOCKTYPE_A, NDI_CLOCKTYPE_B)\n\n  Returns the COST and ndi.time.timemapping object MAPPING that describes the\n  automatic mapping between epochs that have clock types NDI_CLOCKTYPE_A\n  and NDI_CLOCKTYPE_B.\n\n  The following NDI_CLOCKTYPES, if they exist, are linked across epochs with\n  a cost of 100 and a linear mapping rule with shift 1 and offset 0:\n    'utc' -&gt; 'utc'\n    'utc' -&gt; 'approx_utc'\n    'exp_global_time' -&gt; 'exp_global_time'\n    'exp_global_time' -&gt; 'approx_exp_global_time'\n    'dev_global_time' -&gt; 'dev_global_time'\n    'dev_global_time' -&gt; 'approx_dev_global_time'\n\n  Otherwise, COST is Inf and MAPPING is empty.\n</code></pre> <p>eq - are two ndi.time.clocktype objects equal?</p> <pre><code>B = EQ(NDS_CLOCK_OBJ_A, NDI_CLOCKTYPE_OBJ_B)\n\n  Compares two NDI_CLOCKTYPE_objects and returns 1 if they refer to the\n  same clock type.\n</code></pre> <p>isGlobal - check if is a global type</p> <pre><code>b = ISGLOBAL(ndi_clocktype_obj)\n\n  Example:\n    b=ndi.time.clocktype.isGlobal(myClocktype);\n</code></pre> <p>ndi_clocktype2char - produce the NDI_CLOCKTOP's type as a string</p> <pre><code>STR = NDI_CLOCKTYPE2CHAR(NDI_CLOCKTYPE_OBJ)\n\n  Return a string STR equal to the ndi.time.clocktype object's type parameter.\n</code></pre> <p>ne - are two ndi.time.clocktype objects not equal?</p> <pre><code>B = EQ(NDS_CLOCK_OBJ_A, NDI_CLOCKTYPE_OBJ_B)\n\n  Compares two NDI_CLOCKTYPE_objects and returns 0 if they refer to the\n  same clock type.\n</code></pre> <p>needsepoch - does this clocktype need an epoch for full description?</p> <pre><code>B = NEEDSEPOCH(NDI_CLOCKTYPE_OBJ)\n\n  Does this ndi.time.clocktype object need an epoch in order to specify time?\n\n  Returns 1 for 'dev_local_time', 0 otherwise.\n</code></pre> <p>setclocktype - Set the type of an ndi.time.clocktype</p> <pre><code>NDI_CLOCKTYPE_OBJ = SETCLOCKTYPE(NDI_CLOCKTYPE_OBJ, TYPE)\n\n  Sets the TYPE property of an ndi.time.clocktype object NDI_CLOCKTYPE_OBJ.\n  Valid values for the TYPE string are as follows:\n\n  TYPE string               | Description\n  ------------------------------------------------------------------------------\n  'utc'                     | Universal coordinated time (within 0.1ms)\n  'approx_utc'              | Universal coordinated time (within 5 seconds)\n  'exp_global_time'         | Experiment global time (within 0.1ms)\n  'approx_exp_global_time'  | Experiment global time (within 5s)\n  'dev_global_time'         | A device keeps its own global time (within 0.1ms)\n                            |   (that is, it knows its own clock across recording epochs)\n  'approx_dev_global_time'  |  A device keeps its own global time (within 5 s)\n                            |   (that is, it knows its own clock across recording epochs)\n  'dev_local_time'          | A device keeps its own local time only within epochs\n  'no_time'                 | No timing information\n  'inherited'               | The timing information is inherited from another device.\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncgraph.m/","title":"CLASS ndi.time.syncgraph","text":"<pre><code>  ndi.time.syncgraph - create a new ndi.time.syncgraph object\n\n  NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION)\n\n  Builds a new ndi.time.syncgraph object and sets its SESSION\n  property to SESSION, which should be an ndi.session object.\n\n  This function can be called in another form:\n  NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION, NDI_DOCUMENT_OBJ)\n  where NDI_DOCUMENT_OBJ is an ndi.document of class syncgraph.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncgraph.m/#superclasses","title":"Superclasses","text":"<p>ndi.ido, did.ido</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncgraph.m/#properties","title":"Properties","text":"Property Description session ndi.session object rules cell array of ndi.time.syncrule objects to apply identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncgraph.m/#methods","title":"Methods","text":"Method Description addepoch add an ndi.epoch.epochset to the graph addrule add an ndi.time.syncrule to an ndi.time.syncgraph object addunderlyingepochs add an ndi.epoch.epochset to the graph buildgraphinfo build graph info for an ndi.time.syncgraph object cache2ginfo CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache cached_graphinfo return the cached graph info of an ndi.time.syncgraph object checkingestedrules check for a mapping between two nodes in the ingested syncrules eq are 2 ndi.time.syncgraph objects equal? get_ingested get ingested documents for an ndi.syncgraph object getcache return the NDI_CACHE and key for ndi.time.syncgraph ginfo2cache GINFO2CACHE Make a smaller version of the GINFO for storage in the cache graphinfo return the graph information id return the identifier of an DID.IDO object ingest create objects to be ingested to store the latest syncgraph isvalid is a unique ID number valid? load_all_syncgraph_docs load a syncgraph document and all of its syncrules newdocument create a new ndi.document for an ndi.time.syncgraph object remove_cached_graphinfo REMOVE_CACHED_GRAPHINFO removeepoch remove an ndi.epoch.epochset from the graph removerule remove a given ndi.time.syncrule from an ndi.time.syncgraph object searchquery create a search for this ndi.time.syncgraph object set_cached_graphinfo SET_CACHED_GRAPHINFO syncgraph create a new ndi.time.syncgraph object time_convert convert time from one ndi.time.timereference to another unique_id Generate a unique ID number for DID databases (Static method)"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncgraph.m/#methods-help","title":"Methods help","text":"<p>addepoch - add an ndi.epoch.epochset to the graph</p> <pre><code>NEW_GINFO = ADDEPOCH(NDI_SYNCGRAPH_OBJ, NDI_DAQSYSTEM_OBJ, GINFO)\n\n  Adds an ndi.epoch.epochset to the ndi.time.syncgraph\n\n  Note: this does not update the cache\n</code></pre> <p>addrule - add an ndi.time.syncrule to an ndi.time.syncgraph object</p> <pre><code>NDI_SYNCGRAPH_OBJ = ADDRULE(NDI_SYNCGRAPH_OBJ, NDI_SYNCRULE_OBJ)\n\n  Adds the ndi.time.syncrule object indicated as a rule for\n  the ndi.time.syncgraph NDI_SYNCGRAPH_OBJ. If the ndi.time.syncrule is already\n  there, then\n\n  See also: ndi.time.syncgraph/REMOVERULE\n</code></pre> <p>addunderlyingepochs - add an ndi.epoch.epochset to the graph</p> <pre><code>NEW_GINFO = ADDUNDERLYINGEPOCHS(NDI_SYNCGRAPH_OBJ, NDI_EPOCHSET_OBJ, GINFO)\n\n  Adds an ndi.epoch.epochset to the ndi.time.syncgraph\n\n  Note: this DOES update the cache\n\n  Step 1: make sure we have the right kind of input object\n</code></pre> <p>buildgraphinfo - build graph info for an ndi.time.syncgraph object</p> <pre><code>[GINFO] = BUILDGRAPHINFO(NDI_SYNCGRAPH_OBJ)\n\n  Builds from scratch the syncgraph structure GINFO from all of the devices\n  in the NDI_SYNCGRAPH_OBJ's associated 'session' property.\n\n  The graph information GINFO is a structure with the following fields:\n  Fieldname              | Description\n  ---------------------------------------------------------------------\n  nodes                  | The epochnodes (see ndi.epoch.epochset/EPOCHNODE)\n  G                      | The epoch node graph adjacency matrix. G(i,j) is the cost of\n                         |   converting between node i and j.\n  mapping                | A cell matrix with ndi.time.timemapping objects that describes the\n                         |   time mapping among nodes. mapping{i,j} is the mapping between node i and j.\n  diG                    | The graph data structure in Matlab for G (a 'digraph')\n  syncRule_IDs           | The document IDs of the syncrules\n  syncRule_G             | The syncRule graph matrix; if syncRule_G(i,j)==k, then syncRule_IDs{k}\n                         |   was used to determine G(i,j) and mapping{i,j}\n</code></pre> <p>cache2ginfo - CACHE2GINFO Make a regular GINFO from the smaller information stored in the cache</p> <pre><code>GINFO_BIG = GINFO2CACHE(GINFO_SMALL)\n</code></pre> <p>cached_graphinfo - return the cached graph info of an ndi.time.syncgraph object</p> <pre><code>[GINFO, HASHVALUE] = CACHED_EPOCHTABLE(NDI_SYNCGRAPH_OBJ)\n\n  Return the cached version of the graph info, if it exists, along with its HASHVALUE\n  (a hash number generated from the graph info). If there is no cached version,\n  GINFO and HASHVALUE will be empty.\n</code></pre> <p>checkingestedrules - check for a mapping between two nodes in the ingested syncrules</p> <pre><code>[C,M] = CHECKINGESTEDRULES(INGESTED_SYNCRULE_DOCS, NDI_SYNCRULE_OBJ, GNODE_I, GNODE_J)\n\n  Check a set of ingested syncrule documents to see if there is any information about\n  a mapping between graphnodes GNODE_I and GNODE_J.\n\n  If there is, the mapping M with the lowest cost C is returned. Otherwise, C is Inf and\n  M is empty.\n</code></pre> <p>eq - are 2 ndi.time.syncgraph objects equal?</p> <pre><code>B = EQ(NDI_SYNCGRAPH_OBJ1, NDI_SYNCHGRAPH_OBJ2)\n\n  B is 1 if the ndi.time.syncgraph objects have equal sessions and if\n  all syncrules are equal.\n</code></pre> <p>get_ingested - get ingested documents for an ndi.syncgraph object</p> <pre><code>D = GET_INGESTED(NDI_SYNCGRAPH_OBJ)\n\n  Get current ingested sync mappings.\n</code></pre> <p>getcache - return the NDI_CACHE and key for ndi.time.syncgraph</p> <pre><code>[CACHE,KEY] = GETCACHE(NDI_SYNCGRAPH_OBJ)\n\n  Returns the CACHE and KEY for the ndi.time.syncgraph object.\n\n  The CACHE is returned from the associated session.\n  The KEY is the string 'syncgraph_' followed by the object's id.\n\n  See also: ndi.time.syncgraph, NDI_BASE\n</code></pre> <p>ginfo2cache - GINFO2CACHE Make a smaller version of the GINFO for storage in the cache</p> <pre><code>GINFO_SMALL = GINFO2CACHE(GINFO)\n</code></pre> <p>graphinfo - return the graph information</p> <pre><code>The graph information GINFO is a structure with the following fields:\n  Fieldname              | Description\n  ---------------------------------------------------------------------\n  nodes                  | The epochnodes (see ndi.epoch.epochset/EPOCHNODE)\n  G                      | The epoch node graph adjacency matrix. G(i,j) is the cost of\n                         |   converting between node i and j.\n  mapping                | A cell matrix with ndi.time.timemapping objects that describes the\n                         |   time mapping among nodes. mapping{i,j} is the mapping between node i and j.\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.time.syncgraph/id is inherited from superclass did.ido\n</code></pre> <p>ingest - create objects to be ingested to store the latest syncgraph</p> <pre><code>D = INGEST(NDI_SYNCGRAPH_OBJ)\n\n  Create ingestion documents from the current syncrules, devices, and epochs.\n\n  First, this function removes the existing syncgraph and rebuilds it,\n  in case any epochs have been added since the last run.\n\n  Existing sync mappings will not be overwritten.\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.time.syncgraph.isvalid is inherited from superclass did.ido\n</code></pre> <p>load_all_syncgraph_docs - load a syncgraph document and all of its syncrules</p> <pre><code>[SYNCGRAPH_DOC, SYNCRULE_DOCS] = LOAD_ALL_SYNCGRAPH_DOCS(NDI_SESSION_OBJ,...\n                     SYNCGRAPH_DOC_ID)\n\n  Given an ndi.session object and the document identifier of an ndi.time.syncgraph object,\n  this function loads the ndi.document associated with the SYNCGRAPH (SYNCGRAPH_DOC) and all of\n  the documents of its SYNCRULES (cell array of NDI_DOCUMENTS in SYNCRULES_DOC).\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.time.syncgraph object</p> <pre><code>NDI_DOCUMENT_OBJ_SET = NEWDOCUMENT(NDI_SYNCGRAPH_OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.time.syncrule object.\n</code></pre> <p>remove_cached_graphinfo - REMOVE_CACHED_GRAPHINFO</p> <pre><code>REMOVE_CACHED_GRAPHINFO(NDI_SYNCGRAPH_OBJ)\n\n  Remove the cached graph info.\n\n  See also: CACHE_GRAPHINFO, SET_CACHE_GRAPHINFO\n</code></pre> <p>removeepoch - remove an ndi.epoch.epochset from the graph</p> <pre><code>GINFO = REMOVEEPOCH(NDI_SYNCGRAPH_OBJ, NDI_DAQSYSTEM_OBJ, GINFO)\n\n  Remove all epoch nodes from the graph that are contributed by NDI_DAQSYSTEM_OBJ\n\n  Note: this does not update the cache\n</code></pre> <p>removerule - remove a given ndi.time.syncrule from an ndi.time.syncgraph object</p> <pre><code>NDI_SYNCGRAPH_OBJ = REMOVERULE(NDI_SYNCGRAPH_OBJ, INDEX)\n\n  Removes the NDI_SYNCGRAPH_OBJ.rules entry at the INDEX (or indexes) indicated.\n</code></pre> <p>searchquery - create a search for this ndi.time.syncgraph object</p> <pre><code>SQ = SEARCHQUERY(NDI_SYNCGRAPH_OBJ)\n\n  Creates a search query for the ndi.time.syncgraph object.\n</code></pre> <p>set_cached_graphinfo - SET_CACHED_GRAPHINFO</p> <pre><code>SET_CACHED_GRAPHINFO(NDI_SYNCGRAPH_OBJ, GINFO)\n\n  Set the cached graph info. Opposite of CACHE_GRAPHINFO.\n\n  See also: CACHE_GRAPHINFO\n</code></pre> <p>syncgraph - create a new ndi.time.syncgraph object</p> <pre><code>NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION)\n\n  Builds a new ndi.time.syncgraph object and sets its SESSION\n  property to SESSION, which should be an ndi.session object.\n\n  This function can be called in another form:\n  NDI_SYNCGRAPH_OBJ = ndi.time.syncgraph(SESSION, NDI_DOCUMENT_OBJ)\n  where NDI_DOCUMENT_OBJ is an ndi.document of class syncgraph.\n\n    Documentation for ndi.time.syncgraph/syncgraph\n       doc ndi.time.syncgraph\n</code></pre> <p>time_convert - convert time from one ndi.time.timereference to another</p> <pre><code>[T_OUT, TIMEREF_OUT, MSG] = TIME_CONVERT(NDI_SYNCGRAPH_OBJ, TIMEREF_IN, T_IN, REFERENT_OUT, CLOCKTYPE_OUT)\n\n  Attempts to convert a time T_IN that is referred to by ndi.time.timereference object TIMEREF_IN\n  to T_OUT that is referred to by the requested REFERENT_OUT object (must be type ndi.epoch.epochset and NDI_BASE)\n  with the requested ndi.time.clocktype CLOCKTYPE_OUT.\n\n  T_OUT is the output time with respect to the ndi.time.timereference TIMEREF_OUT that incorporates REFERENT_OUT\n  and CLOCKTYPE_OUT with the appropriate epoch and time reference.\n\n  If the conversion cannot be made, T_OUT is empty and MSG contains a text message describing\n  why the conversion could not be made.\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.time.syncgraph.unique_id is inherited from superclass did.ido\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncrule.m/","title":"CLASS ndi.time.syncrule","text":"<pre><code>  SYNCRULE - create a new NDI_SYNCRULE for managing synchronization\n\n  NDI_SYNCRULE_OBJ = ndi.time.syncrule(...)\n   or\n  NDI_SYNCRULE_OBJ = ndi.time.syncrule(PARAMETERS)\n\n  Creates a new ndi.time.syncrule object with the given PARAMETERS (a structure).\n  This is an abstract class, so PARAMETERS must be empty.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncrule.m/#superclasses","title":"Superclasses","text":"<p>ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncrule.m/#properties","title":"Properties","text":"Property Description parameters identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncrule.m/#methods","title":"Methods","text":"Method Description apply apply an ndi.time.syncrule to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule eq are two ndi.time.syncrule objects equal? id return the identifier of an DID.IDO object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule isvalid is a unique ID number valid? isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form syncrule create a new NDI_SYNCRULE for managing synchronization unique_id Generate a unique ID number for DID databases (Static method)"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/syncrule.m/#methods-help","title":"Methods help","text":"<p>apply - apply an ndi.time.syncrule to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects</p> <pre><code>[COST, MAPPING] = APPLY(NDI_SYNCRULE_OBJ, EPOCHNODE_A, EPOCHNODE_B)\n\n  Given an ndi.time.syncrule object and two epochnodes returned from ndi.epoch.epochset/EPOCHNODES\n  this function attempts to identify whether a time synchronization can be made across\n  these epoch nodes. If so, a cost COST and an ndi.time.timemapping object MAPPING is returned.\n\n  Otherwise, COST and MAPPING are empty.\n\n  In the abstract class, COST and MAPPING are always empty.\n\n  See also: ndi.epoch.epochset/EPOCHNODES\n</code></pre> <p>eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule</p> <pre><code>EC = ELIGIBLECLOCKS(NDI_SYNCRULE_OBJ)\n\n  Returns a cell array of ndi.time.clocktype objects with types that can be processed by the\n  ndi.time.syncrule.\n\n  If EC is empty, then no information is conveyed about which ndi.time.clocktype objects\n  is valid (that is, it is not the case that the ndi.time.syncrule processes no types; instead, it has no specific limits).\n\n  In the abstract class, EC is empty ({}).\n\n  See also: ndi.time.syncrule/INELIGIBLECLOCKS\n</code></pre> <p>eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule</p> <pre><code>EES = ELIGIBLEEPOCHSETS(NDI_SYNCRULE_OBJ)\n\n  Returns a cell array of valid ndi.epoch.epochset subclasses that the rule can process.\n\n  If EES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes can be\n  processed by the ndi.time.syncrule. (That is, it is not the case that the NDI_SYNCTABLE cannot use any classes.)\n\n  NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here.\n\n  The abstract class ndi.time.syncrule always returns empty.\n\n  See also: ndi.time.syncrule/INELIGIBLEEPOCHSETS\n</code></pre> <p>eq - are two ndi.time.syncrule objects equal?</p> <pre><code>B = EQ(NDI_SYNCRULE_OBJ_A, NDI_SYNCRULE_OBJ_B)\n\n  Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal.\n  Otherwise, 0 is returned.\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.time.syncrule/id is inherited from superclass did.ido\n</code></pre> <p>ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule</p> <pre><code>IC = INELIGIBLECLOCKS(NDI_SYNCRULE_OBJ)\n\n  Returns a cell array of ndi.time.clocktype objects with types that cannot be processed by the\n  ndi.time.syncrule.\n\n  If IC is empty, then no information is conveyed about which ndi.time.clocktype objects\n  is valid (that is, it is not the case that the ndi.time.syncrule cannot be used on any types; instead, it has\n  no specific limits).\n\n  In the abstract class, IC is {ndi.time.clocktype('no_time')} .\n\n  See also: ndi.time.syncrule/ELIGIBLECLOCKS\n</code></pre> <p>ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule</p> <pre><code>IES = INELIGIBLEEPOCHSETS(NDI_SYNCRULE_OBJ)\n\n  Returns a cell array of ndi.epoch.epochset subclasses that the rule cannot process.\n\n  If IES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes cannot be\n  processed by the ndi.time.syncrule. (That is, it is not the case that the NDI_SYNCTABLE can use any class.)\n\n  NDI_EPOCHSETS that use the rule must not be members of the classes returned here, but may be descendents of those\n  classes.\n\n  The abstract class ndi.time.syncrule always returns empty.\n\n  See also: ndi.time.syncrule/ELIGIBLEEPOCHSETS\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.time.syncrule.isvalid is inherited from superclass did.ido\n</code></pre> <p>isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule</p> <pre><code>[B,MSG] = ISVALIDPARAMETERS(NDI_SYNCRULE_OBJ, PARAMETERS)\n\n  Returns 1 if PARAMETERS is a valid parameter structure for ndi.time.syncrule. Returns 0 otherwise.\n\n  If there is an error, MSG describes the error.\n\n  See also: ndi.time.syncrule/SETPARAMETERS\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.time.syncrule object</p> <pre><code>DOC = NEWDOCUMENT(NDI_SYNCRULE_OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.time.syncrule object.\n</code></pre> <p>searchquery - create a search for this ndi.time.syncrule object</p> <pre><code>SQ = SEARCHQUERY(NDI_SYNCRULE_OBJ)\n\n  Creates a search query for the ndi.time.syncgraph object.\n</code></pre> <p>setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form</p> <pre><code>NDI_SYNCRULE_OBJ = SETPARAMETERS(NDI_SYNCRULE_OBJ, PARAMETERS)\n\n  Sets the 'parameters' field of an ndi.time.syncrule object, while also checking that\n  the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS.\n\n  See also: ndi.time.syncrule/ISVALIDPARAMETERS\n</code></pre> <p>syncrule - create a new NDI_SYNCRULE for managing synchronization</p> <pre><code>NDI_SYNCRULE_OBJ = ndi.time.syncrule(...)\n   or\n  NDI_SYNCRULE_OBJ = ndi.time.syncrule(PARAMETERS)\n\n  Creates a new ndi.time.syncrule object with the given PARAMETERS (a structure).\n  This is an abstract class, so PARAMETERS must be empty.\n\n    Documentation for ndi.time.syncrule/syncrule\n       doc ndi.time.syncrule\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.time.syncrule.unique_id is inherited from superclass did.ido\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timemapping.m/","title":"CLASS ndi.time.timemapping","text":"<pre><code>  NDI.TIME.TIMEMAPPING - class for managing mapping of time across epochs and devices\n\n  Describes mapping from one time base to another. The base class, ndi.time.timemapping, provides\n  polynomial mapping, although usually only linear mapping is used.\n  The property MAPPING is a vector of length N+1 that describes the coefficients of a\n  polynomial such that:\n\n  t_out = mapping(1)*t_in^N + mapping(2)*t_in^(N-1) + ... mapping(N)*t_in + mapping(N+1)\n\n  Usually, one specifies a linear relationship only, with MAPPING = [scale shift] so that\n\n  t_out = scale * t_in + shift\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timemapping.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timemapping.m/#properties","title":"Properties","text":"Property Description mapping mapping parameters; in the ndi.time.timemapping base class, this is a polynomial (see help POLYVAL)"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timemapping.m/#methods","title":"Methods","text":"Method Description map perform a mapping from one time base to another timemapping ndi.time.timemapping"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timemapping.m/#methods-help","title":"Methods help","text":"<p>map - perform a mapping from one time base to another</p> <pre><code>T_OUT = MAP(NDI_TIMEMAPPING_OBJ, T_IN)\n\n  Perform the mapping described by NDI_TIMEMAPPING_OBJ from one time base to another.\n\n  In the base class ndi.time.timemapping, the mapping is a polynomial.\n</code></pre> <p>timemapping - ndi.time.timemapping</p> <pre><code>NDI_TIMEMAPPING_OBJ = ndi.time.timemapping()\n     or\n  NDI_TIMEMAPPING_OBJ = ndi.time.timemapping(MAPPING)\n\n  Creates a new ndi.time.timemapping object. In this base class,\n  the ndi.time.timemapping object specifies a polynomial mapping\n  from one time base to another.\n\n  If the function is called with no input arguments, then\n  the trivial mapping MAPPING = [ 1 0 ] is used; this corresponds\n  to the polynomial t_out = 1*t_in + 0.\n\n  Typically, the mapping is linear, so that MAPPING = [scale shift].\n\n  See also: POLYVAL\n\n    Documentation for ndi.time.timemapping/timemapping\n       doc ndi.time.timemapping\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timereference.m/","title":"CLASS ndi.time.timereference","text":"<pre><code>  NDI.TIME.TIMEREFERENCE - a class for specifying time relative to an NDI_CLOCK\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timereference.m/#superclasses","title":"Superclasses","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timereference.m/#properties","title":"Properties","text":"Property Description referent the ndi.daq.system, ndi.probe.*,... that is referred to (must be a subclass of ndi.epoch.epochset) clocktype the ndi.time.clocktype: can be 'utc', 'exp_global_time', 'dev_global_time', or 'dev_local_time' epoch the epoch that may be referred to (required if the time type is 'dev_local_time') time the time of the referent that is referred to session_ID the ID of the session that contains the time"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timereference.m/#methods","title":"Methods","text":"Method Description ndi_timereference_struct return a structure that describes an ndi.time.timereference object that lacks Matlab objects timereference creates a new time reference object"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timereference.m/#methods-help","title":"Methods help","text":"<p>ndi_timereference_struct - return a structure that describes an ndi.time.timereference object that lacks Matlab objects</p> <pre><code>A = NDI_TIMEREFERENCE_STRUCT(NDI_TIMEREF_OBJ)\n\n  Returns a structure with the following fields:\n  Fieldname                      | Description\n  --------------------------------------------------------------------------------\n  referent_epochsetname          | The epochsetname() of the referent\n  referent_classname             | The classname of the referent\n  clocktypestring                | The value of the clocktype\n  epoch                          | The epoch (either a string or a number)\n  session_ID                     | The session ID of the session that contains the epoch\n  time                           | The time\n</code></pre> <p>timereference - creates a new time reference object</p> <pre><code>OBJ = NDI.TIME.TIMEREFERENCE(REFERENT, CLOCKTYPE, EPOCH, TIME)\n\n  Creates a new ndi.time.timereference object. The REFERENT, EPOCH, and TIME must\n  specify a unique time.\n\n  REFERENT is any subclass of ndi.epoch.epochset object that has a 'session' property\n    (e.g., ndi.daq.system, ndi.element, etc...).\n  TYPE is the time type, can be 'utc', 'exp_global_time', or 'dev_global_time' or 'dev_local_time'\n  If TYPE is 'dev_local_time', then the EPOCH identifier is necessary. Otherwise, it can be empty.\n  If EPOCH is specified, then TIME is taken to be relative to the EPOCH number of the\n  device associated with CLOCK, even if the device keeps universal or time.\n\n  An alternative creator is available:\n\n  OBJ = ndi.time.timereference(NDI_SESSION_OBJ, NDI_TIMEREF_STRUCT)\n\n  where NDI_SESSION_OBJ is an ndi.session and NDI_TIMEREF_STRUCT is a structure\n  returned by ndi.time.timereference/NDI_TIMEREFERENCE_STRUCT. The NDI_SESSION_OBJ fields will\n  be searched to find the live REFERENT to create OBJ.\n\n    Documentation for ndi.time.timereference/timereference\n       doc ndi.time.timereference\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timeseries.m/","title":"CLASS ndi.time.timeseries","text":"<pre><code>  NDI_TIMESERIES - abstract class for managing time series data\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timeseries.m/#superclasses","title":"Superclasses","text":"<p>ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timeseries.m/#properties","title":"Properties","text":"<p>none</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timeseries.m/#methods","title":"Methods","text":"Method Description newdocument create a new ndi.document based on information in this object readtimeseries read a time series from this parent object (ndi.time.timeseries) samplerate return the sample rate of an ndi.time.timeseries object samples2times convert from the timeseries time to sample numbers searchquery create a search query to find this object as an ndi.document times2samples convert from the timeseries time to sample numbers timeseries create an ndi.time.timeseries object"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/timeseries.m/#methods-help","title":"Methods help","text":"<p>newdocument - create a new ndi.document based on information in this object</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_DOCUMENTSERVICE_OBJ)\n\n  Create a new ndi.document based on information in this class.\n\n  The base ndi.documentservice class returns empty.\n\nHelp for ndi.time.timeseries/newdocument is inherited from superclass ndi.documentservice\n</code></pre> <p>readtimeseries - read a time series from this parent object (ndi.time.timeseries)</p> <pre><code>[DATA, T, TIMEREF] = READTIMESERIES(NDI_TIMESERIES_OBJ, TIMEREF_OR_EPOCH, T0, T1)\n\n   Reads timeseries data from an ndi.time.timeseries object. The DATA and time information T that are\n   returned depend on the the specific subclass of ndi.time.timeseries that is called (see READTIMESERIESEPOCH).\n\n   TIMEREF_OR_EPOCH is either an ndi.time.timereference object indicating the time reference for\n   T0, T1, or it can be a single number, which will indicate the data are to be read from that\n   epoch.\n\n   DATA is the data for the probe.  T is a time structure, in units of TIMEREF if it is an\n   ndi.time.timereference object or in units of the epoch if an epoch is passed.  The TIMEREF is returned.\n</code></pre> <p>samplerate - return the sample rate of an ndi.time.timeseries object</p> <pre><code>SR = SAMPLERATE(NDI_TIMESERIES_OBJ, EPOCH)\n\n  Returns the sampling rate of a given ndi.time.timeseries object for the epoch\n  EPOCH. EPOCH can be specified as an index or EPOCH_ID.\n\n  If NDI_TIMESERIES_OBJ is not regularly sampled, then -1 is returned.\n</code></pre> <p>samples2times - convert from the timeseries time to sample numbers</p> <pre><code>SAMPLES = SAMPLES2TIMES(NDI_TIMESERIES_OBJ, EPOCH, TIMES)\n\n  For a given ndi.time.timeseries object and a recording epoch EPOCH,\n  return the sample index numbers SAMPLE that corresponds to the times TIMES.\n  The first sample in the epoch is 1.\n  The TIMES requested might be out of bounds of the EPOCH; no checking is performed.\n\n  TODO: convert times to dev_local_clock\n</code></pre> <p>searchquery - create a search query to find this object as an ndi.document</p> <pre><code>SQ = SEARCHQUERY(NDI_DOCUMENTSERVICE_OBJ)\n\n  Return a search query that can be used to find this object's representation as an\n  ndi.document.\n\n  The base class ndi.documentservice just returns empty.\n\nHelp for ndi.time.timeseries/searchquery is inherited from superclass ndi.documentservice\n</code></pre> <p>times2samples - convert from the timeseries time to sample numbers</p> <pre><code>SAMPLES = TIMES2SAMPLES(NDI_TIMESERIES_OBJ, EPOCH, TIMES)\n\n  For a given ndi.time.timeseries object and a recording epoch EPOCH,\n  return the sample index numbers SAMPLE that corresponds to the times TIMES.\n  The first sample in the epoch is 1.\n  The TIMES requested might be out of bounds of the EPOCH; no checking is performed.\n</code></pre> <p>timeseries - create an ndi.time.timeseries object</p> <pre><code>NDI_TIMESERIES_OBJ = ndi.time.timeseries()\n\n  This function creates an ndi.time.timeseries object, which is an\n  abstract class that defines methods for other objects that deal with\n  time series.\n\n    Documentation for ndi.time.timeseries/timeseries\n       doc ndi.time.timeseries\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bfun/samples2times.m/","title":"ndi.time.fun.samples2times","text":"<pre><code>  SAMPLES2TIMES - convert sample index numbers/sample numbers to sample times\n\n  T = SAMPLES2TIMES(S, T0_T1, SR)\n\n  Given the index numbers of samples in vector S, and a range of times in the recording\n  T0_T1 = [ T0 T1 ], and a fixed sample rate SR, calculate the time of each\n  sample S. S(i) is the sample index number of T(i).\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bfun/times2samples.m/","title":"ndi.time.fun.times2samples","text":"<pre><code>  TIMES2SAMPLES - convert sample times to sample index numbers / sample numbers\n\n  S = TIMES2SAMPLES(T, T0_T1, SR)\n\n  Given the times of samples in vector T, and a range of times in the recording\n  T0_T1 = [ T0 T1 ], and a fixed sample rate SR, calculate the index number of each\n  sample S. S(i) is the sample index number of T(i).\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/commontriggers.m/","title":"CLASS ndi.time.syncrule.commontriggers","text":"<pre><code>  COMMONTRIGGERS - create a new ndi.time.syncrule.commontriggers for managing synchronization\n\n  NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi.time.syncrule.commontriggers()\n       or\n  NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi.time.syncrule.commontriggers(PARAMETERS)\n\n  Creates a new ndi.time.syncrule.commontriggers object with the given PARAMETERS (a structure, see below).\n  If no inputs are provided, then the default PARAMETERS (see below) is used.\n\n  PARAMETERS should be a structure with the following entries:\n  Field (default)              | Description\n  -------------------------------------------------------------------\n  daqsystem1                   | The name of the first daq system\n  channel_daq1                 | The channel on the first daq system\n  daqsystem2                   | The name of the second daq system\n  channel_daq2                 | The channel on the second daq system\n  number_fullpath_matches      | Number fullpath file matches that need to be true to check channels\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/commontriggers.m/#superclasses","title":"Superclasses","text":"<p>ndi.time.syncrule, ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/commontriggers.m/#properties","title":"Properties","text":"Property Description parameters identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/commontriggers.m/#methods","title":"Methods","text":"Method Description apply apply an ndi.time.syncrule.commontriggers to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects commontriggers create a new ndi.time.syncrule.commontriggers for managing synchronization eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers eq are two ndi.time.syncrule objects equal? id return the identifier of an DID.IDO object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers isvalid is a unique ID number valid? isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule.commontriggers newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form unique_id Generate a unique ID number for DID databases (Static method)"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/commontriggers.m/#methods-help","title":"Methods help","text":"<p>apply - apply an ndi.time.syncrule.commontriggers to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects</p> <pre><code>[COST, MAPPING] = APPLY(NDI_SYNCRULE_COMMONTRIGGERS_OBJ, EPOCHNODE_A, EPOCHNODE_B)\n\n  Given an ndi.time.syncrule.commontriggers object and two EPOCHNODES (see ndi.epoch.epochset/EPOCHNODES),\n  this function attempts to identify whether a time synchronization can be made across these epochs. If so,\n  a cost COST and an ndi.time.timemapping object MAPPING is returned.\n\n  Otherwise, COST and MAPPING are empty.\n</code></pre> <p>commontriggers - create a new ndi.time.syncrule.commontriggers for managing synchronization</p> <pre><code>NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi.time.syncrule.commontriggers()\n       or\n  NDI_SYNCRULE_COMMONTRIGGERS_OBJ = ndi.time.syncrule.commontriggers(PARAMETERS)\n\n  Creates a new ndi.time.syncrule.commontriggers object with the given PARAMETERS (a structure, see below).\n  If no inputs are provided, then the default PARAMETERS (see below) is used.\n\n  PARAMETERS should be a structure with the following entries:\n  Field (default)              | Description\n  -------------------------------------------------------------------\n  daqsystem1                   | The name of the first daq system\n  channel_daq1                 | The channel on the first daq system\n  daqsystem2                   | The name of the second daq system\n  channel_daq2                 | The channel on the second daq system\n  number_fullpath_matches      | Number fullpath file matches that need to be true to check channels\n\n    Documentation for ndi.time.syncrule.commontriggers/commontriggers\n       doc ndi.time.syncrule.commontriggers\n</code></pre> <p>eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule</p> <pre><code>EC = ELIGIBLECLOCKS(NDI_SYNCRULE_OBJ)\n\n  Returns a cell array of ndi.time.clocktype objects with types that can be processed by the\n  ndi.time.syncrule.\n\n  If EC is empty, then no information is conveyed about which ndi.time.clocktype objects\n  is valid (that is, it is not the case that the ndi.time.syncrule processes no types; instead, it has no specific limits).\n\n  In the abstract class, EC is empty ({}).\n\n  See also: ndi.time.syncrule.commontriggers/INELIGIBLECLOCKS\n\nHelp for ndi.time.syncrule.commontriggers/eligibleclocks is inherited from superclass ndi.time.syncrule\n</code></pre> <p>eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers</p> <pre><code>EES = ELIGIBLEEPOCHSETS(NDI_SYNCRULE_COMMONTRIGGERS_OBJ)\n\n  Returns a cell array of valid ndi.epoch.epochset subclasses that the rule can process.\n\n  If EES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes can be\n  processed by the ndi.time.syncrule.commontriggers. (That is, it is not the case that the NDI_SYNCTABLE cannot use any classes.)\n\n  ndi.time.syncrule.commontriggers returns {'ndi.daq.system'} (it works with ndi.daq.system objects).\n\n  NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here.\n\n  See also: ndi.time.syncrule.commontriggers/INELIGIBLEEPOCHSETS\n</code></pre> <p>eq - are two ndi.time.syncrule objects equal?</p> <pre><code>B = EQ(NDI_SYNCRULE_OBJ_A, NDI_SYNCRULE_OBJ_B)\n\n  Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal.\n  Otherwise, 0 is returned.\n\nHelp for ndi.time.syncrule.commontriggers/eq is inherited from superclass ndi.time.syncrule\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.time.syncrule.commontriggers/id is inherited from superclass did.ido\n</code></pre> <p>ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule</p> <pre><code>IC = INELIGIBLECLOCKS(NDI_SYNCRULE_OBJ)\n\n  Returns a cell array of ndi.time.clocktype objects with types that cannot be processed by the\n  ndi.time.syncrule.\n\n  If IC is empty, then no information is conveyed about which ndi.time.clocktype objects\n  is valid (that is, it is not the case that the ndi.time.syncrule cannot be used on any types; instead, it has\n  no specific limits).\n\n  In the abstract class, IC is {ndi.time.clocktype('no_time')} .\n\n  See also: ndi.time.syncrule.commontriggers/ELIGIBLECLOCKS\n\nHelp for ndi.time.syncrule.commontriggers/ineligibleclocks is inherited from superclass ndi.time.syncrule\n</code></pre> <p>ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.commontriggers</p> <pre><code>IES = INELIGIBLEEPOCHSETS(NDI_SYNCRULE_COMMONTRIGGERS_OBJ)\n\n  Returns a cell array of ndi.epoch.epochset subclasses that the rule cannot process.\n\n  If IES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes cannot be\n  processed by the ndi.time.syncrule.commontriggers. (That is, it is not the case that the NDI_SYNCTABLE can use any class.)\n\n  ndi.time.syncrule.commontriggers does not work with ndi.epoch.epochset, NDI_EPOCHSETPARAM, or ndi.file.navigator classes.\n\n  NDI_EPOCHSETS that use the rule must not be members of the classes returned here, but may be descendents of those\n  classes.\n\n  See also: ndi.time.syncrule.commontriggers/ELIGIBLEEPOCHSETS\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.time.syncrule.commontriggers.isvalid is inherited from superclass did.ido\n</code></pre> <p>isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule.commontriggers</p> <pre><code>[B,MSG] = ISVALIDPARAMETERS(NDI_SYNCRULE_COMMONTRIGGERS_OBJ, PARAMETERS)\n\n  Returns 1 if PARAMETERS is a valid parameter structure for ndi.time.syncrule.commontriggers.\n  Returns 0 otherwise.\n\n  If there is an error, MSG contains an error message.\n\n  PARAMETERS should be a structure with the following entries:\n  Field (default)              | Description\n  -------------------------------------------------------------------\n  number_fullpath_matches (2)  | The number of full path matches of the underlying\n                               |  filenames that must match in order for the epochs to match.\n\n  See also: ndi.time.syncrule/SETPARAMETERS\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.time.syncrule object</p> <pre><code>DOC = NEWDOCUMENT(NDI_SYNCRULE_OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.time.syncrule object.\n\nHelp for ndi.time.syncrule.commontriggers/newdocument is inherited from superclass ndi.time.syncrule\n</code></pre> <p>searchquery - create a search for this ndi.time.syncrule object</p> <pre><code>SQ = SEARCHQUERY(NDI_SYNCRULE_OBJ)\n\n  Creates a search query for the ndi.time.syncgraph object.\n\nHelp for ndi.time.syncrule.commontriggers/searchquery is inherited from superclass ndi.time.syncrule\n</code></pre> <p>setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form</p> <pre><code>NDI_SYNCRULE_OBJ = SETPARAMETERS(NDI_SYNCRULE_OBJ, PARAMETERS)\n\n  Sets the 'parameters' field of an ndi.time.syncrule object, while also checking that\n  the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS.\n\n  See also: ndi.time.syncrule.commontriggers/ISVALIDPARAMETERS\n\nHelp for ndi.time.syncrule.commontriggers/setparameters is inherited from superclass ndi.time.syncrule\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.time.syncrule.commontriggers.unique_id is inherited from superclass did.ido\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filefind.m/","title":"CLASS ndi.time.syncrule.filefind","text":"<pre><code>  NDI.TIME.SYNCRULE.FILEFIND - create a new ndi.time.syncrule.filefind for managing synchronization\n\n  NDI_SYNCRULE_FILEFIND_OBJ = ndi.time.syncrule.filefind()\n       or\n  NDI_SYNCRULE_FILEFIND_OBJ = ndi.time.syncrule.filefind(PARAMETERS)\n\n  Creates a new ndi.time.syncrule.filefind object with the given PARAMETERS (a structure, see below).\n  If no inputs are provided, then the default PARAMETERS (see below) is used.\n\n  PARAMETERS should be a structure with the following entries:\n  Field (default)              | Description\n  -------------------------------------------------------------------\n  number_fullpath_matches (1)  | The number of full path matches of the underlying\n                               |  filenames that must match in order for the epochs to match.\n  syncfilename ('syncfile.txt')| The text synchronization file to find\n                               |  This file should have 2 numbers in it; a shift and a scale.\n                               |  TimeOnDaqSystem2 = shift + scale * TimeOnDaqSystem1\n                               |  This file should be in the second daq system's epoch files.\n  daqsystem1 ('mydaq1')        | The name of the first daq system\n  daqsystem2 ('mydaq2')        | The name of the second daq system\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filefind.m/#superclasses","title":"Superclasses","text":"<p>ndi.time.syncrule, ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filefind.m/#properties","title":"Properties","text":"Property Description parameters identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filefind.m/#methods","title":"Methods","text":"Method Description apply apply an ndi.time.syncrule.filefind to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind eq are two ndi.time.syncrule objects equal? filefind create a new ndi.time.syncrule.filefind for managing synchronization id return the identifier of an DID.IDO object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind isvalid is a unique ID number valid? isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule.filefind newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form unique_id Generate a unique ID number for DID databases (Static method)"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filefind.m/#methods-help","title":"Methods help","text":"<p>apply - apply an ndi.time.syncrule.filefind to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects</p> <pre><code>[COST, MAPPING] = APPLY(NDI_SYNCRULE_FILEFIND_OBJ, EPOCHNODE_A, EPOCHNODE_B)\n\n  Given an ndi.time.syncrule.filefind object and two EPOCHNODES (see ndi.epoch.epochset/EPOCHNODES),\n  this function attempts to identify whether a time synchronization can be made across these epochs. If so,\n  a cost COST and an ndi.time.timemapping object MAPPING is returned.\n\n  Otherwise, COST and MAPPING are empty.\n</code></pre> <p>eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule</p> <pre><code>EC = ELIGIBLECLOCKS(NDI_SYNCRULE_OBJ)\n\n  Returns a cell array of ndi.time.clocktype objects with types that can be processed by the\n  ndi.time.syncrule.\n\n  If EC is empty, then no information is conveyed about which ndi.time.clocktype objects\n  is valid (that is, it is not the case that the ndi.time.syncrule processes no types; instead, it has no specific limits).\n\n  In the abstract class, EC is empty ({}).\n\n  See also: ndi.time.syncrule.filefind/INELIGIBLECLOCKS\n\nHelp for ndi.time.syncrule.filefind/eligibleclocks is inherited from superclass ndi.time.syncrule\n</code></pre> <p>eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind</p> <pre><code>EES = ELIGIBLEEPOCHSETS(NDI_SYNCRULE_FILEFIND_OBJ)\n\n  Returns a cell array of valid ndi.epoch.epochset subclasses that the rule can process.\n\n  If EES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes can be\n  processed by the ndi.time.syncrule.filefind. (That is, it is not the case that the NDI_SYNCTABLE cannot use any classes.)\n\n  ndi.time.syncrule.filefind returns {'ndi.daq.system'} (it works with ndi.daq.system objects).\n\n  NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here.\n\n  See also: ndi.time.syncrule.filefind/INELIGIBLEEPOCHSETS\n</code></pre> <p>eq - are two ndi.time.syncrule objects equal?</p> <pre><code>B = EQ(NDI_SYNCRULE_OBJ_A, NDI_SYNCRULE_OBJ_B)\n\n  Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal.\n  Otherwise, 0 is returned.\n\nHelp for ndi.time.syncrule.filefind/eq is inherited from superclass ndi.time.syncrule\n</code></pre> <p>filefind - create a new ndi.time.syncrule.filefind for managing synchronization</p> <pre><code>NDI_SYNCRULE_FILEFIND_OBJ = ndi.time.syncrule.filefind()\n       or\n  NDI_SYNCRULE_FILEFIND_OBJ = ndi.time.syncrule.filefind(PARAMETERS)\n\n  Creates a new ndi.time.syncrule.filefind object with the given PARAMETERS (a structure, see below).\n  If no inputs are provided, then the default PARAMETERS (see below) is used.\n\n  PARAMETERS should be a structure with the following entries:\n  Field (default)              | Description\n  -------------------------------------------------------------------\n  number_fullpath_matches (1)  | The number of full path matches of the underlying\n                               |  filenames that must match in order for the epochs to match.\n  syncfilename ('syncfile.txt')| The text synchronization file to find\n                               |  This file should have 2 numbers in it; a shift and a scale.\n                               |  TimeOnDaqSystem2 = shift + scale * TimeOnDaqSystem1\n                               |  This file should be in the second daq system's epoch files.\n  daqsystem1 ('mydaq1')        | The name of the first daq system\n  daqsystem2 ('mydaq2')        | The name of the second daq system\n\n    Documentation for ndi.time.syncrule.filefind/filefind\n       doc ndi.time.syncrule.filefind\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.time.syncrule.filefind/id is inherited from superclass did.ido\n</code></pre> <p>ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule</p> <pre><code>IC = INELIGIBLECLOCKS(NDI_SYNCRULE_OBJ)\n\n  Returns a cell array of ndi.time.clocktype objects with types that cannot be processed by the\n  ndi.time.syncrule.\n\n  If IC is empty, then no information is conveyed about which ndi.time.clocktype objects\n  is valid (that is, it is not the case that the ndi.time.syncrule cannot be used on any types; instead, it has\n  no specific limits).\n\n  In the abstract class, IC is {ndi.time.clocktype('no_time')} .\n\n  See also: ndi.time.syncrule.filefind/ELIGIBLECLOCKS\n\nHelp for ndi.time.syncrule.filefind/ineligibleclocks is inherited from superclass ndi.time.syncrule\n</code></pre> <p>ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filefind</p> <pre><code>IES = INELIGIBLEEPOCHSETS(NDI_SYNCRULE_FILEFIND_OBJ)\n\n  Returns a cell array of ndi.epoch.epochset subclasses that the rule cannot process.\n\n  If IES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes cannot be\n  processed by the ndi.time.syncrule.filefind. (That is, it is not the case that the NDI_SYNCTABLE can use any class.)\n\n  ndi.time.syncrule.filefind does not work with ndi.epoch.epochset, NDI_EPOCHSETPARAM, or ndi.file.navigator classes.\n\n  NDI_EPOCHSETS that use the rule must not be members of the classes returned here, but may be descendents of those\n  classes.\n\n  See also: ndi.time.syncrule.filefind/ELIGIBLEEPOCHSETS\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.time.syncrule.filefind.isvalid is inherited from superclass did.ido\n</code></pre> <p>isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule.filefind</p> <pre><code>[B,MSG] = ISVALIDPARAMETERS(NDI_SYNCRULE_FILEFIND_OBJ, PARAMETERS)\n\n  Returns 1 if PARAMETERS is a valid parameter structure for ndi.time.syncrule.filefind.\n  Returns 0 otherwise.\n\n  If there is an error, MSG contains an error message.\n\n  PARAMETERS should be a structure with the following entries:\n  Field (default)              | Description\n  -------------------------------------------------------------------\n  number_fullpath_matches (2)  | The number of full path matches of the underlying\n                               |  filenames that must match in order for the epochs to match.\n\n  See also: ndi.time.syncrule/SETPARAMETERS\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.time.syncrule object</p> <pre><code>DOC = NEWDOCUMENT(NDI_SYNCRULE_OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.time.syncrule object.\n\nHelp for ndi.time.syncrule.filefind/newdocument is inherited from superclass ndi.time.syncrule\n</code></pre> <p>searchquery - create a search for this ndi.time.syncrule object</p> <pre><code>SQ = SEARCHQUERY(NDI_SYNCRULE_OBJ)\n\n  Creates a search query for the ndi.time.syncgraph object.\n\nHelp for ndi.time.syncrule.filefind/searchquery is inherited from superclass ndi.time.syncrule\n</code></pre> <p>setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form</p> <pre><code>NDI_SYNCRULE_OBJ = SETPARAMETERS(NDI_SYNCRULE_OBJ, PARAMETERS)\n\n  Sets the 'parameters' field of an ndi.time.syncrule object, while also checking that\n  the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS.\n\n  See also: ndi.time.syncrule.filefind/ISVALIDPARAMETERS\n\nHelp for ndi.time.syncrule.filefind/setparameters is inherited from superclass ndi.time.syncrule\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.time.syncrule.filefind.unique_id is inherited from superclass did.ido\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filematch.m/","title":"CLASS ndi.time.syncrule.filematch","text":"<pre><code>  FILEMATCH - create a new ndi.time.syncrule.filematch for managing synchronization\n\n  NDI_SYNCRULE_FILEMATCH_OBJ = ndi.time.syncrule.filematch()\n       or\n  NDI_SYNCRULE_FILEMATCH_OBJ = ndi.time.syncrule.filematch(PARAMETERS)\n\n  Creates a new ndi.time.syncrule.filematch object with the given PARAMETERS (a structure, see below).\n  If no inputs are provided, then the default PARAMETERS (see below) is used.\n\n  PARAMETERS should be a structure with the following entries:\n  Field (default)              | Description\n  -------------------------------------------------------------------\n  number_fullpath_matches (2)  | The number of full path matches of the underlying\n                               |  filenames that must match in order for the epochs to match.\n\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filematch.m/#superclasses","title":"Superclasses","text":"<p>ndi.time.syncrule, ndi.ido, did.ido, ndi.documentservice</p>"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filematch.m/#properties","title":"Properties","text":"Property Description parameters identifier"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filematch.m/#methods","title":"Methods","text":"Method Description apply apply an ndi.time.syncrule.filematch to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects eligibleclocks return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule eligibleepochsets return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch eq are two ndi.time.syncrule objects equal? filematch create a new ndi.time.syncrule.filematch for managing synchronization id return the identifier of an DID.IDO object ineligibleclocks return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule ineligibleepochsets return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch isvalid is a unique ID number valid? isvalidparameters determine if a parameter structure is valid for a given ndi.time.syncrule.filematch newdocument create a new ndi.document for an ndi.time.syncrule object searchquery create a search for this ndi.time.syncrule object setparameters set the parameters for an ndi.time.syncrule object, checking for valid form unique_id Generate a unique ID number for DID databases (Static method)"},{"location":"NDI-matlab/reference/%2Bndi/%2Btime/%2Bsyncrule/filematch.m/#methods-help","title":"Methods help","text":"<p>apply - apply an ndi.time.syncrule.filematch to obtain a cost and ndi.time.timemapping between two ndi.epoch.epochset objects</p> <pre><code>[COST, MAPPING] = APPLY(NDI_SYNCRULE_FILEMATCH_OBJ, EPOCHNODE_A, EPOCHNODE_B)\n\n  Given an ndi.time.syncrule.filematch object and two EPOCHNODES (see ndi.epoch.epochset/EPOCHNODES),\n  this function attempts to identify whether a time synchronization can be made across these epochs. If so,\n  a cost COST and an ndi.time.timemapping object MAPPING is returned.\n\n  Otherwise, COST and MAPPING are empty.\n</code></pre> <p>eligibleclocks - return a cell array of eligible NDI_CLOCKTYPEs that can be used with ndi.time.syncrule</p> <pre><code>EC = ELIGIBLECLOCKS(NDI_SYNCRULE_OBJ)\n\n  Returns a cell array of ndi.time.clocktype objects with types that can be processed by the\n  ndi.time.syncrule.\n\n  If EC is empty, then no information is conveyed about which ndi.time.clocktype objects\n  is valid (that is, it is not the case that the ndi.time.syncrule processes no types; instead, it has no specific limits).\n\n  In the abstract class, EC is empty ({}).\n\n  See also: ndi.time.syncrule.filematch/INELIGIBLECLOCKS\n\nHelp for ndi.time.syncrule.filematch/eligibleclocks is inherited from superclass ndi.time.syncrule\n</code></pre> <p>eligibleepochsets - return a cell array of eligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch</p> <pre><code>EES = ELIGIBLEEPOCHSETS(NDI_SYNCRULE_FILEMATCH_OBJ)\n\n  Returns a cell array of valid ndi.epoch.epochset subclasses that the rule can process.\n\n  If EES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes can be\n  processed by the ndi.time.syncrule.filematch. (That is, it is not the case that the NDI_SYNCTABLE cannot use any classes.)\n\n  ndi.time.syncrule.filematch returns {'ndi.daq.system'} (it works with ndi.daq.system objects).\n\n  NDI_EPOCHSETS that use the rule must be members or descendents of the classes returned here.\n\n  See also: ndi.time.syncrule.filematch/INELIGIBLEEPOCHSETS\n</code></pre> <p>eq - are two ndi.time.syncrule objects equal?</p> <pre><code>B = EQ(NDI_SYNCRULE_OBJ_A, NDI_SYNCRULE_OBJ_B)\n\n  Returns 1 if the parameters of NDI_SYNCRULE_OBJ_A and NDI_SYNCRULE_OBJ_B are equal.\n  Otherwise, 0 is returned.\n\nHelp for ndi.time.syncrule.filematch/eq is inherited from superclass ndi.time.syncrule\n</code></pre> <p>filematch - create a new ndi.time.syncrule.filematch for managing synchronization</p> <pre><code>NDI_SYNCRULE_FILEMATCH_OBJ = ndi.time.syncrule.filematch()\n       or\n  NDI_SYNCRULE_FILEMATCH_OBJ = ndi.time.syncrule.filematch(PARAMETERS)\n\n  Creates a new ndi.time.syncrule.filematch object with the given PARAMETERS (a structure, see below).\n  If no inputs are provided, then the default PARAMETERS (see below) is used.\n\n  PARAMETERS should be a structure with the following entries:\n  Field (default)              | Description\n  -------------------------------------------------------------------\n  number_fullpath_matches (2)  | The number of full path matches of the underlying\n                               |  filenames that must match in order for the epochs to match.\n\n    Documentation for ndi.time.syncrule.filematch/filematch\n       doc ndi.time.syncrule.filematch\n</code></pre> <p>id - return the identifier of an DID.IDO object</p> <pre><code>IDENTIFIER = ID(DID.IDO_OBJ)\n\n  Returns the unique identifier of an DID.IDO object.\n\nHelp for ndi.time.syncrule.filematch/id is inherited from superclass did.ido\n</code></pre> <p>ineligibleclocks - return a cell array of ineligible NDI_CLOCKTYPEs that cannot be used with ndi.time.syncrule</p> <pre><code>IC = INELIGIBLECLOCKS(NDI_SYNCRULE_OBJ)\n\n  Returns a cell array of ndi.time.clocktype objects with types that cannot be processed by the\n  ndi.time.syncrule.\n\n  If IC is empty, then no information is conveyed about which ndi.time.clocktype objects\n  is valid (that is, it is not the case that the ndi.time.syncrule cannot be used on any types; instead, it has\n  no specific limits).\n\n  In the abstract class, IC is {ndi.time.clocktype('no_time')} .\n\n  See also: ndi.time.syncrule.filematch/ELIGIBLECLOCKS\n\nHelp for ndi.time.syncrule.filematch/ineligibleclocks is inherited from superclass ndi.time.syncrule\n</code></pre> <p>ineligibleepochsets - return a cell array of ineligible ndi.epoch.epochset class names for ndi.time.syncrule.filematch</p> <pre><code>IES = INELIGIBLEEPOCHSETS(NDI_SYNCRULE_FILEMATCH_OBJ)\n\n  Returns a cell array of ndi.epoch.epochset subclasses that the rule cannot process.\n\n  If IES is empty, then no information is conveyed about which ndi.epoch.epochset subtypes cannot be\n  processed by the ndi.time.syncrule.filematch. (That is, it is not the case that the NDI_SYNCTABLE can use any class.)\n\n  ndi.time.syncrule.filematch does not work with ndi.epoch.epochset, NDI_EPOCHSETPARAM, or ndi.file.navigator classes.\n\n  NDI_EPOCHSETS that use the rule must not be members of the classes returned here, but may be descendents of those\n  classes.\n\n  See also: ndi.time.syncrule.filematch/ELIGIBLEEPOCHSETS\n</code></pre> <p>isvalid - is a unique ID number valid?</p> <pre><code>B = isvalid(ID)\n\n  Returns true if ID matches the structure of a did.ido identifier and\n  false otherwise. A valid ID must have 16 hexadecimal digits in\n  0-9 or a-f, an underscore, and then 16 more hexadecimal digits.\n\nHelp for ndi.time.syncrule.filematch.isvalid is inherited from superclass did.ido\n</code></pre> <p>isvalidparameters - determine if a parameter structure is valid for a given ndi.time.syncrule.filematch</p> <pre><code>[B,MSG] = ISVALIDPARAMETERS(NDI_SYNCRULE_FILEMATCH_OBJ, PARAMETERS)\n\n  Returns 1 if PARAMETERS is a valid parameter structure for ndi.time.syncrule.filematch.\n  Returns 0 otherwise.\n\n  If there is an error, MSG contains an error message.\n\n  PARAMETERS should be a structure with the following entries:\n  Field (default)              | Description\n  -------------------------------------------------------------------\n  number_fullpath_matches (2)  | The number of full path matches of the underlying\n                               |  filenames that must match in order for the epochs to match.\n\n  See also: ndi.time.syncrule/SETPARAMETERS\n</code></pre> <p>newdocument - create a new ndi.document for an ndi.time.syncrule object</p> <pre><code>DOC = NEWDOCUMENT(NDI_SYNCRULE_OBJ)\n\n  Creates an ndi.document object DOC that represents the\n     ndi.time.syncrule object.\n\nHelp for ndi.time.syncrule.filematch/newdocument is inherited from superclass ndi.time.syncrule\n</code></pre> <p>searchquery - create a search for this ndi.time.syncrule object</p> <pre><code>SQ = SEARCHQUERY(NDI_SYNCRULE_OBJ)\n\n  Creates a search query for the ndi.time.syncgraph object.\n\nHelp for ndi.time.syncrule.filematch/searchquery is inherited from superclass ndi.time.syncrule\n</code></pre> <p>setparameters - set the parameters for an ndi.time.syncrule object, checking for valid form</p> <pre><code>NDI_SYNCRULE_OBJ = SETPARAMETERS(NDI_SYNCRULE_OBJ, PARAMETERS)\n\n  Sets the 'parameters' field of an ndi.time.syncrule object, while also checking that\n  the struct PARAMETERS specifies a valid set of parameters using ISVALIDPARAMETERS.\n\n  See also: ndi.time.syncrule.filematch/ISVALIDPARAMETERS\n\nHelp for ndi.time.syncrule.filematch/setparameters is inherited from superclass ndi.time.syncrule\n</code></pre> <p>unique_id - Generate a unique ID number for DID databases (Static method)</p> <pre><code>ID = DID.IDO.UNIQUE_ID()\n\n  Generates a unique ID character array based on the current time and a random\n  number. It is a hexadecimal representation of the serial date number in\n  UTC Leap Seconds time. The serial date number is the number of days since January 0, 0000 at 0:00:00.\n  The integer portion of the date is the whole number of days and the fractional part of the date number\n  is the fraction of days.\n\n  ID = [NUM2HEX(SERIAL_DATE_NUMBER) '_' NUM2HEX(RAND)]\n\n  See also: NUM2HEX, NOW, RAND\n\nHelp for ndi.time.syncrule.filematch.unique_id is inherited from superclass did.ido\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Butil/choosefile.m/","title":"ndi.util.choosefile","text":"<pre><code>  ndi.util.choosefile - ask user to choose a file graphically\n\n  [SUCCESS, FILENAME, REPLACES] = ndi.util.choosefile(PROMPT, DEFAULTFILENAME, DLGTITLE, EXTENSION_LIST)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Butil/choosefileordir.m/","title":"ndi.util.choosefileordir","text":"<pre><code>  CHOOSEFILEORDIR - ask user to choose a file graphically\n\n  [SUCCESS, FILENAME, REPLACES] = ndi.util.choosefileordir(PROMPT, DEFAULTFILENAME, DLGTITLE, EXTENSION_LIST)\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Butil/downsampleTimeseries.m/","title":"ndi.util.downsampleTimeseries","text":"<pre><code> DOWNSAMPLETIMESERIES Downsamples a time series matrix after applying a low-pass filter.\n\n    [t_out, d_out] = DOWNSAMPLETIMESERIES(t_in, d_in, LP) downsamples the\n    input time series data d_in, after applying a Chebyshev Type I low-pass\n    filter to prevent aliasing, *if necessary*.\n\n    Inputs:\n        t_in  - A vector representing the time values.  This can be a\n                double vector (with units of seconds) or a MATLAB datetime object.\n                It is assumed samples are equally spaced in time.\n        d_in  - A matrix where each column represents a different channel of data.\n                The number of rows in d_in must match the length of t_in.\n        LP    - The low-pass frequency (in Hz).  Frequencies above this value\n                will be attenuated by the filter *if downsampling is required*.\n\n    Outputs:\n        t_out - The downsampled time vector.\n        d_out - The downsampled and filtered data matrix.  If no downsampling\n                is performed, the output data will be identical to the input data.\n\n    Details:\n        The function first determines the sampling frequency of the input data.\n        If the sampling frequency is greater than twice the specified low-pass\n        frequency (LP), a downsampling operation is performed.  A 4th order\n        Chebyshev Type I filter with 0.8 dB of passband ripple is used as an\n        anti-aliasing filter prior to downsampling. The data is then\n        downsampled to a sampling frequency of 2*LP.  If the original\n        sampling frequency is not greater than 2*LP, the original data is\n        returned *without filtering*.\n\n    Example:\n        % Generate a sample signal with two sine waves.\n        t = 0:0.001:1;  % 1 kHz sampling rate\n        d = sin(2*pi*5*t)' + 0.5*cos(2*pi*50*t)'; % 5 Hz and 50 Hz components\n\n        % Downsample to 20 Hz (LP = 10 Hz)\n        [t_down, d_down] = mlt.downsampleTimeseries(t, d, 10);\n\n        % Plot the original and downsampled signals.\n        figure;\n        subplot(2,1,1);\n        plot(t, d);\n        title('Original Signal');\n        xlabel('Time (s)');\n        ylabel('Amplitude');\n\n        subplot(2,1,2);\n        plot(t_down, d_down);\n        title('Downsampled Signal (LP = 10 Hz)');\n        xlabel('Time (s)');\n        ylabel('Amplitude');\n\n        % Example with no downsampling:\n        [t_no_down, d_no_down] = mlt.downsampleTimeseries(t, d, 600); % LP &gt; fs/2\n        % t_no_down and d_no_down will be the same as t and d.\n\n    See also CHEBY1, FILTFILT, RESAMPLE.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Butil/toolboxdir.m/","title":"ndi.util.toolboxdir","text":"<pre><code>ndi.util.toolboxdir is a function.\n    directoryPath = ndi.util.toolboxdir\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Butil/unwrapTableCellContent.m/","title":"ndi.util.unwrapTableCellContent","text":"<pre><code> UNWRAPTABLECELLCONTENT Recursively unwraps content from a potentially nested table cell.\n\n    UNWRAPPEDVALUE = NDI.UTIL.UNWRAPTABLECELLCONTENT(CELLVALUE)\n\n    This utility function takes a value, which is often a 1x1 cell array\n    when read from a MATLAB table, and unwraps it to retrieve the core data.\n    It handles cases where cells might be nested.\n\n    Inputs:\n        cellValue - The value from a table cell. This can be a direct value\n                    (numeric, char, string) or a cell array (potentially nested).\n\n    Outputs:\n        unwrappedValue - The innermost value. If the original or any nested\n                         cell is empty, or if the content is an empty array `[]`,\n                         it returns NaN. If the final value is a MATLAB string,\n                         it is converted to a char array for consistency.\n\n    Example:\n        myTable = table({{'some_string'}}, {42}, {{[]}}, {{{{true}}}}, 'VariableNames', {'A','B','C','D'});\n        val_A = ndi.util.unwrapTableCellContent(myTable.A); % Returns 'some_string'\n        val_B = ndi.util.unwrapTableCellContent(myTable.B); % Returns 42\n        val_C = ndi.util.unwrapTableCellContent(myTable.C); % Returns NaN\n        val_D = ndi.util.unwrapTableCellContent(myTable.D); % Returns true\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Butil/%2Bopenminds/find_instance_name.m/","title":"ndi.util.openminds.find_instance_name","text":"<pre><code> FIND_INSTANCE_NAME Summary of this function goes here\n    Detailed explanation goes here\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Butil/%2Bopenminds/find_techniques_names.m/","title":"ndi.util.openminds.find_techniques_names","text":"<pre><code> FIND_TECHNIQUES_NAMES Summary of this function goes here\n    Detailed explanation goes here\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bvalidators/mustBeCellArrayOfNdiSessions.m/","title":"ndi.validators.mustBeCellArrayOfNdiSessions","text":"<pre><code> MUSTBECELLARRAYOFNDISESSIONS Validates that the input is a cell array of ndi.session.dir objects.\n\n    ndi.validators.mustBeCellArrayOfNdiSessions(VALUE)\n\n    This function is intended for use in an `arguments` block to validate\n    that a function input is a cell array where every element is an object of\n    the class `ndi.session.dir`. It throws an error if the validation fails.\n\n    Inputs:\n        value - The input value to be validated.\n\n    Throws:\n        An error with a specific identifier if the input is not a cell array\n        or if any element within the cell array is not an `ndi.session.dir` object.\n\n    Example:\n        % In a function definition:\n        arguments\n            sessionList (1,:) cell {ndi.validators.mustBeCellArrayOfNdiSessions(sessionList)}\n        end\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bvalidators/mustBeCellArrayOfNonEmptyCharacterArrays.m/","title":"ndi.validators.mustBeCellArrayOfNonEmptyCharacterArrays","text":"<pre><code> MUSTBECELLARRAYOFNONEMPTYCHARACTERARRAYS Validates that input is a cell array of non-empty char vectors.\n\n    ndi.validators.mustBeCellArrayOfNonEmptyCharacterArrays(VALUE)\n\n    This function is intended for use in an `arguments` block. It validates\n    that the input VALUE is a cell array, and that every element within the\n    cell array is a character vector that is not empty.\n\n    Inputs:\n        value - The input value to be validated.\n\n    Throws:\n        An error with a specific identifier if the input is not a cell array\n        or if any element is not a non-empty character vector.\n\n    Example:\n        % In a function definition:\n        arguments\n            inputNames (1,:) cell {ndi.validators.mustBeCellArrayOfNonEmptyCharacterArrays(inputNames)}\n        end\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bvalidators/mustBeEpochInput.m/","title":"ndi.validators.mustBeEpochInput","text":"<pre><code>  mustBeEpochInput - determines whether an input can describe an epoch\n\n  mustBeEpochInput(V)\n\n  Validates if V is a character array, string, or double of size 1x1.\n  Otherwise returns an error.\n\n  Note that this function does not determine if the input actually\n  corresponds to a valid epoch. Instead, it merely tests whether the input\n  CAN be a valid epoch according to its formatting.\n\n  See also: ndi.epoch.epochset.epochtable\n\n  Example:\n    ndi.validators.mustBeEpochInput(1) % no error\n    ndi.validators.mustBeEpochInput('t00001') % no error\n    ndi.validators.mustBeEpochInput(\"t00001\") % no error\n    ndi.validators.mustBeEpochInput([1 2 3]) % error\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bvalidators/mustBeID.m/","title":"ndi.validators.mustBeID","text":"<pre><code> MUSTBEID Validate input is a correctly formatted NDI ID string.\n\n    ndi.validators.mustBeID(inputArg)\n\n    Validates that the input argument INPUTARG meets the NDI ID format criteria:\n      - Must be a character row vector or a string scalar.\n      - Must be exactly 33 characters long.\n      - Character at index 17 must be an underscore ('_').\n      - All other characters (1-16 and 18-33) must be alphanumeric (A-Z, a-z, 0-9).\n\n    This function is intended for use within function `arguments` blocks.\n    It throws an error with a descriptive message identifier ('NDI:Validation:InvalidID:...')\n    if the input does not meet the criteria.\n\n    Example Usage in an arguments block:\n       arguments\n           subjectID (1,1) {mustBeTextScalar, ndi.validators.mustBeID}\n       end\n\n    See also: mustBeTextScalar, ischar, isrow, numel, isstrprop\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bvalidators/mustBeNumericClass.m/","title":"ndi.validators.mustBeNumericClass","text":"<pre><code> mustBeNumericClass Validates that the input is a valid numeric or logical class name.\n    mustBeNumericClass(className) throws an error if className is not one\n    of the following character vectors or strings:\n    'uint8', 'uint16', 'uint32', 'uint64', 'int8', 'int16', 'int32',\n    'int64', 'single', 'double', or 'logical'.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bvalidators/mustBeTextLike.m/","title":"ndi.validators.mustBeTextLike","text":"<pre><code> MUSTBETEXTLIKE Validates that input is a character vector, string, or cell array of text.\n\n    ndi.validators.mustBeTextLike(VALUE)\n\n    This function is intended for use in an `arguments` block. It validates\n    that the input VALUE is one of the following:\n      - A character vector (e.g., 'hello')\n      - A string scalar (e.g., \"world\")\n      - A cell array where every element is either a character vector or a string.\n\n    Inputs:\n        value - The input value to be validated.\n\n    Throws:\n        An error with a specific identifier if the input does not meet one of\n        the allowed text-like formats.\n\n    Example:\n        % In a function definition:\n        arguments\n            input_a (1,:) char {ndi.validators.mustBeTextLike(input_a)}\n            input_b (1,1) string {ndi.validators.mustBeTextLike(input_b)}\n            input_c (1,:) cell {ndi.validators.mustBeTextLike(input_c)}\n        end\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bvalidators/mustHaveRequiredColumns.m/","title":"ndi.validators.mustHaveRequiredColumns","text":"<pre><code> MUSTHAVEREQUIREDCOLUMNS Validates if a table contains specified columns.\n\n    ndi.validation.mustHaveRequiredColumns(t, requiredCols)\n\n    Checks if the input table 't' contains all column names listed in\n    'requiredCols'. If any columns are missing, it throws an error.\n\n    Args:\n        t (table): The input table to check.\n        requiredCols (char | string | cell): A character vector, string, or\n                             cell array of character vectors/strings,\n                             where each element represents a required column name.\n                             If provided as char or string, it's treated as a\n                             single required column.\n\n    Throws:\n        error: If any columns specified in 'requiredCols' are not found in\n               the table 't'. The error identifier is\n               'ndi:validation:MissingColumns'.\n        error: If 'requiredCols' is not text (char, string, or cell array\n               of text), caught by the input parser.\n\n</code></pre>"},{"location":"NDI-matlab/reference/%2Bndi/%2Bvalidators/mustMatchRegex.m/","title":"ndi.validators.mustMatchRegex","text":"<pre><code> MUSTMATCHREGEX Custom validation function to ensure input matches a regular expression.\n    MUSTMATCHREGEX(VALUE, PATTERN) checks if the input VALUE matches the\n    regular expression specified by PATTERN. If VALUE does not match PATTERN,\n    the function throws an error.\n\n    This function is intended for use within an arguments block.\n\n    Inputs:\n        VALUE   - The value being validated. Must be a character row vector\n                  or a string scalar.\n        PATTERN - The regular expression pattern (char row vector or string scalar)\n                  that VALUE must match.\n\n    Outputs:\n        (None) - Throws an error if validation fails.\n\n    Error Conditions:\n        - Throws 'ndi:validators:mustMatchRegex:InvalidInputType' if VALUE\n          is not a character row vector or string scalar.\n        - Throws 'ndi:validators:mustMatchRegex:NoMatch' if VALUE does not\n          match the PATTERN.\n\n    Example Usage in arguments block:\n        arguments\n            inputCode (1,:) char {mustBeNonempty, ndi.validators.mustMatchRegex(inputCode, '^[A-Z]{3}\\d{5}$')}\n        end\n\n    See also: arguments, regexp\n\n</code></pre>"},{"location":"NDI-matlab/reference/private/addRequiredAdditionalSoftwareToPath.m/","title":"addRequiredAdditionalSoftwareToPath","text":"<pre><code>  addRequiredAdditionalSoftwareToPath - Add required additional software\n  for a toolbox to MATLAB's search path.\n\n</code></pre>"},{"location":"NDI-matlab/tutorials/analysis_app/","title":"Making your own analysis app that uses NDI","text":"<p>This is planned tutorial.</p> <p>We will design a simple application that analyzes responses of taste stimuli, and take the user/developer through the process of design, creating database document types, writing, and testing.</p> <p>This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.</p>"},{"location":"NDI-matlab/tutorials/archive/","title":"Saving your data to an archive","text":"<p>Planned: Save a set of experimental sessions to DANDI, after NWB reading/writing capability is added. Planned as part of R01MH126791 (if funded).</p> <p>Planned: Save a set of experimental sessions to DABI. Soon.</p>"},{"location":"NDI-matlab/tutorials/case_studies_reading_data/","title":"Case studies in reading your own data in NDI","text":"<p>This is planned tutorial that will show examples of how to specify ndi.daq.system and ndi.file.navigator objects for 4 systems neuroscience labs that use different data acquisition systems and different file organizations (Van Hooser; Marder; Katz; Jadhav);</p> <p>This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.</p>"},{"location":"NDI-matlab/tutorials/data_pipeline/","title":"Creating a data pipeline in NDI","text":"<p>This is planned tutorial that will cover an example of making a data pipeline in NDI; we will show how to analyze several aspects of visual responses and to calculate place-cell locations in recordings of hippocampus.</p> <p>This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.</p>"},{"location":"NDI-matlab/tutorials/reading_own_data_ndi/","title":"Reading your own data in NDI","text":"<p>This is planned tutorial that will cover</p> <ol> <li>identifying your data's file format and organization</li> <li>specifying your data's file format and organization in an ndi.daq.system and ndi.file.navigator</li> <li>specifying subjects and mapping between probes and daq systems</li> <li>checking your work</li> </ol> <p>This is targeted to be written in the first 6 months of application R01MH126791 (if funded) or earlier if time permits.</p>"},{"location":"NDI-matlab/tutorials/search_ndi_databases/","title":"Search and analyze NDI databases on the web","text":"<p>Planned: Search the web for NDI databases</p> <p>When: After adding databases to DANDI</p> <p>This work is planned as part of application R01MH126791 (if funded)</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI","text":"<p>This is a beginner's tutorial for NDI. This tutorial is designed for users who have some basic familiarity with coding or Matlab. If you're a Matlab and coding newbie, please use Tutorial 3.1, the detailed version.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#21-reading-an-example-dataset","title":"2.1: Reading an example dataset","text":"<p>We will start with learning to read an example dataset into NDI. We assume you have already installed NDI and taken the introductory tutorial of the NDI model. These data are available in a compressed folder here.  You can put the folder anywhere, but we will assume that you put them in your MATLAB/Documents/NDI folder, where MATLAB is your normal user path in Matlab (usually <code>/Users/username/Documents/MATLAB</code> on a Mac). Normally, we'd use some helper functions to open our data to make this process even easier, but this tutorial takes the user through the full manual process for training purposes.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#211-introduction-to-the-experiment","title":"2.1.1 Introduction to the experiment","text":"<p>These data are single neuron recordings made with electrodes in the anesthetized tree shrew visual as a part of Van Hooser et al. 2013. This example data is a very small subset of the original data for the purposes of illustration.</p> <p></p> <p>In this experiment, a single unit recording electrode was inserted into either lateral geniculate nucleus or V1. The electrode was connected to  an amplifier, and the output signal was recorded by a Cambridge Electronic Design (CED) micro1401 digital acquisition board. A CED Spike2 software script was used that stored 1 recording epoch per folder. In software, the voltage from the electrode was assigned to channel 11. A visual stimulus monitor was set up in front of the animal, and visual stimuli were  generated by custom software running on a separate computer. A record of the stimulus parameters was stored in the epoch folder in a file called <code>stims.mat</code>, and stimulus timing information was delivered to the digital inputs of the micro1401 in the form of a stimulus onset trigger and an 8-bit stimulus code signal that were generated by the stimulus computer.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#212-introduction-to-the-data","title":"2.1.2 Introduction to the data","text":"<p>The data are in a folder called <code>ts_exper1</code>. It contains recordings of two neurons, an LGN neuron and a V1 neuron, to presentation of sinusoidal  gratings that either vary in orientation or in spatial frequency. The data, as provided by the host lab, are organized into subfolders, named <code>t00001</code>, <code>t00002</code>, <code>t00003</code>, and <code>t00004</code>. The first two folders are recordings of the LGN neuron, and the second two folders are recordings of the V1 neuron. Each <code>t0000N</code> folder has 3 files:</p> <ul> <li><code>probemap.txt</code> - a file that we made for NDI that describe what probes are recorded in this folder</li> <li><code>spike2data.smr</code> - a CED Spike2 file that has the raw electrophysiology data and the stimulus timing information</li> <li><code>stims.mat</code> - A Matlab file that has detailed parameters of the stimuli that were run</li> </ul> <p>First, let's list these files using the <code>ls</code> command (that's the letter <code>l</code> followed by the letter <code>s</code>, short for list) and take a quick look at what is in them. Set up the \"prefix\" path to your data as necessary. (Here, we assume you put the <code>ts_exper1</code> folder into your Matlab <code>userpath</code> folder but you can put it anywhere.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2121-type-this-in-to-matlab","title":"Code block 2.1.2.1. Type this in to Matlab:","text":"<pre><code>prefix = [userpath filesep 'Documents' filesep 'NDI']; % or '/Users/yourusername/Desktop/' if you put it on the desktop perhaps\nls([prefix filesep 'ts_exper1' filesep 't*']); % list all the files in the t0000N folders\n</code></pre> <p>We wrote a short function so that you can see the raw voltage recording and the stimulus timing information. Each stimulus appears as a number and its duration is indicated by the black bar. You can pan with the mouse to scroll through the recording.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2122-type-this-in-to-matlab","title":"Code block 2.1.2.2. Type this in to Matlab:","text":"<pre><code>my_smr_file = fullfile(prefix,'ts_exper1','t00001','spike2data.smr')\nndi.example.tutorial.plottreeshrewdata(my_smr_file);\n</code></pre> <p>You should see a Matlab window that looks like this, and when you hover your mouse over the image, it should turn into a \"hand\" that allows you to drag and pan around.</p> <p></p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#213-specifying-the-metadata-that-ndi-needs-to-read-the-experiment","title":"2.1.3 Specifying the metadata that NDI needs to read the experiment","text":"<p>In this example, we have already prepared the metadata files that are necessary for NDI to read the data. Let's look at them in turn.</p> <p>First, we need to tell NDI what probes we have in our experiment. A probe is anything that measures or stimulates; one end of a probe  is connected to a subject, and the other end of a probe is connected to a data acquisition device. We tell NDI how the probe is connected by creating an ndi.epoch.epochprobemap. Usually, we do this with a little code that instructs NDI how to read this information directly from the laboratory's own file information, but in this example, we will use the generic ndi.epoch.epochprobemap_daqsystem object, which reads in a simple tab-delimited text file.</p> <p>Let's print the <code>probemap.txt</code> file for directory <code>t00001</code>:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2131-type-this-in-to-matlab","title":"Code block 2.1.3.1. Type this in to Matlab:","text":"<pre><code>type (fullfile(prefix,'ts_exper1','t00001','probemap.txt'))\n</code></pre> <p>You will see a tab-delimited text table that looks like the following. In the Matlab command window, the tabs may not line up, so don't be concerned if it doesn't look like a nice formatted table.</p> name reference type devicestring subjectstring ctx 1 n-trode ced_daqsystem:ai11 treeshrew_12345@mylab.org vis_stim 1 stimulator vis_daqsystem:mk30;text30;md1 treeshrew_12345@mylab.org <p>This text file has all of the information to specify the probe and its connections. It has a name for the probe that is meaningful to the user, and the reference specifies an identifier that groups the recordings of the probe. Typically, when the probe is in one physical position, the reference number is kept the same, but when the probe is moved (such as when an electrode is advanced), the reference number is incremented. This tells NDI to try to combine information from recordings that have the same name and reference. type tells NDI what type of probe it is. There are a variety of pre-determined types, and this type instructs NDI  (via this file) which probe object type to create in software.</p> <p>Second, we need to specify the stimulus parameters metadata. Typically, one would create a metadata reader for ones own lab so that the native data can be read directly, but here we have made another tab-delimited text file with the parameters. You can read this for yourself by typing the following:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2132-type-this-in-to-matlab","title":"Code block 2.1.3.2. Type this in to Matlab:","text":"<pre><code>type (fullfile(prefix,'ts_exper1','t00001','stims.tsv'))\n</code></pre>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#214-gaining-access-to-the-data-in-ndi-ndisession-and-ndidaqsystem-objects","title":"2.1.4 Gaining access to the data in NDI: ndi.session and ndi.daq.system objects","text":"<p>Now all that remains is to open the data directory as an ndi.session object, and make ndi.daq.system objects to read your data. We will use an ndi.session.dir object, which allows us to read information from a directory (folder) on disk. </p> <p>We will create a new ndi.system object by calling the constructor with the reference name we wish to give to the session and the pathname to our data:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2141-type-this-in-to-matlab","title":"Code block 2.1.4.1. Type this in to Matlab:","text":"<pre><code>S = ndi.session.dir('ts_exper1',[prefix filesep 'ts_exper1'])\n</code></pre> <p>Now you have made a new NDI session. The session is brand new and doesn't know about any of the devices we used in our experiment. So, if we try to see if there are any probes, we will see that it doesn't know of any:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2142-type-this-in-to-matlab","title":"Code block 2.1.4.2. Type this in to Matlab:","text":"<pre><code>S.getprobes()\n</code></pre> <p>Unless you ran this demo before, you won't see any probes here (it will return an empty cell array). </p> <p>We need to make new ndi.daq.system objects for our data acquisition system and our stimulator. Our devices are multifunction data acquisition systems, so we use the ndi.daq.system.mfdaq subtype.</p> <p>An ndi.daq.system object consists of three components: an ndi.file.navigator object whose job it is to find the files or streams associated with each epoch of data, an ndi.daq.reader object whose job it is to read the raw data from the files, and an ndi.daq.metadatareader (optionally) whose job it is to read any metadata associated with the epoch (such as stimulus parameter information). </p> <p>First, we will build an ndi.daq.system.mfdaq object that we will call <code>'ced_daqsystem'</code> to read the electrode data from our CED SMR files.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2143-type-this-in-to-matlab","title":"Code block 2.1.4.3. Type this in to Matlab:","text":"<pre><code>ced_filenav = ndi.file.navigator(S, {'.*\\.smr\\&gt;', 'probemap.txt'}, ...\n    'ndi.epoch.epochprobemap_daqsystem','probemap.txt');\nced_rdr = ndi.daq.reader.mfdaq.cedspike2();\nced_system = ndi.daq.system.mfdaq('ced_daqsystem', ced_filenav, ced_rdr);\n % if you haven't already added the daq system, you can add it here:\nS.daqsystem_add(ced_system);\n</code></pre> <p>Note: If you ran the tutorial before, you may have added <code>ced_system</code> to your session <code>S</code> already. That's fine, you'll get an error if you try to do it again. If you want to remove all your daq systems, you can call <code>ndi.session.daqsystem_clear()</code> by typing <code>S.daqsystem_clear()</code>, and then you can add them again.</p> <p>Let's look at the epochs that <code>ced_system</code> can find, in order to understand how it searches for epochs:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2144-type-this-into-matlab","title":"Code block 2.1.4.4 Type this into Matlab","text":"<pre><code> % let's look at the epochs the daq.system can find\net = ced_system.epochtable() % should see a 4 element answer\nf = ced_system.filenavigator.getepochfiles(1) % you should see the files from epoch 1, t00001\n</code></pre> <p>Second, we will build an ndi.daq.system.mfdaq for our visual stimulus system.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2145-type-this-in-to-matlab","title":"Code block 2.1.4.5. Type this in to Matlab:","text":"<pre><code>vis_filenav = ndi.file.navigator(S, {'.*\\.smr\\&gt;', 'probemap.txt', 'stims.tsv'},...\n     'ndi.epoch.epochprobemap_daqsystem','probemap.txt');\nvis_rdr = ndi.daq.reader.mfdaq.cedspike2();\nvis_mdrdr = ndi.daq.metadatareader('stims.tsv');\nvis_system = ndi.daq.system.mfdaq('vis_daqsystem', vis_filenav, vis_rdr, {vis_mdrdr});\n % if you haven't already added the daq system, you can add it here:\nS.daqsystem_add(vis_system);\n</code></pre> <p>Last, we will tell NDI how these devices are synchronized with each other. These two daq systems have a file in common (<code>spike2data.smr</code>), which means that they have a common time base, but NDI doesn't yet know that the two daq systems can be synchronized. Here we add a \"syncrule\" that tells NDI that any daq systems that share at least 2 files per epoch also share a common time clock for that epoch.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2146-type-this-in-to-matlab","title":"Code block 2.1.4.6. Type this in to Matlab:","text":"<pre><code>nsf = ndi.time.syncrule.filematch(struct('number_fullpath_matches',2));\nS.syncgraph_addrule(nsf);\n</code></pre>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#215-opening-the-data-in-ndi-accessing-probes-via-from-ndidaqsystemmfdaq","title":"2.1.5 Opening the data in NDI: accessing probes via from ndi.daq.system.mfdaq","text":"<p>Now we can use NDI to see the probes that these daq systems can find and to access the data from those probes. Let's look at the electrode probe data first.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2151-type-this-in-to-matlab","title":"Code block 2.1.5.1. Type this in to Matlab:","text":"<pre><code>p = S.getprobes() % get all of the probes that are in the ndi.session S\nfor i=1:numel(p), p{i}, end; % display the probe information for each probe\n\n% look at the number of epochs recorded for probe 1\np_ctx1_list = S.getprobes('name','ctx','reference',1) % returns a cell array of matches\np_ctx1 = p_ctx1_list{1}; % take the first one, should be the only one\net = p_ctx1.epochtable()\nfor i=1:numel(et), et(i), end; % display the epoch table entries\nepoch_to_read = 1;\n</code></pre> <p>You can see that probe 1 has a name of <code>ctx</code>, a reference of <code>1</code>, and it is of type <code>n-trode</code>, or an n-channel electrode. It has a software object type of ndi.probe.timeseries.mfdaq, which simply means it is associated with multifunction DAQ systems and returns timeseries observations. Now let's read data from our probe <code>p_ctx1</code> and plot the data:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2152-type-this-into-matlab","title":"Code block 2.1.5.2. Type this into Matlab","text":"<pre><code>[data,t,timeref_p_ctx1]=p_ctx1.readtimeseries(epoch_to_read,-Inf,Inf); % read all data from epoch 1\nfigure(100);\nplot(t,data);\nxlabel('Time(s)');\nylabel('Voltage (V)');\nset(gca,'xlim',[t(1) t(end)]);\nbox off;\n</code></pre> <p>This code calls an important function for reading data from probes: <code>ndi.timeseries.readtimeseries</code>:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#this-code-is-documentation-do-not-type-into-matlab","title":"This code is documentation; do not type into Matlab","text":"<pre><code>[D, T, TIMEREF] = ndi.timeseries.readtimeseries(EPOCH_OR_TIMEREF, T0, T1)\n% Reads data and timestamps from an ndi.timeseries.readtimeseries object with respect\n% to a specific epoch or an ndi.time.timereference object, from time T0 to T1.\n</code></pre> <p>When analyzing data or writing apps to analyze data, <code>ndi.timeseries.readtimeseries</code> is one of the most commonly called functions.</p> <p>Now let's also look at our stimulator probe <code>vis_stim</code>. First, let's examine the epochs that are known to <code>vis_stim</code>:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2153-type-this-in-to-matlab","title":"Code block 2.1.5.3. Type this in to Matlab:","text":"<pre><code>p_visstim_list = S.getprobes('name','vis_stim','reference',1) % returns a cell array of matches\np_visstim = p_visstim_list{1}; % take the first one, should be the only one\net = p_visstim.epochtable()\nfor i=1:numel(et), et(i), end; % display the epoch table entries\n</code></pre> <p>Now let's read the data from our stimulator. To do this, we are going to ask NDI to read the stimulus timing information in the time units of our electrode probe <code>p_ctx</code>. You'll notice that when we read data from <code>p_ctx1</code>, <code>readtimeseries</code> returned an ndi.time.timereference object <code>timeref_p_ctx1</code>. Let's examine this quickly:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2154-type-this-in-to-matlab","title":"Code block 2.1.5.4. Type this in to Matlab:","text":"<pre><code>timeref_p_ctx1\n</code></pre> <p>You'll see a structure with the following fields:</p> <code>timeref_p_ctx1</code> timereference with properties referent <code>[1x1 ndi.probe.timeseries.mfdaq]</code> clocktype <code>[1x1 ndi.time.clocktype]</code> epoch 1 time 0 session_ID <code>'412687ba08e28694_c0d9c07d0b8726cf'</code> <p>In NDI, one can refer to time with respect to a variety of different clocks, which is helpful because daq systems typically do not have access to a global clock. We can now ask for the time of the stimulus presentations with respect to our electrode's clock, and add the onset times to the graph.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2155-type-this-in-to-matlab","title":"Code block 2.1.5.5. Type this in to Matlab:","text":"<pre><code>[data,t,timeref_stim]=p_visstim.readtimeseries(timeref_p_ctx1,-Inf,Inf); % read all data from epoch 1 of p_ctx1 !\nfigure(100);\nhold on;\nvlt.neuro.stimulus.plot_stimulus_timeseries(7,t.stimon,t.stimon+2,'stimid',data.stimid);\n</code></pre> <p>Let's look at what <code>readtimeseries</code> returned in the case of a stimulator. It is a little different than when being used with regularly-sampled data.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#code-block-2156-type-this-in-to-matlab","title":"Code block 2.1.5.6. Type this in to Matlab:","text":"<pre><code>t, % show timestamps\nt.stimon,\ndata, % show data\ndata.stimid,\ndata.parameters{1}\n</code></pre> <p>Here we examined several fields of the variables <code>data</code> and <code>t</code> returned from <code>readtimeseries</code> from our ndi.probe.timeseries.stimulator.</p> <p>You can see that <code>t</code> is a structure with 2 fields, <code>stimon</code> and <code>stimoff</code>. Our system kept track of when each stimulus began, but in these recordings, we did not have our data acquisition system keep track of when our stimulus turned off. (For later analysis, we will need to read this from the stimulus parameters.)</p> <p>You can also see that <code>data</code> has some metadata about the stimuli. It has the ID number of each stimulus that was shown (<code>data.stimid(1)</code> is the stimulus that turned on at <code>t.stimon(1)</code>), and it has the parameters of each stimulus. <code>data.parameters{1}</code> is the parameters of the stimulus with ID number 1.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/1_example_dataset/#216-discussionfeedback","title":"2.1.6 Discussion/Feedback","text":"<p>This concludes our tutorial on the fully manual way of reading data through NDI. </p> <p>In the next tutorial, we'll explore how to create a couple of code objects that read our data directly from a lab's internal structure.</p> <p>Post comments, bugs, questions, or discuss.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI","text":""},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#22-automating-the-reading-of-data-from-your-rig-or-lab-or-collaborator","title":"2.2 Automating the reading of data from your rig or lab or collaborator","text":"<p>In the previous tutorial, we reviewed the steps necessary to create ndi.daq.system objects to read in a dataset, and to add the metadata that is necessary to tell NDI about the contents of each epoch. </p> <p>Most labs use the same data acquisition devices and file organization schemes over and over again, and many labs also store the necessary metadata that describes the probes and subjects that are acquired. NDI allows you to create small software objects that read this metadata directly from the laboratory files. Then, opening an experimental session becomes as simple as a one line command such as </p> <pre><code>S = ndi.setup.vhlab([reference],[foldername]);\n</code></pre> <p>Once this command has been run once, the directory can be opened with the standard <code>ndi.session.dir</code> command thereafter (though there is no harm to re-issuing the <code>ndi.setup.*</code> command).</p> <p>It's our guess that many labs have at least one person handy with code, and this task might fall to them. This tutorial is written for people who already have some familiarity with coding. If you'd like help creating these functions for your lab, use the issue tracker to post a question. Creating these automatic readers  is the biggest stress point in using NDI. The system is relatively easy to use once you are able to read your data!</p> <p>While there are many ways to organize code for custom setups, we have created a motif that is easy to follow. The <code>ndi</code> package in Matlab has a subpackage called <code>setup</code>. Here, we have placed m-files that create an ndi.session with the default settings for various labs or users. The <code>setup</code> package also has a subpackage structure that mimics the subpackage structure of <code>ndi</code>. In Matlab, packages are denoted by putting a <code>+</code> in the folder name:</p> <ul> <li><code>+ndi/+setup/</code><ul> <li><code>+daq/</code><ul> <li><code>+metadata/</code></li> <li><code>+metadatareader/</code></li> <li><code>+reader/</code></li> <li><code>+system/</code> </li> </ul> </li> </ul> </li> </ul>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#221-download-an-experiment-with-all-vhlab-metadata-left-intact","title":"2.2.1 Download an experiment with all vhlab metadata left intact","text":"<p>Please download an example data directory called ts_exper2. Be sure to unzip the files, and we recommend placing them in your Matlab userpath under 'MATLAB/Documents/NDI/' as before. This directory contains the files that were generated at the time of acquisition on Steve's rig in the Fitzpatrick lab at Duke, which is nearly identical to the format that we use in the vhlab now. You'll see that these directories have a few more files. It's not necessary to follow the identities of the files in detail, but let's look at what is in t00001 as an example:</p> <ul> <li><code>t00001/</code><ul> <li><code>filetime.txt</code> - The time of the acquisition beginning in seconds from midnight</li> <li><code>reference.txt</code> = A file describing the probes that are present in this directory</li> <li><code>spike2data.S2R</code> - This is an irrelevant file! But it's there every time.</li> <li><code>spike2data.smr</code> - The raw data file acquired by CED's program Spike2 (data acquired via Micro1401)</li> <li><code>spike2datalog.txt</code> - A text log file (not relevant)</li> <li><code>stims.mat</code> - The record of stimulation as produced by the stimulus computer. It uses NewStim stimuli and is written by VH lab's RunExperiment program.</li> <li><code>stimtimes.txt</code> - A text file where each line contains a) the stimulus onset trigger, b) the stimulus ID number between 1-255, and c) an array of video frame trigger times (when the video frame was changed)</li> <li><code>twophotontimes.txt</code> - A record of triggers of all 2-photon frames. None in this experiment.</li> <li><code>verticalblanking.txt</code> - A record of each refresh of the monitor. This was not yet used in these experiments but is now part of the VH lab's suite.</li> <li><code>vhspike2_channelgrouping.txt</code> - A text file that indicates which acquisition channels of our vhspike2 DAQ system are connected to each probe.</li> </ul> </li> </ul>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#222-example-ndi-matlab-files-for-vhlab","title":"2.2.2 Example NDI-matlab files for vhlab","text":"<p>To import data from our lab, we created 4 Matlab files:</p> <ul> <li><code>+ndi/+setup/vhlab.m</code> - A function that builds an ndi.session object with daq systems that read from our lab's major devices.</li> <li><code>+ndi/+setup/+daq/+metadata/epochprobemap_daqsystem_vhlab.m</code> - A class that examines our lab's metadata files that describe the mapping between probes and data acquisition systems and returns an epochprobemap that NDI can interpret. Overrides the default ndi.epoch.epochprobemap_daqsystem.m class that reads the <code>probemap.txt</code> text files we saw in Tutorial 2.1. </li> <li><code>+ndi/+setup/+daq/+reader/+mfdaq/+stimulus/vhlabvisspike2.m</code> - A class that reads stimulus event data from our custom acquisition files.</li> <li><code>+ndi/+daq/+metadatareader/NewStimStims.m</code> - A class that imports stimulus metadata from our lab's open source NewStim package. (We put it in NDI proper because it is an open source program, not intended solely for our lab.)</li> </ul>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#223-creating-a-setup-file","title":"2.2.3 Creating a <code>setup</code> file.","text":"<p>The setup file accomplishes, in an automated fashion, exactly what we did in Tutorial 2.1: it  opens an ndi.session with a particular reference name and directory path, and adds the daq systems that are necessary to read the probe data. It normally lives in <code>+ndi/+setup/LABORINVESTIGATORNAME.m</code>. We include the code here:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#code-block-2231-content-of-ndisetupvhlabm-do-not-type-into-matlab-command-line","title":"Code block 2.2.3.1: Content of <code>+ndi/+setup/vhlab.m</code>. (Do not type into Matlab command line.)","text":"<pre><code>function S = vhlab(ref, dirname)\n% ndi.setup.vhlab - initialize an ndi.session.dir with VHLAB devices\n%\n%  S = ndi.setup.vhlab(REF, DIRNAME)\n%\n%  Initializes an ndi.session.dir object for the directory\n%  DIRNAME with the standard compliment of VHLAB devices, as\n%  found in ndi.setup.daq.system.vhlab.\n%\n%  If the devices are already added, they are not re-created.\n%\n\nS = ndi.session.dir(ref, dirname);\nvhlabdevnames = ndi.setup.daq.system.vhlab(); % returns list of daq system names\n\nfor i=1:numel(vhlabdevnames),\n    dev = S.daqsystem_load('name',vhlabdevnames{i});\n    if isempty(dev),\n        S = ndi.setup.daq.system.vhlab(S, vhlabdevnames{i});\n    end\nend\n\n % update SYNCGRAPH\nnsf = ndi.time.syncrule.filematch(struct('number_fullpath_matches',2));\nn_intan2spike2 = ndi.time.syncrule.filefind(struct('number_fullpath_matches',1, ...\n    'syncfilename','vhintan_intan2spike2time.txt',...\n    'daqsystem1','vhintan','daqsystem2','vhvis_spike2'));\n\nS.syncgraph_addrule(nsf);\nS.syncgraph_addrule(n_intan2spike2);\n</code></pre> <p>This function calls another function that we will see in a minute (<code>ndi.setup.daq.system.vhlab</code>) that actually builds the daq system objects that we use in our lab. At the end of this function, 2 ndi.time.syncrules are added that describe how synchronization is performed across our devices. If 2 or more of the same files are present in an epoch, then it is assumed that files are from the same underlying device and they are assumed to have the same time clock. Our custom acquisition code also produces a file <code>vhintan_intan2spike2time.txt</code> that has the time shift and scaling between our Intan acquisition system and our CED Spike2 acquisition system, and we instruct NDI to use that file to synchronize the 2 devices using shift and scale  in that file.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#224-creating-a-function-that-creates-the-daq-systems-for-a-lab","title":"2.2.4 Creating a function that creates the daq systems for a lab","text":"<p>We also write a function that builds the daq systems that we use in our lab. This process involves 1) naming the daq system, 2) specifying the ndi.daq.reader that is used, 3) specifying any ndi.daq.metadatareader if necessary, and  4) specifying the ndi.file.navigator to find the files that comprise each epoch.</p> <p>If this function here is called with 0 input arguments, then it returns a list of all known daq systems objects for our lab (<code>'vhintan', 'vhspike2', 'vhvis_spike2'</code>). Otherwise, if it is called with the name of a daq system that this function knows how to build, it builds it. It adds the appropriate ndi.daq.reader, ndi.daq.metadatareader, and ndi.file.navigator.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#code-block-2241-content-of-ndisetupdaqsystemvhlabm-do-not-type-into-matlab-command-line","title":"Code block 2.2.4.1: Content of <code>+ndi/+setup/+daq/+system/vhlab.m</code>. (Do not type into Matlab command line.)","text":"<pre><code>function S = vhlab(S, daqsystemname)\n% ndi.setup.daq.system.vhlab - initialize daq systems used by VHLAB\n%\n% S = ndi.setup.daq.system.vhlab(S, DEVNAME)\n%\n% Creates daq systems that look for files in the VHLAB standard recording\n% scheme, where data from different epochs are organized into\n% subdirectories (using ndi.file.navigator.epochdir). DEVNAME should be the \n% name a daq systems in the table below. These daq systems are added to the ndi.session\n% object S. If DEVNAME is a cell list of strings, then multiple items are added.\n%\n% If the function is called with no input arguments, then it returns a list\n% of all valid device names.\n% \n% Each epoch is defined by the presence of a 'reference.txt' file, as well\n% as specific files that are needed by each device as described below.\n%\n%  Devices created   | Description\n% |------------------|--------------------------------------------------|\n% | vhintan          | ndi.daq.system.mfdaq that looks for files        |\n% |                  |    'vhintan_channelgrouping.txt' and '*.rhd'     |\n% | vhspike2         |    ndi.daq.system.mfdaq that looks for files     |\n% |                  |    'vhspike2_channelgrouping.txt' and '*.smr'    |\n% | vhvis_spike2     | ndi.daq.system.mfdaq.stimulus that looks for     |\n% |                  |    files 'stimtimes.txt', 'verticalblanking.txt',|\n% |                  |    'stims.mat', and 'spike2data.smr'.            |\n% -----------------------------------------------------------------------\n%\n% See also: ndi.file.navigator.epochdir\n\nif nargin == 0,\n    S = {'vhintan', 'vhspike2', 'vhvis_spike2'};\n    return;\nend;\n\nif iscell(daqsystemname),\n    for i=1:length(daqsystemname),\n        S = ndi.setup.daq.system.vhlab(S, daqsystemname{i});\n    end\n    return;\nend\n\n  % all of our daq systems use this custom epochprobemap class\nepochprobemapclass = 'ndi.setup.daq.metadata.epochprobemap_daqsystem_vhlab';\n\nswitch daqsystemname,\n    case 'vhintan',\n        fileparameters = {'reference.txt','.*\\.rhd\\&gt;','vhintan_channelgrouping.txt'};  \n        readerobjectclass = ['ndi.daq.reader.mfdaq.intan'];\n        epochprobemapfileparameters = {'vhintan_channelgrouping.txt'};\n        mdr = {};\n    case 'vhspike2',\n        fileparameters = {'reference.txt', '.*\\.smr\\&gt;', 'vhspike2_channelgrouping.txt'}; \n        readerobjectclass = ['ndi.daq.reader.mfdaq.cedspike2'];\n        epochprobemapfileparameters = {'vhspike2_channelgrouping.txt'};\n        mdr = {};\n    case 'vhvis_spike2'\n        fileparameters = {'reference.txt', 'stimtimes.txt', 'verticalblanking.txt',...\n            'stims.mat', 'spike2data.smr'}; \n        readerobjectclass = ['ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2'];\n        epochprobemapfileparameters = {'stimtimes.txt'}; \n        mdr = {ndi.daq.metadatareader.NewStimStims('stims.mat')};\n    otherwise,\n        error(['Unknown device requested ' daqsystemname '.']);\nend\n\nft = ndi.file.navigator.epochdir(S, fileparameters, epochprobemapclass, epochprobemapfileparameters);\n\neval(['dr = ' readerobjectclass '();']);\n\nmydev = ndi.daq.system.mfdaq(daqsystemname, ft, dr, mdr); % create the daq system object\nS = S.daqsystem_add(mydev); % add the daq system object to our ndi.session\n</code></pre> <p>Let's look at the creation of these daq system objects in detail. </p> <ul> <li> <p><code>vhintan</code> - This daq system looks for groups of files with one file named <code>reference.txt</code>, a file that ends in <code>.rhd</code>, and another file called <code>vhintan_channelgrouping.txt</code>. These files are produced by the computer that runs our main acquisition on our rigs, when an Intan acquisition device is used. Together, <code>reference.txt</code> and <code>vhintan_channelgrouping.txt</code> have information about the probes that were used in that recording and the channel mapping of those probes. We will look at these in more detail later. We use the reader <code>ndi.daq.reader.mfdaq.intan</code>, which knows how to read channel data from Intan .rhd files. We tell our daq.system object that 'vhintan_channelgrouping.txt' is the file to use to read epochprobemap information (we will instruct it how to interpret the data in a later function), and there is no metadata reader <code>mdr</code>. We also tell ndi.file.navigator that all of these files will appear in subfolders within our main folder by using the ndi.file.navigator.epochdir class.</p> </li> <li> <p><code>vhspike2</code> - This daq system is very similar to <code>vhintan</code>, except that it looks for files that end in .smr and looks for a different epochmap metadata file (<code>vhspike2_channelgrouping.txt</code>).</p> </li> <li> <p><code>vhvis_spike2</code> - This system is more custom. It relies on text files that are generated by our scripts that run on our CED Micro1401 acquisition system: <code>stimtimes.txt</code>, <code>verticalblanking.txt</code>, <code>spike2data.smr</code>, and a file generated by our visual stimulation system called <code>stims.mat</code>. We add a metadatareader <code>ndi.daq.metadatareader.NewStimStims</code> that knows how to interpret the <code>stims.mat</code> file. We will cover this custom ndi.daq.reader next.</p> </li> </ul>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#225-creating-a-custom-ndidaqreadermfdaqstimulus-object","title":"2.2.5 Creating a custom ndi.daq.reader.mfdaq.stimulus object:","text":"<p>Our visual stimulation system produces a variety of event data, including information about stimulus onset and offset, the vertical refresh signal from the monitor, an 8-bit code for each stimulus ID, a video frame trigger (every time we update the image on the screen), and a signal we call the \"pretime\" trigger that is generally issued 0.5 seconds before a stimulus is begun (used for baseline subtracting in intrinsic signal imaging experiments among other applications).</p> <p>Our acquisition system running on a CED Micro1401 generates text files related to these events, and we propagate them through as a set of event channels. We define 5 fixed channels for our daq system: </p> <ul> <li><code>mk1</code>: a marker channel that indicates stim ON (+1) or stim OFF (-1)</li> <li><code>mk2</code>: a marker channel that indicates the 8-bit stimulus identifier (stimid)</li> <li><code>mk3</code>: a marker channel that indicates when the stimulus period opens (+1) and closes (-1); this includes interstimulus \"background\" time</li> <li><code>e1</code>: an event channel that indicates each frame trigger / video frame update</li> <li><code>e2</code>: an event channel that indicates the vertical refresh times of the stimulus monitor</li> <li><code>e3</code>: an event channel that indicates the pre-stimulus trigger (indicates stimulus is upcoming, usually 0.5s away)</li> </ul> <p>Rather than copying the entire code here, we will include a link to the file: ndi.setup.daq.reader.mfdaq.stimulus.vhlabvisspike2.m . It should be relatively self-explanitory for someone with a coding background to read and mimic this file.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#226-creating-a-custom-epochprobemap-class","title":"2.2.6 Creating a custom epochprobemap class","text":"<p>In Tutorial 2.1, we saw that each epoch of data had an associated epochprobemap that contained the  following fields of information:</p> name reference type devicestring subjectstring ctx 1 n-trode ced_daqsystem:ai11 treeshrew_12345@mylab.org vis_stim 1 stimulator vis_daqsystem:mk30;text30;md1 treeshrew_12345@mylab.org <p>We need to write a substitute class that is a subclass of ndi.epoch.epochprobemap that reads the epoch information and returns all of this same information.</p> <p>In our vhlab session directories, we always have a single subject whose unique identifier is specified in a text file called <code>subject.txt</code> in the top directory. This file is read, and this text is used as the <code>subjectstring</code> for all probes.</p> <p>In each vhlab epoch directory, we have a file called <code>reference.txt</code> that includes the name, reference, and type of recording present in each epoch. Our class's creator reads this file, and uses it to pull out the <code>name</code> and <code>reference</code> number for all electrode (or imaging) probes. </p> <p>If our <code>reference.txt</code> file indicates that our vhlab \"type\" is singleEC (single extracellular) or 'ntrode', then it looks for other text files that contain a mapping between the name and reference of each probe and the channels that were used on a recording device to acquire it. In this experiment, we have <code>vhspike2_channelgrouping.txt</code> that indicates that our probe 'ctx | 1' was acquired on channel 11 of our CED Micro1401/Spike2 system. </p> <p>Finally, if a file named <code>stimtimes.txt</code> exists in the epoch directory, then we add in an epochprobemap entry for our visual stimulator:</p> name reference type devicestring subjectstring vis_stim 1 stimulator vhvis_spike2:mk1-3;e1-3;md1 treeshrew_12345@mylab.org <p>We will not reproduce the code here but refer the reader to the link for the source code of the class ndi.setup.epoch.epochprobemap_daqsystem_vhlab that is a subclass of ndi.epoch.epochprobemap_daqsystem.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#227-putting-it-all-together","title":"2.2.7 Putting it all together","text":"<p>Now that we have these pieces together, we can read our example data that we call <code>ts_exper2</code>. We will pull up the same plots that we pulled up in Tutorial 2.1.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#code-block-2271-type-this-into-matlab","title":"Code block 2.2.7.1 Type this into Matlab","text":"<pre><code>prefix = [userpath filesep 'Documents' filesep 'NDI']; % if you put the folder somewhere else, edit this\nS = ndi.setup.vhlab('ts_exper2',[prefix filesep 'ts_exper2']);\n\np_ctx1_list = S.getprobes('name','ctx','reference',1) % returns a cell array of matches\np_ctx1 = p_ctx1_list{1}; % take the first one, should be the only one\n\nepoch_to_read = 1;\n[data,t,timeref_p_ctx1]=p_ctx1.readtimeseries(epoch_to_read,-Inf,Inf); % read all data from epoch 1\nfigure(100);\nplot(t,data);\nxlabel('Time(s)');\nylabel('Voltage (V)');\nset(gca,'xlim',[t(1) t(end)]);\nbox off;\n\np_visstim_list = S.getprobes('type','stimulator') % returns a cell array of matches\np_visstim = p_visstim_list{1}; % take the first one, should be the only one\n[data,t,timeref_stim]=p_visstim.readtimeseries(timeref_p_ctx1,-Inf,Inf); % read all data from epoch 1 of p_ctx1 !\nfigure(100);\nhold on;\nvlt.neuro.stimulus.plot_stimulus_timeseries(7,t.stimon,t.stimoff,'stimid',data.stimid);\n</code></pre> <p>If you are paying close attention, you'll notice we got a little more information out of the <code>readtimeseries</code> command here. <code>t.stimoff</code> exists (it's extracted from our stimulus metadata), so we don't have to know the stimulus duration from elsewhere. That information is not directly accessible in the event record of the smr file, so there is an advantage to reading all the metadata that is available from all sources with a custom object.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/2_theautomatedway/#228-discussionfeedback","title":"2.2.8 Discussion/Feedback","text":"<p>This concludes our tutorial on setting up code files to read one's own data and metadata into NDI.</p> <p>To help make this process clearer, we also include 3 other case studies in reading data (tutorials currently under construction):</p> <ul> <li>Alessandra Angelluci lab (reads unpublished recording)</li> <li>Don Katz lab (reads Mukherjee et al., 2019) </li> <li>Eve Marder lab (reads Hamood et al., 2015)</li> </ul> <p>Post comments, bugs, questions, or discuss.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI","text":""},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#tutorial-23-using-apps-to-analyze-data-spike-sorting","title":"Tutorial 2.3: Using apps to analyze data (spike sorting)","text":"<p>You've seen how to read data from probes in NDI. Now suppose we want to do some analysis of this data? How would we do it?</p> <p>Clearly, one could write functions in Matlab that read the data and perform some sort of analysis. But it would be great to share (or borrow) those functions across the open source community, and to develop \"apps\" that excel at performing specific tasks. NDI allows both approaches.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#tutorial-231-what-is-an-app-in-ndi-ndiapp-objects","title":"Tutorial 2.3.1: What is an 'app' in NDI? ndi.app objects","text":"<p>An app for our purposes is any application program that can read data from NDI and perform some analysis or computation on this data. Some apps exist outside of NDI, and know how to read data from NDI experiments and write results back to NDI experimental sessions. One example of such an app is the spike sorting program JRClust. </p> <p>There is another set of apps that are developed specifically for NDI that are members of a special parent class called ndi.app. This parent class performs some services to help app developers maintain a consistant approach to make it easier for users and programmers that want to use the app to easily figure out what it does and how to  use it. </p> <p>Here, we will examine one of these apps that we made for spike extraction. Just like Windows computers come with NotePad and Mac computers come with TextEdit, our ndi.app.spikeextractor is a plain-but-usable program for extracting spike waveforms from voltage records. It is suitable for spike extraction situations where the channel count for each electrode is low, such as single electrodes or tetrodes. It is not suitable for dense, multichannel electrodes like NeuroPixels or dense NeuroNexus probes.</p> <p>We will use the program first as though we knew how to use it by magic, and then we will go through how one could figure out how to use the program if one didn't know.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#tutorial-232-extracting-spikes-using-ndiappspikeextractor","title":"Tutorial 2.3.2: Extracting spikes using ndi.app.spikeextractor","text":""},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#code-block-2321-type-this-into-matlab","title":"Code block 2.3.2.1. Type this into Matlab.","text":"<pre><code>dirname = [userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2']; % change this if you put the example somewhere else\nref = 'ts_exper2';\nS = ndi.setup.vhlab(ref,dirname);  \n\n% let's find our probes that correspond to extracellular electrodes\n\np = S.getprobes('type','n-trode');\n\n% make a new app instance\nse = ndi.app.spikeextractor(S);\n\n% find out what the spike extraction parameters are\nextraction_param_struct = se.defaultstruct_appdoc('extraction_parameters');\n% if we wanted to modify these parameters, we could\nextraction_param_struct.threshold_parameter = 4;\nextraction_param_struct.threshold_sign = 1;\nmy_extraction_name{1} = 'my_positive_extraction_params';\nextraction_param_doc = se.add_appdoc('extraction_parameters',extraction_param_struct,'Replace',my_extraction_name{1});\nmy_extraction_name{2} = 'my_negative_extraction_params';\nextraction_param_struct.threshold_parameter = -4;\nextraction_param_struct.threshold_sign = -1;\nextraction_param_doc_2 = se.add_appdoc('extraction_parameters',extraction_param_struct,'Replace',my_extraction_name{2});\n\n% we will add a parameter document to our database that our extractor will use\n\n\n% now let's perform the extraction over all epochs\n\nredo = 1; % redo it if we already did it\n % we know there are two probes, so do it for both\nse.extract(p{1},[],my_extraction_name{1},redo);\nse.extract(p{2},[],my_extraction_name{2},redo);\n</code></pre> <p>Now, let's take a look at what we extracted:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#code-block-2322-type-this-into-matlab","title":"Code block 2.3.2.2 Type this into Matlab.","text":"<pre><code>% now let's take a look at what we got for the first probe, first epoch\nepoch_id = 't00001';\n\n[spikes,waveparameters,spikewaves_doc] = se.loaddata_appdoc('spikewaves',p{1},epoch_id,my_extraction_name{1});\n\n% let's plot these waveforms\n\nt_spike = [waveparameters.S0:waveparameters.S1] * 1/waveparameters.samplerate; % create a time vector\n\n% spikes is a 3-d matrix.\n% The first dimension has the number of samples per spike.\n% The second dimension has data from each channel. Because this is a single electrode, there is only one channel. If it were a tetrode, this would be 4.\n% The third dimension is the number of spikes detected.\nsize(spikes)\n\nfigure(101);\nplot(t_spike,squeeze(spikes));\nxlabel('Time (s)');\nylabel('Voltage');\nbox off;\n\n% We can see how we did by plotting the spike times back with the raw data:\n\n[spiketimes,spiketimes_doc] = se.loaddata_appdoc('spiketimes',p{1},epoch_id,my_extraction_name{1});\n\n[d,t] = readtimeseries(p{1},epoch_id,-Inf,Inf);\nfigure(102);\nplot(t,d);\nhold on;\nsamples = round(vlt.signal.value2sample(spiketimes, 1/(t(2)-t(1)), 0));\nplot(t(samples),d(samples),'ko'); % mark each spike peak location with a circle \n</code></pre>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#233-spike-sorting-using-ndiappspikesorter","title":"2.3.3 Spike sorting using ndi.app.spikesorter","text":"<p>Now we will feed our results to our plain spikesorting application, which relies on either Kmeans clustering the KlustaKwik clustering tool (Harris KD, J. Neurophys., 2000).</p> <p>As a first step, we will create a sorting parameters document to specify how we will perform the sorting. This program includes a small graphical user interface to help in choosing the clusters (called in the line that has <code>ssa.spike_sort</code>). For a quick video demo of how to use this graphical user interface in the context of this tutorial, click here.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#code-block-2331-type-this-into-matlab","title":"Code block 2.3.3.1 Type this into Matlab.","text":"<pre><code>ssa = ndi.app.spikesorter(S);\n\nsorting_params_struct = ssa.defaultstruct_appdoc('sorting_parameters');\nmy_sorting_name = 'my_sorting_params';\nsorting_param_doc = ssa.add_appdoc('sorting_parameters',sorting_params_struct,'Replace',my_sorting_name);\n\nspike_cluster_doc = ssa.spike_sort(p{1},my_extraction_name{1},my_sorting_name,redo)\nssa.clusters2neurons(p{1},my_sorting_name,my_extraction_name{1},redo)\n\nspike_cluster_doc = ssa.spike_sort(p{2},my_extraction_name{2},my_sorting_name,redo)\nssa.clusters2neurons(p{2},my_sorting_name,my_extraction_name{2})\n</code></pre> <p>Now let's check the spike times of the the first neuron</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#code-block-2332-type-this-into-matlab","title":"Code block 2.3.3.2 Type this into Matlab.","text":"<pre><code>e = S.getelements('element.type','spikes','element.name','ctx_1')\n[D,T] = e{1}.readtimeseries('t00001',-Inf,Inf);\n\nfigure(102);\nhold on;\nsamples2 = round(vlt.signal.value2sample(T, 1/(t(2)-t(1)), 0));\nplot(T,d(samples2), 'gs');\n\n% now spike times from neuron 1 are plotted as green squares\n</code></pre> <p>You can observe that most of the spiketimes that were detected on the first probe are part of neuron 1, but there are some lower amplitude peaks that are not.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#234-how-can-we-learn-about-the-functionality-of-ndiapp-objects","title":"2.3.4 How can we learn about the functionality of ndi.app objects?","text":"<p>In section 2.2, we used ndi.app.spikeextractor as though we were born knowning what to do. How could we learn how to use a new app if there isn't a tutorial available?</p> <p>There are three great ways to learn about what apps do and how to use them. </p> <ol> <li> <p>Read the main documentation for the app by typing <code>help *appclass*</code> or <code>doc *appclass*</code> into the Matlab command line. For example, try <code>help ndi.app.spikeextractor</code>.</p> </li> <li> <p>Many apps follow what we call the <code>appdoc</code> convention for creating the documents that they create and loading the documents and data that they have generated. This is a convention that have developed relatively recently, and we are in the process of converting all of our included ndi.app objects to use this form. If an app follows ndi.app.appdoc (which means it is a member of the ndi.app.appdoc class), then they will have a set of methods called:</p> </li> </ol> Method Description appdoc_description The help information should have a full description of all database documents that are produced by the application. Type <code>help *appname*/appdoc_description</code>. For example, <code>help ndi.app.spikeextractor/appdoc_description</code> add_appdoc Add a new document of a given type to the database, using the app clear_appdoc Delete a document of a given type from the database, using the app find_appdoc Find the NDI document for a given type, using the app loaddata_appdoc Load binary data associated with an NDI document, using the app <p>Let's look at the document types that are written and needed by ndi.app.spikeextractor: </p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#code-block-2341-type-this-into-matlab","title":"Code block 2.3.4.1. Type this into Matlab","text":"<pre><code>help ndi.app.spikeextractor/appdoc_description\n</code></pre> <p>You see a long bit of text that describes all of the document types that are generated and calculated by ndi.app.spikeextractor.</p> <p>Here's a table of the document types and their \"about\" info for ndi.app.spikeextractor:</p> Appdoc Type Description EXTRACTION_PARAMETERS EXTRACTION_PARAMETERS documents hold the parameters that are to be used to guide the extraction of spikewaves EXTRACTION_PARAMETERS_MODIFICATION EXTRACTION_PARAMETERS_MODIFICATION documents allow the user to modify the spike extraction parameters for a specific epoch SPIKEWAVES SPIKEWAVES documents store the spike waveforms that are read during a spike extraction. It DEPENDS ON the ndi.time.timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that descibed the extraction SPIKETIMES SPIKETIMES documents store the times spike waveforms that are read during a spike extraction. It DEPENDS ON the ndi.time.timeseries object on which the extraction is performed and the EXTRACTION_PARAMETERS that descibed the extraction. The times are in the local epoch time units. <ol> <li>If the app writer really loves his/her/their users, then he/she/they will create a tutorial. Look for a tutorial, that should be referenced in the Matlab help. We are working on adding tutorials for all of our included applications, but we are not there yet.</li> </ol>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/3_spikesorting/#discussionfeedback-235","title":"Discussion/Feedback 2.3.5","text":"<p>Post comments, bugs, questions, or discuss.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/","title":"Tutorial 2: Analyzing your first electrophysiology experiment with NDI","text":""},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#24-analyzing-stimulus-responses","title":"2.4 Analyzing stimulus responses","text":"<p>In the last tutorial, we saw how to use applications to identify spikes from electrophysiology recordings. Now we will employ another plain app  for calculating responses to stimulation. Note that this tutorial requires that you have completed Tutorial 2.3 (the analysis here depends on the spike sorted results of Tutorial 2.3).</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#241-sinusoidal-gratings-to-assess-direction-and-orientation-preferences-and-spatial-frequency-preferences","title":"2.4.1 Sinusoidal gratings to assess direction and orientation preferences and spatial frequency preferences","text":"<p>In this experiment (Van Hooser et al. 2013), we assessed tuning for stimulus direction and  spatial frequency with sinusoidal gratings. A series of sinusoidal gratings drifting in different directions are shown here.  In the actual experiments, we assessed orientation/direction preferences coarsely, and then found the optimal spatial and temporal frequency for the cell before assessing orientation/direction in a fine manner at the optimal spatial and temporal frequency for the cell. The fine orientation/direction assessment is what is included in this demo.</p> <p>So let's open our demo experiment and get started! We are also going to identify our stimulator (visual stimulus system) so that we can tell NDI to analyze stimuli from this device.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2411-type-this-into-matlab","title":"Code Block 2.4.1.1. Type this into Matlab.","text":"<pre><code>dirname = [userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2']; % change this if you put the example somewhere else\nref = 'ts_exper2';\nS = ndi.session.dir(ref,dirname);\n\n% find out stimulus probe\nstimprobe = S.getprobes('type','stimulator');\nstimprobe = stimprobe{1}; % grab the first one, should be our stimulus monitor\n</code></pre>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#242-gathering-stimulus-information","title":"2.4.2 Gathering stimulus information","text":"<p>The first step in analyzing stimuli is to gather information about the stimulus presentations that were performed in the experiment. We use a  small dedicated app for this purpose called ndi.app.stimulus.decoder.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2421-type-this-into-matlab","title":"Code Block 2.4.2.1. Type this into Matlab.","text":"<pre><code>sapp = ndi.app.stimulus.decoder(S);\nredo = 1;\n[stim_pres_docs] = sapp.parse_stimuli(stimprobe,redo);\n</code></pre> <p>Now let's take a look at what has been decoded:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2422-type-this-into-matlab","title":"Code Block 2.4.2.2. Type this into Matlab.","text":"<pre><code>stim_pres_docs{1}.document_properties.stimulus_presentation\n\n% these are the fields that were decoded by ndi.app.stimulus.decoder\n% let's take a look\n\n % here is information about the presentation time of the first stimulus\nstim_pres_docs{1}.document_properties.stimulus_presentation.presentation_time(1)\n\n % here is information about the presentation order of the first 10 stimuli shown:\n\nstim_pres_docs{1}.document_properties.stimulus_presentation.presentation_order(1:10)\n\n % We see that the first stimulus that was presented was stimulus number 4. Let's take a look at its properties:\n\nstim_pres_docs{1}.document_properties.stimulus_presentation.stimuli(4).parameters\n\n % We can also take a look at the control or blank stimulus properties:\n\nstim_pres_docs{1}.document_properties.stimulus_presentation.stimuli(17).parameters\n\n% you can see that there are 4 such documents, one for each stimulus presentation in the experiment\n\nstim_pres_docs,\n</code></pre>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#243-labeling-control-stimuli","title":"2.4.3 Labeling control stimuli","text":"<p>For most turning curve data, we want to compare the response during the time of stimulation to the response of the system during some background time, or some \"control\" stimulus. For visual stimuli, this is often a period where a gray screen is shown that has the same duration as the visual stimuli that may be shown. For an auditory stimulus, it may be a period of time when no specific auditory stimulus is playing and the animal hears the noise of the background environment. Often, stimuli have in their parameters a field that declares that a stimulus is a control or blank stimulus. Our stimuli have such a code as shown above (stimulus 17).</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2431-type-this-into-matlab","title":"Code Block 2.4.3.1. Type this into Matlab.","text":"<pre><code>rapp = ndi.app.stimulus.tuning_response(S);\ncs_doc = rapp.label_control_stimuli(stimprobe,redo);\n</code></pre> <p>Let's examine what it did. We see that the ndi.app.stimuli.tuning_response app each of the 85 stimuli with the \"blank\" stimulus that was presented closest in time:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2432-type-this-into-matlab","title":"Code Block 2.4.3.2. Type this into Matlab.","text":"<pre><code> % see the control stimulus identifier for all the stimuli\ncs_doc{1}.document_properties.control_stimulus_ids.control_stimulus_ids\n % see the method used to identify the control stimulus for each stimulus:\ncs_doc{1}.document_properties.control_stimulus_ids.control_stimulus_id_method\n\n % see the help for the label_control_stimuli function:\nhelp ndi.app.stimulus.tuning_response.label_control_stimuli\n</code></pre>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#244-calculating-stimulus-responses","title":"2.4.4 Calculating stimulus responses","text":"<p>Once the control stimuli have been labeled (if desired; it is optional), then one can proceed to calcuate the stimulus responses. To do this, we  can employ the [ndi.app.stimuli.tuning_response]((https://vh-lab.github.io/NDI-matlab/NDI-matlab/reference/%2Bndi/%2Bapp/%2Bstimulus/tuning_response.m/) app. This program will calculate the mean response to each stimulus. Because gratings are a periodic stimulus, this function will also calculate the response at the fundamental stimulus temporal frequency (F1 component) and at twice this temporal frequency (F2 component).</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2441-type-this-into-matlab","title":"Code block 2.4.4.1. Type this into Matlab.","text":"<pre><code>e = S.getelements('element.type','spikes');\n\nrdocs{1} = rapp.stimulus_responses(stimprobe, e{1}, redo);\nrdocs{2} = rapp.stimulus_responses(stimprobe, e{2}, redo);\n</code></pre> <p>Now we can examine the sets of documents that are produced. We see that there are two sets of 3 documents each:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2442-type-this-into-matlab","title":"Code block 2.4.4.2. Type this into Matlab.","text":"<pre><code> % look at rdocs{1}:\nrdocs{1}\n % it is a 1x2 cell array, and each of these cell entries is in turn a 1x3 cell array\nrdocs{1}{1}\n % this reflects the two epochs ('t00001' and 't00002'), and, for each epoch, the analysis of the mean response, the F1 component, and the F2 component\n\n % to see this, let's look at the first document\n\nrdocs{1}{1}{1}.document_properties\nrdocs{1}{1}{1}.document_properties.stimulus_response\n\nrdocs{1}{1}{1}.document_properties.stimulus_response_scalar\n % we see that this is the 'mean' response. We can see the responses contained within:\n\nrdocs{1}{1}{1}.document_properties.stimulus_response_scalar.responses\n % we can see that each of the 85 presentations includes a response that can possibly have a real and imaginary component, as well as a control response\n\nrdocs{1}{1}{1}.document_properties.stimulus_response_scalar.responses.response_real(1)\nrdocs{1}{1}{1}.document_properties.stimulus_response_scalar.responses.control_response_real(1)\n\n</code></pre>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#245-computing-an-orientationdirection-tuning-curve-and-calculating-orientationdirection-index-values","title":"2.4.5 Computing an orientation/direction tuning curve and calculating orientation/direction index values","text":"<p>Now that we have all of the responses to the individual stimuli, we can create a tuning curve, which examines how the response of the neuron depends on a particular stimulus parameter. In this case, the stimulus is 'angle', which corresponds to the direction of the sinusoidal grating stimulus. We have built a specific application ndi.app.oridirtuning to process tuning curves in response to oriented stimuli, or stimuli moving in particular directions. </p> <p>After generating the tuning curve, we can calculate many, many index values that characterize the tuning of each cell. The function that calculates the orientation and direction index values pulls up a plot. If you look at the plot that examines the mean response for <code>ctx_1</code>, you can see that the cell responds strongly to gratings drifting at 120 degrees and 300 degrees (0 degrees is up; 90 degrees is to the right).</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2451-type-this-into-matlab","title":"Code block 2.4.5.1. Type this into Matlab.","text":"<pre><code>oapp = ndi.app.oridirtuning(S);\n\nfor i=1:2,\n    tdoc{i} = oapp.calculate_all_tuning_curves(e{i},'Replace'); % replace any existing \n    oriprops{i} = oapp.calculate_all_oridir_indexes(e{i},'Replace'); % this takes a few minutes\nend;\n</code></pre> <p>The program should pop up 6 figures that look like this when they are adjusted to have the same axes:</p> <p></p> <p>The tuning curves show that cell Ctx 1 has a strong orientation-tuned mean response to bars drifting at an angle of about 90 degrees (vertical bars moving rightward) or 270 degrees (vertical bars moving leftward). The cell LGN 1 does not exhibit strong tuning for orientation or direction, but instead exhibits a strong modulated response (F1) to most directions.</p> <p>Now let's take a look at these index values for the first cell. These index values are described in Mazurek et al. (2014).</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#code-block-2452-type-this-into-matlab","title":"Code block 2.4.5.2. Type this into Matlab.","text":"<pre><code>  % see all the categories\noriprops{1}{1}{1}.document_properties.orientation_direction_tuning\n  % see the property information\noriprops{1}{1}{1}.document_properties.orientation_direction_tuning.properties\n  % see significance. Responses across orientation are very significant:\noriprops{1}{1}{1}.document_properties.orientation_direction_tuning.significance\n  % fit parameters:\noriprops{1}{1}{1}.document_properties.orientation_direction_tuning.fit\n  % vector tuning parameters:\noriprops{1}{1}{1}.document_properties.orientation_direction_tuning.vector\n</code></pre> <p>Now we have seen how we can analyze stimulus responses and use applications to calculate tuning curves and index values. If you had your own stimulus responses of a different type, you could write functions or apps that analyze the results and calculate the appropriate index values.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/4_analyzing_tuning_curves/#245-discussionfeedback","title":"2.4.5 Discussion/Feedback","text":"<p>Post comments, bugs, questions, or discuss.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/","title":"2 Analyzing your first electrophysiology experiment with NDI","text":""},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#25-understanding-and-searching-the-ndi-database","title":"2.5 Understanding and searching the NDI database","text":""},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#251-the-ndidatabase-and-ndidocument-objects","title":"2.5.1 The ndi.database and ndi.document objects","text":"<p>Each ndi.session object has an ndi.database object as one of its properties. This database holds the ndi.document objects  that contain the metadata and data results of calculations that apps and programs have performed on the original data.</p> <p>First, let's open the ndi.session that we've been working with.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2511-type-this-into-matlab","title":"Code block 2.5.1.1. Type this into Matlab.","text":"<pre><code>dirname = [userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2']; % change this if you put the example somewhere else\nref = 'ts_exper2';\nS = ndi.session.dir(ref,dirname);\n</code></pre> <p>We find documents by searching for them with the ndi.session method <code>database_search()</code>. For example, we can examine all documents that contain stimulus presentation data:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2512-type-this-into-matlab","title":"Code block 2.5.1.2. Type this into Matlab.","text":"<pre><code>stim_pres_doc = S.database_search(ndi.query('','isa','stimulus_presentation',''))\n  % should see:\n  %   stim_pres_doc =\n  %   1x4 cell array\n  %    {1x1 ndi.document}    {1x1 ndi.document}    {1x1 ndi.document}    {1x1 ndi.document}\n\nstim_pres_doc{1}\n  % should see:\n  %   ans = \n  %     document with properties:\n  %       document_properties: [1x1 struct]\n\nstim_pres_doc{1}.document_properties\n  % should see:\n  %   ans = \n  %   struct with fields:\n  %                        app: [1x1 struct]\n  %                 depends_on: [1x1 struct]\n  %             document_class: [1x1 struct]\n  %                    epochid: 't00001'\n  %                epochid_fix: [1x1 struct]\n  %               base: [1x1 struct]\n  %      stimulus_presentation: [1x1 struct]\n</code></pre> <p>We have used an ndi.query object to conduct our search, and we will describe those objects a little later.</p> <p>Here we see that ndi.document objects have a property called <code>document_properties</code> that contains all of the text information that is stored in the document. We will look through all of these properties here, and we also direct you to the documentation page for the ndi.document class stimulus_presentation.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#252-all-ndidocument-objects-have-the-fields-document_class-and-base","title":"2.5.2 All ndi.document objects have the fields <code>document_class</code> and <code>base</code>.","text":"<p>The <code>document_class</code> fields contain critical information about the class, such as the file that contains its definition and its class name. In addition, document types can be composed of multiple document types. The stimulus presentation class has two superclasses: ndi.document and ndi.document_epochid. This means that a stimulus_presentation document has its own fields, plus all of the fields from ndi.document documents and and ndi.document_epochid documents. </p> <p>Let's look at the data that specifies the superclasses:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2521-type-this-into-matlab","title":"Code block 2.5.2.1. Type this into Matlab.","text":"<pre><code>stim_pres_doc{1}.document_properties.document_class\n% \n% ans = \n%  struct with fields:\n%            definition: '$NDIDOCUMENTPATH/stimulus/stimulus_presentation.json'\n%            validation: '$NDISCHEMAPATH/stimulus/stimulus_presentation_schema.json'\n%            class_name: 'stimulus_presentation'\n%    property_list_name: 'stimulus_presentation'\n%         class_version: 1\n%          superclasses: [3x1 struct]\n\nstim_pres_doc{1}.document_properties.document_class.superclasses(1)\n% ans = \n%   struct with fields:\n%    definition: '$NDIDOCUMENTPATH/base.json'\n\nstim_pres_doc{1}.document_properties.document_class.superclasses(2)\n% ans = \n%  struct with fields:\n%    definition: '$NDIDOCUMENTPATH/epochid.json'\n\nstim_pres_doc{1}.document_properties.document_class.superclasses(3)\n%ans = \n%  struct with fields:\n%    definition: '$NDIDOCUMENTPATH/base.json'\n</code></pre> <p>All documents have base as a superclass. Note that ndi.document is the name of the software object in Matlab (and Python), whereas base is the name of the database object type that has the following fields:</p> field default_value data type description session_id - NDI ID string The globally unique identifier of any data session that produced this document id - NDI ID string The globally unique identifier of this document name character array (ASCII) A user-specified name, free for users/developers to use as they like type character array (ASCII) A user-specified type, free for users/developers to use as they like (deprecated, will be removed) datestamp (current time) ISO-8601 date string, time zone must be UTC leap seconds Time of document creation database_version - character array (ASCII) Version of this document in the database <p>The most useful item in each ndi.document is its unique identifier <code>id</code>. This is a globally unique identifier, which means that no other ndi.document or corresponding base anywhere in the universe has the same identifier. It is constructed of two hexidecimal strings: the first is based on the time of creation in Universal Controlled Time (UTC), and the second is created by a random number generator. This constructions means that <code>ndi.document</code> ids are not only unique, but also that sorting them alphabetically will give you the creation order of the documents. This can come in handy from time to time.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#253-searching-for-base-with-ndiquery","title":"2.5.3 Searching for base with ndi.query","text":"<p>Performing analyses or analyses of analyses in NDI involves searching for previous entries in the database, building upon them, and writing the results back to the database. The object ndi.query allows one to express database searches. Let's learn about ndi.query with a few examples.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2531-type-this-into-matlab","title":"Code block 2.5.3.1. Type this into Matlab.","text":"<pre><code>% search for document classes of type 'stimulus_presentation'\nq_stim = ndi.query('','isa','stimulus_presentation',''); \nstim_docs = S.database_search(q_stim)\n  % returns 35 matches for me\n\n% now suppose we also want to search for documents that were made by \n% our app ndi_app_stimulus_decoder:\n\nq_stim_decoder = ndi.query('app.name','exact_string','ndi_app_stimulus_decoder','');\n\n% we can find based on this criteria alone...\nstim_decoder_docs = S.database_search(q_stim_decoder)\n  % returns 4 matches for me\n\n% ...or we can put the search terms together in an AND to demand both queries are satisfied\nq_stim_and_stim_decoder_docs = S.database_search(q_stim_decoder &amp; q_stim);\n  % returns 4 matches for me, because all q_stim_decoder docs have 'stimulus' in the class_name\n\n% we can also put queries together into a single variable:\n\nq_or = q_stim_decoder | q_stim;\nq_and = q_stim_decoder &amp; q_stim;\nq_stim_and_stim_decoder_docs = S.database_search(q_and)  % produces the same as above\n\n% now we can inspect these documents:\n\nq_stim_and_stim_decoder_docs{1}.document_properties\n % ans = \n %   struct with fields:\n %                       app: [1x1 struct]\n %                depends_on: [1x1 struct]\n %            document_class: [1x1 struct]\n %                   epochid: 't00001'\n %               epochid_fix: [1x1 struct]\n %              base: [1x1 struct]\n %     stimulus_presentation: [1x1 struct]\n\nq_stim_and_stim_decoder_docs{1}.document_properties.app\n % for me:\n % ans = \n %   struct with fields:\n %                     name: 'ndi_app_stimulus_decoder'\n %                  version: 'fa1fa7818b215975c43f68ece523b065852ef891'\n %                      url: 'https://github.com/VH-Lab/NDI-matlab'\n %                       os: 'MACI64'\n %               os_version: '10.14.6'\n %              interpreter: 'MATLAB'\n %      interpreter_version: '9.8'\n\nq_stim_and_stim_decoder_docs{1}.document_properties.stimulus_presentation\n % ans = \n %   struct with fields:\n %     presentation_order: [85x1 double]\n %      presentation_time: [85x1 struct]\n %                stimuli: [17x1 struct]\n\n</code></pre> <p>The different possible search terms for ndi.query objects is shown below:</p> <pre><code>NDI_QUERY_OBJ = ndi.query(FIELD, OPERATION, PARAM1, PARAM2)\n</code></pre> Operation Description <code>'regexp'</code> are there any regular expression matches between the field value and <code>'param1'</code>? <code>'exact_string'</code> is the field value an exact string match for <code>'param1'</code>? <code>'contains_string'</code> is the field value a char array that contains <code>'param1'</code>? <code>'exact_number'</code> is the field value exactly <code>'param1'</code> (same size and values)? <code>'lessthan'</code> is the field value less than <code>'param1'</code> (and comparable size) <code>'lessthaneq'</code> is the field value less than or equal to <code>'param1'</code> (and comparable size) <code>'greaterthan'</code> is the field value greater than <code>'param1'</code> (and comparable size) <code>'greaterthaneq'</code> is the field value greater than or equal to <code>'param1'</code> (and comparable size) <code>'hasfield'</code> is the field present? (no role for <code>'param1'</code> or <code>'param2'</code>) <code>'hasanysubfield_contains_string'</code> Is the field value an array of structs or cell array of structs such that any has a field named <code>'param1'</code> with a string that contains the string in <code>'param2'</code>? <code>'or'</code> are any of the searchstruct elements specified in '<code>param1</code>' true? <code>'isa'</code> is <code>'param1'</code> either a superclass or the document class itself of the base? <code>'depends_on'</code> does the document depend on an item with name <code>'param1'</code> and value <code>'param2'</code>?"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#254-the-depends_on-field-and-database-structure","title":"2.5.4 The <code>depends_on</code> field and database structure","text":"<p>Many analysis procedures or creation procedures are dependent on the results from previous calculations. These dependencies are denoted in a field called <code>depends_on</code>. Let's look at the dependencies for our example stimulus presentation:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2541-type-this-into-matlab","title":"Code block 2.5.4.1. Type this into Matlab.","text":"<pre><code>stim_pres_doc{1}.document_properties.depends_on\n% should see:\n%   ans = \n%     struct with fields:\n%        name: 'stimulus_element_id'\n%       value: '412687d3ae63489a_40d1d65fa08bb81a'\n\n % what is this node at 412687d3ae63489a_40d1d65fa08bb81a ?\n\nmydoc = S.database_search(ndi.query('base.id','exact_string', ...\n    stim_pres_doc{1}.document_properties.depends_on(1).value,''));\n\nmydoc{1}.document_properties\n% ans = \n%    struct with fields:\n%           depends_on: [2x1 struct]\n%       document_class: [1x1 struct]\n%              element: [1x1 struct]\n%         base: [1x1 struct]\n\nmydoc{1}.document_properties.element\n% ans = \n%   struct with fields:\n%      ndi_element_class: 'ndi.probe.timeseries.stimulator'\n%                   name: 'vhvis_spike2'\n%              reference: 1\n%                   type: 'stimulator'\n%                 direct: 1\n\n% We see it is our visual stimulation system\n</code></pre> <p>Some documents have a lot of depends_on items. Let's examine our ctx_1 neuron that we created in Tutorial 2.3.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2542-type-this-into-matlab","title":"Code block 2.5.4.2. Type this into Matlab.","text":"<pre><code>e = S.getelements('element.type','spikes');\n\nspikes_doc = S.database_search(ndi.query('base.id','exact_string',e{1}.id(),''))\nspikes_doc = spikes_doc{1}\n\nfor i=1:numel(spikes_doc.document_properties.depends_on),\n    disp(['Depends on ' spikes_doc.document_properties.depends_on(i).name ': ' spikes_doc.document_properties.depends_on(i).value]);\nend;\n\n% Should see 3 entries, with your own unique IDs:\n%   Depends on underlying_element_id: 412687d3ad57c851_40860c116cfc64c2\n%   Depends on subject_id: 412687d3ad571d87_c0dac60e10c0f2a5\n%   Depends on spike_clusters_id: 412687f62d1057b8_40c28348e09e5e9b\n</code></pre>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#255-structure-of-an-ndidatabase","title":"2.5.5 Structure of an ndi.database","text":"<p>NDI databases (and any analysis project) has a beautiful underlying structure that one can visualize, to get a sense of how the calculations and inferred objects (like neurons that spike) are derived from one another.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#code-block-2551-type-this-into-matlab","title":"Code block 2.5.5.1. Type this into Matlab.","text":"<pre><code>interactive = 1; % set it to zero if you have Matlab 2020a or later for DataTip navigation! Try it!\ndocs=S.database_search(ndi.query('base.id','regexp','(.*)','')); % this finds ALL documents\n[g,nodes,mdigraph] = ndi.database.fun.docs2graph(docs);\nndi.database.fun.plotinteractivedocgraph(docs,g,mdigraph,nodes,'layered',interactive);\n</code></pre> <p>For this session, the graph should look something like this:</p> <p></p> <p>You can explore the nodes by clicking next to them. On the command line, a summary of the document will appear. Here is a short video demonstration. If you turn on zooming (either by selecting it from the Tools menu in the figure, typing <code>zoom on</code> on the command line, or by hovering over the figure and then clicking on the magnifying glass that appears in the upper right), you can zoom around the graph. You'll need to turn zoom off to be able to get a summary by clicking near the nodes. You can turn zoom off either by selecting Zoom In again from the Tools menu in the figure to de-select the tool, or by typing <code>zoom off</code> on the command line, or by hovering over the figure and clicking the magnifying glass again.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment/5_searching_ndi_databases/#256-discussionfeedback","title":"2.5.6 Discussion/Feedback","text":"<p>Post comments, bugs, questions, or discuss.</p> <p>You may find it odd that we haven't told you how to add items to the database here in this tutorial. Instead, we've only told you how to inspect the database. The process of creating and testing a document schema and adding and removing documents are described in a Planned Tutorial. The link will be here when it is created.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/","title":"Tutorial 3.1","text":""},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#getting-started-with-ndi","title":"Getting started with NDI","text":"<p>This tutorial is an alternative to Tutorial 2.1 that is designed for users who are less familiar with programming. It will provide a brief overview of Matlab and object-oriented programming, more in-depth information about the methods and syntax used, and a guide on how to navigate the website and its documentation. </p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#basics-of-matlab","title":"Basics of Matlab","text":"<p>Matlab is a language specifically designed for calculations, data visualization, and pattern recognition. It is less flexible in some areas than traditional programming languages, but it excels when working with matrices and arrays, which are data structures that contain multiple elements. It includes many built-in tools and additional libraries for a large variety of tasks.</p> <p>Matlab allows for object-oriented programming, a programming paradigm where data and methods that modify that data are bundled together into objects. Classes can provide a template for objects, including class variables, methods, and constructors, which are methods that are used to create an object of a class with specific input parameters. </p> <p>Classes define the states and behaviors of its objects, and constructors determine the initial values of a given object's attributes, called variables. Variables are used within programs to store all kinds of information, including numbers, individual characters, strings of characters, or arrays, which include a larger number of any given type of variable. Unlike many other programming languages, we do not have to specifically state a variable's type when declaring it.</p> <p>We will start with learning to read an example dataset into NDI. We assume you have already installed NDI and taken the introductory tutorial of the NDI model. These data are available in a compressed folder here. To learn more about Matlab, take a look at . Prior to starting the code, put the \"ts_exper1\" folder into your NDI folder. The NDI folder should be listed under MATLAB\\Documents\\NDI, which is created during the installation of NDI. The MATLAB folder itself is found in the default Documents folder in the Finder. <p>Normally, we'd use some helper functions to open our data to make this process even easier, but this tutorial takes the user through the full manual process for training purposes. Throughout this tutorial, we will first go through the code in detail as necessary, then describe the general function of the block. </p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#311-introduction-to-the-experiment","title":"3.1.1 Introduction to the experiment","text":"<p>These data are single neuron recordings made with electrodes in the anesthetized tree shrew visual as a part of Van Hooser et al. 2013. This example data is a very small subset of the original data for the purposes of illustration.</p> <p></p> <p>In this experiment, a single unit recording electrode was inserted into either lateral geniculate nucleus or V1. The electrode was connected to  an amplifier, and the output signal was recorded by a Cambridge Electronic Design (CED) micro1401 digital acquisition board. A CED Spike2 software script was used that stored 1 recording epoch per folder. In software, the voltage from the electrode was assigned to channel 11. A visual stimulus monitor was set up in front of the animal, and visual stimuli were  generated by custom software running on a separate computer. A record of the stimulus parameters was stored in the epoch folder in a file called <code>stims.mat</code>, and stimulus timing information was delivered to the digital inputs of the micro1401 in the form of a stimulus onset trigger and an 8-bit stimulus code signal that were generated by the stimulus computer.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#312-introduction-to-the-data","title":"3.1.2 Introduction to the data","text":"<p>The data are in a folder called <code>ts_exper1</code>. It contains recordings of two neurons, an LGN neuron and a V1 neuron, to presentation of sinusoidal  gratings that either vary in orientation or in spatial frequency. The data, as provided by the host lab, are organized into subfolders, named <code>t00001</code>, <code>t00002</code>, <code>t00003</code>, and <code>t00004</code>. The first two folders are recordings of the LGN neuron, and the second two folders are recordings of the V1 neuron. Each <code>t0000N</code> folder has 3 files:</p> <ul> <li><code>probemap.txt</code> - a file that we made for NDI that describe what probes are recorded in this folder</li> <li><code>spike2data.smr</code> - a CED Spike2 file that has the raw electrophysiology data and the stimulus timing information</li> <li><code>stims.mat</code> - A Matlab file that has detailed parameters of the stimuli that were run</li> </ul> <p>Again, we recommend that you put ts_exper1 into the NDI folder within the MATLAB folder. It will make it much easier for Matlab to access it, and allow for the following code blocks to work properly.</p> <p>First, let's list these files using the <code>ls</code> command (that's the letter <code>l</code> followed by the letter <code>s</code>, short for list) and take a quick look at what is in them. Set up the \"prefix\" path to your data as necessary. (Here, we assume you put the <code>ts_exper1</code> folder into your Matlab <code>userpath</code> folder but you can put it anywhere.)</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3121-setting-a-path-type-this-into-matlab","title":"Code block 3.1.2.1: Setting a Path (Type this into Matlab)","text":"<pre><code>prefix = [userpath filesep 'Documents' filesep 'NDI']; % or '/Users/yourusername/Desktop/' if you put it on the desktop perhaps\nls([prefix filesep 'ts_exper1' filesep 't*']); % list all the files in the t0000N folders\n</code></pre> <p>In the first line, we declare and initialize a variable called \"prefix.\" Declaring a variable means assigning it a name and allocating memory for data to be stored, and initializing it means to assign it a value. In this case, this variable \"prefix\" has been assigned a text string that corresponds to a folder path, or an ordered list of folders. </p> <p>In order to make this path, we start by using the function \"userpath,\" which returns the name of the default MATLAB folder that we previously put the <code>ts_exper1</code> folder into. Each new folder name afterwards represents going to a subfolder within the starting folder, and \"filesep\" acts as the separator characters between subfolders. We use filesep to make sure that every type of device can properly read the path, as different operating systems have different file separation characters. In Windows, this path would be represented as MATLAB\\Documents\\NDI, while in macOS, this path is MATLAB/Documents/NDI. Rather than writing out the entire path every time we access a file, we will want to go through the process of assigning a path to a variable for quicker access.</p> <p>The <code>ls</code> command (short for list), lists all the files in a designated folder. In this case, we start from the folder described by \"prefix,\" which we initialized earlier as MATLAB\\Documents\\NDI, then we go further down and select the t* folder inside ts_exper1. </p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3122-examining-the-data-type-this-in-to-matlab","title":"Code block 3.1.2.2: Examining the Data (Type this in to Matlab)","text":"<pre><code>my_smr_file = fullfile(prefix,'ts_exper1','t00001','spike2data.smr')\nndi.example.tutorial.plottreeshrewdata(my_smr_file); \n</code></pre> <p>In this block, we again assign a path to a variable. In this case, we use the fullfile function, which builds a path to a single file instead of an entire folder. This particular function uses commas rather than filesep between each subfolder/file; this is used whenever separating arguments in a method or function. Note that we reuse prefix, the variable that we defined earlier, in order to create our path more simply.</p> <p>The next line introduces the concept of packages and their functions. Packages are folders that are used primarily to organize related classes and functions; they can also contain other subpackages. The syntax of our class tells us how the packages are structured: the main package is named \"ndi,\" our subpackage is named \"example,\" and the next subpackage is called \"tutorial.\"  Functions are files that contain multiple lines of code that receive inputs. As opposed to a script, which is a program that performs exactly the same way every time, functions are more like mathematical equations, having varied outputs or effects depending on their inputs. Our function is called plottreeshrewdata, which naturally plots the tree shrew neural data that our electrode gathered. This particular function requires an input parameter. In this case, this function requires a path to a specific file, which it will plot based on the file's data. Functions are useful when you have a specific piece of code that must be repeated several times and also requires many unique inputs. </p> <p>Information about NDI packages and classes can be found in the documentation on the sidebar. The sidebar shows the hierarchy of packages and classes under the document reference and the syntax, descriptions of each parameter, and overall function of every method under the code reference.  This particular method is found here. Looking at the documentation is one of the best ways to familiarize yourself with the different classes and methods of any program. </p> <p>This function shows the raw voltage recording and the stimulus timing information. Each stimulus appears as a number and its duration is indicated by the black bar. You can pan with the mouse to scroll through the recording.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#313-specifying-the-metadata-that-ndi-needs-to-read-the-experiment","title":"3.1.3 Specifying the metadata that NDI needs to read the experiment","text":"<p>Metadata is \"data about data\"- in this case, metadata is all information about the probes themselves, including their names, types, and unique identification. In this example, we have already prepared the metadata files that are necessary for NDI to read the data. Let's look at them in turn.</p> <p>First, we need to tell NDI what probes we have in our experiment. A probe is anything that measures or stimulates; one end of a probe  is connected to a subject, and the other end of a probe is connected to a data acquisition device. We first create an object of class ndi.epoch.epochprobemap. Again, the name of this object tells us that it was created from class epochprobemap, which is a class of the epoch package, which is itself a subpackage of the ndi package. Both classes we have seen are in the epoch package, indicating that they both relate to the function and display of epochs. The organization of packages can help us determine what the packages' contents should generally do; as always, make sure to look at the documentation for more specific information about a particular file.</p> <p>We usually tell NDI how the probe is connected with a little code that instructs NDI how to read this information directly from the laboratory's own file information, but in this example, we will use the generic ndi.epoch.epochprobemap_daqsystem object, which reads in a simple tab-delimited text file. This line introduces the first instance of a class method. Methods are the operations of a class, taking in inputs called parameters and performing an action, often returning an output. This particular method is a constructor, which is a class method that takes in values and instantiates an object of the class with those specific values. </p> <p>If we take a closer look at this class, we see the example constructor MYNDI_EPOCHPROBEMAP_DAQSYSTEM = ndi.epoch.epochprobemap(NAME, REFERENCE, TYPE, DEVICESTRING, SUBJECTSTRING). This is the general form of a constructor in Matlab: first is the name of the object, which is everything on the left side of the equals sign, then the name of the class that the constructor is part of, which is ndi.epoch.epochprobemap in this case, then each parameter, which is the list of words separated by commas. Note that the name of the object is the name used internally by our program, and is not necessarily the same as the NAME argument that we provide when we make the object. </p> <p>We will describe how to use this constructor more thoroughly after we print the <code>probemap.txt</code> file for directory <code>t00001</code>:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3131-taking-a-look-at-the-contents-of-probemaptxt-type-this-in-to-matlab","title":"Code block 3.1.3.1. Taking a look at the contents of probemap.txt. Type this in to Matlab:","text":"<pre><code>type (fullfile(prefix,'ts_exper1','t00001','probemap.txt'))\n</code></pre> <p>The type function prints out the contents of probemap.txt. Again, we identified the path that Matlab must follow to reach this file.</p> <p>You will see a tab-delimited text table that looks like the following. In the Matlab command window, the tabs may not line up, so don't be concerned if it doesn't look like a nice formatted table.</p> name reference type devicestring subjectstring ctx 1 n-trode ced_daqsystem:ai11 treeshrew_12345@mylab.org vis_stim 1 stimulator vis_daqsystem:mk30;text30;md1 treeshrew_12345@mylab.org <p>This text file has all of the information needed to specify the probe and its connections. It has a name for the probe that is meaningful to the user, and the reference specifies an identifier that groups the recordings of the probe. Typically, when the probe is in one physical position, the reference number is kept the same, but when the probe is moved (such as when an electrode is advanced), the reference number is incremented. This tells NDI to try to combine information from recordings that have the same name and reference. type tells NDI what type of probe it is: like the \"name\" from earlier, this is not the same as the Matlab function \"type,\" which displays the contents of a file. There are a variety of pre-determined types, and this type instructs NDI  (via this file) which probe object type to create in software.</p> <p>Now that we have seen each argument in more detail, we can understand how exactly we make an object with this information. If we take the first probe in <code>probemap.txt</code> and substitute in its information, we can make an example object: </p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#example-1-creating-an-object-do-not-type-into-matlab","title":"Example 1: Creating an Object. Do not type into Matlab:","text":"<pre><code>example = ndi.epoch.epochprobemap(ctx, 1, n-trode, ced_daqsystem:ai11, treeshrew_12345@mylab.org)\n</code></pre> <p>As we can see, each piece of information from probemap.txt corresponds with a parameter in our object. The name of our object is entirely separate from the name of our probe, but would normally be something related to the actual name. In general, variables and objects can have any name, but it's often good to make names with actual meanings instead of many placeholder names or single characters.</p> <p>Second, we need to specify the stimulus parameters metadata. Typically, one would create a metadata reader for one's own lab so that the native data can be read directly, but here we have made another tab-delimited text file with the parameters. You can read this for yourself by typing the following:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3132-taking-a-look-at-the-stimulus-parameters-type-this-in-to-matlab","title":"Code block 3.1.3.2. Taking a look at the stimulus parameters. Type this in to Matlab:","text":"<pre><code>type (fullfile(prefix,'ts_exper1','t00001','stims.tsv'))\n</code></pre>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#314-gaining-access-to-the-data-in-ndi-ndisession-and-ndidaqsystem-objects","title":"3.1.4 Gaining access to the data in NDI: ndi.session and ndi.daq.system objects","text":"<p>Now all that remains is to open the data directory (folder) as an ndi.session object, and make ndi.daq.system objects to read your data. We will use an ndi.session.dir object, which allows us to read information from a directory on disk. </p> <p>We will create a new ndi.system object by calling the constructor with the reference name we wish to give to the session and the pathname to our data:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3141-creating-an-ndisession-object-type-this-in-to-matlab","title":"Code block 3.1.4.1. Creating an ndi.session object. Type this in to Matlab:","text":"<pre><code>S = ndi.session.dir('ts_exper1',[prefix filesep 'ts_exper1'])\n</code></pre> <p>Now you have made a new object of ndi.session.dir called S. This constructor takes the form: E = ndi.session.dir(REFERENCE, PATHNAME). REFERENCE must be a unique string that will be used to refer to our object, and PATHNAME must be a path leading to a folder. The session S is brand new and doesn't know about any of the devices we used in our experiment. So, if we try to see if there are any probes, we will see that it doesn't know of any:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3142-checking-for-probes-in-a-session-type-this-in-to-matlab","title":"Code block 3.1.4.2. Checking for probes in a session. Type this in to Matlab:","text":"<pre><code>S.getprobes()\n</code></pre> <p>Unless you ran this demo before, you won't see any probes here (it will return an empty cell array). This is the first method we've seen that is not a constructor. Note that we must call this method along with our session object: this is an example of a non-static method, which belongs to a specific object of the class. Much like calling functions, you use a dot between the name of the object and the name of the method. The parentheses after the method are necessary for every method, even if they have no arguments like in this case.</p> <p>We need to make new ndi.daq.system objects for our data acquisition system and our stimulator. Our devices are multifunction data acquisition systems, so we use the ndi.daq.system.mfdaq subtype.</p> <p>An ndi.daq.system object consists of three components: an ndi.file.navigator object whose job it is to find the files or streams associated with each epoch of data, an ndi.daq.reader object whose job it is to read the raw data from the files, and an ndi.daq.metadatareader (optionally) whose job is to read any metadata associated with the epoch (such as stimulus parameter information). </p> <p>First, we will build an ndi.daq.system.mfdaq object that we will call <code>'ced_daqsystem'</code> to read the electrode data from our CED SMR files.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3143-building-an-ndidaqsystemmfdaq-object-type-this-in-to-matlab","title":"Code block 3.1.4.3. Building an ndi.daq.system.mfdaq object. Type this in to Matlab:","text":"<pre><code>ced_filenav = ndi.file.navigator(S, {'.*\\.smr\\&gt;', 'probemap.txt'}, ...\n    'ndi.epoch.epochprobemap_daqsystem','probemap.txt');\nced_rdr = ndi.daq.reader.mfdaq.cedspike2();\nced_system = ndi.daq.system.mfdaq('ced_daqsystem', ced_filenav, ced_rdr);\n % if you haven't already added the daq system, you can add it here:\nS.daqsystem_add(ced_system);\n</code></pre> <p>Note: If you ran the tutorial before, you may have added <code>ced_system</code> to your session <code>S</code> already. That's fine, you'll get an error if you try to do it again. If you want to remove all your daq systems, you can call <code>ndi.session.daqsystem_clear()</code> by typing <code>S.daqsystem_clear()</code>, and then you can add them again.</p> <p>We first create the file navigator object, ced_filenav, utilizing the ndi.file.navigator constructor. As always, we need to specify the parameters of this navigator object. The properties of this class are listed here, and will also be listed here for convenience.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#properties","title":"Properties","text":"Property Description session The ndi.session to be examined (handle) fileparameters The parameters for finding files epochprobemap_fileparameters The parameters for finding the epochprobemap files identifier epochprobemap_class <p>In this case, the session is our object S. The fileparameters are {'..smr&gt;', 'probemap.txt'}: The asterisk * acts as a wildcard in '..smr&gt;', so our file navigator will access any file with extension .smr. The addition of 'probemap.txt' means that our navigator will also access this file.  epochprobemap_fileparameters specifies the files that make up an epoch, which is just probemap.txt in this case, and the epochprobemap_class indicates which class of epoch record is used: in this case, it uses the default class ndi.epoch.epochprobemap_daqsystem. Note that the identifier is an optional parameter and is not used in this case.</p> <p>After creating the navigator, we create the reader object that can specifically read CED smr files. We do not input any parameters into the ndi.daq.reader.mfdaq.cedspike2() method when creating the object because the only property it has is a unique identifier. NDI uses the default constructor to create an object with no input parameters.</p> <p>We do not need to create a metadatareader object in this case because there is no metadata. Therefore, we can finally create the ndi.daq.system.mfdaq object. </p> <p>Utilizing the ndi.daq.system.mfdaq method, we create the ced_system object. We specify the name as <code>ced_daqsystem</code>, the filenavigator as ced_filenav, the daqreader as ced_rdr, and the epochprobemap_class as <code>ndi.epoch.epochprobemap_daqsystem</code>. We do not specify the daqmetadatareader because we do not need one here, and we do not specify the identifier because we only make a single object; there's no need for a unique identifier.</p> <p>Let's look at the epochs that ced_system can find in order to understand how it searches for epochs:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3144-taking-a-look-at-the-epochtable-and-epochfiles-type-this-into-matlab","title":"Code block 3.1.4.4. Taking a look at the epochtable and epochfiles. Type this into Matlab","text":"<pre><code> % let's look at the epochs the daq.system can find\net = ced_system.epochtable() % should see a 4 element answer\nf = ced_system.filenavigator.getepochfiles(1) % you should see the files from epoch 1, t00001\n</code></pre> <p>The first line uses the method epochtable() to return a structure array and assigns it to the variable \"et\". Structure arrays store data in containers called fields, each field containing data of its own. The Mathworks website has a helpful visual of structure arrays, located here. et has a 1x4 struct array with the fields epoch_id, epoch_session_id, epochprobemap, epoch_clock, t0_t1, and underlying_epochs. In other words, the struct array contains four different epochs, each with seven different fields. We recommend opening the et variable in the Workspace to take a direct look. </p> <p>The method ced_system.filenavigator.getepochfiles(1) assigns all the files in epoch 1 (t00001) to the variable f. When we open f in the Workspace, we can see that there are two file paths. One is to spike2data.smr, while another is to probemap.txt. </p> <p>The two lines of code described above are used to take a look at what epochs and epoch files exist in our session. </p> <p>Second, we will build an ndi.daq.system.mfdaq object for our visual stimulus system. The setup for this DAQ system will be very similar to the prior example. </p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3145-building-another-ndidaqsystemmfdaq-object-type-this-in-to-matlab","title":"Code block 3.1.4.5. Building another ndi.daq.system.mfdaq object. Type this in to Matlab:","text":"<pre><code>vis_filenav = ndi.file.navigator(S, {'.*\\.smr\\&gt;', 'probemap.txt', 'stims.tsv'},...\n     'ndi.epoch.epochprobemap_daqsystem','probemap.txt');\nvis_rdr = ndi.daq.reader.mfdaq.cedspike2();\nvis_mdrdr = ndi.daq.metadatareader('stims.tsv');\nvis_system = ndi.daq.system.mfdaq('vis_daqsystem', vis_filenav, vis_rdr, {vis_mdrdr});\n % if you haven't already added the daq system, you can add it here:\nS.daqsystem_add(vis_system);\n</code></pre> <p>The ced_system and the vis_system both have very similar readers ndi.daq.reader.mfdaq.cedspike2() under different object names. The only difference between the two is that the file parameters for the vis_system reader include the <code>stims.tsv</code> file. This means that the vis_rdr will be able to access the <code>stims.tsv</code> file as well. Again, we don't use identifiers when creating our ndi.daq.system.mfdaq object. It might be useful to assign identifiers to each object now that we have more than one, but we won't be doing too much with these particular objects other than making our DAQ system.</p> <p>Aside from differences in file parameters, the key difference between the ced_system and the vis_system is that the vis_system requires a ndi.daq.metadatareader object. Unlike the reader object which only requires an identifier that is assigned by NDI, the metadatareader object requires for us to manually identify the tab_separated_file_parameter property. In this case, we identify the tab_separated_file_parameter as the <code>stims.tsv</code> file. </p> <p>Last, we will tell NDI how these devices are synchronized with each other. These two daq systems have a file in common (<code>spike2data.smr</code>), which means that they have a common time base, but NDI doesn't know that the two daq systems can be synchronized yet. Here we add a \"syncrule\" that tells NDI that any daq systems that share at least 2 files per epoch also share a common time clock for that epoch. Our two DAQ systems share the same session and files, meaning that our syncrule will sync their time clocks.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3146-synching-the-devices-type-this-in-to-matlab","title":"Code block 3.1.4.6. Synching the devices. Type this in to Matlab:","text":"<pre><code>nsf = ndi.time.syncrule.filematch(struct('number_fullpath_matches',2));\nS.syncgraph_addrule(nsf);\n</code></pre> <p>We create an object nsf of class ndi.time.synchrule.filematch, which dictates the number of files that must match in order for the syncrule to apply. The function \"struct\" creates a structural array with the syntax struct(field, value). In this case, the constructor takes an input of a structural array with field 'number_fullpath_matches.' whose value is 2.</p> <p>This object is added to the session through the syncgraph_addrule() method so that NDI knows which DAQ systems to synchronize in our experiment. We know that the stimulator (vis_system) and the data acquisition system (ced_system) are in sync because they both share spike2data.smr and probemap.txt. </p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#315-opening-the-data-in-ndi-accessing-probes-via-from-ndidaqsystemmfdaq","title":"3.1.5 Opening the data in NDI: accessing probes via from ndi.daq.system.mfdaq","text":"<p>Now we can use NDI to see the probes that these daq systems can find and to access the data from those probes. Let's look at the electrode probe data first.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3151-examining-and-accessing-the-electrode-probe-data-type-this-in-to-matlab","title":"Code block 3.1.5.1. Examining and accessing the electrode probe data. Type this in to Matlab:","text":"<pre><code>p = S.getprobes() % get all of the probes that are in the ndi.session S\nfor i=1:numel(p), p{i}, end; % display the probe information for each probe\n\n% look at the number of epochs recorded for probe 1\np_ctx1_list = S.getprobes('name','ctx','reference',1) % returns a cell array of matches\np_ctx1 = p_ctx1_list{1}; % take the first one, should be the only one\net = p_ctx1.epochtable()\nfor i=1:numel(et), et(i), end; % display the epoch table entries\nepoch_to_read = 1;\n</code></pre> <p>Here we first assign all the probes in session S to array p through the getprobes() method. Arrays are data types that contain several elements, each of which has the same data type. The position of each element is a number called the index. Unlike many other programming languages, Matlab's arrays start at 1 instead of 0, so the first element in an array has an index  of 1, the second has an index of 2, and so on.</p> <p>When you open p in the workspace, you see that there are 3 probes with unique properties. Each has a session, name, type, reference, underlying_element, direct, subject_id, dependencies, and identifier property assigned to them. To take a look at the properties of each probe in the command window, we utilize this for loop: <code>for i=1:numel(p), p{i}, end;</code></p> <p>For loops are useful when we need to run a segment of code a specified number of times, such as iterating through each entry of an array. For loops work by creating a variable of a specified value, defining an end point with another value, then incrementing the variable until it equals the end point. Let's break down the for loop above. </p> <p>We first define a variable i that begins at 1 and ends at numel(p). The colon is used to create a range of values that our loop will iterate through, increasing from the first value until it reaches the second value. The range is inclusive in Matlab, so the loop runs once more once it reaches the final value. For loops increment the variable by 1 by default, but a middle argument can be included to increment by a different amount instead. </p> <p>numel() is a function used to return the number of elements inside an array. In our case we use numel(p), which gives a value of 3 for the 3 probes in the array p. Our loop will run 3 times: once initially when i = 1, a second time when i = 2, then a third time when i = 3. Once the variable increments past numel(p), the loop terminates. Finally, the p{i} shows the contents of element i of array p. Since i is our loop variable, the loop will display the 1st, 2nd, and 3rd elements of the array, in this case the information about each probe. </p> <p>Before we take a look at the epoch data for each probe, we need to specify the probe in question. To get access to the probe that we want, we create an array p_ctx1_list utilizing the getprobes method while specifying the name and reference number. In the parenthesis of the method we write the name of the field followed by its value, so the method returns all probes with name 'ctx' and reference number 1. When we run this line of code we see that p_ctx1_list is a 1x1 cell array, so only one probe matches these criteria.</p> <p>You can see that probe 1 has a name of <code>ctx</code>, a reference of <code>1</code>, and it is of type <code>n-trode</code>, or an n-channel electrode. It has a software object type of ndi.probe.timeseries.mfdaq, which simply means it is associated with multifunction DAQ systems and returns timeseries observations.</p> <p>We then assign the first element(probe 1) in array p to the variable p_ctx1. <code>p_ctx1 = p_ctx1_list{1}.</code> The line of code above tells Matlab to assign the element with index 1 in the array of p_ctx1_list to the variable p_ctx1. </p> <p>After creating p_ctx1, we create the epochtable for p_ctxt using the epochtable method. Like before, we assign the information to the array et, then use a for loop to display each entry in the epoch table. Inside of et are 2 epochs with a unique epoch_number, epoch_id, epoch_session_id, epochprobemap, epoch_clock, t0_t1, and underlying_epochs. At this point, however, there is no epochprobemap assigned to these epochs.  Finally, we create the variable epoch_to_read, which specifies which epoch will be plotted later. We set it equal to the reference number of our epoch, which is 1 in this case. <p>Now let's read data from our probe <code>p_ctx1</code> and plot the data:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3152-plotting-the-electrode-probe-data-type-this-into-matlab","title":"Code block 3.1.5.2. Plotting the electrode probe data. Type this into Matlab","text":"<pre><code>[data,t,timeref_p_ctx1]=p_ctx1.readtimeseries(epoch_to_read,-Inf,Inf); % read all data from epoch 1\nfigure(100);\nplot(t,data);\nxlabel('Time(s)');\nylabel('Voltage (V)');\nset(gca,'xlim',[t(1) t(end)]);\nbox off;\n</code></pre> <p>This code calls an important function for reading data from probes: <code>ndi.timeseries.readtimeseries</code>:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#this-code-is-documentation-do-not-type-into-matlab","title":"This code is documentation; do not type into Matlab","text":"<pre><code>[D, T, TIMEREF] = ndi.timeseries.readtimeseries(EPOCH_OR_TIMEREF, T0, T1)\n% Reads data and timestamps from an ndi.timeseries.readtimeseries object with respect\n% to a specific epoch or an ndi.time.timereference object, from time T0 to T1.\n</code></pre> <p>We identified the epoch_to_read as 1 prior, and we tell the NDI to read the timestamps and data starting from time equals negative infinity to time equals positive infinity. We essentially tell the NDI to read all of the data in epoch 1 and assign them to the arrays data and t, with TIMEREF referring to the units of time of t.</p> <p>Then we create a figure labeled 100 using the figure(100) line of code. This opens up a figure where we can plot data. The number acts as an identifier, not as any property of the graph itself.</p> <p>The plot function is used to plot the variable t with data obtained prior. This will show us the electrode probe data in voltage vs. time. </p> <p>Finally we will use the xlabel and ylabel function to label the axis of our figure. The last 2 lines of code are used to adjust the appearance of the plot. 'set(gca, 'xlim', [t(1) t(end)]' edits the x-values of the current axes to go from the initial time to the final time, and 'box off' simply removes the box around the graph.</p> <p>When analyzing data or writing apps to analyze data, <code>ndi.timeseries.readtimeseries</code> is one of the most commonly called functions.</p> <p>Now let's also look at our stimulator probe <code>vis_stim</code>. First, let's examine the epochs that are known to <code>vis_stim</code>:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3153-examining-and-accessing-the-stimulator-data-type-this-in-to-matlab","title":"Code block 3.1.5.3. Examining and accessing the stimulator data. Type this in to Matlab:","text":"<pre><code>p_visstim_list = S.getprobes('name','vis_stim','reference',1) % returns a cell array of matches\np_visstim = p_visstim_list{1}; % take the first one, should be the only one\net = p_visstim.epochtable()\nfor i=1:numel(et), et(i), end; % display the epoch table entries\n</code></pre> <p>This code is nearly identical to what we used in code block 3.1.5.1.</p> <p>Now let's read the data from our stimulator. To do this, we are going to ask NDI to read the stimulus timing information in the time units of our electrode probe <code>p_ctx</code>. You'll notice that when we read data from <code>p_ctx1</code>, <code>readtimeseries</code> returned an ndi.time.timereference object <code>timeref_p_ctx1</code>. Let's examine this quickly:</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3154-taking-a-look-at-the-nditimetimereference-object-type-this-in-to-matlab","title":"Code block 3.1.5.4. Taking a look at the ndi.time.timereference object. Type this in to Matlab:","text":"<pre><code>timeref_p_ctx1\n</code></pre> <p>You'll see a structure with the following fields:</p> <code>timeref_p_ctx1</code> timereference with properties referent <code>[1x1 ndi.probe.timeseries.mfdaq]</code> clocktype <code>[1x1 ndi.time.clocktype]</code> epoch 1 time 0 session_ID <code>'412687ba08e28694_c0d9c07d0b8726cf'</code> <p>In NDI, one can refer to time with respect to a variety of different clocks, which is helpful because daq systems typically do not have access to a global clock. We can now ask for the time of the stimulus presentations with respect to our electrode's clock, and add the onset times to the graph.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3155-plotting-the-stimulator-and-electrode-probe-data-type-this-in-to-matlab","title":"Code block 3.1.5.5. Plotting the stimulator and electrode probe data. Type this in to Matlab:","text":"<pre><code>[data,t,timeref_stim]=p_visstim.readtimeseries(timeref_p_ctx1,-Inf,Inf); % read all data from epoch 1 of p_ctx1 !\nfigure(100);\nhold on;\nvlt.neuro.stimulus.plot_stimulus_timeseries(7,t.stimon,t.stimon+2,'stimid',data.stimid);\n</code></pre> <p>We use the readtimeseries method to read the p_visstim data. Note that we specify to the function that we are using the timeref_p_ctx1 from the electrode probe data to ask for the time of the stimulus presentations with respect to our electrode's clock.</p> <p>By calling figure(100) once more, we specify to Matlab that we want to use figure 100 to plot our stimulus data. However, the problem that arises is that the electrode probe data is already plotted on figure 100. To solve this problem, we utilize the <code>hold on</code> command. </p> <p><code>hold on</code> is used to save the plots on the current figure so that new plots added on the figure do not delete the existing plots. This is important for us because we want to see the simulus data in relation to the electrode probe data on the same graph. </p> <p>The function vlt.neuro.stimulus.plot_stimulus_timeseries is then used to represent the stimulus data as black bars on the plot.</p> <p>Let's look at what <code>readtimeseries</code> returned in the case of a stimulator. It is a little different than when being used with regularly-sampled data.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#code-block-3156-the-output-of-the-readtimeseries-method-for-the-stimulator-type-this-in-to-matlab","title":"Code block 3.1.5.6. The output of the <code>readtimeseries</code> method for the stimulator. Type this in to Matlab:","text":"<pre><code>t, % show timestamps\nt.stimon,\ndata, % show data\ndata.stimid,\ndata.parameters{1}\n</code></pre> <p>Here we examined several fields of the variables <code>data</code> and <code>t</code> returned from <code>readtimeseries</code> from our ndi.probe.timeseries.stimulator.</p> <p>You can see that <code>t</code> is a structure with 2 fields, <code>stimon</code> and <code>stimoff</code>. Our system kept track of when each stimulus began, but in these recordings, we did not have our data acquisition system keep track of when our stimulus turned off. (For later analysis, we will need to read this from the stimulus parameters.)</p> <p>You can also see that <code>data</code> has some metadata about the stimuli. It has the ID number of each stimulus that was shown (<code>data.stimid(1)</code> is the stimulus that turned on at <code>t.stimon(1)</code>), and it has the parameters of each stimulus. <code>data.parameters{1}</code> is the parameters of the stimulus with ID number 1.</p>"},{"location":"NDI-matlab/tutorials/analyzing_first_physiology_experiment_detailed/1_example_dataset/#316-discussionfeedback","title":"3.1.6 Discussion/Feedback","text":"<p>This concludes our tutorial on the fully manual way of reading data through NDI. This detailed tutorial is a work in progress, so please provide feedback in the comments.</p> <p>In the next tutorial, we'll explore how to create a couple of code objects that read our data directly from a lab's internal structure.</p> <p>Post comments, bugs, questions, or discuss.</p>"},{"location":"NDI-matlab/tutorials/datasets/Francesconi_et_al_2025/1_getting_started/","title":"Francesconi et al (2025) Tutorial: Getting Started","text":"<p>This is a tutorial to view the electrophysiology and behavioral data which relates to:</p> <p>Francesconi W, Olivera-Pasilio V, Berton F, Olson SL, Chudoba R, Monroy LM, Krabichler Q, Grinvech V, Dabrowska J (2025). Vasopressin and oxytocin excite BNST neurons via oxytocin receptors, which reduce anxious arousal. Cell Reports 44(6): 115768. DOI: 10.1016/j.celrep.2025.115768.</p> <p>Francesconi W, Olivera-Pasilio V, Berton F, Olson SL, Chudoba R, Monroy LM, Krabichler Q, Grinvech V, Dabrowska J (2025). Dataset: vasopressin and oxytocin excite BNST neurons via oxytocin receptors, which reduce anxious arousal. NDI Cloud. DOI: 10.63884/ndic.2025.jyxfer8m.</p>"},{"location":"NDI-matlab/tutorials/datasets/Francesconi_et_al_2025/1_getting_started/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Download NDI</li> <li>Import the NDI dataset<ul> <li>Download or load the NDI dataset</li> <li>Retrieve the NDI session</li> </ul> </li> <li>View subjects, probes and epochs<ul> <li>View subject summary table<ul> <li>Filter subjects</li> </ul> </li> <li>View probe and epoch summary tables</li> <li>Combine metadata tables<ul> <li>Filter epochs</li> </ul> </li> </ul> </li> <li>Plot electrophysiology data</li> <li>Plot Elevated Plus Maze data</li> <li>Plot Fear-Potentiated Startle data</li> </ol>"},{"location":"NDI-matlab/tutorials/datasets/Francesconi_et_al_2025/1_getting_started/#download-ndi","title":"Download NDI","text":"<p>In order to view the dataset, you will need access to the NDI platform. If you haven't already downloaded NDI, follow the installation instructions to download NDI and gain access to the suite of tools we have created! You can find more information and tutorials on the NDI website.</p>"},{"location":"NDI-matlab/tutorials/datasets/Francesconi_et_al_2025/1_getting_started/#import-the-ndi-dataset","title":"Import the NDI dataset","text":"<p>Define the dataset path and id.</p> <p>Type this into MATLAB:</p> <pre><code>% Choose the folder where the dataset is (or will be) stored\n% (e.g. /Users/myusername/Documents/MATLAB/Datasets)\ndataPath = [userpath filesep 'Datasets'];\ncloudDatasetId = '67f723d574f5f79c6062389d';\ndatasetPath = fullfile(dataPath,cloudDatasetId);\n</code></pre>"},{"location":"NDI-matlab/tutorials/datasets/Francesconi_et_al_2025/1_getting_started/#download-or-load-the-ndi-dataset","title":"Download or load the NDI dataset","text":"<p>The first time you try to access the data, it needs to be downloaded from NDI-cloud. This may take a few minutes. Once you have the dataset downloaded, every other time you examine the data you can just load it.</p> <p>Type this into MATLAB:</p> <pre><code>if isfolder(datasetPath)\n    % Load if already downloaded\n    dataset = ndi.dataset.dir(datasetPath);\nelse\n    % Download\n    if ~isfolder(dataPath), mkdir(dataPath); end\n    dataset = ndi.cloud.downloadDataset(cloudDatasetId,dataPath);\nend\n</code></pre>"},{"location":"NDI-matlab/tutorials/datasets/Francesconi_et_al_2025/1_getting_started/#retrieve-the-ndi-session","title":"Retrieve the NDI session","text":"<p>A dataset can have multiple sessions, but this dataset has only one. We must retrieve it in order to access the accompanying experimental probes (i.e. a virtual or physical instrument that makes a measurement of or produces a stimulus for a subject).</p> <p>Type this into MATLAB:</p> <pre><code>% Retrieve the session from this dataset\n[session_ref_list,session_list] = dataset.session_list();\nsession = dataset.open_session(session_list{1});\n</code></pre>"},{"location":"NDI-matlab/tutorials/datasets/Francesconi_et_al_2025/1_getting_started/#view-subjects-probes-and-epochs","title":"View subjects, probes and epochs","text":""},{"location":"NDI-matlab/tutorials/datasets/Francesconi_et_al_2025/1_getting_started/#view-subject-summary-table","title":"View subject summary table","text":"<p>Each individual animal is referred to as a subject and has a unique alphanumeric <code>SubjectDocumentIdentifier</code> along with a <code>SubjectLocalIdentifier</code> which contains references to the animal's strain, species, genotype, experiment date, and cell type. Our database contains documents which store metadata about each subject including their species, strain, genetic strain type, and biological sex which are linked to well-defined ontologies such as NCBI, RRID, PATO, and UBERON. Additionally, metadata about any treatments that a subject received such as the location of optogenetic stimulation are stored. A summary table showing the metadata for each subject) can be viewed below.</p> <p>Type this into MATLAB:</p> <pre><code>% View summary table of all subject metadata\nsubjectSummary = ndi.fun.docTable.subject(dataset)\n</code></pre> <p>You will see a table that looks like:</p> SubjectDocumentIdentifier SubjectLocalIdentifier StrainName StrainOntology BackgroundStrainName BackgroundStrainOntology GeneticStrainTypeName SpeciesName SpeciesOntology BiologicalSexName BiologicalSexOntology OptogeneticTetanusStimulationTargetLocationName OptogeneticTetanusStimulationTargetLocationOntology 412693bb0b2a75c8_c0dc4139300a673e <code>wi_rat_CRFCre_210818_BNST@dabrowska-lab.rosalindfranklin.edu</code> CRF-Cre WI RRID:RGD_13508588 knockin Rattus norvegicus NCBITaxon:10116 male PATO:0000384 412693bb0b2b7e0f_40d1f45f9e51dc8b <code>sd_rat_OTRCre_220214_BNST@dabrowska-lab.rosalindfranklin.edu</code> OTR-IRES-Cre SD RRID:RGD_70508 knockin Rattus norvegicus NCBITaxon:10116 male PATO:0000384 412693bb0b2cf772_c0d06cadbb168eb5 <code>sd_rat_WT_210401_BNSTIII@dabrowska-lab.rosalindfranklin.edu</code> SD RRID:RGD_70508 wildtype Rattus norvegicus NCBITaxon:10116 male PATO:0000384 412693bb0b344f5e_c0d0f30bef37dab8 <code>sd_rat_AVPCre_240425_BNSTI_PVN@dabrowska-lab.rosalindfranklin.edu</code> AVP-Cre SD RRID:RGD_70508 knockin Rattus norvegicus NCBITaxon:10116 male PATO:0000384 paraventricular nucleus of hypothalamus UBERON:0001930 412693bb0b359d16_40d3e5ebc2d9a521 <code>sd_rat_AVPCre_221202_BNSTIII_SCN@dabrowska-lab.rosalindfranklin.edu</code> AVP-Cre SD RRID:RGD_70508 knockin Rattus norvegicus NCBITaxon:10116 male PATO:0000384 suprachiasmatic nucleus UBERON:0002034 412693bb0b367f65_c0c1ae36954547f5 <code>sd_rat_AVPCre_221205_BNSTI_SON@dabrowska-lab.rosalindfranklin.edu</code> AVP-Cre SD RRID:RGD_70508 knockin Rattus norvegicus NCBITaxon:10116 male PATO:0000384 supraoptic nucleus UBERON:0001929 412693bb0ebeaa0d_c09caf14c3d790a7 <code>sd_rat_OTRCre_220819_175@dabrowska-lab.rosalindfranklin.edu</code> OTR-IRES-Cre SD RRID:RGD_70508 knockin Rattus norvegicus NCBITaxon:10116 male PATO:0000384"},{"location":"NDI-matlab/tutorials/datasets/Francesconi_et_al_2025/1_getting_started/#filter-subjects","title":"Filter subjects","text":"<p>We have created tools to filter a table by its values. Try finding subjects matching a given criterion.</p> <p>Examples:</p> columnName dataValue StrainName AVP-Cre StrainName SD <p>Type this into MATLAB:</p> <pre><code>% Search for subjects\ncolumnName = 'StrainName'; % select a column name from the subjectSummary table\ndataValue = 'AVP-Cre'; % select a value to search for\nrowInd = ndi.fun.table.identifyMatchingRows(subjectSummary,...\n    columnName,dataValue,'stringMatch','contains');\nfilteredSubjects = subjectSummary(rowInd,:)\n</code></pre>"},{"location":"NDI-matlab/tutorials/datasets/Francesconi_et_al_2025/1_getting_started/#view-probe-and-epoch-summary-tables","title":"View probe and epoch summary tables","text":"<p>In the NDI framework, a probe is an instrument that makes a measurement of or produces a stimulus for a subject. Probes are part of a broader class of experiment items that we term elements. In these experiments, there are 3 probe types: 1. stimulator 2. patch-Vm 3. patch-I Each subject is linked to a unique set of probes. The stimulator probe is connected to any information about stimuli that the subject received such as electrophysiological bath conditions or experimental approaches (e.g. optogenetic tetanus). The patch-Vm and patch-I are probes of type mfdaq (multifunction data acquisition system) which means that they contain data linked to an acquisition system that stored measurements (i.e. voltage and current) for a set of experimental epochs. Each epoch corresponds to one of the original <code>.mat</code> files.</p> <p>Type this into MATLAB:</p> <pre><code>% View summary table of all probe metadata\nprobeSummary = ndi.fun.docTable.probe(dataset)\n</code></pre> <p>You will see a table that looks like:</p> SubjectDocumentIdentifier ProbeDocumentIdentifier ProbeName ProbeType ProbeReference ProbeLocationName ProbeLocationOntology CellTypeName CellTypeOntology 412693bb0b2cf772_c0d06cadbb168eb5 412693bb0bf98cde_40ce5a2a60a82dd2 bath_210401_BNSTIII_a stimulator [1] 412693bb0b2cf772_c0d06cadbb168eb5 412693bb0bf99bbe_c0cb88b37570afba Vm_210401_BNSTIII_a patch-Vm [1] bed nucleus of stria terminalis (BNST) UBERON:0001880 Type III BNST neuron EMPTY:00000170 412693bb0b2cf772_c0d06cadbb168eb5 412693bb0bf9aa56_40ca24db9ac1470d I_210401_BNSTIII_a patch-I [1] bed nucleus of stria terminalis (BNST) UBERON:0001880 Type III BNST neuron EMPTY:00000170 <p>Type this into MATLAB:</p> <pre><code>% View summary table of all epoch metadata for each probe\nepochSummary = ndi.fun.docTable.epoch(session) % this will take several minutes\n</code></pre> <p>You will see a table that looks like:</p> EpochNumber EpochDocumentIdentifier ProbeDocumentIdentifier SubjectDocumentIdentifier local_t0 local_t1 global_t0 global_t1 MixtureName MixtureOntology ApproachName ApproachOntology 1 epoch_412693bb00b3b7b2_4087375d5b7ef613 412693bb0bf4b173_40d91734313482e2 412693bb0b2a75c8_c0dc4139300a673e 0 76.9805 18-Aug-2021 15:29:59 18-Aug-2021 15:31:16 arginine-vasopressin NCIm:C1098706 2 epoch_412693bb00b3b844_c0da15457eb12ac4 412693bb0bf4b173_40d91734313482e2 412693bb0b2a75c8_c0dc4139300a673e 0 76.9388 18-Aug-2021 15:31:25 18-Aug-2021 15:32:42 arginine-vasopressin NCIm:C1098706 3 epoch_412693bb00b3b88e_c0d9cb8072143524 412693bb0bf4b173_40d91734313482e2 412693bb0b2a75c8_c0dc4139300a673e 0 76.9419 18-Aug-2021 15:32:50 18-Aug-2021 15:34:07 arginine-vasopressin NCIm:C1098706 4 epoch_412693bb00b3b8cb_40d23dd40a9bc8c5 412693bb0bf4b173_40d91734313482e2 412693bb0b2a75c8_c0dc4139300a673e 0 76.9453 18-Aug-2021 15:43:48 18-Aug-2021 15:45:05 sodium chloride,potassium chloride,sodium bicarbonate,sodium phosphate, monobasic, anhydrous,calcium chloride dihydrate,D-glucose,magnesium chloride hexahydrate,pH,carbogen,osm NCIm:C0037494,NCIm:C0032825,NCIm:C0074722,NCIm:C1165377,CHEBI:86158,NCIm:C0017725,NCIm:C0724622,NCIm:C4048290,NCIm:CL1445492,NCIm:C0439186 5 epoch_412693bb00b3b902_c0a16ccb923181df 412693bb0bf4b173_40d91734313482e2 412693bb0b2a75c8_c0dc4139300a673e 0 76.9333 18-Aug-2021 15:22:55 18-Aug-2021 15:24:12 sodium chloride,potassium chloride,sodium bicarbonate,sodium phosphate, monobasic, anhydrous,calcium chloride dihydrate,D-glucose,magnesium chloride hexahydrate,pH,carbogen,osm NCIm:C0037494,NCIm:C0032825,NCIm:C0074722,NCIm:C1165377,CHEBI:86158,NCIm:C0017725,NCIm:C0724622,NCIm:C4048290,NCIm:CL1445492,NCIm:C0439186 6 epoch_412693bb00b3b93f_c0d772aceb6a808d 412693bb0bf4b173_40d91734313482e2 412693bb0b2a75c8_c0dc4139300a673e 0 76.9298 18-Aug-2021 15:24:17 18-Aug-2021 15:25:34 sodium chloride,potassium chloride,sodium bicarbonate,sodium phosphate, monobasic, anhydrous,calcium chloride dihydrate,D-glucose,magnesium chloride hexahydrate,pH,carbogen,osm NCIm:C0037494,NCIm:C0032825,NCIm:C0074722,NCIm:C1165377,CHEBI:86158,NCIm:C0017725,NCIm:C0724622,NCIm:C4048290,NCIm:CL1445492,NCIm:C0439186 7 epoch_412693bb00b3b974_c0d54f2d1e92c305 412693bb0bf4b173_40d91734313482e2 412693bb0b2a75c8_c0dc4139300a673e 0 76.9375 18-Aug-2021 15:25:43 18-Aug-2021 15:27:00 sodium chloride,potassium chloride,sodium bicarbonate,sodium phosphate, monobasic, anhydrous,calcium chloride dihydrate,D-glucose,magnesium chloride hexahydrate,pH,carbogen,osm NCIm:C0037494,NCIm:C0032825,NCIm:C0074722,NCIm:C1165377,CHEBI:86158,NCIm:C0017725,NCIm:C0724622,NCIm:C4048290,NCIm:CL1445492,NCIm:C0439186"},{"location":"NDI-matlab/tutorials/datasets/Francesconi_et_al_2025/1_getting_started/#combine-metadata-tables","title":"Combine metadata tables","text":"<p>Let's combine all metadata so that there is one row per epoch.</p> <p>Type this into MATLAB:</p> <pre><code>% Combine all metadata into one table\ncombinedSummary = ndi.fun.table.join({subjectSummary,probeSummary,epochSummary},...\n    'uniqueVariables','EpochDocumentIdentifier');\ncombinedSummary = ndi.fun.table.moveColumnsLeft(combinedSummary,...\n    {'SubjectLocalIdentifier','EpochNumber'})\n</code></pre> <p>You will see a table that looks like:</p> SubjectLocalIdentifier EpochNumber EpochDocumentIdentifier SubjectDocumentIdentifier SpeciesName SpeciesOntology StrainName StrainOntology GeneticStrainTypeName BiologicalSexName BiologicalSexOntology OptogeneticTetanusStimulationTargetLocationName OptogeneticTetanusStimulationTargetLocationOntology ProbeDocumentIdentifier ProbeName ProbeType ProbeReference ProbeLocationName ProbeLocationOntology cellTypeName cellTypeOntology local_t0 local_t1 global_t0 global_t1 MixtureName MixtureOntology ApproachName ApproachOntology <code>wi_rat_CRFCre_210818_BNST@dabrowska-lab.rosalindfranklin.edu</code> 1 epoch_412693bb00b3b7b2_4087375d5b7ef613 412693bb0b2a75c8_c0dc4139300a673e Rattus norvegicus NCBITaxon:10116 CRF-Cre, WI RRID:RGD_13508588 wildtype, knockin male PATO:0000384 412693bb0bf4b173_40d91734313482e2,412693bb0bf4df3a_c0d30c9167e204ef,412693bb0bf4f693_40c45799b1c5e963 bath_210818_BNST_a,Vm_210818_BNST_a,I_210818_BNST_a stimulator,patch-Vm,patch-I [1] bed nucleus of stria terminalis (BNST) UBERON:0001880 0 76.9805 18-Aug-2021 15:29:59 18-Aug-2021 15:31:16 arginine-vasopressin NCIm:C1098706 <code>wi_rat_CRFCre_210818_BNST@dabrowska-lab.rosalindfranklin.edu</code> 2 epoch_412693bb00b3b844_c0da15457eb12ac4 412693bb0b2a75c8_c0dc4139300a673e Rattus norvegicus NCBITaxon:10116 CRF-Cre, WI RRID:RGD_13508588 wildtype, knockin male PATO:0000384 412693bb0bf4b173_40d91734313482e2,412693bb0bf4df3a_c0d30c9167e204ef,412693bb0bf4f693_40c45799b1c5e963 bath_210818_BNST_a,Vm_210818_BNST_a,I_210818_BNST_a stimulator,patch-Vm,patch-I [1] bed nucleus of stria terminalis (BNST) UBERON:0001880 0 76.9388 18-Aug-2021 15:31:25 18-Aug-2021 15:32:42 arginine-vasopressin NCIm:C1098706 <code>wi_rat_CRFCre_210818_BNST@dabrowska-lab.rosalindfranklin.edu</code> 3 epoch_412693bb00b3b88e_c0d9cb8072143524 412693bb0b2a75c8_c0dc4139300a673e Rattus norvegicus NCBITaxon:10116 CRF-Cre, WI RRID:RGD_13508588 wildtype, knockin male PATO:0000384 412693bb0bf4b173_40d91734313482e2,412693bb0bf4df3a_c0d30c9167e204ef,412693bb0bf4f693_40c45799b1c5e963 bath_210818_BNST_a,Vm_210818_BNST_a,I_210818_BNST_a stimulator,patch-Vm,patch-I [1] bed nucleus of stria terminalis (BNST) UBERON:0001880 0 76.9419 18-Aug-2021 15:32:50 18-Aug-2021 15:34:07 arginine-vasopressin NCIm:C1098706 <code>wi_rat_CRFCre_210818_BNST@dabrowska-lab.rosalindfranklin.edu</code> 4 epoch_412693bb00b3b8cb_40d23dd40a9bc8c5 412693bb0b2a75c8_c0dc4139300a673e Rattus norvegicus NCBITaxon:10116 CRF-Cre, WI RRID:RGD_13508588 wildtype, knockin male PATO:0000384 412693bb0bf4b173_40d91734313482e2,412693bb0bf4df3a_c0d30c9167e204ef,412693bb0bf4f693_40c45799b1c5e963 bath_210818_BNST_a,Vm_210818_BNST_a,I_210818_BNST_a stimulator,patch-Vm,patch-I [1] bed nucleus of stria terminalis (BNST) UBERON:0001880 0 76.9453 18-Aug-2021 15:43:48 18-Aug-2021 15:45:05 sodium chloride,potassium chloride,sodium bicarbonate,sodium phosphate, monobasic, anhydrous,calcium chloride dihydrate,D-glucose,magnesium chloride hexahydrate,pH,carbogen,osm NCIm:C0037494,NCIm:C0032825,NCIm:C0074722,NCIm:C1165377,CHEBI:86158,NCIm:C0017725,NCIm:C0724622,NCIm:C4048290,NCIm:CL1445492,NCIm:C0439186 <code>wi_rat_CRFCre_210818_BNST@dabrowska-lab.rosalindfranklin.edu</code> 5 epoch_412693bb00b3b902_c0a16ccb923181df 412693bb0b2a75c8_c0dc4139300a673e Rattus norvegicus NCBITaxon:10116 CRF-Cre, WI RRID:RGD_13508588 wildtype, knockin male PATO:0000384 412693bb0bf4b173_40d91734313482e2,412693bb0bf4df3a_c0d30c9167e204ef,412693bb0bf4f693_40c45799b1c5e963 bath_210818_BNST_a,Vm_210818_BNST_a,I_210818_BNST_a stimulator,patch-Vm,patch-I [1] bed nucleus of stria terminalis (BNST) UBERON:0001880 0 76.9333 18-Aug-2021 15:22:55 18-Aug-2021 15:24:12 sodium chloride,potassium chloride,sodium bicarbonate,sodium phosphate, monobasic, anhydrous,calcium chloride dihydrate,D-glucose,magnesium chloride hexahydrate,pH,carbogen,osm NCIm:C0037494,NCIm:C0032825,NCIm:C0074722,NCIm:C1165377,CHEBI:86158,NCIm:C0017725,NCIm:C0724622,NCIm:C4048290,NCIm:CL1445492,NCIm:C0439186 <code>wi_rat_CRFCre_210818_BNST@dabrowska-lab.rosalindfranklin.edu</code> 6 epoch_412693bb00b3b93f_c0d772aceb6a808d 412693bb0b2a75c8_c0dc4139300a673e Rattus norvegicus NCBITaxon:10116 CRF-Cre, WI RRID:RGD_13508588 wildtype, knockin male PATO:0000384 412693bb0bf4b173_40d91734313482e2,412693bb0bf4df3a_c0d30c9167e204ef,412693bb0bf4f693_40c45799b1c5e963 bath_210818_BNST_a,Vm_210818_BNST_a,I_210818_BNST_a stimulator,patch-Vm,patch-I [1] bed nucleus of stria terminalis (BNST) UBERON:0001880 0 76.9298 18-Aug-2021 15:24:17 18-Aug-2021 15:25:34 sodium chloride,potassium chloride,sodium bicarbonate,sodium phosphate, monobasic, anhydrous,calcium chloride dihydrate,D-glucose,magnesium chloride hexahydrate,pH,carbogen,osm NCIm:C0037494,NCIm:C0032825,NCIm:C0074722,NCIm:C1165377,CHEBI:86158,NCIm:C0017725,NCIm:C0724622,NCIm:C4048290,NCIm:CL1445492,NCIm:C0439186 <code>wi_rat_CRFCre_210818_BNST@dabrowska-lab.rosalindfranklin.edu</code> 7 epoch_412693bb00b3b974_c0d54f2d1e92c305 412693bb0b2a75c8_c0dc4139300a673e Rattus norvegicus NCBITaxon:10116 CRF-Cre, WI RRID:RGD_13508588 wildtype, knockin male PATO:0000384 412693bb0bf4b173_40d91734313482e2,412693bb0bf4df3a_c0d30c9167e204ef,412693bb0bf4f693_40c45799b1c5e963 bath_210818_BNST_a,Vm_210818_BNST_a,I_210818_BNST_a stimulator,patch-Vm,patch-I [1] bed nucleus of stria terminalis (BNST) UBERON:0001880 0 76.9375 18-Aug-2021 15:25:43 18-Aug-2021 15:27:00 sodium chloride,potassium chloride,sodium bicarbonate,sodium phosphate, monobasic, anhydrous,calcium chloride dihydrate,D-glucose,magnesium chloride hexahydrate,pH,carbogen,osm NCIm:C0037494,NCIm:C0032825,NCIm:C0074722,NCIm:C1165377,CHEBI:86158,NCIm:C0017725,NCIm:C0724622,NCIm:C4048290,NCIm:CL1445492,NCIm:C0439186"},{"location":"NDI-matlab/tutorials/datasets/Francesconi_et_al_2025/1_getting_started/#filter-epochs","title":"Filter epochs","text":"<p>Try finding epochs matching a given criterion. Examples:</p> columnName dataValue stringMatch ApproachName optogenetic contains MixtureName FE201874 contains CellTypeName Type I BNST neuron identical global_t0 Jun-2023 contains <p>Type this into MATLAB:</p> <pre><code>% Search for epochs\ncolumnName = 'approachName';\ndataValue = 'optogenetic';\nstringMatch = 'contains';\nrowInd = ndi.fun.table.identifyMatchingRows(combinedSummary,...\n    columnName,dataValue,'stringMatch',stringMatch);\nfilteredEpochs = combinedSummary(rowInd,:)\n</code></pre>"},{"location":"NDI-matlab/tutorials/datasets/Francesconi_et_al_2025/1_getting_started/#plot-electrophysiology-data","title":"Plot electrophysiology data","text":"<p>Each subject is associated with a set of experimental epochs. One epoch corresponds to one of the original <code>.mat</code> files. Select a subject to view that subject's epochs and the associated stimulus conditions for each epoch. This may take a minute to load.</p> <p>Type this into MATLAB:</p> <pre><code>% Select a subject\nsubjectName = 'sd_rat_AVPCre_230706_BNSTIII_SON@dabrowska-lab.rosalindfranklin.edu'; % select a subject\nsubjectID = subjectSummary.SubjectDocumentIdentifier;\nsubjectNames = subjectSummary.SubjectLocalIdentifier;\nsubjectIndex = strcmpi(subjectNames,subjectName);\nepochIndex = ndi.fun.table.identifyMatchingRows(combinedSummary,...\n    'SubjectDocumentIdentifier',subjectID{subjectIndex});\n\n% Check that the subject has epochs\nif ~any(epochIndex)\n    error(['This subject is part of the behavioral dataset. ' ...\n        'Please select a subject in the electrophysiology dataset.'])\nend\n\n% Get the patch-Vm probe\npatchVm = session.getprobes('subject_id',subjectID{subjectIndex},...\n    'type','patch-Vm');\npatchVm = patchVm{1};\n\n% Get the patch-I probe\npatchI = session.getprobes('subject_id',subjectID{subjectIndex},...\n    'type','patch-I');\npatchI = patchI{1};\n\n% View summary table of epochs for this subject\nepochConditions = combinedSummary(epochIndex,:)\n</code></pre> <p>Select an epoch to view the associated electrophysiology traces. This may take a minute to load.</p> <p>Type this into MATLAB:</p> <pre><code>% Select an epoch\nepochNum = 3; % select an epoch\n\n% Read the patch-Vm timeseries\n[dataVm,time] = patchVm.readtimeseries(epochNum,-inf,inf);\n\n% Read the patch-I timeseries\n[dataI,~] = patchI.readtimeseries(epochNum,-inf,inf);\n\n% Find indices where traces start and end\ntraceStarts = find(diff([1;isnan(dataI)]) == -1);\ntraceEnds = find(diff([isnan(dataI);0]) == 1);\n\n% Get number of current steps and number of timepoints per step\nnumSteps = numel(traceStarts);\nnumTimepoints = max(traceEnds - traceStarts) + 1;\n\n% Reformat data into a matrix (time x steps)\ntimeMatrix = time(1:numTimepoints);\ndataVmMatrix = nan(numTimepoints,numSteps);\ndataIMatrix = nan(numTimepoints,numSteps);\nfor i = 1:numSteps\n    dataVmMatrix(:,i) = dataVm(traceStarts(i):traceEnds(i));\n    dataIMatrix(:,i) = dataI(traceStarts(i):traceEnds(i));\nend\n\n% Get current step values\n[~,rowInd] = max(abs(dataIMatrix));\ncolInd = 1:size(dataIMatrix,2);\nind = sub2ind(size(dataIMatrix),rowInd,colInd);\ncurrentSteps = dataIMatrix(ind);\n\n% Plot reformatted traces\nfigure; hold on; ax = gca;\ncolormap(ax, turbo); clim(ax, [min(currentSteps) max(currentSteps)]);\ncolors = turbo(max(currentSteps) - min(currentSteps) + 1);\nfor i = 1:size(dataVmMatrix, 2) % Iterate through each column of dataVmMatrix\n    colorInd = currentSteps(i) - min(currentSteps) + 1;\n    plot(ax,timeMatrix, dataVmMatrix(:, i), 'Color', colors(colorInd, :));\nend\nxlabel('Time (s)'); ylabel('Voltage (mV)')\ncb = colorbar(ax); cb.Label.String = 'Current (pA)';\n</code></pre> <p>You will see a plot that looks like:</p> <p></p>"},{"location":"NDI-matlab/tutorials/datasets/Francesconi_et_al_2025/1_getting_started/#plot-elevated-plus-maze-data","title":"Plot Elevated Plus Maze data","text":"<p>Type this into MATLAB:</p> <pre><code>% Get Elevated Plus Maze documents/table\nquery = ndi.query('ontologyTableRow.names','contains_string','Elevated Plus Maze');\ndocsEPM = session.database_search(query);\ntableEPM = ndi.fun.doc.ontologyTableRowDoc2Table(docsEPM); tableEPM = tableEPM{1};\nvarEPM = tableEPM.Properties.VariableNames;\n\n% Get list of all variables\n[fullNames,shortNames,ontologyNodes] = ...\n    ndi.fun.doc.ontologyTableRowVars(session);\n\n% Reorganize table variables\ntableEPM = ndi.fun.table.moveColumnsLeft(tableEPM,{'SubjectLocalIdentifier',...\n    'Treatment_CnoOrSalineAdministration','ExperimentalGroupCode',...\n    'ElevatedPlusMaze_TestIdentifier','DataExclusionFlag'})\n</code></pre> <p>You will see a table that looks like:</p> SubjectLocalIdentifier Treatment_CnoOrSalineAdministration ExperimentalGroupCode ElevatedPlusMaze_TestIdentifier DataExclusionFlag ElevatedPlusMaze_OpenArmNorth_Entries ElevatedPlusMaze_OpenArmSouth_Entries ElevatedPlusMaze_OpenArmTotalEntries ElevatedPlusMaze_OpenArmNorth_HeadEntries ElevatedPlusMaze_OpenArmSouth_HeadEntries ElevatedPlusMaze_OpenArmTotalHeadEntries ElevatedPlusMaze_OpenArmNorth_Time ElevatedPlusMaze_OpenArmSouth_Time ElevatedPlusMaze_OpenArmTotalTime ElevatedPlusMaze_OpenArmTotal_PercentTimeDuringTestDuration ElevatedPlusMaze_OpenArmNorth_LatencyToFirstEntry ElevatedPlusMaze_OpenArmSouth_LatencyToFirstEntry ElevatedPlusMaze_OpenArmTotalLatencyToFirstEntry ElevatedPlusMaze_OpenArmNorth_TimeMovingTowards ElevatedPlusMaze_OpenArmSouth_TimeMovingTowards ElevatedPlusMaze_OpenArmTotalTimeMovingTowards ElevatedPlusMaze_OpenArmNorth_TimeFreezing ElevatedPlusMaze_OpenArmSouth_TimeFreezing ElevatedPlusMaze_OpenArmTotalTimeFreezing ElevatedPlusMaze_ClosedArmWest_Entries ElevatedPlusMaze_ClosedArmEast_Entries ElevatedPlusMaze_ClosedArmTotalEntries ElevatedPlusMaze_ClosedArmWest_HeadEntries ElevatedPlusMaze_ClosedArmEast_HeadEntries ElevatedPlusMaze_ClosedArmTotalHeadEntries ElevatedPlusMaze_ClosedArmWest_Time ElevatedPlusMaze_ClosedArmEast_Time ElevatedPlusMaze_ClosedArmTotalTime ElevatedPlusMaze_ClosedArmTotal_PercentTimeDuringTestDuration ElevatedPlusMaze_ClosedArmWest_LatencyToFirstEntry ElevatedPlusMaze_ClosedArmEast_LatencyToFirstEntry ElevatedPlusMaze_ClosedArmTotalLatencyToFirstEntry ElevatedPlusMaze_ClosedArmWest_TimeMovingTowards ElevatedPlusMaze_ClosedArmEast_TimeMovingTowards ElevatedPlusMaze_ClosedArmTotalTimeMovingTowards ElevatedPlusMaze_ClosedArmWest_TimeFreezing ElevatedPlusMaze_ClosedArmEast_TimeFreezing ElevatedPlusMaze_ClosedArmTotalTimeFreezing ElevatedPlusMaze_Center_Entries ElevatedPlusMaze_Center_HeadEntries ElevatedPlusMaze_Center_Time ElevatedPlusMaze_Center_PercentTimeDuringTestDuration ElevatedPlusMaze_Center_LatencyToFirstEntry ElevatedPlusMaze_Center_TimeMovingTowards ElevatedPlusMaze_Center_TimeFreezing ElevatedPlusMaze_TestDuration <code>sd_rat_OTRCre_220819_175@dabrowska-lab.rosalindfranklin.edu</code> Saline 1 18 false 4 5 9 13 12 25 46.3 59.9 106.2 35.4000 0 18.4000 18.4 101.8 90.4 192.2 2.3 7 9.3 7 11 18 9 14 23 52.6 73.4 126 42 49.5 39.3 88.8 99.4 94.1 193.5 0 9.3 9.3 26 46 67.9000 22.6333 14.4000 188.9000 1.5000 300 <code>sd_rat_OTRCre_220819_180@dabrowska-lab.rosalindfranklin.edu</code> Saline 1 19 false 3 3 6 11 12 23 52.3 65.3 117.6 39.2000 0 37.3000 37.3 94.8 96.1 190.9 0 13.3 13.3 4 5 9 8 9 17 62.6 39 101.6 33.8667 53.9 22.2 76.1 99.8 80.5 180.3 0 0 0 15 40 80.8000 26.9333 18.4000 221.7000 7.4000 300 <code>sd_rat_OTRCre_220819_181@dabrowska-lab.rosalindfranklin.edu</code> CNO 1 26 false 4 0 4 9 22 31 8.2 0 8.2 2.7333 46.9000 46.9 80.3 89.4 169.7 1.3 0 1.3 10 15 25 7 19 26 73.6 124.5 198.1 66.0333 9.9 1.2 11.1 128.5 100.5 229 6.8 15.1 21.9 29 54 93.6000 31.2000 0 254.3000 6.6000 300 <code>sd_rat_OTRCre_220819_183@dabrowska-lab.rosalindfranklin.edu</code> CNO 1 13 false 6 4 10 8 13 21 37.2 67.9 105.1 35.0333 0 26.7000 26.7 95.6 71.9 167.5 0 7.3 7.3 4 8 12 11 9 20 59.4 68.4 127.8 42.6000 84.4 65.2 149.6 112 77.6 189.6 9 3.5 12.5 22 37 67.1000 22.9000 199 10.3000 300 <code>sd_rat_OTRCre_220819_195@dabrowska-lab.rosalindfranklin.edu</code> Saline 1 22 false 4 9 13 7 30 37 34.5 111.2 145.7 48.5667 30.9000 45.7000 76.6 82.9 59.3 142.2 1.9 18.3 20.2 4 3 7 7 8 15 26.4 26.3 52.7 17.5667 15.3 1.6 16.9 23.1 68.7 91.8 0 0 0 21 46 101.6000 33.8667 0 169.1000 16.9000 300 <p>Select a variable to view it's definition and plot the data.</p> <p>Type this into MATLAB:</p> <pre><code>% Define grouping and plotting variables\ngroupingVariable = 'Treatment_CnoOrSalineAdministration';\nplottingVariable = 'ElevatedPlusMaze_OpenArmNorth_Entries'; % select a variable to plot\n\n% Look up the variable in the ontology\ntermIndex = strcmpi(shortNames,plottingVariable);\ntermID = ontologyNodes{termIndex};\n[id,name,prefix,definition,synonyms,shortName] = ...\n    ndi.ontology.lookup(termID);\n\n% Get valid row indices\nvalidationFunc = @(x) isnumeric(x) &amp;&amp; isscalar(x) &amp;&amp; ~isnan(x);\nvalidRows = ~tableEPM.DataExclusionFlag; % missing mCherry expression\nif iscell(tableEPM.(plottingVariable)) % missing data points\n    validRows = validRows &amp; cellfun(validationFunc,tableEPM.(plottingVariable)); \nelse\n    validRows = validRows &amp; arrayfun(validationFunc,tableEPM.(plottingVariable));\nend\n\n% Display the variable's id, name, definition, and short name\ntermInfo = cell2table({id,name,definition,shortName}',...\n    'RowNames',{'id','name','definition','shortName'},...\n    'VariableNames',{'value'})\n</code></pre> <p>You will see a table that looks like:</p> Property Value id EMPTY:00000100 name Elevated Plus Maze: open arm (north) - entries definition In the Elevated Plus Maze task, this counts the number of times the animal's body (typically defined by its center point or a significant portion) fully enters the user-defined zone designated as 'Open Arm (North)'. The 'Open Arm (North)' is one of the two open arms, distinguished by its assigned 'north' orientation or designation in the experimental setup. Unit of measure: count shortName ElevatedPlusMaze_OpenArmNorth_Entries <p>Type this into MATLAB:</p> <pre><code>% Plot data\nx = categorical(tableEPM{validRows,groupingVariable});\ny = tableEPM{validRows,plottingVariable}; if iscell(y), y = cell2mat(y); end\nfigure; violinplot(y,x,'GroupOrder',{'Saline','CNO'});\nylabel(fullNames{termIndex})\n</code></pre> <p>You will see a plot that looks like:</p> <p></p>"},{"location":"NDI-matlab/tutorials/datasets/Francesconi_et_al_2025/1_getting_started/#plot-fear-potentiated-startle-data","title":"Plot Fear-Potentiated Startle data","text":"<p>Type this into MATLAB:</p> <pre><code>% Get Fear-Potentiated documents/table\nquery = ndi.query('ontologyTableRow.names','contains_string','Fear-Potentiated Startle');\ndocsFPS = session.database_search(query);\ntableFPS = ndi.fun.doc.ontologyTableRowDoc2Table(docsFPS); tableFPS = tableFPS{1};\n\n% Reorganize table variables\ntableFPS = ndi.fun.table.moveColumnsLeft(tableFPS,{'Fear_potentiatedStartle_ExperimentalPhaseOrTestName',...\n    'SubjectLocalIdentifier'})\n</code></pre> <p>You will see a table that looks like:</p> Fear_potentiatedStartle_ExperimentalPhaseOrTestName SubjectLocalIdentifier ExperimentalTrialNumber Fear_potentiatedStartle_TrialTypeIdentifier Fear_potentiatedStartle_ApparatusChamberIdentifier ExperimentalGroupCode AcousticStartleResponse_NumberOfSamples AcousticStartleResponse_SamplingRate AcousticStartleResponse_StartleWindowOnsetAmplitude AcousticStartleResponse_MaximumAmplitude AcousticStartleResponse_TimeToMaximumAmplitude AcousticStartleResponse_AverageAmplitude ExperimentTrialExecutionTimestamp Pre-test 1 <code>sd_rat_OTRCre_220819_175@dabrowska-lab.rosalindfranklin.edu</code> 1 Startle 95 dB Trial 1 3 200 1000 2 18 64 5 8/19/2022 10:27:46 AM Pre-test 1 <code>sd_rat_OTRCre_220819_175@dabrowska-lab.rosalindfranklin.edu</code> 2 Startle 95 dB Trial 1 3 200 1000 2 27 45 6 8/19/2022 10:28:19 AM Pre-test 1 <code>sd_rat_OTRCre_220819_175@dabrowska-lab.rosalindfranklin.edu</code> 3 Startle 95 dB Trial 1 3 200 1000 2 21 47 4 8/19/2022 10:28:52 AM Pre-test 1 <code>sd_rat_OTRCre_220819_175@dabrowska-lab.rosalindfranklin.edu</code> 4 Startle 95 dB Trial 1 3 200 1000 4 21 104 6 8/19/2022 10:29:24 AM Pre-test 1 <code>sd_rat_OTRCre_220819_175@dabrowska-lab.rosalindfranklin.edu</code> 5 Startle 95 dB Trial 1 3 200 1000 62 66 2 13 8/19/2022 10:29:57 AM <p>We can reanalyze this data to get the values reported in the paper (e.g. % of cued and non-cued fear).</p> <p>Type this into MATLAB:</p> <pre><code>% Get list of all variables\n[fullNames,shortNames,ontologyNodes] = ...\n    ndi.fun.doc.ontologyTableRowVars(session);\n\n% Get average startle amplitude for each context, subject, and trial\ntableStartleAmplitude = groupsummary(tableFPS,...\n    {'Fear_potentiatedStartle_ExperimentalPhaseOrTestName','SubjectLocalIdentifier',...\n    'Fear_potentiatedStartle_TrialTypeIdentifier'},...\n    'mean','AcousticStartleResponse_MaximumAmplitude');\nexperimentalPhases = unique(tableStartleAmplitude.Fear_potentiatedStartle_ExperimentalPhaseOrTestName);\nexperimentalPhases = experimentalPhases(contains(experimentalPhases,'Cue test'));\n\n% Get row indices corresponding to each trial type\nlightNoiseRows = strcmpi(tableStartleAmplitude.Fear_potentiatedStartle_TrialTypeIdentifier,'FPS (L+N) Testing Trial');\nnoiseOnlyRows = strcmpi(tableStartleAmplitude.Fear_potentiatedStartle_TrialTypeIdentifier,'FPS (N) Testing Trial');\nstartleRows = strcmpi(tableStartleAmplitude.Fear_potentiatedStartle_TrialTypeIdentifier,'Startle 95 dB Trial');\n\n% Get tables of startle amplitude for each trial type\ntableLightNoise = tableStartleAmplitude(lightNoiseRows,...\n    {'Fear_potentiatedStartle_ExperimentalPhaseOrTestName','SubjectLocalIdentifier','mean_AcousticStartleResponse_MaximumAmplitude'});\ntableNoiseOnly = tableStartleAmplitude(noiseOnlyRows,...\n    {'Fear_potentiatedStartle_ExperimentalPhaseOrTestName','SubjectLocalIdentifier','mean_AcousticStartleResponse_MaximumAmplitude'});\ntableStartle = tableStartleAmplitude(startleRows,...\n    {'Fear_potentiatedStartle_ExperimentalPhaseOrTestName','SubjectLocalIdentifier','mean_AcousticStartleResponse_MaximumAmplitude'});\n\n% Rename startle amplitude variable\ntableLightNoise = renamevars(tableLightNoise,'mean_AcousticStartleResponse_MaximumAmplitude','startleAmplitudeLightNoise');\ntableNoiseOnly = renamevars(tableNoiseOnly,'mean_AcousticStartleResponse_MaximumAmplitude','startleAmplitudeNoiseOnly');\ntableStartle = renamevars(tableStartle,'mean_AcousticStartleResponse_MaximumAmplitude','startleAmplitudeStartle');\n\n% Join trial type tables\ntableCueTest = join(tableLightNoise,tableNoiseOnly,...\n    'Keys',{'Fear_potentiatedStartle_ExperimentalPhaseOrTestName','SubjectLocalIdentifier'});\ntableCueTest = join(tableCueTest,tableStartle,...\n    'Keys',{'Fear_potentiatedStartle_ExperimentalPhaseOrTestName','SubjectLocalIdentifier'});\n\n% Calculate cued fear %\ntableCueTest.cuedFear = 100*(tableCueTest.startleAmplitudeLightNoise - ...\n    tableCueTest.startleAmplitudeNoiseOnly)./...\n    tableCueTest.startleAmplitudeNoiseOnly; % 100*(LN - N)/N\n\n% Calculate non-cued fear %\ntableCueTest.nonCuedFear = 100*(tableCueTest.startleAmplitudeNoiseOnly - ...\n    tableCueTest.startleAmplitudeStartle)./...\n    tableCueTest.startleAmplitudeStartle; % 100*(N - S)/S\n\nvarFPS = tableCueTest.Properties.VariableNames;\n\n% Display table\ntableCueTest\n</code></pre> <p>You will see a table that looks like:</p> Fear_potentiatedStartle_ExperimentalPhaseOrTestName SubjectLocalIdentifier startleAmplitudeLightNoise startleAmplitudeNoiseOnly startleAmplitudeStartle cuedFear nonCuedFear Cue test 1 <code>sd_rat_OTRCre_220819_175@dabrowska-lab.rosalindfranklin.edu</code> 38.7 28.4 22.1 36.268 28.507 Cue test 1 <code>sd_rat_OTRCre_220819_180@dabrowska-lab.rosalindfranklin.edu</code> 91.5 46.1 22.5 98.482 104.89 Cue test 1 <code>sd_rat_OTRCre_220819_181@dabrowska-lab.rosalindfranklin.edu</code> 87 13.8 11.5 530.43 20 Cue test 1 <code>sd_rat_OTRCre_220819_183@dabrowska-lab.rosalindfranklin.edu</code> 104.5 85.9 26.8 21.653 220.52 Cue test 1 <code>sd_rat_OTRCre_220819_195@dabrowska-lab.rosalindfranklin.edu</code> 214.1 36.2 53.8 491.44 -32.714 <p>Select an experimental phase and plotting variable to plot the data.</p> <p>Type this into MATLAB:</p> <pre><code>% Choose an experimental phase\nexperimentalPhase = 'Cue test 2'; % select experimental phase\n\n% Define grouping and plotting variables\ngroupingVariable = 'Treatment_CnoOrSalineAdministration';\nplottingVariable = 'cuedFear'; % select variable to plot\nplottingVariable = plottingVariable{1};\n\n% Add grouping variable info from EPM table\ntableCueTest = join(tableCueTest,tableEPM(:,{'SubjectLocalIdentifier',groupingVariable}));\n\n% Get row indices corresponding to the experimental phase\nphaseRows = strcmpi(tableCueTest.Fear_potentiatedStartle_ExperimentalPhaseOrTestName,experimentalPhase{1});\n\n% Plot data\nx = categorical(tableCueTest{phaseRows,groupingVariable});\ny = tableCueTest{phaseRows,plottingVariable};\nfigure; violinplot(y,x,'GroupOrder',{'Saline','CNO'});\nylabel(plottingVariable)\n</code></pre> <p>You will see a plot that looks like:</p> <p></p>"},{"location":"NDI-matlab/tutorials/making_documents/1_making_documents/","title":"Tutorial 8: Making your own NDI documents","text":""},{"location":"NDI-matlab/tutorials/making_documents/1_making_documents/#81-making-your-own-ndi-documents","title":"8.1: Making your own NDI documents","text":"<p>Creating an NDI document class involves creating two .JSON files. The first is a definition of the document class, and also includes blank fields. The second is a schema, that tells NDI what fields must be present and what form the data entries must have in order for the document to be \"valid\".</p>"},{"location":"NDI-matlab/tutorials/making_documents/1_making_documents/#811-designing-the-database-document","title":"8.1.1 Designing the database document","text":"<p>The first step in designing a database document is to decide where it goes. If you are designing a document for NDI proper, then it should go in a subdirectory of <code>NDI-matlab/ndi_common/database_documents</code>.</p> <p>Let's look at the design of the database document definition for ndi.calc.example.simple, which we placed in <code>ndi_common/database_documents/apps/calculations/simple_calc.json</code>:</p>"},{"location":"NDI-matlab/tutorials/making_documents/1_making_documents/#code-block-7221-database-documentation-definition-for-simple_calc-do-not-type-into-matlab-command-line","title":"Code block 7.2.2.1: Database documentation definition for <code>simple_calc</code> (Do not type into Matlab command line)","text":"<pre><code>{\n    \"document_class\": {\n        \"definition\":                       \"$NDIDOCUMENTPATH\\/apps\\/calculations\\/simple_calc.json\",\n        \"validation\":                       \"$NDISCHEMAPATH\\/apps\\/calculations\\/simple_calc_schema.json\",\n        \"class_name\":                       \"ndi_calculation_simple_simple_calc\",\n        \"property_list_name\":                   \"simple\",\n        \"class_version\":                    1,\n        \"superclasses\": [\n            { \"definition\":                 \"$NDIDOCUMENTPATH\\/ndi_document.json\" },\n            { \"definition\":                 \"$NDIDOCUMENTPATH\\/ndi_document_app.json\" }\n        ]\n    },\n    \"depends_on\": [\n        {   \"name\": \"probe_id\",\n            \"value\": 0 \n        }\n    ],\n    \"simple\": {\n        \"input_parameters\": {\n            \"answer\":                   5\n        },\n        \"answer\":                       0\n    }\n}\n</code></pre> <p>The first block, <code>document_class</code>, is necessary for any document defined in NDI. It includes the location of the definition file, the location of a file for validation (we will cover later), the class name, the <code>property_list_name</code> which tells NDI what the structure that has the main results (later on in the file), the class version (which is 1), and the superclasses of the document. The line that includes the definition for <code>ndi_document</code> indicates that simple calc documents have all the fields of an ndi.document, which must be true for any NDI document. In this case, this document also is a subclass of ndi_document_app, which allows information about the application that created the calculation to be recorded.</p> <p>In the next block, there is a set of \"depends_on\" fields, which indicate which dependencies are required for this document type. Here, we make the document that describes each probe as a dependency, so that the \"answer\" can be attributed to the probe by any program or user that examines the document. </p> <p>Finally, we have the data that is associated with our calculation in the structure <code>simple</code>. Because it is a document for an NDI calculation, it must contain a structure \"input_parameters\" that describe how the calculator should search for its inputs, if there are such parameters (or the structure can be empty if there are none). Last, we have the entries of the structure that contain the output of our calculation, which in this case is a simple field \"answer\".</p>"},{"location":"NDI-matlab/tutorials/making_documents/1_making_documents/#812-another-example","title":"8.1.2 Another example:","text":"<p>An openminds link to subjects:</p> <pre><code>{\n        \"document_class\": {\n                \"definition\":                                           \"$NDIDOCUMENTPATH\\/metadata\\/openminds_subject.json\",\n                \"validation\":                                           \"$NDISCHEMAPATH\\/metadata\\/openminds_subject.json\",\n                \"class_name\":                                           \"openminds_subject\",\n                \"property_list_name\":                                   \"openminds_subject\",\n                \"class_version\":                                        1,\n                \"superclasses\": [\n                        { \"definition\":                                 \"$NDIDOCUMENTPATH\\/base.json\",\n                          \"definition\":                                 \"$NDIDOCUMENTPATH\\/metadata\\/openminds.json\" }\n                ]\n        },\n        \"depends_on\": [\n                {       \"name\": \"subject_id\",\n                        \"value\": \"\"\n                }\n        ],\n        \"openminds_subject\": {\n        }\n}\n</code></pre> <p>This document class needs a schema that says what fields are required:</p> <pre><code>{\n        \"classname\": \"openminds_subject\",\n        \"superclasses\":  [ \"base\", \"openminds\" ],\n        \"depends_on\": [\n                { \"name\": \"subject_id\", \"mustbenotempty\": 1}\n        ],\n        \"file\": [ ],\n        \"openminds_subject\": [\n        ]\n}\n</code></pre>"},{"location":"NDI-matlab/tutorials/making_documents/1_making_documents/#813-discussionfeedback","title":"8.1.3 Discussion/Feedback","text":"<p>This concludes our tutorial on writing NDI documents.</p> <p>Post comments, bugs, questions, or discuss.</p>"},{"location":"NDI-matlab/tutorials/ndimodel/1_intro/","title":"Tutorial 1: Introduction","text":""},{"location":"NDI-matlab/tutorials/ndimodel/1_intro/#introduction","title":"Introduction","text":"<p>The Neuroscience Data Interface (NDI) is a software tool for reading neuroscience data and storing analyses and analyses of analyses in a database. Rather than requiring data to be stored in a particular way, NDI allows the user to specify the formats of the data to be read and its organization scheme, and the user retrieves parts of the data through the NDI application program interface. The database stores documents with both human-readable and binary components, so that complex data pipelines (analyses, and analyses of analyses) can be stored and searched. NDI allows an application ecosystem where applications can focus on calculations rather than data format or organization.</p> <p>In order to understand NDI and how to use it, it is important to understand 2 concepts:</p> <ul> <li>1.2 NDI concepts and vocabulary</li> <li>1.3 NDI software objects (to be built)</li> </ul>"},{"location":"NDI-matlab/tutorials/ndimodel/2_ndimodel_vocabulary/","title":"Tutorial 1: Introduction","text":""},{"location":"NDI-matlab/tutorials/ndimodel/2_ndimodel_vocabulary/#12-ndi-concepts-and-vocabulary","title":"1.2 NDI Concepts and vocabulary","text":"<p>In order to make NDI easy to use, we sought to codify the elements of actual experiments using specific terms, in much the same way that concepts like files, folders, and windows make modern computer operating systems easier to use.</p>"},{"location":"NDI-matlab/tutorials/ndimodel/2_ndimodel_vocabulary/#probes-subjects-elements-daq-systems","title":"Probes, subjects, elements, DAQ systems","text":"<p>We define a probe as an instrument that makes a measurement of or produces a stimulus for a subject. </p> <p>In this framework, a variety of experimental apparatus are considered probes. Examples of probes that make measurements include a whole cell pipette, a sharp electrode, a single channel extracellular electrode, multichannel electrodes with either known or unknown geometries, cameras, 2-photon microscopes, fMRI machines, nose-poke detectors, EMG electrodes, and EEG electrodes. Examples of probes that provide stimulation are odor ports, valve-driven interaural cannulae, food reward dispensers, visual stimulus monitors, audio speakers, and stimulating electrodes.</p> <p>A probe requires two important connections. The first connection is with a subject. This subject can be an experimental research animal, a human subject, a set of cells in a dish, a test resistor, the air, a potato, anything, but it must be named and given an identifier in NDI. </p> <p>The second important connection of a probe is to a data acquisition system that stores the measurements or the stimulation history of the probe. We term such a system a DAQ system. Each time a DAQ system is switched into record mode, an epoch of data is recorded. </p> <p>Probes are part of a broader class of experiment items that we term elements, which include not only concrete physical objects like probes but also inferred objects that are not observed directly, such as neurons in an extracellular recording experiment, or abstract quantities, such as simulated data, or a model of the information that an animal has about a stimulus at a given time.</p>"},{"location":"NDI-matlab/tutorials/ndimodel/2_ndimodel_vocabulary/#real-world-vocabulary","title":"Real world vocabulary","text":"<p>An example experiment. A probe is any instrument that can make a measurement from or provide stimulation to a subject. In this case, an electrode with an amplifier is monitoring signals in the cerebral cortex of a ferret. The electrode is a probe, and the ferret is a subject. A DAQ system is an instrument that digitally logs the measurements or stimulus history of a probe. In this case, a data acquisition system (DAQ) is logging the voltage values produced by the electrode's amplifier and storing the results in a file on a computer. An epoch is an interval of time during which a DAQ system is switched on and then off to make a recording. In this case, 3 epochs have been sampled. The experiment has additional experiment elements. One of these elements is a filtered version of the electrode data. A second element is a neuron, whose existence and spike times have been inferred by a spike analysis application and recorded in the experiment. </p>"},{"location":"NDI-matlab/tutorials/ndimodel/2_ndimodel_vocabulary/#real-world-vocabulary-elements","title":"Real world vocabulary: elements","text":"<p>In NDI, a wide variety of experiment items are called elements, of which probes are a subset. Examples of probes include multi-channel extracellular electrodes, reward wells, 2-photon microscopes, intrinsic signal imaging systems, intracellular or extracellular single electrodes, and visual stimulus monitors. Other elements include items that are directly linked to probes, such as filtered versions of signals, or inferred objects like neurons whose activities are inferred from extracellular recordings or images. Still, other elements have no physical derivation, such as artificial data or purely simulated data; nevertheless, we want to be able to treat these items identically in analysis pipelines. Finally, elements might be the result of complex modeling that depends on many other experiment elements, such as an inferred phenomenological model of the amount of information that an animal has about whether a stimulus is a grating.</p>"},{"location":"NDI-matlab/tutorials/ndimodel/2_ndimodel_vocabulary/#real-world-vocabulary-daq-systems","title":"Real world vocabulary: DAQ systems","text":"<p>DAQ systems digitally record probe measurements or histories of stimulator activity. In NDI, DAQ systems are logical entities, which could correspond physically to a single DAQ device made by a particular company (top) or a collection of home-brewed devices that operate together to have the behavior of a single DAQ device (bottom). In the bottom example, information from an electrode probe and digital triggers from a visual stimulation probe are acquired on a single DAQ device, but digital information from both systems (in separate files) is needed to fully describe the activity in each epoch.</p>"},{"location":"NDI-matlab/tutorials/ndimodel/2_ndimodel_vocabulary/#discussionfeedback","title":"Discussion/Feedback","text":"<p>Post comments, bugs, questions, or discuss.</p>"},{"location":"NDI-matlab/tutorials/writing_own_app/1_writing_own_app/","title":"Tutorial 7: Writing your own apps","text":""},{"location":"NDI-matlab/tutorials/writing_own_app/1_writing_own_app/#71-writing-a-simple-ndi-app","title":"7.1: Writing a simple ndi app","text":"<p>This tutorial covers writing an ndi.app in Matlab for NDI that uses the ndi.app.appdoc framework.</p> <p>The app we will make here, called ndi.app.tagger, is very simple, so it serves as a good example.</p>"},{"location":"NDI-matlab/tutorials/writing_own_app/1_writing_own_app/#711-deciding-what-the-app-will-do","title":"7.1.1 Deciding what the app will do","text":"<p>The first step in designing an app is to have a clear picture of what the app will do. </p> <p>Tagger was developed because there is a need to be able to specify metadata for ndi documents that is not part of their intrinsic parameters. For example, if you put a drug on your preparation, you might want to label certain epochs as belonging to that condition. The label would ideally conform to an ontology, which is a regulated vocabulary.</p> <p>In developing Tagger, we decided there were 2 types of documents that we would like to store. We would like to be able to put a \"tag\", or a label that also potentially has a value, onto any database document.  It has the same properties as a tag, but the name implies that the tag refers to a particular type of information, which is an experimental condition.</p> <p>That is, we want a single document type:</p> <ol> <li>A tag document that allows one to specify a name and value of a tag, the ontology that it comes from, and to have it \"depend on\" an NDI document id, so it is associated with a particular document.</li> </ol> <p>We want our app to be able to </p> <ol> <li>Add a tag to the database</li> <li>Find tags that match certain criteria</li> </ol>"},{"location":"NDI-matlab/tutorials/writing_own_app/1_writing_own_app/#712-discussing-the-design-of-the-app-to-ensure-it-is-a-very-good-way-of-solving-the-problem","title":"7.1.2 Discussing the design of the app to ensure it is a very good way of solving the problem","text":"<p>It is important to discuss the design of any new app to make sure that it is, at least, a very good way of solving the problem. I usually write out a few alternatives and a written \"debate\" among them.</p> Alternative idea Discussion Why not add the tags to database documents directly? NDI documents are not editable once created; they are designed to be made once, with a time stamp. Other calculations depend on these documents remaining in their original state. If we made NDI documents editable, then, potentially, all calculations based on that document would need to be updated. Instead, you can only delete documents entirely (which removes all dependent documents). Why not allow multiple tags to be added in a single database document? Won't limiting to 1 tag per document mean that there could be a lot of documents? The argument against is the same as the above. We can't edit NDI documents. If someone wants to modify or delete one of the entries, they would have to delete the whole document. Why not just have the user search for tags using the normal database querying? Why write a function to find the documents? This is not necessary but it is a helpful addition; the user could use normal database querying to discover the same things. We offer the function here in the app as a shortcut."},{"location":"NDI-matlab/tutorials/writing_own_app/1_writing_own_app/#713","title":"7.1.3","text":"<p>Now we need to add a new document type. There are 2 steps. First, we have to add a blank document that indicates the structure of the document. Second, we have to add a schema document that describes how the document is to be filled in.</p> <p>Here is the document. Since this is part of NDI, we put it in the <code>ndi_common/database_documents/apps/tagger/</code> directory:</p>"},{"location":"NDI-matlab/tutorials/writing_own_app/1_writing_own_app/#ndi_commondatabase_documentsappstaggertagjson","title":"ndi_common/database_documents/apps/tagger/tag.json","text":"<pre><code>{\n    \"document_class\": {\n        \"definition\":           \"$NDIDOCUMENTPATH\\/apps\\/tagger\\/tag.json\",\n        \"validation\":           \"$NDISCHEMAPATH\\/apps\\/tagger\\/tag.json\",\n        \"class_name\":           \"ndi_document_apps_tagger_tag\",\n        \"property_list_name\":   \"tag\",\n        \"class_version\":        1,\n        \"superclasses\": [\n            { \"definition\":     \"$NDIDOCUMENTPATH\\/ndi_document.json\" }\n        ]\n    },\n    \"depends_on\": [\n        {\n            \"name\":         \"document_id\",\n            \"value\":        \"\"\n        }\n    ],\n    \"tag\": {\n                \"ontology\":             \"\",\n                \"ontology_name\":        \"\",     \n                \"ontology_id\":          \"\",\n                \"value\":                \"\"\n    }\n}\n</code></pre> <p>INSERT DETAIL DESCRIBING DOCUMENT</p> <p>And the schema:</p>"},{"location":"NDI-matlab/tutorials/writing_own_app/1_writing_own_app/#ndi_commonschema_documentsappstaggertagjson","title":"ndi_common/schema_documents/apps/tagger/tag.json","text":"<pre><code>{\n    \"$schema\": \"http://json-schema.org/draft/2019-09/schema#\",\n    \"id\": \"$NDISCHEMAPATH\\/apps\\/ndi_document_apps_tagger_tag.json\",\n    \"title\": \"tag\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"ontology\": {\n            \"type\": \"string\",\n            \"doc_default_value\": \"none\",\n            \"doc_data_type\": \"character array (ASCII)\",\n            \"doc_description\": \"The name of the ontology to be used. At the present time it is okay to leave this blank and use a term that is outside an ontology.\"\n        },\n        \"ontology_name\": {\n            \"type\": \"string\",\n            \"doc_default_value\": \"\",\n            \"doc_data_type\": \"character array (ASCII)\",\n            \"doc_description\": \"The name of tag in the ontology. If an ontology is specified, this `ontology_name` must match a word in the ontology.\"\n        },\n        \"ontology_id\": {\n            \"type\": \"string\",\n            \"doc_default_value\": \"\",\n            \"doc_data_type\": \"character array (ASCII)\",\n            \"doc_description\": \"The ID of the word in the ontology. If an ontology is specified, the ID must match the ID of the word or element `ontology_name` in the ontology.\"\n        },\n        \"value\": {\n            \"type\": \"string\",\n            \"doc_default_value\": \"\",\n            \"doc_data_type\": \"character array (ASCII)\",\n            \"doc_description\": \"A field that may be associated with the tag. May be blank.\"\n        },\n        \"depends_on\" : {\n            \"type\" : \"array\",\n            \"items\" : [\n                {\n                    \"type\": \"object\", \n                    \"properties\" : {\n                        \"name\" : {\n                            \"const\" : \"document_id\"\n                        },\n                        \"value\" : {\n                            \"type\" : \"string\"\n                        }\n                    }\n                }\n            ]\n        }\n    }\n}\n</code></pre> <p>INSERT DETAIL DESCRIBING SCHEMA</p>"},{"location":"NDI-matlab/tutorials/writing_own_app/1_writing_own_app/#716-discussionfeedback","title":"7.1.6 Discussion/Feedback","text":"<p>This concludes our tutorial on writing a simple app in NDI.</p> <p>Post comments, bugs, questions, or discuss.</p>"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/","title":"Tutorial 7: Writing your own apps","text":""},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#72-writing-a-simple-calculation","title":"7.2: Writing a simple calculation","text":"<p>Usually, end user scientists do not want to develop an app, but instead want to develop a consistent and tested method for performing a calculation. We have developed an NDI mini-app class called ndi.calculation for that purpose.</p> <p>ndi.calculation objects require very little in the way of construction:</p> <ol> <li>A single document type that they produce</li> <li>A function that creates the document type from input parameters</li> <li>A function that searches for all possible inputs to the function</li> <li>A short documentation for the document type</li> </ol> <p>Once we have these ingredients, we have an ndi.calculation that can be run as simply as</p>"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7201-dont-type-into-the-matlab-command-line-until-the-end-at-the-bottom","title":"Code block 7.2.0.1 (Don't type into the Matlab command line until the end, at the bottom.)","text":"<pre><code>c = ndi.calc.example.simple(S); % where S is an ndi.session\nc.run('NoAction'); % will run but will not replace existing calculations with the same parameters\n</code></pre> <p>We will cover the develop of a very simple calculation: ndi.calc.example.simple</p>"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#721-ndicalcexamplesimple","title":"7.2.1 ndi.calc.example.simple","text":"<p>Our simple example will be very simple and silly, but illustrates the process of creating an ndi.calculation.</p> <p>We will create a calculation that creates a document for each 'ndi.probe' object that simply has a field called 'answer' that is equal to 5. It is not useful for anything other than demonstrating the steps necessary to create a calculation, but you can use it to design calculations that perform useful analysis and save the results to the database.  Let's design this very simple calculation.</p>"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#722-designing-the-database-document","title":"7.2.2 Designing the database document","text":"<p>Let's look at the design of the database document definition for ndi.calc.example.simple, which we placed in <code>ndi_common/database_documents/apps/calculations/simple_calc.json</code>:</p>"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7221-database-documentation-definition-for-simple_calc-do-not-type-into-matlab-command-line","title":"Code block 7.2.2.1: Database documentation definition for <code>simple_calc</code> (Do not type into Matlab command line)","text":"<pre><code>{\n    \"document_class\": {\n        \"definition\":                       \"$NDIDOCUMENTPATH\\/apps\\/calculations\\/simple_calc.json\",\n        \"validation\":                       \"$NDISCHEMAPATH\\/apps\\/calculations\\/simple_calc_schema.json\",\n        \"class_name\":                       \"ndi_calculation_simple_simple_calc\",\n        \"property_list_name\":                   \"simple\",\n        \"class_version\":                    1,\n        \"superclasses\": [\n            { \"definition\":                 \"$NDIDOCUMENTPATH\\/ndi_document.json\" },\n            { \"definition\":                 \"$NDIDOCUMENTPATH\\/ndi_document_app.json\" }\n        ]\n    },\n    \"depends_on\": [\n        {   \"name\": \"probe_id\",\n            \"value\": 0 \n        }\n    ],\n    \"simple\": {\n        \"input_parameters\": {\n            \"answer\":                   5\n        },\n        \"answer\":                       0\n    }\n}\n</code></pre> <p>The first block, <code>document_class</code>, is necessary for any document defined in NDI. It includes the location of the definition file, the location of a file for validation (we will cover later), the class name, the <code>property_list_name</code> which tells NDI what the structure that has the main results (later on in the file), the class version (which is 1), and the superclasses of the document. The line that includes the definition for <code>ndi_document</code> indicates that simple calc documents have all the fields of an ndi.document, which must be true for any NDI document. In this case, this document also is a subclass of ndi_document_app, which allows information about the application that created the calculation to be recorded.</p> <p>In the next block, there is a set of \"depends_on\" fields, which indicate which dependencies are required for this document type. Here, we make the document that describes each probe as a dependency, so that the \"answer\" can be attributed to the probe by any program or user that examines the document. </p> <p>Finally, we have the data that is associated with our calculation in the structure <code>simple</code>. Because it is a document for an NDI calculation, it must contain a structure \"input_parameters\" that describe how the calculator should search for its inputs, if there are such parameters (or the structure can be empty if there are none). Last, we have the entries of the structure that contain the output of our calculation, which in this case is a simple field \"answer\".</p>"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#723-writing-the-calculation-object-code","title":"7.2.3 Writing the calculation object code","text":"<p>We are now ready to write the calculation code. This is the code that we will call to make our calculation.  The code has four functions. </p> <p>The first function that is needed is the creator. This function has the same name as the class and does any building that is necessary to make the calculation function. Because ndi.calculation is a subclass of ndi.app and ndi.appdoc, most of our initialization is handled for us. Our code object <code>simple</code> is a subclass of ndi.calculation, which has a handy routine that can be used to tell the object what document it should make. </p> <p>Here is a snapshot of the creator function. Note that this code snippet can't stand on its own; we will give the full object code at the bottom.</p>"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7231-creator-for-ndicalcexamplesimple-do-not-type-into-matlab-command-line","title":"Code block 7.2.3.1: Creator for ndi.calc.example.simple (do not type into Matlab command line):","text":"<pre><code>        function simple_obj = simple(session)\n            % SIMPLE - a simple demonstration of an ndi.calculation object\n            %\n            % SIMPLE_OBJ = SIMPLE(SESSION)\n            %\n            % Creates a SIMPLE ndi.calculation object\n            %\n                ndi.globals;\n                simple_obj = simple_obj@ndi.calculation(session,'simple_calc',...\n                    fullfile(ndi_globals.path.documentpath,'apps','calculations','simple_calc.json'));\n        end; % simple()\n</code></pre> <p>The second function is the <code>calculate</code> function that actually performs the calculation, given inputs. The <code>parameters</code> input to <code>calculate</code> needs to have the same fields as the structure that holds the central data of the document; in this case, it needs to be a structure with the fields of <code>simple</code> in the document above (<code>input_parameters</code>, <code>depends_on</code>,<code>simple</code>).</p>"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7232-calculate-function-for-ndicalcexamplesimple-do-not-type-into-matlab-command-line","title":"Code block 7.2.3.2: <code>calculate</code> function for ndi.calc.example.simple (do not type into Matlab command line):","text":"<pre><code>    function doc = calculate(ndi_calculation_obj, parameters)\n        % CALCULATE - perform the calculation for ndi.calc.example.simple\n        %\n        % DOC = CALCULATE(NDI_CALCULATION_OBJ, PARAMETERS)\n        %\n        % Creates a simple_calc document given input parameters.\n        %\n        % The document that is created simple has an 'answer' that is given\n        % by the input parameters.\n            % check inputs\n            if ~isfield(parameters,'input_parameters'), error(['parameters structure lacks ''input_parameters.''']); end;\n            if ~isfield(parameters,'depends_on'), error(['parameters structure lacks ''depends_on.''']); end;\n\n            simple = parameters;\n            simple.answer = parameters.input_parameters.answer;\n            doc = ndi.document(ndi_calculation_obj.doc_document_types{1},'simple',simple);\n            for i=1:numel(parameters.depends_on),\n                doc = doc.set_dependency_value(parameters.depends_on(i).name,parameters.depends_on(i).value);\n            end;\n    end; % calculate\n</code></pre> <p>The function simply sets the <code>answer</code> field to the <code>answer</code> field of the input_parameters, and then sets the dependency that was input.</p> <p>You'll notice that the <code>calculate</code> function performs the calculation with its inputs fully set up. Some other function has set up the inputs  correctly so that the function can perform its calculation. The user can do this manually, but the best practice is to have the ndi.calculation object search for all of the possible inputs on which it can perform the calculation. This allows the calculation to be called simply by the <code>run</code> function. </p>"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7233-default_search_for_input_parameters-function-for-ndicalcexamplesimple-do-not-type-into-matlab-command-line","title":"Code block 7.2.3.3: <code>default_search_for_input_parameters</code> function for ndi.calc.example.simple (do not type into Matlab command line):","text":"<pre><code>        function parameters = default_search_for_input_parameters(ndi_calculation_obj)\n            % DEFAULT_SEARCH_FOR_INPUT_PARAMETERS - default parameters for searching for inputs\n            %\n            % PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATION_OBJ)\n            %\n            % Returns a list of the default search parameters for finding appropriate inputs\n            % to the calculation.\n            %\n                parameters.input_parameters = struct('answer',5);\n                parameters.depends_on = vlt.data.emptystruct('name','value');\n                parameters.query = struct('name','probe_id','query',ndi.query('element.ndi_element_class','contains_string','ndi.probe',''));\n        end; % default_search_for_input_parameters\n</code></pre> <p>The last function that we need is a documentation function that simply returns its own help as a text string. This allows other programs to see the documentation for the calculation, and gives programmers/users a consistent place in the help to look for a description of what the calculation does.</p>"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7234-doc_about-for-ndicalcexamplesimple-do-not-type-into-matlab-command-line","title":"Code block 7.2.3.4 <code>doc_about</code> for ndi.calc.example.simple (do not type into Matlab command line):","text":"<pre><code>        function doc_about(ndi_calculation_obj)\n            % ----------------------------------------------------------------------------------------------\n            % NDI_CALCULATION: SIMPLE_CALC\n            % ----------------------------------------------------------------------------------------------\n            %\n            %   ------------------------\n            %   | SIMPLE_CALC -- ABOUT |\n            %   ------------------------\n            %\n            %   SIMPLE_CALC is a demonstration document. It simply produces the 'answer' that\n            %   is provided in the input parameters. Each SIMPLE_CALC document 'depends_on' an\n            %   NDI daq system.\n            %\n            %   Definition: apps/simple_calc.json\n            %\n                eval(['help ndi.calc.example.simple.doc_about']);\n        end; %doc_about()\n</code></pre> <p>Putting it all together, we can look at the entire calculation:</p>"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7235-full-object-code-for-ndicalcexamplesimple","title":"Code block 7.2.3.5: Full object code for ndi.calc.example.simple:","text":"<pre><code>classdef simple &lt; ndi.calculation\n\n    methods\n\n        function simple_obj = simple(session)\n            % SIMPLE - a simple demonstration of an ndi.calculation object\n            %\n            % SIMPLE_OBJ = SIMPLE(SESSION)\n            %\n            % Creates a SIMPLE ndi.calculation object\n            %\n                ndi.globals;\n                simple_obj = simple_obj@ndi.calculation(session,'simple_calc',...\n                    fullfile(ndi_globals.path.documentpath,'apps','calculations','simple_calc.json'));\n        end; % simple()\n\n        function doc = calculate(ndi_calculation_obj, parameters)\n            % CALCULATE - perform the calculation for ndi.calc.example.simple\n            %\n            % DOC = CALCULATE(NDI_CALCULATION_OBJ, PARAMETERS)\n            %\n            % Creates a simple_calc document given input parameters.\n            %\n            % The document that is created simple has an 'answer' that is given\n            % by the input parameters.\n                % check inputs\n                if ~isfield(parameters,'input_parameters'), error(['parameters structure lacks ''input_parameters.''']); end;\n                if ~isfield(parameters,'depends_on'), error(['parameters structure lacks ''depends_on.''']); end;\n\n                simple = parameters;\n                simple.answer = parameters.input_parameters.answer;\n                doc = ndi.document(ndi_calculation_obj.doc_document_types{1},'simple',simple);\n                for i=1:numel(parameters.depends_on),\n                    doc = doc.set_dependency_value(parameters.depends_on(i).name,parameters.depends_on(i).value);\n                end;\n        end; % calculate\n\n        function parameters = default_search_for_input_parameters(ndi_calculation_obj)\n            % DEFAULT_SEARCH_FOR_INPUT_PARAMETERS - default parameters for searching for inputs\n            %\n            % PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATION_OBJ)\n            %\n            % Returns a list of the default search parameters for finding appropriate inputs\n            % to the calculation.\n            %\n                parameters.input_parameters = struct('answer',5);\n                parameters.depends_on = vlt.data.emptystruct('name','value');\n                parameters.query = struct('name','probe_id','query',ndi.query('element.ndi_element_class','contains_string','ndi.probe',''));\n        end; % default_search_for_input_parameters\n\n        function doc_about(ndi_calculation_obj)\n            % ----------------------------------------------------------------------------------------------\n            % NDI_CALCULATION: SIMPLE_CALC\n            % ----------------------------------------------------------------------------------------------\n            %\n            %   ------------------------\n            %   | SIMPLE_CALC -- ABOUT |\n            %   ------------------------\n            %\n            %   SIMPLE_CALC is a demonstration document. It simply produces the 'answer' that\n            %   is provided in the input parameters. Each SIMPLE_CALC document 'depends_on' an\n            %   NDI probe.\n            %\n            %   Definition: apps/simple_calc.json\n            %\n                eval(['help ndi.calc.example.simple.doc_about']);\n        end; %doc_about()\n    end; % methods()\n\nend % simple\n\n</code></pre>"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#731-running-the-calculation","title":"7.3.1 Running the calculation","text":"<p>Let's open our tree shrew experiment from Tutorials 2.1-2.5 to run the calculation.</p>"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7311-opening-the-tree-shrew-experiment-type-into-the-matlab-command-line","title":"Code block 7.3.1.1. Opening the tree shrew experiment (type into the Matlab command line).","text":"<pre><code>dirname = [userpath filesep 'Documents' filesep 'NDI' filesep 'ts_exper2']; % change this if you put the example somewhere else\nref = 'ts_exper2';\nS = ndi.session.dir(ref,dirname);\n</code></pre> <p>Now we can run the calculation, as in the beginning of the tutorial. We can run the calculation in one of two modes. </p> <p>In the first mode, we can run the calculation on all possible inputs. </p>"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7312-running-the-calculation-asking-the-program-to-find-all-possible-inputs-type-into-the-matlab-command-line","title":"Code block 7.3.1.2. Running the calculation, asking the program to find all possible inputs (type into the Matlab command line).","text":"<pre><code>c = ndi.calc.example.simple(S);\nd = c.run('NoAction'); % will run but will not replace existing calculations with the same parameters\n</code></pre> <p>Now let's search for the documents we just created, even though we had them returned in <code>d</code>. We will inspect the output.</p>"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7313-searching-for-the-calculations-we-made-type-into-matlab-command-line","title":"Code block 7.3.1.3. Searching for the calculations we made (type into Matlab command line).","text":"<pre><code>D = S.database_search(ndi.query('','isa','simple_calc',''));\nD{1}.document_properties.simple, % should be struct with field 'answer' == 5\nD{1}.document_properties.depends_on  % should have name of 'probe_id'\n</code></pre> <p>The other way to call a calculation is to use a very targeted set of parameters. If you want to perform your calculation only on specific items, such in the case of ndi.calc.example.simple, a specific probe or probes, then you can do that, too, by specifying the specific inputs that you want to search for. </p>"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#code-block-7314-running-the-calculation-asking-the-program-to-find-a-specific-input-to-the-calculation-type-into-the-matlab-command-line","title":"Code block 7.3.1.4 Running the calculation, asking the program to find a specific input to the calculation (type into the Matlab command line).","text":"<pre><code>p = S.getprobes('type','n-trode');\ndisp(['Probe {1} properties are as follows:']);\np{1}, % look at the probe properties\ninput_p.input_parameters.answer = 5;\ninput_p.depends_on = struct('name','probe_id','value',p{1}.id());\nd2 = c.run('Replace',input_p); % let's replace it\ndisp(['Document properties:']);\nd2{1}.document_properties.simple, % should be struct with field 'answer' == 5\nd2{1}.document_properties.depends_on  % should have name of 'probe_id' and p{1}'s probe id\n</code></pre> <p>One can use some additional queries to find specific or parameterized documents to use as inputs for a calculation. See <code>help ndi.calculation.search_for_input_parameters</code> or look at the ndi.calculation help page.</p>"},{"location":"NDI-matlab/tutorials/writing_own_app/2_ndi_calculations/#716-discussionfeedback","title":"7.1.6 Discussion/Feedback","text":"<p>This concludes our tutorial on writing a simple NDI calculation.</p> <p>Post comments, bugs, questions, or discuss.</p>"},{"location":"NDI-matlab/under_construction/EXAMPLE_USES/","title":"EXAMPLE USES","text":""},{"location":"NDI-matlab/under_construction/EXAMPLE_USES/#5-examples-of-recording-situations","title":"5 examples of recording situations","text":""},{"location":"NDI-matlab/under_construction/EXAMPLE_USES/#1-simple-1-device-1-probe-3-things","title":"1. Simple: 1 device, 1 probe, 3 things","text":"<p>An experimentor records spontaneously generated responses with a single intracellular electrode inserted in visual cortex. The analyst wants to examine the spiking responses of the neuron and the voltage responses of the neuron with the spiking artificially removed.</p> <p>Physical situation: There is a single physical hardware data acquisition system, in this case a system made by Cambridge Electronic Deisgn called the micro1401. A wire connects the electrode to an amplifier, and a wire from the amplifier connects to an input (let's say input 0) on the micro1401.</p> <p>The recording system is turned on to record a bout of spontaneous activity, and then turned off. Each time the recording is turned on, a file (.smr format) is written to disk. The software that manages the recording of the micro1401 is written by CED and is called Spike2.</p> <p>Let's say there are 3 recording epochs. Therefore, we have 3 .smr files (let's say at path epoch1/myfile.smr, epoch2/myotherfile.smr, epoch3/myotherfileagain.smr).</p> <p>NDI configuration: The raw data is managed by a member of the class <code>ndi_daqsystem</code>. There is a subclass, <code>ndi_daqsystem_mfdaq</code>, that implements a generic multi-function data acquisition system, which is a system that has analog inputs, analog outputs (which are records of signals that were output), digital inputs, digital outputs, and a clock. There is an <code>ndi_daqreader_mfdaq</code> class, and a specific subclass <code>ndi_daqreader_mfdaq_cedspike2</code> that implements the reading of the .smr files.</p> <p>We build an <code>ndi_daqsystem</code> object to add to the <code>ndi_experiment</code> object of this experiment, that we will call vhspike2 (for reading the electrode data). To do so, we need to create the 2 component objects of an <code>ndi_daqsystem</code>: an <code>ndi_daqreader</code> and an <code>ndi_filenavigator</code>. Let's say our experiment is in variable E.</p> <p><code>fileparams = ; d = ndi_daqsystem_mfdaq(ndi_daqreader_mfdaq_cedspike2(), ndi_filenavigator(fileparams));</code></p> <p>Now we can ask the device what epochs it has. </p> <p><code>et = d.epochtable();</code></p> <p>When we do this, the device asks its file_navigator to determine the epochs that it has (calling the file_navigator's epochtable() method), which searches the disk for occurrences of <code>.smr</code> files. If we study the epochtable that is returned, we see that it has 3 entries.</p> <p><code>et et(1)</code></p> <p>Each of these entries has a field <code>underlying</code> that allows us to examine the underlying details of the epoch.</p> <p><code>et(1).underlying</code></p> <p>The <code>ndi_epochset</code> class defines data structures and methods that manage these interdependent epochs. Each <code>ndi_daqsystem</code> has epochs that depend on the epochs of a file_navigator. <code>ndi_probe</code> objects have epochs that depend on the epochs of the underlying device that recorded the probe. An <code>ndi_thing</code> object is related to the epochs of the probe that provided evidence for it (although in the future we want to be able to define <code>ndi_thing</code> objects that are not necessarily related to a probe).</p> <p>We also create <code>ndi_thing</code> objects that are related to the data that is directly sampled from a probe. In this example, we create a <code>direct</code> thing that is equal to the data sampled from the probe (the raw voltage of the sampled data) and 2 <code>indirect</code> (or not <code>direct</code>) probes whose epochs are created from data that is derived from the probe. In the first case, we create a list of spike times by detecting the spike events in the waveform, and, in the second, we create filtered version of the data with the spike waveforms clipped out.</p> <p><code></code></p>"},{"location":"NDI-matlab/under_construction/EXAMPLE_USES/#2-typical-2-devices-2-probes-4-things","title":"2. Typical: 2 devices, 2 probes, 4 things","text":"<p>An experimentor records responses to visual stimulation with a single electrode inserted in visual cortex. The analyst wants to examine the responses of single neurons to visual stimulation and the local field potential response to visual stimulation.</p> <p>Physical situation: There is a single physical hardware data acquisition system, in this case a system made by Cambridge Electronic Deisgn called the micro1401. A wire connects the electrode to an amplifier, and a wire from the amplifier connects to an input (let's say input 0) on the micro1401. There is a visual stimulus computer that produces videos on a monitor, and also generates 14 digital timing pulses that are acquired on 14 digital inputs (let's say digital inputs 1..14):</p> <ol> <li>Stimulus trigger: trigger generated when a stimulus is shown</li> <li>Prestimulus trigger: trigger generated when system is ready to draw a stimulus (user-specified delay)</li> <li>Frame trigger: trigger generated when system updates the video image on the display</li> <li>Vertical blanking: trigger generated when monitor refreshes</li> <li>8 digital channels encode the stimulus identity from 0 (no stimulus) to 1..255</li> </ol> <p>The recording system is turned on to record a bout of visual stimulation, and then turned off. Each time the recording is turned on, a file (.smr format) is written to disk, and the visual stimulus computer also writes a detailed stims.mat file to disk that has a big list of parameters for each visual stimulus (how big it was, what its shape was, what its number was, etc). The software that manages the recording of the micro1401 is written by CED and is called Spike2.</p> <p>Let's say there are 3 recording epochs. Therefore, we have 3 .smr files (let's say at path epoch1/myfile.smr, epoch2/myotherfile.smr, epoch3/myotherfileagain.smr), and 3 stims.mat files (let's say at path epoch1/stims.mat, epoch2/stims.mat, epoch3/stims.mat).</p> <p>NDI configuration: We have created 2 <code>ndi_daqsystem</code> classes that assist in processing the data. These abstract classes are <code>ndi_daqsystem_mfdaq</code>, that implements a generic multi-function data acquisition system, and <code>ndi_daqsystem_stimulus</code> that implements a genetic stimulus system. There is an <code>ndi_daqreader_mfdaq</code> class, and a specific subclass <code>ndi_daqreader_mfdaq_cedspike2</code> that knows how to read the .smr files, and an <code>ndi_daqreader_mfdaq_stimulus_vhlabvisspike2</code> subclass that reads the timing information from .smr files and the stimulus parameter information from the stims.mat file. </p> <p>We build 2 ndi_daqsystem objects to add to the <code>ndi_experiment</code> object of this experiment, that we will call vhspike2 (for reading the electrode data) and another daq system object vhvis_spike2 that reads the triggers generated from the visual  stimulus computer. </p>"},{"location":"NDI-matlab/under_construction/GLOSSARY/","title":"NDI Glossary","text":"<p>Terms and conventions</p> <p>Channels, iodevices, etc are labeled from 1</p> <p>ndi_iodevicestring - A string that specifies the device name, channel type, and channel numbers that correspond to a particular ndi_epochrecord entry</p>"},{"location":"NDI-matlab/under_construction/PROBE-TYPES/","title":"Probe","text":"<p>In NDI, a probe is an instrument for observing or manipulating the experimental environment. Types of probes include recording or stimulating electrodes and the display or recording of information (whether visual, auditory, olfactory, gustatory, temperature, etc). Probes are distinct from devices, which are digital input/output devices that perform digital sampling or control of probes.</p> <p>The probes that are acquired or controlled in any device epoch are listed in the <code>ndi_epochcontents</code> object for that epoch. They include the following fields:</p> <p><code>ndi_epochcontents</code> fields:</p> <ul> <li>name: A name for the probe, must start with a letter and contain no whitespace but otherwise unrestricted</li> <li>reference: A reference for the probe; identical reference numbers indicate that NDI should try to combine data; (for example, if you move an electrode, one should change the reference number to indicate that the probe is being used differently); can be any non-negative integer</li> <li>type: The type of probe; must be a string that begins with a letter and has no whitespace; there are standard types (see below) but users can use any valid string for type.</li> <li>devicestring: A string that indicates the device (and channels) that have a digital record of the probe (see <code>ndi_devicestring</code>)</li> </ul> <p>Standard types:</p> Type Description Electrodes 'n-trode' A bundle of N extracellular electrodes that sample overlapping electric fields; the number of channels is calculated from the number of channels specified in the device string 'electrode-SPEC' An electrode of a specification that is contained in a reference SPEC (might contain a means of looking up electrode geometry, impedance / channel quality measurements, etc) 'patch' A whole cell patch electrode (two channels; first is Vm, second is I) 'patch-Vm' A whole cell patch electrode (single channel, specifies voltage recording) 'patch-I' A whole cell patch electrode (single channel, specifies current recording) 'patch-attached' A patch electrode in cell-attached configuration (single channel, specifies voltage recording) 'sharp' A sharp electrode (two channels; first is voltage, second is current) 'sharp-Vm' A sharp electrode (single channel, specifies voltage recording) 'sharp-I' A sharp electrode (single channel, specifies current recording) Imaging 'wide-field-imaging' Wide-field imaging data, as one might acquire with intrinsic signal imaging '2-photon-imaging' 2-photon fluorescent imaging data (laser-scanned or imaged) '1-photon-imaging' 1-photon fluorescent imaging (laser-scanned or imaged) 'brightfield-imaging' Brightfield images Stimulators 'display' An instrument that displays patterns with light 'stim-n-trode' An N-channel extracellular electrode stimulator; the number of channels is calculated from the number of channels specified in the device string 'n-LED' An N-channel LED stimulator; the number of channels is calculated from the number of channels specified in the device string Environment Lick-spout A lick-spout Intraoral-cannula An intraoral cannula Reward-well A reward well"},{"location":"developer_notes/developer-journal/","title":"Developer (Steve's) journal","text":"<p>This is a journal of developer thoughts. It is not a change log (that is in git) or an issue list.</p>"},{"location":"developer_notes/developer-journal/#2019-08-05","title":"2019-08-05","text":"<p>Current workflow to change object names:</p> <p>searchreplacefiles_shell('*.txt',upper('epochcontents'),upper('epochprobemap'))</p> <p>(need to change .txt, .m, object* files typically)</p> <p>filenamesearchreplace(pwd,{'epochcontents'},{'epochprobemap'},'deleteOriginals',1,'noOp',1,'recursive',1)</p> <p>(need to set noOp to 0 to make it run)</p>"},{"location":"developer_notes/developer-journal/#2019-01-03","title":"2019-01-03","text":"<p>We had the kick-off meeting with Squishymedia today. </p> <p>I would like to understand a bit more about JSON databases: what is json hyper schema for example.</p> <p>Is our best database implementation related to open-neuro, MongoDB Stitch, Google Firebase?</p> <p>We wondered if the file reading could somehow be encapsulated in the database rather than as a separate entity?</p>"},{"location":"developer_notes/developer-journal/#2019-01-04","title":"2019-01-04","text":"<p>I need to keep making progress on our analysis of Arani's intracellular data. I will put development questions aside and just use the system for a few days.</p> <p>I will keep working on the draft paper, but only 30 minutes/day</p> <p>I will only fix small bugs in code and docs needed to propel work on intracellular data</p>"}]}